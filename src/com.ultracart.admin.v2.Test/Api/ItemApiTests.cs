/* 
 * UltraCart Rest API V2
 *
 * This is the next generation UltraCart REST API...
 *
 * OpenAPI spec version: 2.0.0
 * Contact: support@ultracart.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using com.ultracart.admin.v2.Client;
using com.ultracart.admin.v2.Api;
using com.ultracart.admin.v2.Model;

namespace com.ultracart.admin.v2.Test
{
    /// <summary>
    ///  Class for testing ItemApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class ItemApiTests
    {
        private ItemApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new ItemApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of ItemApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' ItemApi
            //Assert.IsInstanceOfType(typeof(ItemApi), instance, "instance is a ItemApi");
        }

        
        /// <summary>
        /// Test ItemItemsGet
        /// </summary>
        [Test]
        public void ItemItemsGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? parentCategoryId = null;
            //var response = instance.ItemItemsGet(parentCategoryId);
            //Assert.IsInstanceOf<ItemsResponse> (response, "response is ItemsResponse");
        }
        
        /// <summary>
        /// Test ItemItemsMerchantItemOidDelete
        /// </summary>
        [Test]
        public void ItemItemsMerchantItemOidDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? merchantItemOid = null;
            //instance.ItemItemsMerchantItemOidDelete(merchantItemOid);
            
        }
        
        /// <summary>
        /// Test ItemItemsMerchantItemOidGet
        /// </summary>
        [Test]
        public void ItemItemsMerchantItemOidGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? merchantItemOid = null;
            //var response = instance.ItemItemsMerchantItemOidGet(merchantItemOid);
            //Assert.IsInstanceOf<ItemResponse> (response, "response is ItemResponse");
        }
        
        /// <summary>
        /// Test ItemItemsMerchantItemOidPut
        /// </summary>
        [Test]
        public void ItemItemsMerchantItemOidPutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Item item = null;
            //int? merchantItemOid = null;
            //var response = instance.ItemItemsMerchantItemOidPut(item, merchantItemOid);
            //Assert.IsInstanceOf<ItemResponse> (response, "response is ItemResponse");
        }
        
        /// <summary>
        /// Test ItemItemsPost
        /// </summary>
        [Test]
        public void ItemItemsPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Item item = null;
            //var response = instance.ItemItemsPost(item);
            //Assert.IsInstanceOf<ItemResponse> (response, "response is ItemResponse");
        }
        
        /// <summary>
        /// Test ItemTempMultimediaPost
        /// </summary>
        [Test]
        public void ItemTempMultimediaPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //System.IO.Stream file = null;
            //var response = instance.ItemTempMultimediaPost(file);
            //Assert.IsInstanceOf<TempMultimediaResponse> (response, "response is TempMultimediaResponse");
        }
        
    }

}
