/*
 * UltraCart Rest API V2
 *
 * UltraCart REST API Version 2
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@ultracart.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Threading;
using RestSharp;
using com.ultracart.admin.v2.Client;
using com.ultracart.admin.v2.Model;

namespace com.ultracart.admin.v2.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IAutoOrderApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Consolidates multiple auto orders
        /// </summary>
        /// <remarks>
        /// Consolidates mutliple auto orders on the UltraCart account. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="autoOrderOid">The auto order oid to consolidate into.</param>
        /// <param name="autoOrderConsolidate">Auto orders to consolidate</param>
        /// <param name="expand">The object expansion to perform on the result.  See documentation for examples (optional)</param>
        /// <returns>AutoOrderResponse</returns>
        AutoOrderResponse ConsolidateAutoOrders (int autoOrderOid, AutoOrderConsolidate autoOrderConsolidate, string expand = default(string));

        /// <summary>
        /// Consolidates multiple auto orders
        /// </summary>
        /// <remarks>
        /// Consolidates mutliple auto orders on the UltraCart account. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="autoOrderOid">The auto order oid to consolidate into.</param>
        /// <param name="autoOrderConsolidate">Auto orders to consolidate</param>
        /// <param name="expand">The object expansion to perform on the result.  See documentation for examples (optional)</param>
        /// <returns>ApiResponse of AutoOrderResponse</returns>
        ApiResponse<AutoOrderResponse> ConsolidateAutoOrdersWithHttpInfo (int autoOrderOid, AutoOrderConsolidate autoOrderConsolidate, string expand = default(string));
        /// <summary>
        /// Establish an auto order by referencing a regular order id
        /// </summary>
        /// <remarks>
        /// Establish an auto order by referencing a regular order id.  The result will be an auto order without any items.  You should add the items and perform an update call.  Orders must be less than 60 days old and use a credit card payment. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="referenceOrderId">The order id to attach this auto order to</param>
        /// <param name="expand">The object expansion to perform on the result.  See documentation for examples (optional)</param>
        /// <returns>AutoOrderResponse</returns>
        AutoOrderResponse EstablishAutoOrderByReferenceOrderId (string referenceOrderId, string expand = default(string));

        /// <summary>
        /// Establish an auto order by referencing a regular order id
        /// </summary>
        /// <remarks>
        /// Establish an auto order by referencing a regular order id.  The result will be an auto order without any items.  You should add the items and perform an update call.  Orders must be less than 60 days old and use a credit card payment. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="referenceOrderId">The order id to attach this auto order to</param>
        /// <param name="expand">The object expansion to perform on the result.  See documentation for examples (optional)</param>
        /// <returns>ApiResponse of AutoOrderResponse</returns>
        ApiResponse<AutoOrderResponse> EstablishAutoOrderByReferenceOrderIdWithHttpInfo (string referenceOrderId, string expand = default(string));
        /// <summary>
        /// Retrieve an auto order by oid
        /// </summary>
        /// <remarks>
        /// Retrieves a single auto order using the specified auto order oid. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="autoOrderOid">The auto order oid to retrieve.</param>
        /// <param name="expand">The object expansion to perform on the result.  See documentation for examples (optional)</param>
        /// <returns>AutoOrderResponse</returns>
        AutoOrderResponse GetAutoOrder (int autoOrderOid, string expand = default(string));

        /// <summary>
        /// Retrieve an auto order by oid
        /// </summary>
        /// <remarks>
        /// Retrieves a single auto order using the specified auto order oid. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="autoOrderOid">The auto order oid to retrieve.</param>
        /// <param name="expand">The object expansion to perform on the result.  See documentation for examples (optional)</param>
        /// <returns>ApiResponse of AutoOrderResponse</returns>
        ApiResponse<AutoOrderResponse> GetAutoOrderWithHttpInfo (int autoOrderOid, string expand = default(string));
        /// <summary>
        /// Retrieve an auto order by code
        /// </summary>
        /// <remarks>
        /// Retrieves a single auto order using the specified reference (original) order id. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="autoOrderCode">The auto order oid to retrieve.</param>
        /// <param name="expand">The object expansion to perform on the result.  See documentation for examples (optional)</param>
        /// <returns>AutoOrderResponse</returns>
        AutoOrderResponse GetAutoOrderByCode (string autoOrderCode, string expand = default(string));

        /// <summary>
        /// Retrieve an auto order by code
        /// </summary>
        /// <remarks>
        /// Retrieves a single auto order using the specified reference (original) order id. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="autoOrderCode">The auto order oid to retrieve.</param>
        /// <param name="expand">The object expansion to perform on the result.  See documentation for examples (optional)</param>
        /// <returns>ApiResponse of AutoOrderResponse</returns>
        ApiResponse<AutoOrderResponse> GetAutoOrderByCodeWithHttpInfo (string autoOrderCode, string expand = default(string));
        /// <summary>
        /// Retrieve an auto order by order id
        /// </summary>
        /// <remarks>
        /// Retrieves a single auto order using the specified reference (original) order id. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="referenceOrderId">The auto order oid to retrieve.</param>
        /// <param name="expand">The object expansion to perform on the result.  See documentation for examples (optional)</param>
        /// <returns>AutoOrderResponse</returns>
        AutoOrderResponse GetAutoOrderByReferenceOrderId (string referenceOrderId, string expand = default(string));

        /// <summary>
        /// Retrieve an auto order by order id
        /// </summary>
        /// <remarks>
        /// Retrieves a single auto order using the specified reference (original) order id. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="referenceOrderId">The auto order oid to retrieve.</param>
        /// <param name="expand">The object expansion to perform on the result.  See documentation for examples (optional)</param>
        /// <returns>ApiResponse of AutoOrderResponse</returns>
        ApiResponse<AutoOrderResponse> GetAutoOrderByReferenceOrderIdWithHttpInfo (string referenceOrderId, string expand = default(string));
        /// <summary>
        /// Retrieve auto orders
        /// </summary>
        /// <remarks>
        /// Retrieves auto orders from the account.  If no parameters are specified, all auto orders will be returned.  You will need to make multiple API calls in order to retrieve the entire result set since this API performs result set pagination. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="autoOrderCode">Auto order code (optional)</param>
        /// <param name="originalOrderId">Original order id (optional)</param>
        /// <param name="firstName">First name (optional)</param>
        /// <param name="lastName">Last name (optional)</param>
        /// <param name="company">Company (optional)</param>
        /// <param name="city">City (optional)</param>
        /// <param name="state">State (optional)</param>
        /// <param name="postalCode">Postal code (optional)</param>
        /// <param name="countryCode">Country code (ISO-3166 two letter) (optional)</param>
        /// <param name="phone">Phone (optional)</param>
        /// <param name="email">Email (optional)</param>
        /// <param name="originalOrderDateBegin">Original order date begin (optional)</param>
        /// <param name="originalOrderDateEnd">Original order date end (optional)</param>
        /// <param name="nextShipmentDateBegin">Next shipment date begin (optional)</param>
        /// <param name="nextShipmentDateEnd">Next shipment date end (optional)</param>
        /// <param name="cardType">Card type (optional)</param>
        /// <param name="itemId">Item ID (optional)</param>
        /// <param name="status">Status (optional)</param>
        /// <param name="limit">The maximum number of records to return on this one API call. (Max 200) (optional, default to 100)</param>
        /// <param name="offset">Pagination of the record set.  Offset is a zero based index. (optional, default to 0)</param>
        /// <param name="since">Fetch auto orders that have been created/modified since this date/time. (optional)</param>
        /// <param name="sort">The sort order of the auto orders.  See Sorting documentation for examples of using multiple values and sorting by ascending and descending. (optional)</param>
        /// <param name="expand">The object expansion to perform on the result.  See documentation for examples (optional)</param>
        /// <returns>AutoOrdersResponse</returns>
        AutoOrdersResponse GetAutoOrders (string autoOrderCode = default(string), string originalOrderId = default(string), string firstName = default(string), string lastName = default(string), string company = default(string), string city = default(string), string state = default(string), string postalCode = default(string), string countryCode = default(string), string phone = default(string), string email = default(string), string originalOrderDateBegin = default(string), string originalOrderDateEnd = default(string), string nextShipmentDateBegin = default(string), string nextShipmentDateEnd = default(string), string cardType = default(string), string itemId = default(string), string status = default(string), int? limit = default(int?), int? offset = default(int?), string since = default(string), string sort = default(string), string expand = default(string));

        /// <summary>
        /// Retrieve auto orders
        /// </summary>
        /// <remarks>
        /// Retrieves auto orders from the account.  If no parameters are specified, all auto orders will be returned.  You will need to make multiple API calls in order to retrieve the entire result set since this API performs result set pagination. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="autoOrderCode">Auto order code (optional)</param>
        /// <param name="originalOrderId">Original order id (optional)</param>
        /// <param name="firstName">First name (optional)</param>
        /// <param name="lastName">Last name (optional)</param>
        /// <param name="company">Company (optional)</param>
        /// <param name="city">City (optional)</param>
        /// <param name="state">State (optional)</param>
        /// <param name="postalCode">Postal code (optional)</param>
        /// <param name="countryCode">Country code (ISO-3166 two letter) (optional)</param>
        /// <param name="phone">Phone (optional)</param>
        /// <param name="email">Email (optional)</param>
        /// <param name="originalOrderDateBegin">Original order date begin (optional)</param>
        /// <param name="originalOrderDateEnd">Original order date end (optional)</param>
        /// <param name="nextShipmentDateBegin">Next shipment date begin (optional)</param>
        /// <param name="nextShipmentDateEnd">Next shipment date end (optional)</param>
        /// <param name="cardType">Card type (optional)</param>
        /// <param name="itemId">Item ID (optional)</param>
        /// <param name="status">Status (optional)</param>
        /// <param name="limit">The maximum number of records to return on this one API call. (Max 200) (optional, default to 100)</param>
        /// <param name="offset">Pagination of the record set.  Offset is a zero based index. (optional, default to 0)</param>
        /// <param name="since">Fetch auto orders that have been created/modified since this date/time. (optional)</param>
        /// <param name="sort">The sort order of the auto orders.  See Sorting documentation for examples of using multiple values and sorting by ascending and descending. (optional)</param>
        /// <param name="expand">The object expansion to perform on the result.  See documentation for examples (optional)</param>
        /// <returns>ApiResponse of AutoOrdersResponse</returns>
        ApiResponse<AutoOrdersResponse> GetAutoOrdersWithHttpInfo (string autoOrderCode = default(string), string originalOrderId = default(string), string firstName = default(string), string lastName = default(string), string company = default(string), string city = default(string), string state = default(string), string postalCode = default(string), string countryCode = default(string), string phone = default(string), string email = default(string), string originalOrderDateBegin = default(string), string originalOrderDateEnd = default(string), string nextShipmentDateBegin = default(string), string nextShipmentDateEnd = default(string), string cardType = default(string), string itemId = default(string), string status = default(string), int? limit = default(int?), int? offset = default(int?), string since = default(string), string sort = default(string), string expand = default(string));
        /// <summary>
        /// Retrieve auto order batch
        /// </summary>
        /// <remarks>
        /// Retrieves a group of auto orders from the account based on an array of auto order oids.  If more than 200 auto order ids are specified, the API call will fail with a bad request error. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="autoOrderBatch">Auto order batch</param>
        /// <param name="expand">The object expansion to perform on the result. (optional)</param>
        /// <returns>AutoOrdersResponse</returns>
        AutoOrdersResponse GetAutoOrdersBatch (AutoOrderQueryBatch autoOrderBatch, string expand = default(string));

        /// <summary>
        /// Retrieve auto order batch
        /// </summary>
        /// <remarks>
        /// Retrieves a group of auto orders from the account based on an array of auto order oids.  If more than 200 auto order ids are specified, the API call will fail with a bad request error. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="autoOrderBatch">Auto order batch</param>
        /// <param name="expand">The object expansion to perform on the result. (optional)</param>
        /// <returns>ApiResponse of AutoOrdersResponse</returns>
        ApiResponse<AutoOrdersResponse> GetAutoOrdersBatchWithHttpInfo (AutoOrderQueryBatch autoOrderBatch, string expand = default(string));
        /// <summary>
        /// Retrieve auto orders by query
        /// </summary>
        /// <remarks>
        /// Retrieves a group of auto orders from the account based on a query object.  You will need to make multiple API calls in order to retrieve the entire result set since this API performs result set pagination. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="autoOrderQuery">Auto order query</param>
        /// <param name="limit">The maximum number of records to return on this one API call. (Maximum 200) (optional, default to 100)</param>
        /// <param name="offset">Pagination of the record set.  Offset is a zero based index. (optional, default to 0)</param>
        /// <param name="sort">The sort order of the auto orders.  See Sorting documentation for examples of using multiple values and sorting by ascending and descending. (optional)</param>
        /// <param name="expand">The object expansion to perform on the result. (optional)</param>
        /// <returns>AutoOrdersResponse</returns>
        AutoOrdersResponse GetAutoOrdersByQuery (AutoOrderQuery autoOrderQuery, int? limit = default(int?), int? offset = default(int?), string sort = default(string), string expand = default(string));

        /// <summary>
        /// Retrieve auto orders by query
        /// </summary>
        /// <remarks>
        /// Retrieves a group of auto orders from the account based on a query object.  You will need to make multiple API calls in order to retrieve the entire result set since this API performs result set pagination. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="autoOrderQuery">Auto order query</param>
        /// <param name="limit">The maximum number of records to return on this one API call. (Maximum 200) (optional, default to 100)</param>
        /// <param name="offset">Pagination of the record set.  Offset is a zero based index. (optional, default to 0)</param>
        /// <param name="sort">The sort order of the auto orders.  See Sorting documentation for examples of using multiple values and sorting by ascending and descending. (optional)</param>
        /// <param name="expand">The object expansion to perform on the result. (optional)</param>
        /// <returns>ApiResponse of AutoOrdersResponse</returns>
        ApiResponse<AutoOrdersResponse> GetAutoOrdersByQueryWithHttpInfo (AutoOrderQuery autoOrderQuery, int? limit = default(int?), int? offset = default(int?), string sort = default(string), string expand = default(string));
        /// <summary>
        /// Pause auto order
        /// </summary>
        /// <remarks>
        /// Completely pause an auto order 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="autoOrderOid">The auto order oid to pause.</param>
        /// <param name="autoOrder">Auto orders to pause</param>
        /// <param name="expand">The object expansion to perform on the result.  See documentation for examples (optional)</param>
        /// <returns>AutoOrderResponse</returns>
        AutoOrderResponse PauseAutoOrder (int autoOrderOid, AutoOrder autoOrder, string expand = default(string));

        /// <summary>
        /// Pause auto order
        /// </summary>
        /// <remarks>
        /// Completely pause an auto order 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="autoOrderOid">The auto order oid to pause.</param>
        /// <param name="autoOrder">Auto orders to pause</param>
        /// <param name="expand">The object expansion to perform on the result.  See documentation for examples (optional)</param>
        /// <returns>ApiResponse of AutoOrderResponse</returns>
        ApiResponse<AutoOrderResponse> PauseAutoOrderWithHttpInfo (int autoOrderOid, AutoOrder autoOrder, string expand = default(string));
        /// <summary>
        /// Update an auto order
        /// </summary>
        /// <remarks>
        /// Update an auto order on the UltraCart account. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="autoOrderOid">The auto order oid to update.</param>
        /// <param name="autoOrder">Auto order to update</param>
        /// <param name="validateOriginalOrder">Validate original order before updating (optional)</param>
        /// <param name="expand">The object expansion to perform on the result.  See documentation for examples (optional)</param>
        /// <returns>AutoOrderResponse</returns>
        AutoOrderResponse UpdateAutoOrder (int autoOrderOid, AutoOrder autoOrder, string validateOriginalOrder = default(string), string expand = default(string));

        /// <summary>
        /// Update an auto order
        /// </summary>
        /// <remarks>
        /// Update an auto order on the UltraCart account. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="autoOrderOid">The auto order oid to update.</param>
        /// <param name="autoOrder">Auto order to update</param>
        /// <param name="validateOriginalOrder">Validate original order before updating (optional)</param>
        /// <param name="expand">The object expansion to perform on the result.  See documentation for examples (optional)</param>
        /// <returns>ApiResponse of AutoOrderResponse</returns>
        ApiResponse<AutoOrderResponse> UpdateAutoOrderWithHttpInfo (int autoOrderOid, AutoOrder autoOrder, string validateOriginalOrder = default(string), string expand = default(string));
        /// <summary>
        /// Update multiple auto orders
        /// </summary>
        /// <remarks>
        /// Update multiple auto orders on the UltraCart account. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="autoOrdersRequest">Auto orders to update (synchronous maximum 20 / asynchronous maximum 100)</param>
        /// <param name="expand">The object expansion to perform on the result.  See documentation for examples (optional)</param>
        /// <param name="placeholders">Whether or not placeholder values should be returned in the result.  Useful for UIs that consume this REST API. (optional)</param>
        /// <param name="async">True if the operation should be run async.  No result returned (optional)</param>
        /// <returns>AutoOrdersResponse</returns>
        AutoOrdersResponse UpdateAutoOrdersBatch (AutoOrdersRequest autoOrdersRequest, string expand = default(string), bool? placeholders = default(bool?), bool? async = default(bool?));

        /// <summary>
        /// Update multiple auto orders
        /// </summary>
        /// <remarks>
        /// Update multiple auto orders on the UltraCart account. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="autoOrdersRequest">Auto orders to update (synchronous maximum 20 / asynchronous maximum 100)</param>
        /// <param name="expand">The object expansion to perform on the result.  See documentation for examples (optional)</param>
        /// <param name="placeholders">Whether or not placeholder values should be returned in the result.  Useful for UIs that consume this REST API. (optional)</param>
        /// <param name="async">True if the operation should be run async.  No result returned (optional)</param>
        /// <returns>ApiResponse of AutoOrdersResponse</returns>
        ApiResponse<AutoOrdersResponse> UpdateAutoOrdersBatchWithHttpInfo (AutoOrdersRequest autoOrdersRequest, string expand = default(string), bool? placeholders = default(bool?), bool? async = default(bool?));
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Consolidates multiple auto orders
        /// </summary>
        /// <remarks>
        /// Consolidates mutliple auto orders on the UltraCart account. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="autoOrderOid">The auto order oid to consolidate into.</param>
        /// <param name="autoOrderConsolidate">Auto orders to consolidate</param>
        /// <param name="expand">The object expansion to perform on the result.  See documentation for examples (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of AutoOrderResponse</returns>
        System.Threading.Tasks.Task<AutoOrderResponse> ConsolidateAutoOrdersAsync (int autoOrderOid, AutoOrderConsolidate autoOrderConsolidate, string expand = default(string), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Consolidates multiple auto orders
        /// </summary>
        /// <remarks>
        /// Consolidates mutliple auto orders on the UltraCart account. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="autoOrderOid">The auto order oid to consolidate into.</param>
        /// <param name="autoOrderConsolidate">Auto orders to consolidate</param>
        /// <param name="expand">The object expansion to perform on the result.  See documentation for examples (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (AutoOrderResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AutoOrderResponse>> ConsolidateAutoOrdersWithHttpInfoAsync (int autoOrderOid, AutoOrderConsolidate autoOrderConsolidate, string expand = default(string), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Establish an auto order by referencing a regular order id
        /// </summary>
        /// <remarks>
        /// Establish an auto order by referencing a regular order id.  The result will be an auto order without any items.  You should add the items and perform an update call.  Orders must be less than 60 days old and use a credit card payment. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="referenceOrderId">The order id to attach this auto order to</param>
        /// <param name="expand">The object expansion to perform on the result.  See documentation for examples (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of AutoOrderResponse</returns>
        System.Threading.Tasks.Task<AutoOrderResponse> EstablishAutoOrderByReferenceOrderIdAsync (string referenceOrderId, string expand = default(string), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Establish an auto order by referencing a regular order id
        /// </summary>
        /// <remarks>
        /// Establish an auto order by referencing a regular order id.  The result will be an auto order without any items.  You should add the items and perform an update call.  Orders must be less than 60 days old and use a credit card payment. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="referenceOrderId">The order id to attach this auto order to</param>
        /// <param name="expand">The object expansion to perform on the result.  See documentation for examples (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (AutoOrderResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AutoOrderResponse>> EstablishAutoOrderByReferenceOrderIdWithHttpInfoAsync (string referenceOrderId, string expand = default(string), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Retrieve an auto order by oid
        /// </summary>
        /// <remarks>
        /// Retrieves a single auto order using the specified auto order oid. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="autoOrderOid">The auto order oid to retrieve.</param>
        /// <param name="expand">The object expansion to perform on the result.  See documentation for examples (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of AutoOrderResponse</returns>
        System.Threading.Tasks.Task<AutoOrderResponse> GetAutoOrderAsync (int autoOrderOid, string expand = default(string), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Retrieve an auto order by oid
        /// </summary>
        /// <remarks>
        /// Retrieves a single auto order using the specified auto order oid. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="autoOrderOid">The auto order oid to retrieve.</param>
        /// <param name="expand">The object expansion to perform on the result.  See documentation for examples (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (AutoOrderResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AutoOrderResponse>> GetAutoOrderWithHttpInfoAsync (int autoOrderOid, string expand = default(string), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Retrieve an auto order by code
        /// </summary>
        /// <remarks>
        /// Retrieves a single auto order using the specified reference (original) order id. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="autoOrderCode">The auto order oid to retrieve.</param>
        /// <param name="expand">The object expansion to perform on the result.  See documentation for examples (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of AutoOrderResponse</returns>
        System.Threading.Tasks.Task<AutoOrderResponse> GetAutoOrderByCodeAsync (string autoOrderCode, string expand = default(string), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Retrieve an auto order by code
        /// </summary>
        /// <remarks>
        /// Retrieves a single auto order using the specified reference (original) order id. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="autoOrderCode">The auto order oid to retrieve.</param>
        /// <param name="expand">The object expansion to perform on the result.  See documentation for examples (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (AutoOrderResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AutoOrderResponse>> GetAutoOrderByCodeWithHttpInfoAsync (string autoOrderCode, string expand = default(string), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Retrieve an auto order by order id
        /// </summary>
        /// <remarks>
        /// Retrieves a single auto order using the specified reference (original) order id. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="referenceOrderId">The auto order oid to retrieve.</param>
        /// <param name="expand">The object expansion to perform on the result.  See documentation for examples (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of AutoOrderResponse</returns>
        System.Threading.Tasks.Task<AutoOrderResponse> GetAutoOrderByReferenceOrderIdAsync (string referenceOrderId, string expand = default(string), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Retrieve an auto order by order id
        /// </summary>
        /// <remarks>
        /// Retrieves a single auto order using the specified reference (original) order id. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="referenceOrderId">The auto order oid to retrieve.</param>
        /// <param name="expand">The object expansion to perform on the result.  See documentation for examples (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (AutoOrderResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AutoOrderResponse>> GetAutoOrderByReferenceOrderIdWithHttpInfoAsync (string referenceOrderId, string expand = default(string), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Retrieve auto orders
        /// </summary>
        /// <remarks>
        /// Retrieves auto orders from the account.  If no parameters are specified, all auto orders will be returned.  You will need to make multiple API calls in order to retrieve the entire result set since this API performs result set pagination. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="autoOrderCode">Auto order code (optional)</param>
        /// <param name="originalOrderId">Original order id (optional)</param>
        /// <param name="firstName">First name (optional)</param>
        /// <param name="lastName">Last name (optional)</param>
        /// <param name="company">Company (optional)</param>
        /// <param name="city">City (optional)</param>
        /// <param name="state">State (optional)</param>
        /// <param name="postalCode">Postal code (optional)</param>
        /// <param name="countryCode">Country code (ISO-3166 two letter) (optional)</param>
        /// <param name="phone">Phone (optional)</param>
        /// <param name="email">Email (optional)</param>
        /// <param name="originalOrderDateBegin">Original order date begin (optional)</param>
        /// <param name="originalOrderDateEnd">Original order date end (optional)</param>
        /// <param name="nextShipmentDateBegin">Next shipment date begin (optional)</param>
        /// <param name="nextShipmentDateEnd">Next shipment date end (optional)</param>
        /// <param name="cardType">Card type (optional)</param>
        /// <param name="itemId">Item ID (optional)</param>
        /// <param name="status">Status (optional)</param>
        /// <param name="limit">The maximum number of records to return on this one API call. (Max 200) (optional, default to 100)</param>
        /// <param name="offset">Pagination of the record set.  Offset is a zero based index. (optional, default to 0)</param>
        /// <param name="since">Fetch auto orders that have been created/modified since this date/time. (optional)</param>
        /// <param name="sort">The sort order of the auto orders.  See Sorting documentation for examples of using multiple values and sorting by ascending and descending. (optional)</param>
        /// <param name="expand">The object expansion to perform on the result.  See documentation for examples (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of AutoOrdersResponse</returns>
        System.Threading.Tasks.Task<AutoOrdersResponse> GetAutoOrdersAsync (string autoOrderCode = default(string), string originalOrderId = default(string), string firstName = default(string), string lastName = default(string), string company = default(string), string city = default(string), string state = default(string), string postalCode = default(string), string countryCode = default(string), string phone = default(string), string email = default(string), string originalOrderDateBegin = default(string), string originalOrderDateEnd = default(string), string nextShipmentDateBegin = default(string), string nextShipmentDateEnd = default(string), string cardType = default(string), string itemId = default(string), string status = default(string), int? limit = default(int?), int? offset = default(int?), string since = default(string), string sort = default(string), string expand = default(string), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Retrieve auto orders
        /// </summary>
        /// <remarks>
        /// Retrieves auto orders from the account.  If no parameters are specified, all auto orders will be returned.  You will need to make multiple API calls in order to retrieve the entire result set since this API performs result set pagination. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="autoOrderCode">Auto order code (optional)</param>
        /// <param name="originalOrderId">Original order id (optional)</param>
        /// <param name="firstName">First name (optional)</param>
        /// <param name="lastName">Last name (optional)</param>
        /// <param name="company">Company (optional)</param>
        /// <param name="city">City (optional)</param>
        /// <param name="state">State (optional)</param>
        /// <param name="postalCode">Postal code (optional)</param>
        /// <param name="countryCode">Country code (ISO-3166 two letter) (optional)</param>
        /// <param name="phone">Phone (optional)</param>
        /// <param name="email">Email (optional)</param>
        /// <param name="originalOrderDateBegin">Original order date begin (optional)</param>
        /// <param name="originalOrderDateEnd">Original order date end (optional)</param>
        /// <param name="nextShipmentDateBegin">Next shipment date begin (optional)</param>
        /// <param name="nextShipmentDateEnd">Next shipment date end (optional)</param>
        /// <param name="cardType">Card type (optional)</param>
        /// <param name="itemId">Item ID (optional)</param>
        /// <param name="status">Status (optional)</param>
        /// <param name="limit">The maximum number of records to return on this one API call. (Max 200) (optional, default to 100)</param>
        /// <param name="offset">Pagination of the record set.  Offset is a zero based index. (optional, default to 0)</param>
        /// <param name="since">Fetch auto orders that have been created/modified since this date/time. (optional)</param>
        /// <param name="sort">The sort order of the auto orders.  See Sorting documentation for examples of using multiple values and sorting by ascending and descending. (optional)</param>
        /// <param name="expand">The object expansion to perform on the result.  See documentation for examples (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (AutoOrdersResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AutoOrdersResponse>> GetAutoOrdersWithHttpInfoAsync (string autoOrderCode = default(string), string originalOrderId = default(string), string firstName = default(string), string lastName = default(string), string company = default(string), string city = default(string), string state = default(string), string postalCode = default(string), string countryCode = default(string), string phone = default(string), string email = default(string), string originalOrderDateBegin = default(string), string originalOrderDateEnd = default(string), string nextShipmentDateBegin = default(string), string nextShipmentDateEnd = default(string), string cardType = default(string), string itemId = default(string), string status = default(string), int? limit = default(int?), int? offset = default(int?), string since = default(string), string sort = default(string), string expand = default(string), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Retrieve auto order batch
        /// </summary>
        /// <remarks>
        /// Retrieves a group of auto orders from the account based on an array of auto order oids.  If more than 200 auto order ids are specified, the API call will fail with a bad request error. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="autoOrderBatch">Auto order batch</param>
        /// <param name="expand">The object expansion to perform on the result. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of AutoOrdersResponse</returns>
        System.Threading.Tasks.Task<AutoOrdersResponse> GetAutoOrdersBatchAsync (AutoOrderQueryBatch autoOrderBatch, string expand = default(string), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Retrieve auto order batch
        /// </summary>
        /// <remarks>
        /// Retrieves a group of auto orders from the account based on an array of auto order oids.  If more than 200 auto order ids are specified, the API call will fail with a bad request error. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="autoOrderBatch">Auto order batch</param>
        /// <param name="expand">The object expansion to perform on the result. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (AutoOrdersResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AutoOrdersResponse>> GetAutoOrdersBatchWithHttpInfoAsync (AutoOrderQueryBatch autoOrderBatch, string expand = default(string), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Retrieve auto orders by query
        /// </summary>
        /// <remarks>
        /// Retrieves a group of auto orders from the account based on a query object.  You will need to make multiple API calls in order to retrieve the entire result set since this API performs result set pagination. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="autoOrderQuery">Auto order query</param>
        /// <param name="limit">The maximum number of records to return on this one API call. (Maximum 200) (optional, default to 100)</param>
        /// <param name="offset">Pagination of the record set.  Offset is a zero based index. (optional, default to 0)</param>
        /// <param name="sort">The sort order of the auto orders.  See Sorting documentation for examples of using multiple values and sorting by ascending and descending. (optional)</param>
        /// <param name="expand">The object expansion to perform on the result. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of AutoOrdersResponse</returns>
        System.Threading.Tasks.Task<AutoOrdersResponse> GetAutoOrdersByQueryAsync (AutoOrderQuery autoOrderQuery, int? limit = default(int?), int? offset = default(int?), string sort = default(string), string expand = default(string), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Retrieve auto orders by query
        /// </summary>
        /// <remarks>
        /// Retrieves a group of auto orders from the account based on a query object.  You will need to make multiple API calls in order to retrieve the entire result set since this API performs result set pagination. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="autoOrderQuery">Auto order query</param>
        /// <param name="limit">The maximum number of records to return on this one API call. (Maximum 200) (optional, default to 100)</param>
        /// <param name="offset">Pagination of the record set.  Offset is a zero based index. (optional, default to 0)</param>
        /// <param name="sort">The sort order of the auto orders.  See Sorting documentation for examples of using multiple values and sorting by ascending and descending. (optional)</param>
        /// <param name="expand">The object expansion to perform on the result. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (AutoOrdersResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AutoOrdersResponse>> GetAutoOrdersByQueryWithHttpInfoAsync (AutoOrderQuery autoOrderQuery, int? limit = default(int?), int? offset = default(int?), string sort = default(string), string expand = default(string), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Pause auto order
        /// </summary>
        /// <remarks>
        /// Completely pause an auto order 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="autoOrderOid">The auto order oid to pause.</param>
        /// <param name="autoOrder">Auto orders to pause</param>
        /// <param name="expand">The object expansion to perform on the result.  See documentation for examples (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of AutoOrderResponse</returns>
        System.Threading.Tasks.Task<AutoOrderResponse> PauseAutoOrderAsync (int autoOrderOid, AutoOrder autoOrder, string expand = default(string), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Pause auto order
        /// </summary>
        /// <remarks>
        /// Completely pause an auto order 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="autoOrderOid">The auto order oid to pause.</param>
        /// <param name="autoOrder">Auto orders to pause</param>
        /// <param name="expand">The object expansion to perform on the result.  See documentation for examples (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (AutoOrderResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AutoOrderResponse>> PauseAutoOrderWithHttpInfoAsync (int autoOrderOid, AutoOrder autoOrder, string expand = default(string), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Update an auto order
        /// </summary>
        /// <remarks>
        /// Update an auto order on the UltraCart account. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="autoOrderOid">The auto order oid to update.</param>
        /// <param name="autoOrder">Auto order to update</param>
        /// <param name="validateOriginalOrder">Validate original order before updating (optional)</param>
        /// <param name="expand">The object expansion to perform on the result.  See documentation for examples (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of AutoOrderResponse</returns>
        System.Threading.Tasks.Task<AutoOrderResponse> UpdateAutoOrderAsync (int autoOrderOid, AutoOrder autoOrder, string validateOriginalOrder = default(string), string expand = default(string), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Update an auto order
        /// </summary>
        /// <remarks>
        /// Update an auto order on the UltraCart account. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="autoOrderOid">The auto order oid to update.</param>
        /// <param name="autoOrder">Auto order to update</param>
        /// <param name="validateOriginalOrder">Validate original order before updating (optional)</param>
        /// <param name="expand">The object expansion to perform on the result.  See documentation for examples (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (AutoOrderResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AutoOrderResponse>> UpdateAutoOrderWithHttpInfoAsync (int autoOrderOid, AutoOrder autoOrder, string validateOriginalOrder = default(string), string expand = default(string), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Update multiple auto orders
        /// </summary>
        /// <remarks>
        /// Update multiple auto orders on the UltraCart account. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="autoOrdersRequest">Auto orders to update (synchronous maximum 20 / asynchronous maximum 100)</param>
        /// <param name="expand">The object expansion to perform on the result.  See documentation for examples (optional)</param>
        /// <param name="placeholders">Whether or not placeholder values should be returned in the result.  Useful for UIs that consume this REST API. (optional)</param>
        /// <param name="async">True if the operation should be run async.  No result returned (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of AutoOrdersResponse</returns>
        System.Threading.Tasks.Task<AutoOrdersResponse> UpdateAutoOrdersBatchAsync (AutoOrdersRequest autoOrdersRequest, string expand = default(string), bool? placeholders = default(bool?), bool? async = default(bool?), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Update multiple auto orders
        /// </summary>
        /// <remarks>
        /// Update multiple auto orders on the UltraCart account. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="autoOrdersRequest">Auto orders to update (synchronous maximum 20 / asynchronous maximum 100)</param>
        /// <param name="expand">The object expansion to perform on the result.  See documentation for examples (optional)</param>
        /// <param name="placeholders">Whether or not placeholder values should be returned in the result.  Useful for UIs that consume this REST API. (optional)</param>
        /// <param name="async">True if the operation should be run async.  No result returned (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (AutoOrdersResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AutoOrdersResponse>> UpdateAutoOrdersBatchWithHttpInfoAsync (AutoOrdersRequest autoOrdersRequest, string expand = default(string), bool? placeholders = default(bool?), bool? async = default(bool?), CancellationToken cancellationToken = default(CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class AutoOrderApi : IAutoOrderApi
    {
        private com.ultracart.admin.v2.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="AutoOrderApi"/> class.
        /// </summary>
        /// <returns></returns>
        public AutoOrderApi(String basePath, bool uselessVariable)
        {
            this.Configuration = new com.ultracart.admin.v2.Client.Configuration { BasePath = basePath };

            ExceptionFactory = com.ultracart.admin.v2.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AutoOrderApi"/> class
        /// </summary>
        /// <returns></returns>
        public AutoOrderApi()
        {
            this.Configuration = com.ultracart.admin.v2.Client.Configuration.Default;

            ExceptionFactory = com.ultracart.admin.v2.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AutoOrderApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public AutoOrderApi(com.ultracart.admin.v2.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = com.ultracart.admin.v2.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = com.ultracart.admin.v2.Client.Configuration.DefaultExceptionFactory;
        }


        /// <summary>
        /// Initializes a new instance of the <see cref="AutoOrderApi"/> class
        /// using a simple key string and optional version, which you will
        /// almost always want to use the default
        /// </summary>
        /// <param name="SimpleKey">A simple key.  See https://ultracart.atlassian.net/wiki/spaces/ucdoc/pages/38688545/API+Simple+Key</param>
        /// <returns></returns>
        public AutoOrderApi(string SimpleKey)
        {
            Configuration configuration = new Configuration();
            configuration.ApiKey.Add("x-ultracart-simple-key", SimpleKey);
            configuration.DefaultHeader.Add("X-UltraCart-Api-Version", "2017-03-01");
            this.Configuration = configuration;
            ExceptionFactory = com.ultracart.admin.v2.Client.Configuration.DefaultExceptionFactory;
        }


        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public com.ultracart.admin.v2.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public com.ultracart.admin.v2.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Consolidates multiple auto orders Consolidates mutliple auto orders on the UltraCart account. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="autoOrderOid">The auto order oid to consolidate into.</param>
        /// <param name="autoOrderConsolidate">Auto orders to consolidate</param>
        /// <param name="expand">The object expansion to perform on the result.  See documentation for examples (optional)</param>
        /// <returns>AutoOrderResponse</returns>
        public AutoOrderResponse ConsolidateAutoOrders (int autoOrderOid, AutoOrderConsolidate autoOrderConsolidate, string expand = default(string))
        {
             ApiResponse<AutoOrderResponse> localVarResponse = ConsolidateAutoOrdersWithHttpInfo(autoOrderOid, autoOrderConsolidate, expand);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Consolidates multiple auto orders Consolidates mutliple auto orders on the UltraCart account. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="autoOrderOid">The auto order oid to consolidate into.</param>
        /// <param name="autoOrderConsolidate">Auto orders to consolidate</param>
        /// <param name="expand">The object expansion to perform on the result.  See documentation for examples (optional)</param>
        /// <returns>ApiResponse of AutoOrderResponse</returns>
        public ApiResponse<AutoOrderResponse> ConsolidateAutoOrdersWithHttpInfo (int autoOrderOid, AutoOrderConsolidate autoOrderConsolidate, string expand = default(string))
        {
            // verify the required parameter 'autoOrderOid' is set
            if (autoOrderOid == null)
                throw new ApiException(400, "Missing required parameter 'autoOrderOid' when calling AutoOrderApi->ConsolidateAutoOrders");
            // verify the required parameter 'autoOrderConsolidate' is set
            if (autoOrderConsolidate == null)
                throw new ApiException(400, "Missing required parameter 'autoOrderConsolidate' when calling AutoOrderApi->ConsolidateAutoOrders");

            var localVarPath = "/auto_order/auto_orders/{auto_order_oid}/consolidate";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json; charset=UTF-8"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (autoOrderOid != null) localVarPathParams.Add("auto_order_oid", this.Configuration.ApiClient.ParameterToString(autoOrderOid)); // path parameter
            if (expand != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "_expand", expand)); // query parameter
            if (autoOrderConsolidate != null && autoOrderConsolidate.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(autoOrderConsolidate); // http body (model) parameter
            }
            else
            {
                localVarPostBody = autoOrderConsolidate; // byte array
            }

            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ConsolidateAutoOrders", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AutoOrderResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (AutoOrderResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AutoOrderResponse)));
        }

        /// <summary>
        /// Consolidates multiple auto orders Consolidates mutliple auto orders on the UltraCart account. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="autoOrderOid">The auto order oid to consolidate into.</param>
        /// <param name="autoOrderConsolidate">Auto orders to consolidate</param>
        /// <param name="expand">The object expansion to perform on the result.  See documentation for examples (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of AutoOrderResponse</returns>
        public async System.Threading.Tasks.Task<AutoOrderResponse> ConsolidateAutoOrdersAsync (int autoOrderOid, AutoOrderConsolidate autoOrderConsolidate, string expand = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<AutoOrderResponse> localVarResponse = await ConsolidateAutoOrdersWithHttpInfoAsync(autoOrderOid, autoOrderConsolidate, expand, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Consolidates multiple auto orders Consolidates mutliple auto orders on the UltraCart account. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="autoOrderOid">The auto order oid to consolidate into.</param>
        /// <param name="autoOrderConsolidate">Auto orders to consolidate</param>
        /// <param name="expand">The object expansion to perform on the result.  See documentation for examples (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (AutoOrderResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AutoOrderResponse>> ConsolidateAutoOrdersWithHttpInfoAsync (int autoOrderOid, AutoOrderConsolidate autoOrderConsolidate, string expand = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'autoOrderOid' is set
            if (autoOrderOid == null)
                throw new ApiException(400, "Missing required parameter 'autoOrderOid' when calling AutoOrderApi->ConsolidateAutoOrders");
            // verify the required parameter 'autoOrderConsolidate' is set
            if (autoOrderConsolidate == null)
                throw new ApiException(400, "Missing required parameter 'autoOrderConsolidate' when calling AutoOrderApi->ConsolidateAutoOrders");

            var localVarPath = "/auto_order/auto_orders/{auto_order_oid}/consolidate";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json; charset=UTF-8"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (autoOrderOid != null) localVarPathParams.Add("auto_order_oid", this.Configuration.ApiClient.ParameterToString(autoOrderOid)); // path parameter
            if (expand != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "_expand", expand)); // query parameter
            if (autoOrderConsolidate != null && autoOrderConsolidate.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(autoOrderConsolidate); // http body (model) parameter
            }
            else
            {
                localVarPostBody = autoOrderConsolidate; // byte array
            }

            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ConsolidateAutoOrders", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AutoOrderResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (AutoOrderResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AutoOrderResponse)));
        }

        /// <summary>
        /// Establish an auto order by referencing a regular order id Establish an auto order by referencing a regular order id.  The result will be an auto order without any items.  You should add the items and perform an update call.  Orders must be less than 60 days old and use a credit card payment. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="referenceOrderId">The order id to attach this auto order to</param>
        /// <param name="expand">The object expansion to perform on the result.  See documentation for examples (optional)</param>
        /// <returns>AutoOrderResponse</returns>
        public AutoOrderResponse EstablishAutoOrderByReferenceOrderId (string referenceOrderId, string expand = default(string))
        {
             ApiResponse<AutoOrderResponse> localVarResponse = EstablishAutoOrderByReferenceOrderIdWithHttpInfo(referenceOrderId, expand);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Establish an auto order by referencing a regular order id Establish an auto order by referencing a regular order id.  The result will be an auto order without any items.  You should add the items and perform an update call.  Orders must be less than 60 days old and use a credit card payment. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="referenceOrderId">The order id to attach this auto order to</param>
        /// <param name="expand">The object expansion to perform on the result.  See documentation for examples (optional)</param>
        /// <returns>ApiResponse of AutoOrderResponse</returns>
        public ApiResponse<AutoOrderResponse> EstablishAutoOrderByReferenceOrderIdWithHttpInfo (string referenceOrderId, string expand = default(string))
        {
            // verify the required parameter 'referenceOrderId' is set
            if (referenceOrderId == null)
                throw new ApiException(400, "Missing required parameter 'referenceOrderId' when calling AutoOrderApi->EstablishAutoOrderByReferenceOrderId");

            var localVarPath = "/auto_order/auto_orders/reference_order_id/{reference_order_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (referenceOrderId != null) localVarPathParams.Add("reference_order_id", this.Configuration.ApiClient.ParameterToString(referenceOrderId)); // path parameter
            if (expand != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "_expand", expand)); // query parameter

            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EstablishAutoOrderByReferenceOrderId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AutoOrderResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (AutoOrderResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AutoOrderResponse)));
        }

        /// <summary>
        /// Establish an auto order by referencing a regular order id Establish an auto order by referencing a regular order id.  The result will be an auto order without any items.  You should add the items and perform an update call.  Orders must be less than 60 days old and use a credit card payment. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="referenceOrderId">The order id to attach this auto order to</param>
        /// <param name="expand">The object expansion to perform on the result.  See documentation for examples (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of AutoOrderResponse</returns>
        public async System.Threading.Tasks.Task<AutoOrderResponse> EstablishAutoOrderByReferenceOrderIdAsync (string referenceOrderId, string expand = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<AutoOrderResponse> localVarResponse = await EstablishAutoOrderByReferenceOrderIdWithHttpInfoAsync(referenceOrderId, expand, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Establish an auto order by referencing a regular order id Establish an auto order by referencing a regular order id.  The result will be an auto order without any items.  You should add the items and perform an update call.  Orders must be less than 60 days old and use a credit card payment. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="referenceOrderId">The order id to attach this auto order to</param>
        /// <param name="expand">The object expansion to perform on the result.  See documentation for examples (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (AutoOrderResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AutoOrderResponse>> EstablishAutoOrderByReferenceOrderIdWithHttpInfoAsync (string referenceOrderId, string expand = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'referenceOrderId' is set
            if (referenceOrderId == null)
                throw new ApiException(400, "Missing required parameter 'referenceOrderId' when calling AutoOrderApi->EstablishAutoOrderByReferenceOrderId");

            var localVarPath = "/auto_order/auto_orders/reference_order_id/{reference_order_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (referenceOrderId != null) localVarPathParams.Add("reference_order_id", this.Configuration.ApiClient.ParameterToString(referenceOrderId)); // path parameter
            if (expand != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "_expand", expand)); // query parameter

            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EstablishAutoOrderByReferenceOrderId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AutoOrderResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (AutoOrderResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AutoOrderResponse)));
        }

        /// <summary>
        /// Retrieve an auto order by oid Retrieves a single auto order using the specified auto order oid. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="autoOrderOid">The auto order oid to retrieve.</param>
        /// <param name="expand">The object expansion to perform on the result.  See documentation for examples (optional)</param>
        /// <returns>AutoOrderResponse</returns>
        public AutoOrderResponse GetAutoOrder (int autoOrderOid, string expand = default(string))
        {
             ApiResponse<AutoOrderResponse> localVarResponse = GetAutoOrderWithHttpInfo(autoOrderOid, expand);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve an auto order by oid Retrieves a single auto order using the specified auto order oid. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="autoOrderOid">The auto order oid to retrieve.</param>
        /// <param name="expand">The object expansion to perform on the result.  See documentation for examples (optional)</param>
        /// <returns>ApiResponse of AutoOrderResponse</returns>
        public ApiResponse<AutoOrderResponse> GetAutoOrderWithHttpInfo (int autoOrderOid, string expand = default(string))
        {
            // verify the required parameter 'autoOrderOid' is set
            if (autoOrderOid == null)
                throw new ApiException(400, "Missing required parameter 'autoOrderOid' when calling AutoOrderApi->GetAutoOrder");

            var localVarPath = "/auto_order/auto_orders/{auto_order_oid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (autoOrderOid != null) localVarPathParams.Add("auto_order_oid", this.Configuration.ApiClient.ParameterToString(autoOrderOid)); // path parameter
            if (expand != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "_expand", expand)); // query parameter

            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAutoOrder", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AutoOrderResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (AutoOrderResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AutoOrderResponse)));
        }

        /// <summary>
        /// Retrieve an auto order by oid Retrieves a single auto order using the specified auto order oid. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="autoOrderOid">The auto order oid to retrieve.</param>
        /// <param name="expand">The object expansion to perform on the result.  See documentation for examples (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of AutoOrderResponse</returns>
        public async System.Threading.Tasks.Task<AutoOrderResponse> GetAutoOrderAsync (int autoOrderOid, string expand = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<AutoOrderResponse> localVarResponse = await GetAutoOrderWithHttpInfoAsync(autoOrderOid, expand, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieve an auto order by oid Retrieves a single auto order using the specified auto order oid. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="autoOrderOid">The auto order oid to retrieve.</param>
        /// <param name="expand">The object expansion to perform on the result.  See documentation for examples (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (AutoOrderResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AutoOrderResponse>> GetAutoOrderWithHttpInfoAsync (int autoOrderOid, string expand = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'autoOrderOid' is set
            if (autoOrderOid == null)
                throw new ApiException(400, "Missing required parameter 'autoOrderOid' when calling AutoOrderApi->GetAutoOrder");

            var localVarPath = "/auto_order/auto_orders/{auto_order_oid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (autoOrderOid != null) localVarPathParams.Add("auto_order_oid", this.Configuration.ApiClient.ParameterToString(autoOrderOid)); // path parameter
            if (expand != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "_expand", expand)); // query parameter

            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAutoOrder", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AutoOrderResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (AutoOrderResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AutoOrderResponse)));
        }

        /// <summary>
        /// Retrieve an auto order by code Retrieves a single auto order using the specified reference (original) order id. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="autoOrderCode">The auto order oid to retrieve.</param>
        /// <param name="expand">The object expansion to perform on the result.  See documentation for examples (optional)</param>
        /// <returns>AutoOrderResponse</returns>
        public AutoOrderResponse GetAutoOrderByCode (string autoOrderCode, string expand = default(string))
        {
             ApiResponse<AutoOrderResponse> localVarResponse = GetAutoOrderByCodeWithHttpInfo(autoOrderCode, expand);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve an auto order by code Retrieves a single auto order using the specified reference (original) order id. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="autoOrderCode">The auto order oid to retrieve.</param>
        /// <param name="expand">The object expansion to perform on the result.  See documentation for examples (optional)</param>
        /// <returns>ApiResponse of AutoOrderResponse</returns>
        public ApiResponse<AutoOrderResponse> GetAutoOrderByCodeWithHttpInfo (string autoOrderCode, string expand = default(string))
        {
            // verify the required parameter 'autoOrderCode' is set
            if (autoOrderCode == null)
                throw new ApiException(400, "Missing required parameter 'autoOrderCode' when calling AutoOrderApi->GetAutoOrderByCode");

            var localVarPath = "/auto_order/auto_orders/code/{auto_order_code}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (autoOrderCode != null) localVarPathParams.Add("auto_order_code", this.Configuration.ApiClient.ParameterToString(autoOrderCode)); // path parameter
            if (expand != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "_expand", expand)); // query parameter

            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAutoOrderByCode", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AutoOrderResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (AutoOrderResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AutoOrderResponse)));
        }

        /// <summary>
        /// Retrieve an auto order by code Retrieves a single auto order using the specified reference (original) order id. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="autoOrderCode">The auto order oid to retrieve.</param>
        /// <param name="expand">The object expansion to perform on the result.  See documentation for examples (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of AutoOrderResponse</returns>
        public async System.Threading.Tasks.Task<AutoOrderResponse> GetAutoOrderByCodeAsync (string autoOrderCode, string expand = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<AutoOrderResponse> localVarResponse = await GetAutoOrderByCodeWithHttpInfoAsync(autoOrderCode, expand, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieve an auto order by code Retrieves a single auto order using the specified reference (original) order id. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="autoOrderCode">The auto order oid to retrieve.</param>
        /// <param name="expand">The object expansion to perform on the result.  See documentation for examples (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (AutoOrderResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AutoOrderResponse>> GetAutoOrderByCodeWithHttpInfoAsync (string autoOrderCode, string expand = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'autoOrderCode' is set
            if (autoOrderCode == null)
                throw new ApiException(400, "Missing required parameter 'autoOrderCode' when calling AutoOrderApi->GetAutoOrderByCode");

            var localVarPath = "/auto_order/auto_orders/code/{auto_order_code}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (autoOrderCode != null) localVarPathParams.Add("auto_order_code", this.Configuration.ApiClient.ParameterToString(autoOrderCode)); // path parameter
            if (expand != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "_expand", expand)); // query parameter

            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAutoOrderByCode", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AutoOrderResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (AutoOrderResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AutoOrderResponse)));
        }

        /// <summary>
        /// Retrieve an auto order by order id Retrieves a single auto order using the specified reference (original) order id. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="referenceOrderId">The auto order oid to retrieve.</param>
        /// <param name="expand">The object expansion to perform on the result.  See documentation for examples (optional)</param>
        /// <returns>AutoOrderResponse</returns>
        public AutoOrderResponse GetAutoOrderByReferenceOrderId (string referenceOrderId, string expand = default(string))
        {
             ApiResponse<AutoOrderResponse> localVarResponse = GetAutoOrderByReferenceOrderIdWithHttpInfo(referenceOrderId, expand);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve an auto order by order id Retrieves a single auto order using the specified reference (original) order id. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="referenceOrderId">The auto order oid to retrieve.</param>
        /// <param name="expand">The object expansion to perform on the result.  See documentation for examples (optional)</param>
        /// <returns>ApiResponse of AutoOrderResponse</returns>
        public ApiResponse<AutoOrderResponse> GetAutoOrderByReferenceOrderIdWithHttpInfo (string referenceOrderId, string expand = default(string))
        {
            // verify the required parameter 'referenceOrderId' is set
            if (referenceOrderId == null)
                throw new ApiException(400, "Missing required parameter 'referenceOrderId' when calling AutoOrderApi->GetAutoOrderByReferenceOrderId");

            var localVarPath = "/auto_order/auto_orders/reference_order_id/{reference_order_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (referenceOrderId != null) localVarPathParams.Add("reference_order_id", this.Configuration.ApiClient.ParameterToString(referenceOrderId)); // path parameter
            if (expand != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "_expand", expand)); // query parameter

            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAutoOrderByReferenceOrderId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AutoOrderResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (AutoOrderResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AutoOrderResponse)));
        }

        /// <summary>
        /// Retrieve an auto order by order id Retrieves a single auto order using the specified reference (original) order id. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="referenceOrderId">The auto order oid to retrieve.</param>
        /// <param name="expand">The object expansion to perform on the result.  See documentation for examples (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of AutoOrderResponse</returns>
        public async System.Threading.Tasks.Task<AutoOrderResponse> GetAutoOrderByReferenceOrderIdAsync (string referenceOrderId, string expand = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<AutoOrderResponse> localVarResponse = await GetAutoOrderByReferenceOrderIdWithHttpInfoAsync(referenceOrderId, expand, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieve an auto order by order id Retrieves a single auto order using the specified reference (original) order id. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="referenceOrderId">The auto order oid to retrieve.</param>
        /// <param name="expand">The object expansion to perform on the result.  See documentation for examples (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (AutoOrderResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AutoOrderResponse>> GetAutoOrderByReferenceOrderIdWithHttpInfoAsync (string referenceOrderId, string expand = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'referenceOrderId' is set
            if (referenceOrderId == null)
                throw new ApiException(400, "Missing required parameter 'referenceOrderId' when calling AutoOrderApi->GetAutoOrderByReferenceOrderId");

            var localVarPath = "/auto_order/auto_orders/reference_order_id/{reference_order_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (referenceOrderId != null) localVarPathParams.Add("reference_order_id", this.Configuration.ApiClient.ParameterToString(referenceOrderId)); // path parameter
            if (expand != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "_expand", expand)); // query parameter

            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAutoOrderByReferenceOrderId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AutoOrderResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (AutoOrderResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AutoOrderResponse)));
        }

        /// <summary>
        /// Retrieve auto orders Retrieves auto orders from the account.  If no parameters are specified, all auto orders will be returned.  You will need to make multiple API calls in order to retrieve the entire result set since this API performs result set pagination. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="autoOrderCode">Auto order code (optional)</param>
        /// <param name="originalOrderId">Original order id (optional)</param>
        /// <param name="firstName">First name (optional)</param>
        /// <param name="lastName">Last name (optional)</param>
        /// <param name="company">Company (optional)</param>
        /// <param name="city">City (optional)</param>
        /// <param name="state">State (optional)</param>
        /// <param name="postalCode">Postal code (optional)</param>
        /// <param name="countryCode">Country code (ISO-3166 two letter) (optional)</param>
        /// <param name="phone">Phone (optional)</param>
        /// <param name="email">Email (optional)</param>
        /// <param name="originalOrderDateBegin">Original order date begin (optional)</param>
        /// <param name="originalOrderDateEnd">Original order date end (optional)</param>
        /// <param name="nextShipmentDateBegin">Next shipment date begin (optional)</param>
        /// <param name="nextShipmentDateEnd">Next shipment date end (optional)</param>
        /// <param name="cardType">Card type (optional)</param>
        /// <param name="itemId">Item ID (optional)</param>
        /// <param name="status">Status (optional)</param>
        /// <param name="limit">The maximum number of records to return on this one API call. (Max 200) (optional, default to 100)</param>
        /// <param name="offset">Pagination of the record set.  Offset is a zero based index. (optional, default to 0)</param>
        /// <param name="since">Fetch auto orders that have been created/modified since this date/time. (optional)</param>
        /// <param name="sort">The sort order of the auto orders.  See Sorting documentation for examples of using multiple values and sorting by ascending and descending. (optional)</param>
        /// <param name="expand">The object expansion to perform on the result.  See documentation for examples (optional)</param>
        /// <returns>AutoOrdersResponse</returns>
        public AutoOrdersResponse GetAutoOrders (string autoOrderCode = default(string), string originalOrderId = default(string), string firstName = default(string), string lastName = default(string), string company = default(string), string city = default(string), string state = default(string), string postalCode = default(string), string countryCode = default(string), string phone = default(string), string email = default(string), string originalOrderDateBegin = default(string), string originalOrderDateEnd = default(string), string nextShipmentDateBegin = default(string), string nextShipmentDateEnd = default(string), string cardType = default(string), string itemId = default(string), string status = default(string), int? limit = default(int?), int? offset = default(int?), string since = default(string), string sort = default(string), string expand = default(string))
        {
             ApiResponse<AutoOrdersResponse> localVarResponse = GetAutoOrdersWithHttpInfo(autoOrderCode, originalOrderId, firstName, lastName, company, city, state, postalCode, countryCode, phone, email, originalOrderDateBegin, originalOrderDateEnd, nextShipmentDateBegin, nextShipmentDateEnd, cardType, itemId, status, limit, offset, since, sort, expand);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve auto orders Retrieves auto orders from the account.  If no parameters are specified, all auto orders will be returned.  You will need to make multiple API calls in order to retrieve the entire result set since this API performs result set pagination. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="autoOrderCode">Auto order code (optional)</param>
        /// <param name="originalOrderId">Original order id (optional)</param>
        /// <param name="firstName">First name (optional)</param>
        /// <param name="lastName">Last name (optional)</param>
        /// <param name="company">Company (optional)</param>
        /// <param name="city">City (optional)</param>
        /// <param name="state">State (optional)</param>
        /// <param name="postalCode">Postal code (optional)</param>
        /// <param name="countryCode">Country code (ISO-3166 two letter) (optional)</param>
        /// <param name="phone">Phone (optional)</param>
        /// <param name="email">Email (optional)</param>
        /// <param name="originalOrderDateBegin">Original order date begin (optional)</param>
        /// <param name="originalOrderDateEnd">Original order date end (optional)</param>
        /// <param name="nextShipmentDateBegin">Next shipment date begin (optional)</param>
        /// <param name="nextShipmentDateEnd">Next shipment date end (optional)</param>
        /// <param name="cardType">Card type (optional)</param>
        /// <param name="itemId">Item ID (optional)</param>
        /// <param name="status">Status (optional)</param>
        /// <param name="limit">The maximum number of records to return on this one API call. (Max 200) (optional, default to 100)</param>
        /// <param name="offset">Pagination of the record set.  Offset is a zero based index. (optional, default to 0)</param>
        /// <param name="since">Fetch auto orders that have been created/modified since this date/time. (optional)</param>
        /// <param name="sort">The sort order of the auto orders.  See Sorting documentation for examples of using multiple values and sorting by ascending and descending. (optional)</param>
        /// <param name="expand">The object expansion to perform on the result.  See documentation for examples (optional)</param>
        /// <returns>ApiResponse of AutoOrdersResponse</returns>
        public ApiResponse<AutoOrdersResponse> GetAutoOrdersWithHttpInfo (string autoOrderCode = default(string), string originalOrderId = default(string), string firstName = default(string), string lastName = default(string), string company = default(string), string city = default(string), string state = default(string), string postalCode = default(string), string countryCode = default(string), string phone = default(string), string email = default(string), string originalOrderDateBegin = default(string), string originalOrderDateEnd = default(string), string nextShipmentDateBegin = default(string), string nextShipmentDateEnd = default(string), string cardType = default(string), string itemId = default(string), string status = default(string), int? limit = default(int?), int? offset = default(int?), string since = default(string), string sort = default(string), string expand = default(string))
        {

            var localVarPath = "/auto_order/auto_orders";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (autoOrderCode != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "auto_order_code", autoOrderCode)); // query parameter
            if (originalOrderId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "original_order_id", originalOrderId)); // query parameter
            if (firstName != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "first_name", firstName)); // query parameter
            if (lastName != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "last_name", lastName)); // query parameter
            if (company != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "company", company)); // query parameter
            if (city != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "city", city)); // query parameter
            if (state != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "state", state)); // query parameter
            if (postalCode != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "postal_code", postalCode)); // query parameter
            if (countryCode != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "country_code", countryCode)); // query parameter
            if (phone != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "phone", phone)); // query parameter
            if (email != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "email", email)); // query parameter
            if (originalOrderDateBegin != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "original_order_date_begin", originalOrderDateBegin)); // query parameter
            if (originalOrderDateEnd != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "original_order_date_end", originalOrderDateEnd)); // query parameter
            if (nextShipmentDateBegin != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "next_shipment_date_begin", nextShipmentDateBegin)); // query parameter
            if (nextShipmentDateEnd != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "next_shipment_date_end", nextShipmentDateEnd)); // query parameter
            if (cardType != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "card_type", cardType)); // query parameter
            if (itemId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "item_id", itemId)); // query parameter
            if (status != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "status", status)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "_limit", limit)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "_offset", offset)); // query parameter
            if (since != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "_since", since)); // query parameter
            if (sort != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "_sort", sort)); // query parameter
            if (expand != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "_expand", expand)); // query parameter

            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAutoOrders", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AutoOrdersResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (AutoOrdersResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AutoOrdersResponse)));
        }

        /// <summary>
        /// Retrieve auto orders Retrieves auto orders from the account.  If no parameters are specified, all auto orders will be returned.  You will need to make multiple API calls in order to retrieve the entire result set since this API performs result set pagination. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="autoOrderCode">Auto order code (optional)</param>
        /// <param name="originalOrderId">Original order id (optional)</param>
        /// <param name="firstName">First name (optional)</param>
        /// <param name="lastName">Last name (optional)</param>
        /// <param name="company">Company (optional)</param>
        /// <param name="city">City (optional)</param>
        /// <param name="state">State (optional)</param>
        /// <param name="postalCode">Postal code (optional)</param>
        /// <param name="countryCode">Country code (ISO-3166 two letter) (optional)</param>
        /// <param name="phone">Phone (optional)</param>
        /// <param name="email">Email (optional)</param>
        /// <param name="originalOrderDateBegin">Original order date begin (optional)</param>
        /// <param name="originalOrderDateEnd">Original order date end (optional)</param>
        /// <param name="nextShipmentDateBegin">Next shipment date begin (optional)</param>
        /// <param name="nextShipmentDateEnd">Next shipment date end (optional)</param>
        /// <param name="cardType">Card type (optional)</param>
        /// <param name="itemId">Item ID (optional)</param>
        /// <param name="status">Status (optional)</param>
        /// <param name="limit">The maximum number of records to return on this one API call. (Max 200) (optional, default to 100)</param>
        /// <param name="offset">Pagination of the record set.  Offset is a zero based index. (optional, default to 0)</param>
        /// <param name="since">Fetch auto orders that have been created/modified since this date/time. (optional)</param>
        /// <param name="sort">The sort order of the auto orders.  See Sorting documentation for examples of using multiple values and sorting by ascending and descending. (optional)</param>
        /// <param name="expand">The object expansion to perform on the result.  See documentation for examples (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of AutoOrdersResponse</returns>
        public async System.Threading.Tasks.Task<AutoOrdersResponse> GetAutoOrdersAsync (string autoOrderCode = default(string), string originalOrderId = default(string), string firstName = default(string), string lastName = default(string), string company = default(string), string city = default(string), string state = default(string), string postalCode = default(string), string countryCode = default(string), string phone = default(string), string email = default(string), string originalOrderDateBegin = default(string), string originalOrderDateEnd = default(string), string nextShipmentDateBegin = default(string), string nextShipmentDateEnd = default(string), string cardType = default(string), string itemId = default(string), string status = default(string), int? limit = default(int?), int? offset = default(int?), string since = default(string), string sort = default(string), string expand = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<AutoOrdersResponse> localVarResponse = await GetAutoOrdersWithHttpInfoAsync(autoOrderCode, originalOrderId, firstName, lastName, company, city, state, postalCode, countryCode, phone, email, originalOrderDateBegin, originalOrderDateEnd, nextShipmentDateBegin, nextShipmentDateEnd, cardType, itemId, status, limit, offset, since, sort, expand, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieve auto orders Retrieves auto orders from the account.  If no parameters are specified, all auto orders will be returned.  You will need to make multiple API calls in order to retrieve the entire result set since this API performs result set pagination. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="autoOrderCode">Auto order code (optional)</param>
        /// <param name="originalOrderId">Original order id (optional)</param>
        /// <param name="firstName">First name (optional)</param>
        /// <param name="lastName">Last name (optional)</param>
        /// <param name="company">Company (optional)</param>
        /// <param name="city">City (optional)</param>
        /// <param name="state">State (optional)</param>
        /// <param name="postalCode">Postal code (optional)</param>
        /// <param name="countryCode">Country code (ISO-3166 two letter) (optional)</param>
        /// <param name="phone">Phone (optional)</param>
        /// <param name="email">Email (optional)</param>
        /// <param name="originalOrderDateBegin">Original order date begin (optional)</param>
        /// <param name="originalOrderDateEnd">Original order date end (optional)</param>
        /// <param name="nextShipmentDateBegin">Next shipment date begin (optional)</param>
        /// <param name="nextShipmentDateEnd">Next shipment date end (optional)</param>
        /// <param name="cardType">Card type (optional)</param>
        /// <param name="itemId">Item ID (optional)</param>
        /// <param name="status">Status (optional)</param>
        /// <param name="limit">The maximum number of records to return on this one API call. (Max 200) (optional, default to 100)</param>
        /// <param name="offset">Pagination of the record set.  Offset is a zero based index. (optional, default to 0)</param>
        /// <param name="since">Fetch auto orders that have been created/modified since this date/time. (optional)</param>
        /// <param name="sort">The sort order of the auto orders.  See Sorting documentation for examples of using multiple values and sorting by ascending and descending. (optional)</param>
        /// <param name="expand">The object expansion to perform on the result.  See documentation for examples (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (AutoOrdersResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AutoOrdersResponse>> GetAutoOrdersWithHttpInfoAsync (string autoOrderCode = default(string), string originalOrderId = default(string), string firstName = default(string), string lastName = default(string), string company = default(string), string city = default(string), string state = default(string), string postalCode = default(string), string countryCode = default(string), string phone = default(string), string email = default(string), string originalOrderDateBegin = default(string), string originalOrderDateEnd = default(string), string nextShipmentDateBegin = default(string), string nextShipmentDateEnd = default(string), string cardType = default(string), string itemId = default(string), string status = default(string), int? limit = default(int?), int? offset = default(int?), string since = default(string), string sort = default(string), string expand = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/auto_order/auto_orders";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (autoOrderCode != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "auto_order_code", autoOrderCode)); // query parameter
            if (originalOrderId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "original_order_id", originalOrderId)); // query parameter
            if (firstName != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "first_name", firstName)); // query parameter
            if (lastName != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "last_name", lastName)); // query parameter
            if (company != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "company", company)); // query parameter
            if (city != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "city", city)); // query parameter
            if (state != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "state", state)); // query parameter
            if (postalCode != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "postal_code", postalCode)); // query parameter
            if (countryCode != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "country_code", countryCode)); // query parameter
            if (phone != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "phone", phone)); // query parameter
            if (email != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "email", email)); // query parameter
            if (originalOrderDateBegin != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "original_order_date_begin", originalOrderDateBegin)); // query parameter
            if (originalOrderDateEnd != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "original_order_date_end", originalOrderDateEnd)); // query parameter
            if (nextShipmentDateBegin != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "next_shipment_date_begin", nextShipmentDateBegin)); // query parameter
            if (nextShipmentDateEnd != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "next_shipment_date_end", nextShipmentDateEnd)); // query parameter
            if (cardType != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "card_type", cardType)); // query parameter
            if (itemId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "item_id", itemId)); // query parameter
            if (status != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "status", status)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "_limit", limit)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "_offset", offset)); // query parameter
            if (since != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "_since", since)); // query parameter
            if (sort != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "_sort", sort)); // query parameter
            if (expand != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "_expand", expand)); // query parameter

            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAutoOrders", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AutoOrdersResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (AutoOrdersResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AutoOrdersResponse)));
        }

        /// <summary>
        /// Retrieve auto order batch Retrieves a group of auto orders from the account based on an array of auto order oids.  If more than 200 auto order ids are specified, the API call will fail with a bad request error. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="autoOrderBatch">Auto order batch</param>
        /// <param name="expand">The object expansion to perform on the result. (optional)</param>
        /// <returns>AutoOrdersResponse</returns>
        public AutoOrdersResponse GetAutoOrdersBatch (AutoOrderQueryBatch autoOrderBatch, string expand = default(string))
        {
             ApiResponse<AutoOrdersResponse> localVarResponse = GetAutoOrdersBatchWithHttpInfo(autoOrderBatch, expand);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve auto order batch Retrieves a group of auto orders from the account based on an array of auto order oids.  If more than 200 auto order ids are specified, the API call will fail with a bad request error. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="autoOrderBatch">Auto order batch</param>
        /// <param name="expand">The object expansion to perform on the result. (optional)</param>
        /// <returns>ApiResponse of AutoOrdersResponse</returns>
        public ApiResponse<AutoOrdersResponse> GetAutoOrdersBatchWithHttpInfo (AutoOrderQueryBatch autoOrderBatch, string expand = default(string))
        {
            // verify the required parameter 'autoOrderBatch' is set
            if (autoOrderBatch == null)
                throw new ApiException(400, "Missing required parameter 'autoOrderBatch' when calling AutoOrderApi->GetAutoOrdersBatch");

            var localVarPath = "/auto_order/auto_orders/batch";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (expand != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "_expand", expand)); // query parameter
            if (autoOrderBatch != null && autoOrderBatch.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(autoOrderBatch); // http body (model) parameter
            }
            else
            {
                localVarPostBody = autoOrderBatch; // byte array
            }

            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAutoOrdersBatch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AutoOrdersResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (AutoOrdersResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AutoOrdersResponse)));
        }

        /// <summary>
        /// Retrieve auto order batch Retrieves a group of auto orders from the account based on an array of auto order oids.  If more than 200 auto order ids are specified, the API call will fail with a bad request error. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="autoOrderBatch">Auto order batch</param>
        /// <param name="expand">The object expansion to perform on the result. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of AutoOrdersResponse</returns>
        public async System.Threading.Tasks.Task<AutoOrdersResponse> GetAutoOrdersBatchAsync (AutoOrderQueryBatch autoOrderBatch, string expand = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<AutoOrdersResponse> localVarResponse = await GetAutoOrdersBatchWithHttpInfoAsync(autoOrderBatch, expand, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieve auto order batch Retrieves a group of auto orders from the account based on an array of auto order oids.  If more than 200 auto order ids are specified, the API call will fail with a bad request error. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="autoOrderBatch">Auto order batch</param>
        /// <param name="expand">The object expansion to perform on the result. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (AutoOrdersResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AutoOrdersResponse>> GetAutoOrdersBatchWithHttpInfoAsync (AutoOrderQueryBatch autoOrderBatch, string expand = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'autoOrderBatch' is set
            if (autoOrderBatch == null)
                throw new ApiException(400, "Missing required parameter 'autoOrderBatch' when calling AutoOrderApi->GetAutoOrdersBatch");

            var localVarPath = "/auto_order/auto_orders/batch";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (expand != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "_expand", expand)); // query parameter
            if (autoOrderBatch != null && autoOrderBatch.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(autoOrderBatch); // http body (model) parameter
            }
            else
            {
                localVarPostBody = autoOrderBatch; // byte array
            }

            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAutoOrdersBatch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AutoOrdersResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (AutoOrdersResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AutoOrdersResponse)));
        }

        /// <summary>
        /// Retrieve auto orders by query Retrieves a group of auto orders from the account based on a query object.  You will need to make multiple API calls in order to retrieve the entire result set since this API performs result set pagination. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="autoOrderQuery">Auto order query</param>
        /// <param name="limit">The maximum number of records to return on this one API call. (Maximum 200) (optional, default to 100)</param>
        /// <param name="offset">Pagination of the record set.  Offset is a zero based index. (optional, default to 0)</param>
        /// <param name="sort">The sort order of the auto orders.  See Sorting documentation for examples of using multiple values and sorting by ascending and descending. (optional)</param>
        /// <param name="expand">The object expansion to perform on the result. (optional)</param>
        /// <returns>AutoOrdersResponse</returns>
        public AutoOrdersResponse GetAutoOrdersByQuery (AutoOrderQuery autoOrderQuery, int? limit = default(int?), int? offset = default(int?), string sort = default(string), string expand = default(string))
        {
             ApiResponse<AutoOrdersResponse> localVarResponse = GetAutoOrdersByQueryWithHttpInfo(autoOrderQuery, limit, offset, sort, expand);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve auto orders by query Retrieves a group of auto orders from the account based on a query object.  You will need to make multiple API calls in order to retrieve the entire result set since this API performs result set pagination. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="autoOrderQuery">Auto order query</param>
        /// <param name="limit">The maximum number of records to return on this one API call. (Maximum 200) (optional, default to 100)</param>
        /// <param name="offset">Pagination of the record set.  Offset is a zero based index. (optional, default to 0)</param>
        /// <param name="sort">The sort order of the auto orders.  See Sorting documentation for examples of using multiple values and sorting by ascending and descending. (optional)</param>
        /// <param name="expand">The object expansion to perform on the result. (optional)</param>
        /// <returns>ApiResponse of AutoOrdersResponse</returns>
        public ApiResponse<AutoOrdersResponse> GetAutoOrdersByQueryWithHttpInfo (AutoOrderQuery autoOrderQuery, int? limit = default(int?), int? offset = default(int?), string sort = default(string), string expand = default(string))
        {
            // verify the required parameter 'autoOrderQuery' is set
            if (autoOrderQuery == null)
                throw new ApiException(400, "Missing required parameter 'autoOrderQuery' when calling AutoOrderApi->GetAutoOrdersByQuery");

            var localVarPath = "/auto_order/auto_orders/query";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "_limit", limit)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "_offset", offset)); // query parameter
            if (sort != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "_sort", sort)); // query parameter
            if (expand != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "_expand", expand)); // query parameter
            if (autoOrderQuery != null && autoOrderQuery.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(autoOrderQuery); // http body (model) parameter
            }
            else
            {
                localVarPostBody = autoOrderQuery; // byte array
            }

            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAutoOrdersByQuery", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AutoOrdersResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (AutoOrdersResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AutoOrdersResponse)));
        }

        /// <summary>
        /// Retrieve auto orders by query Retrieves a group of auto orders from the account based on a query object.  You will need to make multiple API calls in order to retrieve the entire result set since this API performs result set pagination. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="autoOrderQuery">Auto order query</param>
        /// <param name="limit">The maximum number of records to return on this one API call. (Maximum 200) (optional, default to 100)</param>
        /// <param name="offset">Pagination of the record set.  Offset is a zero based index. (optional, default to 0)</param>
        /// <param name="sort">The sort order of the auto orders.  See Sorting documentation for examples of using multiple values and sorting by ascending and descending. (optional)</param>
        /// <param name="expand">The object expansion to perform on the result. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of AutoOrdersResponse</returns>
        public async System.Threading.Tasks.Task<AutoOrdersResponse> GetAutoOrdersByQueryAsync (AutoOrderQuery autoOrderQuery, int? limit = default(int?), int? offset = default(int?), string sort = default(string), string expand = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<AutoOrdersResponse> localVarResponse = await GetAutoOrdersByQueryWithHttpInfoAsync(autoOrderQuery, limit, offset, sort, expand, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieve auto orders by query Retrieves a group of auto orders from the account based on a query object.  You will need to make multiple API calls in order to retrieve the entire result set since this API performs result set pagination. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="autoOrderQuery">Auto order query</param>
        /// <param name="limit">The maximum number of records to return on this one API call. (Maximum 200) (optional, default to 100)</param>
        /// <param name="offset">Pagination of the record set.  Offset is a zero based index. (optional, default to 0)</param>
        /// <param name="sort">The sort order of the auto orders.  See Sorting documentation for examples of using multiple values and sorting by ascending and descending. (optional)</param>
        /// <param name="expand">The object expansion to perform on the result. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (AutoOrdersResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AutoOrdersResponse>> GetAutoOrdersByQueryWithHttpInfoAsync (AutoOrderQuery autoOrderQuery, int? limit = default(int?), int? offset = default(int?), string sort = default(string), string expand = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'autoOrderQuery' is set
            if (autoOrderQuery == null)
                throw new ApiException(400, "Missing required parameter 'autoOrderQuery' when calling AutoOrderApi->GetAutoOrdersByQuery");

            var localVarPath = "/auto_order/auto_orders/query";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "_limit", limit)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "_offset", offset)); // query parameter
            if (sort != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "_sort", sort)); // query parameter
            if (expand != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "_expand", expand)); // query parameter
            if (autoOrderQuery != null && autoOrderQuery.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(autoOrderQuery); // http body (model) parameter
            }
            else
            {
                localVarPostBody = autoOrderQuery; // byte array
            }

            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAutoOrdersByQuery", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AutoOrdersResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (AutoOrdersResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AutoOrdersResponse)));
        }

        /// <summary>
        /// Pause auto order Completely pause an auto order 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="autoOrderOid">The auto order oid to pause.</param>
        /// <param name="autoOrder">Auto orders to pause</param>
        /// <param name="expand">The object expansion to perform on the result.  See documentation for examples (optional)</param>
        /// <returns>AutoOrderResponse</returns>
        public AutoOrderResponse PauseAutoOrder (int autoOrderOid, AutoOrder autoOrder, string expand = default(string))
        {
             ApiResponse<AutoOrderResponse> localVarResponse = PauseAutoOrderWithHttpInfo(autoOrderOid, autoOrder, expand);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Pause auto order Completely pause an auto order 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="autoOrderOid">The auto order oid to pause.</param>
        /// <param name="autoOrder">Auto orders to pause</param>
        /// <param name="expand">The object expansion to perform on the result.  See documentation for examples (optional)</param>
        /// <returns>ApiResponse of AutoOrderResponse</returns>
        public ApiResponse<AutoOrderResponse> PauseAutoOrderWithHttpInfo (int autoOrderOid, AutoOrder autoOrder, string expand = default(string))
        {
            // verify the required parameter 'autoOrderOid' is set
            if (autoOrderOid == null)
                throw new ApiException(400, "Missing required parameter 'autoOrderOid' when calling AutoOrderApi->PauseAutoOrder");
            // verify the required parameter 'autoOrder' is set
            if (autoOrder == null)
                throw new ApiException(400, "Missing required parameter 'autoOrder' when calling AutoOrderApi->PauseAutoOrder");

            var localVarPath = "/auto_order/auto_orders/{auto_order_oid}/pause";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json; charset=UTF-8"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (autoOrderOid != null) localVarPathParams.Add("auto_order_oid", this.Configuration.ApiClient.ParameterToString(autoOrderOid)); // path parameter
            if (expand != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "_expand", expand)); // query parameter
            if (autoOrder != null && autoOrder.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(autoOrder); // http body (model) parameter
            }
            else
            {
                localVarPostBody = autoOrder; // byte array
            }

            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PauseAutoOrder", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AutoOrderResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (AutoOrderResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AutoOrderResponse)));
        }

        /// <summary>
        /// Pause auto order Completely pause an auto order 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="autoOrderOid">The auto order oid to pause.</param>
        /// <param name="autoOrder">Auto orders to pause</param>
        /// <param name="expand">The object expansion to perform on the result.  See documentation for examples (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of AutoOrderResponse</returns>
        public async System.Threading.Tasks.Task<AutoOrderResponse> PauseAutoOrderAsync (int autoOrderOid, AutoOrder autoOrder, string expand = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<AutoOrderResponse> localVarResponse = await PauseAutoOrderWithHttpInfoAsync(autoOrderOid, autoOrder, expand, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Pause auto order Completely pause an auto order 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="autoOrderOid">The auto order oid to pause.</param>
        /// <param name="autoOrder">Auto orders to pause</param>
        /// <param name="expand">The object expansion to perform on the result.  See documentation for examples (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (AutoOrderResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AutoOrderResponse>> PauseAutoOrderWithHttpInfoAsync (int autoOrderOid, AutoOrder autoOrder, string expand = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'autoOrderOid' is set
            if (autoOrderOid == null)
                throw new ApiException(400, "Missing required parameter 'autoOrderOid' when calling AutoOrderApi->PauseAutoOrder");
            // verify the required parameter 'autoOrder' is set
            if (autoOrder == null)
                throw new ApiException(400, "Missing required parameter 'autoOrder' when calling AutoOrderApi->PauseAutoOrder");

            var localVarPath = "/auto_order/auto_orders/{auto_order_oid}/pause";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json; charset=UTF-8"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (autoOrderOid != null) localVarPathParams.Add("auto_order_oid", this.Configuration.ApiClient.ParameterToString(autoOrderOid)); // path parameter
            if (expand != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "_expand", expand)); // query parameter
            if (autoOrder != null && autoOrder.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(autoOrder); // http body (model) parameter
            }
            else
            {
                localVarPostBody = autoOrder; // byte array
            }

            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PauseAutoOrder", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AutoOrderResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (AutoOrderResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AutoOrderResponse)));
        }

        /// <summary>
        /// Update an auto order Update an auto order on the UltraCart account. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="autoOrderOid">The auto order oid to update.</param>
        /// <param name="autoOrder">Auto order to update</param>
        /// <param name="validateOriginalOrder">Validate original order before updating (optional)</param>
        /// <param name="expand">The object expansion to perform on the result.  See documentation for examples (optional)</param>
        /// <returns>AutoOrderResponse</returns>
        public AutoOrderResponse UpdateAutoOrder (int autoOrderOid, AutoOrder autoOrder, string validateOriginalOrder = default(string), string expand = default(string))
        {
             ApiResponse<AutoOrderResponse> localVarResponse = UpdateAutoOrderWithHttpInfo(autoOrderOid, autoOrder, validateOriginalOrder, expand);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update an auto order Update an auto order on the UltraCart account. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="autoOrderOid">The auto order oid to update.</param>
        /// <param name="autoOrder">Auto order to update</param>
        /// <param name="validateOriginalOrder">Validate original order before updating (optional)</param>
        /// <param name="expand">The object expansion to perform on the result.  See documentation for examples (optional)</param>
        /// <returns>ApiResponse of AutoOrderResponse</returns>
        public ApiResponse<AutoOrderResponse> UpdateAutoOrderWithHttpInfo (int autoOrderOid, AutoOrder autoOrder, string validateOriginalOrder = default(string), string expand = default(string))
        {
            // verify the required parameter 'autoOrderOid' is set
            if (autoOrderOid == null)
                throw new ApiException(400, "Missing required parameter 'autoOrderOid' when calling AutoOrderApi->UpdateAutoOrder");
            // verify the required parameter 'autoOrder' is set
            if (autoOrder == null)
                throw new ApiException(400, "Missing required parameter 'autoOrder' when calling AutoOrderApi->UpdateAutoOrder");

            var localVarPath = "/auto_order/auto_orders/{auto_order_oid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json; charset=UTF-8"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (autoOrderOid != null) localVarPathParams.Add("auto_order_oid", this.Configuration.ApiClient.ParameterToString(autoOrderOid)); // path parameter
            if (validateOriginalOrder != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "validate_original_order", validateOriginalOrder)); // query parameter
            if (expand != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "_expand", expand)); // query parameter
            if (autoOrder != null && autoOrder.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(autoOrder); // http body (model) parameter
            }
            else
            {
                localVarPostBody = autoOrder; // byte array
            }

            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateAutoOrder", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AutoOrderResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (AutoOrderResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AutoOrderResponse)));
        }

        /// <summary>
        /// Update an auto order Update an auto order on the UltraCart account. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="autoOrderOid">The auto order oid to update.</param>
        /// <param name="autoOrder">Auto order to update</param>
        /// <param name="validateOriginalOrder">Validate original order before updating (optional)</param>
        /// <param name="expand">The object expansion to perform on the result.  See documentation for examples (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of AutoOrderResponse</returns>
        public async System.Threading.Tasks.Task<AutoOrderResponse> UpdateAutoOrderAsync (int autoOrderOid, AutoOrder autoOrder, string validateOriginalOrder = default(string), string expand = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<AutoOrderResponse> localVarResponse = await UpdateAutoOrderWithHttpInfoAsync(autoOrderOid, autoOrder, validateOriginalOrder, expand, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update an auto order Update an auto order on the UltraCart account. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="autoOrderOid">The auto order oid to update.</param>
        /// <param name="autoOrder">Auto order to update</param>
        /// <param name="validateOriginalOrder">Validate original order before updating (optional)</param>
        /// <param name="expand">The object expansion to perform on the result.  See documentation for examples (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (AutoOrderResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AutoOrderResponse>> UpdateAutoOrderWithHttpInfoAsync (int autoOrderOid, AutoOrder autoOrder, string validateOriginalOrder = default(string), string expand = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'autoOrderOid' is set
            if (autoOrderOid == null)
                throw new ApiException(400, "Missing required parameter 'autoOrderOid' when calling AutoOrderApi->UpdateAutoOrder");
            // verify the required parameter 'autoOrder' is set
            if (autoOrder == null)
                throw new ApiException(400, "Missing required parameter 'autoOrder' when calling AutoOrderApi->UpdateAutoOrder");

            var localVarPath = "/auto_order/auto_orders/{auto_order_oid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json; charset=UTF-8"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (autoOrderOid != null) localVarPathParams.Add("auto_order_oid", this.Configuration.ApiClient.ParameterToString(autoOrderOid)); // path parameter
            if (validateOriginalOrder != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "validate_original_order", validateOriginalOrder)); // query parameter
            if (expand != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "_expand", expand)); // query parameter
            if (autoOrder != null && autoOrder.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(autoOrder); // http body (model) parameter
            }
            else
            {
                localVarPostBody = autoOrder; // byte array
            }

            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateAutoOrder", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AutoOrderResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (AutoOrderResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AutoOrderResponse)));
        }

        /// <summary>
        /// Update multiple auto orders Update multiple auto orders on the UltraCart account. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="autoOrdersRequest">Auto orders to update (synchronous maximum 20 / asynchronous maximum 100)</param>
        /// <param name="expand">The object expansion to perform on the result.  See documentation for examples (optional)</param>
        /// <param name="placeholders">Whether or not placeholder values should be returned in the result.  Useful for UIs that consume this REST API. (optional)</param>
        /// <param name="async">True if the operation should be run async.  No result returned (optional)</param>
        /// <returns>AutoOrdersResponse</returns>
        public AutoOrdersResponse UpdateAutoOrdersBatch (AutoOrdersRequest autoOrdersRequest, string expand = default(string), bool? placeholders = default(bool?), bool? async = default(bool?))
        {
             ApiResponse<AutoOrdersResponse> localVarResponse = UpdateAutoOrdersBatchWithHttpInfo(autoOrdersRequest, expand, placeholders, async);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update multiple auto orders Update multiple auto orders on the UltraCart account. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="autoOrdersRequest">Auto orders to update (synchronous maximum 20 / asynchronous maximum 100)</param>
        /// <param name="expand">The object expansion to perform on the result.  See documentation for examples (optional)</param>
        /// <param name="placeholders">Whether or not placeholder values should be returned in the result.  Useful for UIs that consume this REST API. (optional)</param>
        /// <param name="async">True if the operation should be run async.  No result returned (optional)</param>
        /// <returns>ApiResponse of AutoOrdersResponse</returns>
        public ApiResponse<AutoOrdersResponse> UpdateAutoOrdersBatchWithHttpInfo (AutoOrdersRequest autoOrdersRequest, string expand = default(string), bool? placeholders = default(bool?), bool? async = default(bool?))
        {
            // verify the required parameter 'autoOrdersRequest' is set
            if (autoOrdersRequest == null)
                throw new ApiException(400, "Missing required parameter 'autoOrdersRequest' when calling AutoOrderApi->UpdateAutoOrdersBatch");

            var localVarPath = "/auto_order/auto_orders/batch";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json; charset=UTF-8"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (expand != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "_expand", expand)); // query parameter
            if (placeholders != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "_placeholders", placeholders)); // query parameter
            if (async != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "_async", async)); // query parameter
            if (autoOrdersRequest != null && autoOrdersRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(autoOrdersRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = autoOrdersRequest; // byte array
            }

            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateAutoOrdersBatch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AutoOrdersResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (AutoOrdersResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AutoOrdersResponse)));
        }

        /// <summary>
        /// Update multiple auto orders Update multiple auto orders on the UltraCart account. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="autoOrdersRequest">Auto orders to update (synchronous maximum 20 / asynchronous maximum 100)</param>
        /// <param name="expand">The object expansion to perform on the result.  See documentation for examples (optional)</param>
        /// <param name="placeholders">Whether or not placeholder values should be returned in the result.  Useful for UIs that consume this REST API. (optional)</param>
        /// <param name="async">True if the operation should be run async.  No result returned (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of AutoOrdersResponse</returns>
        public async System.Threading.Tasks.Task<AutoOrdersResponse> UpdateAutoOrdersBatchAsync (AutoOrdersRequest autoOrdersRequest, string expand = default(string), bool? placeholders = default(bool?), bool? async = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<AutoOrdersResponse> localVarResponse = await UpdateAutoOrdersBatchWithHttpInfoAsync(autoOrdersRequest, expand, placeholders, async, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update multiple auto orders Update multiple auto orders on the UltraCart account. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="autoOrdersRequest">Auto orders to update (synchronous maximum 20 / asynchronous maximum 100)</param>
        /// <param name="expand">The object expansion to perform on the result.  See documentation for examples (optional)</param>
        /// <param name="placeholders">Whether or not placeholder values should be returned in the result.  Useful for UIs that consume this REST API. (optional)</param>
        /// <param name="async">True if the operation should be run async.  No result returned (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (AutoOrdersResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AutoOrdersResponse>> UpdateAutoOrdersBatchWithHttpInfoAsync (AutoOrdersRequest autoOrdersRequest, string expand = default(string), bool? placeholders = default(bool?), bool? async = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'autoOrdersRequest' is set
            if (autoOrdersRequest == null)
                throw new ApiException(400, "Missing required parameter 'autoOrdersRequest' when calling AutoOrderApi->UpdateAutoOrdersBatch");

            var localVarPath = "/auto_order/auto_orders/batch";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json; charset=UTF-8"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (expand != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "_expand", expand)); // query parameter
            if (placeholders != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "_placeholders", placeholders)); // query parameter
            if (async != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "_async", async)); // query parameter
            if (autoOrdersRequest != null && autoOrdersRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(autoOrdersRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = autoOrdersRequest; // byte array
            }

            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateAutoOrdersBatch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AutoOrdersResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (AutoOrdersResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AutoOrdersResponse)));
        }

    }
}
