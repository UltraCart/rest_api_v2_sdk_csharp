/* 
 * UltraCart Rest API V2
 *
 * This is the next generation UltraCart REST API...
 *
 * OpenAPI spec version: 2.0.0
 * Contact: support@ultracart.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using com.ultracart.admin.v2.Client;
using com.ultracart.admin.v2.Model;

namespace com.ultracart.admin.v2.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IAutoorderApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Retrieve an auto order
        /// </summary>
        /// <remarks>
        /// Retrieves a single auto order using the specified auto order oid. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="autoOrderOid">The auto order oid to retrieve.</param>
        /// <param name="expand">The object expansion to perform on the result.  See documentation for examples (optional)</param>
        /// <returns>AutoOrderResponse</returns>
        AutoOrderResponse GetAutoOrder (int? autoOrderOid, string expand = null);

        /// <summary>
        /// Retrieve an auto order
        /// </summary>
        /// <remarks>
        /// Retrieves a single auto order using the specified auto order oid. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="autoOrderOid">The auto order oid to retrieve.</param>
        /// <param name="expand">The object expansion to perform on the result.  See documentation for examples (optional)</param>
        /// <returns>ApiResponse of AutoOrderResponse</returns>
        ApiResponse<AutoOrderResponse> GetAutoOrderWithHttpInfo (int? autoOrderOid, string expand = null);
        /// <summary>
        /// Retrieve auto orders
        /// </summary>
        /// <remarks>
        /// Retrieves auto orders from the account.  If no parameters are specified, all auto orders will be returned.  You will need to make multiple API calls in order to retrieve the entire result set since this API performs result set pagination. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="autoOrderCode">Auto order code (optional)</param>
        /// <param name="originalOrderId">Original order id (optional)</param>
        /// <param name="firstName">First name (optional)</param>
        /// <param name="lastName">Last name (optional)</param>
        /// <param name="company">Company (optional)</param>
        /// <param name="city">City (optional)</param>
        /// <param name="state">State (optional)</param>
        /// <param name="postalCode">Postal code (optional)</param>
        /// <param name="countryCode">Country code (ISO-3166 two letter) (optional)</param>
        /// <param name="phone">Phone (optional)</param>
        /// <param name="email">Email (optional)</param>
        /// <param name="originalOrderDateBegin">Original order date begin (optional)</param>
        /// <param name="originalOrderDateEnd">Original order date end (optional)</param>
        /// <param name="nextShipmentDateBegin">Next shipment date begin (optional)</param>
        /// <param name="nextShipmentDateEnd">Next shipment date end (optional)</param>
        /// <param name="cardType">Card type (optional)</param>
        /// <param name="itemId">Item ID (optional)</param>
        /// <param name="status">Status (optional)</param>
        /// <param name="limit">The maximum number of records to return on this one API call. (Max 200) (optional, default to 100)</param>
        /// <param name="offset">Pagination of the record set.  Offset is a zero based index. (optional, default to 0)</param>
        /// <param name="since">Fetch auto orders that have been created/modified since this date/time. (optional)</param>
        /// <param name="sort">The sort order of the items.  See Sorting documentation for examples of using multiple values and sorting by ascending and descending. (optional)</param>
        /// <param name="expand">The object expansion to perform on the result.  See documentation for examples (optional)</param>
        /// <returns>AutoOrdersResponse</returns>
        AutoOrdersResponse GetAutoOrders (string autoOrderCode = null, string originalOrderId = null, string firstName = null, string lastName = null, string company = null, string city = null, string state = null, string postalCode = null, string countryCode = null, string phone = null, string email = null, string originalOrderDateBegin = null, string originalOrderDateEnd = null, string nextShipmentDateBegin = null, string nextShipmentDateEnd = null, string cardType = null, string itemId = null, string status = null, int? limit = null, int? offset = null, string since = null, string sort = null, string expand = null);

        /// <summary>
        /// Retrieve auto orders
        /// </summary>
        /// <remarks>
        /// Retrieves auto orders from the account.  If no parameters are specified, all auto orders will be returned.  You will need to make multiple API calls in order to retrieve the entire result set since this API performs result set pagination. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="autoOrderCode">Auto order code (optional)</param>
        /// <param name="originalOrderId">Original order id (optional)</param>
        /// <param name="firstName">First name (optional)</param>
        /// <param name="lastName">Last name (optional)</param>
        /// <param name="company">Company (optional)</param>
        /// <param name="city">City (optional)</param>
        /// <param name="state">State (optional)</param>
        /// <param name="postalCode">Postal code (optional)</param>
        /// <param name="countryCode">Country code (ISO-3166 two letter) (optional)</param>
        /// <param name="phone">Phone (optional)</param>
        /// <param name="email">Email (optional)</param>
        /// <param name="originalOrderDateBegin">Original order date begin (optional)</param>
        /// <param name="originalOrderDateEnd">Original order date end (optional)</param>
        /// <param name="nextShipmentDateBegin">Next shipment date begin (optional)</param>
        /// <param name="nextShipmentDateEnd">Next shipment date end (optional)</param>
        /// <param name="cardType">Card type (optional)</param>
        /// <param name="itemId">Item ID (optional)</param>
        /// <param name="status">Status (optional)</param>
        /// <param name="limit">The maximum number of records to return on this one API call. (Max 200) (optional, default to 100)</param>
        /// <param name="offset">Pagination of the record set.  Offset is a zero based index. (optional, default to 0)</param>
        /// <param name="since">Fetch auto orders that have been created/modified since this date/time. (optional)</param>
        /// <param name="sort">The sort order of the items.  See Sorting documentation for examples of using multiple values and sorting by ascending and descending. (optional)</param>
        /// <param name="expand">The object expansion to perform on the result.  See documentation for examples (optional)</param>
        /// <returns>ApiResponse of AutoOrdersResponse</returns>
        ApiResponse<AutoOrdersResponse> GetAutoOrdersWithHttpInfo (string autoOrderCode = null, string originalOrderId = null, string firstName = null, string lastName = null, string company = null, string city = null, string state = null, string postalCode = null, string countryCode = null, string phone = null, string email = null, string originalOrderDateBegin = null, string originalOrderDateEnd = null, string nextShipmentDateBegin = null, string nextShipmentDateEnd = null, string cardType = null, string itemId = null, string status = null, int? limit = null, int? offset = null, string since = null, string sort = null, string expand = null);
        /// <summary>
        /// Update an auto order
        /// </summary>
        /// <remarks>
        /// Update an auto order on the UltraCart account. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="autoOrder">Auto order to update</param>
        /// <param name="autoOrderOid">The auto order oid to update.</param>
        /// <param name="expand">The object expansion to perform on the result.  See documentation for examples (optional)</param>
        /// <returns>AutoOrderResponse</returns>
        AutoOrderResponse UpdateAutoOrder (AutoOrder autoOrder, int? autoOrderOid, string expand = null);

        /// <summary>
        /// Update an auto order
        /// </summary>
        /// <remarks>
        /// Update an auto order on the UltraCart account. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="autoOrder">Auto order to update</param>
        /// <param name="autoOrderOid">The auto order oid to update.</param>
        /// <param name="expand">The object expansion to perform on the result.  See documentation for examples (optional)</param>
        /// <returns>ApiResponse of AutoOrderResponse</returns>
        ApiResponse<AutoOrderResponse> UpdateAutoOrderWithHttpInfo (AutoOrder autoOrder, int? autoOrderOid, string expand = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Retrieve an auto order
        /// </summary>
        /// <remarks>
        /// Retrieves a single auto order using the specified auto order oid. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="autoOrderOid">The auto order oid to retrieve.</param>
        /// <param name="expand">The object expansion to perform on the result.  See documentation for examples (optional)</param>
        /// <returns>Task of AutoOrderResponse</returns>
        System.Threading.Tasks.Task<AutoOrderResponse> GetAutoOrderAsync (int? autoOrderOid, string expand = null);

        /// <summary>
        /// Retrieve an auto order
        /// </summary>
        /// <remarks>
        /// Retrieves a single auto order using the specified auto order oid. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="autoOrderOid">The auto order oid to retrieve.</param>
        /// <param name="expand">The object expansion to perform on the result.  See documentation for examples (optional)</param>
        /// <returns>Task of ApiResponse (AutoOrderResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AutoOrderResponse>> GetAutoOrderAsyncWithHttpInfo (int? autoOrderOid, string expand = null);
        /// <summary>
        /// Retrieve auto orders
        /// </summary>
        /// <remarks>
        /// Retrieves auto orders from the account.  If no parameters are specified, all auto orders will be returned.  You will need to make multiple API calls in order to retrieve the entire result set since this API performs result set pagination. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="autoOrderCode">Auto order code (optional)</param>
        /// <param name="originalOrderId">Original order id (optional)</param>
        /// <param name="firstName">First name (optional)</param>
        /// <param name="lastName">Last name (optional)</param>
        /// <param name="company">Company (optional)</param>
        /// <param name="city">City (optional)</param>
        /// <param name="state">State (optional)</param>
        /// <param name="postalCode">Postal code (optional)</param>
        /// <param name="countryCode">Country code (ISO-3166 two letter) (optional)</param>
        /// <param name="phone">Phone (optional)</param>
        /// <param name="email">Email (optional)</param>
        /// <param name="originalOrderDateBegin">Original order date begin (optional)</param>
        /// <param name="originalOrderDateEnd">Original order date end (optional)</param>
        /// <param name="nextShipmentDateBegin">Next shipment date begin (optional)</param>
        /// <param name="nextShipmentDateEnd">Next shipment date end (optional)</param>
        /// <param name="cardType">Card type (optional)</param>
        /// <param name="itemId">Item ID (optional)</param>
        /// <param name="status">Status (optional)</param>
        /// <param name="limit">The maximum number of records to return on this one API call. (Max 200) (optional, default to 100)</param>
        /// <param name="offset">Pagination of the record set.  Offset is a zero based index. (optional, default to 0)</param>
        /// <param name="since">Fetch auto orders that have been created/modified since this date/time. (optional)</param>
        /// <param name="sort">The sort order of the items.  See Sorting documentation for examples of using multiple values and sorting by ascending and descending. (optional)</param>
        /// <param name="expand">The object expansion to perform on the result.  See documentation for examples (optional)</param>
        /// <returns>Task of AutoOrdersResponse</returns>
        System.Threading.Tasks.Task<AutoOrdersResponse> GetAutoOrdersAsync (string autoOrderCode = null, string originalOrderId = null, string firstName = null, string lastName = null, string company = null, string city = null, string state = null, string postalCode = null, string countryCode = null, string phone = null, string email = null, string originalOrderDateBegin = null, string originalOrderDateEnd = null, string nextShipmentDateBegin = null, string nextShipmentDateEnd = null, string cardType = null, string itemId = null, string status = null, int? limit = null, int? offset = null, string since = null, string sort = null, string expand = null);

        /// <summary>
        /// Retrieve auto orders
        /// </summary>
        /// <remarks>
        /// Retrieves auto orders from the account.  If no parameters are specified, all auto orders will be returned.  You will need to make multiple API calls in order to retrieve the entire result set since this API performs result set pagination. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="autoOrderCode">Auto order code (optional)</param>
        /// <param name="originalOrderId">Original order id (optional)</param>
        /// <param name="firstName">First name (optional)</param>
        /// <param name="lastName">Last name (optional)</param>
        /// <param name="company">Company (optional)</param>
        /// <param name="city">City (optional)</param>
        /// <param name="state">State (optional)</param>
        /// <param name="postalCode">Postal code (optional)</param>
        /// <param name="countryCode">Country code (ISO-3166 two letter) (optional)</param>
        /// <param name="phone">Phone (optional)</param>
        /// <param name="email">Email (optional)</param>
        /// <param name="originalOrderDateBegin">Original order date begin (optional)</param>
        /// <param name="originalOrderDateEnd">Original order date end (optional)</param>
        /// <param name="nextShipmentDateBegin">Next shipment date begin (optional)</param>
        /// <param name="nextShipmentDateEnd">Next shipment date end (optional)</param>
        /// <param name="cardType">Card type (optional)</param>
        /// <param name="itemId">Item ID (optional)</param>
        /// <param name="status">Status (optional)</param>
        /// <param name="limit">The maximum number of records to return on this one API call. (Max 200) (optional, default to 100)</param>
        /// <param name="offset">Pagination of the record set.  Offset is a zero based index. (optional, default to 0)</param>
        /// <param name="since">Fetch auto orders that have been created/modified since this date/time. (optional)</param>
        /// <param name="sort">The sort order of the items.  See Sorting documentation for examples of using multiple values and sorting by ascending and descending. (optional)</param>
        /// <param name="expand">The object expansion to perform on the result.  See documentation for examples (optional)</param>
        /// <returns>Task of ApiResponse (AutoOrdersResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AutoOrdersResponse>> GetAutoOrdersAsyncWithHttpInfo (string autoOrderCode = null, string originalOrderId = null, string firstName = null, string lastName = null, string company = null, string city = null, string state = null, string postalCode = null, string countryCode = null, string phone = null, string email = null, string originalOrderDateBegin = null, string originalOrderDateEnd = null, string nextShipmentDateBegin = null, string nextShipmentDateEnd = null, string cardType = null, string itemId = null, string status = null, int? limit = null, int? offset = null, string since = null, string sort = null, string expand = null);
        /// <summary>
        /// Update an auto order
        /// </summary>
        /// <remarks>
        /// Update an auto order on the UltraCart account. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="autoOrder">Auto order to update</param>
        /// <param name="autoOrderOid">The auto order oid to update.</param>
        /// <param name="expand">The object expansion to perform on the result.  See documentation for examples (optional)</param>
        /// <returns>Task of AutoOrderResponse</returns>
        System.Threading.Tasks.Task<AutoOrderResponse> UpdateAutoOrderAsync (AutoOrder autoOrder, int? autoOrderOid, string expand = null);

        /// <summary>
        /// Update an auto order
        /// </summary>
        /// <remarks>
        /// Update an auto order on the UltraCart account. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="autoOrder">Auto order to update</param>
        /// <param name="autoOrderOid">The auto order oid to update.</param>
        /// <param name="expand">The object expansion to perform on the result.  See documentation for examples (optional)</param>
        /// <returns>Task of ApiResponse (AutoOrderResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AutoOrderResponse>> UpdateAutoOrderAsyncWithHttpInfo (AutoOrder autoOrder, int? autoOrderOid, string expand = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class AutoorderApi : IAutoorderApi
    {
        private com.ultracart.admin.v2.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="AutoorderApi"/> class.
        /// </summary>
        /// <returns></returns>
        public AutoorderApi(String basePath)
        {
            this.Configuration = new Configuration(new ApiClient(basePath));

            ExceptionFactory = com.ultracart.admin.v2.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AutoorderApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public AutoorderApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = com.ultracart.admin.v2.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public com.ultracart.admin.v2.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public Dictionary<String, String> DefaultHeader()
        {
            return this.Configuration.DefaultHeader;
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Retrieve an auto order Retrieves a single auto order using the specified auto order oid. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="autoOrderOid">The auto order oid to retrieve.</param>
        /// <param name="expand">The object expansion to perform on the result.  See documentation for examples (optional)</param>
        /// <returns>AutoOrderResponse</returns>
        public AutoOrderResponse GetAutoOrder (int? autoOrderOid, string expand = null)
        {
             ApiResponse<AutoOrderResponse> localVarResponse = GetAutoOrderWithHttpInfo(autoOrderOid, expand);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve an auto order Retrieves a single auto order using the specified auto order oid. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="autoOrderOid">The auto order oid to retrieve.</param>
        /// <param name="expand">The object expansion to perform on the result.  See documentation for examples (optional)</param>
        /// <returns>ApiResponse of AutoOrderResponse</returns>
        public ApiResponse< AutoOrderResponse > GetAutoOrderWithHttpInfo (int? autoOrderOid, string expand = null)
        {
            // verify the required parameter 'autoOrderOid' is set
            if (autoOrderOid == null)
                throw new ApiException(400, "Missing required parameter 'autoOrderOid' when calling AutoorderApi->GetAutoOrder");

            var localVarPath = "/auto_order/auto_orders/{auto_order_oid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (autoOrderOid != null) localVarPathParams.Add("auto_order_oid", Configuration.ApiClient.ParameterToString(autoOrderOid)); // path parameter
            if (expand != null) localVarQueryParams.Add("_expand", Configuration.ApiClient.ParameterToString(expand)); // query parameter

            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAutoOrder", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AutoOrderResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AutoOrderResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(AutoOrderResponse)));
            
        }

        /// <summary>
        /// Retrieve an auto order Retrieves a single auto order using the specified auto order oid. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="autoOrderOid">The auto order oid to retrieve.</param>
        /// <param name="expand">The object expansion to perform on the result.  See documentation for examples (optional)</param>
        /// <returns>Task of AutoOrderResponse</returns>
        public async System.Threading.Tasks.Task<AutoOrderResponse> GetAutoOrderAsync (int? autoOrderOid, string expand = null)
        {
             ApiResponse<AutoOrderResponse> localVarResponse = await GetAutoOrderAsyncWithHttpInfo(autoOrderOid, expand);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieve an auto order Retrieves a single auto order using the specified auto order oid. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="autoOrderOid">The auto order oid to retrieve.</param>
        /// <param name="expand">The object expansion to perform on the result.  See documentation for examples (optional)</param>
        /// <returns>Task of ApiResponse (AutoOrderResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AutoOrderResponse>> GetAutoOrderAsyncWithHttpInfo (int? autoOrderOid, string expand = null)
        {
            // verify the required parameter 'autoOrderOid' is set
            if (autoOrderOid == null)
                throw new ApiException(400, "Missing required parameter 'autoOrderOid' when calling AutoorderApi->GetAutoOrder");

            var localVarPath = "/auto_order/auto_orders/{auto_order_oid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (autoOrderOid != null) localVarPathParams.Add("auto_order_oid", Configuration.ApiClient.ParameterToString(autoOrderOid)); // path parameter
            if (expand != null) localVarQueryParams.Add("_expand", Configuration.ApiClient.ParameterToString(expand)); // query parameter

            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAutoOrder", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AutoOrderResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AutoOrderResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(AutoOrderResponse)));
            
        }

        /// <summary>
        /// Retrieve auto orders Retrieves auto orders from the account.  If no parameters are specified, all auto orders will be returned.  You will need to make multiple API calls in order to retrieve the entire result set since this API performs result set pagination. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="autoOrderCode">Auto order code (optional)</param>
        /// <param name="originalOrderId">Original order id (optional)</param>
        /// <param name="firstName">First name (optional)</param>
        /// <param name="lastName">Last name (optional)</param>
        /// <param name="company">Company (optional)</param>
        /// <param name="city">City (optional)</param>
        /// <param name="state">State (optional)</param>
        /// <param name="postalCode">Postal code (optional)</param>
        /// <param name="countryCode">Country code (ISO-3166 two letter) (optional)</param>
        /// <param name="phone">Phone (optional)</param>
        /// <param name="email">Email (optional)</param>
        /// <param name="originalOrderDateBegin">Original order date begin (optional)</param>
        /// <param name="originalOrderDateEnd">Original order date end (optional)</param>
        /// <param name="nextShipmentDateBegin">Next shipment date begin (optional)</param>
        /// <param name="nextShipmentDateEnd">Next shipment date end (optional)</param>
        /// <param name="cardType">Card type (optional)</param>
        /// <param name="itemId">Item ID (optional)</param>
        /// <param name="status">Status (optional)</param>
        /// <param name="limit">The maximum number of records to return on this one API call. (Max 200) (optional, default to 100)</param>
        /// <param name="offset">Pagination of the record set.  Offset is a zero based index. (optional, default to 0)</param>
        /// <param name="since">Fetch auto orders that have been created/modified since this date/time. (optional)</param>
        /// <param name="sort">The sort order of the items.  See Sorting documentation for examples of using multiple values and sorting by ascending and descending. (optional)</param>
        /// <param name="expand">The object expansion to perform on the result.  See documentation for examples (optional)</param>
        /// <returns>AutoOrdersResponse</returns>
        public AutoOrdersResponse GetAutoOrders (string autoOrderCode = null, string originalOrderId = null, string firstName = null, string lastName = null, string company = null, string city = null, string state = null, string postalCode = null, string countryCode = null, string phone = null, string email = null, string originalOrderDateBegin = null, string originalOrderDateEnd = null, string nextShipmentDateBegin = null, string nextShipmentDateEnd = null, string cardType = null, string itemId = null, string status = null, int? limit = null, int? offset = null, string since = null, string sort = null, string expand = null)
        {
             ApiResponse<AutoOrdersResponse> localVarResponse = GetAutoOrdersWithHttpInfo(autoOrderCode, originalOrderId, firstName, lastName, company, city, state, postalCode, countryCode, phone, email, originalOrderDateBegin, originalOrderDateEnd, nextShipmentDateBegin, nextShipmentDateEnd, cardType, itemId, status, limit, offset, since, sort, expand);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve auto orders Retrieves auto orders from the account.  If no parameters are specified, all auto orders will be returned.  You will need to make multiple API calls in order to retrieve the entire result set since this API performs result set pagination. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="autoOrderCode">Auto order code (optional)</param>
        /// <param name="originalOrderId">Original order id (optional)</param>
        /// <param name="firstName">First name (optional)</param>
        /// <param name="lastName">Last name (optional)</param>
        /// <param name="company">Company (optional)</param>
        /// <param name="city">City (optional)</param>
        /// <param name="state">State (optional)</param>
        /// <param name="postalCode">Postal code (optional)</param>
        /// <param name="countryCode">Country code (ISO-3166 two letter) (optional)</param>
        /// <param name="phone">Phone (optional)</param>
        /// <param name="email">Email (optional)</param>
        /// <param name="originalOrderDateBegin">Original order date begin (optional)</param>
        /// <param name="originalOrderDateEnd">Original order date end (optional)</param>
        /// <param name="nextShipmentDateBegin">Next shipment date begin (optional)</param>
        /// <param name="nextShipmentDateEnd">Next shipment date end (optional)</param>
        /// <param name="cardType">Card type (optional)</param>
        /// <param name="itemId">Item ID (optional)</param>
        /// <param name="status">Status (optional)</param>
        /// <param name="limit">The maximum number of records to return on this one API call. (Max 200) (optional, default to 100)</param>
        /// <param name="offset">Pagination of the record set.  Offset is a zero based index. (optional, default to 0)</param>
        /// <param name="since">Fetch auto orders that have been created/modified since this date/time. (optional)</param>
        /// <param name="sort">The sort order of the items.  See Sorting documentation for examples of using multiple values and sorting by ascending and descending. (optional)</param>
        /// <param name="expand">The object expansion to perform on the result.  See documentation for examples (optional)</param>
        /// <returns>ApiResponse of AutoOrdersResponse</returns>
        public ApiResponse< AutoOrdersResponse > GetAutoOrdersWithHttpInfo (string autoOrderCode = null, string originalOrderId = null, string firstName = null, string lastName = null, string company = null, string city = null, string state = null, string postalCode = null, string countryCode = null, string phone = null, string email = null, string originalOrderDateBegin = null, string originalOrderDateEnd = null, string nextShipmentDateBegin = null, string nextShipmentDateEnd = null, string cardType = null, string itemId = null, string status = null, int? limit = null, int? offset = null, string since = null, string sort = null, string expand = null)
        {

            var localVarPath = "/auto_order/auto_orders";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (autoOrderCode != null) localVarQueryParams.Add("auto_order_code", Configuration.ApiClient.ParameterToString(autoOrderCode)); // query parameter
            if (originalOrderId != null) localVarQueryParams.Add("original_order_id", Configuration.ApiClient.ParameterToString(originalOrderId)); // query parameter
            if (firstName != null) localVarQueryParams.Add("first_name", Configuration.ApiClient.ParameterToString(firstName)); // query parameter
            if (lastName != null) localVarQueryParams.Add("last_name", Configuration.ApiClient.ParameterToString(lastName)); // query parameter
            if (company != null) localVarQueryParams.Add("company", Configuration.ApiClient.ParameterToString(company)); // query parameter
            if (city != null) localVarQueryParams.Add("city", Configuration.ApiClient.ParameterToString(city)); // query parameter
            if (state != null) localVarQueryParams.Add("state", Configuration.ApiClient.ParameterToString(state)); // query parameter
            if (postalCode != null) localVarQueryParams.Add("postal_code", Configuration.ApiClient.ParameterToString(postalCode)); // query parameter
            if (countryCode != null) localVarQueryParams.Add("country_code", Configuration.ApiClient.ParameterToString(countryCode)); // query parameter
            if (phone != null) localVarQueryParams.Add("phone", Configuration.ApiClient.ParameterToString(phone)); // query parameter
            if (email != null) localVarQueryParams.Add("email", Configuration.ApiClient.ParameterToString(email)); // query parameter
            if (originalOrderDateBegin != null) localVarQueryParams.Add("original_order_date_begin", Configuration.ApiClient.ParameterToString(originalOrderDateBegin)); // query parameter
            if (originalOrderDateEnd != null) localVarQueryParams.Add("original_order_date_end", Configuration.ApiClient.ParameterToString(originalOrderDateEnd)); // query parameter
            if (nextShipmentDateBegin != null) localVarQueryParams.Add("next_shipment_date_begin", Configuration.ApiClient.ParameterToString(nextShipmentDateBegin)); // query parameter
            if (nextShipmentDateEnd != null) localVarQueryParams.Add("next_shipment_date_end", Configuration.ApiClient.ParameterToString(nextShipmentDateEnd)); // query parameter
            if (cardType != null) localVarQueryParams.Add("card_type", Configuration.ApiClient.ParameterToString(cardType)); // query parameter
            if (itemId != null) localVarQueryParams.Add("item_id", Configuration.ApiClient.ParameterToString(itemId)); // query parameter
            if (status != null) localVarQueryParams.Add("status", Configuration.ApiClient.ParameterToString(status)); // query parameter
            if (limit != null) localVarQueryParams.Add("_limit", Configuration.ApiClient.ParameterToString(limit)); // query parameter
            if (offset != null) localVarQueryParams.Add("_offset", Configuration.ApiClient.ParameterToString(offset)); // query parameter
            if (since != null) localVarQueryParams.Add("_since", Configuration.ApiClient.ParameterToString(since)); // query parameter
            if (sort != null) localVarQueryParams.Add("_sort", Configuration.ApiClient.ParameterToString(sort)); // query parameter
            if (expand != null) localVarQueryParams.Add("_expand", Configuration.ApiClient.ParameterToString(expand)); // query parameter

            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAutoOrders", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AutoOrdersResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AutoOrdersResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(AutoOrdersResponse)));
            
        }

        /// <summary>
        /// Retrieve auto orders Retrieves auto orders from the account.  If no parameters are specified, all auto orders will be returned.  You will need to make multiple API calls in order to retrieve the entire result set since this API performs result set pagination. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="autoOrderCode">Auto order code (optional)</param>
        /// <param name="originalOrderId">Original order id (optional)</param>
        /// <param name="firstName">First name (optional)</param>
        /// <param name="lastName">Last name (optional)</param>
        /// <param name="company">Company (optional)</param>
        /// <param name="city">City (optional)</param>
        /// <param name="state">State (optional)</param>
        /// <param name="postalCode">Postal code (optional)</param>
        /// <param name="countryCode">Country code (ISO-3166 two letter) (optional)</param>
        /// <param name="phone">Phone (optional)</param>
        /// <param name="email">Email (optional)</param>
        /// <param name="originalOrderDateBegin">Original order date begin (optional)</param>
        /// <param name="originalOrderDateEnd">Original order date end (optional)</param>
        /// <param name="nextShipmentDateBegin">Next shipment date begin (optional)</param>
        /// <param name="nextShipmentDateEnd">Next shipment date end (optional)</param>
        /// <param name="cardType">Card type (optional)</param>
        /// <param name="itemId">Item ID (optional)</param>
        /// <param name="status">Status (optional)</param>
        /// <param name="limit">The maximum number of records to return on this one API call. (Max 200) (optional, default to 100)</param>
        /// <param name="offset">Pagination of the record set.  Offset is a zero based index. (optional, default to 0)</param>
        /// <param name="since">Fetch auto orders that have been created/modified since this date/time. (optional)</param>
        /// <param name="sort">The sort order of the items.  See Sorting documentation for examples of using multiple values and sorting by ascending and descending. (optional)</param>
        /// <param name="expand">The object expansion to perform on the result.  See documentation for examples (optional)</param>
        /// <returns>Task of AutoOrdersResponse</returns>
        public async System.Threading.Tasks.Task<AutoOrdersResponse> GetAutoOrdersAsync (string autoOrderCode = null, string originalOrderId = null, string firstName = null, string lastName = null, string company = null, string city = null, string state = null, string postalCode = null, string countryCode = null, string phone = null, string email = null, string originalOrderDateBegin = null, string originalOrderDateEnd = null, string nextShipmentDateBegin = null, string nextShipmentDateEnd = null, string cardType = null, string itemId = null, string status = null, int? limit = null, int? offset = null, string since = null, string sort = null, string expand = null)
        {
             ApiResponse<AutoOrdersResponse> localVarResponse = await GetAutoOrdersAsyncWithHttpInfo(autoOrderCode, originalOrderId, firstName, lastName, company, city, state, postalCode, countryCode, phone, email, originalOrderDateBegin, originalOrderDateEnd, nextShipmentDateBegin, nextShipmentDateEnd, cardType, itemId, status, limit, offset, since, sort, expand);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieve auto orders Retrieves auto orders from the account.  If no parameters are specified, all auto orders will be returned.  You will need to make multiple API calls in order to retrieve the entire result set since this API performs result set pagination. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="autoOrderCode">Auto order code (optional)</param>
        /// <param name="originalOrderId">Original order id (optional)</param>
        /// <param name="firstName">First name (optional)</param>
        /// <param name="lastName">Last name (optional)</param>
        /// <param name="company">Company (optional)</param>
        /// <param name="city">City (optional)</param>
        /// <param name="state">State (optional)</param>
        /// <param name="postalCode">Postal code (optional)</param>
        /// <param name="countryCode">Country code (ISO-3166 two letter) (optional)</param>
        /// <param name="phone">Phone (optional)</param>
        /// <param name="email">Email (optional)</param>
        /// <param name="originalOrderDateBegin">Original order date begin (optional)</param>
        /// <param name="originalOrderDateEnd">Original order date end (optional)</param>
        /// <param name="nextShipmentDateBegin">Next shipment date begin (optional)</param>
        /// <param name="nextShipmentDateEnd">Next shipment date end (optional)</param>
        /// <param name="cardType">Card type (optional)</param>
        /// <param name="itemId">Item ID (optional)</param>
        /// <param name="status">Status (optional)</param>
        /// <param name="limit">The maximum number of records to return on this one API call. (Max 200) (optional, default to 100)</param>
        /// <param name="offset">Pagination of the record set.  Offset is a zero based index. (optional, default to 0)</param>
        /// <param name="since">Fetch auto orders that have been created/modified since this date/time. (optional)</param>
        /// <param name="sort">The sort order of the items.  See Sorting documentation for examples of using multiple values and sorting by ascending and descending. (optional)</param>
        /// <param name="expand">The object expansion to perform on the result.  See documentation for examples (optional)</param>
        /// <returns>Task of ApiResponse (AutoOrdersResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AutoOrdersResponse>> GetAutoOrdersAsyncWithHttpInfo (string autoOrderCode = null, string originalOrderId = null, string firstName = null, string lastName = null, string company = null, string city = null, string state = null, string postalCode = null, string countryCode = null, string phone = null, string email = null, string originalOrderDateBegin = null, string originalOrderDateEnd = null, string nextShipmentDateBegin = null, string nextShipmentDateEnd = null, string cardType = null, string itemId = null, string status = null, int? limit = null, int? offset = null, string since = null, string sort = null, string expand = null)
        {

            var localVarPath = "/auto_order/auto_orders";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (autoOrderCode != null) localVarQueryParams.Add("auto_order_code", Configuration.ApiClient.ParameterToString(autoOrderCode)); // query parameter
            if (originalOrderId != null) localVarQueryParams.Add("original_order_id", Configuration.ApiClient.ParameterToString(originalOrderId)); // query parameter
            if (firstName != null) localVarQueryParams.Add("first_name", Configuration.ApiClient.ParameterToString(firstName)); // query parameter
            if (lastName != null) localVarQueryParams.Add("last_name", Configuration.ApiClient.ParameterToString(lastName)); // query parameter
            if (company != null) localVarQueryParams.Add("company", Configuration.ApiClient.ParameterToString(company)); // query parameter
            if (city != null) localVarQueryParams.Add("city", Configuration.ApiClient.ParameterToString(city)); // query parameter
            if (state != null) localVarQueryParams.Add("state", Configuration.ApiClient.ParameterToString(state)); // query parameter
            if (postalCode != null) localVarQueryParams.Add("postal_code", Configuration.ApiClient.ParameterToString(postalCode)); // query parameter
            if (countryCode != null) localVarQueryParams.Add("country_code", Configuration.ApiClient.ParameterToString(countryCode)); // query parameter
            if (phone != null) localVarQueryParams.Add("phone", Configuration.ApiClient.ParameterToString(phone)); // query parameter
            if (email != null) localVarQueryParams.Add("email", Configuration.ApiClient.ParameterToString(email)); // query parameter
            if (originalOrderDateBegin != null) localVarQueryParams.Add("original_order_date_begin", Configuration.ApiClient.ParameterToString(originalOrderDateBegin)); // query parameter
            if (originalOrderDateEnd != null) localVarQueryParams.Add("original_order_date_end", Configuration.ApiClient.ParameterToString(originalOrderDateEnd)); // query parameter
            if (nextShipmentDateBegin != null) localVarQueryParams.Add("next_shipment_date_begin", Configuration.ApiClient.ParameterToString(nextShipmentDateBegin)); // query parameter
            if (nextShipmentDateEnd != null) localVarQueryParams.Add("next_shipment_date_end", Configuration.ApiClient.ParameterToString(nextShipmentDateEnd)); // query parameter
            if (cardType != null) localVarQueryParams.Add("card_type", Configuration.ApiClient.ParameterToString(cardType)); // query parameter
            if (itemId != null) localVarQueryParams.Add("item_id", Configuration.ApiClient.ParameterToString(itemId)); // query parameter
            if (status != null) localVarQueryParams.Add("status", Configuration.ApiClient.ParameterToString(status)); // query parameter
            if (limit != null) localVarQueryParams.Add("_limit", Configuration.ApiClient.ParameterToString(limit)); // query parameter
            if (offset != null) localVarQueryParams.Add("_offset", Configuration.ApiClient.ParameterToString(offset)); // query parameter
            if (since != null) localVarQueryParams.Add("_since", Configuration.ApiClient.ParameterToString(since)); // query parameter
            if (sort != null) localVarQueryParams.Add("_sort", Configuration.ApiClient.ParameterToString(sort)); // query parameter
            if (expand != null) localVarQueryParams.Add("_expand", Configuration.ApiClient.ParameterToString(expand)); // query parameter

            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAutoOrders", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AutoOrdersResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AutoOrdersResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(AutoOrdersResponse)));
            
        }

        /// <summary>
        /// Update an auto order Update an auto order on the UltraCart account. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="autoOrder">Auto order to update</param>
        /// <param name="autoOrderOid">The auto order oid to update.</param>
        /// <param name="expand">The object expansion to perform on the result.  See documentation for examples (optional)</param>
        /// <returns>AutoOrderResponse</returns>
        public AutoOrderResponse UpdateAutoOrder (AutoOrder autoOrder, int? autoOrderOid, string expand = null)
        {
             ApiResponse<AutoOrderResponse> localVarResponse = UpdateAutoOrderWithHttpInfo(autoOrder, autoOrderOid, expand);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update an auto order Update an auto order on the UltraCart account. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="autoOrder">Auto order to update</param>
        /// <param name="autoOrderOid">The auto order oid to update.</param>
        /// <param name="expand">The object expansion to perform on the result.  See documentation for examples (optional)</param>
        /// <returns>ApiResponse of AutoOrderResponse</returns>
        public ApiResponse< AutoOrderResponse > UpdateAutoOrderWithHttpInfo (AutoOrder autoOrder, int? autoOrderOid, string expand = null)
        {
            // verify the required parameter 'autoOrder' is set
            if (autoOrder == null)
                throw new ApiException(400, "Missing required parameter 'autoOrder' when calling AutoorderApi->UpdateAutoOrder");
            // verify the required parameter 'autoOrderOid' is set
            if (autoOrderOid == null)
                throw new ApiException(400, "Missing required parameter 'autoOrderOid' when calling AutoorderApi->UpdateAutoOrder");

            var localVarPath = "/auto_order/auto_orders/{auto_order_oid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json; charset=UTF-8"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (autoOrderOid != null) localVarPathParams.Add("auto_order_oid", Configuration.ApiClient.ParameterToString(autoOrderOid)); // path parameter
            if (expand != null) localVarQueryParams.Add("_expand", Configuration.ApiClient.ParameterToString(expand)); // query parameter
            if (autoOrder != null && autoOrder.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(autoOrder); // http body (model) parameter
            }
            else
            {
                localVarPostBody = autoOrder; // byte array
            }

            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateAutoOrder", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AutoOrderResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AutoOrderResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(AutoOrderResponse)));
            
        }

        /// <summary>
        /// Update an auto order Update an auto order on the UltraCart account. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="autoOrder">Auto order to update</param>
        /// <param name="autoOrderOid">The auto order oid to update.</param>
        /// <param name="expand">The object expansion to perform on the result.  See documentation for examples (optional)</param>
        /// <returns>Task of AutoOrderResponse</returns>
        public async System.Threading.Tasks.Task<AutoOrderResponse> UpdateAutoOrderAsync (AutoOrder autoOrder, int? autoOrderOid, string expand = null)
        {
             ApiResponse<AutoOrderResponse> localVarResponse = await UpdateAutoOrderAsyncWithHttpInfo(autoOrder, autoOrderOid, expand);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update an auto order Update an auto order on the UltraCart account. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="autoOrder">Auto order to update</param>
        /// <param name="autoOrderOid">The auto order oid to update.</param>
        /// <param name="expand">The object expansion to perform on the result.  See documentation for examples (optional)</param>
        /// <returns>Task of ApiResponse (AutoOrderResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AutoOrderResponse>> UpdateAutoOrderAsyncWithHttpInfo (AutoOrder autoOrder, int? autoOrderOid, string expand = null)
        {
            // verify the required parameter 'autoOrder' is set
            if (autoOrder == null)
                throw new ApiException(400, "Missing required parameter 'autoOrder' when calling AutoorderApi->UpdateAutoOrder");
            // verify the required parameter 'autoOrderOid' is set
            if (autoOrderOid == null)
                throw new ApiException(400, "Missing required parameter 'autoOrderOid' when calling AutoorderApi->UpdateAutoOrder");

            var localVarPath = "/auto_order/auto_orders/{auto_order_oid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json; charset=UTF-8"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (autoOrderOid != null) localVarPathParams.Add("auto_order_oid", Configuration.ApiClient.ParameterToString(autoOrderOid)); // path parameter
            if (expand != null) localVarQueryParams.Add("_expand", Configuration.ApiClient.ParameterToString(expand)); // query parameter
            if (autoOrder != null && autoOrder.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(autoOrder); // http body (model) parameter
            }
            else
            {
                localVarPostBody = autoOrder; // byte array
            }

            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateAutoOrder", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AutoOrderResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AutoOrderResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(AutoOrderResponse)));
            
        }

    }
}
