/* 
 * UltraCart Rest API V2
 *
 * UltraCart REST API Version 2
 *
 * OpenAPI spec version: 2.0.0
 * Contact: support@ultracart.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using com.ultracart.admin.v2.Client;
using com.ultracart.admin.v2.Model;

namespace com.ultracart.admin.v2.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IChannelPartnerApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Cancel channel partner order by channel partner order id
        /// </summary>
        /// <remarks>
        /// Cancel channel partner order by channel partner order id 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId">The channel partner order id to delete.</param>
        /// <returns>ChannelPartnerCancelResponse</returns>
        ChannelPartnerCancelResponse CancelOrderByChannelPartnerOrderId (string orderId);

        /// <summary>
        /// Cancel channel partner order by channel partner order id
        /// </summary>
        /// <remarks>
        /// Cancel channel partner order by channel partner order id 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId">The channel partner order id to delete.</param>
        /// <returns>ApiResponse of ChannelPartnerCancelResponse</returns>
        ApiResponse<ChannelPartnerCancelResponse> CancelOrderByChannelPartnerOrderIdWithHttpInfo (string orderId);
        /// <summary>
        /// Cancel channel partner order by UltraCart order id
        /// </summary>
        /// <remarks>
        /// Cancel channel partner order by UltraCart order id 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId">The UltraCart order id to delete.</param>
        /// <returns>ChannelPartnerCancelResponse</returns>
        ChannelPartnerCancelResponse CancelOrderByChannelUltraCartOrderId (string orderId);

        /// <summary>
        /// Cancel channel partner order by UltraCart order id
        /// </summary>
        /// <remarks>
        /// Cancel channel partner order by UltraCart order id 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId">The UltraCart order id to delete.</param>
        /// <returns>ApiResponse of ChannelPartnerCancelResponse</returns>
        ApiResponse<ChannelPartnerCancelResponse> CancelOrderByChannelUltraCartOrderIdWithHttpInfo (string orderId);
        /// <summary>
        /// Estimate shipping for channel partner order
        /// </summary>
        /// <remarks>
        /// Estimate shipping for order from a channel partner. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelPartnerOrder">Order needing shipping estimate</param>
        /// <returns>ChannelPartnerEstimateShippingResponse</returns>
        ChannelPartnerEstimateShippingResponse EstimateShippingForChannelPartnerOrder (ChannelPartnerOrder channelPartnerOrder);

        /// <summary>
        /// Estimate shipping for channel partner order
        /// </summary>
        /// <remarks>
        /// Estimate shipping for order from a channel partner. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelPartnerOrder">Order needing shipping estimate</param>
        /// <returns>ApiResponse of ChannelPartnerEstimateShippingResponse</returns>
        ApiResponse<ChannelPartnerEstimateShippingResponse> EstimateShippingForChannelPartnerOrderWithHttpInfo (ChannelPartnerOrder channelPartnerOrder);
        /// <summary>
        /// Insert channel partner order
        /// </summary>
        /// <remarks>
        /// Insert order from a channel partner. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelPartnerOrder">Order to insert</param>
        /// <returns>ChannelPartnerImportResponse</returns>
        ChannelPartnerImportResponse ImportChannelPartnerOrder (ChannelPartnerOrder channelPartnerOrder);

        /// <summary>
        /// Insert channel partner order
        /// </summary>
        /// <remarks>
        /// Insert order from a channel partner. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelPartnerOrder">Order to insert</param>
        /// <returns>ApiResponse of ChannelPartnerImportResponse</returns>
        ApiResponse<ChannelPartnerImportResponse> ImportChannelPartnerOrderWithHttpInfo (ChannelPartnerOrder channelPartnerOrder);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Cancel channel partner order by channel partner order id
        /// </summary>
        /// <remarks>
        /// Cancel channel partner order by channel partner order id 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId">The channel partner order id to delete.</param>
        /// <returns>Task of ChannelPartnerCancelResponse</returns>
        System.Threading.Tasks.Task<ChannelPartnerCancelResponse> CancelOrderByChannelPartnerOrderIdAsync (string orderId);

        /// <summary>
        /// Cancel channel partner order by channel partner order id
        /// </summary>
        /// <remarks>
        /// Cancel channel partner order by channel partner order id 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId">The channel partner order id to delete.</param>
        /// <returns>Task of ApiResponse (ChannelPartnerCancelResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ChannelPartnerCancelResponse>> CancelOrderByChannelPartnerOrderIdAsyncWithHttpInfo (string orderId);
        /// <summary>
        /// Cancel channel partner order by UltraCart order id
        /// </summary>
        /// <remarks>
        /// Cancel channel partner order by UltraCart order id 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId">The UltraCart order id to delete.</param>
        /// <returns>Task of ChannelPartnerCancelResponse</returns>
        System.Threading.Tasks.Task<ChannelPartnerCancelResponse> CancelOrderByChannelUltraCartOrderIdAsync (string orderId);

        /// <summary>
        /// Cancel channel partner order by UltraCart order id
        /// </summary>
        /// <remarks>
        /// Cancel channel partner order by UltraCart order id 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId">The UltraCart order id to delete.</param>
        /// <returns>Task of ApiResponse (ChannelPartnerCancelResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ChannelPartnerCancelResponse>> CancelOrderByChannelUltraCartOrderIdAsyncWithHttpInfo (string orderId);
        /// <summary>
        /// Estimate shipping for channel partner order
        /// </summary>
        /// <remarks>
        /// Estimate shipping for order from a channel partner. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelPartnerOrder">Order needing shipping estimate</param>
        /// <returns>Task of ChannelPartnerEstimateShippingResponse</returns>
        System.Threading.Tasks.Task<ChannelPartnerEstimateShippingResponse> EstimateShippingForChannelPartnerOrderAsync (ChannelPartnerOrder channelPartnerOrder);

        /// <summary>
        /// Estimate shipping for channel partner order
        /// </summary>
        /// <remarks>
        /// Estimate shipping for order from a channel partner. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelPartnerOrder">Order needing shipping estimate</param>
        /// <returns>Task of ApiResponse (ChannelPartnerEstimateShippingResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ChannelPartnerEstimateShippingResponse>> EstimateShippingForChannelPartnerOrderAsyncWithHttpInfo (ChannelPartnerOrder channelPartnerOrder);
        /// <summary>
        /// Insert channel partner order
        /// </summary>
        /// <remarks>
        /// Insert order from a channel partner. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelPartnerOrder">Order to insert</param>
        /// <returns>Task of ChannelPartnerImportResponse</returns>
        System.Threading.Tasks.Task<ChannelPartnerImportResponse> ImportChannelPartnerOrderAsync (ChannelPartnerOrder channelPartnerOrder);

        /// <summary>
        /// Insert channel partner order
        /// </summary>
        /// <remarks>
        /// Insert order from a channel partner. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelPartnerOrder">Order to insert</param>
        /// <returns>Task of ApiResponse (ChannelPartnerImportResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ChannelPartnerImportResponse>> ImportChannelPartnerOrderAsyncWithHttpInfo (ChannelPartnerOrder channelPartnerOrder);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ChannelPartnerApi : IChannelPartnerApi
    {
        private com.ultracart.admin.v2.Client.ExceptionFactory _exceptionFactory = (name, response) => null;
    
        /// <summary>
        /// Initializes a new instance of the <see cref="ChannelPartnerApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ChannelPartnerApi(com.ultracart.admin.v2.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = com.ultracart.admin.v2.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = com.ultracart.admin.v2.Client.Configuration.DefaultExceptionFactory;
        }


        /// <summary>
        /// Initializes a new instance of the <see cref="ChannelPartnerApi"/> class
        /// using a simple key string and optional version, which you will
        /// almost always want to use the default
        /// </summary>
        /// <param name="SimpleKey">A simple key.  See https://ultracart.atlassian.net/wiki/spaces/ucdoc/pages/38688545/API+Simple+Key</param>
        /// <returns></returns>
        public ChannelPartnerApi(string SimpleKey)
        {
            Configuration configuration = new Configuration();
            configuration.ApiKey.Add("x-ultracart-simple-key", SimpleKey);
            configuration.DefaultHeader.Add("X-UltraCart-Api-Version", "2017-03-01");
            this.Configuration = configuration;
            ExceptionFactory = com.ultracart.admin.v2.Client.Configuration.DefaultExceptionFactory;
        }


        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public com.ultracart.admin.v2.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public com.ultracart.admin.v2.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Cancel channel partner order by channel partner order id Cancel channel partner order by channel partner order id 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId">The channel partner order id to delete.</param>
        /// <returns>ChannelPartnerCancelResponse</returns>
        public ChannelPartnerCancelResponse CancelOrderByChannelPartnerOrderId (string orderId)
        {
             ApiResponse<ChannelPartnerCancelResponse> localVarResponse = CancelOrderByChannelPartnerOrderIdWithHttpInfo(orderId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Cancel channel partner order by channel partner order id Cancel channel partner order by channel partner order id 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId">The channel partner order id to delete.</param>
        /// <returns>ApiResponse of ChannelPartnerCancelResponse</returns>
        public ApiResponse< ChannelPartnerCancelResponse > CancelOrderByChannelPartnerOrderIdWithHttpInfo (string orderId)
        {
            // verify the required parameter 'orderId' is set
            if (orderId == null)
                throw new ApiException(400, "Missing required parameter 'orderId' when calling ChannelPartnerApi->CancelOrderByChannelPartnerOrderId");

            var localVarPath = "/channel_partner/cancel/by_channel_partner_order_id/{order_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json; charset=UTF-8"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (orderId != null) localVarPathParams.Add("order_id", this.Configuration.ApiClient.ParameterToString(orderId)); // path parameter

            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CancelOrderByChannelPartnerOrderId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ChannelPartnerCancelResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ChannelPartnerCancelResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ChannelPartnerCancelResponse)));
        }

        /// <summary>
        /// Cancel channel partner order by channel partner order id Cancel channel partner order by channel partner order id 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId">The channel partner order id to delete.</param>
        /// <returns>Task of ChannelPartnerCancelResponse</returns>
        public async System.Threading.Tasks.Task<ChannelPartnerCancelResponse> CancelOrderByChannelPartnerOrderIdAsync (string orderId)
        {
             ApiResponse<ChannelPartnerCancelResponse> localVarResponse = await CancelOrderByChannelPartnerOrderIdAsyncWithHttpInfo(orderId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Cancel channel partner order by channel partner order id Cancel channel partner order by channel partner order id 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId">The channel partner order id to delete.</param>
        /// <returns>Task of ApiResponse (ChannelPartnerCancelResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ChannelPartnerCancelResponse>> CancelOrderByChannelPartnerOrderIdAsyncWithHttpInfo (string orderId)
        {
            // verify the required parameter 'orderId' is set
            if (orderId == null)
                throw new ApiException(400, "Missing required parameter 'orderId' when calling ChannelPartnerApi->CancelOrderByChannelPartnerOrderId");

            var localVarPath = "/channel_partner/cancel/by_channel_partner_order_id/{order_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json; charset=UTF-8"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (orderId != null) localVarPathParams.Add("order_id", this.Configuration.ApiClient.ParameterToString(orderId)); // path parameter

            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CancelOrderByChannelPartnerOrderId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ChannelPartnerCancelResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ChannelPartnerCancelResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ChannelPartnerCancelResponse)));
        }

        /// <summary>
        /// Cancel channel partner order by UltraCart order id Cancel channel partner order by UltraCart order id 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId">The UltraCart order id to delete.</param>
        /// <returns>ChannelPartnerCancelResponse</returns>
        public ChannelPartnerCancelResponse CancelOrderByChannelUltraCartOrderId (string orderId)
        {
             ApiResponse<ChannelPartnerCancelResponse> localVarResponse = CancelOrderByChannelUltraCartOrderIdWithHttpInfo(orderId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Cancel channel partner order by UltraCart order id Cancel channel partner order by UltraCart order id 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId">The UltraCart order id to delete.</param>
        /// <returns>ApiResponse of ChannelPartnerCancelResponse</returns>
        public ApiResponse< ChannelPartnerCancelResponse > CancelOrderByChannelUltraCartOrderIdWithHttpInfo (string orderId)
        {
            // verify the required parameter 'orderId' is set
            if (orderId == null)
                throw new ApiException(400, "Missing required parameter 'orderId' when calling ChannelPartnerApi->CancelOrderByChannelUltraCartOrderId");

            var localVarPath = "/channel_partner/cancel/by_ultracart_order_id/{order_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json; charset=UTF-8"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (orderId != null) localVarPathParams.Add("order_id", this.Configuration.ApiClient.ParameterToString(orderId)); // path parameter

            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CancelOrderByChannelUltraCartOrderId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ChannelPartnerCancelResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ChannelPartnerCancelResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ChannelPartnerCancelResponse)));
        }

        /// <summary>
        /// Cancel channel partner order by UltraCart order id Cancel channel partner order by UltraCart order id 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId">The UltraCart order id to delete.</param>
        /// <returns>Task of ChannelPartnerCancelResponse</returns>
        public async System.Threading.Tasks.Task<ChannelPartnerCancelResponse> CancelOrderByChannelUltraCartOrderIdAsync (string orderId)
        {
             ApiResponse<ChannelPartnerCancelResponse> localVarResponse = await CancelOrderByChannelUltraCartOrderIdAsyncWithHttpInfo(orderId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Cancel channel partner order by UltraCart order id Cancel channel partner order by UltraCart order id 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId">The UltraCart order id to delete.</param>
        /// <returns>Task of ApiResponse (ChannelPartnerCancelResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ChannelPartnerCancelResponse>> CancelOrderByChannelUltraCartOrderIdAsyncWithHttpInfo (string orderId)
        {
            // verify the required parameter 'orderId' is set
            if (orderId == null)
                throw new ApiException(400, "Missing required parameter 'orderId' when calling ChannelPartnerApi->CancelOrderByChannelUltraCartOrderId");

            var localVarPath = "/channel_partner/cancel/by_ultracart_order_id/{order_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json; charset=UTF-8"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (orderId != null) localVarPathParams.Add("order_id", this.Configuration.ApiClient.ParameterToString(orderId)); // path parameter

            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CancelOrderByChannelUltraCartOrderId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ChannelPartnerCancelResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ChannelPartnerCancelResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ChannelPartnerCancelResponse)));
        }

        /// <summary>
        /// Estimate shipping for channel partner order Estimate shipping for order from a channel partner. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelPartnerOrder">Order needing shipping estimate</param>
        /// <returns>ChannelPartnerEstimateShippingResponse</returns>
        public ChannelPartnerEstimateShippingResponse EstimateShippingForChannelPartnerOrder (ChannelPartnerOrder channelPartnerOrder)
        {
             ApiResponse<ChannelPartnerEstimateShippingResponse> localVarResponse = EstimateShippingForChannelPartnerOrderWithHttpInfo(channelPartnerOrder);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Estimate shipping for channel partner order Estimate shipping for order from a channel partner. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelPartnerOrder">Order needing shipping estimate</param>
        /// <returns>ApiResponse of ChannelPartnerEstimateShippingResponse</returns>
        public ApiResponse< ChannelPartnerEstimateShippingResponse > EstimateShippingForChannelPartnerOrderWithHttpInfo (ChannelPartnerOrder channelPartnerOrder)
        {
            // verify the required parameter 'channelPartnerOrder' is set
            if (channelPartnerOrder == null)
                throw new ApiException(400, "Missing required parameter 'channelPartnerOrder' when calling ChannelPartnerApi->EstimateShippingForChannelPartnerOrder");

            var localVarPath = "/channel_partner/estimate_shipping";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json; charset=UTF-8"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (channelPartnerOrder != null && channelPartnerOrder.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(channelPartnerOrder); // http body (model) parameter
            }
            else
            {
                localVarPostBody = channelPartnerOrder; // byte array
            }

            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EstimateShippingForChannelPartnerOrder", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ChannelPartnerEstimateShippingResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ChannelPartnerEstimateShippingResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ChannelPartnerEstimateShippingResponse)));
        }

        /// <summary>
        /// Estimate shipping for channel partner order Estimate shipping for order from a channel partner. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelPartnerOrder">Order needing shipping estimate</param>
        /// <returns>Task of ChannelPartnerEstimateShippingResponse</returns>
        public async System.Threading.Tasks.Task<ChannelPartnerEstimateShippingResponse> EstimateShippingForChannelPartnerOrderAsync (ChannelPartnerOrder channelPartnerOrder)
        {
             ApiResponse<ChannelPartnerEstimateShippingResponse> localVarResponse = await EstimateShippingForChannelPartnerOrderAsyncWithHttpInfo(channelPartnerOrder);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Estimate shipping for channel partner order Estimate shipping for order from a channel partner. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelPartnerOrder">Order needing shipping estimate</param>
        /// <returns>Task of ApiResponse (ChannelPartnerEstimateShippingResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ChannelPartnerEstimateShippingResponse>> EstimateShippingForChannelPartnerOrderAsyncWithHttpInfo (ChannelPartnerOrder channelPartnerOrder)
        {
            // verify the required parameter 'channelPartnerOrder' is set
            if (channelPartnerOrder == null)
                throw new ApiException(400, "Missing required parameter 'channelPartnerOrder' when calling ChannelPartnerApi->EstimateShippingForChannelPartnerOrder");

            var localVarPath = "/channel_partner/estimate_shipping";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json; charset=UTF-8"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (channelPartnerOrder != null && channelPartnerOrder.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(channelPartnerOrder); // http body (model) parameter
            }
            else
            {
                localVarPostBody = channelPartnerOrder; // byte array
            }

            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EstimateShippingForChannelPartnerOrder", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ChannelPartnerEstimateShippingResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ChannelPartnerEstimateShippingResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ChannelPartnerEstimateShippingResponse)));
        }

        /// <summary>
        /// Insert channel partner order Insert order from a channel partner. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelPartnerOrder">Order to insert</param>
        /// <returns>ChannelPartnerImportResponse</returns>
        public ChannelPartnerImportResponse ImportChannelPartnerOrder (ChannelPartnerOrder channelPartnerOrder)
        {
             ApiResponse<ChannelPartnerImportResponse> localVarResponse = ImportChannelPartnerOrderWithHttpInfo(channelPartnerOrder);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Insert channel partner order Insert order from a channel partner. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelPartnerOrder">Order to insert</param>
        /// <returns>ApiResponse of ChannelPartnerImportResponse</returns>
        public ApiResponse< ChannelPartnerImportResponse > ImportChannelPartnerOrderWithHttpInfo (ChannelPartnerOrder channelPartnerOrder)
        {
            // verify the required parameter 'channelPartnerOrder' is set
            if (channelPartnerOrder == null)
                throw new ApiException(400, "Missing required parameter 'channelPartnerOrder' when calling ChannelPartnerApi->ImportChannelPartnerOrder");

            var localVarPath = "/channel_partner/import";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json; charset=UTF-8"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (channelPartnerOrder != null && channelPartnerOrder.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(channelPartnerOrder); // http body (model) parameter
            }
            else
            {
                localVarPostBody = channelPartnerOrder; // byte array
            }

            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ImportChannelPartnerOrder", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ChannelPartnerImportResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ChannelPartnerImportResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ChannelPartnerImportResponse)));
        }

        /// <summary>
        /// Insert channel partner order Insert order from a channel partner. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelPartnerOrder">Order to insert</param>
        /// <returns>Task of ChannelPartnerImportResponse</returns>
        public async System.Threading.Tasks.Task<ChannelPartnerImportResponse> ImportChannelPartnerOrderAsync (ChannelPartnerOrder channelPartnerOrder)
        {
             ApiResponse<ChannelPartnerImportResponse> localVarResponse = await ImportChannelPartnerOrderAsyncWithHttpInfo(channelPartnerOrder);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Insert channel partner order Insert order from a channel partner. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelPartnerOrder">Order to insert</param>
        /// <returns>Task of ApiResponse (ChannelPartnerImportResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ChannelPartnerImportResponse>> ImportChannelPartnerOrderAsyncWithHttpInfo (ChannelPartnerOrder channelPartnerOrder)
        {
            // verify the required parameter 'channelPartnerOrder' is set
            if (channelPartnerOrder == null)
                throw new ApiException(400, "Missing required parameter 'channelPartnerOrder' when calling ChannelPartnerApi->ImportChannelPartnerOrder");

            var localVarPath = "/channel_partner/import";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json; charset=UTF-8"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (channelPartnerOrder != null && channelPartnerOrder.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(channelPartnerOrder); // http body (model) parameter
            }
            else
            {
                localVarPostBody = channelPartnerOrder; // byte array
            }

            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ImportChannelPartnerOrder", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ChannelPartnerImportResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ChannelPartnerImportResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ChannelPartnerImportResponse)));
        }

    }
}
