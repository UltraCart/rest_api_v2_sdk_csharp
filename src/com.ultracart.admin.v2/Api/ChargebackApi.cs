/* 
 * UltraCart Rest API V2
 *
 * This is the next generation UltraCart REST API...
 *
 * OpenAPI spec version: 2.0.0
 * Contact: support@ultracart.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using com.ultracart.admin.v2.Client;
using com.ultracart.admin.v2.Model;

namespace com.ultracart.admin.v2.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IChargebackApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Delete a chargeback
        /// </summary>
        /// <remarks>
        /// Delete a chargeback on the UltraCart account. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chargebackDisputeOid">The chargeback_dispute_oid to delete.</param>
        /// <returns>ChargebackDisputeResponse</returns>
        ChargebackDisputeResponse ChargebackChargebacksChargebackDisputeOidDelete (int? chargebackDisputeOid);

        /// <summary>
        /// Delete a chargeback
        /// </summary>
        /// <remarks>
        /// Delete a chargeback on the UltraCart account. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chargebackDisputeOid">The chargeback_dispute_oid to delete.</param>
        /// <returns>ApiResponse of ChargebackDisputeResponse</returns>
        ApiResponse<ChargebackDisputeResponse> ChargebackChargebacksChargebackDisputeOidDeleteWithHttpInfo (int? chargebackDisputeOid);
        /// <summary>
        /// Retrieve a chargeback
        /// </summary>
        /// <remarks>
        /// Retrieves a single chargeback using the specified chargeback dispute oid. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chargebackDisputeOid">The chargeback dispute oid to retrieve.</param>
        /// <param name="expand">The object expansion to perform on the result.  See documentation for examples (optional)</param>
        /// <returns>ChargebackDisputeResponse</returns>
        ChargebackDisputeResponse ChargebackChargebacksChargebackDisputeOidGet (int? chargebackDisputeOid, string expand = null);

        /// <summary>
        /// Retrieve a chargeback
        /// </summary>
        /// <remarks>
        /// Retrieves a single chargeback using the specified chargeback dispute oid. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chargebackDisputeOid">The chargeback dispute oid to retrieve.</param>
        /// <param name="expand">The object expansion to perform on the result.  See documentation for examples (optional)</param>
        /// <returns>ApiResponse of ChargebackDisputeResponse</returns>
        ApiResponse<ChargebackDisputeResponse> ChargebackChargebacksChargebackDisputeOidGetWithHttpInfo (int? chargebackDisputeOid, string expand = null);
        /// <summary>
        /// Update a chargeback
        /// </summary>
        /// <remarks>
        /// Update a chargeback on the UltraCart account. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chargeback">Chargeback to update</param>
        /// <param name="chargebackDisputeOid">The chargeback_dispute_oid to update.</param>
        /// <param name="expand">The object expansion to perform on the result.  See documentation for examples (optional)</param>
        /// <returns>ChargebackDisputeResponse</returns>
        ChargebackDisputeResponse ChargebackChargebacksChargebackDisputeOidPut (ChargebackDispute chargeback, int? chargebackDisputeOid, string expand = null);

        /// <summary>
        /// Update a chargeback
        /// </summary>
        /// <remarks>
        /// Update a chargeback on the UltraCart account. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chargeback">Chargeback to update</param>
        /// <param name="chargebackDisputeOid">The chargeback_dispute_oid to update.</param>
        /// <param name="expand">The object expansion to perform on the result.  See documentation for examples (optional)</param>
        /// <returns>ApiResponse of ChargebackDisputeResponse</returns>
        ApiResponse<ChargebackDisputeResponse> ChargebackChargebacksChargebackDisputeOidPutWithHttpInfo (ChargebackDispute chargeback, int? chargebackDisputeOid, string expand = null);
        /// <summary>
        /// Retrieve chargebacks
        /// </summary>
        /// <remarks>
        /// Retrieves chargebacks from the account.  If no parameters are specified, all chargebacks will be returned.  You will need to make multiple API calls in order to retrieve the entire result set since this API performs result set pagination. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId">Order Id (optional)</param>
        /// <param name="caseNumber">Case number (optional)</param>
        /// <param name="status">Status (optional)</param>
        /// <param name="expirationDtsStart">Expiration dts start (optional)</param>
        /// <param name="expirationDtsEnd">Expiration dts end (optional)</param>
        /// <param name="chargebackDtsStart">Chargeback dts start (optional)</param>
        /// <param name="chargebackDtsEnd">Chargeback dts end (optional)</param>
        /// <param name="limit">The maximum number of records to return on this one API call. (Max 200) (optional, default to 100)</param>
        /// <param name="offset">Pagination of the record set.  Offset is a zero based index. (optional, default to 0)</param>
        /// <param name="since">Fetch chargebacks that have been created/modified since this date/time. (optional)</param>
        /// <param name="sort">The sort order of the chargebacks.  See Sorting documentation for examples of using multiple values and sorting by ascending and descending. (optional)</param>
        /// <param name="expand">The object expansion to perform on the result.  See documentation for examples (optional)</param>
        /// <returns>ChargebackDisputesResponse</returns>
        ChargebackDisputesResponse ChargebackChargebacksGet (string orderId = null, string caseNumber = null, string status = null, string expirationDtsStart = null, string expirationDtsEnd = null, string chargebackDtsStart = null, string chargebackDtsEnd = null, int? limit = null, int? offset = null, string since = null, string sort = null, string expand = null);

        /// <summary>
        /// Retrieve chargebacks
        /// </summary>
        /// <remarks>
        /// Retrieves chargebacks from the account.  If no parameters are specified, all chargebacks will be returned.  You will need to make multiple API calls in order to retrieve the entire result set since this API performs result set pagination. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId">Order Id (optional)</param>
        /// <param name="caseNumber">Case number (optional)</param>
        /// <param name="status">Status (optional)</param>
        /// <param name="expirationDtsStart">Expiration dts start (optional)</param>
        /// <param name="expirationDtsEnd">Expiration dts end (optional)</param>
        /// <param name="chargebackDtsStart">Chargeback dts start (optional)</param>
        /// <param name="chargebackDtsEnd">Chargeback dts end (optional)</param>
        /// <param name="limit">The maximum number of records to return on this one API call. (Max 200) (optional, default to 100)</param>
        /// <param name="offset">Pagination of the record set.  Offset is a zero based index. (optional, default to 0)</param>
        /// <param name="since">Fetch chargebacks that have been created/modified since this date/time. (optional)</param>
        /// <param name="sort">The sort order of the chargebacks.  See Sorting documentation for examples of using multiple values and sorting by ascending and descending. (optional)</param>
        /// <param name="expand">The object expansion to perform on the result.  See documentation for examples (optional)</param>
        /// <returns>ApiResponse of ChargebackDisputesResponse</returns>
        ApiResponse<ChargebackDisputesResponse> ChargebackChargebacksGetWithHttpInfo (string orderId = null, string caseNumber = null, string status = null, string expirationDtsStart = null, string expirationDtsEnd = null, string chargebackDtsStart = null, string chargebackDtsEnd = null, int? limit = null, int? offset = null, string since = null, string sort = null, string expand = null);
        /// <summary>
        /// Insert a chargeback
        /// </summary>
        /// <remarks>
        /// Insert a chargeback on the UltraCart account. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chargeback">Chargeback to insert</param>
        /// <param name="expand">The object expansion to perform on the result.  See documentation for examples (optional)</param>
        /// <returns>ChargebackDisputeResponse</returns>
        ChargebackDisputeResponse ChargebackChargebacksPost (ChargebackDispute chargeback, string expand = null);

        /// <summary>
        /// Insert a chargeback
        /// </summary>
        /// <remarks>
        /// Insert a chargeback on the UltraCart account. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chargeback">Chargeback to insert</param>
        /// <param name="expand">The object expansion to perform on the result.  See documentation for examples (optional)</param>
        /// <returns>ApiResponse of ChargebackDisputeResponse</returns>
        ApiResponse<ChargebackDisputeResponse> ChargebackChargebacksPostWithHttpInfo (ChargebackDispute chargeback, string expand = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Delete a chargeback
        /// </summary>
        /// <remarks>
        /// Delete a chargeback on the UltraCart account. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chargebackDisputeOid">The chargeback_dispute_oid to delete.</param>
        /// <returns>Task of ChargebackDisputeResponse</returns>
        System.Threading.Tasks.Task<ChargebackDisputeResponse> ChargebackChargebacksChargebackDisputeOidDeleteAsync (int? chargebackDisputeOid);

        /// <summary>
        /// Delete a chargeback
        /// </summary>
        /// <remarks>
        /// Delete a chargeback on the UltraCart account. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chargebackDisputeOid">The chargeback_dispute_oid to delete.</param>
        /// <returns>Task of ApiResponse (ChargebackDisputeResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ChargebackDisputeResponse>> ChargebackChargebacksChargebackDisputeOidDeleteAsyncWithHttpInfo (int? chargebackDisputeOid);
        /// <summary>
        /// Retrieve a chargeback
        /// </summary>
        /// <remarks>
        /// Retrieves a single chargeback using the specified chargeback dispute oid. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chargebackDisputeOid">The chargeback dispute oid to retrieve.</param>
        /// <param name="expand">The object expansion to perform on the result.  See documentation for examples (optional)</param>
        /// <returns>Task of ChargebackDisputeResponse</returns>
        System.Threading.Tasks.Task<ChargebackDisputeResponse> ChargebackChargebacksChargebackDisputeOidGetAsync (int? chargebackDisputeOid, string expand = null);

        /// <summary>
        /// Retrieve a chargeback
        /// </summary>
        /// <remarks>
        /// Retrieves a single chargeback using the specified chargeback dispute oid. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chargebackDisputeOid">The chargeback dispute oid to retrieve.</param>
        /// <param name="expand">The object expansion to perform on the result.  See documentation for examples (optional)</param>
        /// <returns>Task of ApiResponse (ChargebackDisputeResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ChargebackDisputeResponse>> ChargebackChargebacksChargebackDisputeOidGetAsyncWithHttpInfo (int? chargebackDisputeOid, string expand = null);
        /// <summary>
        /// Update a chargeback
        /// </summary>
        /// <remarks>
        /// Update a chargeback on the UltraCart account. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chargeback">Chargeback to update</param>
        /// <param name="chargebackDisputeOid">The chargeback_dispute_oid to update.</param>
        /// <param name="expand">The object expansion to perform on the result.  See documentation for examples (optional)</param>
        /// <returns>Task of ChargebackDisputeResponse</returns>
        System.Threading.Tasks.Task<ChargebackDisputeResponse> ChargebackChargebacksChargebackDisputeOidPutAsync (ChargebackDispute chargeback, int? chargebackDisputeOid, string expand = null);

        /// <summary>
        /// Update a chargeback
        /// </summary>
        /// <remarks>
        /// Update a chargeback on the UltraCart account. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chargeback">Chargeback to update</param>
        /// <param name="chargebackDisputeOid">The chargeback_dispute_oid to update.</param>
        /// <param name="expand">The object expansion to perform on the result.  See documentation for examples (optional)</param>
        /// <returns>Task of ApiResponse (ChargebackDisputeResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ChargebackDisputeResponse>> ChargebackChargebacksChargebackDisputeOidPutAsyncWithHttpInfo (ChargebackDispute chargeback, int? chargebackDisputeOid, string expand = null);
        /// <summary>
        /// Retrieve chargebacks
        /// </summary>
        /// <remarks>
        /// Retrieves chargebacks from the account.  If no parameters are specified, all chargebacks will be returned.  You will need to make multiple API calls in order to retrieve the entire result set since this API performs result set pagination. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId">Order Id (optional)</param>
        /// <param name="caseNumber">Case number (optional)</param>
        /// <param name="status">Status (optional)</param>
        /// <param name="expirationDtsStart">Expiration dts start (optional)</param>
        /// <param name="expirationDtsEnd">Expiration dts end (optional)</param>
        /// <param name="chargebackDtsStart">Chargeback dts start (optional)</param>
        /// <param name="chargebackDtsEnd">Chargeback dts end (optional)</param>
        /// <param name="limit">The maximum number of records to return on this one API call. (Max 200) (optional, default to 100)</param>
        /// <param name="offset">Pagination of the record set.  Offset is a zero based index. (optional, default to 0)</param>
        /// <param name="since">Fetch chargebacks that have been created/modified since this date/time. (optional)</param>
        /// <param name="sort">The sort order of the chargebacks.  See Sorting documentation for examples of using multiple values and sorting by ascending and descending. (optional)</param>
        /// <param name="expand">The object expansion to perform on the result.  See documentation for examples (optional)</param>
        /// <returns>Task of ChargebackDisputesResponse</returns>
        System.Threading.Tasks.Task<ChargebackDisputesResponse> ChargebackChargebacksGetAsync (string orderId = null, string caseNumber = null, string status = null, string expirationDtsStart = null, string expirationDtsEnd = null, string chargebackDtsStart = null, string chargebackDtsEnd = null, int? limit = null, int? offset = null, string since = null, string sort = null, string expand = null);

        /// <summary>
        /// Retrieve chargebacks
        /// </summary>
        /// <remarks>
        /// Retrieves chargebacks from the account.  If no parameters are specified, all chargebacks will be returned.  You will need to make multiple API calls in order to retrieve the entire result set since this API performs result set pagination. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId">Order Id (optional)</param>
        /// <param name="caseNumber">Case number (optional)</param>
        /// <param name="status">Status (optional)</param>
        /// <param name="expirationDtsStart">Expiration dts start (optional)</param>
        /// <param name="expirationDtsEnd">Expiration dts end (optional)</param>
        /// <param name="chargebackDtsStart">Chargeback dts start (optional)</param>
        /// <param name="chargebackDtsEnd">Chargeback dts end (optional)</param>
        /// <param name="limit">The maximum number of records to return on this one API call. (Max 200) (optional, default to 100)</param>
        /// <param name="offset">Pagination of the record set.  Offset is a zero based index. (optional, default to 0)</param>
        /// <param name="since">Fetch chargebacks that have been created/modified since this date/time. (optional)</param>
        /// <param name="sort">The sort order of the chargebacks.  See Sorting documentation for examples of using multiple values and sorting by ascending and descending. (optional)</param>
        /// <param name="expand">The object expansion to perform on the result.  See documentation for examples (optional)</param>
        /// <returns>Task of ApiResponse (ChargebackDisputesResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ChargebackDisputesResponse>> ChargebackChargebacksGetAsyncWithHttpInfo (string orderId = null, string caseNumber = null, string status = null, string expirationDtsStart = null, string expirationDtsEnd = null, string chargebackDtsStart = null, string chargebackDtsEnd = null, int? limit = null, int? offset = null, string since = null, string sort = null, string expand = null);
        /// <summary>
        /// Insert a chargeback
        /// </summary>
        /// <remarks>
        /// Insert a chargeback on the UltraCart account. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chargeback">Chargeback to insert</param>
        /// <param name="expand">The object expansion to perform on the result.  See documentation for examples (optional)</param>
        /// <returns>Task of ChargebackDisputeResponse</returns>
        System.Threading.Tasks.Task<ChargebackDisputeResponse> ChargebackChargebacksPostAsync (ChargebackDispute chargeback, string expand = null);

        /// <summary>
        /// Insert a chargeback
        /// </summary>
        /// <remarks>
        /// Insert a chargeback on the UltraCart account. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chargeback">Chargeback to insert</param>
        /// <param name="expand">The object expansion to perform on the result.  See documentation for examples (optional)</param>
        /// <returns>Task of ApiResponse (ChargebackDisputeResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ChargebackDisputeResponse>> ChargebackChargebacksPostAsyncWithHttpInfo (ChargebackDispute chargeback, string expand = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ChargebackApi : IChargebackApi
    {
        private com.ultracart.admin.v2.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ChargebackApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ChargebackApi(String basePath)
        {
            this.Configuration = new Configuration(new ApiClient(basePath));

            ExceptionFactory = com.ultracart.admin.v2.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ChargebackApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ChargebackApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = com.ultracart.admin.v2.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public com.ultracart.admin.v2.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public Dictionary<String, String> DefaultHeader()
        {
            return this.Configuration.DefaultHeader;
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Delete a chargeback Delete a chargeback on the UltraCart account. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chargebackDisputeOid">The chargeback_dispute_oid to delete.</param>
        /// <returns>ChargebackDisputeResponse</returns>
        public ChargebackDisputeResponse ChargebackChargebacksChargebackDisputeOidDelete (int? chargebackDisputeOid)
        {
             ApiResponse<ChargebackDisputeResponse> localVarResponse = ChargebackChargebacksChargebackDisputeOidDeleteWithHttpInfo(chargebackDisputeOid);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Delete a chargeback Delete a chargeback on the UltraCart account. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chargebackDisputeOid">The chargeback_dispute_oid to delete.</param>
        /// <returns>ApiResponse of ChargebackDisputeResponse</returns>
        public ApiResponse< ChargebackDisputeResponse > ChargebackChargebacksChargebackDisputeOidDeleteWithHttpInfo (int? chargebackDisputeOid)
        {
            // verify the required parameter 'chargebackDisputeOid' is set
            if (chargebackDisputeOid == null)
                throw new ApiException(400, "Missing required parameter 'chargebackDisputeOid' when calling ChargebackApi->ChargebackChargebacksChargebackDisputeOidDelete");

            var localVarPath = "/chargeback/chargebacks/{chargeback_dispute_oid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json; charset=UTF-8"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (chargebackDisputeOid != null) localVarPathParams.Add("chargeback_dispute_oid", Configuration.ApiClient.ParameterToString(chargebackDisputeOid)); // path parameter

            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ChargebackChargebacksChargebackDisputeOidDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ChargebackDisputeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ChargebackDisputeResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ChargebackDisputeResponse)));
            
        }

        /// <summary>
        /// Delete a chargeback Delete a chargeback on the UltraCart account. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chargebackDisputeOid">The chargeback_dispute_oid to delete.</param>
        /// <returns>Task of ChargebackDisputeResponse</returns>
        public async System.Threading.Tasks.Task<ChargebackDisputeResponse> ChargebackChargebacksChargebackDisputeOidDeleteAsync (int? chargebackDisputeOid)
        {
             ApiResponse<ChargebackDisputeResponse> localVarResponse = await ChargebackChargebacksChargebackDisputeOidDeleteAsyncWithHttpInfo(chargebackDisputeOid);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Delete a chargeback Delete a chargeback on the UltraCart account. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chargebackDisputeOid">The chargeback_dispute_oid to delete.</param>
        /// <returns>Task of ApiResponse (ChargebackDisputeResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ChargebackDisputeResponse>> ChargebackChargebacksChargebackDisputeOidDeleteAsyncWithHttpInfo (int? chargebackDisputeOid)
        {
            // verify the required parameter 'chargebackDisputeOid' is set
            if (chargebackDisputeOid == null)
                throw new ApiException(400, "Missing required parameter 'chargebackDisputeOid' when calling ChargebackApi->ChargebackChargebacksChargebackDisputeOidDelete");

            var localVarPath = "/chargeback/chargebacks/{chargeback_dispute_oid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json; charset=UTF-8"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (chargebackDisputeOid != null) localVarPathParams.Add("chargeback_dispute_oid", Configuration.ApiClient.ParameterToString(chargebackDisputeOid)); // path parameter

            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ChargebackChargebacksChargebackDisputeOidDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ChargebackDisputeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ChargebackDisputeResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ChargebackDisputeResponse)));
            
        }

        /// <summary>
        /// Retrieve a chargeback Retrieves a single chargeback using the specified chargeback dispute oid. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chargebackDisputeOid">The chargeback dispute oid to retrieve.</param>
        /// <param name="expand">The object expansion to perform on the result.  See documentation for examples (optional)</param>
        /// <returns>ChargebackDisputeResponse</returns>
        public ChargebackDisputeResponse ChargebackChargebacksChargebackDisputeOidGet (int? chargebackDisputeOid, string expand = null)
        {
             ApiResponse<ChargebackDisputeResponse> localVarResponse = ChargebackChargebacksChargebackDisputeOidGetWithHttpInfo(chargebackDisputeOid, expand);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve a chargeback Retrieves a single chargeback using the specified chargeback dispute oid. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chargebackDisputeOid">The chargeback dispute oid to retrieve.</param>
        /// <param name="expand">The object expansion to perform on the result.  See documentation for examples (optional)</param>
        /// <returns>ApiResponse of ChargebackDisputeResponse</returns>
        public ApiResponse< ChargebackDisputeResponse > ChargebackChargebacksChargebackDisputeOidGetWithHttpInfo (int? chargebackDisputeOid, string expand = null)
        {
            // verify the required parameter 'chargebackDisputeOid' is set
            if (chargebackDisputeOid == null)
                throw new ApiException(400, "Missing required parameter 'chargebackDisputeOid' when calling ChargebackApi->ChargebackChargebacksChargebackDisputeOidGet");

            var localVarPath = "/chargeback/chargebacks/{chargeback_dispute_oid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (chargebackDisputeOid != null) localVarPathParams.Add("chargeback_dispute_oid", Configuration.ApiClient.ParameterToString(chargebackDisputeOid)); // path parameter
            if (expand != null) localVarQueryParams.Add("_expand", Configuration.ApiClient.ParameterToString(expand)); // query parameter

            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ChargebackChargebacksChargebackDisputeOidGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ChargebackDisputeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ChargebackDisputeResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ChargebackDisputeResponse)));
            
        }

        /// <summary>
        /// Retrieve a chargeback Retrieves a single chargeback using the specified chargeback dispute oid. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chargebackDisputeOid">The chargeback dispute oid to retrieve.</param>
        /// <param name="expand">The object expansion to perform on the result.  See documentation for examples (optional)</param>
        /// <returns>Task of ChargebackDisputeResponse</returns>
        public async System.Threading.Tasks.Task<ChargebackDisputeResponse> ChargebackChargebacksChargebackDisputeOidGetAsync (int? chargebackDisputeOid, string expand = null)
        {
             ApiResponse<ChargebackDisputeResponse> localVarResponse = await ChargebackChargebacksChargebackDisputeOidGetAsyncWithHttpInfo(chargebackDisputeOid, expand);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieve a chargeback Retrieves a single chargeback using the specified chargeback dispute oid. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chargebackDisputeOid">The chargeback dispute oid to retrieve.</param>
        /// <param name="expand">The object expansion to perform on the result.  See documentation for examples (optional)</param>
        /// <returns>Task of ApiResponse (ChargebackDisputeResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ChargebackDisputeResponse>> ChargebackChargebacksChargebackDisputeOidGetAsyncWithHttpInfo (int? chargebackDisputeOid, string expand = null)
        {
            // verify the required parameter 'chargebackDisputeOid' is set
            if (chargebackDisputeOid == null)
                throw new ApiException(400, "Missing required parameter 'chargebackDisputeOid' when calling ChargebackApi->ChargebackChargebacksChargebackDisputeOidGet");

            var localVarPath = "/chargeback/chargebacks/{chargeback_dispute_oid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (chargebackDisputeOid != null) localVarPathParams.Add("chargeback_dispute_oid", Configuration.ApiClient.ParameterToString(chargebackDisputeOid)); // path parameter
            if (expand != null) localVarQueryParams.Add("_expand", Configuration.ApiClient.ParameterToString(expand)); // query parameter

            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ChargebackChargebacksChargebackDisputeOidGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ChargebackDisputeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ChargebackDisputeResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ChargebackDisputeResponse)));
            
        }

        /// <summary>
        /// Update a chargeback Update a chargeback on the UltraCart account. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chargeback">Chargeback to update</param>
        /// <param name="chargebackDisputeOid">The chargeback_dispute_oid to update.</param>
        /// <param name="expand">The object expansion to perform on the result.  See documentation for examples (optional)</param>
        /// <returns>ChargebackDisputeResponse</returns>
        public ChargebackDisputeResponse ChargebackChargebacksChargebackDisputeOidPut (ChargebackDispute chargeback, int? chargebackDisputeOid, string expand = null)
        {
             ApiResponse<ChargebackDisputeResponse> localVarResponse = ChargebackChargebacksChargebackDisputeOidPutWithHttpInfo(chargeback, chargebackDisputeOid, expand);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update a chargeback Update a chargeback on the UltraCart account. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chargeback">Chargeback to update</param>
        /// <param name="chargebackDisputeOid">The chargeback_dispute_oid to update.</param>
        /// <param name="expand">The object expansion to perform on the result.  See documentation for examples (optional)</param>
        /// <returns>ApiResponse of ChargebackDisputeResponse</returns>
        public ApiResponse< ChargebackDisputeResponse > ChargebackChargebacksChargebackDisputeOidPutWithHttpInfo (ChargebackDispute chargeback, int? chargebackDisputeOid, string expand = null)
        {
            // verify the required parameter 'chargeback' is set
            if (chargeback == null)
                throw new ApiException(400, "Missing required parameter 'chargeback' when calling ChargebackApi->ChargebackChargebacksChargebackDisputeOidPut");
            // verify the required parameter 'chargebackDisputeOid' is set
            if (chargebackDisputeOid == null)
                throw new ApiException(400, "Missing required parameter 'chargebackDisputeOid' when calling ChargebackApi->ChargebackChargebacksChargebackDisputeOidPut");

            var localVarPath = "/chargeback/chargebacks/{chargeback_dispute_oid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json; charset=UTF-8"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (chargebackDisputeOid != null) localVarPathParams.Add("chargeback_dispute_oid", Configuration.ApiClient.ParameterToString(chargebackDisputeOid)); // path parameter
            if (expand != null) localVarQueryParams.Add("_expand", Configuration.ApiClient.ParameterToString(expand)); // query parameter
            if (chargeback != null && chargeback.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(chargeback); // http body (model) parameter
            }
            else
            {
                localVarPostBody = chargeback; // byte array
            }

            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ChargebackChargebacksChargebackDisputeOidPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ChargebackDisputeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ChargebackDisputeResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ChargebackDisputeResponse)));
            
        }

        /// <summary>
        /// Update a chargeback Update a chargeback on the UltraCart account. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chargeback">Chargeback to update</param>
        /// <param name="chargebackDisputeOid">The chargeback_dispute_oid to update.</param>
        /// <param name="expand">The object expansion to perform on the result.  See documentation for examples (optional)</param>
        /// <returns>Task of ChargebackDisputeResponse</returns>
        public async System.Threading.Tasks.Task<ChargebackDisputeResponse> ChargebackChargebacksChargebackDisputeOidPutAsync (ChargebackDispute chargeback, int? chargebackDisputeOid, string expand = null)
        {
             ApiResponse<ChargebackDisputeResponse> localVarResponse = await ChargebackChargebacksChargebackDisputeOidPutAsyncWithHttpInfo(chargeback, chargebackDisputeOid, expand);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update a chargeback Update a chargeback on the UltraCart account. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chargeback">Chargeback to update</param>
        /// <param name="chargebackDisputeOid">The chargeback_dispute_oid to update.</param>
        /// <param name="expand">The object expansion to perform on the result.  See documentation for examples (optional)</param>
        /// <returns>Task of ApiResponse (ChargebackDisputeResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ChargebackDisputeResponse>> ChargebackChargebacksChargebackDisputeOidPutAsyncWithHttpInfo (ChargebackDispute chargeback, int? chargebackDisputeOid, string expand = null)
        {
            // verify the required parameter 'chargeback' is set
            if (chargeback == null)
                throw new ApiException(400, "Missing required parameter 'chargeback' when calling ChargebackApi->ChargebackChargebacksChargebackDisputeOidPut");
            // verify the required parameter 'chargebackDisputeOid' is set
            if (chargebackDisputeOid == null)
                throw new ApiException(400, "Missing required parameter 'chargebackDisputeOid' when calling ChargebackApi->ChargebackChargebacksChargebackDisputeOidPut");

            var localVarPath = "/chargeback/chargebacks/{chargeback_dispute_oid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json; charset=UTF-8"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (chargebackDisputeOid != null) localVarPathParams.Add("chargeback_dispute_oid", Configuration.ApiClient.ParameterToString(chargebackDisputeOid)); // path parameter
            if (expand != null) localVarQueryParams.Add("_expand", Configuration.ApiClient.ParameterToString(expand)); // query parameter
            if (chargeback != null && chargeback.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(chargeback); // http body (model) parameter
            }
            else
            {
                localVarPostBody = chargeback; // byte array
            }

            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ChargebackChargebacksChargebackDisputeOidPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ChargebackDisputeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ChargebackDisputeResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ChargebackDisputeResponse)));
            
        }

        /// <summary>
        /// Retrieve chargebacks Retrieves chargebacks from the account.  If no parameters are specified, all chargebacks will be returned.  You will need to make multiple API calls in order to retrieve the entire result set since this API performs result set pagination. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId">Order Id (optional)</param>
        /// <param name="caseNumber">Case number (optional)</param>
        /// <param name="status">Status (optional)</param>
        /// <param name="expirationDtsStart">Expiration dts start (optional)</param>
        /// <param name="expirationDtsEnd">Expiration dts end (optional)</param>
        /// <param name="chargebackDtsStart">Chargeback dts start (optional)</param>
        /// <param name="chargebackDtsEnd">Chargeback dts end (optional)</param>
        /// <param name="limit">The maximum number of records to return on this one API call. (Max 200) (optional, default to 100)</param>
        /// <param name="offset">Pagination of the record set.  Offset is a zero based index. (optional, default to 0)</param>
        /// <param name="since">Fetch chargebacks that have been created/modified since this date/time. (optional)</param>
        /// <param name="sort">The sort order of the chargebacks.  See Sorting documentation for examples of using multiple values and sorting by ascending and descending. (optional)</param>
        /// <param name="expand">The object expansion to perform on the result.  See documentation for examples (optional)</param>
        /// <returns>ChargebackDisputesResponse</returns>
        public ChargebackDisputesResponse ChargebackChargebacksGet (string orderId = null, string caseNumber = null, string status = null, string expirationDtsStart = null, string expirationDtsEnd = null, string chargebackDtsStart = null, string chargebackDtsEnd = null, int? limit = null, int? offset = null, string since = null, string sort = null, string expand = null)
        {
             ApiResponse<ChargebackDisputesResponse> localVarResponse = ChargebackChargebacksGetWithHttpInfo(orderId, caseNumber, status, expirationDtsStart, expirationDtsEnd, chargebackDtsStart, chargebackDtsEnd, limit, offset, since, sort, expand);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve chargebacks Retrieves chargebacks from the account.  If no parameters are specified, all chargebacks will be returned.  You will need to make multiple API calls in order to retrieve the entire result set since this API performs result set pagination. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId">Order Id (optional)</param>
        /// <param name="caseNumber">Case number (optional)</param>
        /// <param name="status">Status (optional)</param>
        /// <param name="expirationDtsStart">Expiration dts start (optional)</param>
        /// <param name="expirationDtsEnd">Expiration dts end (optional)</param>
        /// <param name="chargebackDtsStart">Chargeback dts start (optional)</param>
        /// <param name="chargebackDtsEnd">Chargeback dts end (optional)</param>
        /// <param name="limit">The maximum number of records to return on this one API call. (Max 200) (optional, default to 100)</param>
        /// <param name="offset">Pagination of the record set.  Offset is a zero based index. (optional, default to 0)</param>
        /// <param name="since">Fetch chargebacks that have been created/modified since this date/time. (optional)</param>
        /// <param name="sort">The sort order of the chargebacks.  See Sorting documentation for examples of using multiple values and sorting by ascending and descending. (optional)</param>
        /// <param name="expand">The object expansion to perform on the result.  See documentation for examples (optional)</param>
        /// <returns>ApiResponse of ChargebackDisputesResponse</returns>
        public ApiResponse< ChargebackDisputesResponse > ChargebackChargebacksGetWithHttpInfo (string orderId = null, string caseNumber = null, string status = null, string expirationDtsStart = null, string expirationDtsEnd = null, string chargebackDtsStart = null, string chargebackDtsEnd = null, int? limit = null, int? offset = null, string since = null, string sort = null, string expand = null)
        {

            var localVarPath = "/chargeback/chargebacks";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (orderId != null) localVarQueryParams.Add("order_id", Configuration.ApiClient.ParameterToString(orderId)); // query parameter
            if (caseNumber != null) localVarQueryParams.Add("case_number", Configuration.ApiClient.ParameterToString(caseNumber)); // query parameter
            if (status != null) localVarQueryParams.Add("status", Configuration.ApiClient.ParameterToString(status)); // query parameter
            if (expirationDtsStart != null) localVarQueryParams.Add("expiration_dts_start", Configuration.ApiClient.ParameterToString(expirationDtsStart)); // query parameter
            if (expirationDtsEnd != null) localVarQueryParams.Add("expiration_dts_end", Configuration.ApiClient.ParameterToString(expirationDtsEnd)); // query parameter
            if (chargebackDtsStart != null) localVarQueryParams.Add("chargeback_dts_start", Configuration.ApiClient.ParameterToString(chargebackDtsStart)); // query parameter
            if (chargebackDtsEnd != null) localVarQueryParams.Add("chargeback_dts_end", Configuration.ApiClient.ParameterToString(chargebackDtsEnd)); // query parameter
            if (limit != null) localVarQueryParams.Add("_limit", Configuration.ApiClient.ParameterToString(limit)); // query parameter
            if (offset != null) localVarQueryParams.Add("_offset", Configuration.ApiClient.ParameterToString(offset)); // query parameter
            if (since != null) localVarQueryParams.Add("_since", Configuration.ApiClient.ParameterToString(since)); // query parameter
            if (sort != null) localVarQueryParams.Add("_sort", Configuration.ApiClient.ParameterToString(sort)); // query parameter
            if (expand != null) localVarQueryParams.Add("_expand", Configuration.ApiClient.ParameterToString(expand)); // query parameter

            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ChargebackChargebacksGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ChargebackDisputesResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ChargebackDisputesResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ChargebackDisputesResponse)));
            
        }

        /// <summary>
        /// Retrieve chargebacks Retrieves chargebacks from the account.  If no parameters are specified, all chargebacks will be returned.  You will need to make multiple API calls in order to retrieve the entire result set since this API performs result set pagination. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId">Order Id (optional)</param>
        /// <param name="caseNumber">Case number (optional)</param>
        /// <param name="status">Status (optional)</param>
        /// <param name="expirationDtsStart">Expiration dts start (optional)</param>
        /// <param name="expirationDtsEnd">Expiration dts end (optional)</param>
        /// <param name="chargebackDtsStart">Chargeback dts start (optional)</param>
        /// <param name="chargebackDtsEnd">Chargeback dts end (optional)</param>
        /// <param name="limit">The maximum number of records to return on this one API call. (Max 200) (optional, default to 100)</param>
        /// <param name="offset">Pagination of the record set.  Offset is a zero based index. (optional, default to 0)</param>
        /// <param name="since">Fetch chargebacks that have been created/modified since this date/time. (optional)</param>
        /// <param name="sort">The sort order of the chargebacks.  See Sorting documentation for examples of using multiple values and sorting by ascending and descending. (optional)</param>
        /// <param name="expand">The object expansion to perform on the result.  See documentation for examples (optional)</param>
        /// <returns>Task of ChargebackDisputesResponse</returns>
        public async System.Threading.Tasks.Task<ChargebackDisputesResponse> ChargebackChargebacksGetAsync (string orderId = null, string caseNumber = null, string status = null, string expirationDtsStart = null, string expirationDtsEnd = null, string chargebackDtsStart = null, string chargebackDtsEnd = null, int? limit = null, int? offset = null, string since = null, string sort = null, string expand = null)
        {
             ApiResponse<ChargebackDisputesResponse> localVarResponse = await ChargebackChargebacksGetAsyncWithHttpInfo(orderId, caseNumber, status, expirationDtsStart, expirationDtsEnd, chargebackDtsStart, chargebackDtsEnd, limit, offset, since, sort, expand);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieve chargebacks Retrieves chargebacks from the account.  If no parameters are specified, all chargebacks will be returned.  You will need to make multiple API calls in order to retrieve the entire result set since this API performs result set pagination. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId">Order Id (optional)</param>
        /// <param name="caseNumber">Case number (optional)</param>
        /// <param name="status">Status (optional)</param>
        /// <param name="expirationDtsStart">Expiration dts start (optional)</param>
        /// <param name="expirationDtsEnd">Expiration dts end (optional)</param>
        /// <param name="chargebackDtsStart">Chargeback dts start (optional)</param>
        /// <param name="chargebackDtsEnd">Chargeback dts end (optional)</param>
        /// <param name="limit">The maximum number of records to return on this one API call. (Max 200) (optional, default to 100)</param>
        /// <param name="offset">Pagination of the record set.  Offset is a zero based index. (optional, default to 0)</param>
        /// <param name="since">Fetch chargebacks that have been created/modified since this date/time. (optional)</param>
        /// <param name="sort">The sort order of the chargebacks.  See Sorting documentation for examples of using multiple values and sorting by ascending and descending. (optional)</param>
        /// <param name="expand">The object expansion to perform on the result.  See documentation for examples (optional)</param>
        /// <returns>Task of ApiResponse (ChargebackDisputesResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ChargebackDisputesResponse>> ChargebackChargebacksGetAsyncWithHttpInfo (string orderId = null, string caseNumber = null, string status = null, string expirationDtsStart = null, string expirationDtsEnd = null, string chargebackDtsStart = null, string chargebackDtsEnd = null, int? limit = null, int? offset = null, string since = null, string sort = null, string expand = null)
        {

            var localVarPath = "/chargeback/chargebacks";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (orderId != null) localVarQueryParams.Add("order_id", Configuration.ApiClient.ParameterToString(orderId)); // query parameter
            if (caseNumber != null) localVarQueryParams.Add("case_number", Configuration.ApiClient.ParameterToString(caseNumber)); // query parameter
            if (status != null) localVarQueryParams.Add("status", Configuration.ApiClient.ParameterToString(status)); // query parameter
            if (expirationDtsStart != null) localVarQueryParams.Add("expiration_dts_start", Configuration.ApiClient.ParameterToString(expirationDtsStart)); // query parameter
            if (expirationDtsEnd != null) localVarQueryParams.Add("expiration_dts_end", Configuration.ApiClient.ParameterToString(expirationDtsEnd)); // query parameter
            if (chargebackDtsStart != null) localVarQueryParams.Add("chargeback_dts_start", Configuration.ApiClient.ParameterToString(chargebackDtsStart)); // query parameter
            if (chargebackDtsEnd != null) localVarQueryParams.Add("chargeback_dts_end", Configuration.ApiClient.ParameterToString(chargebackDtsEnd)); // query parameter
            if (limit != null) localVarQueryParams.Add("_limit", Configuration.ApiClient.ParameterToString(limit)); // query parameter
            if (offset != null) localVarQueryParams.Add("_offset", Configuration.ApiClient.ParameterToString(offset)); // query parameter
            if (since != null) localVarQueryParams.Add("_since", Configuration.ApiClient.ParameterToString(since)); // query parameter
            if (sort != null) localVarQueryParams.Add("_sort", Configuration.ApiClient.ParameterToString(sort)); // query parameter
            if (expand != null) localVarQueryParams.Add("_expand", Configuration.ApiClient.ParameterToString(expand)); // query parameter

            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ChargebackChargebacksGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ChargebackDisputesResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ChargebackDisputesResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ChargebackDisputesResponse)));
            
        }

        /// <summary>
        /// Insert a chargeback Insert a chargeback on the UltraCart account. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chargeback">Chargeback to insert</param>
        /// <param name="expand">The object expansion to perform on the result.  See documentation for examples (optional)</param>
        /// <returns>ChargebackDisputeResponse</returns>
        public ChargebackDisputeResponse ChargebackChargebacksPost (ChargebackDispute chargeback, string expand = null)
        {
             ApiResponse<ChargebackDisputeResponse> localVarResponse = ChargebackChargebacksPostWithHttpInfo(chargeback, expand);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Insert a chargeback Insert a chargeback on the UltraCart account. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chargeback">Chargeback to insert</param>
        /// <param name="expand">The object expansion to perform on the result.  See documentation for examples (optional)</param>
        /// <returns>ApiResponse of ChargebackDisputeResponse</returns>
        public ApiResponse< ChargebackDisputeResponse > ChargebackChargebacksPostWithHttpInfo (ChargebackDispute chargeback, string expand = null)
        {
            // verify the required parameter 'chargeback' is set
            if (chargeback == null)
                throw new ApiException(400, "Missing required parameter 'chargeback' when calling ChargebackApi->ChargebackChargebacksPost");

            var localVarPath = "/chargeback/chargebacks";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json; charset=UTF-8"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (expand != null) localVarQueryParams.Add("_expand", Configuration.ApiClient.ParameterToString(expand)); // query parameter
            if (chargeback != null && chargeback.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(chargeback); // http body (model) parameter
            }
            else
            {
                localVarPostBody = chargeback; // byte array
            }

            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ChargebackChargebacksPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ChargebackDisputeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ChargebackDisputeResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ChargebackDisputeResponse)));
            
        }

        /// <summary>
        /// Insert a chargeback Insert a chargeback on the UltraCart account. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chargeback">Chargeback to insert</param>
        /// <param name="expand">The object expansion to perform on the result.  See documentation for examples (optional)</param>
        /// <returns>Task of ChargebackDisputeResponse</returns>
        public async System.Threading.Tasks.Task<ChargebackDisputeResponse> ChargebackChargebacksPostAsync (ChargebackDispute chargeback, string expand = null)
        {
             ApiResponse<ChargebackDisputeResponse> localVarResponse = await ChargebackChargebacksPostAsyncWithHttpInfo(chargeback, expand);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Insert a chargeback Insert a chargeback on the UltraCart account. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chargeback">Chargeback to insert</param>
        /// <param name="expand">The object expansion to perform on the result.  See documentation for examples (optional)</param>
        /// <returns>Task of ApiResponse (ChargebackDisputeResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ChargebackDisputeResponse>> ChargebackChargebacksPostAsyncWithHttpInfo (ChargebackDispute chargeback, string expand = null)
        {
            // verify the required parameter 'chargeback' is set
            if (chargeback == null)
                throw new ApiException(400, "Missing required parameter 'chargeback' when calling ChargebackApi->ChargebackChargebacksPost");

            var localVarPath = "/chargeback/chargebacks";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json; charset=UTF-8"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (expand != null) localVarQueryParams.Add("_expand", Configuration.ApiClient.ParameterToString(expand)); // query parameter
            if (chargeback != null && chargeback.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(chargeback); // http body (model) parameter
            }
            else
            {
                localVarPostBody = chargeback; // byte array
            }

            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ChargebackChargebacksPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ChargebackDisputeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ChargebackDisputeResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ChargebackDisputeResponse)));
            
        }

    }
}
