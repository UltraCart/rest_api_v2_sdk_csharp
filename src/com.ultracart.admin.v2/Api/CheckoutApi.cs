/* 
 * UltraCart Rest API V2
 *
 * This is the next generation UltraCart REST API...
 *
 * OpenAPI spec version: 2.0.0
 * Contact: support@ultracart.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using com.ultracart.admin.v2.Client;
using com.ultracart.admin.v2.Model;

namespace com.ultracart.admin.v2.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ICheckoutApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Setup Browser Application
        /// </summary>
        /// <remarks>
        /// Setup a browser key authenticated application with checkout permissions.  This REST call must be made with an authentication scheme that is not browser key.  The new application will be linked to the application that makes this call.  If this application is disabled / deleted, then so will the application setup by this call.  The purpose of this call is to allow an OAuth applicaiton, such as the Wordpress plugin, to setup the proper browser based authentication for the REST checkout API to use. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="browserKeyRequest">Setup browser key request</param>
        /// <returns>CheckoutSetupBrowserKeyResponse</returns>
        CheckoutSetupBrowserKeyResponse CheckoutBrowserKeyPut (CheckoutSetupBrowserKeyRequest browserKeyRequest);

        /// <summary>
        /// Setup Browser Application
        /// </summary>
        /// <remarks>
        /// Setup a browser key authenticated application with checkout permissions.  This REST call must be made with an authentication scheme that is not browser key.  The new application will be linked to the application that makes this call.  If this application is disabled / deleted, then so will the application setup by this call.  The purpose of this call is to allow an OAuth applicaiton, such as the Wordpress plugin, to setup the proper browser based authentication for the REST checkout API to use. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="browserKeyRequest">Setup browser key request</param>
        /// <returns>ApiResponse of CheckoutSetupBrowserKeyResponse</returns>
        ApiResponse<CheckoutSetupBrowserKeyResponse> CheckoutBrowserKeyPutWithHttpInfo (CheckoutSetupBrowserKeyRequest browserKeyRequest);
        /// <summary>
        /// Get cart (by cart id)
        /// </summary>
        /// <remarks>
        /// Get a cart specified by the cart_id parameter. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cartId">Cart ID to retrieve</param>
        /// <param name="expand">The object expansion to perform on the result.  See documentation for examples (optional)</param>
        /// <returns>CartResponse</returns>
        CartResponse CheckoutCartCartIdGet (string cartId, string expand = null);

        /// <summary>
        /// Get cart (by cart id)
        /// </summary>
        /// <remarks>
        /// Get a cart specified by the cart_id parameter. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cartId">Cart ID to retrieve</param>
        /// <param name="expand">The object expansion to perform on the result.  See documentation for examples (optional)</param>
        /// <returns>ApiResponse of CartResponse</returns>
        ApiResponse<CartResponse> CheckoutCartCartIdGetWithHttpInfo (string cartId, string expand = null);
        /// <summary>
        /// Finalize Order
        /// </summary>
        /// <remarks>
        /// Finalize the cart into an order.  This method can not be called with browser key authentication.  It is ONLY meant for server side code to call. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="finalizeRequest">Finalize request</param>
        /// <returns>CartFinalizeOrderResponse</returns>
        CartFinalizeOrderResponse CheckoutCartFinalizeOrderPost (CartFinalizeOrderRequest finalizeRequest);

        /// <summary>
        /// Finalize Order
        /// </summary>
        /// <remarks>
        /// Finalize the cart into an order.  This method can not be called with browser key authentication.  It is ONLY meant for server side code to call. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="finalizeRequest">Finalize request</param>
        /// <returns>ApiResponse of CartFinalizeOrderResponse</returns>
        ApiResponse<CartFinalizeOrderResponse> CheckoutCartFinalizeOrderPostWithHttpInfo (CartFinalizeOrderRequest finalizeRequest);
        /// <summary>
        /// Get cart
        /// </summary>
        /// <remarks>
        /// If the cookie is set on the browser making the request then it will return their active cart.  Otherwise it will create a new cart. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="expand">The object expansion to perform on the result.  See documentation for examples (optional)</param>
        /// <returns>CartResponse</returns>
        CartResponse CheckoutCartGet (string expand = null);

        /// <summary>
        /// Get cart
        /// </summary>
        /// <remarks>
        /// If the cookie is set on the browser making the request then it will return their active cart.  Otherwise it will create a new cart. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="expand">The object expansion to perform on the result.  See documentation for examples (optional)</param>
        /// <returns>ApiResponse of CartResponse</returns>
        ApiResponse<CartResponse> CheckoutCartGetWithHttpInfo (string expand = null);
        /// <summary>
        /// Handoff cart
        /// </summary>
        /// <remarks>
        /// Handoff the browser to UltraCart for view cart on StoreFront, transfer to PayPal or finalization of the order (including upsell processing). 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="handoffRequest">Handoff request</param>
        /// <param name="expand">The object expansion to perform on the result.  See documentation for examples (optional)</param>
        /// <returns>CheckoutHandoffResponse</returns>
        CheckoutHandoffResponse CheckoutCartHandoffPost (CheckoutHandoffRequest handoffRequest, string expand = null);

        /// <summary>
        /// Handoff cart
        /// </summary>
        /// <remarks>
        /// Handoff the browser to UltraCart for view cart on StoreFront, transfer to PayPal or finalization of the order (including upsell processing). 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="handoffRequest">Handoff request</param>
        /// <param name="expand">The object expansion to perform on the result.  See documentation for examples (optional)</param>
        /// <returns>ApiResponse of CheckoutHandoffResponse</returns>
        ApiResponse<CheckoutHandoffResponse> CheckoutCartHandoffPostWithHttpInfo (CheckoutHandoffRequest handoffRequest, string expand = null);
        /// <summary>
        /// Profile login
        /// </summary>
        /// <remarks>
        /// Login in to the customer profile specified by cart.billing.email and password 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loginRequest">Login request</param>
        /// <param name="expand">The object expansion to perform on the result.  See documentation for examples (optional)</param>
        /// <returns>CartProfileLoginResponse</returns>
        CartProfileLoginResponse CheckoutCartProfileLoginPost (CartProfileLoginRequest loginRequest, string expand = null);

        /// <summary>
        /// Profile login
        /// </summary>
        /// <remarks>
        /// Login in to the customer profile specified by cart.billing.email and password 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loginRequest">Login request</param>
        /// <param name="expand">The object expansion to perform on the result.  See documentation for examples (optional)</param>
        /// <returns>ApiResponse of CartProfileLoginResponse</returns>
        ApiResponse<CartProfileLoginResponse> CheckoutCartProfileLoginPostWithHttpInfo (CartProfileLoginRequest loginRequest, string expand = null);
        /// <summary>
        /// Profile logout
        /// </summary>
        /// <remarks>
        /// Log the cart out of the current profile.  No error will occur if they are not logged in. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cart">Cart</param>
        /// <param name="expand">The object expansion to perform on the result.  See documentation for examples (optional)</param>
        /// <returns>CartResponse</returns>
        CartResponse CheckoutCartProfileLogoutPost (Cart cart, string expand = null);

        /// <summary>
        /// Profile logout
        /// </summary>
        /// <remarks>
        /// Log the cart out of the current profile.  No error will occur if they are not logged in. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cart">Cart</param>
        /// <param name="expand">The object expansion to perform on the result.  See documentation for examples (optional)</param>
        /// <returns>ApiResponse of CartResponse</returns>
        ApiResponse<CartResponse> CheckoutCartProfileLogoutPostWithHttpInfo (Cart cart, string expand = null);
        /// <summary>
        /// Profile registration
        /// </summary>
        /// <remarks>
        /// Register a new customer profile.  Requires the cart.billing object to be populated along with the password. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="registerRequest">Register request</param>
        /// <param name="expand">The object expansion to perform on the result.  See documentation for examples (optional)</param>
        /// <returns>CartProfileRegisterResponse</returns>
        CartProfileRegisterResponse CheckoutCartProfileRegisterPost (CartProfileRegisterRequest registerRequest, string expand = null);

        /// <summary>
        /// Profile registration
        /// </summary>
        /// <remarks>
        /// Register a new customer profile.  Requires the cart.billing object to be populated along with the password. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="registerRequest">Register request</param>
        /// <param name="expand">The object expansion to perform on the result.  See documentation for examples (optional)</param>
        /// <returns>ApiResponse of CartProfileRegisterResponse</returns>
        ApiResponse<CartProfileRegisterResponse> CheckoutCartProfileRegisterPostWithHttpInfo (CartProfileRegisterRequest registerRequest, string expand = null);
        /// <summary>
        /// Update cart
        /// </summary>
        /// <remarks>
        /// Update the cart. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cart">Cart</param>
        /// <param name="expand">The object expansion to perform on the result.  See documentation for examples (optional)</param>
        /// <returns>CartResponse</returns>
        CartResponse CheckoutCartPut (Cart cart, string expand = null);

        /// <summary>
        /// Update cart
        /// </summary>
        /// <remarks>
        /// Update the cart. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cart">Cart</param>
        /// <param name="expand">The object expansion to perform on the result.  See documentation for examples (optional)</param>
        /// <returns>ApiResponse of CartResponse</returns>
        ApiResponse<CartResponse> CheckoutCartPutWithHttpInfo (Cart cart, string expand = null);
        /// <summary>
        /// Validate
        /// </summary>
        /// <remarks>
        /// Validate the cart for errors.  Specific checks can be passed and multiple validations can occur throughout your checkout flow. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="validationRequest">Validation request</param>
        /// <param name="expand">The object expansion to perform on the result.  See documentation for examples (optional)</param>
        /// <returns>CartValidationResponse</returns>
        CartValidationResponse CheckoutCartValidatePost (CartValidationRequest validationRequest, string expand = null);

        /// <summary>
        /// Validate
        /// </summary>
        /// <remarks>
        /// Validate the cart for errors.  Specific checks can be passed and multiple validations can occur throughout your checkout flow. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="validationRequest">Validation request</param>
        /// <param name="expand">The object expansion to perform on the result.  See documentation for examples (optional)</param>
        /// <returns>ApiResponse of CartValidationResponse</returns>
        ApiResponse<CartValidationResponse> CheckoutCartValidatePostWithHttpInfo (CartValidationRequest validationRequest, string expand = null);
        /// <summary>
        /// City/State for Zip
        /// </summary>
        /// <remarks>
        /// Look up the city and state for the shipping zip code.  Useful for building an auto complete for parts of the shipping address 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cart">Cart</param>
        /// <returns>ItemsResponse</returns>
        ItemsResponse CheckoutCityStatePost (Cart cart);

        /// <summary>
        /// City/State for Zip
        /// </summary>
        /// <remarks>
        /// Look up the city and state for the shipping zip code.  Useful for building an auto complete for parts of the shipping address 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cart">Cart</param>
        /// <returns>ApiResponse of ItemsResponse</returns>
        ApiResponse<ItemsResponse> CheckoutCityStatePostWithHttpInfo (Cart cart);
        /// <summary>
        /// Related items (specific item)
        /// </summary>
        /// <remarks>
        /// Retrieve all the related items for the cart contents.  Expansion is limited to content, content.assignments, content.attributes, content.multimedia, content.multimedia.thumbnails, options, pricing, and pricing.tiers. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemId">Item ID to retrieve related items for</param>
        /// <param name="cart">Cart</param>
        /// <param name="expand">The object expansion to perform on the result.  See item resource documentation for examples (optional)</param>
        /// <returns>ItemsResponse</returns>
        ItemsResponse CheckoutRelatedItemsItemIdPost (string itemId, Cart cart, string expand = null);

        /// <summary>
        /// Related items (specific item)
        /// </summary>
        /// <remarks>
        /// Retrieve all the related items for the cart contents.  Expansion is limited to content, content.assignments, content.attributes, content.multimedia, content.multimedia.thumbnails, options, pricing, and pricing.tiers. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemId">Item ID to retrieve related items for</param>
        /// <param name="cart">Cart</param>
        /// <param name="expand">The object expansion to perform on the result.  See item resource documentation for examples (optional)</param>
        /// <returns>ApiResponse of ItemsResponse</returns>
        ApiResponse<ItemsResponse> CheckoutRelatedItemsItemIdPostWithHttpInfo (string itemId, Cart cart, string expand = null);
        /// <summary>
        /// Related items
        /// </summary>
        /// <remarks>
        /// Retrieve all the related items for the cart contents.  Expansion is limited to content, content.assignments, content.attributes, content.multimedia, content.multimedia.thumbnails, options, pricing, and pricing.tiers. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cart">Cart</param>
        /// <param name="expand">The object expansion to perform on the result.  See item resource documentation for examples (optional)</param>
        /// <returns>ItemsResponse</returns>
        ItemsResponse CheckoutRelatedItemsPost (Cart cart, string expand = null);

        /// <summary>
        /// Related items
        /// </summary>
        /// <remarks>
        /// Retrieve all the related items for the cart contents.  Expansion is limited to content, content.assignments, content.attributes, content.multimedia, content.multimedia.thumbnails, options, pricing, and pricing.tiers. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cart">Cart</param>
        /// <param name="expand">The object expansion to perform on the result.  See item resource documentation for examples (optional)</param>
        /// <returns>ApiResponse of ItemsResponse</returns>
        ApiResponse<ItemsResponse> CheckoutRelatedItemsPostWithHttpInfo (Cart cart, string expand = null);
        /// <summary>
        /// Get cart (by return code)
        /// </summary>
        /// <remarks>
        /// Get a cart specified by the return code parameter. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="returnCode">Return code to lookup cart ID by</param>
        /// <param name="expand">The object expansion to perform on the result.  See documentation for examples (optional)</param>
        /// <returns>CartResponse</returns>
        CartResponse CheckoutReturnReturnCodeGet (string returnCode, string expand = null);

        /// <summary>
        /// Get cart (by return code)
        /// </summary>
        /// <remarks>
        /// Get a cart specified by the return code parameter. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="returnCode">Return code to lookup cart ID by</param>
        /// <param name="expand">The object expansion to perform on the result.  See documentation for examples (optional)</param>
        /// <returns>ApiResponse of CartResponse</returns>
        ApiResponse<CartResponse> CheckoutReturnReturnCodeGetWithHttpInfo (string returnCode, string expand = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Setup Browser Application
        /// </summary>
        /// <remarks>
        /// Setup a browser key authenticated application with checkout permissions.  This REST call must be made with an authentication scheme that is not browser key.  The new application will be linked to the application that makes this call.  If this application is disabled / deleted, then so will the application setup by this call.  The purpose of this call is to allow an OAuth applicaiton, such as the Wordpress plugin, to setup the proper browser based authentication for the REST checkout API to use. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="browserKeyRequest">Setup browser key request</param>
        /// <returns>Task of CheckoutSetupBrowserKeyResponse</returns>
        System.Threading.Tasks.Task<CheckoutSetupBrowserKeyResponse> CheckoutBrowserKeyPutAsync (CheckoutSetupBrowserKeyRequest browserKeyRequest);

        /// <summary>
        /// Setup Browser Application
        /// </summary>
        /// <remarks>
        /// Setup a browser key authenticated application with checkout permissions.  This REST call must be made with an authentication scheme that is not browser key.  The new application will be linked to the application that makes this call.  If this application is disabled / deleted, then so will the application setup by this call.  The purpose of this call is to allow an OAuth applicaiton, such as the Wordpress plugin, to setup the proper browser based authentication for the REST checkout API to use. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="browserKeyRequest">Setup browser key request</param>
        /// <returns>Task of ApiResponse (CheckoutSetupBrowserKeyResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CheckoutSetupBrowserKeyResponse>> CheckoutBrowserKeyPutAsyncWithHttpInfo (CheckoutSetupBrowserKeyRequest browserKeyRequest);
        /// <summary>
        /// Get cart (by cart id)
        /// </summary>
        /// <remarks>
        /// Get a cart specified by the cart_id parameter. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cartId">Cart ID to retrieve</param>
        /// <param name="expand">The object expansion to perform on the result.  See documentation for examples (optional)</param>
        /// <returns>Task of CartResponse</returns>
        System.Threading.Tasks.Task<CartResponse> CheckoutCartCartIdGetAsync (string cartId, string expand = null);

        /// <summary>
        /// Get cart (by cart id)
        /// </summary>
        /// <remarks>
        /// Get a cart specified by the cart_id parameter. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cartId">Cart ID to retrieve</param>
        /// <param name="expand">The object expansion to perform on the result.  See documentation for examples (optional)</param>
        /// <returns>Task of ApiResponse (CartResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CartResponse>> CheckoutCartCartIdGetAsyncWithHttpInfo (string cartId, string expand = null);
        /// <summary>
        /// Finalize Order
        /// </summary>
        /// <remarks>
        /// Finalize the cart into an order.  This method can not be called with browser key authentication.  It is ONLY meant for server side code to call. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="finalizeRequest">Finalize request</param>
        /// <returns>Task of CartFinalizeOrderResponse</returns>
        System.Threading.Tasks.Task<CartFinalizeOrderResponse> CheckoutCartFinalizeOrderPostAsync (CartFinalizeOrderRequest finalizeRequest);

        /// <summary>
        /// Finalize Order
        /// </summary>
        /// <remarks>
        /// Finalize the cart into an order.  This method can not be called with browser key authentication.  It is ONLY meant for server side code to call. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="finalizeRequest">Finalize request</param>
        /// <returns>Task of ApiResponse (CartFinalizeOrderResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CartFinalizeOrderResponse>> CheckoutCartFinalizeOrderPostAsyncWithHttpInfo (CartFinalizeOrderRequest finalizeRequest);
        /// <summary>
        /// Get cart
        /// </summary>
        /// <remarks>
        /// If the cookie is set on the browser making the request then it will return their active cart.  Otherwise it will create a new cart. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="expand">The object expansion to perform on the result.  See documentation for examples (optional)</param>
        /// <returns>Task of CartResponse</returns>
        System.Threading.Tasks.Task<CartResponse> CheckoutCartGetAsync (string expand = null);

        /// <summary>
        /// Get cart
        /// </summary>
        /// <remarks>
        /// If the cookie is set on the browser making the request then it will return their active cart.  Otherwise it will create a new cart. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="expand">The object expansion to perform on the result.  See documentation for examples (optional)</param>
        /// <returns>Task of ApiResponse (CartResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CartResponse>> CheckoutCartGetAsyncWithHttpInfo (string expand = null);
        /// <summary>
        /// Handoff cart
        /// </summary>
        /// <remarks>
        /// Handoff the browser to UltraCart for view cart on StoreFront, transfer to PayPal or finalization of the order (including upsell processing). 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="handoffRequest">Handoff request</param>
        /// <param name="expand">The object expansion to perform on the result.  See documentation for examples (optional)</param>
        /// <returns>Task of CheckoutHandoffResponse</returns>
        System.Threading.Tasks.Task<CheckoutHandoffResponse> CheckoutCartHandoffPostAsync (CheckoutHandoffRequest handoffRequest, string expand = null);

        /// <summary>
        /// Handoff cart
        /// </summary>
        /// <remarks>
        /// Handoff the browser to UltraCart for view cart on StoreFront, transfer to PayPal or finalization of the order (including upsell processing). 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="handoffRequest">Handoff request</param>
        /// <param name="expand">The object expansion to perform on the result.  See documentation for examples (optional)</param>
        /// <returns>Task of ApiResponse (CheckoutHandoffResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CheckoutHandoffResponse>> CheckoutCartHandoffPostAsyncWithHttpInfo (CheckoutHandoffRequest handoffRequest, string expand = null);
        /// <summary>
        /// Profile login
        /// </summary>
        /// <remarks>
        /// Login in to the customer profile specified by cart.billing.email and password 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loginRequest">Login request</param>
        /// <param name="expand">The object expansion to perform on the result.  See documentation for examples (optional)</param>
        /// <returns>Task of CartProfileLoginResponse</returns>
        System.Threading.Tasks.Task<CartProfileLoginResponse> CheckoutCartProfileLoginPostAsync (CartProfileLoginRequest loginRequest, string expand = null);

        /// <summary>
        /// Profile login
        /// </summary>
        /// <remarks>
        /// Login in to the customer profile specified by cart.billing.email and password 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loginRequest">Login request</param>
        /// <param name="expand">The object expansion to perform on the result.  See documentation for examples (optional)</param>
        /// <returns>Task of ApiResponse (CartProfileLoginResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CartProfileLoginResponse>> CheckoutCartProfileLoginPostAsyncWithHttpInfo (CartProfileLoginRequest loginRequest, string expand = null);
        /// <summary>
        /// Profile logout
        /// </summary>
        /// <remarks>
        /// Log the cart out of the current profile.  No error will occur if they are not logged in. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cart">Cart</param>
        /// <param name="expand">The object expansion to perform on the result.  See documentation for examples (optional)</param>
        /// <returns>Task of CartResponse</returns>
        System.Threading.Tasks.Task<CartResponse> CheckoutCartProfileLogoutPostAsync (Cart cart, string expand = null);

        /// <summary>
        /// Profile logout
        /// </summary>
        /// <remarks>
        /// Log the cart out of the current profile.  No error will occur if they are not logged in. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cart">Cart</param>
        /// <param name="expand">The object expansion to perform on the result.  See documentation for examples (optional)</param>
        /// <returns>Task of ApiResponse (CartResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CartResponse>> CheckoutCartProfileLogoutPostAsyncWithHttpInfo (Cart cart, string expand = null);
        /// <summary>
        /// Profile registration
        /// </summary>
        /// <remarks>
        /// Register a new customer profile.  Requires the cart.billing object to be populated along with the password. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="registerRequest">Register request</param>
        /// <param name="expand">The object expansion to perform on the result.  See documentation for examples (optional)</param>
        /// <returns>Task of CartProfileRegisterResponse</returns>
        System.Threading.Tasks.Task<CartProfileRegisterResponse> CheckoutCartProfileRegisterPostAsync (CartProfileRegisterRequest registerRequest, string expand = null);

        /// <summary>
        /// Profile registration
        /// </summary>
        /// <remarks>
        /// Register a new customer profile.  Requires the cart.billing object to be populated along with the password. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="registerRequest">Register request</param>
        /// <param name="expand">The object expansion to perform on the result.  See documentation for examples (optional)</param>
        /// <returns>Task of ApiResponse (CartProfileRegisterResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CartProfileRegisterResponse>> CheckoutCartProfileRegisterPostAsyncWithHttpInfo (CartProfileRegisterRequest registerRequest, string expand = null);
        /// <summary>
        /// Update cart
        /// </summary>
        /// <remarks>
        /// Update the cart. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cart">Cart</param>
        /// <param name="expand">The object expansion to perform on the result.  See documentation for examples (optional)</param>
        /// <returns>Task of CartResponse</returns>
        System.Threading.Tasks.Task<CartResponse> CheckoutCartPutAsync (Cart cart, string expand = null);

        /// <summary>
        /// Update cart
        /// </summary>
        /// <remarks>
        /// Update the cart. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cart">Cart</param>
        /// <param name="expand">The object expansion to perform on the result.  See documentation for examples (optional)</param>
        /// <returns>Task of ApiResponse (CartResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CartResponse>> CheckoutCartPutAsyncWithHttpInfo (Cart cart, string expand = null);
        /// <summary>
        /// Validate
        /// </summary>
        /// <remarks>
        /// Validate the cart for errors.  Specific checks can be passed and multiple validations can occur throughout your checkout flow. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="validationRequest">Validation request</param>
        /// <param name="expand">The object expansion to perform on the result.  See documentation for examples (optional)</param>
        /// <returns>Task of CartValidationResponse</returns>
        System.Threading.Tasks.Task<CartValidationResponse> CheckoutCartValidatePostAsync (CartValidationRequest validationRequest, string expand = null);

        /// <summary>
        /// Validate
        /// </summary>
        /// <remarks>
        /// Validate the cart for errors.  Specific checks can be passed and multiple validations can occur throughout your checkout flow. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="validationRequest">Validation request</param>
        /// <param name="expand">The object expansion to perform on the result.  See documentation for examples (optional)</param>
        /// <returns>Task of ApiResponse (CartValidationResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CartValidationResponse>> CheckoutCartValidatePostAsyncWithHttpInfo (CartValidationRequest validationRequest, string expand = null);
        /// <summary>
        /// City/State for Zip
        /// </summary>
        /// <remarks>
        /// Look up the city and state for the shipping zip code.  Useful for building an auto complete for parts of the shipping address 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cart">Cart</param>
        /// <returns>Task of ItemsResponse</returns>
        System.Threading.Tasks.Task<ItemsResponse> CheckoutCityStatePostAsync (Cart cart);

        /// <summary>
        /// City/State for Zip
        /// </summary>
        /// <remarks>
        /// Look up the city and state for the shipping zip code.  Useful for building an auto complete for parts of the shipping address 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cart">Cart</param>
        /// <returns>Task of ApiResponse (ItemsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ItemsResponse>> CheckoutCityStatePostAsyncWithHttpInfo (Cart cart);
        /// <summary>
        /// Related items (specific item)
        /// </summary>
        /// <remarks>
        /// Retrieve all the related items for the cart contents.  Expansion is limited to content, content.assignments, content.attributes, content.multimedia, content.multimedia.thumbnails, options, pricing, and pricing.tiers. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemId">Item ID to retrieve related items for</param>
        /// <param name="cart">Cart</param>
        /// <param name="expand">The object expansion to perform on the result.  See item resource documentation for examples (optional)</param>
        /// <returns>Task of ItemsResponse</returns>
        System.Threading.Tasks.Task<ItemsResponse> CheckoutRelatedItemsItemIdPostAsync (string itemId, Cart cart, string expand = null);

        /// <summary>
        /// Related items (specific item)
        /// </summary>
        /// <remarks>
        /// Retrieve all the related items for the cart contents.  Expansion is limited to content, content.assignments, content.attributes, content.multimedia, content.multimedia.thumbnails, options, pricing, and pricing.tiers. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemId">Item ID to retrieve related items for</param>
        /// <param name="cart">Cart</param>
        /// <param name="expand">The object expansion to perform on the result.  See item resource documentation for examples (optional)</param>
        /// <returns>Task of ApiResponse (ItemsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ItemsResponse>> CheckoutRelatedItemsItemIdPostAsyncWithHttpInfo (string itemId, Cart cart, string expand = null);
        /// <summary>
        /// Related items
        /// </summary>
        /// <remarks>
        /// Retrieve all the related items for the cart contents.  Expansion is limited to content, content.assignments, content.attributes, content.multimedia, content.multimedia.thumbnails, options, pricing, and pricing.tiers. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cart">Cart</param>
        /// <param name="expand">The object expansion to perform on the result.  See item resource documentation for examples (optional)</param>
        /// <returns>Task of ItemsResponse</returns>
        System.Threading.Tasks.Task<ItemsResponse> CheckoutRelatedItemsPostAsync (Cart cart, string expand = null);

        /// <summary>
        /// Related items
        /// </summary>
        /// <remarks>
        /// Retrieve all the related items for the cart contents.  Expansion is limited to content, content.assignments, content.attributes, content.multimedia, content.multimedia.thumbnails, options, pricing, and pricing.tiers. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cart">Cart</param>
        /// <param name="expand">The object expansion to perform on the result.  See item resource documentation for examples (optional)</param>
        /// <returns>Task of ApiResponse (ItemsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ItemsResponse>> CheckoutRelatedItemsPostAsyncWithHttpInfo (Cart cart, string expand = null);
        /// <summary>
        /// Get cart (by return code)
        /// </summary>
        /// <remarks>
        /// Get a cart specified by the return code parameter. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="returnCode">Return code to lookup cart ID by</param>
        /// <param name="expand">The object expansion to perform on the result.  See documentation for examples (optional)</param>
        /// <returns>Task of CartResponse</returns>
        System.Threading.Tasks.Task<CartResponse> CheckoutReturnReturnCodeGetAsync (string returnCode, string expand = null);

        /// <summary>
        /// Get cart (by return code)
        /// </summary>
        /// <remarks>
        /// Get a cart specified by the return code parameter. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="returnCode">Return code to lookup cart ID by</param>
        /// <param name="expand">The object expansion to perform on the result.  See documentation for examples (optional)</param>
        /// <returns>Task of ApiResponse (CartResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CartResponse>> CheckoutReturnReturnCodeGetAsyncWithHttpInfo (string returnCode, string expand = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class CheckoutApi : ICheckoutApi
    {
        private com.ultracart.admin.v2.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="CheckoutApi"/> class.
        /// </summary>
        /// <returns></returns>
        public CheckoutApi(String basePath)
        {
            this.Configuration = new Configuration(new ApiClient(basePath));

            ExceptionFactory = com.ultracart.admin.v2.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CheckoutApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public CheckoutApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = com.ultracart.admin.v2.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public com.ultracart.admin.v2.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public Dictionary<String, String> DefaultHeader()
        {
            return this.Configuration.DefaultHeader;
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Setup Browser Application Setup a browser key authenticated application with checkout permissions.  This REST call must be made with an authentication scheme that is not browser key.  The new application will be linked to the application that makes this call.  If this application is disabled / deleted, then so will the application setup by this call.  The purpose of this call is to allow an OAuth applicaiton, such as the Wordpress plugin, to setup the proper browser based authentication for the REST checkout API to use. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="browserKeyRequest">Setup browser key request</param>
        /// <returns>CheckoutSetupBrowserKeyResponse</returns>
        public CheckoutSetupBrowserKeyResponse CheckoutBrowserKeyPut (CheckoutSetupBrowserKeyRequest browserKeyRequest)
        {
             ApiResponse<CheckoutSetupBrowserKeyResponse> localVarResponse = CheckoutBrowserKeyPutWithHttpInfo(browserKeyRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Setup Browser Application Setup a browser key authenticated application with checkout permissions.  This REST call must be made with an authentication scheme that is not browser key.  The new application will be linked to the application that makes this call.  If this application is disabled / deleted, then so will the application setup by this call.  The purpose of this call is to allow an OAuth applicaiton, such as the Wordpress plugin, to setup the proper browser based authentication for the REST checkout API to use. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="browserKeyRequest">Setup browser key request</param>
        /// <returns>ApiResponse of CheckoutSetupBrowserKeyResponse</returns>
        public ApiResponse< CheckoutSetupBrowserKeyResponse > CheckoutBrowserKeyPutWithHttpInfo (CheckoutSetupBrowserKeyRequest browserKeyRequest)
        {
            // verify the required parameter 'browserKeyRequest' is set
            if (browserKeyRequest == null)
                throw new ApiException(400, "Missing required parameter 'browserKeyRequest' when calling CheckoutApi->CheckoutBrowserKeyPut");

            var localVarPath = "/checkout/browser_key";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (browserKeyRequest != null && browserKeyRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(browserKeyRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = browserKeyRequest; // byte array
            }

            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CheckoutBrowserKeyPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CheckoutSetupBrowserKeyResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CheckoutSetupBrowserKeyResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CheckoutSetupBrowserKeyResponse)));
            
        }

        /// <summary>
        /// Setup Browser Application Setup a browser key authenticated application with checkout permissions.  This REST call must be made with an authentication scheme that is not browser key.  The new application will be linked to the application that makes this call.  If this application is disabled / deleted, then so will the application setup by this call.  The purpose of this call is to allow an OAuth applicaiton, such as the Wordpress plugin, to setup the proper browser based authentication for the REST checkout API to use. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="browserKeyRequest">Setup browser key request</param>
        /// <returns>Task of CheckoutSetupBrowserKeyResponse</returns>
        public async System.Threading.Tasks.Task<CheckoutSetupBrowserKeyResponse> CheckoutBrowserKeyPutAsync (CheckoutSetupBrowserKeyRequest browserKeyRequest)
        {
             ApiResponse<CheckoutSetupBrowserKeyResponse> localVarResponse = await CheckoutBrowserKeyPutAsyncWithHttpInfo(browserKeyRequest);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Setup Browser Application Setup a browser key authenticated application with checkout permissions.  This REST call must be made with an authentication scheme that is not browser key.  The new application will be linked to the application that makes this call.  If this application is disabled / deleted, then so will the application setup by this call.  The purpose of this call is to allow an OAuth applicaiton, such as the Wordpress plugin, to setup the proper browser based authentication for the REST checkout API to use. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="browserKeyRequest">Setup browser key request</param>
        /// <returns>Task of ApiResponse (CheckoutSetupBrowserKeyResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CheckoutSetupBrowserKeyResponse>> CheckoutBrowserKeyPutAsyncWithHttpInfo (CheckoutSetupBrowserKeyRequest browserKeyRequest)
        {
            // verify the required parameter 'browserKeyRequest' is set
            if (browserKeyRequest == null)
                throw new ApiException(400, "Missing required parameter 'browserKeyRequest' when calling CheckoutApi->CheckoutBrowserKeyPut");

            var localVarPath = "/checkout/browser_key";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (browserKeyRequest != null && browserKeyRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(browserKeyRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = browserKeyRequest; // byte array
            }

            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CheckoutBrowserKeyPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CheckoutSetupBrowserKeyResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CheckoutSetupBrowserKeyResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CheckoutSetupBrowserKeyResponse)));
            
        }

        /// <summary>
        /// Get cart (by cart id) Get a cart specified by the cart_id parameter. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cartId">Cart ID to retrieve</param>
        /// <param name="expand">The object expansion to perform on the result.  See documentation for examples (optional)</param>
        /// <returns>CartResponse</returns>
        public CartResponse CheckoutCartCartIdGet (string cartId, string expand = null)
        {
             ApiResponse<CartResponse> localVarResponse = CheckoutCartCartIdGetWithHttpInfo(cartId, expand);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get cart (by cart id) Get a cart specified by the cart_id parameter. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cartId">Cart ID to retrieve</param>
        /// <param name="expand">The object expansion to perform on the result.  See documentation for examples (optional)</param>
        /// <returns>ApiResponse of CartResponse</returns>
        public ApiResponse< CartResponse > CheckoutCartCartIdGetWithHttpInfo (string cartId, string expand = null)
        {
            // verify the required parameter 'cartId' is set
            if (cartId == null)
                throw new ApiException(400, "Missing required parameter 'cartId' when calling CheckoutApi->CheckoutCartCartIdGet");

            var localVarPath = "/checkout/cart/{cart_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (cartId != null) localVarPathParams.Add("cart_id", Configuration.ApiClient.ParameterToString(cartId)); // path parameter
            if (expand != null) localVarQueryParams.Add("_expand", Configuration.ApiClient.ParameterToString(expand)); // query parameter

            // authentication (ultraCartBrowserApiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key")))
            {
                localVarHeaderParams["x-ultracart-browser-key"] = Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key");
            }

            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CheckoutCartCartIdGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CartResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CartResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CartResponse)));
            
        }

        /// <summary>
        /// Get cart (by cart id) Get a cart specified by the cart_id parameter. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cartId">Cart ID to retrieve</param>
        /// <param name="expand">The object expansion to perform on the result.  See documentation for examples (optional)</param>
        /// <returns>Task of CartResponse</returns>
        public async System.Threading.Tasks.Task<CartResponse> CheckoutCartCartIdGetAsync (string cartId, string expand = null)
        {
             ApiResponse<CartResponse> localVarResponse = await CheckoutCartCartIdGetAsyncWithHttpInfo(cartId, expand);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get cart (by cart id) Get a cart specified by the cart_id parameter. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cartId">Cart ID to retrieve</param>
        /// <param name="expand">The object expansion to perform on the result.  See documentation for examples (optional)</param>
        /// <returns>Task of ApiResponse (CartResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CartResponse>> CheckoutCartCartIdGetAsyncWithHttpInfo (string cartId, string expand = null)
        {
            // verify the required parameter 'cartId' is set
            if (cartId == null)
                throw new ApiException(400, "Missing required parameter 'cartId' when calling CheckoutApi->CheckoutCartCartIdGet");

            var localVarPath = "/checkout/cart/{cart_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (cartId != null) localVarPathParams.Add("cart_id", Configuration.ApiClient.ParameterToString(cartId)); // path parameter
            if (expand != null) localVarQueryParams.Add("_expand", Configuration.ApiClient.ParameterToString(expand)); // query parameter

            // authentication (ultraCartBrowserApiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key")))
            {
                localVarHeaderParams["x-ultracart-browser-key"] = Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key");
            }
            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CheckoutCartCartIdGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CartResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CartResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CartResponse)));
            
        }

        /// <summary>
        /// Finalize Order Finalize the cart into an order.  This method can not be called with browser key authentication.  It is ONLY meant for server side code to call. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="finalizeRequest">Finalize request</param>
        /// <returns>CartFinalizeOrderResponse</returns>
        public CartFinalizeOrderResponse CheckoutCartFinalizeOrderPost (CartFinalizeOrderRequest finalizeRequest)
        {
             ApiResponse<CartFinalizeOrderResponse> localVarResponse = CheckoutCartFinalizeOrderPostWithHttpInfo(finalizeRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Finalize Order Finalize the cart into an order.  This method can not be called with browser key authentication.  It is ONLY meant for server side code to call. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="finalizeRequest">Finalize request</param>
        /// <returns>ApiResponse of CartFinalizeOrderResponse</returns>
        public ApiResponse< CartFinalizeOrderResponse > CheckoutCartFinalizeOrderPostWithHttpInfo (CartFinalizeOrderRequest finalizeRequest)
        {
            // verify the required parameter 'finalizeRequest' is set
            if (finalizeRequest == null)
                throw new ApiException(400, "Missing required parameter 'finalizeRequest' when calling CheckoutApi->CheckoutCartFinalizeOrderPost");

            var localVarPath = "/checkout/cart/finalizeOrder";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (finalizeRequest != null && finalizeRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(finalizeRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = finalizeRequest; // byte array
            }

            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CheckoutCartFinalizeOrderPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CartFinalizeOrderResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CartFinalizeOrderResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CartFinalizeOrderResponse)));
            
        }

        /// <summary>
        /// Finalize Order Finalize the cart into an order.  This method can not be called with browser key authentication.  It is ONLY meant for server side code to call. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="finalizeRequest">Finalize request</param>
        /// <returns>Task of CartFinalizeOrderResponse</returns>
        public async System.Threading.Tasks.Task<CartFinalizeOrderResponse> CheckoutCartFinalizeOrderPostAsync (CartFinalizeOrderRequest finalizeRequest)
        {
             ApiResponse<CartFinalizeOrderResponse> localVarResponse = await CheckoutCartFinalizeOrderPostAsyncWithHttpInfo(finalizeRequest);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Finalize Order Finalize the cart into an order.  This method can not be called with browser key authentication.  It is ONLY meant for server side code to call. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="finalizeRequest">Finalize request</param>
        /// <returns>Task of ApiResponse (CartFinalizeOrderResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CartFinalizeOrderResponse>> CheckoutCartFinalizeOrderPostAsyncWithHttpInfo (CartFinalizeOrderRequest finalizeRequest)
        {
            // verify the required parameter 'finalizeRequest' is set
            if (finalizeRequest == null)
                throw new ApiException(400, "Missing required parameter 'finalizeRequest' when calling CheckoutApi->CheckoutCartFinalizeOrderPost");

            var localVarPath = "/checkout/cart/finalizeOrder";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (finalizeRequest != null && finalizeRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(finalizeRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = finalizeRequest; // byte array
            }

            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CheckoutCartFinalizeOrderPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CartFinalizeOrderResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CartFinalizeOrderResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CartFinalizeOrderResponse)));
            
        }

        /// <summary>
        /// Get cart If the cookie is set on the browser making the request then it will return their active cart.  Otherwise it will create a new cart. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="expand">The object expansion to perform on the result.  See documentation for examples (optional)</param>
        /// <returns>CartResponse</returns>
        public CartResponse CheckoutCartGet (string expand = null)
        {
             ApiResponse<CartResponse> localVarResponse = CheckoutCartGetWithHttpInfo(expand);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get cart If the cookie is set on the browser making the request then it will return their active cart.  Otherwise it will create a new cart. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="expand">The object expansion to perform on the result.  See documentation for examples (optional)</param>
        /// <returns>ApiResponse of CartResponse</returns>
        public ApiResponse< CartResponse > CheckoutCartGetWithHttpInfo (string expand = null)
        {

            var localVarPath = "/checkout/cart";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (expand != null) localVarQueryParams.Add("_expand", Configuration.ApiClient.ParameterToString(expand)); // query parameter

            // authentication (ultraCartBrowserApiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key")))
            {
                localVarHeaderParams["x-ultracart-browser-key"] = Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key");
            }

            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CheckoutCartGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CartResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CartResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CartResponse)));
            
        }

        /// <summary>
        /// Get cart If the cookie is set on the browser making the request then it will return their active cart.  Otherwise it will create a new cart. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="expand">The object expansion to perform on the result.  See documentation for examples (optional)</param>
        /// <returns>Task of CartResponse</returns>
        public async System.Threading.Tasks.Task<CartResponse> CheckoutCartGetAsync (string expand = null)
        {
             ApiResponse<CartResponse> localVarResponse = await CheckoutCartGetAsyncWithHttpInfo(expand);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get cart If the cookie is set on the browser making the request then it will return their active cart.  Otherwise it will create a new cart. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="expand">The object expansion to perform on the result.  See documentation for examples (optional)</param>
        /// <returns>Task of ApiResponse (CartResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CartResponse>> CheckoutCartGetAsyncWithHttpInfo (string expand = null)
        {

            var localVarPath = "/checkout/cart";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (expand != null) localVarQueryParams.Add("_expand", Configuration.ApiClient.ParameterToString(expand)); // query parameter

            // authentication (ultraCartBrowserApiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key")))
            {
                localVarHeaderParams["x-ultracart-browser-key"] = Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key");
            }
            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CheckoutCartGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CartResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CartResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CartResponse)));
            
        }

        /// <summary>
        /// Handoff cart Handoff the browser to UltraCart for view cart on StoreFront, transfer to PayPal or finalization of the order (including upsell processing). 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="handoffRequest">Handoff request</param>
        /// <param name="expand">The object expansion to perform on the result.  See documentation for examples (optional)</param>
        /// <returns>CheckoutHandoffResponse</returns>
        public CheckoutHandoffResponse CheckoutCartHandoffPost (CheckoutHandoffRequest handoffRequest, string expand = null)
        {
             ApiResponse<CheckoutHandoffResponse> localVarResponse = CheckoutCartHandoffPostWithHttpInfo(handoffRequest, expand);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Handoff cart Handoff the browser to UltraCart for view cart on StoreFront, transfer to PayPal or finalization of the order (including upsell processing). 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="handoffRequest">Handoff request</param>
        /// <param name="expand">The object expansion to perform on the result.  See documentation for examples (optional)</param>
        /// <returns>ApiResponse of CheckoutHandoffResponse</returns>
        public ApiResponse< CheckoutHandoffResponse > CheckoutCartHandoffPostWithHttpInfo (CheckoutHandoffRequest handoffRequest, string expand = null)
        {
            // verify the required parameter 'handoffRequest' is set
            if (handoffRequest == null)
                throw new ApiException(400, "Missing required parameter 'handoffRequest' when calling CheckoutApi->CheckoutCartHandoffPost");

            var localVarPath = "/checkout/cart/handoff";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (expand != null) localVarQueryParams.Add("_expand", Configuration.ApiClient.ParameterToString(expand)); // query parameter
            if (handoffRequest != null && handoffRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(handoffRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = handoffRequest; // byte array
            }

            // authentication (ultraCartBrowserApiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key")))
            {
                localVarHeaderParams["x-ultracart-browser-key"] = Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key");
            }

            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CheckoutCartHandoffPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CheckoutHandoffResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CheckoutHandoffResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CheckoutHandoffResponse)));
            
        }

        /// <summary>
        /// Handoff cart Handoff the browser to UltraCart for view cart on StoreFront, transfer to PayPal or finalization of the order (including upsell processing). 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="handoffRequest">Handoff request</param>
        /// <param name="expand">The object expansion to perform on the result.  See documentation for examples (optional)</param>
        /// <returns>Task of CheckoutHandoffResponse</returns>
        public async System.Threading.Tasks.Task<CheckoutHandoffResponse> CheckoutCartHandoffPostAsync (CheckoutHandoffRequest handoffRequest, string expand = null)
        {
             ApiResponse<CheckoutHandoffResponse> localVarResponse = await CheckoutCartHandoffPostAsyncWithHttpInfo(handoffRequest, expand);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Handoff cart Handoff the browser to UltraCart for view cart on StoreFront, transfer to PayPal or finalization of the order (including upsell processing). 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="handoffRequest">Handoff request</param>
        /// <param name="expand">The object expansion to perform on the result.  See documentation for examples (optional)</param>
        /// <returns>Task of ApiResponse (CheckoutHandoffResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CheckoutHandoffResponse>> CheckoutCartHandoffPostAsyncWithHttpInfo (CheckoutHandoffRequest handoffRequest, string expand = null)
        {
            // verify the required parameter 'handoffRequest' is set
            if (handoffRequest == null)
                throw new ApiException(400, "Missing required parameter 'handoffRequest' when calling CheckoutApi->CheckoutCartHandoffPost");

            var localVarPath = "/checkout/cart/handoff";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (expand != null) localVarQueryParams.Add("_expand", Configuration.ApiClient.ParameterToString(expand)); // query parameter
            if (handoffRequest != null && handoffRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(handoffRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = handoffRequest; // byte array
            }

            // authentication (ultraCartBrowserApiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key")))
            {
                localVarHeaderParams["x-ultracart-browser-key"] = Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key");
            }
            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CheckoutCartHandoffPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CheckoutHandoffResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CheckoutHandoffResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CheckoutHandoffResponse)));
            
        }

        /// <summary>
        /// Profile login Login in to the customer profile specified by cart.billing.email and password 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loginRequest">Login request</param>
        /// <param name="expand">The object expansion to perform on the result.  See documentation for examples (optional)</param>
        /// <returns>CartProfileLoginResponse</returns>
        public CartProfileLoginResponse CheckoutCartProfileLoginPost (CartProfileLoginRequest loginRequest, string expand = null)
        {
             ApiResponse<CartProfileLoginResponse> localVarResponse = CheckoutCartProfileLoginPostWithHttpInfo(loginRequest, expand);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Profile login Login in to the customer profile specified by cart.billing.email and password 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loginRequest">Login request</param>
        /// <param name="expand">The object expansion to perform on the result.  See documentation for examples (optional)</param>
        /// <returns>ApiResponse of CartProfileLoginResponse</returns>
        public ApiResponse< CartProfileLoginResponse > CheckoutCartProfileLoginPostWithHttpInfo (CartProfileLoginRequest loginRequest, string expand = null)
        {
            // verify the required parameter 'loginRequest' is set
            if (loginRequest == null)
                throw new ApiException(400, "Missing required parameter 'loginRequest' when calling CheckoutApi->CheckoutCartProfileLoginPost");

            var localVarPath = "/checkout/cart/profile/login";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (expand != null) localVarQueryParams.Add("_expand", Configuration.ApiClient.ParameterToString(expand)); // query parameter
            if (loginRequest != null && loginRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(loginRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = loginRequest; // byte array
            }

            // authentication (ultraCartBrowserApiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key")))
            {
                localVarHeaderParams["x-ultracart-browser-key"] = Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key");
            }

            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CheckoutCartProfileLoginPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CartProfileLoginResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CartProfileLoginResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CartProfileLoginResponse)));
            
        }

        /// <summary>
        /// Profile login Login in to the customer profile specified by cart.billing.email and password 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loginRequest">Login request</param>
        /// <param name="expand">The object expansion to perform on the result.  See documentation for examples (optional)</param>
        /// <returns>Task of CartProfileLoginResponse</returns>
        public async System.Threading.Tasks.Task<CartProfileLoginResponse> CheckoutCartProfileLoginPostAsync (CartProfileLoginRequest loginRequest, string expand = null)
        {
             ApiResponse<CartProfileLoginResponse> localVarResponse = await CheckoutCartProfileLoginPostAsyncWithHttpInfo(loginRequest, expand);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Profile login Login in to the customer profile specified by cart.billing.email and password 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loginRequest">Login request</param>
        /// <param name="expand">The object expansion to perform on the result.  See documentation for examples (optional)</param>
        /// <returns>Task of ApiResponse (CartProfileLoginResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CartProfileLoginResponse>> CheckoutCartProfileLoginPostAsyncWithHttpInfo (CartProfileLoginRequest loginRequest, string expand = null)
        {
            // verify the required parameter 'loginRequest' is set
            if (loginRequest == null)
                throw new ApiException(400, "Missing required parameter 'loginRequest' when calling CheckoutApi->CheckoutCartProfileLoginPost");

            var localVarPath = "/checkout/cart/profile/login";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (expand != null) localVarQueryParams.Add("_expand", Configuration.ApiClient.ParameterToString(expand)); // query parameter
            if (loginRequest != null && loginRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(loginRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = loginRequest; // byte array
            }

            // authentication (ultraCartBrowserApiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key")))
            {
                localVarHeaderParams["x-ultracart-browser-key"] = Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key");
            }
            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CheckoutCartProfileLoginPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CartProfileLoginResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CartProfileLoginResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CartProfileLoginResponse)));
            
        }

        /// <summary>
        /// Profile logout Log the cart out of the current profile.  No error will occur if they are not logged in. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cart">Cart</param>
        /// <param name="expand">The object expansion to perform on the result.  See documentation for examples (optional)</param>
        /// <returns>CartResponse</returns>
        public CartResponse CheckoutCartProfileLogoutPost (Cart cart, string expand = null)
        {
             ApiResponse<CartResponse> localVarResponse = CheckoutCartProfileLogoutPostWithHttpInfo(cart, expand);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Profile logout Log the cart out of the current profile.  No error will occur if they are not logged in. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cart">Cart</param>
        /// <param name="expand">The object expansion to perform on the result.  See documentation for examples (optional)</param>
        /// <returns>ApiResponse of CartResponse</returns>
        public ApiResponse< CartResponse > CheckoutCartProfileLogoutPostWithHttpInfo (Cart cart, string expand = null)
        {
            // verify the required parameter 'cart' is set
            if (cart == null)
                throw new ApiException(400, "Missing required parameter 'cart' when calling CheckoutApi->CheckoutCartProfileLogoutPost");

            var localVarPath = "/checkout/cart/profile/logout";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (expand != null) localVarQueryParams.Add("_expand", Configuration.ApiClient.ParameterToString(expand)); // query parameter
            if (cart != null && cart.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(cart); // http body (model) parameter
            }
            else
            {
                localVarPostBody = cart; // byte array
            }

            // authentication (ultraCartBrowserApiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key")))
            {
                localVarHeaderParams["x-ultracart-browser-key"] = Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key");
            }

            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CheckoutCartProfileLogoutPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CartResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CartResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CartResponse)));
            
        }

        /// <summary>
        /// Profile logout Log the cart out of the current profile.  No error will occur if they are not logged in. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cart">Cart</param>
        /// <param name="expand">The object expansion to perform on the result.  See documentation for examples (optional)</param>
        /// <returns>Task of CartResponse</returns>
        public async System.Threading.Tasks.Task<CartResponse> CheckoutCartProfileLogoutPostAsync (Cart cart, string expand = null)
        {
             ApiResponse<CartResponse> localVarResponse = await CheckoutCartProfileLogoutPostAsyncWithHttpInfo(cart, expand);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Profile logout Log the cart out of the current profile.  No error will occur if they are not logged in. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cart">Cart</param>
        /// <param name="expand">The object expansion to perform on the result.  See documentation for examples (optional)</param>
        /// <returns>Task of ApiResponse (CartResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CartResponse>> CheckoutCartProfileLogoutPostAsyncWithHttpInfo (Cart cart, string expand = null)
        {
            // verify the required parameter 'cart' is set
            if (cart == null)
                throw new ApiException(400, "Missing required parameter 'cart' when calling CheckoutApi->CheckoutCartProfileLogoutPost");

            var localVarPath = "/checkout/cart/profile/logout";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (expand != null) localVarQueryParams.Add("_expand", Configuration.ApiClient.ParameterToString(expand)); // query parameter
            if (cart != null && cart.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(cart); // http body (model) parameter
            }
            else
            {
                localVarPostBody = cart; // byte array
            }

            // authentication (ultraCartBrowserApiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key")))
            {
                localVarHeaderParams["x-ultracart-browser-key"] = Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key");
            }
            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CheckoutCartProfileLogoutPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CartResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CartResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CartResponse)));
            
        }

        /// <summary>
        /// Profile registration Register a new customer profile.  Requires the cart.billing object to be populated along with the password. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="registerRequest">Register request</param>
        /// <param name="expand">The object expansion to perform on the result.  See documentation for examples (optional)</param>
        /// <returns>CartProfileRegisterResponse</returns>
        public CartProfileRegisterResponse CheckoutCartProfileRegisterPost (CartProfileRegisterRequest registerRequest, string expand = null)
        {
             ApiResponse<CartProfileRegisterResponse> localVarResponse = CheckoutCartProfileRegisterPostWithHttpInfo(registerRequest, expand);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Profile registration Register a new customer profile.  Requires the cart.billing object to be populated along with the password. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="registerRequest">Register request</param>
        /// <param name="expand">The object expansion to perform on the result.  See documentation for examples (optional)</param>
        /// <returns>ApiResponse of CartProfileRegisterResponse</returns>
        public ApiResponse< CartProfileRegisterResponse > CheckoutCartProfileRegisterPostWithHttpInfo (CartProfileRegisterRequest registerRequest, string expand = null)
        {
            // verify the required parameter 'registerRequest' is set
            if (registerRequest == null)
                throw new ApiException(400, "Missing required parameter 'registerRequest' when calling CheckoutApi->CheckoutCartProfileRegisterPost");

            var localVarPath = "/checkout/cart/profile/register";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (expand != null) localVarQueryParams.Add("_expand", Configuration.ApiClient.ParameterToString(expand)); // query parameter
            if (registerRequest != null && registerRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(registerRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = registerRequest; // byte array
            }

            // authentication (ultraCartBrowserApiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key")))
            {
                localVarHeaderParams["x-ultracart-browser-key"] = Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key");
            }

            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CheckoutCartProfileRegisterPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CartProfileRegisterResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CartProfileRegisterResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CartProfileRegisterResponse)));
            
        }

        /// <summary>
        /// Profile registration Register a new customer profile.  Requires the cart.billing object to be populated along with the password. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="registerRequest">Register request</param>
        /// <param name="expand">The object expansion to perform on the result.  See documentation for examples (optional)</param>
        /// <returns>Task of CartProfileRegisterResponse</returns>
        public async System.Threading.Tasks.Task<CartProfileRegisterResponse> CheckoutCartProfileRegisterPostAsync (CartProfileRegisterRequest registerRequest, string expand = null)
        {
             ApiResponse<CartProfileRegisterResponse> localVarResponse = await CheckoutCartProfileRegisterPostAsyncWithHttpInfo(registerRequest, expand);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Profile registration Register a new customer profile.  Requires the cart.billing object to be populated along with the password. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="registerRequest">Register request</param>
        /// <param name="expand">The object expansion to perform on the result.  See documentation for examples (optional)</param>
        /// <returns>Task of ApiResponse (CartProfileRegisterResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CartProfileRegisterResponse>> CheckoutCartProfileRegisterPostAsyncWithHttpInfo (CartProfileRegisterRequest registerRequest, string expand = null)
        {
            // verify the required parameter 'registerRequest' is set
            if (registerRequest == null)
                throw new ApiException(400, "Missing required parameter 'registerRequest' when calling CheckoutApi->CheckoutCartProfileRegisterPost");

            var localVarPath = "/checkout/cart/profile/register";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (expand != null) localVarQueryParams.Add("_expand", Configuration.ApiClient.ParameterToString(expand)); // query parameter
            if (registerRequest != null && registerRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(registerRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = registerRequest; // byte array
            }

            // authentication (ultraCartBrowserApiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key")))
            {
                localVarHeaderParams["x-ultracart-browser-key"] = Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key");
            }
            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CheckoutCartProfileRegisterPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CartProfileRegisterResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CartProfileRegisterResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CartProfileRegisterResponse)));
            
        }

        /// <summary>
        /// Update cart Update the cart. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cart">Cart</param>
        /// <param name="expand">The object expansion to perform on the result.  See documentation for examples (optional)</param>
        /// <returns>CartResponse</returns>
        public CartResponse CheckoutCartPut (Cart cart, string expand = null)
        {
             ApiResponse<CartResponse> localVarResponse = CheckoutCartPutWithHttpInfo(cart, expand);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update cart Update the cart. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cart">Cart</param>
        /// <param name="expand">The object expansion to perform on the result.  See documentation for examples (optional)</param>
        /// <returns>ApiResponse of CartResponse</returns>
        public ApiResponse< CartResponse > CheckoutCartPutWithHttpInfo (Cart cart, string expand = null)
        {
            // verify the required parameter 'cart' is set
            if (cart == null)
                throw new ApiException(400, "Missing required parameter 'cart' when calling CheckoutApi->CheckoutCartPut");

            var localVarPath = "/checkout/cart";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (expand != null) localVarQueryParams.Add("_expand", Configuration.ApiClient.ParameterToString(expand)); // query parameter
            if (cart != null && cart.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(cart); // http body (model) parameter
            }
            else
            {
                localVarPostBody = cart; // byte array
            }

            // authentication (ultraCartBrowserApiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key")))
            {
                localVarHeaderParams["x-ultracart-browser-key"] = Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key");
            }

            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CheckoutCartPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CartResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CartResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CartResponse)));
            
        }

        /// <summary>
        /// Update cart Update the cart. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cart">Cart</param>
        /// <param name="expand">The object expansion to perform on the result.  See documentation for examples (optional)</param>
        /// <returns>Task of CartResponse</returns>
        public async System.Threading.Tasks.Task<CartResponse> CheckoutCartPutAsync (Cart cart, string expand = null)
        {
             ApiResponse<CartResponse> localVarResponse = await CheckoutCartPutAsyncWithHttpInfo(cart, expand);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update cart Update the cart. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cart">Cart</param>
        /// <param name="expand">The object expansion to perform on the result.  See documentation for examples (optional)</param>
        /// <returns>Task of ApiResponse (CartResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CartResponse>> CheckoutCartPutAsyncWithHttpInfo (Cart cart, string expand = null)
        {
            // verify the required parameter 'cart' is set
            if (cart == null)
                throw new ApiException(400, "Missing required parameter 'cart' when calling CheckoutApi->CheckoutCartPut");

            var localVarPath = "/checkout/cart";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (expand != null) localVarQueryParams.Add("_expand", Configuration.ApiClient.ParameterToString(expand)); // query parameter
            if (cart != null && cart.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(cart); // http body (model) parameter
            }
            else
            {
                localVarPostBody = cart; // byte array
            }

            // authentication (ultraCartBrowserApiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key")))
            {
                localVarHeaderParams["x-ultracart-browser-key"] = Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key");
            }
            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CheckoutCartPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CartResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CartResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CartResponse)));
            
        }

        /// <summary>
        /// Validate Validate the cart for errors.  Specific checks can be passed and multiple validations can occur throughout your checkout flow. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="validationRequest">Validation request</param>
        /// <param name="expand">The object expansion to perform on the result.  See documentation for examples (optional)</param>
        /// <returns>CartValidationResponse</returns>
        public CartValidationResponse CheckoutCartValidatePost (CartValidationRequest validationRequest, string expand = null)
        {
             ApiResponse<CartValidationResponse> localVarResponse = CheckoutCartValidatePostWithHttpInfo(validationRequest, expand);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Validate Validate the cart for errors.  Specific checks can be passed and multiple validations can occur throughout your checkout flow. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="validationRequest">Validation request</param>
        /// <param name="expand">The object expansion to perform on the result.  See documentation for examples (optional)</param>
        /// <returns>ApiResponse of CartValidationResponse</returns>
        public ApiResponse< CartValidationResponse > CheckoutCartValidatePostWithHttpInfo (CartValidationRequest validationRequest, string expand = null)
        {
            // verify the required parameter 'validationRequest' is set
            if (validationRequest == null)
                throw new ApiException(400, "Missing required parameter 'validationRequest' when calling CheckoutApi->CheckoutCartValidatePost");

            var localVarPath = "/checkout/cart/validate";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (expand != null) localVarQueryParams.Add("_expand", Configuration.ApiClient.ParameterToString(expand)); // query parameter
            if (validationRequest != null && validationRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(validationRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = validationRequest; // byte array
            }

            // authentication (ultraCartBrowserApiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key")))
            {
                localVarHeaderParams["x-ultracart-browser-key"] = Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key");
            }

            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CheckoutCartValidatePost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CartValidationResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CartValidationResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CartValidationResponse)));
            
        }

        /// <summary>
        /// Validate Validate the cart for errors.  Specific checks can be passed and multiple validations can occur throughout your checkout flow. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="validationRequest">Validation request</param>
        /// <param name="expand">The object expansion to perform on the result.  See documentation for examples (optional)</param>
        /// <returns>Task of CartValidationResponse</returns>
        public async System.Threading.Tasks.Task<CartValidationResponse> CheckoutCartValidatePostAsync (CartValidationRequest validationRequest, string expand = null)
        {
             ApiResponse<CartValidationResponse> localVarResponse = await CheckoutCartValidatePostAsyncWithHttpInfo(validationRequest, expand);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Validate Validate the cart for errors.  Specific checks can be passed and multiple validations can occur throughout your checkout flow. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="validationRequest">Validation request</param>
        /// <param name="expand">The object expansion to perform on the result.  See documentation for examples (optional)</param>
        /// <returns>Task of ApiResponse (CartValidationResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CartValidationResponse>> CheckoutCartValidatePostAsyncWithHttpInfo (CartValidationRequest validationRequest, string expand = null)
        {
            // verify the required parameter 'validationRequest' is set
            if (validationRequest == null)
                throw new ApiException(400, "Missing required parameter 'validationRequest' when calling CheckoutApi->CheckoutCartValidatePost");

            var localVarPath = "/checkout/cart/validate";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (expand != null) localVarQueryParams.Add("_expand", Configuration.ApiClient.ParameterToString(expand)); // query parameter
            if (validationRequest != null && validationRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(validationRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = validationRequest; // byte array
            }

            // authentication (ultraCartBrowserApiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key")))
            {
                localVarHeaderParams["x-ultracart-browser-key"] = Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key");
            }
            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CheckoutCartValidatePost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CartValidationResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CartValidationResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CartValidationResponse)));
            
        }

        /// <summary>
        /// City/State for Zip Look up the city and state for the shipping zip code.  Useful for building an auto complete for parts of the shipping address 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cart">Cart</param>
        /// <returns>ItemsResponse</returns>
        public ItemsResponse CheckoutCityStatePost (Cart cart)
        {
             ApiResponse<ItemsResponse> localVarResponse = CheckoutCityStatePostWithHttpInfo(cart);
             return localVarResponse.Data;
        }

        /// <summary>
        /// City/State for Zip Look up the city and state for the shipping zip code.  Useful for building an auto complete for parts of the shipping address 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cart">Cart</param>
        /// <returns>ApiResponse of ItemsResponse</returns>
        public ApiResponse< ItemsResponse > CheckoutCityStatePostWithHttpInfo (Cart cart)
        {
            // verify the required parameter 'cart' is set
            if (cart == null)
                throw new ApiException(400, "Missing required parameter 'cart' when calling CheckoutApi->CheckoutCityStatePost");

            var localVarPath = "/checkout/city_state";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (cart != null && cart.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(cart); // http body (model) parameter
            }
            else
            {
                localVarPostBody = cart; // byte array
            }

            // authentication (ultraCartBrowserApiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key")))
            {
                localVarHeaderParams["x-ultracart-browser-key"] = Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key");
            }

            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CheckoutCityStatePost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ItemsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ItemsResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ItemsResponse)));
            
        }

        /// <summary>
        /// City/State for Zip Look up the city and state for the shipping zip code.  Useful for building an auto complete for parts of the shipping address 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cart">Cart</param>
        /// <returns>Task of ItemsResponse</returns>
        public async System.Threading.Tasks.Task<ItemsResponse> CheckoutCityStatePostAsync (Cart cart)
        {
             ApiResponse<ItemsResponse> localVarResponse = await CheckoutCityStatePostAsyncWithHttpInfo(cart);
             return localVarResponse.Data;

        }

        /// <summary>
        /// City/State for Zip Look up the city and state for the shipping zip code.  Useful for building an auto complete for parts of the shipping address 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cart">Cart</param>
        /// <returns>Task of ApiResponse (ItemsResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ItemsResponse>> CheckoutCityStatePostAsyncWithHttpInfo (Cart cart)
        {
            // verify the required parameter 'cart' is set
            if (cart == null)
                throw new ApiException(400, "Missing required parameter 'cart' when calling CheckoutApi->CheckoutCityStatePost");

            var localVarPath = "/checkout/city_state";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (cart != null && cart.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(cart); // http body (model) parameter
            }
            else
            {
                localVarPostBody = cart; // byte array
            }

            // authentication (ultraCartBrowserApiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key")))
            {
                localVarHeaderParams["x-ultracart-browser-key"] = Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key");
            }
            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CheckoutCityStatePost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ItemsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ItemsResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ItemsResponse)));
            
        }

        /// <summary>
        /// Related items (specific item) Retrieve all the related items for the cart contents.  Expansion is limited to content, content.assignments, content.attributes, content.multimedia, content.multimedia.thumbnails, options, pricing, and pricing.tiers. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemId">Item ID to retrieve related items for</param>
        /// <param name="cart">Cart</param>
        /// <param name="expand">The object expansion to perform on the result.  See item resource documentation for examples (optional)</param>
        /// <returns>ItemsResponse</returns>
        public ItemsResponse CheckoutRelatedItemsItemIdPost (string itemId, Cart cart, string expand = null)
        {
             ApiResponse<ItemsResponse> localVarResponse = CheckoutRelatedItemsItemIdPostWithHttpInfo(itemId, cart, expand);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Related items (specific item) Retrieve all the related items for the cart contents.  Expansion is limited to content, content.assignments, content.attributes, content.multimedia, content.multimedia.thumbnails, options, pricing, and pricing.tiers. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemId">Item ID to retrieve related items for</param>
        /// <param name="cart">Cart</param>
        /// <param name="expand">The object expansion to perform on the result.  See item resource documentation for examples (optional)</param>
        /// <returns>ApiResponse of ItemsResponse</returns>
        public ApiResponse< ItemsResponse > CheckoutRelatedItemsItemIdPostWithHttpInfo (string itemId, Cart cart, string expand = null)
        {
            // verify the required parameter 'itemId' is set
            if (itemId == null)
                throw new ApiException(400, "Missing required parameter 'itemId' when calling CheckoutApi->CheckoutRelatedItemsItemIdPost");
            // verify the required parameter 'cart' is set
            if (cart == null)
                throw new ApiException(400, "Missing required parameter 'cart' when calling CheckoutApi->CheckoutRelatedItemsItemIdPost");

            var localVarPath = "/checkout/relatedItems/{item_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (itemId != null) localVarPathParams.Add("item_id", Configuration.ApiClient.ParameterToString(itemId)); // path parameter
            if (expand != null) localVarQueryParams.Add("_expand", Configuration.ApiClient.ParameterToString(expand)); // query parameter
            if (cart != null && cart.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(cart); // http body (model) parameter
            }
            else
            {
                localVarPostBody = cart; // byte array
            }

            // authentication (ultraCartBrowserApiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key")))
            {
                localVarHeaderParams["x-ultracart-browser-key"] = Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key");
            }

            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CheckoutRelatedItemsItemIdPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ItemsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ItemsResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ItemsResponse)));
            
        }

        /// <summary>
        /// Related items (specific item) Retrieve all the related items for the cart contents.  Expansion is limited to content, content.assignments, content.attributes, content.multimedia, content.multimedia.thumbnails, options, pricing, and pricing.tiers. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemId">Item ID to retrieve related items for</param>
        /// <param name="cart">Cart</param>
        /// <param name="expand">The object expansion to perform on the result.  See item resource documentation for examples (optional)</param>
        /// <returns>Task of ItemsResponse</returns>
        public async System.Threading.Tasks.Task<ItemsResponse> CheckoutRelatedItemsItemIdPostAsync (string itemId, Cart cart, string expand = null)
        {
             ApiResponse<ItemsResponse> localVarResponse = await CheckoutRelatedItemsItemIdPostAsyncWithHttpInfo(itemId, cart, expand);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Related items (specific item) Retrieve all the related items for the cart contents.  Expansion is limited to content, content.assignments, content.attributes, content.multimedia, content.multimedia.thumbnails, options, pricing, and pricing.tiers. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemId">Item ID to retrieve related items for</param>
        /// <param name="cart">Cart</param>
        /// <param name="expand">The object expansion to perform on the result.  See item resource documentation for examples (optional)</param>
        /// <returns>Task of ApiResponse (ItemsResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ItemsResponse>> CheckoutRelatedItemsItemIdPostAsyncWithHttpInfo (string itemId, Cart cart, string expand = null)
        {
            // verify the required parameter 'itemId' is set
            if (itemId == null)
                throw new ApiException(400, "Missing required parameter 'itemId' when calling CheckoutApi->CheckoutRelatedItemsItemIdPost");
            // verify the required parameter 'cart' is set
            if (cart == null)
                throw new ApiException(400, "Missing required parameter 'cart' when calling CheckoutApi->CheckoutRelatedItemsItemIdPost");

            var localVarPath = "/checkout/relatedItems/{item_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (itemId != null) localVarPathParams.Add("item_id", Configuration.ApiClient.ParameterToString(itemId)); // path parameter
            if (expand != null) localVarQueryParams.Add("_expand", Configuration.ApiClient.ParameterToString(expand)); // query parameter
            if (cart != null && cart.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(cart); // http body (model) parameter
            }
            else
            {
                localVarPostBody = cart; // byte array
            }

            // authentication (ultraCartBrowserApiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key")))
            {
                localVarHeaderParams["x-ultracart-browser-key"] = Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key");
            }
            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CheckoutRelatedItemsItemIdPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ItemsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ItemsResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ItemsResponse)));
            
        }

        /// <summary>
        /// Related items Retrieve all the related items for the cart contents.  Expansion is limited to content, content.assignments, content.attributes, content.multimedia, content.multimedia.thumbnails, options, pricing, and pricing.tiers. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cart">Cart</param>
        /// <param name="expand">The object expansion to perform on the result.  See item resource documentation for examples (optional)</param>
        /// <returns>ItemsResponse</returns>
        public ItemsResponse CheckoutRelatedItemsPost (Cart cart, string expand = null)
        {
             ApiResponse<ItemsResponse> localVarResponse = CheckoutRelatedItemsPostWithHttpInfo(cart, expand);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Related items Retrieve all the related items for the cart contents.  Expansion is limited to content, content.assignments, content.attributes, content.multimedia, content.multimedia.thumbnails, options, pricing, and pricing.tiers. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cart">Cart</param>
        /// <param name="expand">The object expansion to perform on the result.  See item resource documentation for examples (optional)</param>
        /// <returns>ApiResponse of ItemsResponse</returns>
        public ApiResponse< ItemsResponse > CheckoutRelatedItemsPostWithHttpInfo (Cart cart, string expand = null)
        {
            // verify the required parameter 'cart' is set
            if (cart == null)
                throw new ApiException(400, "Missing required parameter 'cart' when calling CheckoutApi->CheckoutRelatedItemsPost");

            var localVarPath = "/checkout/related_items";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (expand != null) localVarQueryParams.Add("_expand", Configuration.ApiClient.ParameterToString(expand)); // query parameter
            if (cart != null && cart.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(cart); // http body (model) parameter
            }
            else
            {
                localVarPostBody = cart; // byte array
            }

            // authentication (ultraCartBrowserApiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key")))
            {
                localVarHeaderParams["x-ultracart-browser-key"] = Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key");
            }

            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CheckoutRelatedItemsPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ItemsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ItemsResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ItemsResponse)));
            
        }

        /// <summary>
        /// Related items Retrieve all the related items for the cart contents.  Expansion is limited to content, content.assignments, content.attributes, content.multimedia, content.multimedia.thumbnails, options, pricing, and pricing.tiers. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cart">Cart</param>
        /// <param name="expand">The object expansion to perform on the result.  See item resource documentation for examples (optional)</param>
        /// <returns>Task of ItemsResponse</returns>
        public async System.Threading.Tasks.Task<ItemsResponse> CheckoutRelatedItemsPostAsync (Cart cart, string expand = null)
        {
             ApiResponse<ItemsResponse> localVarResponse = await CheckoutRelatedItemsPostAsyncWithHttpInfo(cart, expand);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Related items Retrieve all the related items for the cart contents.  Expansion is limited to content, content.assignments, content.attributes, content.multimedia, content.multimedia.thumbnails, options, pricing, and pricing.tiers. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cart">Cart</param>
        /// <param name="expand">The object expansion to perform on the result.  See item resource documentation for examples (optional)</param>
        /// <returns>Task of ApiResponse (ItemsResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ItemsResponse>> CheckoutRelatedItemsPostAsyncWithHttpInfo (Cart cart, string expand = null)
        {
            // verify the required parameter 'cart' is set
            if (cart == null)
                throw new ApiException(400, "Missing required parameter 'cart' when calling CheckoutApi->CheckoutRelatedItemsPost");

            var localVarPath = "/checkout/related_items";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (expand != null) localVarQueryParams.Add("_expand", Configuration.ApiClient.ParameterToString(expand)); // query parameter
            if (cart != null && cart.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(cart); // http body (model) parameter
            }
            else
            {
                localVarPostBody = cart; // byte array
            }

            // authentication (ultraCartBrowserApiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key")))
            {
                localVarHeaderParams["x-ultracart-browser-key"] = Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key");
            }
            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CheckoutRelatedItemsPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ItemsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ItemsResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ItemsResponse)));
            
        }

        /// <summary>
        /// Get cart (by return code) Get a cart specified by the return code parameter. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="returnCode">Return code to lookup cart ID by</param>
        /// <param name="expand">The object expansion to perform on the result.  See documentation for examples (optional)</param>
        /// <returns>CartResponse</returns>
        public CartResponse CheckoutReturnReturnCodeGet (string returnCode, string expand = null)
        {
             ApiResponse<CartResponse> localVarResponse = CheckoutReturnReturnCodeGetWithHttpInfo(returnCode, expand);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get cart (by return code) Get a cart specified by the return code parameter. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="returnCode">Return code to lookup cart ID by</param>
        /// <param name="expand">The object expansion to perform on the result.  See documentation for examples (optional)</param>
        /// <returns>ApiResponse of CartResponse</returns>
        public ApiResponse< CartResponse > CheckoutReturnReturnCodeGetWithHttpInfo (string returnCode, string expand = null)
        {
            // verify the required parameter 'returnCode' is set
            if (returnCode == null)
                throw new ApiException(400, "Missing required parameter 'returnCode' when calling CheckoutApi->CheckoutReturnReturnCodeGet");

            var localVarPath = "/checkout/return/{return_code}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (returnCode != null) localVarPathParams.Add("return_code", Configuration.ApiClient.ParameterToString(returnCode)); // path parameter
            if (expand != null) localVarQueryParams.Add("_expand", Configuration.ApiClient.ParameterToString(expand)); // query parameter

            // authentication (ultraCartBrowserApiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key")))
            {
                localVarHeaderParams["x-ultracart-browser-key"] = Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key");
            }

            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CheckoutReturnReturnCodeGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CartResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CartResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CartResponse)));
            
        }

        /// <summary>
        /// Get cart (by return code) Get a cart specified by the return code parameter. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="returnCode">Return code to lookup cart ID by</param>
        /// <param name="expand">The object expansion to perform on the result.  See documentation for examples (optional)</param>
        /// <returns>Task of CartResponse</returns>
        public async System.Threading.Tasks.Task<CartResponse> CheckoutReturnReturnCodeGetAsync (string returnCode, string expand = null)
        {
             ApiResponse<CartResponse> localVarResponse = await CheckoutReturnReturnCodeGetAsyncWithHttpInfo(returnCode, expand);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get cart (by return code) Get a cart specified by the return code parameter. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="returnCode">Return code to lookup cart ID by</param>
        /// <param name="expand">The object expansion to perform on the result.  See documentation for examples (optional)</param>
        /// <returns>Task of ApiResponse (CartResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CartResponse>> CheckoutReturnReturnCodeGetAsyncWithHttpInfo (string returnCode, string expand = null)
        {
            // verify the required parameter 'returnCode' is set
            if (returnCode == null)
                throw new ApiException(400, "Missing required parameter 'returnCode' when calling CheckoutApi->CheckoutReturnReturnCodeGet");

            var localVarPath = "/checkout/return/{return_code}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (returnCode != null) localVarPathParams.Add("return_code", Configuration.ApiClient.ParameterToString(returnCode)); // path parameter
            if (expand != null) localVarQueryParams.Add("_expand", Configuration.ApiClient.ParameterToString(expand)); // query parameter

            // authentication (ultraCartBrowserApiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key")))
            {
                localVarHeaderParams["x-ultracart-browser-key"] = Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key");
            }
            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CheckoutReturnReturnCodeGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CartResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CartResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CartResponse)));
            
        }

    }
}
