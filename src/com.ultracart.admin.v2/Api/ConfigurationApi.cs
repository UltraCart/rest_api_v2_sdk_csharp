/* 
 * UltraCart Rest API V2
 *
 * UltraCart REST API Version 2
 *
 * OpenAPI spec version: 2.0.0
 * Contact: support@ultracart.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using com.ultracart.admin.v2.Client;
using com.ultracart.admin.v2.Model;

namespace com.ultracart.admin.v2.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IConfigurationApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Delay auto order processing for a day for this rotating transaction gateway
        /// </summary>
        /// <remarks>
        /// Delay auto order processing for a day for this rotating transaction gateway 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rtgOid">The rtg_oid to delay.</param>
        /// <returns>DelayAutoOrdersResponse</returns>
        DelayAutoOrdersResponse DelayAutoOrders (int? rtgOid);

        /// <summary>
        /// Delay auto order processing for a day for this rotating transaction gateway
        /// </summary>
        /// <remarks>
        /// Delay auto order processing for a day for this rotating transaction gateway 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rtgOid">The rtg_oid to delay.</param>
        /// <returns>ApiResponse of DelayAutoOrdersResponse</returns>
        ApiResponse<DelayAutoOrdersResponse> DelayAutoOrdersWithHttpInfo (int? rtgOid);
        /// <summary>
        /// Delete a rotating transaction gateway
        /// </summary>
        /// <remarks>
        /// Delete a rotating transaction gateway 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rtgOid">The rtg_oid to delete.</param>
        /// <returns>BaseResponse</returns>
        BaseResponse DeleteRotatingTransactionGateway (int? rtgOid);

        /// <summary>
        /// Delete a rotating transaction gateway
        /// </summary>
        /// <remarks>
        /// Delete a rotating transaction gateway 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rtgOid">The rtg_oid to delete.</param>
        /// <returns>ApiResponse of BaseResponse</returns>
        ApiResponse<BaseResponse> DeleteRotatingTransactionGatewayWithHttpInfo (int? rtgOid);
        /// <summary>
        /// Retrieve payments configuration
        /// </summary>
        /// <remarks>
        /// Retrieves payments configuration for this account. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>PaymentsConfiguration</returns>
        PaymentsConfiguration GetPaymentsConfiguration ();

        /// <summary>
        /// Retrieve payments configuration
        /// </summary>
        /// <remarks>
        /// Retrieves payments configuration for this account. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of PaymentsConfiguration</returns>
        ApiResponse<PaymentsConfiguration> GetPaymentsConfigurationWithHttpInfo ();
        /// <summary>
        /// Retrieve a rotating transaction gateway
        /// </summary>
        /// <remarks>
        /// Retrieve a rotating transaction gateway 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rtgOid">The rtg_oid for the desired record.</param>
        /// <returns>RotatingTransactionGateway</returns>
        RotatingTransactionGateway GetPaymentsRotatingGateway (int? rtgOid);

        /// <summary>
        /// Retrieve a rotating transaction gateway
        /// </summary>
        /// <remarks>
        /// Retrieve a rotating transaction gateway 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rtgOid">The rtg_oid for the desired record.</param>
        /// <returns>ApiResponse of RotatingTransactionGateway</returns>
        ApiResponse<RotatingTransactionGateway> GetPaymentsRotatingGatewayWithHttpInfo (int? rtgOid);
        /// <summary>
        /// Retrieve a rotating transaction gateway by code
        /// </summary>
        /// <remarks>
        /// Retrieve a rotating transaction gateway by code 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">The code for the desired rotating transaction gateway.</param>
        /// <returns>RotatingTransactionGateway</returns>
        RotatingTransactionGateway GetPaymentsRotatingGatewayByCode (string code);

        /// <summary>
        /// Retrieve a rotating transaction gateway by code
        /// </summary>
        /// <remarks>
        /// Retrieve a rotating transaction gateway by code 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">The code for the desired rotating transaction gateway.</param>
        /// <returns>ApiResponse of RotatingTransactionGateway</returns>
        ApiResponse<RotatingTransactionGateway> GetPaymentsRotatingGatewayByCodeWithHttpInfo (string code);
        /// <summary>
        /// Retrieve a list of rotating transaction gateways
        /// </summary>
        /// <remarks>
        /// Retrieve a list of rotating transaction gateways 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>RotatingTransactionGateway</returns>
        RotatingTransactionGateway GetPaymentsRotatingTransactionGateways ();

        /// <summary>
        /// Retrieve a list of rotating transaction gateways
        /// </summary>
        /// <remarks>
        /// Retrieve a list of rotating transaction gateways 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of RotatingTransactionGateway</returns>
        ApiResponse<RotatingTransactionGateway> GetPaymentsRotatingTransactionGatewaysWithHttpInfo ();
        /// <summary>
        /// Retrieve a summary of rotating transaction gateways
        /// </summary>
        /// <remarks>
        /// Retrieve a summary of rotating transaction gateways 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>RotatingTransactionGateway</returns>
        RotatingTransactionGateway GetPaymentsRtgSummaries ();

        /// <summary>
        /// Retrieve a summary of rotating transaction gateways
        /// </summary>
        /// <remarks>
        /// Retrieve a summary of rotating transaction gateways 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of RotatingTransactionGateway</returns>
        ApiResponse<RotatingTransactionGateway> GetPaymentsRtgSummariesWithHttpInfo ();
        /// <summary>
        /// Retrieve a list of transaction gateways
        /// </summary>
        /// <remarks>
        /// Retrieve a list of transaction gateways 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>TransactionGatewaysResponse</returns>
        TransactionGatewaysResponse GetPaymentsTransactionGateways ();

        /// <summary>
        /// Retrieve a list of transaction gateways
        /// </summary>
        /// <remarks>
        /// Retrieve a list of transaction gateways 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of TransactionGatewaysResponse</returns>
        ApiResponse<TransactionGatewaysResponse> GetPaymentsTransactionGatewaysWithHttpInfo ();
        /// <summary>
        /// Insert a rotating transaction gateway
        /// </summary>
        /// <remarks>
        /// Insert a rotating transaction gateway 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rotatingTransactionGateway">Rotating transaction gateway</param>
        /// <returns>RotatingTransactionGateway</returns>
        RotatingTransactionGateway InsertRotatingTransactionGateway (RotatingTransactionGateway rotatingTransactionGateway);

        /// <summary>
        /// Insert a rotating transaction gateway
        /// </summary>
        /// <remarks>
        /// Insert a rotating transaction gateway 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rotatingTransactionGateway">Rotating transaction gateway</param>
        /// <returns>ApiResponse of RotatingTransactionGateway</returns>
        ApiResponse<RotatingTransactionGateway> InsertRotatingTransactionGatewayWithHttpInfo (RotatingTransactionGateway rotatingTransactionGateway);
        /// <summary>
        /// Migrate a normal transaction gateway to a rotating transaction gateway
        /// </summary>
        /// <remarks>
        /// Migrate a normal transaction gateway to a rotating transaction gateway 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">The short code for the new rotating transaction gateway</param>
        /// <returns>RotatingTransactionGateway</returns>
        RotatingTransactionGateway MigrateToRotatingTransactionGateway (string code);

        /// <summary>
        /// Migrate a normal transaction gateway to a rotating transaction gateway
        /// </summary>
        /// <remarks>
        /// Migrate a normal transaction gateway to a rotating transaction gateway 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">The short code for the new rotating transaction gateway</param>
        /// <returns>ApiResponse of RotatingTransactionGateway</returns>
        ApiResponse<RotatingTransactionGateway> MigrateToRotatingTransactionGatewayWithHttpInfo (string code);
        /// <summary>
        /// Begin the processing of connecting with Stripe
        /// </summary>
        /// <remarks>
        /// Begin the processing of connecting with Stripe. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rtgOid">The rtg_oid to be connected to stripe.</param>
        /// <returns>StripeConnectResponse</returns>
        StripeConnectResponse StripeConnect (int? rtgOid);

        /// <summary>
        /// Begin the processing of connecting with Stripe
        /// </summary>
        /// <remarks>
        /// Begin the processing of connecting with Stripe. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rtgOid">The rtg_oid to be connected to stripe.</param>
        /// <returns>ApiResponse of StripeConnectResponse</returns>
        ApiResponse<StripeConnectResponse> StripeConnectWithHttpInfo (int? rtgOid);
        /// <summary>
        /// Updates payments configuration
        /// </summary>
        /// <remarks>
        /// Updates payments configuration on the UltraCart account. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="paymentsConfiguration">Payments configuration</param>
        /// <returns>PaymentsConfigurationResponse</returns>
        PaymentsConfigurationResponse UpdatePaymentsConfiguration (PaymentsConfiguration paymentsConfiguration);

        /// <summary>
        /// Updates payments configuration
        /// </summary>
        /// <remarks>
        /// Updates payments configuration on the UltraCart account. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="paymentsConfiguration">Payments configuration</param>
        /// <returns>ApiResponse of PaymentsConfigurationResponse</returns>
        ApiResponse<PaymentsConfigurationResponse> UpdatePaymentsConfigurationWithHttpInfo (PaymentsConfiguration paymentsConfiguration);
        /// <summary>
        /// Updates payments transaction gateway
        /// </summary>
        /// <remarks>
        /// Updates payments transaction gateway on the UltraCart account. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateGatewayRequest">Transaction gateways</param>
        /// <returns>TransactionGatewaysResponse</returns>
        TransactionGatewaysResponse UpdatePaymentsTransactionGateway (TransactionGatewaysRequest updateGatewayRequest);

        /// <summary>
        /// Updates payments transaction gateway
        /// </summary>
        /// <remarks>
        /// Updates payments transaction gateway on the UltraCart account. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateGatewayRequest">Transaction gateways</param>
        /// <returns>ApiResponse of TransactionGatewaysResponse</returns>
        ApiResponse<TransactionGatewaysResponse> UpdatePaymentsTransactionGatewayWithHttpInfo (TransactionGatewaysRequest updateGatewayRequest);
        /// <summary>
        /// Update a rotating transaction gateway
        /// </summary>
        /// <remarks>
        /// Update a rotating transaction gateway 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rtgOid">The rtg_oid to update.</param>
        /// <param name="rotatingTransactionGateway">Rotating transaction gateway</param>
        /// <returns>RotatingTransactionGateway</returns>
        RotatingTransactionGateway UpdateRotatingTransactionGateway (int? rtgOid, RotatingTransactionGateway rotatingTransactionGateway);

        /// <summary>
        /// Update a rotating transaction gateway
        /// </summary>
        /// <remarks>
        /// Update a rotating transaction gateway 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rtgOid">The rtg_oid to update.</param>
        /// <param name="rotatingTransactionGateway">Rotating transaction gateway</param>
        /// <returns>ApiResponse of RotatingTransactionGateway</returns>
        ApiResponse<RotatingTransactionGateway> UpdateRotatingTransactionGatewayWithHttpInfo (int? rtgOid, RotatingTransactionGateway rotatingTransactionGateway);
        /// <summary>
        /// Enroll with WePay
        /// </summary>
        /// <remarks>
        /// Enroll with WePay on the UltraCart account. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="wepayEnroll">Wepay enrollment information</param>
        /// <returns>PaymentsConfigurationResponse</returns>
        PaymentsConfigurationResponse WepayEnroll (PaymentsWepayEnroll wepayEnroll);

        /// <summary>
        /// Enroll with WePay
        /// </summary>
        /// <remarks>
        /// Enroll with WePay on the UltraCart account. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="wepayEnroll">Wepay enrollment information</param>
        /// <returns>ApiResponse of PaymentsConfigurationResponse</returns>
        ApiResponse<PaymentsConfigurationResponse> WepayEnrollWithHttpInfo (PaymentsWepayEnroll wepayEnroll);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Delay auto order processing for a day for this rotating transaction gateway
        /// </summary>
        /// <remarks>
        /// Delay auto order processing for a day for this rotating transaction gateway 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rtgOid">The rtg_oid to delay.</param>
        /// <returns>Task of DelayAutoOrdersResponse</returns>
        System.Threading.Tasks.Task<DelayAutoOrdersResponse> DelayAutoOrdersAsync (int? rtgOid);

        /// <summary>
        /// Delay auto order processing for a day for this rotating transaction gateway
        /// </summary>
        /// <remarks>
        /// Delay auto order processing for a day for this rotating transaction gateway 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rtgOid">The rtg_oid to delay.</param>
        /// <returns>Task of ApiResponse (DelayAutoOrdersResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<DelayAutoOrdersResponse>> DelayAutoOrdersAsyncWithHttpInfo (int? rtgOid);
        /// <summary>
        /// Delete a rotating transaction gateway
        /// </summary>
        /// <remarks>
        /// Delete a rotating transaction gateway 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rtgOid">The rtg_oid to delete.</param>
        /// <returns>Task of BaseResponse</returns>
        System.Threading.Tasks.Task<BaseResponse> DeleteRotatingTransactionGatewayAsync (int? rtgOid);

        /// <summary>
        /// Delete a rotating transaction gateway
        /// </summary>
        /// <remarks>
        /// Delete a rotating transaction gateway 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rtgOid">The rtg_oid to delete.</param>
        /// <returns>Task of ApiResponse (BaseResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<BaseResponse>> DeleteRotatingTransactionGatewayAsyncWithHttpInfo (int? rtgOid);
        /// <summary>
        /// Retrieve payments configuration
        /// </summary>
        /// <remarks>
        /// Retrieves payments configuration for this account. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of PaymentsConfiguration</returns>
        System.Threading.Tasks.Task<PaymentsConfiguration> GetPaymentsConfigurationAsync ();

        /// <summary>
        /// Retrieve payments configuration
        /// </summary>
        /// <remarks>
        /// Retrieves payments configuration for this account. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (PaymentsConfiguration)</returns>
        System.Threading.Tasks.Task<ApiResponse<PaymentsConfiguration>> GetPaymentsConfigurationAsyncWithHttpInfo ();
        /// <summary>
        /// Retrieve a rotating transaction gateway
        /// </summary>
        /// <remarks>
        /// Retrieve a rotating transaction gateway 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rtgOid">The rtg_oid for the desired record.</param>
        /// <returns>Task of RotatingTransactionGateway</returns>
        System.Threading.Tasks.Task<RotatingTransactionGateway> GetPaymentsRotatingGatewayAsync (int? rtgOid);

        /// <summary>
        /// Retrieve a rotating transaction gateway
        /// </summary>
        /// <remarks>
        /// Retrieve a rotating transaction gateway 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rtgOid">The rtg_oid for the desired record.</param>
        /// <returns>Task of ApiResponse (RotatingTransactionGateway)</returns>
        System.Threading.Tasks.Task<ApiResponse<RotatingTransactionGateway>> GetPaymentsRotatingGatewayAsyncWithHttpInfo (int? rtgOid);
        /// <summary>
        /// Retrieve a rotating transaction gateway by code
        /// </summary>
        /// <remarks>
        /// Retrieve a rotating transaction gateway by code 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">The code for the desired rotating transaction gateway.</param>
        /// <returns>Task of RotatingTransactionGateway</returns>
        System.Threading.Tasks.Task<RotatingTransactionGateway> GetPaymentsRotatingGatewayByCodeAsync (string code);

        /// <summary>
        /// Retrieve a rotating transaction gateway by code
        /// </summary>
        /// <remarks>
        /// Retrieve a rotating transaction gateway by code 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">The code for the desired rotating transaction gateway.</param>
        /// <returns>Task of ApiResponse (RotatingTransactionGateway)</returns>
        System.Threading.Tasks.Task<ApiResponse<RotatingTransactionGateway>> GetPaymentsRotatingGatewayByCodeAsyncWithHttpInfo (string code);
        /// <summary>
        /// Retrieve a list of rotating transaction gateways
        /// </summary>
        /// <remarks>
        /// Retrieve a list of rotating transaction gateways 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of RotatingTransactionGateway</returns>
        System.Threading.Tasks.Task<RotatingTransactionGateway> GetPaymentsRotatingTransactionGatewaysAsync ();

        /// <summary>
        /// Retrieve a list of rotating transaction gateways
        /// </summary>
        /// <remarks>
        /// Retrieve a list of rotating transaction gateways 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (RotatingTransactionGateway)</returns>
        System.Threading.Tasks.Task<ApiResponse<RotatingTransactionGateway>> GetPaymentsRotatingTransactionGatewaysAsyncWithHttpInfo ();
        /// <summary>
        /// Retrieve a summary of rotating transaction gateways
        /// </summary>
        /// <remarks>
        /// Retrieve a summary of rotating transaction gateways 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of RotatingTransactionGateway</returns>
        System.Threading.Tasks.Task<RotatingTransactionGateway> GetPaymentsRtgSummariesAsync ();

        /// <summary>
        /// Retrieve a summary of rotating transaction gateways
        /// </summary>
        /// <remarks>
        /// Retrieve a summary of rotating transaction gateways 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (RotatingTransactionGateway)</returns>
        System.Threading.Tasks.Task<ApiResponse<RotatingTransactionGateway>> GetPaymentsRtgSummariesAsyncWithHttpInfo ();
        /// <summary>
        /// Retrieve a list of transaction gateways
        /// </summary>
        /// <remarks>
        /// Retrieve a list of transaction gateways 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of TransactionGatewaysResponse</returns>
        System.Threading.Tasks.Task<TransactionGatewaysResponse> GetPaymentsTransactionGatewaysAsync ();

        /// <summary>
        /// Retrieve a list of transaction gateways
        /// </summary>
        /// <remarks>
        /// Retrieve a list of transaction gateways 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (TransactionGatewaysResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TransactionGatewaysResponse>> GetPaymentsTransactionGatewaysAsyncWithHttpInfo ();
        /// <summary>
        /// Insert a rotating transaction gateway
        /// </summary>
        /// <remarks>
        /// Insert a rotating transaction gateway 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rotatingTransactionGateway">Rotating transaction gateway</param>
        /// <returns>Task of RotatingTransactionGateway</returns>
        System.Threading.Tasks.Task<RotatingTransactionGateway> InsertRotatingTransactionGatewayAsync (RotatingTransactionGateway rotatingTransactionGateway);

        /// <summary>
        /// Insert a rotating transaction gateway
        /// </summary>
        /// <remarks>
        /// Insert a rotating transaction gateway 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rotatingTransactionGateway">Rotating transaction gateway</param>
        /// <returns>Task of ApiResponse (RotatingTransactionGateway)</returns>
        System.Threading.Tasks.Task<ApiResponse<RotatingTransactionGateway>> InsertRotatingTransactionGatewayAsyncWithHttpInfo (RotatingTransactionGateway rotatingTransactionGateway);
        /// <summary>
        /// Migrate a normal transaction gateway to a rotating transaction gateway
        /// </summary>
        /// <remarks>
        /// Migrate a normal transaction gateway to a rotating transaction gateway 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">The short code for the new rotating transaction gateway</param>
        /// <returns>Task of RotatingTransactionGateway</returns>
        System.Threading.Tasks.Task<RotatingTransactionGateway> MigrateToRotatingTransactionGatewayAsync (string code);

        /// <summary>
        /// Migrate a normal transaction gateway to a rotating transaction gateway
        /// </summary>
        /// <remarks>
        /// Migrate a normal transaction gateway to a rotating transaction gateway 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">The short code for the new rotating transaction gateway</param>
        /// <returns>Task of ApiResponse (RotatingTransactionGateway)</returns>
        System.Threading.Tasks.Task<ApiResponse<RotatingTransactionGateway>> MigrateToRotatingTransactionGatewayAsyncWithHttpInfo (string code);
        /// <summary>
        /// Begin the processing of connecting with Stripe
        /// </summary>
        /// <remarks>
        /// Begin the processing of connecting with Stripe. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rtgOid">The rtg_oid to be connected to stripe.</param>
        /// <returns>Task of StripeConnectResponse</returns>
        System.Threading.Tasks.Task<StripeConnectResponse> StripeConnectAsync (int? rtgOid);

        /// <summary>
        /// Begin the processing of connecting with Stripe
        /// </summary>
        /// <remarks>
        /// Begin the processing of connecting with Stripe. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rtgOid">The rtg_oid to be connected to stripe.</param>
        /// <returns>Task of ApiResponse (StripeConnectResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<StripeConnectResponse>> StripeConnectAsyncWithHttpInfo (int? rtgOid);
        /// <summary>
        /// Updates payments configuration
        /// </summary>
        /// <remarks>
        /// Updates payments configuration on the UltraCart account. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="paymentsConfiguration">Payments configuration</param>
        /// <returns>Task of PaymentsConfigurationResponse</returns>
        System.Threading.Tasks.Task<PaymentsConfigurationResponse> UpdatePaymentsConfigurationAsync (PaymentsConfiguration paymentsConfiguration);

        /// <summary>
        /// Updates payments configuration
        /// </summary>
        /// <remarks>
        /// Updates payments configuration on the UltraCart account. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="paymentsConfiguration">Payments configuration</param>
        /// <returns>Task of ApiResponse (PaymentsConfigurationResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<PaymentsConfigurationResponse>> UpdatePaymentsConfigurationAsyncWithHttpInfo (PaymentsConfiguration paymentsConfiguration);
        /// <summary>
        /// Updates payments transaction gateway
        /// </summary>
        /// <remarks>
        /// Updates payments transaction gateway on the UltraCart account. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateGatewayRequest">Transaction gateways</param>
        /// <returns>Task of TransactionGatewaysResponse</returns>
        System.Threading.Tasks.Task<TransactionGatewaysResponse> UpdatePaymentsTransactionGatewayAsync (TransactionGatewaysRequest updateGatewayRequest);

        /// <summary>
        /// Updates payments transaction gateway
        /// </summary>
        /// <remarks>
        /// Updates payments transaction gateway on the UltraCart account. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateGatewayRequest">Transaction gateways</param>
        /// <returns>Task of ApiResponse (TransactionGatewaysResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TransactionGatewaysResponse>> UpdatePaymentsTransactionGatewayAsyncWithHttpInfo (TransactionGatewaysRequest updateGatewayRequest);
        /// <summary>
        /// Update a rotating transaction gateway
        /// </summary>
        /// <remarks>
        /// Update a rotating transaction gateway 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rtgOid">The rtg_oid to update.</param>
        /// <param name="rotatingTransactionGateway">Rotating transaction gateway</param>
        /// <returns>Task of RotatingTransactionGateway</returns>
        System.Threading.Tasks.Task<RotatingTransactionGateway> UpdateRotatingTransactionGatewayAsync (int? rtgOid, RotatingTransactionGateway rotatingTransactionGateway);

        /// <summary>
        /// Update a rotating transaction gateway
        /// </summary>
        /// <remarks>
        /// Update a rotating transaction gateway 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rtgOid">The rtg_oid to update.</param>
        /// <param name="rotatingTransactionGateway">Rotating transaction gateway</param>
        /// <returns>Task of ApiResponse (RotatingTransactionGateway)</returns>
        System.Threading.Tasks.Task<ApiResponse<RotatingTransactionGateway>> UpdateRotatingTransactionGatewayAsyncWithHttpInfo (int? rtgOid, RotatingTransactionGateway rotatingTransactionGateway);
        /// <summary>
        /// Enroll with WePay
        /// </summary>
        /// <remarks>
        /// Enroll with WePay on the UltraCart account. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="wepayEnroll">Wepay enrollment information</param>
        /// <returns>Task of PaymentsConfigurationResponse</returns>
        System.Threading.Tasks.Task<PaymentsConfigurationResponse> WepayEnrollAsync (PaymentsWepayEnroll wepayEnroll);

        /// <summary>
        /// Enroll with WePay
        /// </summary>
        /// <remarks>
        /// Enroll with WePay on the UltraCart account. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="wepayEnroll">Wepay enrollment information</param>
        /// <returns>Task of ApiResponse (PaymentsConfigurationResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<PaymentsConfigurationResponse>> WepayEnrollAsyncWithHttpInfo (PaymentsWepayEnroll wepayEnroll);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ConfigurationApi : IConfigurationApi
    {
        private com.ultracart.admin.v2.Client.ExceptionFactory _exceptionFactory = (name, response) => null;
    
        /// <summary>
        /// Initializes a new instance of the <see cref="ConfigurationApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ConfigurationApi(com.ultracart.admin.v2.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = com.ultracart.admin.v2.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = com.ultracart.admin.v2.Client.Configuration.DefaultExceptionFactory;
        }


        /// <summary>
        /// Initializes a new instance of the <see cref="ConfigurationApi"/> class
        /// using a simple key string and optional version, which you will
        /// almost always want to use the default
        /// </summary>
        /// <param name="SimpleKey">A simple key.  See https://ultracart.atlassian.net/wiki/spaces/ucdoc/pages/38688545/API+Simple+Key</param>
        /// <returns></returns>
        public ConfigurationApi(string SimpleKey)
        {
            Configuration configuration = new Configuration();
            configuration.ApiKey.Add("x-ultracart-simple-key", SimpleKey);
            configuration.DefaultHeader.Add("X-UltraCart-Api-Version", "2017-03-01");
            this.Configuration = configuration;
            ExceptionFactory = com.ultracart.admin.v2.Client.Configuration.DefaultExceptionFactory;
        }


        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public com.ultracart.admin.v2.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public com.ultracart.admin.v2.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Delay auto order processing for a day for this rotating transaction gateway Delay auto order processing for a day for this rotating transaction gateway 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rtgOid">The rtg_oid to delay.</param>
        /// <returns>DelayAutoOrdersResponse</returns>
        public DelayAutoOrdersResponse DelayAutoOrders (int? rtgOid)
        {
             ApiResponse<DelayAutoOrdersResponse> localVarResponse = DelayAutoOrdersWithHttpInfo(rtgOid);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Delay auto order processing for a day for this rotating transaction gateway Delay auto order processing for a day for this rotating transaction gateway 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rtgOid">The rtg_oid to delay.</param>
        /// <returns>ApiResponse of DelayAutoOrdersResponse</returns>
        public ApiResponse< DelayAutoOrdersResponse > DelayAutoOrdersWithHttpInfo (int? rtgOid)
        {
            // verify the required parameter 'rtgOid' is set
            if (rtgOid == null)
                throw new ApiException(400, "Missing required parameter 'rtgOid' when calling ConfigurationApi->DelayAutoOrders");

            var localVarPath = "/configuration/checkout/payments/rtg/{rtg_oid}/delayAutoOrders";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json; charset=UTF-8"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (rtgOid != null) localVarPathParams.Add("rtg_oid", this.Configuration.ApiClient.ParameterToString(rtgOid)); // path parameter

            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DelayAutoOrders", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DelayAutoOrdersResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DelayAutoOrdersResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DelayAutoOrdersResponse)));
        }

        /// <summary>
        /// Delay auto order processing for a day for this rotating transaction gateway Delay auto order processing for a day for this rotating transaction gateway 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rtgOid">The rtg_oid to delay.</param>
        /// <returns>Task of DelayAutoOrdersResponse</returns>
        public async System.Threading.Tasks.Task<DelayAutoOrdersResponse> DelayAutoOrdersAsync (int? rtgOid)
        {
             ApiResponse<DelayAutoOrdersResponse> localVarResponse = await DelayAutoOrdersAsyncWithHttpInfo(rtgOid);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Delay auto order processing for a day for this rotating transaction gateway Delay auto order processing for a day for this rotating transaction gateway 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rtgOid">The rtg_oid to delay.</param>
        /// <returns>Task of ApiResponse (DelayAutoOrdersResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DelayAutoOrdersResponse>> DelayAutoOrdersAsyncWithHttpInfo (int? rtgOid)
        {
            // verify the required parameter 'rtgOid' is set
            if (rtgOid == null)
                throw new ApiException(400, "Missing required parameter 'rtgOid' when calling ConfigurationApi->DelayAutoOrders");

            var localVarPath = "/configuration/checkout/payments/rtg/{rtg_oid}/delayAutoOrders";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json; charset=UTF-8"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (rtgOid != null) localVarPathParams.Add("rtg_oid", this.Configuration.ApiClient.ParameterToString(rtgOid)); // path parameter

            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DelayAutoOrders", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DelayAutoOrdersResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DelayAutoOrdersResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DelayAutoOrdersResponse)));
        }

        /// <summary>
        /// Delete a rotating transaction gateway Delete a rotating transaction gateway 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rtgOid">The rtg_oid to delete.</param>
        /// <returns>BaseResponse</returns>
        public BaseResponse DeleteRotatingTransactionGateway (int? rtgOid)
        {
             ApiResponse<BaseResponse> localVarResponse = DeleteRotatingTransactionGatewayWithHttpInfo(rtgOid);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Delete a rotating transaction gateway Delete a rotating transaction gateway 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rtgOid">The rtg_oid to delete.</param>
        /// <returns>ApiResponse of BaseResponse</returns>
        public ApiResponse< BaseResponse > DeleteRotatingTransactionGatewayWithHttpInfo (int? rtgOid)
        {
            // verify the required parameter 'rtgOid' is set
            if (rtgOid == null)
                throw new ApiException(400, "Missing required parameter 'rtgOid' when calling ConfigurationApi->DeleteRotatingTransactionGateway");

            var localVarPath = "/configuration/checkout/payments/rtg/{rtg_oid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json; charset=UTF-8"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (rtgOid != null) localVarPathParams.Add("rtg_oid", this.Configuration.ApiClient.ParameterToString(rtgOid)); // path parameter

            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteRotatingTransactionGateway", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BaseResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (BaseResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BaseResponse)));
        }

        /// <summary>
        /// Delete a rotating transaction gateway Delete a rotating transaction gateway 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rtgOid">The rtg_oid to delete.</param>
        /// <returns>Task of BaseResponse</returns>
        public async System.Threading.Tasks.Task<BaseResponse> DeleteRotatingTransactionGatewayAsync (int? rtgOid)
        {
             ApiResponse<BaseResponse> localVarResponse = await DeleteRotatingTransactionGatewayAsyncWithHttpInfo(rtgOid);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Delete a rotating transaction gateway Delete a rotating transaction gateway 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rtgOid">The rtg_oid to delete.</param>
        /// <returns>Task of ApiResponse (BaseResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<BaseResponse>> DeleteRotatingTransactionGatewayAsyncWithHttpInfo (int? rtgOid)
        {
            // verify the required parameter 'rtgOid' is set
            if (rtgOid == null)
                throw new ApiException(400, "Missing required parameter 'rtgOid' when calling ConfigurationApi->DeleteRotatingTransactionGateway");

            var localVarPath = "/configuration/checkout/payments/rtg/{rtg_oid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json; charset=UTF-8"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (rtgOid != null) localVarPathParams.Add("rtg_oid", this.Configuration.ApiClient.ParameterToString(rtgOid)); // path parameter

            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteRotatingTransactionGateway", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BaseResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (BaseResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BaseResponse)));
        }

        /// <summary>
        /// Retrieve payments configuration Retrieves payments configuration for this account. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>PaymentsConfiguration</returns>
        public PaymentsConfiguration GetPaymentsConfiguration ()
        {
             ApiResponse<PaymentsConfiguration> localVarResponse = GetPaymentsConfigurationWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve payments configuration Retrieves payments configuration for this account. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of PaymentsConfiguration</returns>
        public ApiResponse< PaymentsConfiguration > GetPaymentsConfigurationWithHttpInfo ()
        {

            var localVarPath = "/configuration/checkout/payments";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPaymentsConfiguration", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PaymentsConfiguration>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PaymentsConfiguration) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PaymentsConfiguration)));
        }

        /// <summary>
        /// Retrieve payments configuration Retrieves payments configuration for this account. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of PaymentsConfiguration</returns>
        public async System.Threading.Tasks.Task<PaymentsConfiguration> GetPaymentsConfigurationAsync ()
        {
             ApiResponse<PaymentsConfiguration> localVarResponse = await GetPaymentsConfigurationAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieve payments configuration Retrieves payments configuration for this account. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (PaymentsConfiguration)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PaymentsConfiguration>> GetPaymentsConfigurationAsyncWithHttpInfo ()
        {

            var localVarPath = "/configuration/checkout/payments";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPaymentsConfiguration", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PaymentsConfiguration>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PaymentsConfiguration) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PaymentsConfiguration)));
        }

        /// <summary>
        /// Retrieve a rotating transaction gateway Retrieve a rotating transaction gateway 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rtgOid">The rtg_oid for the desired record.</param>
        /// <returns>RotatingTransactionGateway</returns>
        public RotatingTransactionGateway GetPaymentsRotatingGateway (int? rtgOid)
        {
             ApiResponse<RotatingTransactionGateway> localVarResponse = GetPaymentsRotatingGatewayWithHttpInfo(rtgOid);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve a rotating transaction gateway Retrieve a rotating transaction gateway 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rtgOid">The rtg_oid for the desired record.</param>
        /// <returns>ApiResponse of RotatingTransactionGateway</returns>
        public ApiResponse< RotatingTransactionGateway > GetPaymentsRotatingGatewayWithHttpInfo (int? rtgOid)
        {
            // verify the required parameter 'rtgOid' is set
            if (rtgOid == null)
                throw new ApiException(400, "Missing required parameter 'rtgOid' when calling ConfigurationApi->GetPaymentsRotatingGateway");

            var localVarPath = "/configuration/checkout/payments/rtg/{rtg_oid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (rtgOid != null) localVarPathParams.Add("rtg_oid", this.Configuration.ApiClient.ParameterToString(rtgOid)); // path parameter

            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPaymentsRotatingGateway", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RotatingTransactionGateway>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RotatingTransactionGateway) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RotatingTransactionGateway)));
        }

        /// <summary>
        /// Retrieve a rotating transaction gateway Retrieve a rotating transaction gateway 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rtgOid">The rtg_oid for the desired record.</param>
        /// <returns>Task of RotatingTransactionGateway</returns>
        public async System.Threading.Tasks.Task<RotatingTransactionGateway> GetPaymentsRotatingGatewayAsync (int? rtgOid)
        {
             ApiResponse<RotatingTransactionGateway> localVarResponse = await GetPaymentsRotatingGatewayAsyncWithHttpInfo(rtgOid);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieve a rotating transaction gateway Retrieve a rotating transaction gateway 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rtgOid">The rtg_oid for the desired record.</param>
        /// <returns>Task of ApiResponse (RotatingTransactionGateway)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<RotatingTransactionGateway>> GetPaymentsRotatingGatewayAsyncWithHttpInfo (int? rtgOid)
        {
            // verify the required parameter 'rtgOid' is set
            if (rtgOid == null)
                throw new ApiException(400, "Missing required parameter 'rtgOid' when calling ConfigurationApi->GetPaymentsRotatingGateway");

            var localVarPath = "/configuration/checkout/payments/rtg/{rtg_oid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (rtgOid != null) localVarPathParams.Add("rtg_oid", this.Configuration.ApiClient.ParameterToString(rtgOid)); // path parameter

            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPaymentsRotatingGateway", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RotatingTransactionGateway>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RotatingTransactionGateway) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RotatingTransactionGateway)));
        }

        /// <summary>
        /// Retrieve a rotating transaction gateway by code Retrieve a rotating transaction gateway by code 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">The code for the desired rotating transaction gateway.</param>
        /// <returns>RotatingTransactionGateway</returns>
        public RotatingTransactionGateway GetPaymentsRotatingGatewayByCode (string code)
        {
             ApiResponse<RotatingTransactionGateway> localVarResponse = GetPaymentsRotatingGatewayByCodeWithHttpInfo(code);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve a rotating transaction gateway by code Retrieve a rotating transaction gateway by code 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">The code for the desired rotating transaction gateway.</param>
        /// <returns>ApiResponse of RotatingTransactionGateway</returns>
        public ApiResponse< RotatingTransactionGateway > GetPaymentsRotatingGatewayByCodeWithHttpInfo (string code)
        {
            // verify the required parameter 'code' is set
            if (code == null)
                throw new ApiException(400, "Missing required parameter 'code' when calling ConfigurationApi->GetPaymentsRotatingGatewayByCode");

            var localVarPath = "/configuration/checkout/payments/rtg/byCode/{code}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (code != null) localVarPathParams.Add("code", this.Configuration.ApiClient.ParameterToString(code)); // path parameter

            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPaymentsRotatingGatewayByCode", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RotatingTransactionGateway>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RotatingTransactionGateway) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RotatingTransactionGateway)));
        }

        /// <summary>
        /// Retrieve a rotating transaction gateway by code Retrieve a rotating transaction gateway by code 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">The code for the desired rotating transaction gateway.</param>
        /// <returns>Task of RotatingTransactionGateway</returns>
        public async System.Threading.Tasks.Task<RotatingTransactionGateway> GetPaymentsRotatingGatewayByCodeAsync (string code)
        {
             ApiResponse<RotatingTransactionGateway> localVarResponse = await GetPaymentsRotatingGatewayByCodeAsyncWithHttpInfo(code);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieve a rotating transaction gateway by code Retrieve a rotating transaction gateway by code 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">The code for the desired rotating transaction gateway.</param>
        /// <returns>Task of ApiResponse (RotatingTransactionGateway)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<RotatingTransactionGateway>> GetPaymentsRotatingGatewayByCodeAsyncWithHttpInfo (string code)
        {
            // verify the required parameter 'code' is set
            if (code == null)
                throw new ApiException(400, "Missing required parameter 'code' when calling ConfigurationApi->GetPaymentsRotatingGatewayByCode");

            var localVarPath = "/configuration/checkout/payments/rtg/byCode/{code}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (code != null) localVarPathParams.Add("code", this.Configuration.ApiClient.ParameterToString(code)); // path parameter

            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPaymentsRotatingGatewayByCode", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RotatingTransactionGateway>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RotatingTransactionGateway) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RotatingTransactionGateway)));
        }

        /// <summary>
        /// Retrieve a list of rotating transaction gateways Retrieve a list of rotating transaction gateways 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>RotatingTransactionGateway</returns>
        public RotatingTransactionGateway GetPaymentsRotatingTransactionGateways ()
        {
             ApiResponse<RotatingTransactionGateway> localVarResponse = GetPaymentsRotatingTransactionGatewaysWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve a list of rotating transaction gateways Retrieve a list of rotating transaction gateways 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of RotatingTransactionGateway</returns>
        public ApiResponse< RotatingTransactionGateway > GetPaymentsRotatingTransactionGatewaysWithHttpInfo ()
        {

            var localVarPath = "/configuration/checkout/payments/rtg";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPaymentsRotatingTransactionGateways", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RotatingTransactionGateway>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RotatingTransactionGateway) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RotatingTransactionGateway)));
        }

        /// <summary>
        /// Retrieve a list of rotating transaction gateways Retrieve a list of rotating transaction gateways 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of RotatingTransactionGateway</returns>
        public async System.Threading.Tasks.Task<RotatingTransactionGateway> GetPaymentsRotatingTransactionGatewaysAsync ()
        {
             ApiResponse<RotatingTransactionGateway> localVarResponse = await GetPaymentsRotatingTransactionGatewaysAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieve a list of rotating transaction gateways Retrieve a list of rotating transaction gateways 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (RotatingTransactionGateway)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<RotatingTransactionGateway>> GetPaymentsRotatingTransactionGatewaysAsyncWithHttpInfo ()
        {

            var localVarPath = "/configuration/checkout/payments/rtg";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPaymentsRotatingTransactionGateways", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RotatingTransactionGateway>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RotatingTransactionGateway) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RotatingTransactionGateway)));
        }

        /// <summary>
        /// Retrieve a summary of rotating transaction gateways Retrieve a summary of rotating transaction gateways 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>RotatingTransactionGateway</returns>
        public RotatingTransactionGateway GetPaymentsRtgSummaries ()
        {
             ApiResponse<RotatingTransactionGateway> localVarResponse = GetPaymentsRtgSummariesWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve a summary of rotating transaction gateways Retrieve a summary of rotating transaction gateways 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of RotatingTransactionGateway</returns>
        public ApiResponse< RotatingTransactionGateway > GetPaymentsRtgSummariesWithHttpInfo ()
        {

            var localVarPath = "/configuration/checkout/payments/rtg/summaries";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPaymentsRtgSummaries", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RotatingTransactionGateway>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RotatingTransactionGateway) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RotatingTransactionGateway)));
        }

        /// <summary>
        /// Retrieve a summary of rotating transaction gateways Retrieve a summary of rotating transaction gateways 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of RotatingTransactionGateway</returns>
        public async System.Threading.Tasks.Task<RotatingTransactionGateway> GetPaymentsRtgSummariesAsync ()
        {
             ApiResponse<RotatingTransactionGateway> localVarResponse = await GetPaymentsRtgSummariesAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieve a summary of rotating transaction gateways Retrieve a summary of rotating transaction gateways 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (RotatingTransactionGateway)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<RotatingTransactionGateway>> GetPaymentsRtgSummariesAsyncWithHttpInfo ()
        {

            var localVarPath = "/configuration/checkout/payments/rtg/summaries";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPaymentsRtgSummaries", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RotatingTransactionGateway>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RotatingTransactionGateway) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RotatingTransactionGateway)));
        }

        /// <summary>
        /// Retrieve a list of transaction gateways Retrieve a list of transaction gateways 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>TransactionGatewaysResponse</returns>
        public TransactionGatewaysResponse GetPaymentsTransactionGateways ()
        {
             ApiResponse<TransactionGatewaysResponse> localVarResponse = GetPaymentsTransactionGatewaysWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve a list of transaction gateways Retrieve a list of transaction gateways 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of TransactionGatewaysResponse</returns>
        public ApiResponse< TransactionGatewaysResponse > GetPaymentsTransactionGatewaysWithHttpInfo ()
        {

            var localVarPath = "/configuration/checkout/payments/tg";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPaymentsTransactionGateways", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TransactionGatewaysResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TransactionGatewaysResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TransactionGatewaysResponse)));
        }

        /// <summary>
        /// Retrieve a list of transaction gateways Retrieve a list of transaction gateways 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of TransactionGatewaysResponse</returns>
        public async System.Threading.Tasks.Task<TransactionGatewaysResponse> GetPaymentsTransactionGatewaysAsync ()
        {
             ApiResponse<TransactionGatewaysResponse> localVarResponse = await GetPaymentsTransactionGatewaysAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieve a list of transaction gateways Retrieve a list of transaction gateways 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (TransactionGatewaysResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TransactionGatewaysResponse>> GetPaymentsTransactionGatewaysAsyncWithHttpInfo ()
        {

            var localVarPath = "/configuration/checkout/payments/tg";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPaymentsTransactionGateways", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TransactionGatewaysResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TransactionGatewaysResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TransactionGatewaysResponse)));
        }

        /// <summary>
        /// Insert a rotating transaction gateway Insert a rotating transaction gateway 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rotatingTransactionGateway">Rotating transaction gateway</param>
        /// <returns>RotatingTransactionGateway</returns>
        public RotatingTransactionGateway InsertRotatingTransactionGateway (RotatingTransactionGateway rotatingTransactionGateway)
        {
             ApiResponse<RotatingTransactionGateway> localVarResponse = InsertRotatingTransactionGatewayWithHttpInfo(rotatingTransactionGateway);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Insert a rotating transaction gateway Insert a rotating transaction gateway 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rotatingTransactionGateway">Rotating transaction gateway</param>
        /// <returns>ApiResponse of RotatingTransactionGateway</returns>
        public ApiResponse< RotatingTransactionGateway > InsertRotatingTransactionGatewayWithHttpInfo (RotatingTransactionGateway rotatingTransactionGateway)
        {
            // verify the required parameter 'rotatingTransactionGateway' is set
            if (rotatingTransactionGateway == null)
                throw new ApiException(400, "Missing required parameter 'rotatingTransactionGateway' when calling ConfigurationApi->InsertRotatingTransactionGateway");

            var localVarPath = "/configuration/checkout/payments/rtg/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json; charset=UTF-8"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (rotatingTransactionGateway != null && rotatingTransactionGateway.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(rotatingTransactionGateway); // http body (model) parameter
            }
            else
            {
                localVarPostBody = rotatingTransactionGateway; // byte array
            }

            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("InsertRotatingTransactionGateway", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RotatingTransactionGateway>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RotatingTransactionGateway) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RotatingTransactionGateway)));
        }

        /// <summary>
        /// Insert a rotating transaction gateway Insert a rotating transaction gateway 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rotatingTransactionGateway">Rotating transaction gateway</param>
        /// <returns>Task of RotatingTransactionGateway</returns>
        public async System.Threading.Tasks.Task<RotatingTransactionGateway> InsertRotatingTransactionGatewayAsync (RotatingTransactionGateway rotatingTransactionGateway)
        {
             ApiResponse<RotatingTransactionGateway> localVarResponse = await InsertRotatingTransactionGatewayAsyncWithHttpInfo(rotatingTransactionGateway);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Insert a rotating transaction gateway Insert a rotating transaction gateway 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rotatingTransactionGateway">Rotating transaction gateway</param>
        /// <returns>Task of ApiResponse (RotatingTransactionGateway)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<RotatingTransactionGateway>> InsertRotatingTransactionGatewayAsyncWithHttpInfo (RotatingTransactionGateway rotatingTransactionGateway)
        {
            // verify the required parameter 'rotatingTransactionGateway' is set
            if (rotatingTransactionGateway == null)
                throw new ApiException(400, "Missing required parameter 'rotatingTransactionGateway' when calling ConfigurationApi->InsertRotatingTransactionGateway");

            var localVarPath = "/configuration/checkout/payments/rtg/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json; charset=UTF-8"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (rotatingTransactionGateway != null && rotatingTransactionGateway.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(rotatingTransactionGateway); // http body (model) parameter
            }
            else
            {
                localVarPostBody = rotatingTransactionGateway; // byte array
            }

            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("InsertRotatingTransactionGateway", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RotatingTransactionGateway>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RotatingTransactionGateway) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RotatingTransactionGateway)));
        }

        /// <summary>
        /// Migrate a normal transaction gateway to a rotating transaction gateway Migrate a normal transaction gateway to a rotating transaction gateway 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">The short code for the new rotating transaction gateway</param>
        /// <returns>RotatingTransactionGateway</returns>
        public RotatingTransactionGateway MigrateToRotatingTransactionGateway (string code)
        {
             ApiResponse<RotatingTransactionGateway> localVarResponse = MigrateToRotatingTransactionGatewayWithHttpInfo(code);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Migrate a normal transaction gateway to a rotating transaction gateway Migrate a normal transaction gateway to a rotating transaction gateway 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">The short code for the new rotating transaction gateway</param>
        /// <returns>ApiResponse of RotatingTransactionGateway</returns>
        public ApiResponse< RotatingTransactionGateway > MigrateToRotatingTransactionGatewayWithHttpInfo (string code)
        {
            // verify the required parameter 'code' is set
            if (code == null)
                throw new ApiException(400, "Missing required parameter 'code' when calling ConfigurationApi->MigrateToRotatingTransactionGateway");

            var localVarPath = "/configuration/checkout/payments/tg/migrateToRtgWithCodeOf/{code}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json; charset=UTF-8"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (code != null) localVarPathParams.Add("code", this.Configuration.ApiClient.ParameterToString(code)); // path parameter

            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MigrateToRotatingTransactionGateway", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RotatingTransactionGateway>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RotatingTransactionGateway) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RotatingTransactionGateway)));
        }

        /// <summary>
        /// Migrate a normal transaction gateway to a rotating transaction gateway Migrate a normal transaction gateway to a rotating transaction gateway 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">The short code for the new rotating transaction gateway</param>
        /// <returns>Task of RotatingTransactionGateway</returns>
        public async System.Threading.Tasks.Task<RotatingTransactionGateway> MigrateToRotatingTransactionGatewayAsync (string code)
        {
             ApiResponse<RotatingTransactionGateway> localVarResponse = await MigrateToRotatingTransactionGatewayAsyncWithHttpInfo(code);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Migrate a normal transaction gateway to a rotating transaction gateway Migrate a normal transaction gateway to a rotating transaction gateway 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">The short code for the new rotating transaction gateway</param>
        /// <returns>Task of ApiResponse (RotatingTransactionGateway)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<RotatingTransactionGateway>> MigrateToRotatingTransactionGatewayAsyncWithHttpInfo (string code)
        {
            // verify the required parameter 'code' is set
            if (code == null)
                throw new ApiException(400, "Missing required parameter 'code' when calling ConfigurationApi->MigrateToRotatingTransactionGateway");

            var localVarPath = "/configuration/checkout/payments/tg/migrateToRtgWithCodeOf/{code}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json; charset=UTF-8"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (code != null) localVarPathParams.Add("code", this.Configuration.ApiClient.ParameterToString(code)); // path parameter

            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MigrateToRotatingTransactionGateway", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RotatingTransactionGateway>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RotatingTransactionGateway) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RotatingTransactionGateway)));
        }

        /// <summary>
        /// Begin the processing of connecting with Stripe Begin the processing of connecting with Stripe. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rtgOid">The rtg_oid to be connected to stripe.</param>
        /// <returns>StripeConnectResponse</returns>
        public StripeConnectResponse StripeConnect (int? rtgOid)
        {
             ApiResponse<StripeConnectResponse> localVarResponse = StripeConnectWithHttpInfo(rtgOid);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Begin the processing of connecting with Stripe Begin the processing of connecting with Stripe. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rtgOid">The rtg_oid to be connected to stripe.</param>
        /// <returns>ApiResponse of StripeConnectResponse</returns>
        public ApiResponse< StripeConnectResponse > StripeConnectWithHttpInfo (int? rtgOid)
        {
            // verify the required parameter 'rtgOid' is set
            if (rtgOid == null)
                throw new ApiException(400, "Missing required parameter 'rtgOid' when calling ConfigurationApi->StripeConnect");

            var localVarPath = "/configuration/checkout/payments/rtg/{rtg_oid}/stripeConnect";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json; charset=UTF-8"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (rtgOid != null) localVarPathParams.Add("rtg_oid", this.Configuration.ApiClient.ParameterToString(rtgOid)); // path parameter

            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("StripeConnect", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<StripeConnectResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (StripeConnectResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(StripeConnectResponse)));
        }

        /// <summary>
        /// Begin the processing of connecting with Stripe Begin the processing of connecting with Stripe. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rtgOid">The rtg_oid to be connected to stripe.</param>
        /// <returns>Task of StripeConnectResponse</returns>
        public async System.Threading.Tasks.Task<StripeConnectResponse> StripeConnectAsync (int? rtgOid)
        {
             ApiResponse<StripeConnectResponse> localVarResponse = await StripeConnectAsyncWithHttpInfo(rtgOid);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Begin the processing of connecting with Stripe Begin the processing of connecting with Stripe. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rtgOid">The rtg_oid to be connected to stripe.</param>
        /// <returns>Task of ApiResponse (StripeConnectResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<StripeConnectResponse>> StripeConnectAsyncWithHttpInfo (int? rtgOid)
        {
            // verify the required parameter 'rtgOid' is set
            if (rtgOid == null)
                throw new ApiException(400, "Missing required parameter 'rtgOid' when calling ConfigurationApi->StripeConnect");

            var localVarPath = "/configuration/checkout/payments/rtg/{rtg_oid}/stripeConnect";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json; charset=UTF-8"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (rtgOid != null) localVarPathParams.Add("rtg_oid", this.Configuration.ApiClient.ParameterToString(rtgOid)); // path parameter

            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("StripeConnect", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<StripeConnectResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (StripeConnectResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(StripeConnectResponse)));
        }

        /// <summary>
        /// Updates payments configuration Updates payments configuration on the UltraCart account. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="paymentsConfiguration">Payments configuration</param>
        /// <returns>PaymentsConfigurationResponse</returns>
        public PaymentsConfigurationResponse UpdatePaymentsConfiguration (PaymentsConfiguration paymentsConfiguration)
        {
             ApiResponse<PaymentsConfigurationResponse> localVarResponse = UpdatePaymentsConfigurationWithHttpInfo(paymentsConfiguration);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Updates payments configuration Updates payments configuration on the UltraCart account. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="paymentsConfiguration">Payments configuration</param>
        /// <returns>ApiResponse of PaymentsConfigurationResponse</returns>
        public ApiResponse< PaymentsConfigurationResponse > UpdatePaymentsConfigurationWithHttpInfo (PaymentsConfiguration paymentsConfiguration)
        {
            // verify the required parameter 'paymentsConfiguration' is set
            if (paymentsConfiguration == null)
                throw new ApiException(400, "Missing required parameter 'paymentsConfiguration' when calling ConfigurationApi->UpdatePaymentsConfiguration");

            var localVarPath = "/configuration/checkout/payments";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json; charset=UTF-8"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (paymentsConfiguration != null && paymentsConfiguration.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(paymentsConfiguration); // http body (model) parameter
            }
            else
            {
                localVarPostBody = paymentsConfiguration; // byte array
            }

            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdatePaymentsConfiguration", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PaymentsConfigurationResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PaymentsConfigurationResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PaymentsConfigurationResponse)));
        }

        /// <summary>
        /// Updates payments configuration Updates payments configuration on the UltraCart account. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="paymentsConfiguration">Payments configuration</param>
        /// <returns>Task of PaymentsConfigurationResponse</returns>
        public async System.Threading.Tasks.Task<PaymentsConfigurationResponse> UpdatePaymentsConfigurationAsync (PaymentsConfiguration paymentsConfiguration)
        {
             ApiResponse<PaymentsConfigurationResponse> localVarResponse = await UpdatePaymentsConfigurationAsyncWithHttpInfo(paymentsConfiguration);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Updates payments configuration Updates payments configuration on the UltraCart account. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="paymentsConfiguration">Payments configuration</param>
        /// <returns>Task of ApiResponse (PaymentsConfigurationResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PaymentsConfigurationResponse>> UpdatePaymentsConfigurationAsyncWithHttpInfo (PaymentsConfiguration paymentsConfiguration)
        {
            // verify the required parameter 'paymentsConfiguration' is set
            if (paymentsConfiguration == null)
                throw new ApiException(400, "Missing required parameter 'paymentsConfiguration' when calling ConfigurationApi->UpdatePaymentsConfiguration");

            var localVarPath = "/configuration/checkout/payments";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json; charset=UTF-8"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (paymentsConfiguration != null && paymentsConfiguration.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(paymentsConfiguration); // http body (model) parameter
            }
            else
            {
                localVarPostBody = paymentsConfiguration; // byte array
            }

            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdatePaymentsConfiguration", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PaymentsConfigurationResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PaymentsConfigurationResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PaymentsConfigurationResponse)));
        }

        /// <summary>
        /// Updates payments transaction gateway Updates payments transaction gateway on the UltraCart account. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateGatewayRequest">Transaction gateways</param>
        /// <returns>TransactionGatewaysResponse</returns>
        public TransactionGatewaysResponse UpdatePaymentsTransactionGateway (TransactionGatewaysRequest updateGatewayRequest)
        {
             ApiResponse<TransactionGatewaysResponse> localVarResponse = UpdatePaymentsTransactionGatewayWithHttpInfo(updateGatewayRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Updates payments transaction gateway Updates payments transaction gateway on the UltraCart account. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateGatewayRequest">Transaction gateways</param>
        /// <returns>ApiResponse of TransactionGatewaysResponse</returns>
        public ApiResponse< TransactionGatewaysResponse > UpdatePaymentsTransactionGatewayWithHttpInfo (TransactionGatewaysRequest updateGatewayRequest)
        {
            // verify the required parameter 'updateGatewayRequest' is set
            if (updateGatewayRequest == null)
                throw new ApiException(400, "Missing required parameter 'updateGatewayRequest' when calling ConfigurationApi->UpdatePaymentsTransactionGateway");

            var localVarPath = "/configuration/checkout/payments/tg";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json; charset=UTF-8"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (updateGatewayRequest != null && updateGatewayRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(updateGatewayRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = updateGatewayRequest; // byte array
            }

            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdatePaymentsTransactionGateway", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TransactionGatewaysResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TransactionGatewaysResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TransactionGatewaysResponse)));
        }

        /// <summary>
        /// Updates payments transaction gateway Updates payments transaction gateway on the UltraCart account. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateGatewayRequest">Transaction gateways</param>
        /// <returns>Task of TransactionGatewaysResponse</returns>
        public async System.Threading.Tasks.Task<TransactionGatewaysResponse> UpdatePaymentsTransactionGatewayAsync (TransactionGatewaysRequest updateGatewayRequest)
        {
             ApiResponse<TransactionGatewaysResponse> localVarResponse = await UpdatePaymentsTransactionGatewayAsyncWithHttpInfo(updateGatewayRequest);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Updates payments transaction gateway Updates payments transaction gateway on the UltraCart account. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateGatewayRequest">Transaction gateways</param>
        /// <returns>Task of ApiResponse (TransactionGatewaysResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TransactionGatewaysResponse>> UpdatePaymentsTransactionGatewayAsyncWithHttpInfo (TransactionGatewaysRequest updateGatewayRequest)
        {
            // verify the required parameter 'updateGatewayRequest' is set
            if (updateGatewayRequest == null)
                throw new ApiException(400, "Missing required parameter 'updateGatewayRequest' when calling ConfigurationApi->UpdatePaymentsTransactionGateway");

            var localVarPath = "/configuration/checkout/payments/tg";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json; charset=UTF-8"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (updateGatewayRequest != null && updateGatewayRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(updateGatewayRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = updateGatewayRequest; // byte array
            }

            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdatePaymentsTransactionGateway", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TransactionGatewaysResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TransactionGatewaysResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TransactionGatewaysResponse)));
        }

        /// <summary>
        /// Update a rotating transaction gateway Update a rotating transaction gateway 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rtgOid">The rtg_oid to update.</param>
        /// <param name="rotatingTransactionGateway">Rotating transaction gateway</param>
        /// <returns>RotatingTransactionGateway</returns>
        public RotatingTransactionGateway UpdateRotatingTransactionGateway (int? rtgOid, RotatingTransactionGateway rotatingTransactionGateway)
        {
             ApiResponse<RotatingTransactionGateway> localVarResponse = UpdateRotatingTransactionGatewayWithHttpInfo(rtgOid, rotatingTransactionGateway);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update a rotating transaction gateway Update a rotating transaction gateway 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rtgOid">The rtg_oid to update.</param>
        /// <param name="rotatingTransactionGateway">Rotating transaction gateway</param>
        /// <returns>ApiResponse of RotatingTransactionGateway</returns>
        public ApiResponse< RotatingTransactionGateway > UpdateRotatingTransactionGatewayWithHttpInfo (int? rtgOid, RotatingTransactionGateway rotatingTransactionGateway)
        {
            // verify the required parameter 'rtgOid' is set
            if (rtgOid == null)
                throw new ApiException(400, "Missing required parameter 'rtgOid' when calling ConfigurationApi->UpdateRotatingTransactionGateway");
            // verify the required parameter 'rotatingTransactionGateway' is set
            if (rotatingTransactionGateway == null)
                throw new ApiException(400, "Missing required parameter 'rotatingTransactionGateway' when calling ConfigurationApi->UpdateRotatingTransactionGateway");

            var localVarPath = "/configuration/checkout/payments/rtg/{rtg_oid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json; charset=UTF-8"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (rtgOid != null) localVarPathParams.Add("rtg_oid", this.Configuration.ApiClient.ParameterToString(rtgOid)); // path parameter
            if (rotatingTransactionGateway != null && rotatingTransactionGateway.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(rotatingTransactionGateway); // http body (model) parameter
            }
            else
            {
                localVarPostBody = rotatingTransactionGateway; // byte array
            }

            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateRotatingTransactionGateway", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RotatingTransactionGateway>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RotatingTransactionGateway) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RotatingTransactionGateway)));
        }

        /// <summary>
        /// Update a rotating transaction gateway Update a rotating transaction gateway 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rtgOid">The rtg_oid to update.</param>
        /// <param name="rotatingTransactionGateway">Rotating transaction gateway</param>
        /// <returns>Task of RotatingTransactionGateway</returns>
        public async System.Threading.Tasks.Task<RotatingTransactionGateway> UpdateRotatingTransactionGatewayAsync (int? rtgOid, RotatingTransactionGateway rotatingTransactionGateway)
        {
             ApiResponse<RotatingTransactionGateway> localVarResponse = await UpdateRotatingTransactionGatewayAsyncWithHttpInfo(rtgOid, rotatingTransactionGateway);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update a rotating transaction gateway Update a rotating transaction gateway 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rtgOid">The rtg_oid to update.</param>
        /// <param name="rotatingTransactionGateway">Rotating transaction gateway</param>
        /// <returns>Task of ApiResponse (RotatingTransactionGateway)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<RotatingTransactionGateway>> UpdateRotatingTransactionGatewayAsyncWithHttpInfo (int? rtgOid, RotatingTransactionGateway rotatingTransactionGateway)
        {
            // verify the required parameter 'rtgOid' is set
            if (rtgOid == null)
                throw new ApiException(400, "Missing required parameter 'rtgOid' when calling ConfigurationApi->UpdateRotatingTransactionGateway");
            // verify the required parameter 'rotatingTransactionGateway' is set
            if (rotatingTransactionGateway == null)
                throw new ApiException(400, "Missing required parameter 'rotatingTransactionGateway' when calling ConfigurationApi->UpdateRotatingTransactionGateway");

            var localVarPath = "/configuration/checkout/payments/rtg/{rtg_oid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json; charset=UTF-8"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (rtgOid != null) localVarPathParams.Add("rtg_oid", this.Configuration.ApiClient.ParameterToString(rtgOid)); // path parameter
            if (rotatingTransactionGateway != null && rotatingTransactionGateway.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(rotatingTransactionGateway); // http body (model) parameter
            }
            else
            {
                localVarPostBody = rotatingTransactionGateway; // byte array
            }

            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateRotatingTransactionGateway", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RotatingTransactionGateway>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RotatingTransactionGateway) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RotatingTransactionGateway)));
        }

        /// <summary>
        /// Enroll with WePay Enroll with WePay on the UltraCart account. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="wepayEnroll">Wepay enrollment information</param>
        /// <returns>PaymentsConfigurationResponse</returns>
        public PaymentsConfigurationResponse WepayEnroll (PaymentsWepayEnroll wepayEnroll)
        {
             ApiResponse<PaymentsConfigurationResponse> localVarResponse = WepayEnrollWithHttpInfo(wepayEnroll);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Enroll with WePay Enroll with WePay on the UltraCart account. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="wepayEnroll">Wepay enrollment information</param>
        /// <returns>ApiResponse of PaymentsConfigurationResponse</returns>
        public ApiResponse< PaymentsConfigurationResponse > WepayEnrollWithHttpInfo (PaymentsWepayEnroll wepayEnroll)
        {
            // verify the required parameter 'wepayEnroll' is set
            if (wepayEnroll == null)
                throw new ApiException(400, "Missing required parameter 'wepayEnroll' when calling ConfigurationApi->WepayEnroll");

            var localVarPath = "/configuration/checkout/wepayEnroll";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json; charset=UTF-8"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (wepayEnroll != null && wepayEnroll.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(wepayEnroll); // http body (model) parameter
            }
            else
            {
                localVarPostBody = wepayEnroll; // byte array
            }

            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("WepayEnroll", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PaymentsConfigurationResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PaymentsConfigurationResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PaymentsConfigurationResponse)));
        }

        /// <summary>
        /// Enroll with WePay Enroll with WePay on the UltraCart account. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="wepayEnroll">Wepay enrollment information</param>
        /// <returns>Task of PaymentsConfigurationResponse</returns>
        public async System.Threading.Tasks.Task<PaymentsConfigurationResponse> WepayEnrollAsync (PaymentsWepayEnroll wepayEnroll)
        {
             ApiResponse<PaymentsConfigurationResponse> localVarResponse = await WepayEnrollAsyncWithHttpInfo(wepayEnroll);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Enroll with WePay Enroll with WePay on the UltraCart account. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="wepayEnroll">Wepay enrollment information</param>
        /// <returns>Task of ApiResponse (PaymentsConfigurationResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PaymentsConfigurationResponse>> WepayEnrollAsyncWithHttpInfo (PaymentsWepayEnroll wepayEnroll)
        {
            // verify the required parameter 'wepayEnroll' is set
            if (wepayEnroll == null)
                throw new ApiException(400, "Missing required parameter 'wepayEnroll' when calling ConfigurationApi->WepayEnroll");

            var localVarPath = "/configuration/checkout/wepayEnroll";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json; charset=UTF-8"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (wepayEnroll != null && wepayEnroll.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(wepayEnroll); // http body (model) parameter
            }
            else
            {
                localVarPostBody = wepayEnroll; // byte array
            }

            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("WepayEnroll", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PaymentsConfigurationResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PaymentsConfigurationResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PaymentsConfigurationResponse)));
        }

    }
}
