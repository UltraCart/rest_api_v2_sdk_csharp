/* 
 * UltraCart Rest API V2
 *
 * UltraCart REST API Version 2
 *
 * OpenAPI spec version: 2.0.0
 * Contact: support@ultracart.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using com.ultracart.admin.v2.Client;
using com.ultracart.admin.v2.Model;

namespace com.ultracart.admin.v2.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ICouponApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Delete a coupon
        /// </summary>
        /// <remarks>
        /// Delete a coupon on the UltraCart account. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="couponOid">The coupon_oid to delete.</param>
        /// <returns></returns>
        void DeleteCoupon (int? couponOid);

        /// <summary>
        /// Delete a coupon
        /// </summary>
        /// <remarks>
        /// Delete a coupon on the UltraCart account. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="couponOid">The coupon_oid to delete.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteCouponWithHttpInfo (int? couponOid);
        /// <summary>
        /// Deletes multiple coupons
        /// </summary>
        /// <remarks>
        /// Delete coupons on the UltraCart account. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="couponDeleteRequest">Coupon oids to delete</param>
        /// <returns></returns>
        void DeleteCouponsByCode (CouponDeletesRequest couponDeleteRequest);

        /// <summary>
        /// Deletes multiple coupons
        /// </summary>
        /// <remarks>
        /// Delete coupons on the UltraCart account. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="couponDeleteRequest">Coupon oids to delete</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteCouponsByCodeWithHttpInfo (CouponDeletesRequest couponDeleteRequest);
        /// <summary>
        /// Deletes multiple coupons
        /// </summary>
        /// <remarks>
        /// Delete coupons on the UltraCart account. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="couponDeleteRequest">Coupon oids to delete</param>
        /// <returns></returns>
        void DeleteCouponsByOid (CouponDeletesRequest couponDeleteRequest);

        /// <summary>
        /// Deletes multiple coupons
        /// </summary>
        /// <remarks>
        /// Delete coupons on the UltraCart account. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="couponDeleteRequest">Coupon oids to delete</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteCouponsByOidWithHttpInfo (CouponDeletesRequest couponDeleteRequest);
        /// <summary>
        /// Determines if a coupon merchant code already exists
        /// </summary>
        /// <remarks>
        /// Determines if a coupon merchant code already exists. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="merchantCode">The coupon merchant code to examine.</param>
        /// <returns>CouponExistsResponse</returns>
        CouponExistsResponse DoesCouponCodeExist (string merchantCode);

        /// <summary>
        /// Determines if a coupon merchant code already exists
        /// </summary>
        /// <remarks>
        /// Determines if a coupon merchant code already exists. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="merchantCode">The coupon merchant code to examine.</param>
        /// <returns>ApiResponse of CouponExistsResponse</returns>
        ApiResponse<CouponExistsResponse> DoesCouponCodeExistWithHttpInfo (string merchantCode);
        /// <summary>
        /// Generates one time codes for a coupon
        /// </summary>
        /// <remarks>
        /// Generate one time codes for a coupon 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="couponOid">The coupon oid to generate codes.</param>
        /// <param name="couponCodesRequest">Coupon code generation parameters</param>
        /// <returns>CouponCodesResponse</returns>
        CouponCodesResponse GenerateCouponCodes (int? couponOid, CouponCodesRequest couponCodesRequest);

        /// <summary>
        /// Generates one time codes for a coupon
        /// </summary>
        /// <remarks>
        /// Generate one time codes for a coupon 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="couponOid">The coupon oid to generate codes.</param>
        /// <param name="couponCodesRequest">Coupon code generation parameters</param>
        /// <returns>ApiResponse of CouponCodesResponse</returns>
        ApiResponse<CouponCodesResponse> GenerateCouponCodesWithHttpInfo (int? couponOid, CouponCodesRequest couponCodesRequest);
        /// <summary>
        /// Generates one time codes by merchant code
        /// </summary>
        /// <remarks>
        /// Generate one time codes by merchant code 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="merchantCode">The merchant code to generate one time codes.</param>
        /// <param name="couponCodesRequest">Coupon code generation parameters</param>
        /// <returns>CouponCodesResponse</returns>
        CouponCodesResponse GenerateOneTimeCodesByMerchantCode (string merchantCode, CouponCodesRequest couponCodesRequest);

        /// <summary>
        /// Generates one time codes by merchant code
        /// </summary>
        /// <remarks>
        /// Generate one time codes by merchant code 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="merchantCode">The merchant code to generate one time codes.</param>
        /// <param name="couponCodesRequest">Coupon code generation parameters</param>
        /// <returns>ApiResponse of CouponCodesResponse</returns>
        ApiResponse<CouponCodesResponse> GenerateOneTimeCodesByMerchantCodeWithHttpInfo (string merchantCode, CouponCodesRequest couponCodesRequest);
        /// <summary>
        /// Retrieve auto apply rules and conditions
        /// </summary>
        /// <remarks>
        /// Retrieve auto apply rules and conditions 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>CouponAutoApplyConditions</returns>
        CouponAutoApplyConditions GetAutoApply ();

        /// <summary>
        /// Retrieve auto apply rules and conditions
        /// </summary>
        /// <remarks>
        /// Retrieve auto apply rules and conditions 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of CouponAutoApplyConditions</returns>
        ApiResponse<CouponAutoApplyConditions> GetAutoApplyWithHttpInfo ();
        /// <summary>
        /// Retrieve a coupon
        /// </summary>
        /// <remarks>
        /// Retrieves a single coupon using the specified coupon profile oid. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="couponOid">The coupon oid to retrieve.</param>
        /// <param name="expand">The object expansion to perform on the result.  See documentation for examples (optional)</param>
        /// <returns>CouponResponse</returns>
        CouponResponse GetCoupon (int? couponOid, string expand = null);

        /// <summary>
        /// Retrieve a coupon
        /// </summary>
        /// <remarks>
        /// Retrieves a single coupon using the specified coupon profile oid. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="couponOid">The coupon oid to retrieve.</param>
        /// <param name="expand">The object expansion to perform on the result.  See documentation for examples (optional)</param>
        /// <returns>ApiResponse of CouponResponse</returns>
        ApiResponse<CouponResponse> GetCouponWithHttpInfo (int? couponOid, string expand = null);
        /// <summary>
        /// Retrieve a coupon by merchant code
        /// </summary>
        /// <remarks>
        /// Retrieves a single coupon using the specified merchant code. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="merchantCode">The coupon merchant code to retrieve.</param>
        /// <param name="expand">The object expansion to perform on the result.  See documentation for examples (optional)</param>
        /// <returns>CouponResponse</returns>
        CouponResponse GetCouponByMerchantCode (string merchantCode, string expand = null);

        /// <summary>
        /// Retrieve a coupon by merchant code
        /// </summary>
        /// <remarks>
        /// Retrieves a single coupon using the specified merchant code. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="merchantCode">The coupon merchant code to retrieve.</param>
        /// <param name="expand">The object expansion to perform on the result.  See documentation for examples (optional)</param>
        /// <returns>ApiResponse of CouponResponse</returns>
        ApiResponse<CouponResponse> GetCouponByMerchantCodeWithHttpInfo (string merchantCode, string expand = null);
        /// <summary>
        /// Retrieve coupons
        /// </summary>
        /// <remarks>
        /// Retrieves coupons for this account.  If no parameters are specified, all coupons will be returned.  You will need to make multiple API calls in order to retrieve the entire result set since this API performs result set pagination. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="merchantCode">Merchant code (optional)</param>
        /// <param name="description">Description (optional)</param>
        /// <param name="couponType">Coupon type (optional)</param>
        /// <param name="startDateBegin">Start date begin (optional)</param>
        /// <param name="startDateEnd">Start date end (optional)</param>
        /// <param name="expirationDateBegin">Expiration date begin (optional)</param>
        /// <param name="expirationDateEnd">Expiration date end (optional)</param>
        /// <param name="affiliateOid">Affiliate oid (optional)</param>
        /// <param name="excludeExpired">Exclude expired (optional)</param>
        /// <param name="limit">The maximum number of records to return on this one API call. (Max 200) (optional, default to 100)</param>
        /// <param name="offset">Pagination of the record set.  Offset is a zero based index. (optional, default to 0)</param>
        /// <param name="sort">The sort order of the coupons.  See Sorting documentation for examples of using multiple values and sorting by ascending and descending. (optional)</param>
        /// <param name="expand">The object expansion to perform on the result.  See documentation for examples (optional)</param>
        /// <returns>CouponsResponse</returns>
        CouponsResponse GetCoupons (string merchantCode = null, string description = null, string couponType = null, string startDateBegin = null, string startDateEnd = null, string expirationDateBegin = null, string expirationDateEnd = null, int? affiliateOid = null, bool? excludeExpired = null, int? limit = null, int? offset = null, string sort = null, string expand = null);

        /// <summary>
        /// Retrieve coupons
        /// </summary>
        /// <remarks>
        /// Retrieves coupons for this account.  If no parameters are specified, all coupons will be returned.  You will need to make multiple API calls in order to retrieve the entire result set since this API performs result set pagination. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="merchantCode">Merchant code (optional)</param>
        /// <param name="description">Description (optional)</param>
        /// <param name="couponType">Coupon type (optional)</param>
        /// <param name="startDateBegin">Start date begin (optional)</param>
        /// <param name="startDateEnd">Start date end (optional)</param>
        /// <param name="expirationDateBegin">Expiration date begin (optional)</param>
        /// <param name="expirationDateEnd">Expiration date end (optional)</param>
        /// <param name="affiliateOid">Affiliate oid (optional)</param>
        /// <param name="excludeExpired">Exclude expired (optional)</param>
        /// <param name="limit">The maximum number of records to return on this one API call. (Max 200) (optional, default to 100)</param>
        /// <param name="offset">Pagination of the record set.  Offset is a zero based index. (optional, default to 0)</param>
        /// <param name="sort">The sort order of the coupons.  See Sorting documentation for examples of using multiple values and sorting by ascending and descending. (optional)</param>
        /// <param name="expand">The object expansion to perform on the result.  See documentation for examples (optional)</param>
        /// <returns>ApiResponse of CouponsResponse</returns>
        ApiResponse<CouponsResponse> GetCouponsWithHttpInfo (string merchantCode = null, string description = null, string couponType = null, string startDateBegin = null, string startDateEnd = null, string expirationDateBegin = null, string expirationDateEnd = null, int? affiliateOid = null, bool? excludeExpired = null, int? limit = null, int? offset = null, string sort = null, string expand = null);
        /// <summary>
        /// Retrieve coupons by query
        /// </summary>
        /// <remarks>
        /// Retrieves coupons from the account.  If no parameters are specified, all coupons will be returned.  You will need to make multiple API calls in order to retrieve the entire result set since this API performs result set pagination. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="couponQuery">Coupon query</param>
        /// <param name="limit">The maximum number of records to return on this one API call. (Max 200) (optional, default to 100)</param>
        /// <param name="offset">Pagination of the record set.  Offset is a zero based index. (optional, default to 0)</param>
        /// <param name="sort">The sort order of the coupons.  See Sorting documentation for examples of using multiple values and sorting by ascending and descending. (optional)</param>
        /// <param name="expand">The object expansion to perform on the result.  See documentation for examples (optional)</param>
        /// <returns>CouponsResponse</returns>
        CouponsResponse GetCouponsByQuery (CouponQuery couponQuery, int? limit = null, int? offset = null, string sort = null, string expand = null);

        /// <summary>
        /// Retrieve coupons by query
        /// </summary>
        /// <remarks>
        /// Retrieves coupons from the account.  If no parameters are specified, all coupons will be returned.  You will need to make multiple API calls in order to retrieve the entire result set since this API performs result set pagination. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="couponQuery">Coupon query</param>
        /// <param name="limit">The maximum number of records to return on this one API call. (Max 200) (optional, default to 100)</param>
        /// <param name="offset">Pagination of the record set.  Offset is a zero based index. (optional, default to 0)</param>
        /// <param name="sort">The sort order of the coupons.  See Sorting documentation for examples of using multiple values and sorting by ascending and descending. (optional)</param>
        /// <param name="expand">The object expansion to perform on the result.  See documentation for examples (optional)</param>
        /// <returns>ApiResponse of CouponsResponse</returns>
        ApiResponse<CouponsResponse> GetCouponsByQueryWithHttpInfo (CouponQuery couponQuery, int? limit = null, int? offset = null, string sort = null, string expand = null);
        /// <summary>
        /// Retrieve values needed for a coupon editor
        /// </summary>
        /// <remarks>
        /// Retrieve values needed for a coupon editor 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>CouponEditorValues</returns>
        CouponEditorValues GetEditorValues ();

        /// <summary>
        /// Retrieve values needed for a coupon editor
        /// </summary>
        /// <remarks>
        /// Retrieve values needed for a coupon editor 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of CouponEditorValues</returns>
        ApiResponse<CouponEditorValues> GetEditorValuesWithHttpInfo ();
        /// <summary>
        /// Insert a coupon
        /// </summary>
        /// <remarks>
        /// Insert a coupon on the UltraCart account. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="coupon">Coupon to insert</param>
        /// <param name="expand">The object expansion to perform on the result.  See documentation for examples (optional)</param>
        /// <returns>CouponResponse</returns>
        CouponResponse InsertCoupon (Coupon coupon, string expand = null);

        /// <summary>
        /// Insert a coupon
        /// </summary>
        /// <remarks>
        /// Insert a coupon on the UltraCart account. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="coupon">Coupon to insert</param>
        /// <param name="expand">The object expansion to perform on the result.  See documentation for examples (optional)</param>
        /// <returns>ApiResponse of CouponResponse</returns>
        ApiResponse<CouponResponse> InsertCouponWithHttpInfo (Coupon coupon, string expand = null);
        /// <summary>
        /// Insert multiple coupons
        /// </summary>
        /// <remarks>
        /// Insert multiple coupon on the UltraCart account. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="couponsRequest">Coupons to insert (maximum 50)</param>
        /// <param name="expand">The object expansion to perform on the result.  See documentation for examples (optional)</param>
        /// <param name="placeholders">Whether or not placeholder values should be returned in the result.  Useful for UIs that consume this REST API. (optional)</param>
        /// <returns>CouponsResponse</returns>
        CouponsResponse InsertCoupons (CouponsRequest couponsRequest, string expand = null, bool? placeholders = null);

        /// <summary>
        /// Insert multiple coupons
        /// </summary>
        /// <remarks>
        /// Insert multiple coupon on the UltraCart account. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="couponsRequest">Coupons to insert (maximum 50)</param>
        /// <param name="expand">The object expansion to perform on the result.  See documentation for examples (optional)</param>
        /// <param name="placeholders">Whether or not placeholder values should be returned in the result.  Useful for UIs that consume this REST API. (optional)</param>
        /// <returns>ApiResponse of CouponsResponse</returns>
        ApiResponse<CouponsResponse> InsertCouponsWithHttpInfo (CouponsRequest couponsRequest, string expand = null, bool? placeholders = null);
        /// <summary>
        /// Searches for items to display within a coupon editor and assign to coupons
        /// </summary>
        /// <remarks>
        /// Searches for items to display within a coupon editor and assign to coupons 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="s"> (optional)</param>
        /// <param name="m"> (optional)</param>
        /// <returns>CouponItemSearchResultsResponse</returns>
        CouponItemSearchResultsResponse SearchItems (string s = null, int? m = null);

        /// <summary>
        /// Searches for items to display within a coupon editor and assign to coupons
        /// </summary>
        /// <remarks>
        /// Searches for items to display within a coupon editor and assign to coupons 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="s"> (optional)</param>
        /// <param name="m"> (optional)</param>
        /// <returns>ApiResponse of CouponItemSearchResultsResponse</returns>
        ApiResponse<CouponItemSearchResultsResponse> SearchItemsWithHttpInfo (string s = null, int? m = null);
        /// <summary>
        /// Update auto apply rules and conditions
        /// </summary>
        /// <remarks>
        /// Update auto apply rules and conditions 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="conditions">Conditions</param>
        /// <returns></returns>
        void UpdateAutoApply (CouponAutoApplyConditions conditions);

        /// <summary>
        /// Update auto apply rules and conditions
        /// </summary>
        /// <remarks>
        /// Update auto apply rules and conditions 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="conditions">Conditions</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UpdateAutoApplyWithHttpInfo (CouponAutoApplyConditions conditions);
        /// <summary>
        /// Update a coupon
        /// </summary>
        /// <remarks>
        /// Update a coupon on the UltraCart account. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="coupon">Coupon to update</param>
        /// <param name="couponOid">The coupon_oid to update.</param>
        /// <param name="expand">The object expansion to perform on the result.  See documentation for examples (optional)</param>
        /// <returns>CouponResponse</returns>
        CouponResponse UpdateCoupon (Coupon coupon, int? couponOid, string expand = null);

        /// <summary>
        /// Update a coupon
        /// </summary>
        /// <remarks>
        /// Update a coupon on the UltraCart account. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="coupon">Coupon to update</param>
        /// <param name="couponOid">The coupon_oid to update.</param>
        /// <param name="expand">The object expansion to perform on the result.  See documentation for examples (optional)</param>
        /// <returns>ApiResponse of CouponResponse</returns>
        ApiResponse<CouponResponse> UpdateCouponWithHttpInfo (Coupon coupon, int? couponOid, string expand = null);
        /// <summary>
        /// Update multiple coupons
        /// </summary>
        /// <remarks>
        /// Update multiple coupon on the UltraCart account. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="couponsRequest">Coupons to update (synchronous maximum 50 / asynchronous maximum 100)</param>
        /// <param name="expand">The object expansion to perform on the result.  See documentation for examples (optional)</param>
        /// <param name="placeholders">Whether or not placeholder values should be returned in the result.  Useful for UIs that consume this REST API. (optional)</param>
        /// <param name="async">True if the operation should be run async.  No result returned (optional)</param>
        /// <returns>CouponsResponse</returns>
        CouponsResponse UpdateCoupons (CouponsRequest couponsRequest, string expand = null, bool? placeholders = null, bool? async = null);

        /// <summary>
        /// Update multiple coupons
        /// </summary>
        /// <remarks>
        /// Update multiple coupon on the UltraCart account. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="couponsRequest">Coupons to update (synchronous maximum 50 / asynchronous maximum 100)</param>
        /// <param name="expand">The object expansion to perform on the result.  See documentation for examples (optional)</param>
        /// <param name="placeholders">Whether or not placeholder values should be returned in the result.  Useful for UIs that consume this REST API. (optional)</param>
        /// <param name="async">True if the operation should be run async.  No result returned (optional)</param>
        /// <returns>ApiResponse of CouponsResponse</returns>
        ApiResponse<CouponsResponse> UpdateCouponsWithHttpInfo (CouponsRequest couponsRequest, string expand = null, bool? placeholders = null, bool? async = null);
        /// <summary>
        /// Upload one-time codes for a coupon
        /// </summary>
        /// <remarks>
        /// Upload one-time codes for a coupon 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="couponOid">The coupon oid to associate with the provided one-time codes.</param>
        /// <param name="uploadCouponCodesRequest">One-time coupon codes</param>
        /// <returns>UploadCouponCodesResponse</returns>
        UploadCouponCodesResponse UploadCouponCodes (int? couponOid, UploadCouponCodesRequest uploadCouponCodesRequest);

        /// <summary>
        /// Upload one-time codes for a coupon
        /// </summary>
        /// <remarks>
        /// Upload one-time codes for a coupon 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="couponOid">The coupon oid to associate with the provided one-time codes.</param>
        /// <param name="uploadCouponCodesRequest">One-time coupon codes</param>
        /// <returns>ApiResponse of UploadCouponCodesResponse</returns>
        ApiResponse<UploadCouponCodesResponse> UploadCouponCodesWithHttpInfo (int? couponOid, UploadCouponCodesRequest uploadCouponCodesRequest);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Delete a coupon
        /// </summary>
        /// <remarks>
        /// Delete a coupon on the UltraCart account. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="couponOid">The coupon_oid to delete.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteCouponAsync (int? couponOid);

        /// <summary>
        /// Delete a coupon
        /// </summary>
        /// <remarks>
        /// Delete a coupon on the UltraCart account. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="couponOid">The coupon_oid to delete.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteCouponAsyncWithHttpInfo (int? couponOid);
        /// <summary>
        /// Deletes multiple coupons
        /// </summary>
        /// <remarks>
        /// Delete coupons on the UltraCart account. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="couponDeleteRequest">Coupon oids to delete</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteCouponsByCodeAsync (CouponDeletesRequest couponDeleteRequest);

        /// <summary>
        /// Deletes multiple coupons
        /// </summary>
        /// <remarks>
        /// Delete coupons on the UltraCart account. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="couponDeleteRequest">Coupon oids to delete</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteCouponsByCodeAsyncWithHttpInfo (CouponDeletesRequest couponDeleteRequest);
        /// <summary>
        /// Deletes multiple coupons
        /// </summary>
        /// <remarks>
        /// Delete coupons on the UltraCart account. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="couponDeleteRequest">Coupon oids to delete</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteCouponsByOidAsync (CouponDeletesRequest couponDeleteRequest);

        /// <summary>
        /// Deletes multiple coupons
        /// </summary>
        /// <remarks>
        /// Delete coupons on the UltraCart account. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="couponDeleteRequest">Coupon oids to delete</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteCouponsByOidAsyncWithHttpInfo (CouponDeletesRequest couponDeleteRequest);
        /// <summary>
        /// Determines if a coupon merchant code already exists
        /// </summary>
        /// <remarks>
        /// Determines if a coupon merchant code already exists. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="merchantCode">The coupon merchant code to examine.</param>
        /// <returns>Task of CouponExistsResponse</returns>
        System.Threading.Tasks.Task<CouponExistsResponse> DoesCouponCodeExistAsync (string merchantCode);

        /// <summary>
        /// Determines if a coupon merchant code already exists
        /// </summary>
        /// <remarks>
        /// Determines if a coupon merchant code already exists. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="merchantCode">The coupon merchant code to examine.</param>
        /// <returns>Task of ApiResponse (CouponExistsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CouponExistsResponse>> DoesCouponCodeExistAsyncWithHttpInfo (string merchantCode);
        /// <summary>
        /// Generates one time codes for a coupon
        /// </summary>
        /// <remarks>
        /// Generate one time codes for a coupon 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="couponOid">The coupon oid to generate codes.</param>
        /// <param name="couponCodesRequest">Coupon code generation parameters</param>
        /// <returns>Task of CouponCodesResponse</returns>
        System.Threading.Tasks.Task<CouponCodesResponse> GenerateCouponCodesAsync (int? couponOid, CouponCodesRequest couponCodesRequest);

        /// <summary>
        /// Generates one time codes for a coupon
        /// </summary>
        /// <remarks>
        /// Generate one time codes for a coupon 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="couponOid">The coupon oid to generate codes.</param>
        /// <param name="couponCodesRequest">Coupon code generation parameters</param>
        /// <returns>Task of ApiResponse (CouponCodesResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CouponCodesResponse>> GenerateCouponCodesAsyncWithHttpInfo (int? couponOid, CouponCodesRequest couponCodesRequest);
        /// <summary>
        /// Generates one time codes by merchant code
        /// </summary>
        /// <remarks>
        /// Generate one time codes by merchant code 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="merchantCode">The merchant code to generate one time codes.</param>
        /// <param name="couponCodesRequest">Coupon code generation parameters</param>
        /// <returns>Task of CouponCodesResponse</returns>
        System.Threading.Tasks.Task<CouponCodesResponse> GenerateOneTimeCodesByMerchantCodeAsync (string merchantCode, CouponCodesRequest couponCodesRequest);

        /// <summary>
        /// Generates one time codes by merchant code
        /// </summary>
        /// <remarks>
        /// Generate one time codes by merchant code 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="merchantCode">The merchant code to generate one time codes.</param>
        /// <param name="couponCodesRequest">Coupon code generation parameters</param>
        /// <returns>Task of ApiResponse (CouponCodesResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CouponCodesResponse>> GenerateOneTimeCodesByMerchantCodeAsyncWithHttpInfo (string merchantCode, CouponCodesRequest couponCodesRequest);
        /// <summary>
        /// Retrieve auto apply rules and conditions
        /// </summary>
        /// <remarks>
        /// Retrieve auto apply rules and conditions 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of CouponAutoApplyConditions</returns>
        System.Threading.Tasks.Task<CouponAutoApplyConditions> GetAutoApplyAsync ();

        /// <summary>
        /// Retrieve auto apply rules and conditions
        /// </summary>
        /// <remarks>
        /// Retrieve auto apply rules and conditions 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (CouponAutoApplyConditions)</returns>
        System.Threading.Tasks.Task<ApiResponse<CouponAutoApplyConditions>> GetAutoApplyAsyncWithHttpInfo ();
        /// <summary>
        /// Retrieve a coupon
        /// </summary>
        /// <remarks>
        /// Retrieves a single coupon using the specified coupon profile oid. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="couponOid">The coupon oid to retrieve.</param>
        /// <param name="expand">The object expansion to perform on the result.  See documentation for examples (optional)</param>
        /// <returns>Task of CouponResponse</returns>
        System.Threading.Tasks.Task<CouponResponse> GetCouponAsync (int? couponOid, string expand = null);

        /// <summary>
        /// Retrieve a coupon
        /// </summary>
        /// <remarks>
        /// Retrieves a single coupon using the specified coupon profile oid. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="couponOid">The coupon oid to retrieve.</param>
        /// <param name="expand">The object expansion to perform on the result.  See documentation for examples (optional)</param>
        /// <returns>Task of ApiResponse (CouponResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CouponResponse>> GetCouponAsyncWithHttpInfo (int? couponOid, string expand = null);
        /// <summary>
        /// Retrieve a coupon by merchant code
        /// </summary>
        /// <remarks>
        /// Retrieves a single coupon using the specified merchant code. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="merchantCode">The coupon merchant code to retrieve.</param>
        /// <param name="expand">The object expansion to perform on the result.  See documentation for examples (optional)</param>
        /// <returns>Task of CouponResponse</returns>
        System.Threading.Tasks.Task<CouponResponse> GetCouponByMerchantCodeAsync (string merchantCode, string expand = null);

        /// <summary>
        /// Retrieve a coupon by merchant code
        /// </summary>
        /// <remarks>
        /// Retrieves a single coupon using the specified merchant code. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="merchantCode">The coupon merchant code to retrieve.</param>
        /// <param name="expand">The object expansion to perform on the result.  See documentation for examples (optional)</param>
        /// <returns>Task of ApiResponse (CouponResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CouponResponse>> GetCouponByMerchantCodeAsyncWithHttpInfo (string merchantCode, string expand = null);
        /// <summary>
        /// Retrieve coupons
        /// </summary>
        /// <remarks>
        /// Retrieves coupons for this account.  If no parameters are specified, all coupons will be returned.  You will need to make multiple API calls in order to retrieve the entire result set since this API performs result set pagination. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="merchantCode">Merchant code (optional)</param>
        /// <param name="description">Description (optional)</param>
        /// <param name="couponType">Coupon type (optional)</param>
        /// <param name="startDateBegin">Start date begin (optional)</param>
        /// <param name="startDateEnd">Start date end (optional)</param>
        /// <param name="expirationDateBegin">Expiration date begin (optional)</param>
        /// <param name="expirationDateEnd">Expiration date end (optional)</param>
        /// <param name="affiliateOid">Affiliate oid (optional)</param>
        /// <param name="excludeExpired">Exclude expired (optional)</param>
        /// <param name="limit">The maximum number of records to return on this one API call. (Max 200) (optional, default to 100)</param>
        /// <param name="offset">Pagination of the record set.  Offset is a zero based index. (optional, default to 0)</param>
        /// <param name="sort">The sort order of the coupons.  See Sorting documentation for examples of using multiple values and sorting by ascending and descending. (optional)</param>
        /// <param name="expand">The object expansion to perform on the result.  See documentation for examples (optional)</param>
        /// <returns>Task of CouponsResponse</returns>
        System.Threading.Tasks.Task<CouponsResponse> GetCouponsAsync (string merchantCode = null, string description = null, string couponType = null, string startDateBegin = null, string startDateEnd = null, string expirationDateBegin = null, string expirationDateEnd = null, int? affiliateOid = null, bool? excludeExpired = null, int? limit = null, int? offset = null, string sort = null, string expand = null);

        /// <summary>
        /// Retrieve coupons
        /// </summary>
        /// <remarks>
        /// Retrieves coupons for this account.  If no parameters are specified, all coupons will be returned.  You will need to make multiple API calls in order to retrieve the entire result set since this API performs result set pagination. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="merchantCode">Merchant code (optional)</param>
        /// <param name="description">Description (optional)</param>
        /// <param name="couponType">Coupon type (optional)</param>
        /// <param name="startDateBegin">Start date begin (optional)</param>
        /// <param name="startDateEnd">Start date end (optional)</param>
        /// <param name="expirationDateBegin">Expiration date begin (optional)</param>
        /// <param name="expirationDateEnd">Expiration date end (optional)</param>
        /// <param name="affiliateOid">Affiliate oid (optional)</param>
        /// <param name="excludeExpired">Exclude expired (optional)</param>
        /// <param name="limit">The maximum number of records to return on this one API call. (Max 200) (optional, default to 100)</param>
        /// <param name="offset">Pagination of the record set.  Offset is a zero based index. (optional, default to 0)</param>
        /// <param name="sort">The sort order of the coupons.  See Sorting documentation for examples of using multiple values and sorting by ascending and descending. (optional)</param>
        /// <param name="expand">The object expansion to perform on the result.  See documentation for examples (optional)</param>
        /// <returns>Task of ApiResponse (CouponsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CouponsResponse>> GetCouponsAsyncWithHttpInfo (string merchantCode = null, string description = null, string couponType = null, string startDateBegin = null, string startDateEnd = null, string expirationDateBegin = null, string expirationDateEnd = null, int? affiliateOid = null, bool? excludeExpired = null, int? limit = null, int? offset = null, string sort = null, string expand = null);
        /// <summary>
        /// Retrieve coupons by query
        /// </summary>
        /// <remarks>
        /// Retrieves coupons from the account.  If no parameters are specified, all coupons will be returned.  You will need to make multiple API calls in order to retrieve the entire result set since this API performs result set pagination. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="couponQuery">Coupon query</param>
        /// <param name="limit">The maximum number of records to return on this one API call. (Max 200) (optional, default to 100)</param>
        /// <param name="offset">Pagination of the record set.  Offset is a zero based index. (optional, default to 0)</param>
        /// <param name="sort">The sort order of the coupons.  See Sorting documentation for examples of using multiple values and sorting by ascending and descending. (optional)</param>
        /// <param name="expand">The object expansion to perform on the result.  See documentation for examples (optional)</param>
        /// <returns>Task of CouponsResponse</returns>
        System.Threading.Tasks.Task<CouponsResponse> GetCouponsByQueryAsync (CouponQuery couponQuery, int? limit = null, int? offset = null, string sort = null, string expand = null);

        /// <summary>
        /// Retrieve coupons by query
        /// </summary>
        /// <remarks>
        /// Retrieves coupons from the account.  If no parameters are specified, all coupons will be returned.  You will need to make multiple API calls in order to retrieve the entire result set since this API performs result set pagination. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="couponQuery">Coupon query</param>
        /// <param name="limit">The maximum number of records to return on this one API call. (Max 200) (optional, default to 100)</param>
        /// <param name="offset">Pagination of the record set.  Offset is a zero based index. (optional, default to 0)</param>
        /// <param name="sort">The sort order of the coupons.  See Sorting documentation for examples of using multiple values and sorting by ascending and descending. (optional)</param>
        /// <param name="expand">The object expansion to perform on the result.  See documentation for examples (optional)</param>
        /// <returns>Task of ApiResponse (CouponsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CouponsResponse>> GetCouponsByQueryAsyncWithHttpInfo (CouponQuery couponQuery, int? limit = null, int? offset = null, string sort = null, string expand = null);
        /// <summary>
        /// Retrieve values needed for a coupon editor
        /// </summary>
        /// <remarks>
        /// Retrieve values needed for a coupon editor 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of CouponEditorValues</returns>
        System.Threading.Tasks.Task<CouponEditorValues> GetEditorValuesAsync ();

        /// <summary>
        /// Retrieve values needed for a coupon editor
        /// </summary>
        /// <remarks>
        /// Retrieve values needed for a coupon editor 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (CouponEditorValues)</returns>
        System.Threading.Tasks.Task<ApiResponse<CouponEditorValues>> GetEditorValuesAsyncWithHttpInfo ();
        /// <summary>
        /// Insert a coupon
        /// </summary>
        /// <remarks>
        /// Insert a coupon on the UltraCart account. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="coupon">Coupon to insert</param>
        /// <param name="expand">The object expansion to perform on the result.  See documentation for examples (optional)</param>
        /// <returns>Task of CouponResponse</returns>
        System.Threading.Tasks.Task<CouponResponse> InsertCouponAsync (Coupon coupon, string expand = null);

        /// <summary>
        /// Insert a coupon
        /// </summary>
        /// <remarks>
        /// Insert a coupon on the UltraCart account. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="coupon">Coupon to insert</param>
        /// <param name="expand">The object expansion to perform on the result.  See documentation for examples (optional)</param>
        /// <returns>Task of ApiResponse (CouponResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CouponResponse>> InsertCouponAsyncWithHttpInfo (Coupon coupon, string expand = null);
        /// <summary>
        /// Insert multiple coupons
        /// </summary>
        /// <remarks>
        /// Insert multiple coupon on the UltraCart account. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="couponsRequest">Coupons to insert (maximum 50)</param>
        /// <param name="expand">The object expansion to perform on the result.  See documentation for examples (optional)</param>
        /// <param name="placeholders">Whether or not placeholder values should be returned in the result.  Useful for UIs that consume this REST API. (optional)</param>
        /// <returns>Task of CouponsResponse</returns>
        System.Threading.Tasks.Task<CouponsResponse> InsertCouponsAsync (CouponsRequest couponsRequest, string expand = null, bool? placeholders = null);

        /// <summary>
        /// Insert multiple coupons
        /// </summary>
        /// <remarks>
        /// Insert multiple coupon on the UltraCart account. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="couponsRequest">Coupons to insert (maximum 50)</param>
        /// <param name="expand">The object expansion to perform on the result.  See documentation for examples (optional)</param>
        /// <param name="placeholders">Whether or not placeholder values should be returned in the result.  Useful for UIs that consume this REST API. (optional)</param>
        /// <returns>Task of ApiResponse (CouponsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CouponsResponse>> InsertCouponsAsyncWithHttpInfo (CouponsRequest couponsRequest, string expand = null, bool? placeholders = null);
        /// <summary>
        /// Searches for items to display within a coupon editor and assign to coupons
        /// </summary>
        /// <remarks>
        /// Searches for items to display within a coupon editor and assign to coupons 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="s"> (optional)</param>
        /// <param name="m"> (optional)</param>
        /// <returns>Task of CouponItemSearchResultsResponse</returns>
        System.Threading.Tasks.Task<CouponItemSearchResultsResponse> SearchItemsAsync (string s = null, int? m = null);

        /// <summary>
        /// Searches for items to display within a coupon editor and assign to coupons
        /// </summary>
        /// <remarks>
        /// Searches for items to display within a coupon editor and assign to coupons 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="s"> (optional)</param>
        /// <param name="m"> (optional)</param>
        /// <returns>Task of ApiResponse (CouponItemSearchResultsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CouponItemSearchResultsResponse>> SearchItemsAsyncWithHttpInfo (string s = null, int? m = null);
        /// <summary>
        /// Update auto apply rules and conditions
        /// </summary>
        /// <remarks>
        /// Update auto apply rules and conditions 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="conditions">Conditions</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UpdateAutoApplyAsync (CouponAutoApplyConditions conditions);

        /// <summary>
        /// Update auto apply rules and conditions
        /// </summary>
        /// <remarks>
        /// Update auto apply rules and conditions 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="conditions">Conditions</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UpdateAutoApplyAsyncWithHttpInfo (CouponAutoApplyConditions conditions);
        /// <summary>
        /// Update a coupon
        /// </summary>
        /// <remarks>
        /// Update a coupon on the UltraCart account. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="coupon">Coupon to update</param>
        /// <param name="couponOid">The coupon_oid to update.</param>
        /// <param name="expand">The object expansion to perform on the result.  See documentation for examples (optional)</param>
        /// <returns>Task of CouponResponse</returns>
        System.Threading.Tasks.Task<CouponResponse> UpdateCouponAsync (Coupon coupon, int? couponOid, string expand = null);

        /// <summary>
        /// Update a coupon
        /// </summary>
        /// <remarks>
        /// Update a coupon on the UltraCart account. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="coupon">Coupon to update</param>
        /// <param name="couponOid">The coupon_oid to update.</param>
        /// <param name="expand">The object expansion to perform on the result.  See documentation for examples (optional)</param>
        /// <returns>Task of ApiResponse (CouponResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CouponResponse>> UpdateCouponAsyncWithHttpInfo (Coupon coupon, int? couponOid, string expand = null);
        /// <summary>
        /// Update multiple coupons
        /// </summary>
        /// <remarks>
        /// Update multiple coupon on the UltraCart account. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="couponsRequest">Coupons to update (synchronous maximum 50 / asynchronous maximum 100)</param>
        /// <param name="expand">The object expansion to perform on the result.  See documentation for examples (optional)</param>
        /// <param name="placeholders">Whether or not placeholder values should be returned in the result.  Useful for UIs that consume this REST API. (optional)</param>
        /// <param name="async">True if the operation should be run async.  No result returned (optional)</param>
        /// <returns>Task of CouponsResponse</returns>
        System.Threading.Tasks.Task<CouponsResponse> UpdateCouponsAsync (CouponsRequest couponsRequest, string expand = null, bool? placeholders = null, bool? async = null);

        /// <summary>
        /// Update multiple coupons
        /// </summary>
        /// <remarks>
        /// Update multiple coupon on the UltraCart account. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="couponsRequest">Coupons to update (synchronous maximum 50 / asynchronous maximum 100)</param>
        /// <param name="expand">The object expansion to perform on the result.  See documentation for examples (optional)</param>
        /// <param name="placeholders">Whether or not placeholder values should be returned in the result.  Useful for UIs that consume this REST API. (optional)</param>
        /// <param name="async">True if the operation should be run async.  No result returned (optional)</param>
        /// <returns>Task of ApiResponse (CouponsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CouponsResponse>> UpdateCouponsAsyncWithHttpInfo (CouponsRequest couponsRequest, string expand = null, bool? placeholders = null, bool? async = null);
        /// <summary>
        /// Upload one-time codes for a coupon
        /// </summary>
        /// <remarks>
        /// Upload one-time codes for a coupon 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="couponOid">The coupon oid to associate with the provided one-time codes.</param>
        /// <param name="uploadCouponCodesRequest">One-time coupon codes</param>
        /// <returns>Task of UploadCouponCodesResponse</returns>
        System.Threading.Tasks.Task<UploadCouponCodesResponse> UploadCouponCodesAsync (int? couponOid, UploadCouponCodesRequest uploadCouponCodesRequest);

        /// <summary>
        /// Upload one-time codes for a coupon
        /// </summary>
        /// <remarks>
        /// Upload one-time codes for a coupon 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="couponOid">The coupon oid to associate with the provided one-time codes.</param>
        /// <param name="uploadCouponCodesRequest">One-time coupon codes</param>
        /// <returns>Task of ApiResponse (UploadCouponCodesResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<UploadCouponCodesResponse>> UploadCouponCodesAsyncWithHttpInfo (int? couponOid, UploadCouponCodesRequest uploadCouponCodesRequest);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class CouponApi : ICouponApi
    {
        private com.ultracart.admin.v2.Client.ExceptionFactory _exceptionFactory = (name, response) => null;
    
        /// <summary>
        /// Initializes a new instance of the <see cref="CouponApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public CouponApi(com.ultracart.admin.v2.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = com.ultracart.admin.v2.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = com.ultracart.admin.v2.Client.Configuration.DefaultExceptionFactory;
        }


        /// <summary>
        /// Initializes a new instance of the <see cref="CouponApi"/> class
        /// using a simple key string and optional version, which you will
        /// almost always want to use the default
        /// </summary>
        /// <param name="SimpleKey">A simple key.  See https://ultracart.atlassian.net/wiki/spaces/ucdoc/pages/38688545/API+Simple+Key</param>
        /// <returns></returns>
        public CouponApi(string SimpleKey)
        {
            Configuration configuration = new Configuration();
            configuration.ApiKey.Add("x-ultracart-simple-key", SimpleKey);
            configuration.DefaultHeader.Add("X-UltraCart-Api-Version", "2017-03-01");
            this.Configuration = configuration;
            ExceptionFactory = com.ultracart.admin.v2.Client.Configuration.DefaultExceptionFactory;
        }


        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public com.ultracart.admin.v2.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public com.ultracart.admin.v2.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Delete a coupon Delete a coupon on the UltraCart account. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="couponOid">The coupon_oid to delete.</param>
        /// <returns></returns>
        public void DeleteCoupon (int? couponOid)
        {
             DeleteCouponWithHttpInfo(couponOid);
        }

        /// <summary>
        /// Delete a coupon Delete a coupon on the UltraCart account. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="couponOid">The coupon_oid to delete.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteCouponWithHttpInfo (int? couponOid)
        {
            // verify the required parameter 'couponOid' is set
            if (couponOid == null)
                throw new ApiException(400, "Missing required parameter 'couponOid' when calling CouponApi->DeleteCoupon");

            var localVarPath = "/coupon/coupons/{coupon_oid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (couponOid != null) localVarPathParams.Add("coupon_oid", this.Configuration.ApiClient.ParameterToString(couponOid)); // path parameter

            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteCoupon", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a coupon Delete a coupon on the UltraCart account. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="couponOid">The coupon_oid to delete.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteCouponAsync (int? couponOid)
        {
             await DeleteCouponAsyncWithHttpInfo(couponOid);

        }

        /// <summary>
        /// Delete a coupon Delete a coupon on the UltraCart account. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="couponOid">The coupon_oid to delete.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteCouponAsyncWithHttpInfo (int? couponOid)
        {
            // verify the required parameter 'couponOid' is set
            if (couponOid == null)
                throw new ApiException(400, "Missing required parameter 'couponOid' when calling CouponApi->DeleteCoupon");

            var localVarPath = "/coupon/coupons/{coupon_oid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (couponOid != null) localVarPathParams.Add("coupon_oid", this.Configuration.ApiClient.ParameterToString(couponOid)); // path parameter

            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteCoupon", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Deletes multiple coupons Delete coupons on the UltraCart account. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="couponDeleteRequest">Coupon oids to delete</param>
        /// <returns></returns>
        public void DeleteCouponsByCode (CouponDeletesRequest couponDeleteRequest)
        {
             DeleteCouponsByCodeWithHttpInfo(couponDeleteRequest);
        }

        /// <summary>
        /// Deletes multiple coupons Delete coupons on the UltraCart account. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="couponDeleteRequest">Coupon oids to delete</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteCouponsByCodeWithHttpInfo (CouponDeletesRequest couponDeleteRequest)
        {
            // verify the required parameter 'couponDeleteRequest' is set
            if (couponDeleteRequest == null)
                throw new ApiException(400, "Missing required parameter 'couponDeleteRequest' when calling CouponApi->DeleteCouponsByCode");

            var localVarPath = "/coupon/coupons/by_code";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (couponDeleteRequest != null && couponDeleteRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(couponDeleteRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = couponDeleteRequest; // byte array
            }

            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteCouponsByCode", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Deletes multiple coupons Delete coupons on the UltraCart account. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="couponDeleteRequest">Coupon oids to delete</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteCouponsByCodeAsync (CouponDeletesRequest couponDeleteRequest)
        {
             await DeleteCouponsByCodeAsyncWithHttpInfo(couponDeleteRequest);

        }

        /// <summary>
        /// Deletes multiple coupons Delete coupons on the UltraCart account. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="couponDeleteRequest">Coupon oids to delete</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteCouponsByCodeAsyncWithHttpInfo (CouponDeletesRequest couponDeleteRequest)
        {
            // verify the required parameter 'couponDeleteRequest' is set
            if (couponDeleteRequest == null)
                throw new ApiException(400, "Missing required parameter 'couponDeleteRequest' when calling CouponApi->DeleteCouponsByCode");

            var localVarPath = "/coupon/coupons/by_code";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (couponDeleteRequest != null && couponDeleteRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(couponDeleteRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = couponDeleteRequest; // byte array
            }

            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteCouponsByCode", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Deletes multiple coupons Delete coupons on the UltraCart account. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="couponDeleteRequest">Coupon oids to delete</param>
        /// <returns></returns>
        public void DeleteCouponsByOid (CouponDeletesRequest couponDeleteRequest)
        {
             DeleteCouponsByOidWithHttpInfo(couponDeleteRequest);
        }

        /// <summary>
        /// Deletes multiple coupons Delete coupons on the UltraCart account. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="couponDeleteRequest">Coupon oids to delete</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteCouponsByOidWithHttpInfo (CouponDeletesRequest couponDeleteRequest)
        {
            // verify the required parameter 'couponDeleteRequest' is set
            if (couponDeleteRequest == null)
                throw new ApiException(400, "Missing required parameter 'couponDeleteRequest' when calling CouponApi->DeleteCouponsByOid");

            var localVarPath = "/coupon/coupons/by_oid";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (couponDeleteRequest != null && couponDeleteRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(couponDeleteRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = couponDeleteRequest; // byte array
            }

            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteCouponsByOid", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Deletes multiple coupons Delete coupons on the UltraCart account. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="couponDeleteRequest">Coupon oids to delete</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteCouponsByOidAsync (CouponDeletesRequest couponDeleteRequest)
        {
             await DeleteCouponsByOidAsyncWithHttpInfo(couponDeleteRequest);

        }

        /// <summary>
        /// Deletes multiple coupons Delete coupons on the UltraCart account. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="couponDeleteRequest">Coupon oids to delete</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteCouponsByOidAsyncWithHttpInfo (CouponDeletesRequest couponDeleteRequest)
        {
            // verify the required parameter 'couponDeleteRequest' is set
            if (couponDeleteRequest == null)
                throw new ApiException(400, "Missing required parameter 'couponDeleteRequest' when calling CouponApi->DeleteCouponsByOid");

            var localVarPath = "/coupon/coupons/by_oid";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (couponDeleteRequest != null && couponDeleteRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(couponDeleteRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = couponDeleteRequest; // byte array
            }

            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteCouponsByOid", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Determines if a coupon merchant code already exists Determines if a coupon merchant code already exists. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="merchantCode">The coupon merchant code to examine.</param>
        /// <returns>CouponExistsResponse</returns>
        public CouponExistsResponse DoesCouponCodeExist (string merchantCode)
        {
             ApiResponse<CouponExistsResponse> localVarResponse = DoesCouponCodeExistWithHttpInfo(merchantCode);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Determines if a coupon merchant code already exists Determines if a coupon merchant code already exists. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="merchantCode">The coupon merchant code to examine.</param>
        /// <returns>ApiResponse of CouponExistsResponse</returns>
        public ApiResponse< CouponExistsResponse > DoesCouponCodeExistWithHttpInfo (string merchantCode)
        {
            // verify the required parameter 'merchantCode' is set
            if (merchantCode == null)
                throw new ApiException(400, "Missing required parameter 'merchantCode' when calling CouponApi->DoesCouponCodeExist");

            var localVarPath = "/coupon/coupons/merchant_code/{merchant_code}/exists";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (merchantCode != null) localVarPathParams.Add("merchant_code", this.Configuration.ApiClient.ParameterToString(merchantCode)); // path parameter

            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DoesCouponCodeExist", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CouponExistsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CouponExistsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CouponExistsResponse)));
        }

        /// <summary>
        /// Determines if a coupon merchant code already exists Determines if a coupon merchant code already exists. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="merchantCode">The coupon merchant code to examine.</param>
        /// <returns>Task of CouponExistsResponse</returns>
        public async System.Threading.Tasks.Task<CouponExistsResponse> DoesCouponCodeExistAsync (string merchantCode)
        {
             ApiResponse<CouponExistsResponse> localVarResponse = await DoesCouponCodeExistAsyncWithHttpInfo(merchantCode);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Determines if a coupon merchant code already exists Determines if a coupon merchant code already exists. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="merchantCode">The coupon merchant code to examine.</param>
        /// <returns>Task of ApiResponse (CouponExistsResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CouponExistsResponse>> DoesCouponCodeExistAsyncWithHttpInfo (string merchantCode)
        {
            // verify the required parameter 'merchantCode' is set
            if (merchantCode == null)
                throw new ApiException(400, "Missing required parameter 'merchantCode' when calling CouponApi->DoesCouponCodeExist");

            var localVarPath = "/coupon/coupons/merchant_code/{merchant_code}/exists";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (merchantCode != null) localVarPathParams.Add("merchant_code", this.Configuration.ApiClient.ParameterToString(merchantCode)); // path parameter

            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DoesCouponCodeExist", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CouponExistsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CouponExistsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CouponExistsResponse)));
        }

        /// <summary>
        /// Generates one time codes for a coupon Generate one time codes for a coupon 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="couponOid">The coupon oid to generate codes.</param>
        /// <param name="couponCodesRequest">Coupon code generation parameters</param>
        /// <returns>CouponCodesResponse</returns>
        public CouponCodesResponse GenerateCouponCodes (int? couponOid, CouponCodesRequest couponCodesRequest)
        {
             ApiResponse<CouponCodesResponse> localVarResponse = GenerateCouponCodesWithHttpInfo(couponOid, couponCodesRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Generates one time codes for a coupon Generate one time codes for a coupon 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="couponOid">The coupon oid to generate codes.</param>
        /// <param name="couponCodesRequest">Coupon code generation parameters</param>
        /// <returns>ApiResponse of CouponCodesResponse</returns>
        public ApiResponse< CouponCodesResponse > GenerateCouponCodesWithHttpInfo (int? couponOid, CouponCodesRequest couponCodesRequest)
        {
            // verify the required parameter 'couponOid' is set
            if (couponOid == null)
                throw new ApiException(400, "Missing required parameter 'couponOid' when calling CouponApi->GenerateCouponCodes");
            // verify the required parameter 'couponCodesRequest' is set
            if (couponCodesRequest == null)
                throw new ApiException(400, "Missing required parameter 'couponCodesRequest' when calling CouponApi->GenerateCouponCodes");

            var localVarPath = "/coupon/coupons/{coupon_oid}/generate_codes";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json; charset=UTF-8"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (couponOid != null) localVarPathParams.Add("coupon_oid", this.Configuration.ApiClient.ParameterToString(couponOid)); // path parameter
            if (couponCodesRequest != null && couponCodesRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(couponCodesRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = couponCodesRequest; // byte array
            }

            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GenerateCouponCodes", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CouponCodesResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CouponCodesResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CouponCodesResponse)));
        }

        /// <summary>
        /// Generates one time codes for a coupon Generate one time codes for a coupon 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="couponOid">The coupon oid to generate codes.</param>
        /// <param name="couponCodesRequest">Coupon code generation parameters</param>
        /// <returns>Task of CouponCodesResponse</returns>
        public async System.Threading.Tasks.Task<CouponCodesResponse> GenerateCouponCodesAsync (int? couponOid, CouponCodesRequest couponCodesRequest)
        {
             ApiResponse<CouponCodesResponse> localVarResponse = await GenerateCouponCodesAsyncWithHttpInfo(couponOid, couponCodesRequest);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Generates one time codes for a coupon Generate one time codes for a coupon 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="couponOid">The coupon oid to generate codes.</param>
        /// <param name="couponCodesRequest">Coupon code generation parameters</param>
        /// <returns>Task of ApiResponse (CouponCodesResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CouponCodesResponse>> GenerateCouponCodesAsyncWithHttpInfo (int? couponOid, CouponCodesRequest couponCodesRequest)
        {
            // verify the required parameter 'couponOid' is set
            if (couponOid == null)
                throw new ApiException(400, "Missing required parameter 'couponOid' when calling CouponApi->GenerateCouponCodes");
            // verify the required parameter 'couponCodesRequest' is set
            if (couponCodesRequest == null)
                throw new ApiException(400, "Missing required parameter 'couponCodesRequest' when calling CouponApi->GenerateCouponCodes");

            var localVarPath = "/coupon/coupons/{coupon_oid}/generate_codes";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json; charset=UTF-8"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (couponOid != null) localVarPathParams.Add("coupon_oid", this.Configuration.ApiClient.ParameterToString(couponOid)); // path parameter
            if (couponCodesRequest != null && couponCodesRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(couponCodesRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = couponCodesRequest; // byte array
            }

            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GenerateCouponCodes", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CouponCodesResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CouponCodesResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CouponCodesResponse)));
        }

        /// <summary>
        /// Generates one time codes by merchant code Generate one time codes by merchant code 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="merchantCode">The merchant code to generate one time codes.</param>
        /// <param name="couponCodesRequest">Coupon code generation parameters</param>
        /// <returns>CouponCodesResponse</returns>
        public CouponCodesResponse GenerateOneTimeCodesByMerchantCode (string merchantCode, CouponCodesRequest couponCodesRequest)
        {
             ApiResponse<CouponCodesResponse> localVarResponse = GenerateOneTimeCodesByMerchantCodeWithHttpInfo(merchantCode, couponCodesRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Generates one time codes by merchant code Generate one time codes by merchant code 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="merchantCode">The merchant code to generate one time codes.</param>
        /// <param name="couponCodesRequest">Coupon code generation parameters</param>
        /// <returns>ApiResponse of CouponCodesResponse</returns>
        public ApiResponse< CouponCodesResponse > GenerateOneTimeCodesByMerchantCodeWithHttpInfo (string merchantCode, CouponCodesRequest couponCodesRequest)
        {
            // verify the required parameter 'merchantCode' is set
            if (merchantCode == null)
                throw new ApiException(400, "Missing required parameter 'merchantCode' when calling CouponApi->GenerateOneTimeCodesByMerchantCode");
            // verify the required parameter 'couponCodesRequest' is set
            if (couponCodesRequest == null)
                throw new ApiException(400, "Missing required parameter 'couponCodesRequest' when calling CouponApi->GenerateOneTimeCodesByMerchantCode");

            var localVarPath = "/coupon/coupons/merchant_code/{merchant_code}/generate_codes";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json; charset=UTF-8"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (merchantCode != null) localVarPathParams.Add("merchant_code", this.Configuration.ApiClient.ParameterToString(merchantCode)); // path parameter
            if (couponCodesRequest != null && couponCodesRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(couponCodesRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = couponCodesRequest; // byte array
            }

            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GenerateOneTimeCodesByMerchantCode", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CouponCodesResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CouponCodesResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CouponCodesResponse)));
        }

        /// <summary>
        /// Generates one time codes by merchant code Generate one time codes by merchant code 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="merchantCode">The merchant code to generate one time codes.</param>
        /// <param name="couponCodesRequest">Coupon code generation parameters</param>
        /// <returns>Task of CouponCodesResponse</returns>
        public async System.Threading.Tasks.Task<CouponCodesResponse> GenerateOneTimeCodesByMerchantCodeAsync (string merchantCode, CouponCodesRequest couponCodesRequest)
        {
             ApiResponse<CouponCodesResponse> localVarResponse = await GenerateOneTimeCodesByMerchantCodeAsyncWithHttpInfo(merchantCode, couponCodesRequest);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Generates one time codes by merchant code Generate one time codes by merchant code 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="merchantCode">The merchant code to generate one time codes.</param>
        /// <param name="couponCodesRequest">Coupon code generation parameters</param>
        /// <returns>Task of ApiResponse (CouponCodesResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CouponCodesResponse>> GenerateOneTimeCodesByMerchantCodeAsyncWithHttpInfo (string merchantCode, CouponCodesRequest couponCodesRequest)
        {
            // verify the required parameter 'merchantCode' is set
            if (merchantCode == null)
                throw new ApiException(400, "Missing required parameter 'merchantCode' when calling CouponApi->GenerateOneTimeCodesByMerchantCode");
            // verify the required parameter 'couponCodesRequest' is set
            if (couponCodesRequest == null)
                throw new ApiException(400, "Missing required parameter 'couponCodesRequest' when calling CouponApi->GenerateOneTimeCodesByMerchantCode");

            var localVarPath = "/coupon/coupons/merchant_code/{merchant_code}/generate_codes";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json; charset=UTF-8"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (merchantCode != null) localVarPathParams.Add("merchant_code", this.Configuration.ApiClient.ParameterToString(merchantCode)); // path parameter
            if (couponCodesRequest != null && couponCodesRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(couponCodesRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = couponCodesRequest; // byte array
            }

            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GenerateOneTimeCodesByMerchantCode", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CouponCodesResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CouponCodesResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CouponCodesResponse)));
        }

        /// <summary>
        /// Retrieve auto apply rules and conditions Retrieve auto apply rules and conditions 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>CouponAutoApplyConditions</returns>
        public CouponAutoApplyConditions GetAutoApply ()
        {
             ApiResponse<CouponAutoApplyConditions> localVarResponse = GetAutoApplyWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve auto apply rules and conditions Retrieve auto apply rules and conditions 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of CouponAutoApplyConditions</returns>
        public ApiResponse< CouponAutoApplyConditions > GetAutoApplyWithHttpInfo ()
        {

            var localVarPath = "/coupon/auto_apply";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAutoApply", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CouponAutoApplyConditions>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CouponAutoApplyConditions) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CouponAutoApplyConditions)));
        }

        /// <summary>
        /// Retrieve auto apply rules and conditions Retrieve auto apply rules and conditions 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of CouponAutoApplyConditions</returns>
        public async System.Threading.Tasks.Task<CouponAutoApplyConditions> GetAutoApplyAsync ()
        {
             ApiResponse<CouponAutoApplyConditions> localVarResponse = await GetAutoApplyAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieve auto apply rules and conditions Retrieve auto apply rules and conditions 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (CouponAutoApplyConditions)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CouponAutoApplyConditions>> GetAutoApplyAsyncWithHttpInfo ()
        {

            var localVarPath = "/coupon/auto_apply";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAutoApply", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CouponAutoApplyConditions>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CouponAutoApplyConditions) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CouponAutoApplyConditions)));
        }

        /// <summary>
        /// Retrieve a coupon Retrieves a single coupon using the specified coupon profile oid. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="couponOid">The coupon oid to retrieve.</param>
        /// <param name="expand">The object expansion to perform on the result.  See documentation for examples (optional)</param>
        /// <returns>CouponResponse</returns>
        public CouponResponse GetCoupon (int? couponOid, string expand = null)
        {
             ApiResponse<CouponResponse> localVarResponse = GetCouponWithHttpInfo(couponOid, expand);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve a coupon Retrieves a single coupon using the specified coupon profile oid. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="couponOid">The coupon oid to retrieve.</param>
        /// <param name="expand">The object expansion to perform on the result.  See documentation for examples (optional)</param>
        /// <returns>ApiResponse of CouponResponse</returns>
        public ApiResponse< CouponResponse > GetCouponWithHttpInfo (int? couponOid, string expand = null)
        {
            // verify the required parameter 'couponOid' is set
            if (couponOid == null)
                throw new ApiException(400, "Missing required parameter 'couponOid' when calling CouponApi->GetCoupon");

            var localVarPath = "/coupon/coupons/{coupon_oid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (couponOid != null) localVarPathParams.Add("coupon_oid", this.Configuration.ApiClient.ParameterToString(couponOid)); // path parameter
            if (expand != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "_expand", expand)); // query parameter

            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCoupon", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CouponResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CouponResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CouponResponse)));
        }

        /// <summary>
        /// Retrieve a coupon Retrieves a single coupon using the specified coupon profile oid. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="couponOid">The coupon oid to retrieve.</param>
        /// <param name="expand">The object expansion to perform on the result.  See documentation for examples (optional)</param>
        /// <returns>Task of CouponResponse</returns>
        public async System.Threading.Tasks.Task<CouponResponse> GetCouponAsync (int? couponOid, string expand = null)
        {
             ApiResponse<CouponResponse> localVarResponse = await GetCouponAsyncWithHttpInfo(couponOid, expand);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieve a coupon Retrieves a single coupon using the specified coupon profile oid. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="couponOid">The coupon oid to retrieve.</param>
        /// <param name="expand">The object expansion to perform on the result.  See documentation for examples (optional)</param>
        /// <returns>Task of ApiResponse (CouponResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CouponResponse>> GetCouponAsyncWithHttpInfo (int? couponOid, string expand = null)
        {
            // verify the required parameter 'couponOid' is set
            if (couponOid == null)
                throw new ApiException(400, "Missing required parameter 'couponOid' when calling CouponApi->GetCoupon");

            var localVarPath = "/coupon/coupons/{coupon_oid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (couponOid != null) localVarPathParams.Add("coupon_oid", this.Configuration.ApiClient.ParameterToString(couponOid)); // path parameter
            if (expand != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "_expand", expand)); // query parameter

            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCoupon", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CouponResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CouponResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CouponResponse)));
        }

        /// <summary>
        /// Retrieve a coupon by merchant code Retrieves a single coupon using the specified merchant code. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="merchantCode">The coupon merchant code to retrieve.</param>
        /// <param name="expand">The object expansion to perform on the result.  See documentation for examples (optional)</param>
        /// <returns>CouponResponse</returns>
        public CouponResponse GetCouponByMerchantCode (string merchantCode, string expand = null)
        {
             ApiResponse<CouponResponse> localVarResponse = GetCouponByMerchantCodeWithHttpInfo(merchantCode, expand);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve a coupon by merchant code Retrieves a single coupon using the specified merchant code. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="merchantCode">The coupon merchant code to retrieve.</param>
        /// <param name="expand">The object expansion to perform on the result.  See documentation for examples (optional)</param>
        /// <returns>ApiResponse of CouponResponse</returns>
        public ApiResponse< CouponResponse > GetCouponByMerchantCodeWithHttpInfo (string merchantCode, string expand = null)
        {
            // verify the required parameter 'merchantCode' is set
            if (merchantCode == null)
                throw new ApiException(400, "Missing required parameter 'merchantCode' when calling CouponApi->GetCouponByMerchantCode");

            var localVarPath = "/coupon/coupons/merchant_code/{merchant_code}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (merchantCode != null) localVarPathParams.Add("merchant_code", this.Configuration.ApiClient.ParameterToString(merchantCode)); // path parameter
            if (expand != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "_expand", expand)); // query parameter

            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCouponByMerchantCode", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CouponResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CouponResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CouponResponse)));
        }

        /// <summary>
        /// Retrieve a coupon by merchant code Retrieves a single coupon using the specified merchant code. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="merchantCode">The coupon merchant code to retrieve.</param>
        /// <param name="expand">The object expansion to perform on the result.  See documentation for examples (optional)</param>
        /// <returns>Task of CouponResponse</returns>
        public async System.Threading.Tasks.Task<CouponResponse> GetCouponByMerchantCodeAsync (string merchantCode, string expand = null)
        {
             ApiResponse<CouponResponse> localVarResponse = await GetCouponByMerchantCodeAsyncWithHttpInfo(merchantCode, expand);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieve a coupon by merchant code Retrieves a single coupon using the specified merchant code. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="merchantCode">The coupon merchant code to retrieve.</param>
        /// <param name="expand">The object expansion to perform on the result.  See documentation for examples (optional)</param>
        /// <returns>Task of ApiResponse (CouponResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CouponResponse>> GetCouponByMerchantCodeAsyncWithHttpInfo (string merchantCode, string expand = null)
        {
            // verify the required parameter 'merchantCode' is set
            if (merchantCode == null)
                throw new ApiException(400, "Missing required parameter 'merchantCode' when calling CouponApi->GetCouponByMerchantCode");

            var localVarPath = "/coupon/coupons/merchant_code/{merchant_code}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (merchantCode != null) localVarPathParams.Add("merchant_code", this.Configuration.ApiClient.ParameterToString(merchantCode)); // path parameter
            if (expand != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "_expand", expand)); // query parameter

            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCouponByMerchantCode", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CouponResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CouponResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CouponResponse)));
        }

        /// <summary>
        /// Retrieve coupons Retrieves coupons for this account.  If no parameters are specified, all coupons will be returned.  You will need to make multiple API calls in order to retrieve the entire result set since this API performs result set pagination. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="merchantCode">Merchant code (optional)</param>
        /// <param name="description">Description (optional)</param>
        /// <param name="couponType">Coupon type (optional)</param>
        /// <param name="startDateBegin">Start date begin (optional)</param>
        /// <param name="startDateEnd">Start date end (optional)</param>
        /// <param name="expirationDateBegin">Expiration date begin (optional)</param>
        /// <param name="expirationDateEnd">Expiration date end (optional)</param>
        /// <param name="affiliateOid">Affiliate oid (optional)</param>
        /// <param name="excludeExpired">Exclude expired (optional)</param>
        /// <param name="limit">The maximum number of records to return on this one API call. (Max 200) (optional, default to 100)</param>
        /// <param name="offset">Pagination of the record set.  Offset is a zero based index. (optional, default to 0)</param>
        /// <param name="sort">The sort order of the coupons.  See Sorting documentation for examples of using multiple values and sorting by ascending and descending. (optional)</param>
        /// <param name="expand">The object expansion to perform on the result.  See documentation for examples (optional)</param>
        /// <returns>CouponsResponse</returns>
        public CouponsResponse GetCoupons (string merchantCode = null, string description = null, string couponType = null, string startDateBegin = null, string startDateEnd = null, string expirationDateBegin = null, string expirationDateEnd = null, int? affiliateOid = null, bool? excludeExpired = null, int? limit = null, int? offset = null, string sort = null, string expand = null)
        {
             ApiResponse<CouponsResponse> localVarResponse = GetCouponsWithHttpInfo(merchantCode, description, couponType, startDateBegin, startDateEnd, expirationDateBegin, expirationDateEnd, affiliateOid, excludeExpired, limit, offset, sort, expand);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve coupons Retrieves coupons for this account.  If no parameters are specified, all coupons will be returned.  You will need to make multiple API calls in order to retrieve the entire result set since this API performs result set pagination. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="merchantCode">Merchant code (optional)</param>
        /// <param name="description">Description (optional)</param>
        /// <param name="couponType">Coupon type (optional)</param>
        /// <param name="startDateBegin">Start date begin (optional)</param>
        /// <param name="startDateEnd">Start date end (optional)</param>
        /// <param name="expirationDateBegin">Expiration date begin (optional)</param>
        /// <param name="expirationDateEnd">Expiration date end (optional)</param>
        /// <param name="affiliateOid">Affiliate oid (optional)</param>
        /// <param name="excludeExpired">Exclude expired (optional)</param>
        /// <param name="limit">The maximum number of records to return on this one API call. (Max 200) (optional, default to 100)</param>
        /// <param name="offset">Pagination of the record set.  Offset is a zero based index. (optional, default to 0)</param>
        /// <param name="sort">The sort order of the coupons.  See Sorting documentation for examples of using multiple values and sorting by ascending and descending. (optional)</param>
        /// <param name="expand">The object expansion to perform on the result.  See documentation for examples (optional)</param>
        /// <returns>ApiResponse of CouponsResponse</returns>
        public ApiResponse< CouponsResponse > GetCouponsWithHttpInfo (string merchantCode = null, string description = null, string couponType = null, string startDateBegin = null, string startDateEnd = null, string expirationDateBegin = null, string expirationDateEnd = null, int? affiliateOid = null, bool? excludeExpired = null, int? limit = null, int? offset = null, string sort = null, string expand = null)
        {

            var localVarPath = "/coupon/coupons";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (merchantCode != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "merchant_code", merchantCode)); // query parameter
            if (description != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "description", description)); // query parameter
            if (couponType != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "coupon_type", couponType)); // query parameter
            if (startDateBegin != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "start_date_begin", startDateBegin)); // query parameter
            if (startDateEnd != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "start_date_end", startDateEnd)); // query parameter
            if (expirationDateBegin != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "expiration_date_begin", expirationDateBegin)); // query parameter
            if (expirationDateEnd != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "expiration_date_end", expirationDateEnd)); // query parameter
            if (affiliateOid != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "affiliate_oid", affiliateOid)); // query parameter
            if (excludeExpired != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "exclude_expired", excludeExpired)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "_limit", limit)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "_offset", offset)); // query parameter
            if (sort != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "_sort", sort)); // query parameter
            if (expand != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "_expand", expand)); // query parameter

            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCoupons", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CouponsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CouponsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CouponsResponse)));
        }

        /// <summary>
        /// Retrieve coupons Retrieves coupons for this account.  If no parameters are specified, all coupons will be returned.  You will need to make multiple API calls in order to retrieve the entire result set since this API performs result set pagination. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="merchantCode">Merchant code (optional)</param>
        /// <param name="description">Description (optional)</param>
        /// <param name="couponType">Coupon type (optional)</param>
        /// <param name="startDateBegin">Start date begin (optional)</param>
        /// <param name="startDateEnd">Start date end (optional)</param>
        /// <param name="expirationDateBegin">Expiration date begin (optional)</param>
        /// <param name="expirationDateEnd">Expiration date end (optional)</param>
        /// <param name="affiliateOid">Affiliate oid (optional)</param>
        /// <param name="excludeExpired">Exclude expired (optional)</param>
        /// <param name="limit">The maximum number of records to return on this one API call. (Max 200) (optional, default to 100)</param>
        /// <param name="offset">Pagination of the record set.  Offset is a zero based index. (optional, default to 0)</param>
        /// <param name="sort">The sort order of the coupons.  See Sorting documentation for examples of using multiple values and sorting by ascending and descending. (optional)</param>
        /// <param name="expand">The object expansion to perform on the result.  See documentation for examples (optional)</param>
        /// <returns>Task of CouponsResponse</returns>
        public async System.Threading.Tasks.Task<CouponsResponse> GetCouponsAsync (string merchantCode = null, string description = null, string couponType = null, string startDateBegin = null, string startDateEnd = null, string expirationDateBegin = null, string expirationDateEnd = null, int? affiliateOid = null, bool? excludeExpired = null, int? limit = null, int? offset = null, string sort = null, string expand = null)
        {
             ApiResponse<CouponsResponse> localVarResponse = await GetCouponsAsyncWithHttpInfo(merchantCode, description, couponType, startDateBegin, startDateEnd, expirationDateBegin, expirationDateEnd, affiliateOid, excludeExpired, limit, offset, sort, expand);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieve coupons Retrieves coupons for this account.  If no parameters are specified, all coupons will be returned.  You will need to make multiple API calls in order to retrieve the entire result set since this API performs result set pagination. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="merchantCode">Merchant code (optional)</param>
        /// <param name="description">Description (optional)</param>
        /// <param name="couponType">Coupon type (optional)</param>
        /// <param name="startDateBegin">Start date begin (optional)</param>
        /// <param name="startDateEnd">Start date end (optional)</param>
        /// <param name="expirationDateBegin">Expiration date begin (optional)</param>
        /// <param name="expirationDateEnd">Expiration date end (optional)</param>
        /// <param name="affiliateOid">Affiliate oid (optional)</param>
        /// <param name="excludeExpired">Exclude expired (optional)</param>
        /// <param name="limit">The maximum number of records to return on this one API call. (Max 200) (optional, default to 100)</param>
        /// <param name="offset">Pagination of the record set.  Offset is a zero based index. (optional, default to 0)</param>
        /// <param name="sort">The sort order of the coupons.  See Sorting documentation for examples of using multiple values and sorting by ascending and descending. (optional)</param>
        /// <param name="expand">The object expansion to perform on the result.  See documentation for examples (optional)</param>
        /// <returns>Task of ApiResponse (CouponsResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CouponsResponse>> GetCouponsAsyncWithHttpInfo (string merchantCode = null, string description = null, string couponType = null, string startDateBegin = null, string startDateEnd = null, string expirationDateBegin = null, string expirationDateEnd = null, int? affiliateOid = null, bool? excludeExpired = null, int? limit = null, int? offset = null, string sort = null, string expand = null)
        {

            var localVarPath = "/coupon/coupons";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (merchantCode != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "merchant_code", merchantCode)); // query parameter
            if (description != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "description", description)); // query parameter
            if (couponType != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "coupon_type", couponType)); // query parameter
            if (startDateBegin != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "start_date_begin", startDateBegin)); // query parameter
            if (startDateEnd != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "start_date_end", startDateEnd)); // query parameter
            if (expirationDateBegin != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "expiration_date_begin", expirationDateBegin)); // query parameter
            if (expirationDateEnd != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "expiration_date_end", expirationDateEnd)); // query parameter
            if (affiliateOid != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "affiliate_oid", affiliateOid)); // query parameter
            if (excludeExpired != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "exclude_expired", excludeExpired)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "_limit", limit)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "_offset", offset)); // query parameter
            if (sort != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "_sort", sort)); // query parameter
            if (expand != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "_expand", expand)); // query parameter

            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCoupons", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CouponsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CouponsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CouponsResponse)));
        }

        /// <summary>
        /// Retrieve coupons by query Retrieves coupons from the account.  If no parameters are specified, all coupons will be returned.  You will need to make multiple API calls in order to retrieve the entire result set since this API performs result set pagination. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="couponQuery">Coupon query</param>
        /// <param name="limit">The maximum number of records to return on this one API call. (Max 200) (optional, default to 100)</param>
        /// <param name="offset">Pagination of the record set.  Offset is a zero based index. (optional, default to 0)</param>
        /// <param name="sort">The sort order of the coupons.  See Sorting documentation for examples of using multiple values and sorting by ascending and descending. (optional)</param>
        /// <param name="expand">The object expansion to perform on the result.  See documentation for examples (optional)</param>
        /// <returns>CouponsResponse</returns>
        public CouponsResponse GetCouponsByQuery (CouponQuery couponQuery, int? limit = null, int? offset = null, string sort = null, string expand = null)
        {
             ApiResponse<CouponsResponse> localVarResponse = GetCouponsByQueryWithHttpInfo(couponQuery, limit, offset, sort, expand);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve coupons by query Retrieves coupons from the account.  If no parameters are specified, all coupons will be returned.  You will need to make multiple API calls in order to retrieve the entire result set since this API performs result set pagination. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="couponQuery">Coupon query</param>
        /// <param name="limit">The maximum number of records to return on this one API call. (Max 200) (optional, default to 100)</param>
        /// <param name="offset">Pagination of the record set.  Offset is a zero based index. (optional, default to 0)</param>
        /// <param name="sort">The sort order of the coupons.  See Sorting documentation for examples of using multiple values and sorting by ascending and descending. (optional)</param>
        /// <param name="expand">The object expansion to perform on the result.  See documentation for examples (optional)</param>
        /// <returns>ApiResponse of CouponsResponse</returns>
        public ApiResponse< CouponsResponse > GetCouponsByQueryWithHttpInfo (CouponQuery couponQuery, int? limit = null, int? offset = null, string sort = null, string expand = null)
        {
            // verify the required parameter 'couponQuery' is set
            if (couponQuery == null)
                throw new ApiException(400, "Missing required parameter 'couponQuery' when calling CouponApi->GetCouponsByQuery");

            var localVarPath = "/coupon/coupons/query";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "_limit", limit)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "_offset", offset)); // query parameter
            if (sort != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "_sort", sort)); // query parameter
            if (expand != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "_expand", expand)); // query parameter
            if (couponQuery != null && couponQuery.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(couponQuery); // http body (model) parameter
            }
            else
            {
                localVarPostBody = couponQuery; // byte array
            }

            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCouponsByQuery", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CouponsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CouponsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CouponsResponse)));
        }

        /// <summary>
        /// Retrieve coupons by query Retrieves coupons from the account.  If no parameters are specified, all coupons will be returned.  You will need to make multiple API calls in order to retrieve the entire result set since this API performs result set pagination. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="couponQuery">Coupon query</param>
        /// <param name="limit">The maximum number of records to return on this one API call. (Max 200) (optional, default to 100)</param>
        /// <param name="offset">Pagination of the record set.  Offset is a zero based index. (optional, default to 0)</param>
        /// <param name="sort">The sort order of the coupons.  See Sorting documentation for examples of using multiple values and sorting by ascending and descending. (optional)</param>
        /// <param name="expand">The object expansion to perform on the result.  See documentation for examples (optional)</param>
        /// <returns>Task of CouponsResponse</returns>
        public async System.Threading.Tasks.Task<CouponsResponse> GetCouponsByQueryAsync (CouponQuery couponQuery, int? limit = null, int? offset = null, string sort = null, string expand = null)
        {
             ApiResponse<CouponsResponse> localVarResponse = await GetCouponsByQueryAsyncWithHttpInfo(couponQuery, limit, offset, sort, expand);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieve coupons by query Retrieves coupons from the account.  If no parameters are specified, all coupons will be returned.  You will need to make multiple API calls in order to retrieve the entire result set since this API performs result set pagination. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="couponQuery">Coupon query</param>
        /// <param name="limit">The maximum number of records to return on this one API call. (Max 200) (optional, default to 100)</param>
        /// <param name="offset">Pagination of the record set.  Offset is a zero based index. (optional, default to 0)</param>
        /// <param name="sort">The sort order of the coupons.  See Sorting documentation for examples of using multiple values and sorting by ascending and descending. (optional)</param>
        /// <param name="expand">The object expansion to perform on the result.  See documentation for examples (optional)</param>
        /// <returns>Task of ApiResponse (CouponsResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CouponsResponse>> GetCouponsByQueryAsyncWithHttpInfo (CouponQuery couponQuery, int? limit = null, int? offset = null, string sort = null, string expand = null)
        {
            // verify the required parameter 'couponQuery' is set
            if (couponQuery == null)
                throw new ApiException(400, "Missing required parameter 'couponQuery' when calling CouponApi->GetCouponsByQuery");

            var localVarPath = "/coupon/coupons/query";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "_limit", limit)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "_offset", offset)); // query parameter
            if (sort != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "_sort", sort)); // query parameter
            if (expand != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "_expand", expand)); // query parameter
            if (couponQuery != null && couponQuery.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(couponQuery); // http body (model) parameter
            }
            else
            {
                localVarPostBody = couponQuery; // byte array
            }

            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCouponsByQuery", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CouponsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CouponsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CouponsResponse)));
        }

        /// <summary>
        /// Retrieve values needed for a coupon editor Retrieve values needed for a coupon editor 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>CouponEditorValues</returns>
        public CouponEditorValues GetEditorValues ()
        {
             ApiResponse<CouponEditorValues> localVarResponse = GetEditorValuesWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve values needed for a coupon editor Retrieve values needed for a coupon editor 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of CouponEditorValues</returns>
        public ApiResponse< CouponEditorValues > GetEditorValuesWithHttpInfo ()
        {

            var localVarPath = "/coupon/editor_values";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetEditorValues", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CouponEditorValues>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CouponEditorValues) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CouponEditorValues)));
        }

        /// <summary>
        /// Retrieve values needed for a coupon editor Retrieve values needed for a coupon editor 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of CouponEditorValues</returns>
        public async System.Threading.Tasks.Task<CouponEditorValues> GetEditorValuesAsync ()
        {
             ApiResponse<CouponEditorValues> localVarResponse = await GetEditorValuesAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieve values needed for a coupon editor Retrieve values needed for a coupon editor 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (CouponEditorValues)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CouponEditorValues>> GetEditorValuesAsyncWithHttpInfo ()
        {

            var localVarPath = "/coupon/editor_values";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetEditorValues", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CouponEditorValues>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CouponEditorValues) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CouponEditorValues)));
        }

        /// <summary>
        /// Insert a coupon Insert a coupon on the UltraCart account. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="coupon">Coupon to insert</param>
        /// <param name="expand">The object expansion to perform on the result.  See documentation for examples (optional)</param>
        /// <returns>CouponResponse</returns>
        public CouponResponse InsertCoupon (Coupon coupon, string expand = null)
        {
             ApiResponse<CouponResponse> localVarResponse = InsertCouponWithHttpInfo(coupon, expand);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Insert a coupon Insert a coupon on the UltraCart account. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="coupon">Coupon to insert</param>
        /// <param name="expand">The object expansion to perform on the result.  See documentation for examples (optional)</param>
        /// <returns>ApiResponse of CouponResponse</returns>
        public ApiResponse< CouponResponse > InsertCouponWithHttpInfo (Coupon coupon, string expand = null)
        {
            // verify the required parameter 'coupon' is set
            if (coupon == null)
                throw new ApiException(400, "Missing required parameter 'coupon' when calling CouponApi->InsertCoupon");

            var localVarPath = "/coupon/coupons";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json; charset=UTF-8"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (expand != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "_expand", expand)); // query parameter
            if (coupon != null && coupon.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(coupon); // http body (model) parameter
            }
            else
            {
                localVarPostBody = coupon; // byte array
            }

            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("InsertCoupon", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CouponResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CouponResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CouponResponse)));
        }

        /// <summary>
        /// Insert a coupon Insert a coupon on the UltraCart account. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="coupon">Coupon to insert</param>
        /// <param name="expand">The object expansion to perform on the result.  See documentation for examples (optional)</param>
        /// <returns>Task of CouponResponse</returns>
        public async System.Threading.Tasks.Task<CouponResponse> InsertCouponAsync (Coupon coupon, string expand = null)
        {
             ApiResponse<CouponResponse> localVarResponse = await InsertCouponAsyncWithHttpInfo(coupon, expand);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Insert a coupon Insert a coupon on the UltraCart account. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="coupon">Coupon to insert</param>
        /// <param name="expand">The object expansion to perform on the result.  See documentation for examples (optional)</param>
        /// <returns>Task of ApiResponse (CouponResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CouponResponse>> InsertCouponAsyncWithHttpInfo (Coupon coupon, string expand = null)
        {
            // verify the required parameter 'coupon' is set
            if (coupon == null)
                throw new ApiException(400, "Missing required parameter 'coupon' when calling CouponApi->InsertCoupon");

            var localVarPath = "/coupon/coupons";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json; charset=UTF-8"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (expand != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "_expand", expand)); // query parameter
            if (coupon != null && coupon.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(coupon); // http body (model) parameter
            }
            else
            {
                localVarPostBody = coupon; // byte array
            }

            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("InsertCoupon", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CouponResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CouponResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CouponResponse)));
        }

        /// <summary>
        /// Insert multiple coupons Insert multiple coupon on the UltraCart account. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="couponsRequest">Coupons to insert (maximum 50)</param>
        /// <param name="expand">The object expansion to perform on the result.  See documentation for examples (optional)</param>
        /// <param name="placeholders">Whether or not placeholder values should be returned in the result.  Useful for UIs that consume this REST API. (optional)</param>
        /// <returns>CouponsResponse</returns>
        public CouponsResponse InsertCoupons (CouponsRequest couponsRequest, string expand = null, bool? placeholders = null)
        {
             ApiResponse<CouponsResponse> localVarResponse = InsertCouponsWithHttpInfo(couponsRequest, expand, placeholders);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Insert multiple coupons Insert multiple coupon on the UltraCart account. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="couponsRequest">Coupons to insert (maximum 50)</param>
        /// <param name="expand">The object expansion to perform on the result.  See documentation for examples (optional)</param>
        /// <param name="placeholders">Whether or not placeholder values should be returned in the result.  Useful for UIs that consume this REST API. (optional)</param>
        /// <returns>ApiResponse of CouponsResponse</returns>
        public ApiResponse< CouponsResponse > InsertCouponsWithHttpInfo (CouponsRequest couponsRequest, string expand = null, bool? placeholders = null)
        {
            // verify the required parameter 'couponsRequest' is set
            if (couponsRequest == null)
                throw new ApiException(400, "Missing required parameter 'couponsRequest' when calling CouponApi->InsertCoupons");

            var localVarPath = "/coupon/coupons/batch";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json; charset=UTF-8"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (expand != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "_expand", expand)); // query parameter
            if (placeholders != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "_placeholders", placeholders)); // query parameter
            if (couponsRequest != null && couponsRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(couponsRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = couponsRequest; // byte array
            }

            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("InsertCoupons", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CouponsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CouponsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CouponsResponse)));
        }

        /// <summary>
        /// Insert multiple coupons Insert multiple coupon on the UltraCart account. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="couponsRequest">Coupons to insert (maximum 50)</param>
        /// <param name="expand">The object expansion to perform on the result.  See documentation for examples (optional)</param>
        /// <param name="placeholders">Whether or not placeholder values should be returned in the result.  Useful for UIs that consume this REST API. (optional)</param>
        /// <returns>Task of CouponsResponse</returns>
        public async System.Threading.Tasks.Task<CouponsResponse> InsertCouponsAsync (CouponsRequest couponsRequest, string expand = null, bool? placeholders = null)
        {
             ApiResponse<CouponsResponse> localVarResponse = await InsertCouponsAsyncWithHttpInfo(couponsRequest, expand, placeholders);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Insert multiple coupons Insert multiple coupon on the UltraCart account. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="couponsRequest">Coupons to insert (maximum 50)</param>
        /// <param name="expand">The object expansion to perform on the result.  See documentation for examples (optional)</param>
        /// <param name="placeholders">Whether or not placeholder values should be returned in the result.  Useful for UIs that consume this REST API. (optional)</param>
        /// <returns>Task of ApiResponse (CouponsResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CouponsResponse>> InsertCouponsAsyncWithHttpInfo (CouponsRequest couponsRequest, string expand = null, bool? placeholders = null)
        {
            // verify the required parameter 'couponsRequest' is set
            if (couponsRequest == null)
                throw new ApiException(400, "Missing required parameter 'couponsRequest' when calling CouponApi->InsertCoupons");

            var localVarPath = "/coupon/coupons/batch";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json; charset=UTF-8"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (expand != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "_expand", expand)); // query parameter
            if (placeholders != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "_placeholders", placeholders)); // query parameter
            if (couponsRequest != null && couponsRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(couponsRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = couponsRequest; // byte array
            }

            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("InsertCoupons", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CouponsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CouponsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CouponsResponse)));
        }

        /// <summary>
        /// Searches for items to display within a coupon editor and assign to coupons Searches for items to display within a coupon editor and assign to coupons 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="s"> (optional)</param>
        /// <param name="m"> (optional)</param>
        /// <returns>CouponItemSearchResultsResponse</returns>
        public CouponItemSearchResultsResponse SearchItems (string s = null, int? m = null)
        {
             ApiResponse<CouponItemSearchResultsResponse> localVarResponse = SearchItemsWithHttpInfo(s, m);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Searches for items to display within a coupon editor and assign to coupons Searches for items to display within a coupon editor and assign to coupons 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="s"> (optional)</param>
        /// <param name="m"> (optional)</param>
        /// <returns>ApiResponse of CouponItemSearchResultsResponse</returns>
        public ApiResponse< CouponItemSearchResultsResponse > SearchItemsWithHttpInfo (string s = null, int? m = null)
        {

            var localVarPath = "/coupon/searchItems";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (s != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "s", s)); // query parameter
            if (m != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "m", m)); // query parameter

            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SearchItems", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CouponItemSearchResultsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CouponItemSearchResultsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CouponItemSearchResultsResponse)));
        }

        /// <summary>
        /// Searches for items to display within a coupon editor and assign to coupons Searches for items to display within a coupon editor and assign to coupons 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="s"> (optional)</param>
        /// <param name="m"> (optional)</param>
        /// <returns>Task of CouponItemSearchResultsResponse</returns>
        public async System.Threading.Tasks.Task<CouponItemSearchResultsResponse> SearchItemsAsync (string s = null, int? m = null)
        {
             ApiResponse<CouponItemSearchResultsResponse> localVarResponse = await SearchItemsAsyncWithHttpInfo(s, m);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Searches for items to display within a coupon editor and assign to coupons Searches for items to display within a coupon editor and assign to coupons 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="s"> (optional)</param>
        /// <param name="m"> (optional)</param>
        /// <returns>Task of ApiResponse (CouponItemSearchResultsResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CouponItemSearchResultsResponse>> SearchItemsAsyncWithHttpInfo (string s = null, int? m = null)
        {

            var localVarPath = "/coupon/searchItems";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (s != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "s", s)); // query parameter
            if (m != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "m", m)); // query parameter

            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SearchItems", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CouponItemSearchResultsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CouponItemSearchResultsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CouponItemSearchResultsResponse)));
        }

        /// <summary>
        /// Update auto apply rules and conditions Update auto apply rules and conditions 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="conditions">Conditions</param>
        /// <returns></returns>
        public void UpdateAutoApply (CouponAutoApplyConditions conditions)
        {
             UpdateAutoApplyWithHttpInfo(conditions);
        }

        /// <summary>
        /// Update auto apply rules and conditions Update auto apply rules and conditions 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="conditions">Conditions</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> UpdateAutoApplyWithHttpInfo (CouponAutoApplyConditions conditions)
        {
            // verify the required parameter 'conditions' is set
            if (conditions == null)
                throw new ApiException(400, "Missing required parameter 'conditions' when calling CouponApi->UpdateAutoApply");

            var localVarPath = "/coupon/auto_apply";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (conditions != null && conditions.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(conditions); // http body (model) parameter
            }
            else
            {
                localVarPostBody = conditions; // byte array
            }

            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateAutoApply", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Update auto apply rules and conditions Update auto apply rules and conditions 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="conditions">Conditions</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UpdateAutoApplyAsync (CouponAutoApplyConditions conditions)
        {
             await UpdateAutoApplyAsyncWithHttpInfo(conditions);

        }

        /// <summary>
        /// Update auto apply rules and conditions Update auto apply rules and conditions 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="conditions">Conditions</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> UpdateAutoApplyAsyncWithHttpInfo (CouponAutoApplyConditions conditions)
        {
            // verify the required parameter 'conditions' is set
            if (conditions == null)
                throw new ApiException(400, "Missing required parameter 'conditions' when calling CouponApi->UpdateAutoApply");

            var localVarPath = "/coupon/auto_apply";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (conditions != null && conditions.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(conditions); // http body (model) parameter
            }
            else
            {
                localVarPostBody = conditions; // byte array
            }

            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateAutoApply", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Update a coupon Update a coupon on the UltraCart account. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="coupon">Coupon to update</param>
        /// <param name="couponOid">The coupon_oid to update.</param>
        /// <param name="expand">The object expansion to perform on the result.  See documentation for examples (optional)</param>
        /// <returns>CouponResponse</returns>
        public CouponResponse UpdateCoupon (Coupon coupon, int? couponOid, string expand = null)
        {
             ApiResponse<CouponResponse> localVarResponse = UpdateCouponWithHttpInfo(coupon, couponOid, expand);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update a coupon Update a coupon on the UltraCart account. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="coupon">Coupon to update</param>
        /// <param name="couponOid">The coupon_oid to update.</param>
        /// <param name="expand">The object expansion to perform on the result.  See documentation for examples (optional)</param>
        /// <returns>ApiResponse of CouponResponse</returns>
        public ApiResponse< CouponResponse > UpdateCouponWithHttpInfo (Coupon coupon, int? couponOid, string expand = null)
        {
            // verify the required parameter 'coupon' is set
            if (coupon == null)
                throw new ApiException(400, "Missing required parameter 'coupon' when calling CouponApi->UpdateCoupon");
            // verify the required parameter 'couponOid' is set
            if (couponOid == null)
                throw new ApiException(400, "Missing required parameter 'couponOid' when calling CouponApi->UpdateCoupon");

            var localVarPath = "/coupon/coupons/{coupon_oid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json; charset=UTF-8"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (couponOid != null) localVarPathParams.Add("coupon_oid", this.Configuration.ApiClient.ParameterToString(couponOid)); // path parameter
            if (expand != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "_expand", expand)); // query parameter
            if (coupon != null && coupon.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(coupon); // http body (model) parameter
            }
            else
            {
                localVarPostBody = coupon; // byte array
            }

            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateCoupon", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CouponResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CouponResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CouponResponse)));
        }

        /// <summary>
        /// Update a coupon Update a coupon on the UltraCart account. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="coupon">Coupon to update</param>
        /// <param name="couponOid">The coupon_oid to update.</param>
        /// <param name="expand">The object expansion to perform on the result.  See documentation for examples (optional)</param>
        /// <returns>Task of CouponResponse</returns>
        public async System.Threading.Tasks.Task<CouponResponse> UpdateCouponAsync (Coupon coupon, int? couponOid, string expand = null)
        {
             ApiResponse<CouponResponse> localVarResponse = await UpdateCouponAsyncWithHttpInfo(coupon, couponOid, expand);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update a coupon Update a coupon on the UltraCart account. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="coupon">Coupon to update</param>
        /// <param name="couponOid">The coupon_oid to update.</param>
        /// <param name="expand">The object expansion to perform on the result.  See documentation for examples (optional)</param>
        /// <returns>Task of ApiResponse (CouponResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CouponResponse>> UpdateCouponAsyncWithHttpInfo (Coupon coupon, int? couponOid, string expand = null)
        {
            // verify the required parameter 'coupon' is set
            if (coupon == null)
                throw new ApiException(400, "Missing required parameter 'coupon' when calling CouponApi->UpdateCoupon");
            // verify the required parameter 'couponOid' is set
            if (couponOid == null)
                throw new ApiException(400, "Missing required parameter 'couponOid' when calling CouponApi->UpdateCoupon");

            var localVarPath = "/coupon/coupons/{coupon_oid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json; charset=UTF-8"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (couponOid != null) localVarPathParams.Add("coupon_oid", this.Configuration.ApiClient.ParameterToString(couponOid)); // path parameter
            if (expand != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "_expand", expand)); // query parameter
            if (coupon != null && coupon.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(coupon); // http body (model) parameter
            }
            else
            {
                localVarPostBody = coupon; // byte array
            }

            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateCoupon", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CouponResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CouponResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CouponResponse)));
        }

        /// <summary>
        /// Update multiple coupons Update multiple coupon on the UltraCart account. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="couponsRequest">Coupons to update (synchronous maximum 50 / asynchronous maximum 100)</param>
        /// <param name="expand">The object expansion to perform on the result.  See documentation for examples (optional)</param>
        /// <param name="placeholders">Whether or not placeholder values should be returned in the result.  Useful for UIs that consume this REST API. (optional)</param>
        /// <param name="async">True if the operation should be run async.  No result returned (optional)</param>
        /// <returns>CouponsResponse</returns>
        public CouponsResponse UpdateCoupons (CouponsRequest couponsRequest, string expand = null, bool? placeholders = null, bool? async = null)
        {
             ApiResponse<CouponsResponse> localVarResponse = UpdateCouponsWithHttpInfo(couponsRequest, expand, placeholders, async);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update multiple coupons Update multiple coupon on the UltraCart account. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="couponsRequest">Coupons to update (synchronous maximum 50 / asynchronous maximum 100)</param>
        /// <param name="expand">The object expansion to perform on the result.  See documentation for examples (optional)</param>
        /// <param name="placeholders">Whether or not placeholder values should be returned in the result.  Useful for UIs that consume this REST API. (optional)</param>
        /// <param name="async">True if the operation should be run async.  No result returned (optional)</param>
        /// <returns>ApiResponse of CouponsResponse</returns>
        public ApiResponse< CouponsResponse > UpdateCouponsWithHttpInfo (CouponsRequest couponsRequest, string expand = null, bool? placeholders = null, bool? async = null)
        {
            // verify the required parameter 'couponsRequest' is set
            if (couponsRequest == null)
                throw new ApiException(400, "Missing required parameter 'couponsRequest' when calling CouponApi->UpdateCoupons");

            var localVarPath = "/coupon/coupons/batch";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json; charset=UTF-8"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (expand != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "_expand", expand)); // query parameter
            if (placeholders != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "_placeholders", placeholders)); // query parameter
            if (async != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "_async", async)); // query parameter
            if (couponsRequest != null && couponsRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(couponsRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = couponsRequest; // byte array
            }

            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateCoupons", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CouponsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CouponsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CouponsResponse)));
        }

        /// <summary>
        /// Update multiple coupons Update multiple coupon on the UltraCart account. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="couponsRequest">Coupons to update (synchronous maximum 50 / asynchronous maximum 100)</param>
        /// <param name="expand">The object expansion to perform on the result.  See documentation for examples (optional)</param>
        /// <param name="placeholders">Whether or not placeholder values should be returned in the result.  Useful for UIs that consume this REST API. (optional)</param>
        /// <param name="async">True if the operation should be run async.  No result returned (optional)</param>
        /// <returns>Task of CouponsResponse</returns>
        public async System.Threading.Tasks.Task<CouponsResponse> UpdateCouponsAsync (CouponsRequest couponsRequest, string expand = null, bool? placeholders = null, bool? async = null)
        {
             ApiResponse<CouponsResponse> localVarResponse = await UpdateCouponsAsyncWithHttpInfo(couponsRequest, expand, placeholders, async);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update multiple coupons Update multiple coupon on the UltraCart account. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="couponsRequest">Coupons to update (synchronous maximum 50 / asynchronous maximum 100)</param>
        /// <param name="expand">The object expansion to perform on the result.  See documentation for examples (optional)</param>
        /// <param name="placeholders">Whether or not placeholder values should be returned in the result.  Useful for UIs that consume this REST API. (optional)</param>
        /// <param name="async">True if the operation should be run async.  No result returned (optional)</param>
        /// <returns>Task of ApiResponse (CouponsResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CouponsResponse>> UpdateCouponsAsyncWithHttpInfo (CouponsRequest couponsRequest, string expand = null, bool? placeholders = null, bool? async = null)
        {
            // verify the required parameter 'couponsRequest' is set
            if (couponsRequest == null)
                throw new ApiException(400, "Missing required parameter 'couponsRequest' when calling CouponApi->UpdateCoupons");

            var localVarPath = "/coupon/coupons/batch";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json; charset=UTF-8"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (expand != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "_expand", expand)); // query parameter
            if (placeholders != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "_placeholders", placeholders)); // query parameter
            if (async != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "_async", async)); // query parameter
            if (couponsRequest != null && couponsRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(couponsRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = couponsRequest; // byte array
            }

            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateCoupons", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CouponsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CouponsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CouponsResponse)));
        }

        /// <summary>
        /// Upload one-time codes for a coupon Upload one-time codes for a coupon 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="couponOid">The coupon oid to associate with the provided one-time codes.</param>
        /// <param name="uploadCouponCodesRequest">One-time coupon codes</param>
        /// <returns>UploadCouponCodesResponse</returns>
        public UploadCouponCodesResponse UploadCouponCodes (int? couponOid, UploadCouponCodesRequest uploadCouponCodesRequest)
        {
             ApiResponse<UploadCouponCodesResponse> localVarResponse = UploadCouponCodesWithHttpInfo(couponOid, uploadCouponCodesRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Upload one-time codes for a coupon Upload one-time codes for a coupon 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="couponOid">The coupon oid to associate with the provided one-time codes.</param>
        /// <param name="uploadCouponCodesRequest">One-time coupon codes</param>
        /// <returns>ApiResponse of UploadCouponCodesResponse</returns>
        public ApiResponse< UploadCouponCodesResponse > UploadCouponCodesWithHttpInfo (int? couponOid, UploadCouponCodesRequest uploadCouponCodesRequest)
        {
            // verify the required parameter 'couponOid' is set
            if (couponOid == null)
                throw new ApiException(400, "Missing required parameter 'couponOid' when calling CouponApi->UploadCouponCodes");
            // verify the required parameter 'uploadCouponCodesRequest' is set
            if (uploadCouponCodesRequest == null)
                throw new ApiException(400, "Missing required parameter 'uploadCouponCodesRequest' when calling CouponApi->UploadCouponCodes");

            var localVarPath = "/coupon/coupons/{coupon_oid}/upload_codes";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json; charset=UTF-8"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (couponOid != null) localVarPathParams.Add("coupon_oid", this.Configuration.ApiClient.ParameterToString(couponOid)); // path parameter
            if (uploadCouponCodesRequest != null && uploadCouponCodesRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(uploadCouponCodesRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = uploadCouponCodesRequest; // byte array
            }

            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UploadCouponCodes", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UploadCouponCodesResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (UploadCouponCodesResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(UploadCouponCodesResponse)));
        }

        /// <summary>
        /// Upload one-time codes for a coupon Upload one-time codes for a coupon 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="couponOid">The coupon oid to associate with the provided one-time codes.</param>
        /// <param name="uploadCouponCodesRequest">One-time coupon codes</param>
        /// <returns>Task of UploadCouponCodesResponse</returns>
        public async System.Threading.Tasks.Task<UploadCouponCodesResponse> UploadCouponCodesAsync (int? couponOid, UploadCouponCodesRequest uploadCouponCodesRequest)
        {
             ApiResponse<UploadCouponCodesResponse> localVarResponse = await UploadCouponCodesAsyncWithHttpInfo(couponOid, uploadCouponCodesRequest);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Upload one-time codes for a coupon Upload one-time codes for a coupon 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="couponOid">The coupon oid to associate with the provided one-time codes.</param>
        /// <param name="uploadCouponCodesRequest">One-time coupon codes</param>
        /// <returns>Task of ApiResponse (UploadCouponCodesResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<UploadCouponCodesResponse>> UploadCouponCodesAsyncWithHttpInfo (int? couponOid, UploadCouponCodesRequest uploadCouponCodesRequest)
        {
            // verify the required parameter 'couponOid' is set
            if (couponOid == null)
                throw new ApiException(400, "Missing required parameter 'couponOid' when calling CouponApi->UploadCouponCodes");
            // verify the required parameter 'uploadCouponCodesRequest' is set
            if (uploadCouponCodesRequest == null)
                throw new ApiException(400, "Missing required parameter 'uploadCouponCodesRequest' when calling CouponApi->UploadCouponCodes");

            var localVarPath = "/coupon/coupons/{coupon_oid}/upload_codes";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json; charset=UTF-8"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (couponOid != null) localVarPathParams.Add("coupon_oid", this.Configuration.ApiClient.ParameterToString(couponOid)); // path parameter
            if (uploadCouponCodesRequest != null && uploadCouponCodesRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(uploadCouponCodesRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = uploadCouponCodesRequest; // byte array
            }

            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UploadCouponCodes", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UploadCouponCodesResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (UploadCouponCodesResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(UploadCouponCodesResponse)));
        }

    }
}
