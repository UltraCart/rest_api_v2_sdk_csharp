/* 
 * UltraCart Rest API V2
 *
 * This is the next generation UltraCart REST API...
 *
 * OpenAPI spec version: 2.0.0
 * Contact: support@ultracart.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using com.ultracart.admin.v2.Client;
using com.ultracart.admin.v2.Model;

namespace com.ultracart.admin.v2.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ICustomerApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Retrieve a customer
        /// </summary>
        /// <remarks>
        /// Retrieves a single customer using the specified customer profile oid. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerProfileOid">The customer oid to retrieve.</param>
        /// <param name="expand">The object expansion to perform on the result.  See documentation for examples (optional)</param>
        /// <returns>CustomerResponse</returns>
        CustomerResponse CustomerCustomersCustomerProfileOidGet (int? customerProfileOid, string expand = null);

        /// <summary>
        /// Retrieve a customer
        /// </summary>
        /// <remarks>
        /// Retrieves a single customer using the specified customer profile oid. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerProfileOid">The customer oid to retrieve.</param>
        /// <param name="expand">The object expansion to perform on the result.  See documentation for examples (optional)</param>
        /// <returns>ApiResponse of CustomerResponse</returns>
        ApiResponse<CustomerResponse> CustomerCustomersCustomerProfileOidGetWithHttpInfo (int? customerProfileOid, string expand = null);
        /// <summary>
        /// Update a customer
        /// </summary>
        /// <remarks>
        /// Update a customer on the UltraCart account. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customer">Customer to update</param>
        /// <param name="customerProfileOid">The customer_profile_oid to update.</param>
        /// <returns>CustomerResponse</returns>
        CustomerResponse CustomerCustomersCustomerProfileOidPut (Customer customer, int? customerProfileOid);

        /// <summary>
        /// Update a customer
        /// </summary>
        /// <remarks>
        /// Update a customer on the UltraCart account. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customer">Customer to update</param>
        /// <param name="customerProfileOid">The customer_profile_oid to update.</param>
        /// <returns>ApiResponse of CustomerResponse</returns>
        ApiResponse<CustomerResponse> CustomerCustomersCustomerProfileOidPutWithHttpInfo (Customer customer, int? customerProfileOid);
        /// <summary>
        /// Retrieve customers
        /// </summary>
        /// <remarks>
        /// Retrieves customers from the account.  If no parameters are specified, all customers will be returned.  You will need to make multiple API calls in order to retrieve the entire result set since this API performs result set pagination. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="email">Email (optional)</param>
        /// <param name="qbClass">Quickbooks class (optional)</param>
        /// <param name="quickbooksCode">Quickbooks code (optional)</param>
        /// <param name="lastModifiedDtsStart">Last modified date start (optional)</param>
        /// <param name="lastModifiedDtsEnd">Last modified date end (optional)</param>
        /// <param name="signupDtsStart">Signup date start (optional)</param>
        /// <param name="signupDtsEnd">Signup date end (optional)</param>
        /// <param name="billingFirstName">Billing first name (optional)</param>
        /// <param name="billingLastName">Billing last name (optional)</param>
        /// <param name="billingCompany">Billing company (optional)</param>
        /// <param name="billingCity">Billing city (optional)</param>
        /// <param name="billingState">Billing state (optional)</param>
        /// <param name="billingPostalCode">Billing postal code (optional)</param>
        /// <param name="billingCountryCode">Billing country code (optional)</param>
        /// <param name="billingDayPhone">Billing day phone (optional)</param>
        /// <param name="billingEveningPhone">Billing evening phone (optional)</param>
        /// <param name="shippingFirstName">Shipping first name (optional)</param>
        /// <param name="shippingLastName">Shipping last name (optional)</param>
        /// <param name="shippingCompany">Shipping company (optional)</param>
        /// <param name="shippingCity">Shipping city (optional)</param>
        /// <param name="shippingState">Shipping state (optional)</param>
        /// <param name="shippingPostalCode">Shipping postal code (optional)</param>
        /// <param name="shippingCountryCode">Shipping country code (optional)</param>
        /// <param name="shippingDayPhone">Shipping day phone (optional)</param>
        /// <param name="shippingEveningPhone">Shipping evening phone (optional)</param>
        /// <param name="pricingTierOid">Pricing tier oid (optional)</param>
        /// <param name="pricingTierName">Pricing tier name (optional)</param>
        /// <param name="limit">The maximum number of records to return on this one API call. (Max 200) (optional, default to 100)</param>
        /// <param name="offset">Pagination of the record set.  Offset is a zero based index. (optional, default to 0)</param>
        /// <param name="since">Fetch customers that have been created/modified since this date/time. (optional)</param>
        /// <param name="sort">The sort order of the customers.  See Sorting documentation for examples of using multiple values and sorting by ascending and descending. (optional)</param>
        /// <param name="expand">The object expansion to perform on the result.  See documentation for examples (optional)</param>
        /// <returns>CustomersResponse</returns>
        CustomersResponse CustomerCustomersGet (string email = null, string qbClass = null, string quickbooksCode = null, string lastModifiedDtsStart = null, string lastModifiedDtsEnd = null, string signupDtsStart = null, string signupDtsEnd = null, string billingFirstName = null, string billingLastName = null, string billingCompany = null, string billingCity = null, string billingState = null, string billingPostalCode = null, string billingCountryCode = null, string billingDayPhone = null, string billingEveningPhone = null, string shippingFirstName = null, string shippingLastName = null, string shippingCompany = null, string shippingCity = null, string shippingState = null, string shippingPostalCode = null, string shippingCountryCode = null, string shippingDayPhone = null, string shippingEveningPhone = null, int? pricingTierOid = null, string pricingTierName = null, int? limit = null, int? offset = null, string since = null, string sort = null, string expand = null);

        /// <summary>
        /// Retrieve customers
        /// </summary>
        /// <remarks>
        /// Retrieves customers from the account.  If no parameters are specified, all customers will be returned.  You will need to make multiple API calls in order to retrieve the entire result set since this API performs result set pagination. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="email">Email (optional)</param>
        /// <param name="qbClass">Quickbooks class (optional)</param>
        /// <param name="quickbooksCode">Quickbooks code (optional)</param>
        /// <param name="lastModifiedDtsStart">Last modified date start (optional)</param>
        /// <param name="lastModifiedDtsEnd">Last modified date end (optional)</param>
        /// <param name="signupDtsStart">Signup date start (optional)</param>
        /// <param name="signupDtsEnd">Signup date end (optional)</param>
        /// <param name="billingFirstName">Billing first name (optional)</param>
        /// <param name="billingLastName">Billing last name (optional)</param>
        /// <param name="billingCompany">Billing company (optional)</param>
        /// <param name="billingCity">Billing city (optional)</param>
        /// <param name="billingState">Billing state (optional)</param>
        /// <param name="billingPostalCode">Billing postal code (optional)</param>
        /// <param name="billingCountryCode">Billing country code (optional)</param>
        /// <param name="billingDayPhone">Billing day phone (optional)</param>
        /// <param name="billingEveningPhone">Billing evening phone (optional)</param>
        /// <param name="shippingFirstName">Shipping first name (optional)</param>
        /// <param name="shippingLastName">Shipping last name (optional)</param>
        /// <param name="shippingCompany">Shipping company (optional)</param>
        /// <param name="shippingCity">Shipping city (optional)</param>
        /// <param name="shippingState">Shipping state (optional)</param>
        /// <param name="shippingPostalCode">Shipping postal code (optional)</param>
        /// <param name="shippingCountryCode">Shipping country code (optional)</param>
        /// <param name="shippingDayPhone">Shipping day phone (optional)</param>
        /// <param name="shippingEveningPhone">Shipping evening phone (optional)</param>
        /// <param name="pricingTierOid">Pricing tier oid (optional)</param>
        /// <param name="pricingTierName">Pricing tier name (optional)</param>
        /// <param name="limit">The maximum number of records to return on this one API call. (Max 200) (optional, default to 100)</param>
        /// <param name="offset">Pagination of the record set.  Offset is a zero based index. (optional, default to 0)</param>
        /// <param name="since">Fetch customers that have been created/modified since this date/time. (optional)</param>
        /// <param name="sort">The sort order of the customers.  See Sorting documentation for examples of using multiple values and sorting by ascending and descending. (optional)</param>
        /// <param name="expand">The object expansion to perform on the result.  See documentation for examples (optional)</param>
        /// <returns>ApiResponse of CustomersResponse</returns>
        ApiResponse<CustomersResponse> CustomerCustomersGetWithHttpInfo (string email = null, string qbClass = null, string quickbooksCode = null, string lastModifiedDtsStart = null, string lastModifiedDtsEnd = null, string signupDtsStart = null, string signupDtsEnd = null, string billingFirstName = null, string billingLastName = null, string billingCompany = null, string billingCity = null, string billingState = null, string billingPostalCode = null, string billingCountryCode = null, string billingDayPhone = null, string billingEveningPhone = null, string shippingFirstName = null, string shippingLastName = null, string shippingCompany = null, string shippingCity = null, string shippingState = null, string shippingPostalCode = null, string shippingCountryCode = null, string shippingDayPhone = null, string shippingEveningPhone = null, int? pricingTierOid = null, string pricingTierName = null, int? limit = null, int? offset = null, string since = null, string sort = null, string expand = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Retrieve a customer
        /// </summary>
        /// <remarks>
        /// Retrieves a single customer using the specified customer profile oid. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerProfileOid">The customer oid to retrieve.</param>
        /// <param name="expand">The object expansion to perform on the result.  See documentation for examples (optional)</param>
        /// <returns>Task of CustomerResponse</returns>
        System.Threading.Tasks.Task<CustomerResponse> CustomerCustomersCustomerProfileOidGetAsync (int? customerProfileOid, string expand = null);

        /// <summary>
        /// Retrieve a customer
        /// </summary>
        /// <remarks>
        /// Retrieves a single customer using the specified customer profile oid. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerProfileOid">The customer oid to retrieve.</param>
        /// <param name="expand">The object expansion to perform on the result.  See documentation for examples (optional)</param>
        /// <returns>Task of ApiResponse (CustomerResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CustomerResponse>> CustomerCustomersCustomerProfileOidGetAsyncWithHttpInfo (int? customerProfileOid, string expand = null);
        /// <summary>
        /// Update a customer
        /// </summary>
        /// <remarks>
        /// Update a customer on the UltraCart account. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customer">Customer to update</param>
        /// <param name="customerProfileOid">The customer_profile_oid to update.</param>
        /// <returns>Task of CustomerResponse</returns>
        System.Threading.Tasks.Task<CustomerResponse> CustomerCustomersCustomerProfileOidPutAsync (Customer customer, int? customerProfileOid);

        /// <summary>
        /// Update a customer
        /// </summary>
        /// <remarks>
        /// Update a customer on the UltraCart account. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customer">Customer to update</param>
        /// <param name="customerProfileOid">The customer_profile_oid to update.</param>
        /// <returns>Task of ApiResponse (CustomerResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CustomerResponse>> CustomerCustomersCustomerProfileOidPutAsyncWithHttpInfo (Customer customer, int? customerProfileOid);
        /// <summary>
        /// Retrieve customers
        /// </summary>
        /// <remarks>
        /// Retrieves customers from the account.  If no parameters are specified, all customers will be returned.  You will need to make multiple API calls in order to retrieve the entire result set since this API performs result set pagination. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="email">Email (optional)</param>
        /// <param name="qbClass">Quickbooks class (optional)</param>
        /// <param name="quickbooksCode">Quickbooks code (optional)</param>
        /// <param name="lastModifiedDtsStart">Last modified date start (optional)</param>
        /// <param name="lastModifiedDtsEnd">Last modified date end (optional)</param>
        /// <param name="signupDtsStart">Signup date start (optional)</param>
        /// <param name="signupDtsEnd">Signup date end (optional)</param>
        /// <param name="billingFirstName">Billing first name (optional)</param>
        /// <param name="billingLastName">Billing last name (optional)</param>
        /// <param name="billingCompany">Billing company (optional)</param>
        /// <param name="billingCity">Billing city (optional)</param>
        /// <param name="billingState">Billing state (optional)</param>
        /// <param name="billingPostalCode">Billing postal code (optional)</param>
        /// <param name="billingCountryCode">Billing country code (optional)</param>
        /// <param name="billingDayPhone">Billing day phone (optional)</param>
        /// <param name="billingEveningPhone">Billing evening phone (optional)</param>
        /// <param name="shippingFirstName">Shipping first name (optional)</param>
        /// <param name="shippingLastName">Shipping last name (optional)</param>
        /// <param name="shippingCompany">Shipping company (optional)</param>
        /// <param name="shippingCity">Shipping city (optional)</param>
        /// <param name="shippingState">Shipping state (optional)</param>
        /// <param name="shippingPostalCode">Shipping postal code (optional)</param>
        /// <param name="shippingCountryCode">Shipping country code (optional)</param>
        /// <param name="shippingDayPhone">Shipping day phone (optional)</param>
        /// <param name="shippingEveningPhone">Shipping evening phone (optional)</param>
        /// <param name="pricingTierOid">Pricing tier oid (optional)</param>
        /// <param name="pricingTierName">Pricing tier name (optional)</param>
        /// <param name="limit">The maximum number of records to return on this one API call. (Max 200) (optional, default to 100)</param>
        /// <param name="offset">Pagination of the record set.  Offset is a zero based index. (optional, default to 0)</param>
        /// <param name="since">Fetch customers that have been created/modified since this date/time. (optional)</param>
        /// <param name="sort">The sort order of the customers.  See Sorting documentation for examples of using multiple values and sorting by ascending and descending. (optional)</param>
        /// <param name="expand">The object expansion to perform on the result.  See documentation for examples (optional)</param>
        /// <returns>Task of CustomersResponse</returns>
        System.Threading.Tasks.Task<CustomersResponse> CustomerCustomersGetAsync (string email = null, string qbClass = null, string quickbooksCode = null, string lastModifiedDtsStart = null, string lastModifiedDtsEnd = null, string signupDtsStart = null, string signupDtsEnd = null, string billingFirstName = null, string billingLastName = null, string billingCompany = null, string billingCity = null, string billingState = null, string billingPostalCode = null, string billingCountryCode = null, string billingDayPhone = null, string billingEveningPhone = null, string shippingFirstName = null, string shippingLastName = null, string shippingCompany = null, string shippingCity = null, string shippingState = null, string shippingPostalCode = null, string shippingCountryCode = null, string shippingDayPhone = null, string shippingEveningPhone = null, int? pricingTierOid = null, string pricingTierName = null, int? limit = null, int? offset = null, string since = null, string sort = null, string expand = null);

        /// <summary>
        /// Retrieve customers
        /// </summary>
        /// <remarks>
        /// Retrieves customers from the account.  If no parameters are specified, all customers will be returned.  You will need to make multiple API calls in order to retrieve the entire result set since this API performs result set pagination. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="email">Email (optional)</param>
        /// <param name="qbClass">Quickbooks class (optional)</param>
        /// <param name="quickbooksCode">Quickbooks code (optional)</param>
        /// <param name="lastModifiedDtsStart">Last modified date start (optional)</param>
        /// <param name="lastModifiedDtsEnd">Last modified date end (optional)</param>
        /// <param name="signupDtsStart">Signup date start (optional)</param>
        /// <param name="signupDtsEnd">Signup date end (optional)</param>
        /// <param name="billingFirstName">Billing first name (optional)</param>
        /// <param name="billingLastName">Billing last name (optional)</param>
        /// <param name="billingCompany">Billing company (optional)</param>
        /// <param name="billingCity">Billing city (optional)</param>
        /// <param name="billingState">Billing state (optional)</param>
        /// <param name="billingPostalCode">Billing postal code (optional)</param>
        /// <param name="billingCountryCode">Billing country code (optional)</param>
        /// <param name="billingDayPhone">Billing day phone (optional)</param>
        /// <param name="billingEveningPhone">Billing evening phone (optional)</param>
        /// <param name="shippingFirstName">Shipping first name (optional)</param>
        /// <param name="shippingLastName">Shipping last name (optional)</param>
        /// <param name="shippingCompany">Shipping company (optional)</param>
        /// <param name="shippingCity">Shipping city (optional)</param>
        /// <param name="shippingState">Shipping state (optional)</param>
        /// <param name="shippingPostalCode">Shipping postal code (optional)</param>
        /// <param name="shippingCountryCode">Shipping country code (optional)</param>
        /// <param name="shippingDayPhone">Shipping day phone (optional)</param>
        /// <param name="shippingEveningPhone">Shipping evening phone (optional)</param>
        /// <param name="pricingTierOid">Pricing tier oid (optional)</param>
        /// <param name="pricingTierName">Pricing tier name (optional)</param>
        /// <param name="limit">The maximum number of records to return on this one API call. (Max 200) (optional, default to 100)</param>
        /// <param name="offset">Pagination of the record set.  Offset is a zero based index. (optional, default to 0)</param>
        /// <param name="since">Fetch customers that have been created/modified since this date/time. (optional)</param>
        /// <param name="sort">The sort order of the customers.  See Sorting documentation for examples of using multiple values and sorting by ascending and descending. (optional)</param>
        /// <param name="expand">The object expansion to perform on the result.  See documentation for examples (optional)</param>
        /// <returns>Task of ApiResponse (CustomersResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CustomersResponse>> CustomerCustomersGetAsyncWithHttpInfo (string email = null, string qbClass = null, string quickbooksCode = null, string lastModifiedDtsStart = null, string lastModifiedDtsEnd = null, string signupDtsStart = null, string signupDtsEnd = null, string billingFirstName = null, string billingLastName = null, string billingCompany = null, string billingCity = null, string billingState = null, string billingPostalCode = null, string billingCountryCode = null, string billingDayPhone = null, string billingEveningPhone = null, string shippingFirstName = null, string shippingLastName = null, string shippingCompany = null, string shippingCity = null, string shippingState = null, string shippingPostalCode = null, string shippingCountryCode = null, string shippingDayPhone = null, string shippingEveningPhone = null, int? pricingTierOid = null, string pricingTierName = null, int? limit = null, int? offset = null, string since = null, string sort = null, string expand = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class CustomerApi : ICustomerApi
    {
        private com.ultracart.admin.v2.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="CustomerApi"/> class.
        /// </summary>
        /// <returns></returns>
        public CustomerApi(String basePath)
        {
            this.Configuration = new Configuration(new ApiClient(basePath));

            ExceptionFactory = com.ultracart.admin.v2.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CustomerApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public CustomerApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = com.ultracart.admin.v2.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public com.ultracart.admin.v2.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public Dictionary<String, String> DefaultHeader()
        {
            return this.Configuration.DefaultHeader;
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Retrieve a customer Retrieves a single customer using the specified customer profile oid. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerProfileOid">The customer oid to retrieve.</param>
        /// <param name="expand">The object expansion to perform on the result.  See documentation for examples (optional)</param>
        /// <returns>CustomerResponse</returns>
        public CustomerResponse CustomerCustomersCustomerProfileOidGet (int? customerProfileOid, string expand = null)
        {
             ApiResponse<CustomerResponse> localVarResponse = CustomerCustomersCustomerProfileOidGetWithHttpInfo(customerProfileOid, expand);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve a customer Retrieves a single customer using the specified customer profile oid. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerProfileOid">The customer oid to retrieve.</param>
        /// <param name="expand">The object expansion to perform on the result.  See documentation for examples (optional)</param>
        /// <returns>ApiResponse of CustomerResponse</returns>
        public ApiResponse< CustomerResponse > CustomerCustomersCustomerProfileOidGetWithHttpInfo (int? customerProfileOid, string expand = null)
        {
            // verify the required parameter 'customerProfileOid' is set
            if (customerProfileOid == null)
                throw new ApiException(400, "Missing required parameter 'customerProfileOid' when calling CustomerApi->CustomerCustomersCustomerProfileOidGet");

            var localVarPath = "/customer/customers/{customer_profile_oid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (customerProfileOid != null) localVarPathParams.Add("customer_profile_oid", Configuration.ApiClient.ParameterToString(customerProfileOid)); // path parameter
            if (expand != null) localVarQueryParams.Add("_expand", Configuration.ApiClient.ParameterToString(expand)); // query parameter

            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CustomerCustomersCustomerProfileOidGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CustomerResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CustomerResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CustomerResponse)));
            
        }

        /// <summary>
        /// Retrieve a customer Retrieves a single customer using the specified customer profile oid. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerProfileOid">The customer oid to retrieve.</param>
        /// <param name="expand">The object expansion to perform on the result.  See documentation for examples (optional)</param>
        /// <returns>Task of CustomerResponse</returns>
        public async System.Threading.Tasks.Task<CustomerResponse> CustomerCustomersCustomerProfileOidGetAsync (int? customerProfileOid, string expand = null)
        {
             ApiResponse<CustomerResponse> localVarResponse = await CustomerCustomersCustomerProfileOidGetAsyncWithHttpInfo(customerProfileOid, expand);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieve a customer Retrieves a single customer using the specified customer profile oid. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerProfileOid">The customer oid to retrieve.</param>
        /// <param name="expand">The object expansion to perform on the result.  See documentation for examples (optional)</param>
        /// <returns>Task of ApiResponse (CustomerResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CustomerResponse>> CustomerCustomersCustomerProfileOidGetAsyncWithHttpInfo (int? customerProfileOid, string expand = null)
        {
            // verify the required parameter 'customerProfileOid' is set
            if (customerProfileOid == null)
                throw new ApiException(400, "Missing required parameter 'customerProfileOid' when calling CustomerApi->CustomerCustomersCustomerProfileOidGet");

            var localVarPath = "/customer/customers/{customer_profile_oid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (customerProfileOid != null) localVarPathParams.Add("customer_profile_oid", Configuration.ApiClient.ParameterToString(customerProfileOid)); // path parameter
            if (expand != null) localVarQueryParams.Add("_expand", Configuration.ApiClient.ParameterToString(expand)); // query parameter

            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CustomerCustomersCustomerProfileOidGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CustomerResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CustomerResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CustomerResponse)));
            
        }

        /// <summary>
        /// Update a customer Update a customer on the UltraCart account. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customer">Customer to update</param>
        /// <param name="customerProfileOid">The customer_profile_oid to update.</param>
        /// <returns>CustomerResponse</returns>
        public CustomerResponse CustomerCustomersCustomerProfileOidPut (Customer customer, int? customerProfileOid)
        {
             ApiResponse<CustomerResponse> localVarResponse = CustomerCustomersCustomerProfileOidPutWithHttpInfo(customer, customerProfileOid);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update a customer Update a customer on the UltraCart account. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customer">Customer to update</param>
        /// <param name="customerProfileOid">The customer_profile_oid to update.</param>
        /// <returns>ApiResponse of CustomerResponse</returns>
        public ApiResponse< CustomerResponse > CustomerCustomersCustomerProfileOidPutWithHttpInfo (Customer customer, int? customerProfileOid)
        {
            // verify the required parameter 'customer' is set
            if (customer == null)
                throw new ApiException(400, "Missing required parameter 'customer' when calling CustomerApi->CustomerCustomersCustomerProfileOidPut");
            // verify the required parameter 'customerProfileOid' is set
            if (customerProfileOid == null)
                throw new ApiException(400, "Missing required parameter 'customerProfileOid' when calling CustomerApi->CustomerCustomersCustomerProfileOidPut");

            var localVarPath = "/customer/customers/{customer_profile_oid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json; charset=UTF-8"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (customerProfileOid != null) localVarPathParams.Add("customer_profile_oid", Configuration.ApiClient.ParameterToString(customerProfileOid)); // path parameter
            if (customer != null && customer.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(customer); // http body (model) parameter
            }
            else
            {
                localVarPostBody = customer; // byte array
            }

            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CustomerCustomersCustomerProfileOidPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CustomerResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CustomerResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CustomerResponse)));
            
        }

        /// <summary>
        /// Update a customer Update a customer on the UltraCart account. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customer">Customer to update</param>
        /// <param name="customerProfileOid">The customer_profile_oid to update.</param>
        /// <returns>Task of CustomerResponse</returns>
        public async System.Threading.Tasks.Task<CustomerResponse> CustomerCustomersCustomerProfileOidPutAsync (Customer customer, int? customerProfileOid)
        {
             ApiResponse<CustomerResponse> localVarResponse = await CustomerCustomersCustomerProfileOidPutAsyncWithHttpInfo(customer, customerProfileOid);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update a customer Update a customer on the UltraCart account. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customer">Customer to update</param>
        /// <param name="customerProfileOid">The customer_profile_oid to update.</param>
        /// <returns>Task of ApiResponse (CustomerResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CustomerResponse>> CustomerCustomersCustomerProfileOidPutAsyncWithHttpInfo (Customer customer, int? customerProfileOid)
        {
            // verify the required parameter 'customer' is set
            if (customer == null)
                throw new ApiException(400, "Missing required parameter 'customer' when calling CustomerApi->CustomerCustomersCustomerProfileOidPut");
            // verify the required parameter 'customerProfileOid' is set
            if (customerProfileOid == null)
                throw new ApiException(400, "Missing required parameter 'customerProfileOid' when calling CustomerApi->CustomerCustomersCustomerProfileOidPut");

            var localVarPath = "/customer/customers/{customer_profile_oid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json; charset=UTF-8"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (customerProfileOid != null) localVarPathParams.Add("customer_profile_oid", Configuration.ApiClient.ParameterToString(customerProfileOid)); // path parameter
            if (customer != null && customer.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(customer); // http body (model) parameter
            }
            else
            {
                localVarPostBody = customer; // byte array
            }

            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CustomerCustomersCustomerProfileOidPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CustomerResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CustomerResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CustomerResponse)));
            
        }

        /// <summary>
        /// Retrieve customers Retrieves customers from the account.  If no parameters are specified, all customers will be returned.  You will need to make multiple API calls in order to retrieve the entire result set since this API performs result set pagination. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="email">Email (optional)</param>
        /// <param name="qbClass">Quickbooks class (optional)</param>
        /// <param name="quickbooksCode">Quickbooks code (optional)</param>
        /// <param name="lastModifiedDtsStart">Last modified date start (optional)</param>
        /// <param name="lastModifiedDtsEnd">Last modified date end (optional)</param>
        /// <param name="signupDtsStart">Signup date start (optional)</param>
        /// <param name="signupDtsEnd">Signup date end (optional)</param>
        /// <param name="billingFirstName">Billing first name (optional)</param>
        /// <param name="billingLastName">Billing last name (optional)</param>
        /// <param name="billingCompany">Billing company (optional)</param>
        /// <param name="billingCity">Billing city (optional)</param>
        /// <param name="billingState">Billing state (optional)</param>
        /// <param name="billingPostalCode">Billing postal code (optional)</param>
        /// <param name="billingCountryCode">Billing country code (optional)</param>
        /// <param name="billingDayPhone">Billing day phone (optional)</param>
        /// <param name="billingEveningPhone">Billing evening phone (optional)</param>
        /// <param name="shippingFirstName">Shipping first name (optional)</param>
        /// <param name="shippingLastName">Shipping last name (optional)</param>
        /// <param name="shippingCompany">Shipping company (optional)</param>
        /// <param name="shippingCity">Shipping city (optional)</param>
        /// <param name="shippingState">Shipping state (optional)</param>
        /// <param name="shippingPostalCode">Shipping postal code (optional)</param>
        /// <param name="shippingCountryCode">Shipping country code (optional)</param>
        /// <param name="shippingDayPhone">Shipping day phone (optional)</param>
        /// <param name="shippingEveningPhone">Shipping evening phone (optional)</param>
        /// <param name="pricingTierOid">Pricing tier oid (optional)</param>
        /// <param name="pricingTierName">Pricing tier name (optional)</param>
        /// <param name="limit">The maximum number of records to return on this one API call. (Max 200) (optional, default to 100)</param>
        /// <param name="offset">Pagination of the record set.  Offset is a zero based index. (optional, default to 0)</param>
        /// <param name="since">Fetch customers that have been created/modified since this date/time. (optional)</param>
        /// <param name="sort">The sort order of the customers.  See Sorting documentation for examples of using multiple values and sorting by ascending and descending. (optional)</param>
        /// <param name="expand">The object expansion to perform on the result.  See documentation for examples (optional)</param>
        /// <returns>CustomersResponse</returns>
        public CustomersResponse CustomerCustomersGet (string email = null, string qbClass = null, string quickbooksCode = null, string lastModifiedDtsStart = null, string lastModifiedDtsEnd = null, string signupDtsStart = null, string signupDtsEnd = null, string billingFirstName = null, string billingLastName = null, string billingCompany = null, string billingCity = null, string billingState = null, string billingPostalCode = null, string billingCountryCode = null, string billingDayPhone = null, string billingEveningPhone = null, string shippingFirstName = null, string shippingLastName = null, string shippingCompany = null, string shippingCity = null, string shippingState = null, string shippingPostalCode = null, string shippingCountryCode = null, string shippingDayPhone = null, string shippingEveningPhone = null, int? pricingTierOid = null, string pricingTierName = null, int? limit = null, int? offset = null, string since = null, string sort = null, string expand = null)
        {
             ApiResponse<CustomersResponse> localVarResponse = CustomerCustomersGetWithHttpInfo(email, qbClass, quickbooksCode, lastModifiedDtsStart, lastModifiedDtsEnd, signupDtsStart, signupDtsEnd, billingFirstName, billingLastName, billingCompany, billingCity, billingState, billingPostalCode, billingCountryCode, billingDayPhone, billingEveningPhone, shippingFirstName, shippingLastName, shippingCompany, shippingCity, shippingState, shippingPostalCode, shippingCountryCode, shippingDayPhone, shippingEveningPhone, pricingTierOid, pricingTierName, limit, offset, since, sort, expand);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve customers Retrieves customers from the account.  If no parameters are specified, all customers will be returned.  You will need to make multiple API calls in order to retrieve the entire result set since this API performs result set pagination. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="email">Email (optional)</param>
        /// <param name="qbClass">Quickbooks class (optional)</param>
        /// <param name="quickbooksCode">Quickbooks code (optional)</param>
        /// <param name="lastModifiedDtsStart">Last modified date start (optional)</param>
        /// <param name="lastModifiedDtsEnd">Last modified date end (optional)</param>
        /// <param name="signupDtsStart">Signup date start (optional)</param>
        /// <param name="signupDtsEnd">Signup date end (optional)</param>
        /// <param name="billingFirstName">Billing first name (optional)</param>
        /// <param name="billingLastName">Billing last name (optional)</param>
        /// <param name="billingCompany">Billing company (optional)</param>
        /// <param name="billingCity">Billing city (optional)</param>
        /// <param name="billingState">Billing state (optional)</param>
        /// <param name="billingPostalCode">Billing postal code (optional)</param>
        /// <param name="billingCountryCode">Billing country code (optional)</param>
        /// <param name="billingDayPhone">Billing day phone (optional)</param>
        /// <param name="billingEveningPhone">Billing evening phone (optional)</param>
        /// <param name="shippingFirstName">Shipping first name (optional)</param>
        /// <param name="shippingLastName">Shipping last name (optional)</param>
        /// <param name="shippingCompany">Shipping company (optional)</param>
        /// <param name="shippingCity">Shipping city (optional)</param>
        /// <param name="shippingState">Shipping state (optional)</param>
        /// <param name="shippingPostalCode">Shipping postal code (optional)</param>
        /// <param name="shippingCountryCode">Shipping country code (optional)</param>
        /// <param name="shippingDayPhone">Shipping day phone (optional)</param>
        /// <param name="shippingEveningPhone">Shipping evening phone (optional)</param>
        /// <param name="pricingTierOid">Pricing tier oid (optional)</param>
        /// <param name="pricingTierName">Pricing tier name (optional)</param>
        /// <param name="limit">The maximum number of records to return on this one API call. (Max 200) (optional, default to 100)</param>
        /// <param name="offset">Pagination of the record set.  Offset is a zero based index. (optional, default to 0)</param>
        /// <param name="since">Fetch customers that have been created/modified since this date/time. (optional)</param>
        /// <param name="sort">The sort order of the customers.  See Sorting documentation for examples of using multiple values and sorting by ascending and descending. (optional)</param>
        /// <param name="expand">The object expansion to perform on the result.  See documentation for examples (optional)</param>
        /// <returns>ApiResponse of CustomersResponse</returns>
        public ApiResponse< CustomersResponse > CustomerCustomersGetWithHttpInfo (string email = null, string qbClass = null, string quickbooksCode = null, string lastModifiedDtsStart = null, string lastModifiedDtsEnd = null, string signupDtsStart = null, string signupDtsEnd = null, string billingFirstName = null, string billingLastName = null, string billingCompany = null, string billingCity = null, string billingState = null, string billingPostalCode = null, string billingCountryCode = null, string billingDayPhone = null, string billingEveningPhone = null, string shippingFirstName = null, string shippingLastName = null, string shippingCompany = null, string shippingCity = null, string shippingState = null, string shippingPostalCode = null, string shippingCountryCode = null, string shippingDayPhone = null, string shippingEveningPhone = null, int? pricingTierOid = null, string pricingTierName = null, int? limit = null, int? offset = null, string since = null, string sort = null, string expand = null)
        {

            var localVarPath = "/customer/customers";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (email != null) localVarQueryParams.Add("email", Configuration.ApiClient.ParameterToString(email)); // query parameter
            if (qbClass != null) localVarQueryParams.Add("qb_class", Configuration.ApiClient.ParameterToString(qbClass)); // query parameter
            if (quickbooksCode != null) localVarQueryParams.Add("quickbooks_code", Configuration.ApiClient.ParameterToString(quickbooksCode)); // query parameter
            if (lastModifiedDtsStart != null) localVarQueryParams.Add("last_modified_dts_start", Configuration.ApiClient.ParameterToString(lastModifiedDtsStart)); // query parameter
            if (lastModifiedDtsEnd != null) localVarQueryParams.Add("last_modified_dts_end", Configuration.ApiClient.ParameterToString(lastModifiedDtsEnd)); // query parameter
            if (signupDtsStart != null) localVarQueryParams.Add("signup_dts_start", Configuration.ApiClient.ParameterToString(signupDtsStart)); // query parameter
            if (signupDtsEnd != null) localVarQueryParams.Add("signup_dts_end", Configuration.ApiClient.ParameterToString(signupDtsEnd)); // query parameter
            if (billingFirstName != null) localVarQueryParams.Add("billing_first_name", Configuration.ApiClient.ParameterToString(billingFirstName)); // query parameter
            if (billingLastName != null) localVarQueryParams.Add("billing_last_name", Configuration.ApiClient.ParameterToString(billingLastName)); // query parameter
            if (billingCompany != null) localVarQueryParams.Add("billing_company", Configuration.ApiClient.ParameterToString(billingCompany)); // query parameter
            if (billingCity != null) localVarQueryParams.Add("billing_city", Configuration.ApiClient.ParameterToString(billingCity)); // query parameter
            if (billingState != null) localVarQueryParams.Add("billing_state", Configuration.ApiClient.ParameterToString(billingState)); // query parameter
            if (billingPostalCode != null) localVarQueryParams.Add("billing_postal_code", Configuration.ApiClient.ParameterToString(billingPostalCode)); // query parameter
            if (billingCountryCode != null) localVarQueryParams.Add("billing_country_code", Configuration.ApiClient.ParameterToString(billingCountryCode)); // query parameter
            if (billingDayPhone != null) localVarQueryParams.Add("billing_day_phone", Configuration.ApiClient.ParameterToString(billingDayPhone)); // query parameter
            if (billingEveningPhone != null) localVarQueryParams.Add("billing_evening_phone", Configuration.ApiClient.ParameterToString(billingEveningPhone)); // query parameter
            if (shippingFirstName != null) localVarQueryParams.Add("shipping_first_name", Configuration.ApiClient.ParameterToString(shippingFirstName)); // query parameter
            if (shippingLastName != null) localVarQueryParams.Add("shipping_last_name", Configuration.ApiClient.ParameterToString(shippingLastName)); // query parameter
            if (shippingCompany != null) localVarQueryParams.Add("shipping_company", Configuration.ApiClient.ParameterToString(shippingCompany)); // query parameter
            if (shippingCity != null) localVarQueryParams.Add("shipping_city", Configuration.ApiClient.ParameterToString(shippingCity)); // query parameter
            if (shippingState != null) localVarQueryParams.Add("shipping_state", Configuration.ApiClient.ParameterToString(shippingState)); // query parameter
            if (shippingPostalCode != null) localVarQueryParams.Add("shipping_postal_code", Configuration.ApiClient.ParameterToString(shippingPostalCode)); // query parameter
            if (shippingCountryCode != null) localVarQueryParams.Add("shipping_country_code", Configuration.ApiClient.ParameterToString(shippingCountryCode)); // query parameter
            if (shippingDayPhone != null) localVarQueryParams.Add("shipping_day_phone", Configuration.ApiClient.ParameterToString(shippingDayPhone)); // query parameter
            if (shippingEveningPhone != null) localVarQueryParams.Add("shipping_evening_phone", Configuration.ApiClient.ParameterToString(shippingEveningPhone)); // query parameter
            if (pricingTierOid != null) localVarQueryParams.Add("pricing_tier_oid", Configuration.ApiClient.ParameterToString(pricingTierOid)); // query parameter
            if (pricingTierName != null) localVarQueryParams.Add("pricing_tier_name", Configuration.ApiClient.ParameterToString(pricingTierName)); // query parameter
            if (limit != null) localVarQueryParams.Add("_limit", Configuration.ApiClient.ParameterToString(limit)); // query parameter
            if (offset != null) localVarQueryParams.Add("_offset", Configuration.ApiClient.ParameterToString(offset)); // query parameter
            if (since != null) localVarQueryParams.Add("_since", Configuration.ApiClient.ParameterToString(since)); // query parameter
            if (sort != null) localVarQueryParams.Add("_sort", Configuration.ApiClient.ParameterToString(sort)); // query parameter
            if (expand != null) localVarQueryParams.Add("_expand", Configuration.ApiClient.ParameterToString(expand)); // query parameter

            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CustomerCustomersGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CustomersResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CustomersResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CustomersResponse)));
            
        }

        /// <summary>
        /// Retrieve customers Retrieves customers from the account.  If no parameters are specified, all customers will be returned.  You will need to make multiple API calls in order to retrieve the entire result set since this API performs result set pagination. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="email">Email (optional)</param>
        /// <param name="qbClass">Quickbooks class (optional)</param>
        /// <param name="quickbooksCode">Quickbooks code (optional)</param>
        /// <param name="lastModifiedDtsStart">Last modified date start (optional)</param>
        /// <param name="lastModifiedDtsEnd">Last modified date end (optional)</param>
        /// <param name="signupDtsStart">Signup date start (optional)</param>
        /// <param name="signupDtsEnd">Signup date end (optional)</param>
        /// <param name="billingFirstName">Billing first name (optional)</param>
        /// <param name="billingLastName">Billing last name (optional)</param>
        /// <param name="billingCompany">Billing company (optional)</param>
        /// <param name="billingCity">Billing city (optional)</param>
        /// <param name="billingState">Billing state (optional)</param>
        /// <param name="billingPostalCode">Billing postal code (optional)</param>
        /// <param name="billingCountryCode">Billing country code (optional)</param>
        /// <param name="billingDayPhone">Billing day phone (optional)</param>
        /// <param name="billingEveningPhone">Billing evening phone (optional)</param>
        /// <param name="shippingFirstName">Shipping first name (optional)</param>
        /// <param name="shippingLastName">Shipping last name (optional)</param>
        /// <param name="shippingCompany">Shipping company (optional)</param>
        /// <param name="shippingCity">Shipping city (optional)</param>
        /// <param name="shippingState">Shipping state (optional)</param>
        /// <param name="shippingPostalCode">Shipping postal code (optional)</param>
        /// <param name="shippingCountryCode">Shipping country code (optional)</param>
        /// <param name="shippingDayPhone">Shipping day phone (optional)</param>
        /// <param name="shippingEveningPhone">Shipping evening phone (optional)</param>
        /// <param name="pricingTierOid">Pricing tier oid (optional)</param>
        /// <param name="pricingTierName">Pricing tier name (optional)</param>
        /// <param name="limit">The maximum number of records to return on this one API call. (Max 200) (optional, default to 100)</param>
        /// <param name="offset">Pagination of the record set.  Offset is a zero based index. (optional, default to 0)</param>
        /// <param name="since">Fetch customers that have been created/modified since this date/time. (optional)</param>
        /// <param name="sort">The sort order of the customers.  See Sorting documentation for examples of using multiple values and sorting by ascending and descending. (optional)</param>
        /// <param name="expand">The object expansion to perform on the result.  See documentation for examples (optional)</param>
        /// <returns>Task of CustomersResponse</returns>
        public async System.Threading.Tasks.Task<CustomersResponse> CustomerCustomersGetAsync (string email = null, string qbClass = null, string quickbooksCode = null, string lastModifiedDtsStart = null, string lastModifiedDtsEnd = null, string signupDtsStart = null, string signupDtsEnd = null, string billingFirstName = null, string billingLastName = null, string billingCompany = null, string billingCity = null, string billingState = null, string billingPostalCode = null, string billingCountryCode = null, string billingDayPhone = null, string billingEveningPhone = null, string shippingFirstName = null, string shippingLastName = null, string shippingCompany = null, string shippingCity = null, string shippingState = null, string shippingPostalCode = null, string shippingCountryCode = null, string shippingDayPhone = null, string shippingEveningPhone = null, int? pricingTierOid = null, string pricingTierName = null, int? limit = null, int? offset = null, string since = null, string sort = null, string expand = null)
        {
             ApiResponse<CustomersResponse> localVarResponse = await CustomerCustomersGetAsyncWithHttpInfo(email, qbClass, quickbooksCode, lastModifiedDtsStart, lastModifiedDtsEnd, signupDtsStart, signupDtsEnd, billingFirstName, billingLastName, billingCompany, billingCity, billingState, billingPostalCode, billingCountryCode, billingDayPhone, billingEveningPhone, shippingFirstName, shippingLastName, shippingCompany, shippingCity, shippingState, shippingPostalCode, shippingCountryCode, shippingDayPhone, shippingEveningPhone, pricingTierOid, pricingTierName, limit, offset, since, sort, expand);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieve customers Retrieves customers from the account.  If no parameters are specified, all customers will be returned.  You will need to make multiple API calls in order to retrieve the entire result set since this API performs result set pagination. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="email">Email (optional)</param>
        /// <param name="qbClass">Quickbooks class (optional)</param>
        /// <param name="quickbooksCode">Quickbooks code (optional)</param>
        /// <param name="lastModifiedDtsStart">Last modified date start (optional)</param>
        /// <param name="lastModifiedDtsEnd">Last modified date end (optional)</param>
        /// <param name="signupDtsStart">Signup date start (optional)</param>
        /// <param name="signupDtsEnd">Signup date end (optional)</param>
        /// <param name="billingFirstName">Billing first name (optional)</param>
        /// <param name="billingLastName">Billing last name (optional)</param>
        /// <param name="billingCompany">Billing company (optional)</param>
        /// <param name="billingCity">Billing city (optional)</param>
        /// <param name="billingState">Billing state (optional)</param>
        /// <param name="billingPostalCode">Billing postal code (optional)</param>
        /// <param name="billingCountryCode">Billing country code (optional)</param>
        /// <param name="billingDayPhone">Billing day phone (optional)</param>
        /// <param name="billingEveningPhone">Billing evening phone (optional)</param>
        /// <param name="shippingFirstName">Shipping first name (optional)</param>
        /// <param name="shippingLastName">Shipping last name (optional)</param>
        /// <param name="shippingCompany">Shipping company (optional)</param>
        /// <param name="shippingCity">Shipping city (optional)</param>
        /// <param name="shippingState">Shipping state (optional)</param>
        /// <param name="shippingPostalCode">Shipping postal code (optional)</param>
        /// <param name="shippingCountryCode">Shipping country code (optional)</param>
        /// <param name="shippingDayPhone">Shipping day phone (optional)</param>
        /// <param name="shippingEveningPhone">Shipping evening phone (optional)</param>
        /// <param name="pricingTierOid">Pricing tier oid (optional)</param>
        /// <param name="pricingTierName">Pricing tier name (optional)</param>
        /// <param name="limit">The maximum number of records to return on this one API call. (Max 200) (optional, default to 100)</param>
        /// <param name="offset">Pagination of the record set.  Offset is a zero based index. (optional, default to 0)</param>
        /// <param name="since">Fetch customers that have been created/modified since this date/time. (optional)</param>
        /// <param name="sort">The sort order of the customers.  See Sorting documentation for examples of using multiple values and sorting by ascending and descending. (optional)</param>
        /// <param name="expand">The object expansion to perform on the result.  See documentation for examples (optional)</param>
        /// <returns>Task of ApiResponse (CustomersResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CustomersResponse>> CustomerCustomersGetAsyncWithHttpInfo (string email = null, string qbClass = null, string quickbooksCode = null, string lastModifiedDtsStart = null, string lastModifiedDtsEnd = null, string signupDtsStart = null, string signupDtsEnd = null, string billingFirstName = null, string billingLastName = null, string billingCompany = null, string billingCity = null, string billingState = null, string billingPostalCode = null, string billingCountryCode = null, string billingDayPhone = null, string billingEveningPhone = null, string shippingFirstName = null, string shippingLastName = null, string shippingCompany = null, string shippingCity = null, string shippingState = null, string shippingPostalCode = null, string shippingCountryCode = null, string shippingDayPhone = null, string shippingEveningPhone = null, int? pricingTierOid = null, string pricingTierName = null, int? limit = null, int? offset = null, string since = null, string sort = null, string expand = null)
        {

            var localVarPath = "/customer/customers";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (email != null) localVarQueryParams.Add("email", Configuration.ApiClient.ParameterToString(email)); // query parameter
            if (qbClass != null) localVarQueryParams.Add("qb_class", Configuration.ApiClient.ParameterToString(qbClass)); // query parameter
            if (quickbooksCode != null) localVarQueryParams.Add("quickbooks_code", Configuration.ApiClient.ParameterToString(quickbooksCode)); // query parameter
            if (lastModifiedDtsStart != null) localVarQueryParams.Add("last_modified_dts_start", Configuration.ApiClient.ParameterToString(lastModifiedDtsStart)); // query parameter
            if (lastModifiedDtsEnd != null) localVarQueryParams.Add("last_modified_dts_end", Configuration.ApiClient.ParameterToString(lastModifiedDtsEnd)); // query parameter
            if (signupDtsStart != null) localVarQueryParams.Add("signup_dts_start", Configuration.ApiClient.ParameterToString(signupDtsStart)); // query parameter
            if (signupDtsEnd != null) localVarQueryParams.Add("signup_dts_end", Configuration.ApiClient.ParameterToString(signupDtsEnd)); // query parameter
            if (billingFirstName != null) localVarQueryParams.Add("billing_first_name", Configuration.ApiClient.ParameterToString(billingFirstName)); // query parameter
            if (billingLastName != null) localVarQueryParams.Add("billing_last_name", Configuration.ApiClient.ParameterToString(billingLastName)); // query parameter
            if (billingCompany != null) localVarQueryParams.Add("billing_company", Configuration.ApiClient.ParameterToString(billingCompany)); // query parameter
            if (billingCity != null) localVarQueryParams.Add("billing_city", Configuration.ApiClient.ParameterToString(billingCity)); // query parameter
            if (billingState != null) localVarQueryParams.Add("billing_state", Configuration.ApiClient.ParameterToString(billingState)); // query parameter
            if (billingPostalCode != null) localVarQueryParams.Add("billing_postal_code", Configuration.ApiClient.ParameterToString(billingPostalCode)); // query parameter
            if (billingCountryCode != null) localVarQueryParams.Add("billing_country_code", Configuration.ApiClient.ParameterToString(billingCountryCode)); // query parameter
            if (billingDayPhone != null) localVarQueryParams.Add("billing_day_phone", Configuration.ApiClient.ParameterToString(billingDayPhone)); // query parameter
            if (billingEveningPhone != null) localVarQueryParams.Add("billing_evening_phone", Configuration.ApiClient.ParameterToString(billingEveningPhone)); // query parameter
            if (shippingFirstName != null) localVarQueryParams.Add("shipping_first_name", Configuration.ApiClient.ParameterToString(shippingFirstName)); // query parameter
            if (shippingLastName != null) localVarQueryParams.Add("shipping_last_name", Configuration.ApiClient.ParameterToString(shippingLastName)); // query parameter
            if (shippingCompany != null) localVarQueryParams.Add("shipping_company", Configuration.ApiClient.ParameterToString(shippingCompany)); // query parameter
            if (shippingCity != null) localVarQueryParams.Add("shipping_city", Configuration.ApiClient.ParameterToString(shippingCity)); // query parameter
            if (shippingState != null) localVarQueryParams.Add("shipping_state", Configuration.ApiClient.ParameterToString(shippingState)); // query parameter
            if (shippingPostalCode != null) localVarQueryParams.Add("shipping_postal_code", Configuration.ApiClient.ParameterToString(shippingPostalCode)); // query parameter
            if (shippingCountryCode != null) localVarQueryParams.Add("shipping_country_code", Configuration.ApiClient.ParameterToString(shippingCountryCode)); // query parameter
            if (shippingDayPhone != null) localVarQueryParams.Add("shipping_day_phone", Configuration.ApiClient.ParameterToString(shippingDayPhone)); // query parameter
            if (shippingEveningPhone != null) localVarQueryParams.Add("shipping_evening_phone", Configuration.ApiClient.ParameterToString(shippingEveningPhone)); // query parameter
            if (pricingTierOid != null) localVarQueryParams.Add("pricing_tier_oid", Configuration.ApiClient.ParameterToString(pricingTierOid)); // query parameter
            if (pricingTierName != null) localVarQueryParams.Add("pricing_tier_name", Configuration.ApiClient.ParameterToString(pricingTierName)); // query parameter
            if (limit != null) localVarQueryParams.Add("_limit", Configuration.ApiClient.ParameterToString(limit)); // query parameter
            if (offset != null) localVarQueryParams.Add("_offset", Configuration.ApiClient.ParameterToString(offset)); // query parameter
            if (since != null) localVarQueryParams.Add("_since", Configuration.ApiClient.ParameterToString(since)); // query parameter
            if (sort != null) localVarQueryParams.Add("_sort", Configuration.ApiClient.ParameterToString(sort)); // query parameter
            if (expand != null) localVarQueryParams.Add("_expand", Configuration.ApiClient.ParameterToString(expand)); // query parameter

            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CustomerCustomersGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CustomersResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CustomersResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CustomersResponse)));
            
        }

    }
}
