/*
 * UltraCart Rest API V2
 *
 * UltraCart REST API Version 2
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@ultracart.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Threading;
using RestSharp;
using com.ultracart.admin.v2.Client;
using com.ultracart.admin.v2.Model;

namespace com.ultracart.admin.v2.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ICustomerApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Adds store credit to a customer
        /// </summary>
        /// <remarks>
        /// Adds store credit to a customer 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerProfileOid">The customer oid to credit.</param>
        /// <param name="storeCreditRequest">Store credit to add</param>
        /// <returns>BaseResponse</returns>
        BaseResponse AddCustomerStoreCredit (int customerProfileOid, CustomerStoreCreditAddRequest storeCreditRequest);

        /// <summary>
        /// Adds store credit to a customer
        /// </summary>
        /// <remarks>
        /// Adds store credit to a customer 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerProfileOid">The customer oid to credit.</param>
        /// <param name="storeCreditRequest">Store credit to add</param>
        /// <returns>ApiResponse of BaseResponse</returns>
        ApiResponse<BaseResponse> AddCustomerStoreCreditWithHttpInfo (int customerProfileOid, CustomerStoreCreditAddRequest storeCreditRequest);
        /// <summary>
        /// Updates the cashback balance for a customer by updating the internal gift certificate used, creating the gift certificate if needed.
        /// </summary>
        /// <remarks>
        /// Updates the cashback balance for a customer by updating the internal gift certificate used, creating the gift certificate if needed. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerProfileOid">The customer profile oid</param>
        /// <param name="adjustInternalCertificateRequest">adjustInternalCertificateRequest</param>
        /// <returns>AdjustInternalCertificateResponse</returns>
        AdjustInternalCertificateResponse AdjustInternalCertificate (int customerProfileOid, AdjustInternalCertificateRequest adjustInternalCertificateRequest);

        /// <summary>
        /// Updates the cashback balance for a customer by updating the internal gift certificate used, creating the gift certificate if needed.
        /// </summary>
        /// <remarks>
        /// Updates the cashback balance for a customer by updating the internal gift certificate used, creating the gift certificate if needed. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerProfileOid">The customer profile oid</param>
        /// <param name="adjustInternalCertificateRequest">adjustInternalCertificateRequest</param>
        /// <returns>ApiResponse of AdjustInternalCertificateResponse</returns>
        ApiResponse<AdjustInternalCertificateResponse> AdjustInternalCertificateWithHttpInfo (int customerProfileOid, AdjustInternalCertificateRequest adjustInternalCertificateRequest);
        /// <summary>
        /// Delete a customer
        /// </summary>
        /// <remarks>
        /// Delete a customer on the UltraCart account. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerProfileOid">The customer_profile_oid to delete.</param>
        /// <returns></returns>
        void DeleteCustomer (int customerProfileOid);

        /// <summary>
        /// Delete a customer
        /// </summary>
        /// <remarks>
        /// Delete a customer on the UltraCart account. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerProfileOid">The customer_profile_oid to delete.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteCustomerWithHttpInfo (int customerProfileOid);
        /// <summary>
        /// Delete a customer wishlist item
        /// </summary>
        /// <remarks>
        /// Delete a customer wishlist item 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerProfileOid">The customer oid for this wishlist.</param>
        /// <param name="customerWishlistItemOid">The wishlist oid for this wishlist item to delete.</param>
        /// <returns></returns>
        void DeleteWishListItem (int customerProfileOid, int customerWishlistItemOid);

        /// <summary>
        /// Delete a customer wishlist item
        /// </summary>
        /// <remarks>
        /// Delete a customer wishlist item 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerProfileOid">The customer oid for this wishlist.</param>
        /// <param name="customerWishlistItemOid">The wishlist oid for this wishlist item to delete.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteWishListItemWithHttpInfo (int customerProfileOid, int customerWishlistItemOid);
        /// <summary>
        /// Retrieve a customer
        /// </summary>
        /// <remarks>
        /// Retrieves a single customer using the specified customer profile oid. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerProfileOid">The customer oid to retrieve.</param>
        /// <param name="expand">The object expansion to perform on the result.  See documentation for examples (optional)</param>
        /// <returns>CustomerResponse</returns>
        CustomerResponse GetCustomer (int customerProfileOid, string expand = default(string));

        /// <summary>
        /// Retrieve a customer
        /// </summary>
        /// <remarks>
        /// Retrieves a single customer using the specified customer profile oid. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerProfileOid">The customer oid to retrieve.</param>
        /// <param name="expand">The object expansion to perform on the result.  See documentation for examples (optional)</param>
        /// <returns>ApiResponse of CustomerResponse</returns>
        ApiResponse<CustomerResponse> GetCustomerWithHttpInfo (int customerProfileOid, string expand = default(string));
        /// <summary>
        /// Retrieve a customer by Email
        /// </summary>
        /// <remarks>
        /// Retrieves a single customer using the specified customer email address. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="email">The email address of the customer to retrieve.</param>
        /// <param name="expand">The object expansion to perform on the result.  See documentation for examples (optional)</param>
        /// <returns>CustomerResponse</returns>
        CustomerResponse GetCustomerByEmail (string email, string expand = default(string));

        /// <summary>
        /// Retrieve a customer by Email
        /// </summary>
        /// <remarks>
        /// Retrieves a single customer using the specified customer email address. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="email">The email address of the customer to retrieve.</param>
        /// <param name="expand">The object expansion to perform on the result.  See documentation for examples (optional)</param>
        /// <returns>ApiResponse of CustomerResponse</returns>
        ApiResponse<CustomerResponse> GetCustomerByEmailWithHttpInfo (string email, string expand = default(string));
        /// <summary>
        /// Retrieve values needed for a customer profile editor
        /// </summary>
        /// <remarks>
        /// Retrieve values needed for a customer profile editor. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>CustomerEditorValues</returns>
        CustomerEditorValues GetCustomerEditorValues ();

        /// <summary>
        /// Retrieve values needed for a customer profile editor
        /// </summary>
        /// <remarks>
        /// Retrieve values needed for a customer profile editor. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of CustomerEditorValues</returns>
        ApiResponse<CustomerEditorValues> GetCustomerEditorValuesWithHttpInfo ();
        /// <summary>
        /// Retrieve all email lists across all storefronts
        /// </summary>
        /// <remarks>
        /// Retrieve all email lists across all storefronts 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>EmailListsResponse</returns>
        EmailListsResponse GetCustomerEmailLists ();

        /// <summary>
        /// Retrieve all email lists across all storefronts
        /// </summary>
        /// <remarks>
        /// Retrieve all email lists across all storefronts 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of EmailListsResponse</returns>
        ApiResponse<EmailListsResponse> GetCustomerEmailListsWithHttpInfo ();
        /// <summary>
        /// Retrieve the customer store credit accumulated through loyalty programs
        /// </summary>
        /// <remarks>
        /// Retrieve the customer store credit accumulated through loyalty programs 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerProfileOid">The customer oid to retrieve.</param>
        /// <returns>CustomerStoreCreditResponse</returns>
        CustomerStoreCreditResponse GetCustomerStoreCredit (int customerProfileOid);

        /// <summary>
        /// Retrieve the customer store credit accumulated through loyalty programs
        /// </summary>
        /// <remarks>
        /// Retrieve the customer store credit accumulated through loyalty programs 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerProfileOid">The customer oid to retrieve.</param>
        /// <returns>ApiResponse of CustomerStoreCreditResponse</returns>
        ApiResponse<CustomerStoreCreditResponse> GetCustomerStoreCreditWithHttpInfo (int customerProfileOid);
        /// <summary>
        /// Retrieve wishlist items for customer
        /// </summary>
        /// <remarks>
        /// Retrieve wishlist items for customer. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerProfileOid">The customer oid for this wishlist.</param>
        /// <returns>CustomerWishListItemsResponse</returns>
        CustomerWishListItemsResponse GetCustomerWishList (int customerProfileOid);

        /// <summary>
        /// Retrieve wishlist items for customer
        /// </summary>
        /// <remarks>
        /// Retrieve wishlist items for customer. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerProfileOid">The customer oid for this wishlist.</param>
        /// <returns>ApiResponse of CustomerWishListItemsResponse</returns>
        ApiResponse<CustomerWishListItemsResponse> GetCustomerWishListWithHttpInfo (int customerProfileOid);
        /// <summary>
        /// Retrieve wishlist item for customer
        /// </summary>
        /// <remarks>
        /// Retrieve wishlist item for customer. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerProfileOid">The customer oid for this wishlist.</param>
        /// <param name="customerWishlistItemOid">The wishlist oid for this wishlist item.</param>
        /// <returns>CustomerWishListItemResponse</returns>
        CustomerWishListItemResponse GetCustomerWishListItem (int customerProfileOid, int customerWishlistItemOid);

        /// <summary>
        /// Retrieve wishlist item for customer
        /// </summary>
        /// <remarks>
        /// Retrieve wishlist item for customer. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerProfileOid">The customer oid for this wishlist.</param>
        /// <param name="customerWishlistItemOid">The wishlist oid for this wishlist item.</param>
        /// <returns>ApiResponse of CustomerWishListItemResponse</returns>
        ApiResponse<CustomerWishListItemResponse> GetCustomerWishListItemWithHttpInfo (int customerProfileOid, int customerWishlistItemOid);
        /// <summary>
        /// Retrieve customers
        /// </summary>
        /// <remarks>
        /// Retrieves customers from the account.  If no parameters are specified, all customers will be returned.  You will need to make multiple API calls in order to retrieve the entire result set since this API performs result set pagination. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="email">Email (optional)</param>
        /// <param name="qbClass">Quickbooks class (optional)</param>
        /// <param name="quickbooksCode">Quickbooks code (optional)</param>
        /// <param name="lastModifiedDtsStart">Last modified date start (optional)</param>
        /// <param name="lastModifiedDtsEnd">Last modified date end (optional)</param>
        /// <param name="signupDtsStart">Signup date start (optional)</param>
        /// <param name="signupDtsEnd">Signup date end (optional)</param>
        /// <param name="billingFirstName">Billing first name (optional)</param>
        /// <param name="billingLastName">Billing last name (optional)</param>
        /// <param name="billingCompany">Billing company (optional)</param>
        /// <param name="billingCity">Billing city (optional)</param>
        /// <param name="billingState">Billing state (optional)</param>
        /// <param name="billingPostalCode">Billing postal code (optional)</param>
        /// <param name="billingCountryCode">Billing country code (optional)</param>
        /// <param name="billingDayPhone">Billing day phone (optional)</param>
        /// <param name="billingEveningPhone">Billing evening phone (optional)</param>
        /// <param name="shippingFirstName">Shipping first name (optional)</param>
        /// <param name="shippingLastName">Shipping last name (optional)</param>
        /// <param name="shippingCompany">Shipping company (optional)</param>
        /// <param name="shippingCity">Shipping city (optional)</param>
        /// <param name="shippingState">Shipping state (optional)</param>
        /// <param name="shippingPostalCode">Shipping postal code (optional)</param>
        /// <param name="shippingCountryCode">Shipping country code (optional)</param>
        /// <param name="shippingDayPhone">Shipping day phone (optional)</param>
        /// <param name="shippingEveningPhone">Shipping evening phone (optional)</param>
        /// <param name="pricingTierOid">Pricing tier oid (optional)</param>
        /// <param name="pricingTierName">Pricing tier name (optional)</param>
        /// <param name="limit">The maximum number of records to return on this one API call. (Max 200) (optional, default to 100)</param>
        /// <param name="offset">Pagination of the record set.  Offset is a zero based index. (optional, default to 0)</param>
        /// <param name="since">Fetch customers that have been created/modified since this date/time. (optional)</param>
        /// <param name="sort">The sort order of the customers.  See Sorting documentation for examples of using multiple values and sorting by ascending and descending. (optional)</param>
        /// <param name="expand">The object expansion to perform on the result.  See documentation for examples (optional)</param>
        /// <returns>CustomersResponse</returns>
        CustomersResponse GetCustomers (string email = default(string), string qbClass = default(string), string quickbooksCode = default(string), string lastModifiedDtsStart = default(string), string lastModifiedDtsEnd = default(string), string signupDtsStart = default(string), string signupDtsEnd = default(string), string billingFirstName = default(string), string billingLastName = default(string), string billingCompany = default(string), string billingCity = default(string), string billingState = default(string), string billingPostalCode = default(string), string billingCountryCode = default(string), string billingDayPhone = default(string), string billingEveningPhone = default(string), string shippingFirstName = default(string), string shippingLastName = default(string), string shippingCompany = default(string), string shippingCity = default(string), string shippingState = default(string), string shippingPostalCode = default(string), string shippingCountryCode = default(string), string shippingDayPhone = default(string), string shippingEveningPhone = default(string), int? pricingTierOid = default(int?), string pricingTierName = default(string), int? limit = default(int?), int? offset = default(int?), string since = default(string), string sort = default(string), string expand = default(string));

        /// <summary>
        /// Retrieve customers
        /// </summary>
        /// <remarks>
        /// Retrieves customers from the account.  If no parameters are specified, all customers will be returned.  You will need to make multiple API calls in order to retrieve the entire result set since this API performs result set pagination. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="email">Email (optional)</param>
        /// <param name="qbClass">Quickbooks class (optional)</param>
        /// <param name="quickbooksCode">Quickbooks code (optional)</param>
        /// <param name="lastModifiedDtsStart">Last modified date start (optional)</param>
        /// <param name="lastModifiedDtsEnd">Last modified date end (optional)</param>
        /// <param name="signupDtsStart">Signup date start (optional)</param>
        /// <param name="signupDtsEnd">Signup date end (optional)</param>
        /// <param name="billingFirstName">Billing first name (optional)</param>
        /// <param name="billingLastName">Billing last name (optional)</param>
        /// <param name="billingCompany">Billing company (optional)</param>
        /// <param name="billingCity">Billing city (optional)</param>
        /// <param name="billingState">Billing state (optional)</param>
        /// <param name="billingPostalCode">Billing postal code (optional)</param>
        /// <param name="billingCountryCode">Billing country code (optional)</param>
        /// <param name="billingDayPhone">Billing day phone (optional)</param>
        /// <param name="billingEveningPhone">Billing evening phone (optional)</param>
        /// <param name="shippingFirstName">Shipping first name (optional)</param>
        /// <param name="shippingLastName">Shipping last name (optional)</param>
        /// <param name="shippingCompany">Shipping company (optional)</param>
        /// <param name="shippingCity">Shipping city (optional)</param>
        /// <param name="shippingState">Shipping state (optional)</param>
        /// <param name="shippingPostalCode">Shipping postal code (optional)</param>
        /// <param name="shippingCountryCode">Shipping country code (optional)</param>
        /// <param name="shippingDayPhone">Shipping day phone (optional)</param>
        /// <param name="shippingEveningPhone">Shipping evening phone (optional)</param>
        /// <param name="pricingTierOid">Pricing tier oid (optional)</param>
        /// <param name="pricingTierName">Pricing tier name (optional)</param>
        /// <param name="limit">The maximum number of records to return on this one API call. (Max 200) (optional, default to 100)</param>
        /// <param name="offset">Pagination of the record set.  Offset is a zero based index. (optional, default to 0)</param>
        /// <param name="since">Fetch customers that have been created/modified since this date/time. (optional)</param>
        /// <param name="sort">The sort order of the customers.  See Sorting documentation for examples of using multiple values and sorting by ascending and descending. (optional)</param>
        /// <param name="expand">The object expansion to perform on the result.  See documentation for examples (optional)</param>
        /// <returns>ApiResponse of CustomersResponse</returns>
        ApiResponse<CustomersResponse> GetCustomersWithHttpInfo (string email = default(string), string qbClass = default(string), string quickbooksCode = default(string), string lastModifiedDtsStart = default(string), string lastModifiedDtsEnd = default(string), string signupDtsStart = default(string), string signupDtsEnd = default(string), string billingFirstName = default(string), string billingLastName = default(string), string billingCompany = default(string), string billingCity = default(string), string billingState = default(string), string billingPostalCode = default(string), string billingCountryCode = default(string), string billingDayPhone = default(string), string billingEveningPhone = default(string), string shippingFirstName = default(string), string shippingLastName = default(string), string shippingCompany = default(string), string shippingCity = default(string), string shippingState = default(string), string shippingPostalCode = default(string), string shippingCountryCode = default(string), string shippingDayPhone = default(string), string shippingEveningPhone = default(string), int? pricingTierOid = default(int?), string pricingTierName = default(string), int? limit = default(int?), int? offset = default(int?), string since = default(string), string sort = default(string), string expand = default(string));
        /// <summary>
        /// Retrieve customers by query
        /// </summary>
        /// <remarks>
        /// Retrieves customers from the account.  If no parameters are specified, all customers will be returned.  You will need to make multiple API calls in order to retrieve the entire result set since this API performs result set pagination. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerQuery">Customer query</param>
        /// <param name="limit">The maximum number of records to return on this one API call. (Max 200) (optional, default to 100)</param>
        /// <param name="offset">Pagination of the record set.  Offset is a zero based index. (optional, default to 0)</param>
        /// <param name="since">Fetch customers that have been created/modified since this date/time. (optional)</param>
        /// <param name="sort">The sort order of the customers.  See Sorting documentation for examples of using multiple values and sorting by ascending and descending. (optional)</param>
        /// <param name="expand">The object expansion to perform on the result.  See documentation for examples (optional)</param>
        /// <returns>CustomersResponse</returns>
        CustomersResponse GetCustomersByQuery (CustomerQuery customerQuery, int? limit = default(int?), int? offset = default(int?), string since = default(string), string sort = default(string), string expand = default(string));

        /// <summary>
        /// Retrieve customers by query
        /// </summary>
        /// <remarks>
        /// Retrieves customers from the account.  If no parameters are specified, all customers will be returned.  You will need to make multiple API calls in order to retrieve the entire result set since this API performs result set pagination. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerQuery">Customer query</param>
        /// <param name="limit">The maximum number of records to return on this one API call. (Max 200) (optional, default to 100)</param>
        /// <param name="offset">Pagination of the record set.  Offset is a zero based index. (optional, default to 0)</param>
        /// <param name="since">Fetch customers that have been created/modified since this date/time. (optional)</param>
        /// <param name="sort">The sort order of the customers.  See Sorting documentation for examples of using multiple values and sorting by ascending and descending. (optional)</param>
        /// <param name="expand">The object expansion to perform on the result.  See documentation for examples (optional)</param>
        /// <returns>ApiResponse of CustomersResponse</returns>
        ApiResponse<CustomersResponse> GetCustomersByQueryWithHttpInfo (CustomerQuery customerQuery, int? limit = default(int?), int? offset = default(int?), string since = default(string), string sort = default(string), string expand = default(string));
        /// <summary>
        /// Retrieve customers for DataTables plugin
        /// </summary>
        /// <remarks>
        /// Retrieves customers from the account.  If no searches are specified, all customers will be returned. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="expand">The object expansion to perform on the result.  See documentation for examples (optional)</param>
        /// <returns>DataTablesServerSideResponse</returns>
        DataTablesServerSideResponse GetCustomersForDataTables (string expand = default(string));

        /// <summary>
        /// Retrieve customers for DataTables plugin
        /// </summary>
        /// <remarks>
        /// Retrieves customers from the account.  If no searches are specified, all customers will be returned. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="expand">The object expansion to perform on the result.  See documentation for examples (optional)</param>
        /// <returns>ApiResponse of DataTablesServerSideResponse</returns>
        ApiResponse<DataTablesServerSideResponse> GetCustomersForDataTablesWithHttpInfo (string expand = default(string));
        /// <summary>
        /// Create a token that can be used to verify a customer email address
        /// </summary>
        /// <remarks>
        /// Create a token that can be used to verify a customer email address.  The implementation of how a customer interacts with this token is left to the merchant. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tokenRequest">Token request</param>
        /// <returns>EmailVerifyTokenResponse</returns>
        EmailVerifyTokenResponse GetEmailVerificationToken (EmailVerifyTokenRequest tokenRequest);

        /// <summary>
        /// Create a token that can be used to verify a customer email address
        /// </summary>
        /// <remarks>
        /// Create a token that can be used to verify a customer email address.  The implementation of how a customer interacts with this token is left to the merchant. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tokenRequest">Token request</param>
        /// <returns>ApiResponse of EmailVerifyTokenResponse</returns>
        ApiResponse<EmailVerifyTokenResponse> GetEmailVerificationTokenWithHttpInfo (EmailVerifyTokenRequest tokenRequest);
        /// <summary>
        /// getMagicLink
        /// </summary>
        /// <remarks>
        /// Retrieves a magic link to allow a merchant to login as a customer.  This method is a PUT call intentionally. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerProfileOid">The customer_profile_oid of the customer.</param>
        /// <param name="storefrontHostName">The storefront to log into.</param>
        /// <returns>CustomerMagicLinkResponse</returns>
        CustomerMagicLinkResponse GetMagicLink (int customerProfileOid, string storefrontHostName);

        /// <summary>
        /// getMagicLink
        /// </summary>
        /// <remarks>
        /// Retrieves a magic link to allow a merchant to login as a customer.  This method is a PUT call intentionally. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerProfileOid">The customer_profile_oid of the customer.</param>
        /// <param name="storefrontHostName">The storefront to log into.</param>
        /// <returns>ApiResponse of CustomerMagicLinkResponse</returns>
        ApiResponse<CustomerMagicLinkResponse> GetMagicLinkWithHttpInfo (int customerProfileOid, string storefrontHostName);
        /// <summary>
        /// Insert a customer
        /// </summary>
        /// <remarks>
        /// Insert a customer on the UltraCart account. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customer">Customer to insert</param>
        /// <param name="expand">The object expansion to perform on the result.  See documentation for examples (optional)</param>
        /// <returns>CustomerResponse</returns>
        CustomerResponse InsertCustomer (Customer customer, string expand = default(string));

        /// <summary>
        /// Insert a customer
        /// </summary>
        /// <remarks>
        /// Insert a customer on the UltraCart account. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customer">Customer to insert</param>
        /// <param name="expand">The object expansion to perform on the result.  See documentation for examples (optional)</param>
        /// <returns>ApiResponse of CustomerResponse</returns>
        ApiResponse<CustomerResponse> InsertCustomerWithHttpInfo (Customer customer, string expand = default(string));
        /// <summary>
        /// Insert a customer wishlist item
        /// </summary>
        /// <remarks>
        /// Insert a customer wishlist item 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerProfileOid">The customer oid for this wishlist.</param>
        /// <param name="wishlistItem">Wishlist item to insert</param>
        /// <returns>CustomerWishListItem</returns>
        CustomerWishListItem InsertWishListItem (int customerProfileOid, CustomerWishListItem wishlistItem);

        /// <summary>
        /// Insert a customer wishlist item
        /// </summary>
        /// <remarks>
        /// Insert a customer wishlist item 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerProfileOid">The customer oid for this wishlist.</param>
        /// <param name="wishlistItem">Wishlist item to insert</param>
        /// <returns>ApiResponse of CustomerWishListItem</returns>
        ApiResponse<CustomerWishListItem> InsertWishListItemWithHttpInfo (int customerProfileOid, CustomerWishListItem wishlistItem);
        /// <summary>
        /// Merge customer into this customer
        /// </summary>
        /// <remarks>
        /// Merge customer into this customer. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerProfileOid">The customer_profile_oid to update.</param>
        /// <param name="customer">Customer to merge into this profile.</param>
        /// <param name="expand">The object expansion to perform on the result.  See documentation for examples (optional)</param>
        /// <returns></returns>
        void MergeCustomer (int customerProfileOid, CustomerMergeRequest customer, string expand = default(string));

        /// <summary>
        /// Merge customer into this customer
        /// </summary>
        /// <remarks>
        /// Merge customer into this customer. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerProfileOid">The customer_profile_oid to update.</param>
        /// <param name="customer">Customer to merge into this profile.</param>
        /// <param name="expand">The object expansion to perform on the result.  See documentation for examples (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> MergeCustomerWithHttpInfo (int customerProfileOid, CustomerMergeRequest customer, string expand = default(string));
        /// <summary>
        /// Searches for all matching values (using POST)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="lookupRequest">LookupRequest</param>
        /// <returns>LookupResponse</returns>
        LookupResponse SearchCustomerProfileValues (LookupRequest lookupRequest);

        /// <summary>
        /// Searches for all matching values (using POST)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="lookupRequest">LookupRequest</param>
        /// <returns>ApiResponse of LookupResponse</returns>
        ApiResponse<LookupResponse> SearchCustomerProfileValuesWithHttpInfo (LookupRequest lookupRequest);
        /// <summary>
        /// Update a customer
        /// </summary>
        /// <remarks>
        /// Update a customer on the UltraCart account. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerProfileOid">The customer_profile_oid to update.</param>
        /// <param name="customer">Customer to update</param>
        /// <param name="expand">The object expansion to perform on the result.  See documentation for examples (optional)</param>
        /// <returns>CustomerResponse</returns>
        CustomerResponse UpdateCustomer (int customerProfileOid, Customer customer, string expand = default(string));

        /// <summary>
        /// Update a customer
        /// </summary>
        /// <remarks>
        /// Update a customer on the UltraCart account. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerProfileOid">The customer_profile_oid to update.</param>
        /// <param name="customer">Customer to update</param>
        /// <param name="expand">The object expansion to perform on the result.  See documentation for examples (optional)</param>
        /// <returns>ApiResponse of CustomerResponse</returns>
        ApiResponse<CustomerResponse> UpdateCustomerWithHttpInfo (int customerProfileOid, Customer customer, string expand = default(string));
        /// <summary>
        /// Update email list subscriptions for a customer
        /// </summary>
        /// <remarks>
        /// Update email list subscriptions for a customer 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerProfileOid">The customer profile oid</param>
        /// <param name="listChanges">List changes</param>
        /// <returns>CustomerEmailListChanges</returns>
        CustomerEmailListChanges UpdateCustomerEmailLists (int customerProfileOid, CustomerEmailListChanges listChanges);

        /// <summary>
        /// Update email list subscriptions for a customer
        /// </summary>
        /// <remarks>
        /// Update email list subscriptions for a customer 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerProfileOid">The customer profile oid</param>
        /// <param name="listChanges">List changes</param>
        /// <returns>ApiResponse of CustomerEmailListChanges</returns>
        ApiResponse<CustomerEmailListChanges> UpdateCustomerEmailListsWithHttpInfo (int customerProfileOid, CustomerEmailListChanges listChanges);
        /// <summary>
        /// Update a customer wishlist item
        /// </summary>
        /// <remarks>
        /// Update a customer wishlist item 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerProfileOid">The customer oid for this wishlist.</param>
        /// <param name="customerWishlistItemOid">The wishlist oid for this wishlist item.</param>
        /// <param name="wishlistItem">Wishlist item to update</param>
        /// <returns>CustomerWishListItem</returns>
        CustomerWishListItem UpdateWishListItem (int customerProfileOid, int customerWishlistItemOid, CustomerWishListItem wishlistItem);

        /// <summary>
        /// Update a customer wishlist item
        /// </summary>
        /// <remarks>
        /// Update a customer wishlist item 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerProfileOid">The customer oid for this wishlist.</param>
        /// <param name="customerWishlistItemOid">The wishlist oid for this wishlist item.</param>
        /// <param name="wishlistItem">Wishlist item to update</param>
        /// <returns>ApiResponse of CustomerWishListItem</returns>
        ApiResponse<CustomerWishListItem> UpdateWishListItemWithHttpInfo (int customerProfileOid, int customerWishlistItemOid, CustomerWishListItem wishlistItem);
        /// <summary>
        /// Validate a token that can be used to verify a customer email address
        /// </summary>
        /// <remarks>
        /// Validate a token that can be used to verify a customer email address.  The implementation of how a customer interacts with this token is left to the merchant. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="validationRequest">Token validation request</param>
        /// <returns>EmailVerifyTokenValidateResponse</returns>
        EmailVerifyTokenValidateResponse ValidateEmailVerificationToken (EmailVerifyTokenValidateRequest validationRequest);

        /// <summary>
        /// Validate a token that can be used to verify a customer email address
        /// </summary>
        /// <remarks>
        /// Validate a token that can be used to verify a customer email address.  The implementation of how a customer interacts with this token is left to the merchant. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="validationRequest">Token validation request</param>
        /// <returns>ApiResponse of EmailVerifyTokenValidateResponse</returns>
        ApiResponse<EmailVerifyTokenValidateResponse> ValidateEmailVerificationTokenWithHttpInfo (EmailVerifyTokenValidateRequest validationRequest);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Adds store credit to a customer
        /// </summary>
        /// <remarks>
        /// Adds store credit to a customer 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerProfileOid">The customer oid to credit.</param>
        /// <param name="storeCreditRequest">Store credit to add</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of BaseResponse</returns>
        System.Threading.Tasks.Task<BaseResponse> AddCustomerStoreCreditAsync (int customerProfileOid, CustomerStoreCreditAddRequest storeCreditRequest, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Adds store credit to a customer
        /// </summary>
        /// <remarks>
        /// Adds store credit to a customer 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerProfileOid">The customer oid to credit.</param>
        /// <param name="storeCreditRequest">Store credit to add</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (BaseResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<BaseResponse>> AddCustomerStoreCreditWithHttpInfoAsync (int customerProfileOid, CustomerStoreCreditAddRequest storeCreditRequest, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Updates the cashback balance for a customer by updating the internal gift certificate used, creating the gift certificate if needed.
        /// </summary>
        /// <remarks>
        /// Updates the cashback balance for a customer by updating the internal gift certificate used, creating the gift certificate if needed. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerProfileOid">The customer profile oid</param>
        /// <param name="adjustInternalCertificateRequest">adjustInternalCertificateRequest</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of AdjustInternalCertificateResponse</returns>
        System.Threading.Tasks.Task<AdjustInternalCertificateResponse> AdjustInternalCertificateAsync (int customerProfileOid, AdjustInternalCertificateRequest adjustInternalCertificateRequest, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Updates the cashback balance for a customer by updating the internal gift certificate used, creating the gift certificate if needed.
        /// </summary>
        /// <remarks>
        /// Updates the cashback balance for a customer by updating the internal gift certificate used, creating the gift certificate if needed. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerProfileOid">The customer profile oid</param>
        /// <param name="adjustInternalCertificateRequest">adjustInternalCertificateRequest</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (AdjustInternalCertificateResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AdjustInternalCertificateResponse>> AdjustInternalCertificateWithHttpInfoAsync (int customerProfileOid, AdjustInternalCertificateRequest adjustInternalCertificateRequest, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Delete a customer
        /// </summary>
        /// <remarks>
        /// Delete a customer on the UltraCart account. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerProfileOid">The customer_profile_oid to delete.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteCustomerAsync (int customerProfileOid, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Delete a customer
        /// </summary>
        /// <remarks>
        /// Delete a customer on the UltraCart account. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerProfileOid">The customer_profile_oid to delete.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteCustomerWithHttpInfoAsync (int customerProfileOid, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Delete a customer wishlist item
        /// </summary>
        /// <remarks>
        /// Delete a customer wishlist item 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerProfileOid">The customer oid for this wishlist.</param>
        /// <param name="customerWishlistItemOid">The wishlist oid for this wishlist item to delete.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteWishListItemAsync (int customerProfileOid, int customerWishlistItemOid, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Delete a customer wishlist item
        /// </summary>
        /// <remarks>
        /// Delete a customer wishlist item 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerProfileOid">The customer oid for this wishlist.</param>
        /// <param name="customerWishlistItemOid">The wishlist oid for this wishlist item to delete.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteWishListItemWithHttpInfoAsync (int customerProfileOid, int customerWishlistItemOid, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Retrieve a customer
        /// </summary>
        /// <remarks>
        /// Retrieves a single customer using the specified customer profile oid. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerProfileOid">The customer oid to retrieve.</param>
        /// <param name="expand">The object expansion to perform on the result.  See documentation for examples (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of CustomerResponse</returns>
        System.Threading.Tasks.Task<CustomerResponse> GetCustomerAsync (int customerProfileOid, string expand = default(string), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Retrieve a customer
        /// </summary>
        /// <remarks>
        /// Retrieves a single customer using the specified customer profile oid. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerProfileOid">The customer oid to retrieve.</param>
        /// <param name="expand">The object expansion to perform on the result.  See documentation for examples (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (CustomerResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CustomerResponse>> GetCustomerWithHttpInfoAsync (int customerProfileOid, string expand = default(string), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Retrieve a customer by Email
        /// </summary>
        /// <remarks>
        /// Retrieves a single customer using the specified customer email address. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="email">The email address of the customer to retrieve.</param>
        /// <param name="expand">The object expansion to perform on the result.  See documentation for examples (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of CustomerResponse</returns>
        System.Threading.Tasks.Task<CustomerResponse> GetCustomerByEmailAsync (string email, string expand = default(string), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Retrieve a customer by Email
        /// </summary>
        /// <remarks>
        /// Retrieves a single customer using the specified customer email address. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="email">The email address of the customer to retrieve.</param>
        /// <param name="expand">The object expansion to perform on the result.  See documentation for examples (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (CustomerResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CustomerResponse>> GetCustomerByEmailWithHttpInfoAsync (string email, string expand = default(string), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Retrieve values needed for a customer profile editor
        /// </summary>
        /// <remarks>
        /// Retrieve values needed for a customer profile editor. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of CustomerEditorValues</returns>
        System.Threading.Tasks.Task<CustomerEditorValues> GetCustomerEditorValuesAsync (CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Retrieve values needed for a customer profile editor
        /// </summary>
        /// <remarks>
        /// Retrieve values needed for a customer profile editor. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (CustomerEditorValues)</returns>
        System.Threading.Tasks.Task<ApiResponse<CustomerEditorValues>> GetCustomerEditorValuesWithHttpInfoAsync (CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Retrieve all email lists across all storefronts
        /// </summary>
        /// <remarks>
        /// Retrieve all email lists across all storefronts 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of EmailListsResponse</returns>
        System.Threading.Tasks.Task<EmailListsResponse> GetCustomerEmailListsAsync (CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Retrieve all email lists across all storefronts
        /// </summary>
        /// <remarks>
        /// Retrieve all email lists across all storefronts 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (EmailListsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<EmailListsResponse>> GetCustomerEmailListsWithHttpInfoAsync (CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Retrieve the customer store credit accumulated through loyalty programs
        /// </summary>
        /// <remarks>
        /// Retrieve the customer store credit accumulated through loyalty programs 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerProfileOid">The customer oid to retrieve.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of CustomerStoreCreditResponse</returns>
        System.Threading.Tasks.Task<CustomerStoreCreditResponse> GetCustomerStoreCreditAsync (int customerProfileOid, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Retrieve the customer store credit accumulated through loyalty programs
        /// </summary>
        /// <remarks>
        /// Retrieve the customer store credit accumulated through loyalty programs 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerProfileOid">The customer oid to retrieve.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (CustomerStoreCreditResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CustomerStoreCreditResponse>> GetCustomerStoreCreditWithHttpInfoAsync (int customerProfileOid, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Retrieve wishlist items for customer
        /// </summary>
        /// <remarks>
        /// Retrieve wishlist items for customer. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerProfileOid">The customer oid for this wishlist.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of CustomerWishListItemsResponse</returns>
        System.Threading.Tasks.Task<CustomerWishListItemsResponse> GetCustomerWishListAsync (int customerProfileOid, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Retrieve wishlist items for customer
        /// </summary>
        /// <remarks>
        /// Retrieve wishlist items for customer. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerProfileOid">The customer oid for this wishlist.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (CustomerWishListItemsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CustomerWishListItemsResponse>> GetCustomerWishListWithHttpInfoAsync (int customerProfileOid, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Retrieve wishlist item for customer
        /// </summary>
        /// <remarks>
        /// Retrieve wishlist item for customer. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerProfileOid">The customer oid for this wishlist.</param>
        /// <param name="customerWishlistItemOid">The wishlist oid for this wishlist item.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of CustomerWishListItemResponse</returns>
        System.Threading.Tasks.Task<CustomerWishListItemResponse> GetCustomerWishListItemAsync (int customerProfileOid, int customerWishlistItemOid, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Retrieve wishlist item for customer
        /// </summary>
        /// <remarks>
        /// Retrieve wishlist item for customer. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerProfileOid">The customer oid for this wishlist.</param>
        /// <param name="customerWishlistItemOid">The wishlist oid for this wishlist item.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (CustomerWishListItemResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CustomerWishListItemResponse>> GetCustomerWishListItemWithHttpInfoAsync (int customerProfileOid, int customerWishlistItemOid, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Retrieve customers
        /// </summary>
        /// <remarks>
        /// Retrieves customers from the account.  If no parameters are specified, all customers will be returned.  You will need to make multiple API calls in order to retrieve the entire result set since this API performs result set pagination. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="email">Email (optional)</param>
        /// <param name="qbClass">Quickbooks class (optional)</param>
        /// <param name="quickbooksCode">Quickbooks code (optional)</param>
        /// <param name="lastModifiedDtsStart">Last modified date start (optional)</param>
        /// <param name="lastModifiedDtsEnd">Last modified date end (optional)</param>
        /// <param name="signupDtsStart">Signup date start (optional)</param>
        /// <param name="signupDtsEnd">Signup date end (optional)</param>
        /// <param name="billingFirstName">Billing first name (optional)</param>
        /// <param name="billingLastName">Billing last name (optional)</param>
        /// <param name="billingCompany">Billing company (optional)</param>
        /// <param name="billingCity">Billing city (optional)</param>
        /// <param name="billingState">Billing state (optional)</param>
        /// <param name="billingPostalCode">Billing postal code (optional)</param>
        /// <param name="billingCountryCode">Billing country code (optional)</param>
        /// <param name="billingDayPhone">Billing day phone (optional)</param>
        /// <param name="billingEveningPhone">Billing evening phone (optional)</param>
        /// <param name="shippingFirstName">Shipping first name (optional)</param>
        /// <param name="shippingLastName">Shipping last name (optional)</param>
        /// <param name="shippingCompany">Shipping company (optional)</param>
        /// <param name="shippingCity">Shipping city (optional)</param>
        /// <param name="shippingState">Shipping state (optional)</param>
        /// <param name="shippingPostalCode">Shipping postal code (optional)</param>
        /// <param name="shippingCountryCode">Shipping country code (optional)</param>
        /// <param name="shippingDayPhone">Shipping day phone (optional)</param>
        /// <param name="shippingEveningPhone">Shipping evening phone (optional)</param>
        /// <param name="pricingTierOid">Pricing tier oid (optional)</param>
        /// <param name="pricingTierName">Pricing tier name (optional)</param>
        /// <param name="limit">The maximum number of records to return on this one API call. (Max 200) (optional, default to 100)</param>
        /// <param name="offset">Pagination of the record set.  Offset is a zero based index. (optional, default to 0)</param>
        /// <param name="since">Fetch customers that have been created/modified since this date/time. (optional)</param>
        /// <param name="sort">The sort order of the customers.  See Sorting documentation for examples of using multiple values and sorting by ascending and descending. (optional)</param>
        /// <param name="expand">The object expansion to perform on the result.  See documentation for examples (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of CustomersResponse</returns>
        System.Threading.Tasks.Task<CustomersResponse> GetCustomersAsync (string email = default(string), string qbClass = default(string), string quickbooksCode = default(string), string lastModifiedDtsStart = default(string), string lastModifiedDtsEnd = default(string), string signupDtsStart = default(string), string signupDtsEnd = default(string), string billingFirstName = default(string), string billingLastName = default(string), string billingCompany = default(string), string billingCity = default(string), string billingState = default(string), string billingPostalCode = default(string), string billingCountryCode = default(string), string billingDayPhone = default(string), string billingEveningPhone = default(string), string shippingFirstName = default(string), string shippingLastName = default(string), string shippingCompany = default(string), string shippingCity = default(string), string shippingState = default(string), string shippingPostalCode = default(string), string shippingCountryCode = default(string), string shippingDayPhone = default(string), string shippingEveningPhone = default(string), int? pricingTierOid = default(int?), string pricingTierName = default(string), int? limit = default(int?), int? offset = default(int?), string since = default(string), string sort = default(string), string expand = default(string), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Retrieve customers
        /// </summary>
        /// <remarks>
        /// Retrieves customers from the account.  If no parameters are specified, all customers will be returned.  You will need to make multiple API calls in order to retrieve the entire result set since this API performs result set pagination. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="email">Email (optional)</param>
        /// <param name="qbClass">Quickbooks class (optional)</param>
        /// <param name="quickbooksCode">Quickbooks code (optional)</param>
        /// <param name="lastModifiedDtsStart">Last modified date start (optional)</param>
        /// <param name="lastModifiedDtsEnd">Last modified date end (optional)</param>
        /// <param name="signupDtsStart">Signup date start (optional)</param>
        /// <param name="signupDtsEnd">Signup date end (optional)</param>
        /// <param name="billingFirstName">Billing first name (optional)</param>
        /// <param name="billingLastName">Billing last name (optional)</param>
        /// <param name="billingCompany">Billing company (optional)</param>
        /// <param name="billingCity">Billing city (optional)</param>
        /// <param name="billingState">Billing state (optional)</param>
        /// <param name="billingPostalCode">Billing postal code (optional)</param>
        /// <param name="billingCountryCode">Billing country code (optional)</param>
        /// <param name="billingDayPhone">Billing day phone (optional)</param>
        /// <param name="billingEveningPhone">Billing evening phone (optional)</param>
        /// <param name="shippingFirstName">Shipping first name (optional)</param>
        /// <param name="shippingLastName">Shipping last name (optional)</param>
        /// <param name="shippingCompany">Shipping company (optional)</param>
        /// <param name="shippingCity">Shipping city (optional)</param>
        /// <param name="shippingState">Shipping state (optional)</param>
        /// <param name="shippingPostalCode">Shipping postal code (optional)</param>
        /// <param name="shippingCountryCode">Shipping country code (optional)</param>
        /// <param name="shippingDayPhone">Shipping day phone (optional)</param>
        /// <param name="shippingEveningPhone">Shipping evening phone (optional)</param>
        /// <param name="pricingTierOid">Pricing tier oid (optional)</param>
        /// <param name="pricingTierName">Pricing tier name (optional)</param>
        /// <param name="limit">The maximum number of records to return on this one API call. (Max 200) (optional, default to 100)</param>
        /// <param name="offset">Pagination of the record set.  Offset is a zero based index. (optional, default to 0)</param>
        /// <param name="since">Fetch customers that have been created/modified since this date/time. (optional)</param>
        /// <param name="sort">The sort order of the customers.  See Sorting documentation for examples of using multiple values and sorting by ascending and descending. (optional)</param>
        /// <param name="expand">The object expansion to perform on the result.  See documentation for examples (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (CustomersResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CustomersResponse>> GetCustomersWithHttpInfoAsync (string email = default(string), string qbClass = default(string), string quickbooksCode = default(string), string lastModifiedDtsStart = default(string), string lastModifiedDtsEnd = default(string), string signupDtsStart = default(string), string signupDtsEnd = default(string), string billingFirstName = default(string), string billingLastName = default(string), string billingCompany = default(string), string billingCity = default(string), string billingState = default(string), string billingPostalCode = default(string), string billingCountryCode = default(string), string billingDayPhone = default(string), string billingEveningPhone = default(string), string shippingFirstName = default(string), string shippingLastName = default(string), string shippingCompany = default(string), string shippingCity = default(string), string shippingState = default(string), string shippingPostalCode = default(string), string shippingCountryCode = default(string), string shippingDayPhone = default(string), string shippingEveningPhone = default(string), int? pricingTierOid = default(int?), string pricingTierName = default(string), int? limit = default(int?), int? offset = default(int?), string since = default(string), string sort = default(string), string expand = default(string), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Retrieve customers by query
        /// </summary>
        /// <remarks>
        /// Retrieves customers from the account.  If no parameters are specified, all customers will be returned.  You will need to make multiple API calls in order to retrieve the entire result set since this API performs result set pagination. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerQuery">Customer query</param>
        /// <param name="limit">The maximum number of records to return on this one API call. (Max 200) (optional, default to 100)</param>
        /// <param name="offset">Pagination of the record set.  Offset is a zero based index. (optional, default to 0)</param>
        /// <param name="since">Fetch customers that have been created/modified since this date/time. (optional)</param>
        /// <param name="sort">The sort order of the customers.  See Sorting documentation for examples of using multiple values and sorting by ascending and descending. (optional)</param>
        /// <param name="expand">The object expansion to perform on the result.  See documentation for examples (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of CustomersResponse</returns>
        System.Threading.Tasks.Task<CustomersResponse> GetCustomersByQueryAsync (CustomerQuery customerQuery, int? limit = default(int?), int? offset = default(int?), string since = default(string), string sort = default(string), string expand = default(string), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Retrieve customers by query
        /// </summary>
        /// <remarks>
        /// Retrieves customers from the account.  If no parameters are specified, all customers will be returned.  You will need to make multiple API calls in order to retrieve the entire result set since this API performs result set pagination. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerQuery">Customer query</param>
        /// <param name="limit">The maximum number of records to return on this one API call. (Max 200) (optional, default to 100)</param>
        /// <param name="offset">Pagination of the record set.  Offset is a zero based index. (optional, default to 0)</param>
        /// <param name="since">Fetch customers that have been created/modified since this date/time. (optional)</param>
        /// <param name="sort">The sort order of the customers.  See Sorting documentation for examples of using multiple values and sorting by ascending and descending. (optional)</param>
        /// <param name="expand">The object expansion to perform on the result.  See documentation for examples (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (CustomersResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CustomersResponse>> GetCustomersByQueryWithHttpInfoAsync (CustomerQuery customerQuery, int? limit = default(int?), int? offset = default(int?), string since = default(string), string sort = default(string), string expand = default(string), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Retrieve customers for DataTables plugin
        /// </summary>
        /// <remarks>
        /// Retrieves customers from the account.  If no searches are specified, all customers will be returned. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="expand">The object expansion to perform on the result.  See documentation for examples (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of DataTablesServerSideResponse</returns>
        System.Threading.Tasks.Task<DataTablesServerSideResponse> GetCustomersForDataTablesAsync (string expand = default(string), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Retrieve customers for DataTables plugin
        /// </summary>
        /// <remarks>
        /// Retrieves customers from the account.  If no searches are specified, all customers will be returned. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="expand">The object expansion to perform on the result.  See documentation for examples (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (DataTablesServerSideResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<DataTablesServerSideResponse>> GetCustomersForDataTablesWithHttpInfoAsync (string expand = default(string), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Create a token that can be used to verify a customer email address
        /// </summary>
        /// <remarks>
        /// Create a token that can be used to verify a customer email address.  The implementation of how a customer interacts with this token is left to the merchant. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tokenRequest">Token request</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of EmailVerifyTokenResponse</returns>
        System.Threading.Tasks.Task<EmailVerifyTokenResponse> GetEmailVerificationTokenAsync (EmailVerifyTokenRequest tokenRequest, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Create a token that can be used to verify a customer email address
        /// </summary>
        /// <remarks>
        /// Create a token that can be used to verify a customer email address.  The implementation of how a customer interacts with this token is left to the merchant. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tokenRequest">Token request</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (EmailVerifyTokenResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<EmailVerifyTokenResponse>> GetEmailVerificationTokenWithHttpInfoAsync (EmailVerifyTokenRequest tokenRequest, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// getMagicLink
        /// </summary>
        /// <remarks>
        /// Retrieves a magic link to allow a merchant to login as a customer.  This method is a PUT call intentionally. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerProfileOid">The customer_profile_oid of the customer.</param>
        /// <param name="storefrontHostName">The storefront to log into.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of CustomerMagicLinkResponse</returns>
        System.Threading.Tasks.Task<CustomerMagicLinkResponse> GetMagicLinkAsync (int customerProfileOid, string storefrontHostName, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// getMagicLink
        /// </summary>
        /// <remarks>
        /// Retrieves a magic link to allow a merchant to login as a customer.  This method is a PUT call intentionally. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerProfileOid">The customer_profile_oid of the customer.</param>
        /// <param name="storefrontHostName">The storefront to log into.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (CustomerMagicLinkResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CustomerMagicLinkResponse>> GetMagicLinkWithHttpInfoAsync (int customerProfileOid, string storefrontHostName, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Insert a customer
        /// </summary>
        /// <remarks>
        /// Insert a customer on the UltraCart account. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customer">Customer to insert</param>
        /// <param name="expand">The object expansion to perform on the result.  See documentation for examples (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of CustomerResponse</returns>
        System.Threading.Tasks.Task<CustomerResponse> InsertCustomerAsync (Customer customer, string expand = default(string), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Insert a customer
        /// </summary>
        /// <remarks>
        /// Insert a customer on the UltraCart account. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customer">Customer to insert</param>
        /// <param name="expand">The object expansion to perform on the result.  See documentation for examples (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (CustomerResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CustomerResponse>> InsertCustomerWithHttpInfoAsync (Customer customer, string expand = default(string), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Insert a customer wishlist item
        /// </summary>
        /// <remarks>
        /// Insert a customer wishlist item 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerProfileOid">The customer oid for this wishlist.</param>
        /// <param name="wishlistItem">Wishlist item to insert</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of CustomerWishListItem</returns>
        System.Threading.Tasks.Task<CustomerWishListItem> InsertWishListItemAsync (int customerProfileOid, CustomerWishListItem wishlistItem, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Insert a customer wishlist item
        /// </summary>
        /// <remarks>
        /// Insert a customer wishlist item 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerProfileOid">The customer oid for this wishlist.</param>
        /// <param name="wishlistItem">Wishlist item to insert</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (CustomerWishListItem)</returns>
        System.Threading.Tasks.Task<ApiResponse<CustomerWishListItem>> InsertWishListItemWithHttpInfoAsync (int customerProfileOid, CustomerWishListItem wishlistItem, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Merge customer into this customer
        /// </summary>
        /// <remarks>
        /// Merge customer into this customer. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerProfileOid">The customer_profile_oid to update.</param>
        /// <param name="customer">Customer to merge into this profile.</param>
        /// <param name="expand">The object expansion to perform on the result.  See documentation for examples (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task MergeCustomerAsync (int customerProfileOid, CustomerMergeRequest customer, string expand = default(string), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Merge customer into this customer
        /// </summary>
        /// <remarks>
        /// Merge customer into this customer. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerProfileOid">The customer_profile_oid to update.</param>
        /// <param name="customer">Customer to merge into this profile.</param>
        /// <param name="expand">The object expansion to perform on the result.  See documentation for examples (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> MergeCustomerWithHttpInfoAsync (int customerProfileOid, CustomerMergeRequest customer, string expand = default(string), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Searches for all matching values (using POST)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="lookupRequest">LookupRequest</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of LookupResponse</returns>
        System.Threading.Tasks.Task<LookupResponse> SearchCustomerProfileValuesAsync (LookupRequest lookupRequest, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Searches for all matching values (using POST)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="lookupRequest">LookupRequest</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (LookupResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<LookupResponse>> SearchCustomerProfileValuesWithHttpInfoAsync (LookupRequest lookupRequest, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Update a customer
        /// </summary>
        /// <remarks>
        /// Update a customer on the UltraCart account. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerProfileOid">The customer_profile_oid to update.</param>
        /// <param name="customer">Customer to update</param>
        /// <param name="expand">The object expansion to perform on the result.  See documentation for examples (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of CustomerResponse</returns>
        System.Threading.Tasks.Task<CustomerResponse> UpdateCustomerAsync (int customerProfileOid, Customer customer, string expand = default(string), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Update a customer
        /// </summary>
        /// <remarks>
        /// Update a customer on the UltraCart account. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerProfileOid">The customer_profile_oid to update.</param>
        /// <param name="customer">Customer to update</param>
        /// <param name="expand">The object expansion to perform on the result.  See documentation for examples (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (CustomerResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CustomerResponse>> UpdateCustomerWithHttpInfoAsync (int customerProfileOid, Customer customer, string expand = default(string), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Update email list subscriptions for a customer
        /// </summary>
        /// <remarks>
        /// Update email list subscriptions for a customer 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerProfileOid">The customer profile oid</param>
        /// <param name="listChanges">List changes</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of CustomerEmailListChanges</returns>
        System.Threading.Tasks.Task<CustomerEmailListChanges> UpdateCustomerEmailListsAsync (int customerProfileOid, CustomerEmailListChanges listChanges, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Update email list subscriptions for a customer
        /// </summary>
        /// <remarks>
        /// Update email list subscriptions for a customer 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerProfileOid">The customer profile oid</param>
        /// <param name="listChanges">List changes</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (CustomerEmailListChanges)</returns>
        System.Threading.Tasks.Task<ApiResponse<CustomerEmailListChanges>> UpdateCustomerEmailListsWithHttpInfoAsync (int customerProfileOid, CustomerEmailListChanges listChanges, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Update a customer wishlist item
        /// </summary>
        /// <remarks>
        /// Update a customer wishlist item 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerProfileOid">The customer oid for this wishlist.</param>
        /// <param name="customerWishlistItemOid">The wishlist oid for this wishlist item.</param>
        /// <param name="wishlistItem">Wishlist item to update</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of CustomerWishListItem</returns>
        System.Threading.Tasks.Task<CustomerWishListItem> UpdateWishListItemAsync (int customerProfileOid, int customerWishlistItemOid, CustomerWishListItem wishlistItem, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Update a customer wishlist item
        /// </summary>
        /// <remarks>
        /// Update a customer wishlist item 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerProfileOid">The customer oid for this wishlist.</param>
        /// <param name="customerWishlistItemOid">The wishlist oid for this wishlist item.</param>
        /// <param name="wishlistItem">Wishlist item to update</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (CustomerWishListItem)</returns>
        System.Threading.Tasks.Task<ApiResponse<CustomerWishListItem>> UpdateWishListItemWithHttpInfoAsync (int customerProfileOid, int customerWishlistItemOid, CustomerWishListItem wishlistItem, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Validate a token that can be used to verify a customer email address
        /// </summary>
        /// <remarks>
        /// Validate a token that can be used to verify a customer email address.  The implementation of how a customer interacts with this token is left to the merchant. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="validationRequest">Token validation request</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of EmailVerifyTokenValidateResponse</returns>
        System.Threading.Tasks.Task<EmailVerifyTokenValidateResponse> ValidateEmailVerificationTokenAsync (EmailVerifyTokenValidateRequest validationRequest, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Validate a token that can be used to verify a customer email address
        /// </summary>
        /// <remarks>
        /// Validate a token that can be used to verify a customer email address.  The implementation of how a customer interacts with this token is left to the merchant. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="validationRequest">Token validation request</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (EmailVerifyTokenValidateResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<EmailVerifyTokenValidateResponse>> ValidateEmailVerificationTokenWithHttpInfoAsync (EmailVerifyTokenValidateRequest validationRequest, CancellationToken cancellationToken = default(CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class CustomerApi : ICustomerApi
    {
        private com.ultracart.admin.v2.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="CustomerApi"/> class.
        /// </summary>
        /// <returns></returns>
        public CustomerApi(String basePath, bool uselessVariable)
        {
            this.Configuration = new com.ultracart.admin.v2.Client.Configuration { BasePath = basePath };

            ExceptionFactory = com.ultracart.admin.v2.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CustomerApi"/> class
        /// </summary>
        /// <returns></returns>
        public CustomerApi()
        {
            this.Configuration = com.ultracart.admin.v2.Client.Configuration.Default;

            ExceptionFactory = com.ultracart.admin.v2.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CustomerApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public CustomerApi(com.ultracart.admin.v2.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = com.ultracart.admin.v2.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = com.ultracart.admin.v2.Client.Configuration.DefaultExceptionFactory;
        }


        /// <summary>
        /// Initializes a new instance of the <see cref="CustomerApi"/> class
        /// using a simple key string and optional version, which you will
        /// almost always want to use the default
        /// </summary>
        /// <param name="SimpleKey">A simple key.  See https://ultracart.atlassian.net/wiki/spaces/ucdoc/pages/38688545/API+Simple+Key</param>
        /// <returns></returns>
        public CustomerApi(string SimpleKey)
        {
            Configuration configuration = new Configuration();
            configuration.ApiKey.Add("x-ultracart-simple-key", SimpleKey);
            configuration.DefaultHeader.Add("X-UltraCart-Api-Version", "2017-03-01");
            this.Configuration = configuration;
            ExceptionFactory = com.ultracart.admin.v2.Client.Configuration.DefaultExceptionFactory;
        }


        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public com.ultracart.admin.v2.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public com.ultracart.admin.v2.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Adds store credit to a customer Adds store credit to a customer 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerProfileOid">The customer oid to credit.</param>
        /// <param name="storeCreditRequest">Store credit to add</param>
        /// <returns>BaseResponse</returns>
        public BaseResponse AddCustomerStoreCredit (int customerProfileOid, CustomerStoreCreditAddRequest storeCreditRequest)
        {
             ApiResponse<BaseResponse> localVarResponse = AddCustomerStoreCreditWithHttpInfo(customerProfileOid, storeCreditRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Adds store credit to a customer Adds store credit to a customer 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerProfileOid">The customer oid to credit.</param>
        /// <param name="storeCreditRequest">Store credit to add</param>
        /// <returns>ApiResponse of BaseResponse</returns>
        public ApiResponse<BaseResponse> AddCustomerStoreCreditWithHttpInfo (int customerProfileOid, CustomerStoreCreditAddRequest storeCreditRequest)
        {
            // verify the required parameter 'customerProfileOid' is set
            if (customerProfileOid == null)
                throw new ApiException(400, "Missing required parameter 'customerProfileOid' when calling CustomerApi->AddCustomerStoreCredit");
            // verify the required parameter 'storeCreditRequest' is set
            if (storeCreditRequest == null)
                throw new ApiException(400, "Missing required parameter 'storeCreditRequest' when calling CustomerApi->AddCustomerStoreCredit");

            var localVarPath = "/customer/customers/{customer_profile_oid}/store_credit";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json; charset=UTF-8"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (customerProfileOid != null) localVarPathParams.Add("customer_profile_oid", this.Configuration.ApiClient.ParameterToString(customerProfileOid)); // path parameter
            if (storeCreditRequest != null && storeCreditRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(storeCreditRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = storeCreditRequest; // byte array
            }

            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddCustomerStoreCredit", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BaseResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (BaseResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BaseResponse)));
        }

        /// <summary>
        /// Adds store credit to a customer Adds store credit to a customer 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerProfileOid">The customer oid to credit.</param>
        /// <param name="storeCreditRequest">Store credit to add</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of BaseResponse</returns>
        public async System.Threading.Tasks.Task<BaseResponse> AddCustomerStoreCreditAsync (int customerProfileOid, CustomerStoreCreditAddRequest storeCreditRequest, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<BaseResponse> localVarResponse = await AddCustomerStoreCreditWithHttpInfoAsync(customerProfileOid, storeCreditRequest, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Adds store credit to a customer Adds store credit to a customer 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerProfileOid">The customer oid to credit.</param>
        /// <param name="storeCreditRequest">Store credit to add</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (BaseResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<BaseResponse>> AddCustomerStoreCreditWithHttpInfoAsync (int customerProfileOid, CustomerStoreCreditAddRequest storeCreditRequest, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'customerProfileOid' is set
            if (customerProfileOid == null)
                throw new ApiException(400, "Missing required parameter 'customerProfileOid' when calling CustomerApi->AddCustomerStoreCredit");
            // verify the required parameter 'storeCreditRequest' is set
            if (storeCreditRequest == null)
                throw new ApiException(400, "Missing required parameter 'storeCreditRequest' when calling CustomerApi->AddCustomerStoreCredit");

            var localVarPath = "/customer/customers/{customer_profile_oid}/store_credit";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json; charset=UTF-8"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (customerProfileOid != null) localVarPathParams.Add("customer_profile_oid", this.Configuration.ApiClient.ParameterToString(customerProfileOid)); // path parameter
            if (storeCreditRequest != null && storeCreditRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(storeCreditRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = storeCreditRequest; // byte array
            }

            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddCustomerStoreCredit", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BaseResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (BaseResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BaseResponse)));
        }

        /// <summary>
        /// Updates the cashback balance for a customer by updating the internal gift certificate used, creating the gift certificate if needed. Updates the cashback balance for a customer by updating the internal gift certificate used, creating the gift certificate if needed. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerProfileOid">The customer profile oid</param>
        /// <param name="adjustInternalCertificateRequest">adjustInternalCertificateRequest</param>
        /// <returns>AdjustInternalCertificateResponse</returns>
        public AdjustInternalCertificateResponse AdjustInternalCertificate (int customerProfileOid, AdjustInternalCertificateRequest adjustInternalCertificateRequest)
        {
             ApiResponse<AdjustInternalCertificateResponse> localVarResponse = AdjustInternalCertificateWithHttpInfo(customerProfileOid, adjustInternalCertificateRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Updates the cashback balance for a customer by updating the internal gift certificate used, creating the gift certificate if needed. Updates the cashback balance for a customer by updating the internal gift certificate used, creating the gift certificate if needed. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerProfileOid">The customer profile oid</param>
        /// <param name="adjustInternalCertificateRequest">adjustInternalCertificateRequest</param>
        /// <returns>ApiResponse of AdjustInternalCertificateResponse</returns>
        public ApiResponse<AdjustInternalCertificateResponse> AdjustInternalCertificateWithHttpInfo (int customerProfileOid, AdjustInternalCertificateRequest adjustInternalCertificateRequest)
        {
            // verify the required parameter 'customerProfileOid' is set
            if (customerProfileOid == null)
                throw new ApiException(400, "Missing required parameter 'customerProfileOid' when calling CustomerApi->AdjustInternalCertificate");
            // verify the required parameter 'adjustInternalCertificateRequest' is set
            if (adjustInternalCertificateRequest == null)
                throw new ApiException(400, "Missing required parameter 'adjustInternalCertificateRequest' when calling CustomerApi->AdjustInternalCertificate");

            var localVarPath = "/customer/customers/{customer_profile_oid}/adjust_cashback_balance";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json; charset=UTF-8"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (customerProfileOid != null) localVarPathParams.Add("customer_profile_oid", this.Configuration.ApiClient.ParameterToString(customerProfileOid)); // path parameter
            if (adjustInternalCertificateRequest != null && adjustInternalCertificateRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(adjustInternalCertificateRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = adjustInternalCertificateRequest; // byte array
            }

            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AdjustInternalCertificate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AdjustInternalCertificateResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (AdjustInternalCertificateResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AdjustInternalCertificateResponse)));
        }

        /// <summary>
        /// Updates the cashback balance for a customer by updating the internal gift certificate used, creating the gift certificate if needed. Updates the cashback balance for a customer by updating the internal gift certificate used, creating the gift certificate if needed. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerProfileOid">The customer profile oid</param>
        /// <param name="adjustInternalCertificateRequest">adjustInternalCertificateRequest</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of AdjustInternalCertificateResponse</returns>
        public async System.Threading.Tasks.Task<AdjustInternalCertificateResponse> AdjustInternalCertificateAsync (int customerProfileOid, AdjustInternalCertificateRequest adjustInternalCertificateRequest, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<AdjustInternalCertificateResponse> localVarResponse = await AdjustInternalCertificateWithHttpInfoAsync(customerProfileOid, adjustInternalCertificateRequest, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Updates the cashback balance for a customer by updating the internal gift certificate used, creating the gift certificate if needed. Updates the cashback balance for a customer by updating the internal gift certificate used, creating the gift certificate if needed. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerProfileOid">The customer profile oid</param>
        /// <param name="adjustInternalCertificateRequest">adjustInternalCertificateRequest</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (AdjustInternalCertificateResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AdjustInternalCertificateResponse>> AdjustInternalCertificateWithHttpInfoAsync (int customerProfileOid, AdjustInternalCertificateRequest adjustInternalCertificateRequest, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'customerProfileOid' is set
            if (customerProfileOid == null)
                throw new ApiException(400, "Missing required parameter 'customerProfileOid' when calling CustomerApi->AdjustInternalCertificate");
            // verify the required parameter 'adjustInternalCertificateRequest' is set
            if (adjustInternalCertificateRequest == null)
                throw new ApiException(400, "Missing required parameter 'adjustInternalCertificateRequest' when calling CustomerApi->AdjustInternalCertificate");

            var localVarPath = "/customer/customers/{customer_profile_oid}/adjust_cashback_balance";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json; charset=UTF-8"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (customerProfileOid != null) localVarPathParams.Add("customer_profile_oid", this.Configuration.ApiClient.ParameterToString(customerProfileOid)); // path parameter
            if (adjustInternalCertificateRequest != null && adjustInternalCertificateRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(adjustInternalCertificateRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = adjustInternalCertificateRequest; // byte array
            }

            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AdjustInternalCertificate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AdjustInternalCertificateResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (AdjustInternalCertificateResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AdjustInternalCertificateResponse)));
        }

        /// <summary>
        /// Delete a customer Delete a customer on the UltraCart account. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerProfileOid">The customer_profile_oid to delete.</param>
        /// <returns></returns>
        public void DeleteCustomer (int customerProfileOid)
        {
             DeleteCustomerWithHttpInfo(customerProfileOid);
        }

        /// <summary>
        /// Delete a customer Delete a customer on the UltraCart account. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerProfileOid">The customer_profile_oid to delete.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteCustomerWithHttpInfo (int customerProfileOid)
        {
            // verify the required parameter 'customerProfileOid' is set
            if (customerProfileOid == null)
                throw new ApiException(400, "Missing required parameter 'customerProfileOid' when calling CustomerApi->DeleteCustomer");

            var localVarPath = "/customer/customers/{customer_profile_oid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (customerProfileOid != null) localVarPathParams.Add("customer_profile_oid", this.Configuration.ApiClient.ParameterToString(customerProfileOid)); // path parameter

            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteCustomer", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Delete a customer Delete a customer on the UltraCart account. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerProfileOid">The customer_profile_oid to delete.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteCustomerAsync (int customerProfileOid, CancellationToken cancellationToken = default(CancellationToken))
        {
             await DeleteCustomerWithHttpInfoAsync(customerProfileOid, cancellationToken);

        }

        /// <summary>
        /// Delete a customer Delete a customer on the UltraCart account. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerProfileOid">The customer_profile_oid to delete.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteCustomerWithHttpInfoAsync (int customerProfileOid, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'customerProfileOid' is set
            if (customerProfileOid == null)
                throw new ApiException(400, "Missing required parameter 'customerProfileOid' when calling CustomerApi->DeleteCustomer");

            var localVarPath = "/customer/customers/{customer_profile_oid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (customerProfileOid != null) localVarPathParams.Add("customer_profile_oid", this.Configuration.ApiClient.ParameterToString(customerProfileOid)); // path parameter

            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteCustomer", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Delete a customer wishlist item Delete a customer wishlist item 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerProfileOid">The customer oid for this wishlist.</param>
        /// <param name="customerWishlistItemOid">The wishlist oid for this wishlist item to delete.</param>
        /// <returns></returns>
        public void DeleteWishListItem (int customerProfileOid, int customerWishlistItemOid)
        {
             DeleteWishListItemWithHttpInfo(customerProfileOid, customerWishlistItemOid);
        }

        /// <summary>
        /// Delete a customer wishlist item Delete a customer wishlist item 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerProfileOid">The customer oid for this wishlist.</param>
        /// <param name="customerWishlistItemOid">The wishlist oid for this wishlist item to delete.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteWishListItemWithHttpInfo (int customerProfileOid, int customerWishlistItemOid)
        {
            // verify the required parameter 'customerProfileOid' is set
            if (customerProfileOid == null)
                throw new ApiException(400, "Missing required parameter 'customerProfileOid' when calling CustomerApi->DeleteWishListItem");
            // verify the required parameter 'customerWishlistItemOid' is set
            if (customerWishlistItemOid == null)
                throw new ApiException(400, "Missing required parameter 'customerWishlistItemOid' when calling CustomerApi->DeleteWishListItem");

            var localVarPath = "/customer/customers/{customer_profile_oid}/wishlist/{customer_wishlist_item_oid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (customerProfileOid != null) localVarPathParams.Add("customer_profile_oid", this.Configuration.ApiClient.ParameterToString(customerProfileOid)); // path parameter
            if (customerWishlistItemOid != null) localVarPathParams.Add("customer_wishlist_item_oid", this.Configuration.ApiClient.ParameterToString(customerWishlistItemOid)); // path parameter

            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteWishListItem", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Delete a customer wishlist item Delete a customer wishlist item 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerProfileOid">The customer oid for this wishlist.</param>
        /// <param name="customerWishlistItemOid">The wishlist oid for this wishlist item to delete.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteWishListItemAsync (int customerProfileOid, int customerWishlistItemOid, CancellationToken cancellationToken = default(CancellationToken))
        {
             await DeleteWishListItemWithHttpInfoAsync(customerProfileOid, customerWishlistItemOid, cancellationToken);

        }

        /// <summary>
        /// Delete a customer wishlist item Delete a customer wishlist item 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerProfileOid">The customer oid for this wishlist.</param>
        /// <param name="customerWishlistItemOid">The wishlist oid for this wishlist item to delete.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteWishListItemWithHttpInfoAsync (int customerProfileOid, int customerWishlistItemOid, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'customerProfileOid' is set
            if (customerProfileOid == null)
                throw new ApiException(400, "Missing required parameter 'customerProfileOid' when calling CustomerApi->DeleteWishListItem");
            // verify the required parameter 'customerWishlistItemOid' is set
            if (customerWishlistItemOid == null)
                throw new ApiException(400, "Missing required parameter 'customerWishlistItemOid' when calling CustomerApi->DeleteWishListItem");

            var localVarPath = "/customer/customers/{customer_profile_oid}/wishlist/{customer_wishlist_item_oid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (customerProfileOid != null) localVarPathParams.Add("customer_profile_oid", this.Configuration.ApiClient.ParameterToString(customerProfileOid)); // path parameter
            if (customerWishlistItemOid != null) localVarPathParams.Add("customer_wishlist_item_oid", this.Configuration.ApiClient.ParameterToString(customerWishlistItemOid)); // path parameter

            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteWishListItem", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Retrieve a customer Retrieves a single customer using the specified customer profile oid. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerProfileOid">The customer oid to retrieve.</param>
        /// <param name="expand">The object expansion to perform on the result.  See documentation for examples (optional)</param>
        /// <returns>CustomerResponse</returns>
        public CustomerResponse GetCustomer (int customerProfileOid, string expand = default(string))
        {
             ApiResponse<CustomerResponse> localVarResponse = GetCustomerWithHttpInfo(customerProfileOid, expand);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve a customer Retrieves a single customer using the specified customer profile oid. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerProfileOid">The customer oid to retrieve.</param>
        /// <param name="expand">The object expansion to perform on the result.  See documentation for examples (optional)</param>
        /// <returns>ApiResponse of CustomerResponse</returns>
        public ApiResponse<CustomerResponse> GetCustomerWithHttpInfo (int customerProfileOid, string expand = default(string))
        {
            // verify the required parameter 'customerProfileOid' is set
            if (customerProfileOid == null)
                throw new ApiException(400, "Missing required parameter 'customerProfileOid' when calling CustomerApi->GetCustomer");

            var localVarPath = "/customer/customers/{customer_profile_oid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (customerProfileOid != null) localVarPathParams.Add("customer_profile_oid", this.Configuration.ApiClient.ParameterToString(customerProfileOid)); // path parameter
            if (expand != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "_expand", expand)); // query parameter

            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCustomer", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CustomerResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (CustomerResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CustomerResponse)));
        }

        /// <summary>
        /// Retrieve a customer Retrieves a single customer using the specified customer profile oid. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerProfileOid">The customer oid to retrieve.</param>
        /// <param name="expand">The object expansion to perform on the result.  See documentation for examples (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of CustomerResponse</returns>
        public async System.Threading.Tasks.Task<CustomerResponse> GetCustomerAsync (int customerProfileOid, string expand = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<CustomerResponse> localVarResponse = await GetCustomerWithHttpInfoAsync(customerProfileOid, expand, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieve a customer Retrieves a single customer using the specified customer profile oid. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerProfileOid">The customer oid to retrieve.</param>
        /// <param name="expand">The object expansion to perform on the result.  See documentation for examples (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (CustomerResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CustomerResponse>> GetCustomerWithHttpInfoAsync (int customerProfileOid, string expand = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'customerProfileOid' is set
            if (customerProfileOid == null)
                throw new ApiException(400, "Missing required parameter 'customerProfileOid' when calling CustomerApi->GetCustomer");

            var localVarPath = "/customer/customers/{customer_profile_oid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (customerProfileOid != null) localVarPathParams.Add("customer_profile_oid", this.Configuration.ApiClient.ParameterToString(customerProfileOid)); // path parameter
            if (expand != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "_expand", expand)); // query parameter

            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCustomer", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CustomerResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (CustomerResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CustomerResponse)));
        }

        /// <summary>
        /// Retrieve a customer by Email Retrieves a single customer using the specified customer email address. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="email">The email address of the customer to retrieve.</param>
        /// <param name="expand">The object expansion to perform on the result.  See documentation for examples (optional)</param>
        /// <returns>CustomerResponse</returns>
        public CustomerResponse GetCustomerByEmail (string email, string expand = default(string))
        {
             ApiResponse<CustomerResponse> localVarResponse = GetCustomerByEmailWithHttpInfo(email, expand);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve a customer by Email Retrieves a single customer using the specified customer email address. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="email">The email address of the customer to retrieve.</param>
        /// <param name="expand">The object expansion to perform on the result.  See documentation for examples (optional)</param>
        /// <returns>ApiResponse of CustomerResponse</returns>
        public ApiResponse<CustomerResponse> GetCustomerByEmailWithHttpInfo (string email, string expand = default(string))
        {
            // verify the required parameter 'email' is set
            if (email == null)
                throw new ApiException(400, "Missing required parameter 'email' when calling CustomerApi->GetCustomerByEmail");

            var localVarPath = "/customer/customers/by_email/{email}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (email != null) localVarPathParams.Add("email", this.Configuration.ApiClient.ParameterToString(email)); // path parameter
            if (expand != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "_expand", expand)); // query parameter

            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCustomerByEmail", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CustomerResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (CustomerResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CustomerResponse)));
        }

        /// <summary>
        /// Retrieve a customer by Email Retrieves a single customer using the specified customer email address. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="email">The email address of the customer to retrieve.</param>
        /// <param name="expand">The object expansion to perform on the result.  See documentation for examples (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of CustomerResponse</returns>
        public async System.Threading.Tasks.Task<CustomerResponse> GetCustomerByEmailAsync (string email, string expand = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<CustomerResponse> localVarResponse = await GetCustomerByEmailWithHttpInfoAsync(email, expand, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieve a customer by Email Retrieves a single customer using the specified customer email address. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="email">The email address of the customer to retrieve.</param>
        /// <param name="expand">The object expansion to perform on the result.  See documentation for examples (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (CustomerResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CustomerResponse>> GetCustomerByEmailWithHttpInfoAsync (string email, string expand = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'email' is set
            if (email == null)
                throw new ApiException(400, "Missing required parameter 'email' when calling CustomerApi->GetCustomerByEmail");

            var localVarPath = "/customer/customers/by_email/{email}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (email != null) localVarPathParams.Add("email", this.Configuration.ApiClient.ParameterToString(email)); // path parameter
            if (expand != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "_expand", expand)); // query parameter

            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCustomerByEmail", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CustomerResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (CustomerResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CustomerResponse)));
        }

        /// <summary>
        /// Retrieve values needed for a customer profile editor Retrieve values needed for a customer profile editor. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>CustomerEditorValues</returns>
        public CustomerEditorValues GetCustomerEditorValues ()
        {
             ApiResponse<CustomerEditorValues> localVarResponse = GetCustomerEditorValuesWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve values needed for a customer profile editor Retrieve values needed for a customer profile editor. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of CustomerEditorValues</returns>
        public ApiResponse<CustomerEditorValues> GetCustomerEditorValuesWithHttpInfo ()
        {

            var localVarPath = "/customer/editor_values";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCustomerEditorValues", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CustomerEditorValues>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (CustomerEditorValues) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CustomerEditorValues)));
        }

        /// <summary>
        /// Retrieve values needed for a customer profile editor Retrieve values needed for a customer profile editor. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of CustomerEditorValues</returns>
        public async System.Threading.Tasks.Task<CustomerEditorValues> GetCustomerEditorValuesAsync (CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<CustomerEditorValues> localVarResponse = await GetCustomerEditorValuesWithHttpInfoAsync(cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieve values needed for a customer profile editor Retrieve values needed for a customer profile editor. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (CustomerEditorValues)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CustomerEditorValues>> GetCustomerEditorValuesWithHttpInfoAsync (CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/customer/editor_values";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCustomerEditorValues", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CustomerEditorValues>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (CustomerEditorValues) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CustomerEditorValues)));
        }

        /// <summary>
        /// Retrieve all email lists across all storefronts Retrieve all email lists across all storefronts 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>EmailListsResponse</returns>
        public EmailListsResponse GetCustomerEmailLists ()
        {
             ApiResponse<EmailListsResponse> localVarResponse = GetCustomerEmailListsWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve all email lists across all storefronts Retrieve all email lists across all storefronts 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of EmailListsResponse</returns>
        public ApiResponse<EmailListsResponse> GetCustomerEmailListsWithHttpInfo ()
        {

            var localVarPath = "/customer/email_lists";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCustomerEmailLists", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EmailListsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (EmailListsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EmailListsResponse)));
        }

        /// <summary>
        /// Retrieve all email lists across all storefronts Retrieve all email lists across all storefronts 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of EmailListsResponse</returns>
        public async System.Threading.Tasks.Task<EmailListsResponse> GetCustomerEmailListsAsync (CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<EmailListsResponse> localVarResponse = await GetCustomerEmailListsWithHttpInfoAsync(cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieve all email lists across all storefronts Retrieve all email lists across all storefronts 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (EmailListsResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<EmailListsResponse>> GetCustomerEmailListsWithHttpInfoAsync (CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/customer/email_lists";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCustomerEmailLists", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EmailListsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (EmailListsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EmailListsResponse)));
        }

        /// <summary>
        /// Retrieve the customer store credit accumulated through loyalty programs Retrieve the customer store credit accumulated through loyalty programs 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerProfileOid">The customer oid to retrieve.</param>
        /// <returns>CustomerStoreCreditResponse</returns>
        public CustomerStoreCreditResponse GetCustomerStoreCredit (int customerProfileOid)
        {
             ApiResponse<CustomerStoreCreditResponse> localVarResponse = GetCustomerStoreCreditWithHttpInfo(customerProfileOid);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve the customer store credit accumulated through loyalty programs Retrieve the customer store credit accumulated through loyalty programs 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerProfileOid">The customer oid to retrieve.</param>
        /// <returns>ApiResponse of CustomerStoreCreditResponse</returns>
        public ApiResponse<CustomerStoreCreditResponse> GetCustomerStoreCreditWithHttpInfo (int customerProfileOid)
        {
            // verify the required parameter 'customerProfileOid' is set
            if (customerProfileOid == null)
                throw new ApiException(400, "Missing required parameter 'customerProfileOid' when calling CustomerApi->GetCustomerStoreCredit");

            var localVarPath = "/customer/customers/{customer_profile_oid}/store_credit";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (customerProfileOid != null) localVarPathParams.Add("customer_profile_oid", this.Configuration.ApiClient.ParameterToString(customerProfileOid)); // path parameter

            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCustomerStoreCredit", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CustomerStoreCreditResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (CustomerStoreCreditResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CustomerStoreCreditResponse)));
        }

        /// <summary>
        /// Retrieve the customer store credit accumulated through loyalty programs Retrieve the customer store credit accumulated through loyalty programs 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerProfileOid">The customer oid to retrieve.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of CustomerStoreCreditResponse</returns>
        public async System.Threading.Tasks.Task<CustomerStoreCreditResponse> GetCustomerStoreCreditAsync (int customerProfileOid, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<CustomerStoreCreditResponse> localVarResponse = await GetCustomerStoreCreditWithHttpInfoAsync(customerProfileOid, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieve the customer store credit accumulated through loyalty programs Retrieve the customer store credit accumulated through loyalty programs 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerProfileOid">The customer oid to retrieve.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (CustomerStoreCreditResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CustomerStoreCreditResponse>> GetCustomerStoreCreditWithHttpInfoAsync (int customerProfileOid, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'customerProfileOid' is set
            if (customerProfileOid == null)
                throw new ApiException(400, "Missing required parameter 'customerProfileOid' when calling CustomerApi->GetCustomerStoreCredit");

            var localVarPath = "/customer/customers/{customer_profile_oid}/store_credit";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (customerProfileOid != null) localVarPathParams.Add("customer_profile_oid", this.Configuration.ApiClient.ParameterToString(customerProfileOid)); // path parameter

            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCustomerStoreCredit", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CustomerStoreCreditResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (CustomerStoreCreditResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CustomerStoreCreditResponse)));
        }

        /// <summary>
        /// Retrieve wishlist items for customer Retrieve wishlist items for customer. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerProfileOid">The customer oid for this wishlist.</param>
        /// <returns>CustomerWishListItemsResponse</returns>
        public CustomerWishListItemsResponse GetCustomerWishList (int customerProfileOid)
        {
             ApiResponse<CustomerWishListItemsResponse> localVarResponse = GetCustomerWishListWithHttpInfo(customerProfileOid);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve wishlist items for customer Retrieve wishlist items for customer. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerProfileOid">The customer oid for this wishlist.</param>
        /// <returns>ApiResponse of CustomerWishListItemsResponse</returns>
        public ApiResponse<CustomerWishListItemsResponse> GetCustomerWishListWithHttpInfo (int customerProfileOid)
        {
            // verify the required parameter 'customerProfileOid' is set
            if (customerProfileOid == null)
                throw new ApiException(400, "Missing required parameter 'customerProfileOid' when calling CustomerApi->GetCustomerWishList");

            var localVarPath = "/customer/customers/{customer_profile_oid}/wishlist";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (customerProfileOid != null) localVarPathParams.Add("customer_profile_oid", this.Configuration.ApiClient.ParameterToString(customerProfileOid)); // path parameter

            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCustomerWishList", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CustomerWishListItemsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (CustomerWishListItemsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CustomerWishListItemsResponse)));
        }

        /// <summary>
        /// Retrieve wishlist items for customer Retrieve wishlist items for customer. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerProfileOid">The customer oid for this wishlist.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of CustomerWishListItemsResponse</returns>
        public async System.Threading.Tasks.Task<CustomerWishListItemsResponse> GetCustomerWishListAsync (int customerProfileOid, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<CustomerWishListItemsResponse> localVarResponse = await GetCustomerWishListWithHttpInfoAsync(customerProfileOid, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieve wishlist items for customer Retrieve wishlist items for customer. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerProfileOid">The customer oid for this wishlist.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (CustomerWishListItemsResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CustomerWishListItemsResponse>> GetCustomerWishListWithHttpInfoAsync (int customerProfileOid, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'customerProfileOid' is set
            if (customerProfileOid == null)
                throw new ApiException(400, "Missing required parameter 'customerProfileOid' when calling CustomerApi->GetCustomerWishList");

            var localVarPath = "/customer/customers/{customer_profile_oid}/wishlist";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (customerProfileOid != null) localVarPathParams.Add("customer_profile_oid", this.Configuration.ApiClient.ParameterToString(customerProfileOid)); // path parameter

            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCustomerWishList", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CustomerWishListItemsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (CustomerWishListItemsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CustomerWishListItemsResponse)));
        }

        /// <summary>
        /// Retrieve wishlist item for customer Retrieve wishlist item for customer. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerProfileOid">The customer oid for this wishlist.</param>
        /// <param name="customerWishlistItemOid">The wishlist oid for this wishlist item.</param>
        /// <returns>CustomerWishListItemResponse</returns>
        public CustomerWishListItemResponse GetCustomerWishListItem (int customerProfileOid, int customerWishlistItemOid)
        {
             ApiResponse<CustomerWishListItemResponse> localVarResponse = GetCustomerWishListItemWithHttpInfo(customerProfileOid, customerWishlistItemOid);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve wishlist item for customer Retrieve wishlist item for customer. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerProfileOid">The customer oid for this wishlist.</param>
        /// <param name="customerWishlistItemOid">The wishlist oid for this wishlist item.</param>
        /// <returns>ApiResponse of CustomerWishListItemResponse</returns>
        public ApiResponse<CustomerWishListItemResponse> GetCustomerWishListItemWithHttpInfo (int customerProfileOid, int customerWishlistItemOid)
        {
            // verify the required parameter 'customerProfileOid' is set
            if (customerProfileOid == null)
                throw new ApiException(400, "Missing required parameter 'customerProfileOid' when calling CustomerApi->GetCustomerWishListItem");
            // verify the required parameter 'customerWishlistItemOid' is set
            if (customerWishlistItemOid == null)
                throw new ApiException(400, "Missing required parameter 'customerWishlistItemOid' when calling CustomerApi->GetCustomerWishListItem");

            var localVarPath = "/customer/customers/{customer_profile_oid}/wishlist/{customer_wishlist_item_oid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (customerProfileOid != null) localVarPathParams.Add("customer_profile_oid", this.Configuration.ApiClient.ParameterToString(customerProfileOid)); // path parameter
            if (customerWishlistItemOid != null) localVarPathParams.Add("customer_wishlist_item_oid", this.Configuration.ApiClient.ParameterToString(customerWishlistItemOid)); // path parameter

            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCustomerWishListItem", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CustomerWishListItemResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (CustomerWishListItemResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CustomerWishListItemResponse)));
        }

        /// <summary>
        /// Retrieve wishlist item for customer Retrieve wishlist item for customer. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerProfileOid">The customer oid for this wishlist.</param>
        /// <param name="customerWishlistItemOid">The wishlist oid for this wishlist item.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of CustomerWishListItemResponse</returns>
        public async System.Threading.Tasks.Task<CustomerWishListItemResponse> GetCustomerWishListItemAsync (int customerProfileOid, int customerWishlistItemOid, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<CustomerWishListItemResponse> localVarResponse = await GetCustomerWishListItemWithHttpInfoAsync(customerProfileOid, customerWishlistItemOid, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieve wishlist item for customer Retrieve wishlist item for customer. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerProfileOid">The customer oid for this wishlist.</param>
        /// <param name="customerWishlistItemOid">The wishlist oid for this wishlist item.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (CustomerWishListItemResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CustomerWishListItemResponse>> GetCustomerWishListItemWithHttpInfoAsync (int customerProfileOid, int customerWishlistItemOid, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'customerProfileOid' is set
            if (customerProfileOid == null)
                throw new ApiException(400, "Missing required parameter 'customerProfileOid' when calling CustomerApi->GetCustomerWishListItem");
            // verify the required parameter 'customerWishlistItemOid' is set
            if (customerWishlistItemOid == null)
                throw new ApiException(400, "Missing required parameter 'customerWishlistItemOid' when calling CustomerApi->GetCustomerWishListItem");

            var localVarPath = "/customer/customers/{customer_profile_oid}/wishlist/{customer_wishlist_item_oid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (customerProfileOid != null) localVarPathParams.Add("customer_profile_oid", this.Configuration.ApiClient.ParameterToString(customerProfileOid)); // path parameter
            if (customerWishlistItemOid != null) localVarPathParams.Add("customer_wishlist_item_oid", this.Configuration.ApiClient.ParameterToString(customerWishlistItemOid)); // path parameter

            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCustomerWishListItem", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CustomerWishListItemResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (CustomerWishListItemResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CustomerWishListItemResponse)));
        }

        /// <summary>
        /// Retrieve customers Retrieves customers from the account.  If no parameters are specified, all customers will be returned.  You will need to make multiple API calls in order to retrieve the entire result set since this API performs result set pagination. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="email">Email (optional)</param>
        /// <param name="qbClass">Quickbooks class (optional)</param>
        /// <param name="quickbooksCode">Quickbooks code (optional)</param>
        /// <param name="lastModifiedDtsStart">Last modified date start (optional)</param>
        /// <param name="lastModifiedDtsEnd">Last modified date end (optional)</param>
        /// <param name="signupDtsStart">Signup date start (optional)</param>
        /// <param name="signupDtsEnd">Signup date end (optional)</param>
        /// <param name="billingFirstName">Billing first name (optional)</param>
        /// <param name="billingLastName">Billing last name (optional)</param>
        /// <param name="billingCompany">Billing company (optional)</param>
        /// <param name="billingCity">Billing city (optional)</param>
        /// <param name="billingState">Billing state (optional)</param>
        /// <param name="billingPostalCode">Billing postal code (optional)</param>
        /// <param name="billingCountryCode">Billing country code (optional)</param>
        /// <param name="billingDayPhone">Billing day phone (optional)</param>
        /// <param name="billingEveningPhone">Billing evening phone (optional)</param>
        /// <param name="shippingFirstName">Shipping first name (optional)</param>
        /// <param name="shippingLastName">Shipping last name (optional)</param>
        /// <param name="shippingCompany">Shipping company (optional)</param>
        /// <param name="shippingCity">Shipping city (optional)</param>
        /// <param name="shippingState">Shipping state (optional)</param>
        /// <param name="shippingPostalCode">Shipping postal code (optional)</param>
        /// <param name="shippingCountryCode">Shipping country code (optional)</param>
        /// <param name="shippingDayPhone">Shipping day phone (optional)</param>
        /// <param name="shippingEveningPhone">Shipping evening phone (optional)</param>
        /// <param name="pricingTierOid">Pricing tier oid (optional)</param>
        /// <param name="pricingTierName">Pricing tier name (optional)</param>
        /// <param name="limit">The maximum number of records to return on this one API call. (Max 200) (optional, default to 100)</param>
        /// <param name="offset">Pagination of the record set.  Offset is a zero based index. (optional, default to 0)</param>
        /// <param name="since">Fetch customers that have been created/modified since this date/time. (optional)</param>
        /// <param name="sort">The sort order of the customers.  See Sorting documentation for examples of using multiple values and sorting by ascending and descending. (optional)</param>
        /// <param name="expand">The object expansion to perform on the result.  See documentation for examples (optional)</param>
        /// <returns>CustomersResponse</returns>
        public CustomersResponse GetCustomers (string email = default(string), string qbClass = default(string), string quickbooksCode = default(string), string lastModifiedDtsStart = default(string), string lastModifiedDtsEnd = default(string), string signupDtsStart = default(string), string signupDtsEnd = default(string), string billingFirstName = default(string), string billingLastName = default(string), string billingCompany = default(string), string billingCity = default(string), string billingState = default(string), string billingPostalCode = default(string), string billingCountryCode = default(string), string billingDayPhone = default(string), string billingEveningPhone = default(string), string shippingFirstName = default(string), string shippingLastName = default(string), string shippingCompany = default(string), string shippingCity = default(string), string shippingState = default(string), string shippingPostalCode = default(string), string shippingCountryCode = default(string), string shippingDayPhone = default(string), string shippingEveningPhone = default(string), int? pricingTierOid = default(int?), string pricingTierName = default(string), int? limit = default(int?), int? offset = default(int?), string since = default(string), string sort = default(string), string expand = default(string))
        {
             ApiResponse<CustomersResponse> localVarResponse = GetCustomersWithHttpInfo(email, qbClass, quickbooksCode, lastModifiedDtsStart, lastModifiedDtsEnd, signupDtsStart, signupDtsEnd, billingFirstName, billingLastName, billingCompany, billingCity, billingState, billingPostalCode, billingCountryCode, billingDayPhone, billingEveningPhone, shippingFirstName, shippingLastName, shippingCompany, shippingCity, shippingState, shippingPostalCode, shippingCountryCode, shippingDayPhone, shippingEveningPhone, pricingTierOid, pricingTierName, limit, offset, since, sort, expand);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve customers Retrieves customers from the account.  If no parameters are specified, all customers will be returned.  You will need to make multiple API calls in order to retrieve the entire result set since this API performs result set pagination. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="email">Email (optional)</param>
        /// <param name="qbClass">Quickbooks class (optional)</param>
        /// <param name="quickbooksCode">Quickbooks code (optional)</param>
        /// <param name="lastModifiedDtsStart">Last modified date start (optional)</param>
        /// <param name="lastModifiedDtsEnd">Last modified date end (optional)</param>
        /// <param name="signupDtsStart">Signup date start (optional)</param>
        /// <param name="signupDtsEnd">Signup date end (optional)</param>
        /// <param name="billingFirstName">Billing first name (optional)</param>
        /// <param name="billingLastName">Billing last name (optional)</param>
        /// <param name="billingCompany">Billing company (optional)</param>
        /// <param name="billingCity">Billing city (optional)</param>
        /// <param name="billingState">Billing state (optional)</param>
        /// <param name="billingPostalCode">Billing postal code (optional)</param>
        /// <param name="billingCountryCode">Billing country code (optional)</param>
        /// <param name="billingDayPhone">Billing day phone (optional)</param>
        /// <param name="billingEveningPhone">Billing evening phone (optional)</param>
        /// <param name="shippingFirstName">Shipping first name (optional)</param>
        /// <param name="shippingLastName">Shipping last name (optional)</param>
        /// <param name="shippingCompany">Shipping company (optional)</param>
        /// <param name="shippingCity">Shipping city (optional)</param>
        /// <param name="shippingState">Shipping state (optional)</param>
        /// <param name="shippingPostalCode">Shipping postal code (optional)</param>
        /// <param name="shippingCountryCode">Shipping country code (optional)</param>
        /// <param name="shippingDayPhone">Shipping day phone (optional)</param>
        /// <param name="shippingEveningPhone">Shipping evening phone (optional)</param>
        /// <param name="pricingTierOid">Pricing tier oid (optional)</param>
        /// <param name="pricingTierName">Pricing tier name (optional)</param>
        /// <param name="limit">The maximum number of records to return on this one API call. (Max 200) (optional, default to 100)</param>
        /// <param name="offset">Pagination of the record set.  Offset is a zero based index. (optional, default to 0)</param>
        /// <param name="since">Fetch customers that have been created/modified since this date/time. (optional)</param>
        /// <param name="sort">The sort order of the customers.  See Sorting documentation for examples of using multiple values and sorting by ascending and descending. (optional)</param>
        /// <param name="expand">The object expansion to perform on the result.  See documentation for examples (optional)</param>
        /// <returns>ApiResponse of CustomersResponse</returns>
        public ApiResponse<CustomersResponse> GetCustomersWithHttpInfo (string email = default(string), string qbClass = default(string), string quickbooksCode = default(string), string lastModifiedDtsStart = default(string), string lastModifiedDtsEnd = default(string), string signupDtsStart = default(string), string signupDtsEnd = default(string), string billingFirstName = default(string), string billingLastName = default(string), string billingCompany = default(string), string billingCity = default(string), string billingState = default(string), string billingPostalCode = default(string), string billingCountryCode = default(string), string billingDayPhone = default(string), string billingEveningPhone = default(string), string shippingFirstName = default(string), string shippingLastName = default(string), string shippingCompany = default(string), string shippingCity = default(string), string shippingState = default(string), string shippingPostalCode = default(string), string shippingCountryCode = default(string), string shippingDayPhone = default(string), string shippingEveningPhone = default(string), int? pricingTierOid = default(int?), string pricingTierName = default(string), int? limit = default(int?), int? offset = default(int?), string since = default(string), string sort = default(string), string expand = default(string))
        {

            var localVarPath = "/customer/customers";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (email != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "email", email)); // query parameter
            if (qbClass != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "qb_class", qbClass)); // query parameter
            if (quickbooksCode != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "quickbooks_code", quickbooksCode)); // query parameter
            if (lastModifiedDtsStart != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "last_modified_dts_start", lastModifiedDtsStart)); // query parameter
            if (lastModifiedDtsEnd != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "last_modified_dts_end", lastModifiedDtsEnd)); // query parameter
            if (signupDtsStart != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "signup_dts_start", signupDtsStart)); // query parameter
            if (signupDtsEnd != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "signup_dts_end", signupDtsEnd)); // query parameter
            if (billingFirstName != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "billing_first_name", billingFirstName)); // query parameter
            if (billingLastName != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "billing_last_name", billingLastName)); // query parameter
            if (billingCompany != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "billing_company", billingCompany)); // query parameter
            if (billingCity != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "billing_city", billingCity)); // query parameter
            if (billingState != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "billing_state", billingState)); // query parameter
            if (billingPostalCode != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "billing_postal_code", billingPostalCode)); // query parameter
            if (billingCountryCode != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "billing_country_code", billingCountryCode)); // query parameter
            if (billingDayPhone != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "billing_day_phone", billingDayPhone)); // query parameter
            if (billingEveningPhone != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "billing_evening_phone", billingEveningPhone)); // query parameter
            if (shippingFirstName != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "shipping_first_name", shippingFirstName)); // query parameter
            if (shippingLastName != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "shipping_last_name", shippingLastName)); // query parameter
            if (shippingCompany != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "shipping_company", shippingCompany)); // query parameter
            if (shippingCity != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "shipping_city", shippingCity)); // query parameter
            if (shippingState != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "shipping_state", shippingState)); // query parameter
            if (shippingPostalCode != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "shipping_postal_code", shippingPostalCode)); // query parameter
            if (shippingCountryCode != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "shipping_country_code", shippingCountryCode)); // query parameter
            if (shippingDayPhone != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "shipping_day_phone", shippingDayPhone)); // query parameter
            if (shippingEveningPhone != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "shipping_evening_phone", shippingEveningPhone)); // query parameter
            if (pricingTierOid != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pricing_tier_oid", pricingTierOid)); // query parameter
            if (pricingTierName != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pricing_tier_name", pricingTierName)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "_limit", limit)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "_offset", offset)); // query parameter
            if (since != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "_since", since)); // query parameter
            if (sort != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "_sort", sort)); // query parameter
            if (expand != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "_expand", expand)); // query parameter

            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCustomers", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CustomersResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (CustomersResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CustomersResponse)));
        }

        /// <summary>
        /// Retrieve customers Retrieves customers from the account.  If no parameters are specified, all customers will be returned.  You will need to make multiple API calls in order to retrieve the entire result set since this API performs result set pagination. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="email">Email (optional)</param>
        /// <param name="qbClass">Quickbooks class (optional)</param>
        /// <param name="quickbooksCode">Quickbooks code (optional)</param>
        /// <param name="lastModifiedDtsStart">Last modified date start (optional)</param>
        /// <param name="lastModifiedDtsEnd">Last modified date end (optional)</param>
        /// <param name="signupDtsStart">Signup date start (optional)</param>
        /// <param name="signupDtsEnd">Signup date end (optional)</param>
        /// <param name="billingFirstName">Billing first name (optional)</param>
        /// <param name="billingLastName">Billing last name (optional)</param>
        /// <param name="billingCompany">Billing company (optional)</param>
        /// <param name="billingCity">Billing city (optional)</param>
        /// <param name="billingState">Billing state (optional)</param>
        /// <param name="billingPostalCode">Billing postal code (optional)</param>
        /// <param name="billingCountryCode">Billing country code (optional)</param>
        /// <param name="billingDayPhone">Billing day phone (optional)</param>
        /// <param name="billingEveningPhone">Billing evening phone (optional)</param>
        /// <param name="shippingFirstName">Shipping first name (optional)</param>
        /// <param name="shippingLastName">Shipping last name (optional)</param>
        /// <param name="shippingCompany">Shipping company (optional)</param>
        /// <param name="shippingCity">Shipping city (optional)</param>
        /// <param name="shippingState">Shipping state (optional)</param>
        /// <param name="shippingPostalCode">Shipping postal code (optional)</param>
        /// <param name="shippingCountryCode">Shipping country code (optional)</param>
        /// <param name="shippingDayPhone">Shipping day phone (optional)</param>
        /// <param name="shippingEveningPhone">Shipping evening phone (optional)</param>
        /// <param name="pricingTierOid">Pricing tier oid (optional)</param>
        /// <param name="pricingTierName">Pricing tier name (optional)</param>
        /// <param name="limit">The maximum number of records to return on this one API call. (Max 200) (optional, default to 100)</param>
        /// <param name="offset">Pagination of the record set.  Offset is a zero based index. (optional, default to 0)</param>
        /// <param name="since">Fetch customers that have been created/modified since this date/time. (optional)</param>
        /// <param name="sort">The sort order of the customers.  See Sorting documentation for examples of using multiple values and sorting by ascending and descending. (optional)</param>
        /// <param name="expand">The object expansion to perform on the result.  See documentation for examples (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of CustomersResponse</returns>
        public async System.Threading.Tasks.Task<CustomersResponse> GetCustomersAsync (string email = default(string), string qbClass = default(string), string quickbooksCode = default(string), string lastModifiedDtsStart = default(string), string lastModifiedDtsEnd = default(string), string signupDtsStart = default(string), string signupDtsEnd = default(string), string billingFirstName = default(string), string billingLastName = default(string), string billingCompany = default(string), string billingCity = default(string), string billingState = default(string), string billingPostalCode = default(string), string billingCountryCode = default(string), string billingDayPhone = default(string), string billingEveningPhone = default(string), string shippingFirstName = default(string), string shippingLastName = default(string), string shippingCompany = default(string), string shippingCity = default(string), string shippingState = default(string), string shippingPostalCode = default(string), string shippingCountryCode = default(string), string shippingDayPhone = default(string), string shippingEveningPhone = default(string), int? pricingTierOid = default(int?), string pricingTierName = default(string), int? limit = default(int?), int? offset = default(int?), string since = default(string), string sort = default(string), string expand = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<CustomersResponse> localVarResponse = await GetCustomersWithHttpInfoAsync(email, qbClass, quickbooksCode, lastModifiedDtsStart, lastModifiedDtsEnd, signupDtsStart, signupDtsEnd, billingFirstName, billingLastName, billingCompany, billingCity, billingState, billingPostalCode, billingCountryCode, billingDayPhone, billingEveningPhone, shippingFirstName, shippingLastName, shippingCompany, shippingCity, shippingState, shippingPostalCode, shippingCountryCode, shippingDayPhone, shippingEveningPhone, pricingTierOid, pricingTierName, limit, offset, since, sort, expand, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieve customers Retrieves customers from the account.  If no parameters are specified, all customers will be returned.  You will need to make multiple API calls in order to retrieve the entire result set since this API performs result set pagination. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="email">Email (optional)</param>
        /// <param name="qbClass">Quickbooks class (optional)</param>
        /// <param name="quickbooksCode">Quickbooks code (optional)</param>
        /// <param name="lastModifiedDtsStart">Last modified date start (optional)</param>
        /// <param name="lastModifiedDtsEnd">Last modified date end (optional)</param>
        /// <param name="signupDtsStart">Signup date start (optional)</param>
        /// <param name="signupDtsEnd">Signup date end (optional)</param>
        /// <param name="billingFirstName">Billing first name (optional)</param>
        /// <param name="billingLastName">Billing last name (optional)</param>
        /// <param name="billingCompany">Billing company (optional)</param>
        /// <param name="billingCity">Billing city (optional)</param>
        /// <param name="billingState">Billing state (optional)</param>
        /// <param name="billingPostalCode">Billing postal code (optional)</param>
        /// <param name="billingCountryCode">Billing country code (optional)</param>
        /// <param name="billingDayPhone">Billing day phone (optional)</param>
        /// <param name="billingEveningPhone">Billing evening phone (optional)</param>
        /// <param name="shippingFirstName">Shipping first name (optional)</param>
        /// <param name="shippingLastName">Shipping last name (optional)</param>
        /// <param name="shippingCompany">Shipping company (optional)</param>
        /// <param name="shippingCity">Shipping city (optional)</param>
        /// <param name="shippingState">Shipping state (optional)</param>
        /// <param name="shippingPostalCode">Shipping postal code (optional)</param>
        /// <param name="shippingCountryCode">Shipping country code (optional)</param>
        /// <param name="shippingDayPhone">Shipping day phone (optional)</param>
        /// <param name="shippingEveningPhone">Shipping evening phone (optional)</param>
        /// <param name="pricingTierOid">Pricing tier oid (optional)</param>
        /// <param name="pricingTierName">Pricing tier name (optional)</param>
        /// <param name="limit">The maximum number of records to return on this one API call. (Max 200) (optional, default to 100)</param>
        /// <param name="offset">Pagination of the record set.  Offset is a zero based index. (optional, default to 0)</param>
        /// <param name="since">Fetch customers that have been created/modified since this date/time. (optional)</param>
        /// <param name="sort">The sort order of the customers.  See Sorting documentation for examples of using multiple values and sorting by ascending and descending. (optional)</param>
        /// <param name="expand">The object expansion to perform on the result.  See documentation for examples (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (CustomersResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CustomersResponse>> GetCustomersWithHttpInfoAsync (string email = default(string), string qbClass = default(string), string quickbooksCode = default(string), string lastModifiedDtsStart = default(string), string lastModifiedDtsEnd = default(string), string signupDtsStart = default(string), string signupDtsEnd = default(string), string billingFirstName = default(string), string billingLastName = default(string), string billingCompany = default(string), string billingCity = default(string), string billingState = default(string), string billingPostalCode = default(string), string billingCountryCode = default(string), string billingDayPhone = default(string), string billingEveningPhone = default(string), string shippingFirstName = default(string), string shippingLastName = default(string), string shippingCompany = default(string), string shippingCity = default(string), string shippingState = default(string), string shippingPostalCode = default(string), string shippingCountryCode = default(string), string shippingDayPhone = default(string), string shippingEveningPhone = default(string), int? pricingTierOid = default(int?), string pricingTierName = default(string), int? limit = default(int?), int? offset = default(int?), string since = default(string), string sort = default(string), string expand = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/customer/customers";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (email != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "email", email)); // query parameter
            if (qbClass != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "qb_class", qbClass)); // query parameter
            if (quickbooksCode != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "quickbooks_code", quickbooksCode)); // query parameter
            if (lastModifiedDtsStart != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "last_modified_dts_start", lastModifiedDtsStart)); // query parameter
            if (lastModifiedDtsEnd != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "last_modified_dts_end", lastModifiedDtsEnd)); // query parameter
            if (signupDtsStart != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "signup_dts_start", signupDtsStart)); // query parameter
            if (signupDtsEnd != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "signup_dts_end", signupDtsEnd)); // query parameter
            if (billingFirstName != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "billing_first_name", billingFirstName)); // query parameter
            if (billingLastName != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "billing_last_name", billingLastName)); // query parameter
            if (billingCompany != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "billing_company", billingCompany)); // query parameter
            if (billingCity != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "billing_city", billingCity)); // query parameter
            if (billingState != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "billing_state", billingState)); // query parameter
            if (billingPostalCode != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "billing_postal_code", billingPostalCode)); // query parameter
            if (billingCountryCode != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "billing_country_code", billingCountryCode)); // query parameter
            if (billingDayPhone != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "billing_day_phone", billingDayPhone)); // query parameter
            if (billingEveningPhone != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "billing_evening_phone", billingEveningPhone)); // query parameter
            if (shippingFirstName != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "shipping_first_name", shippingFirstName)); // query parameter
            if (shippingLastName != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "shipping_last_name", shippingLastName)); // query parameter
            if (shippingCompany != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "shipping_company", shippingCompany)); // query parameter
            if (shippingCity != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "shipping_city", shippingCity)); // query parameter
            if (shippingState != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "shipping_state", shippingState)); // query parameter
            if (shippingPostalCode != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "shipping_postal_code", shippingPostalCode)); // query parameter
            if (shippingCountryCode != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "shipping_country_code", shippingCountryCode)); // query parameter
            if (shippingDayPhone != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "shipping_day_phone", shippingDayPhone)); // query parameter
            if (shippingEveningPhone != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "shipping_evening_phone", shippingEveningPhone)); // query parameter
            if (pricingTierOid != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pricing_tier_oid", pricingTierOid)); // query parameter
            if (pricingTierName != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pricing_tier_name", pricingTierName)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "_limit", limit)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "_offset", offset)); // query parameter
            if (since != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "_since", since)); // query parameter
            if (sort != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "_sort", sort)); // query parameter
            if (expand != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "_expand", expand)); // query parameter

            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCustomers", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CustomersResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (CustomersResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CustomersResponse)));
        }

        /// <summary>
        /// Retrieve customers by query Retrieves customers from the account.  If no parameters are specified, all customers will be returned.  You will need to make multiple API calls in order to retrieve the entire result set since this API performs result set pagination. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerQuery">Customer query</param>
        /// <param name="limit">The maximum number of records to return on this one API call. (Max 200) (optional, default to 100)</param>
        /// <param name="offset">Pagination of the record set.  Offset is a zero based index. (optional, default to 0)</param>
        /// <param name="since">Fetch customers that have been created/modified since this date/time. (optional)</param>
        /// <param name="sort">The sort order of the customers.  See Sorting documentation for examples of using multiple values and sorting by ascending and descending. (optional)</param>
        /// <param name="expand">The object expansion to perform on the result.  See documentation for examples (optional)</param>
        /// <returns>CustomersResponse</returns>
        public CustomersResponse GetCustomersByQuery (CustomerQuery customerQuery, int? limit = default(int?), int? offset = default(int?), string since = default(string), string sort = default(string), string expand = default(string))
        {
             ApiResponse<CustomersResponse> localVarResponse = GetCustomersByQueryWithHttpInfo(customerQuery, limit, offset, since, sort, expand);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve customers by query Retrieves customers from the account.  If no parameters are specified, all customers will be returned.  You will need to make multiple API calls in order to retrieve the entire result set since this API performs result set pagination. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerQuery">Customer query</param>
        /// <param name="limit">The maximum number of records to return on this one API call. (Max 200) (optional, default to 100)</param>
        /// <param name="offset">Pagination of the record set.  Offset is a zero based index. (optional, default to 0)</param>
        /// <param name="since">Fetch customers that have been created/modified since this date/time. (optional)</param>
        /// <param name="sort">The sort order of the customers.  See Sorting documentation for examples of using multiple values and sorting by ascending and descending. (optional)</param>
        /// <param name="expand">The object expansion to perform on the result.  See documentation for examples (optional)</param>
        /// <returns>ApiResponse of CustomersResponse</returns>
        public ApiResponse<CustomersResponse> GetCustomersByQueryWithHttpInfo (CustomerQuery customerQuery, int? limit = default(int?), int? offset = default(int?), string since = default(string), string sort = default(string), string expand = default(string))
        {
            // verify the required parameter 'customerQuery' is set
            if (customerQuery == null)
                throw new ApiException(400, "Missing required parameter 'customerQuery' when calling CustomerApi->GetCustomersByQuery");

            var localVarPath = "/customer/customers/query";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "_limit", limit)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "_offset", offset)); // query parameter
            if (since != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "_since", since)); // query parameter
            if (sort != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "_sort", sort)); // query parameter
            if (expand != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "_expand", expand)); // query parameter
            if (customerQuery != null && customerQuery.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(customerQuery); // http body (model) parameter
            }
            else
            {
                localVarPostBody = customerQuery; // byte array
            }

            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCustomersByQuery", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CustomersResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (CustomersResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CustomersResponse)));
        }

        /// <summary>
        /// Retrieve customers by query Retrieves customers from the account.  If no parameters are specified, all customers will be returned.  You will need to make multiple API calls in order to retrieve the entire result set since this API performs result set pagination. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerQuery">Customer query</param>
        /// <param name="limit">The maximum number of records to return on this one API call. (Max 200) (optional, default to 100)</param>
        /// <param name="offset">Pagination of the record set.  Offset is a zero based index. (optional, default to 0)</param>
        /// <param name="since">Fetch customers that have been created/modified since this date/time. (optional)</param>
        /// <param name="sort">The sort order of the customers.  See Sorting documentation for examples of using multiple values and sorting by ascending and descending. (optional)</param>
        /// <param name="expand">The object expansion to perform on the result.  See documentation for examples (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of CustomersResponse</returns>
        public async System.Threading.Tasks.Task<CustomersResponse> GetCustomersByQueryAsync (CustomerQuery customerQuery, int? limit = default(int?), int? offset = default(int?), string since = default(string), string sort = default(string), string expand = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<CustomersResponse> localVarResponse = await GetCustomersByQueryWithHttpInfoAsync(customerQuery, limit, offset, since, sort, expand, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieve customers by query Retrieves customers from the account.  If no parameters are specified, all customers will be returned.  You will need to make multiple API calls in order to retrieve the entire result set since this API performs result set pagination. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerQuery">Customer query</param>
        /// <param name="limit">The maximum number of records to return on this one API call. (Max 200) (optional, default to 100)</param>
        /// <param name="offset">Pagination of the record set.  Offset is a zero based index. (optional, default to 0)</param>
        /// <param name="since">Fetch customers that have been created/modified since this date/time. (optional)</param>
        /// <param name="sort">The sort order of the customers.  See Sorting documentation for examples of using multiple values and sorting by ascending and descending. (optional)</param>
        /// <param name="expand">The object expansion to perform on the result.  See documentation for examples (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (CustomersResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CustomersResponse>> GetCustomersByQueryWithHttpInfoAsync (CustomerQuery customerQuery, int? limit = default(int?), int? offset = default(int?), string since = default(string), string sort = default(string), string expand = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'customerQuery' is set
            if (customerQuery == null)
                throw new ApiException(400, "Missing required parameter 'customerQuery' when calling CustomerApi->GetCustomersByQuery");

            var localVarPath = "/customer/customers/query";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "_limit", limit)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "_offset", offset)); // query parameter
            if (since != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "_since", since)); // query parameter
            if (sort != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "_sort", sort)); // query parameter
            if (expand != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "_expand", expand)); // query parameter
            if (customerQuery != null && customerQuery.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(customerQuery); // http body (model) parameter
            }
            else
            {
                localVarPostBody = customerQuery; // byte array
            }

            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCustomersByQuery", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CustomersResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (CustomersResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CustomersResponse)));
        }

        /// <summary>
        /// Retrieve customers for DataTables plugin Retrieves customers from the account.  If no searches are specified, all customers will be returned. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="expand">The object expansion to perform on the result.  See documentation for examples (optional)</param>
        /// <returns>DataTablesServerSideResponse</returns>
        public DataTablesServerSideResponse GetCustomersForDataTables (string expand = default(string))
        {
             ApiResponse<DataTablesServerSideResponse> localVarResponse = GetCustomersForDataTablesWithHttpInfo(expand);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve customers for DataTables plugin Retrieves customers from the account.  If no searches are specified, all customers will be returned. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="expand">The object expansion to perform on the result.  See documentation for examples (optional)</param>
        /// <returns>ApiResponse of DataTablesServerSideResponse</returns>
        public ApiResponse<DataTablesServerSideResponse> GetCustomersForDataTablesWithHttpInfo (string expand = default(string))
        {

            var localVarPath = "/customer/customers/dataTables";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (expand != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "_expand", expand)); // query parameter

            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCustomersForDataTables", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DataTablesServerSideResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (DataTablesServerSideResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DataTablesServerSideResponse)));
        }

        /// <summary>
        /// Retrieve customers for DataTables plugin Retrieves customers from the account.  If no searches are specified, all customers will be returned. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="expand">The object expansion to perform on the result.  See documentation for examples (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of DataTablesServerSideResponse</returns>
        public async System.Threading.Tasks.Task<DataTablesServerSideResponse> GetCustomersForDataTablesAsync (string expand = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<DataTablesServerSideResponse> localVarResponse = await GetCustomersForDataTablesWithHttpInfoAsync(expand, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieve customers for DataTables plugin Retrieves customers from the account.  If no searches are specified, all customers will be returned. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="expand">The object expansion to perform on the result.  See documentation for examples (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (DataTablesServerSideResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DataTablesServerSideResponse>> GetCustomersForDataTablesWithHttpInfoAsync (string expand = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/customer/customers/dataTables";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (expand != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "_expand", expand)); // query parameter

            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCustomersForDataTables", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DataTablesServerSideResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (DataTablesServerSideResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DataTablesServerSideResponse)));
        }

        /// <summary>
        /// Create a token that can be used to verify a customer email address Create a token that can be used to verify a customer email address.  The implementation of how a customer interacts with this token is left to the merchant. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tokenRequest">Token request</param>
        /// <returns>EmailVerifyTokenResponse</returns>
        public EmailVerifyTokenResponse GetEmailVerificationToken (EmailVerifyTokenRequest tokenRequest)
        {
             ApiResponse<EmailVerifyTokenResponse> localVarResponse = GetEmailVerificationTokenWithHttpInfo(tokenRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create a token that can be used to verify a customer email address Create a token that can be used to verify a customer email address.  The implementation of how a customer interacts with this token is left to the merchant. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tokenRequest">Token request</param>
        /// <returns>ApiResponse of EmailVerifyTokenResponse</returns>
        public ApiResponse<EmailVerifyTokenResponse> GetEmailVerificationTokenWithHttpInfo (EmailVerifyTokenRequest tokenRequest)
        {
            // verify the required parameter 'tokenRequest' is set
            if (tokenRequest == null)
                throw new ApiException(400, "Missing required parameter 'tokenRequest' when calling CustomerApi->GetEmailVerificationToken");

            var localVarPath = "/customer/customers/email_verify/get_token";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (tokenRequest != null && tokenRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(tokenRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = tokenRequest; // byte array
            }

            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetEmailVerificationToken", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EmailVerifyTokenResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (EmailVerifyTokenResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EmailVerifyTokenResponse)));
        }

        /// <summary>
        /// Create a token that can be used to verify a customer email address Create a token that can be used to verify a customer email address.  The implementation of how a customer interacts with this token is left to the merchant. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tokenRequest">Token request</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of EmailVerifyTokenResponse</returns>
        public async System.Threading.Tasks.Task<EmailVerifyTokenResponse> GetEmailVerificationTokenAsync (EmailVerifyTokenRequest tokenRequest, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<EmailVerifyTokenResponse> localVarResponse = await GetEmailVerificationTokenWithHttpInfoAsync(tokenRequest, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create a token that can be used to verify a customer email address Create a token that can be used to verify a customer email address.  The implementation of how a customer interacts with this token is left to the merchant. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tokenRequest">Token request</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (EmailVerifyTokenResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<EmailVerifyTokenResponse>> GetEmailVerificationTokenWithHttpInfoAsync (EmailVerifyTokenRequest tokenRequest, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'tokenRequest' is set
            if (tokenRequest == null)
                throw new ApiException(400, "Missing required parameter 'tokenRequest' when calling CustomerApi->GetEmailVerificationToken");

            var localVarPath = "/customer/customers/email_verify/get_token";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (tokenRequest != null && tokenRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(tokenRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = tokenRequest; // byte array
            }

            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetEmailVerificationToken", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EmailVerifyTokenResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (EmailVerifyTokenResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EmailVerifyTokenResponse)));
        }

        /// <summary>
        /// getMagicLink Retrieves a magic link to allow a merchant to login as a customer.  This method is a PUT call intentionally. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerProfileOid">The customer_profile_oid of the customer.</param>
        /// <param name="storefrontHostName">The storefront to log into.</param>
        /// <returns>CustomerMagicLinkResponse</returns>
        public CustomerMagicLinkResponse GetMagicLink (int customerProfileOid, string storefrontHostName)
        {
             ApiResponse<CustomerMagicLinkResponse> localVarResponse = GetMagicLinkWithHttpInfo(customerProfileOid, storefrontHostName);
             return localVarResponse.Data;
        }

        /// <summary>
        /// getMagicLink Retrieves a magic link to allow a merchant to login as a customer.  This method is a PUT call intentionally. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerProfileOid">The customer_profile_oid of the customer.</param>
        /// <param name="storefrontHostName">The storefront to log into.</param>
        /// <returns>ApiResponse of CustomerMagicLinkResponse</returns>
        public ApiResponse<CustomerMagicLinkResponse> GetMagicLinkWithHttpInfo (int customerProfileOid, string storefrontHostName)
        {
            // verify the required parameter 'customerProfileOid' is set
            if (customerProfileOid == null)
                throw new ApiException(400, "Missing required parameter 'customerProfileOid' when calling CustomerApi->GetMagicLink");
            // verify the required parameter 'storefrontHostName' is set
            if (storefrontHostName == null)
                throw new ApiException(400, "Missing required parameter 'storefrontHostName' when calling CustomerApi->GetMagicLink");

            var localVarPath = "/customer/customers/{customer_profile_oid}/magic_link/{storefront_host_name}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (customerProfileOid != null) localVarPathParams.Add("customer_profile_oid", this.Configuration.ApiClient.ParameterToString(customerProfileOid)); // path parameter
            if (storefrontHostName != null) localVarPathParams.Add("storefront_host_name", this.Configuration.ApiClient.ParameterToString(storefrontHostName)); // path parameter

            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetMagicLink", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CustomerMagicLinkResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (CustomerMagicLinkResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CustomerMagicLinkResponse)));
        }

        /// <summary>
        /// getMagicLink Retrieves a magic link to allow a merchant to login as a customer.  This method is a PUT call intentionally. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerProfileOid">The customer_profile_oid of the customer.</param>
        /// <param name="storefrontHostName">The storefront to log into.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of CustomerMagicLinkResponse</returns>
        public async System.Threading.Tasks.Task<CustomerMagicLinkResponse> GetMagicLinkAsync (int customerProfileOid, string storefrontHostName, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<CustomerMagicLinkResponse> localVarResponse = await GetMagicLinkWithHttpInfoAsync(customerProfileOid, storefrontHostName, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// getMagicLink Retrieves a magic link to allow a merchant to login as a customer.  This method is a PUT call intentionally. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerProfileOid">The customer_profile_oid of the customer.</param>
        /// <param name="storefrontHostName">The storefront to log into.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (CustomerMagicLinkResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CustomerMagicLinkResponse>> GetMagicLinkWithHttpInfoAsync (int customerProfileOid, string storefrontHostName, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'customerProfileOid' is set
            if (customerProfileOid == null)
                throw new ApiException(400, "Missing required parameter 'customerProfileOid' when calling CustomerApi->GetMagicLink");
            // verify the required parameter 'storefrontHostName' is set
            if (storefrontHostName == null)
                throw new ApiException(400, "Missing required parameter 'storefrontHostName' when calling CustomerApi->GetMagicLink");

            var localVarPath = "/customer/customers/{customer_profile_oid}/magic_link/{storefront_host_name}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (customerProfileOid != null) localVarPathParams.Add("customer_profile_oid", this.Configuration.ApiClient.ParameterToString(customerProfileOid)); // path parameter
            if (storefrontHostName != null) localVarPathParams.Add("storefront_host_name", this.Configuration.ApiClient.ParameterToString(storefrontHostName)); // path parameter

            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetMagicLink", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CustomerMagicLinkResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (CustomerMagicLinkResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CustomerMagicLinkResponse)));
        }

        /// <summary>
        /// Insert a customer Insert a customer on the UltraCart account. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customer">Customer to insert</param>
        /// <param name="expand">The object expansion to perform on the result.  See documentation for examples (optional)</param>
        /// <returns>CustomerResponse</returns>
        public CustomerResponse InsertCustomer (Customer customer, string expand = default(string))
        {
             ApiResponse<CustomerResponse> localVarResponse = InsertCustomerWithHttpInfo(customer, expand);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Insert a customer Insert a customer on the UltraCart account. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customer">Customer to insert</param>
        /// <param name="expand">The object expansion to perform on the result.  See documentation for examples (optional)</param>
        /// <returns>ApiResponse of CustomerResponse</returns>
        public ApiResponse<CustomerResponse> InsertCustomerWithHttpInfo (Customer customer, string expand = default(string))
        {
            // verify the required parameter 'customer' is set
            if (customer == null)
                throw new ApiException(400, "Missing required parameter 'customer' when calling CustomerApi->InsertCustomer");

            var localVarPath = "/customer/customers";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json; charset=UTF-8"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (expand != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "_expand", expand)); // query parameter
            if (customer != null && customer.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(customer); // http body (model) parameter
            }
            else
            {
                localVarPostBody = customer; // byte array
            }

            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("InsertCustomer", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CustomerResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (CustomerResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CustomerResponse)));
        }

        /// <summary>
        /// Insert a customer Insert a customer on the UltraCart account. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customer">Customer to insert</param>
        /// <param name="expand">The object expansion to perform on the result.  See documentation for examples (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of CustomerResponse</returns>
        public async System.Threading.Tasks.Task<CustomerResponse> InsertCustomerAsync (Customer customer, string expand = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<CustomerResponse> localVarResponse = await InsertCustomerWithHttpInfoAsync(customer, expand, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Insert a customer Insert a customer on the UltraCart account. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customer">Customer to insert</param>
        /// <param name="expand">The object expansion to perform on the result.  See documentation for examples (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (CustomerResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CustomerResponse>> InsertCustomerWithHttpInfoAsync (Customer customer, string expand = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'customer' is set
            if (customer == null)
                throw new ApiException(400, "Missing required parameter 'customer' when calling CustomerApi->InsertCustomer");

            var localVarPath = "/customer/customers";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json; charset=UTF-8"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (expand != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "_expand", expand)); // query parameter
            if (customer != null && customer.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(customer); // http body (model) parameter
            }
            else
            {
                localVarPostBody = customer; // byte array
            }

            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("InsertCustomer", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CustomerResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (CustomerResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CustomerResponse)));
        }

        /// <summary>
        /// Insert a customer wishlist item Insert a customer wishlist item 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerProfileOid">The customer oid for this wishlist.</param>
        /// <param name="wishlistItem">Wishlist item to insert</param>
        /// <returns>CustomerWishListItem</returns>
        public CustomerWishListItem InsertWishListItem (int customerProfileOid, CustomerWishListItem wishlistItem)
        {
             ApiResponse<CustomerWishListItem> localVarResponse = InsertWishListItemWithHttpInfo(customerProfileOid, wishlistItem);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Insert a customer wishlist item Insert a customer wishlist item 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerProfileOid">The customer oid for this wishlist.</param>
        /// <param name="wishlistItem">Wishlist item to insert</param>
        /// <returns>ApiResponse of CustomerWishListItem</returns>
        public ApiResponse<CustomerWishListItem> InsertWishListItemWithHttpInfo (int customerProfileOid, CustomerWishListItem wishlistItem)
        {
            // verify the required parameter 'customerProfileOid' is set
            if (customerProfileOid == null)
                throw new ApiException(400, "Missing required parameter 'customerProfileOid' when calling CustomerApi->InsertWishListItem");
            // verify the required parameter 'wishlistItem' is set
            if (wishlistItem == null)
                throw new ApiException(400, "Missing required parameter 'wishlistItem' when calling CustomerApi->InsertWishListItem");

            var localVarPath = "/customer/customers/{customer_profile_oid}/wishlist";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json; charset=UTF-8"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (customerProfileOid != null) localVarPathParams.Add("customer_profile_oid", this.Configuration.ApiClient.ParameterToString(customerProfileOid)); // path parameter
            if (wishlistItem != null && wishlistItem.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(wishlistItem); // http body (model) parameter
            }
            else
            {
                localVarPostBody = wishlistItem; // byte array
            }

            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("InsertWishListItem", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CustomerWishListItem>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (CustomerWishListItem) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CustomerWishListItem)));
        }

        /// <summary>
        /// Insert a customer wishlist item Insert a customer wishlist item 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerProfileOid">The customer oid for this wishlist.</param>
        /// <param name="wishlistItem">Wishlist item to insert</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of CustomerWishListItem</returns>
        public async System.Threading.Tasks.Task<CustomerWishListItem> InsertWishListItemAsync (int customerProfileOid, CustomerWishListItem wishlistItem, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<CustomerWishListItem> localVarResponse = await InsertWishListItemWithHttpInfoAsync(customerProfileOid, wishlistItem, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Insert a customer wishlist item Insert a customer wishlist item 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerProfileOid">The customer oid for this wishlist.</param>
        /// <param name="wishlistItem">Wishlist item to insert</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (CustomerWishListItem)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CustomerWishListItem>> InsertWishListItemWithHttpInfoAsync (int customerProfileOid, CustomerWishListItem wishlistItem, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'customerProfileOid' is set
            if (customerProfileOid == null)
                throw new ApiException(400, "Missing required parameter 'customerProfileOid' when calling CustomerApi->InsertWishListItem");
            // verify the required parameter 'wishlistItem' is set
            if (wishlistItem == null)
                throw new ApiException(400, "Missing required parameter 'wishlistItem' when calling CustomerApi->InsertWishListItem");

            var localVarPath = "/customer/customers/{customer_profile_oid}/wishlist";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json; charset=UTF-8"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (customerProfileOid != null) localVarPathParams.Add("customer_profile_oid", this.Configuration.ApiClient.ParameterToString(customerProfileOid)); // path parameter
            if (wishlistItem != null && wishlistItem.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(wishlistItem); // http body (model) parameter
            }
            else
            {
                localVarPostBody = wishlistItem; // byte array
            }

            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("InsertWishListItem", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CustomerWishListItem>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (CustomerWishListItem) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CustomerWishListItem)));
        }

        /// <summary>
        /// Merge customer into this customer Merge customer into this customer. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerProfileOid">The customer_profile_oid to update.</param>
        /// <param name="customer">Customer to merge into this profile.</param>
        /// <param name="expand">The object expansion to perform on the result.  See documentation for examples (optional)</param>
        /// <returns></returns>
        public void MergeCustomer (int customerProfileOid, CustomerMergeRequest customer, string expand = default(string))
        {
             MergeCustomerWithHttpInfo(customerProfileOid, customer, expand);
        }

        /// <summary>
        /// Merge customer into this customer Merge customer into this customer. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerProfileOid">The customer_profile_oid to update.</param>
        /// <param name="customer">Customer to merge into this profile.</param>
        /// <param name="expand">The object expansion to perform on the result.  See documentation for examples (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> MergeCustomerWithHttpInfo (int customerProfileOid, CustomerMergeRequest customer, string expand = default(string))
        {
            // verify the required parameter 'customerProfileOid' is set
            if (customerProfileOid == null)
                throw new ApiException(400, "Missing required parameter 'customerProfileOid' when calling CustomerApi->MergeCustomer");
            // verify the required parameter 'customer' is set
            if (customer == null)
                throw new ApiException(400, "Missing required parameter 'customer' when calling CustomerApi->MergeCustomer");

            var localVarPath = "/customer/customers/{customer_profile_oid}/merge";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json; charset=UTF-8"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (customerProfileOid != null) localVarPathParams.Add("customer_profile_oid", this.Configuration.ApiClient.ParameterToString(customerProfileOid)); // path parameter
            if (expand != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "_expand", expand)); // query parameter
            if (customer != null && customer.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(customer); // http body (model) parameter
            }
            else
            {
                localVarPostBody = customer; // byte array
            }

            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MergeCustomer", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Merge customer into this customer Merge customer into this customer. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerProfileOid">The customer_profile_oid to update.</param>
        /// <param name="customer">Customer to merge into this profile.</param>
        /// <param name="expand">The object expansion to perform on the result.  See documentation for examples (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task MergeCustomerAsync (int customerProfileOid, CustomerMergeRequest customer, string expand = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
             await MergeCustomerWithHttpInfoAsync(customerProfileOid, customer, expand, cancellationToken);

        }

        /// <summary>
        /// Merge customer into this customer Merge customer into this customer. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerProfileOid">The customer_profile_oid to update.</param>
        /// <param name="customer">Customer to merge into this profile.</param>
        /// <param name="expand">The object expansion to perform on the result.  See documentation for examples (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> MergeCustomerWithHttpInfoAsync (int customerProfileOid, CustomerMergeRequest customer, string expand = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'customerProfileOid' is set
            if (customerProfileOid == null)
                throw new ApiException(400, "Missing required parameter 'customerProfileOid' when calling CustomerApi->MergeCustomer");
            // verify the required parameter 'customer' is set
            if (customer == null)
                throw new ApiException(400, "Missing required parameter 'customer' when calling CustomerApi->MergeCustomer");

            var localVarPath = "/customer/customers/{customer_profile_oid}/merge";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json; charset=UTF-8"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (customerProfileOid != null) localVarPathParams.Add("customer_profile_oid", this.Configuration.ApiClient.ParameterToString(customerProfileOid)); // path parameter
            if (expand != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "_expand", expand)); // query parameter
            if (customer != null && customer.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(customer); // http body (model) parameter
            }
            else
            {
                localVarPostBody = customer; // byte array
            }

            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MergeCustomer", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Searches for all matching values (using POST) 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="lookupRequest">LookupRequest</param>
        /// <returns>LookupResponse</returns>
        public LookupResponse SearchCustomerProfileValues (LookupRequest lookupRequest)
        {
             ApiResponse<LookupResponse> localVarResponse = SearchCustomerProfileValuesWithHttpInfo(lookupRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Searches for all matching values (using POST) 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="lookupRequest">LookupRequest</param>
        /// <returns>ApiResponse of LookupResponse</returns>
        public ApiResponse<LookupResponse> SearchCustomerProfileValuesWithHttpInfo (LookupRequest lookupRequest)
        {
            // verify the required parameter 'lookupRequest' is set
            if (lookupRequest == null)
                throw new ApiException(400, "Missing required parameter 'lookupRequest' when calling CustomerApi->SearchCustomerProfileValues");

            var localVarPath = "/customer/search";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (lookupRequest != null && lookupRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(lookupRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = lookupRequest; // byte array
            }

            // authentication (ultraCartBrowserApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key")))
            {
                localVarHeaderParams["x-ultracart-browser-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key");
            }
            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SearchCustomerProfileValues", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<LookupResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (LookupResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(LookupResponse)));
        }

        /// <summary>
        /// Searches for all matching values (using POST) 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="lookupRequest">LookupRequest</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of LookupResponse</returns>
        public async System.Threading.Tasks.Task<LookupResponse> SearchCustomerProfileValuesAsync (LookupRequest lookupRequest, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<LookupResponse> localVarResponse = await SearchCustomerProfileValuesWithHttpInfoAsync(lookupRequest, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Searches for all matching values (using POST) 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="lookupRequest">LookupRequest</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (LookupResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<LookupResponse>> SearchCustomerProfileValuesWithHttpInfoAsync (LookupRequest lookupRequest, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'lookupRequest' is set
            if (lookupRequest == null)
                throw new ApiException(400, "Missing required parameter 'lookupRequest' when calling CustomerApi->SearchCustomerProfileValues");

            var localVarPath = "/customer/search";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (lookupRequest != null && lookupRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(lookupRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = lookupRequest; // byte array
            }

            // authentication (ultraCartBrowserApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key")))
            {
                localVarHeaderParams["x-ultracart-browser-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key");
            }
            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SearchCustomerProfileValues", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<LookupResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (LookupResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(LookupResponse)));
        }

        /// <summary>
        /// Update a customer Update a customer on the UltraCart account. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerProfileOid">The customer_profile_oid to update.</param>
        /// <param name="customer">Customer to update</param>
        /// <param name="expand">The object expansion to perform on the result.  See documentation for examples (optional)</param>
        /// <returns>CustomerResponse</returns>
        public CustomerResponse UpdateCustomer (int customerProfileOid, Customer customer, string expand = default(string))
        {
             ApiResponse<CustomerResponse> localVarResponse = UpdateCustomerWithHttpInfo(customerProfileOid, customer, expand);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update a customer Update a customer on the UltraCart account. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerProfileOid">The customer_profile_oid to update.</param>
        /// <param name="customer">Customer to update</param>
        /// <param name="expand">The object expansion to perform on the result.  See documentation for examples (optional)</param>
        /// <returns>ApiResponse of CustomerResponse</returns>
        public ApiResponse<CustomerResponse> UpdateCustomerWithHttpInfo (int customerProfileOid, Customer customer, string expand = default(string))
        {
            // verify the required parameter 'customerProfileOid' is set
            if (customerProfileOid == null)
                throw new ApiException(400, "Missing required parameter 'customerProfileOid' when calling CustomerApi->UpdateCustomer");
            // verify the required parameter 'customer' is set
            if (customer == null)
                throw new ApiException(400, "Missing required parameter 'customer' when calling CustomerApi->UpdateCustomer");

            var localVarPath = "/customer/customers/{customer_profile_oid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json; charset=UTF-8"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (customerProfileOid != null) localVarPathParams.Add("customer_profile_oid", this.Configuration.ApiClient.ParameterToString(customerProfileOid)); // path parameter
            if (expand != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "_expand", expand)); // query parameter
            if (customer != null && customer.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(customer); // http body (model) parameter
            }
            else
            {
                localVarPostBody = customer; // byte array
            }

            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateCustomer", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CustomerResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (CustomerResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CustomerResponse)));
        }

        /// <summary>
        /// Update a customer Update a customer on the UltraCart account. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerProfileOid">The customer_profile_oid to update.</param>
        /// <param name="customer">Customer to update</param>
        /// <param name="expand">The object expansion to perform on the result.  See documentation for examples (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of CustomerResponse</returns>
        public async System.Threading.Tasks.Task<CustomerResponse> UpdateCustomerAsync (int customerProfileOid, Customer customer, string expand = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<CustomerResponse> localVarResponse = await UpdateCustomerWithHttpInfoAsync(customerProfileOid, customer, expand, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update a customer Update a customer on the UltraCart account. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerProfileOid">The customer_profile_oid to update.</param>
        /// <param name="customer">Customer to update</param>
        /// <param name="expand">The object expansion to perform on the result.  See documentation for examples (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (CustomerResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CustomerResponse>> UpdateCustomerWithHttpInfoAsync (int customerProfileOid, Customer customer, string expand = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'customerProfileOid' is set
            if (customerProfileOid == null)
                throw new ApiException(400, "Missing required parameter 'customerProfileOid' when calling CustomerApi->UpdateCustomer");
            // verify the required parameter 'customer' is set
            if (customer == null)
                throw new ApiException(400, "Missing required parameter 'customer' when calling CustomerApi->UpdateCustomer");

            var localVarPath = "/customer/customers/{customer_profile_oid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json; charset=UTF-8"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (customerProfileOid != null) localVarPathParams.Add("customer_profile_oid", this.Configuration.ApiClient.ParameterToString(customerProfileOid)); // path parameter
            if (expand != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "_expand", expand)); // query parameter
            if (customer != null && customer.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(customer); // http body (model) parameter
            }
            else
            {
                localVarPostBody = customer; // byte array
            }

            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateCustomer", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CustomerResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (CustomerResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CustomerResponse)));
        }

        /// <summary>
        /// Update email list subscriptions for a customer Update email list subscriptions for a customer 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerProfileOid">The customer profile oid</param>
        /// <param name="listChanges">List changes</param>
        /// <returns>CustomerEmailListChanges</returns>
        public CustomerEmailListChanges UpdateCustomerEmailLists (int customerProfileOid, CustomerEmailListChanges listChanges)
        {
             ApiResponse<CustomerEmailListChanges> localVarResponse = UpdateCustomerEmailListsWithHttpInfo(customerProfileOid, listChanges);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update email list subscriptions for a customer Update email list subscriptions for a customer 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerProfileOid">The customer profile oid</param>
        /// <param name="listChanges">List changes</param>
        /// <returns>ApiResponse of CustomerEmailListChanges</returns>
        public ApiResponse<CustomerEmailListChanges> UpdateCustomerEmailListsWithHttpInfo (int customerProfileOid, CustomerEmailListChanges listChanges)
        {
            // verify the required parameter 'customerProfileOid' is set
            if (customerProfileOid == null)
                throw new ApiException(400, "Missing required parameter 'customerProfileOid' when calling CustomerApi->UpdateCustomerEmailLists");
            // verify the required parameter 'listChanges' is set
            if (listChanges == null)
                throw new ApiException(400, "Missing required parameter 'listChanges' when calling CustomerApi->UpdateCustomerEmailLists");

            var localVarPath = "/customer/customers/{customer_profile_oid}/email_lists";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json; charset=UTF-8"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (customerProfileOid != null) localVarPathParams.Add("customer_profile_oid", this.Configuration.ApiClient.ParameterToString(customerProfileOid)); // path parameter
            if (listChanges != null && listChanges.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(listChanges); // http body (model) parameter
            }
            else
            {
                localVarPostBody = listChanges; // byte array
            }

            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateCustomerEmailLists", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CustomerEmailListChanges>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (CustomerEmailListChanges) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CustomerEmailListChanges)));
        }

        /// <summary>
        /// Update email list subscriptions for a customer Update email list subscriptions for a customer 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerProfileOid">The customer profile oid</param>
        /// <param name="listChanges">List changes</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of CustomerEmailListChanges</returns>
        public async System.Threading.Tasks.Task<CustomerEmailListChanges> UpdateCustomerEmailListsAsync (int customerProfileOid, CustomerEmailListChanges listChanges, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<CustomerEmailListChanges> localVarResponse = await UpdateCustomerEmailListsWithHttpInfoAsync(customerProfileOid, listChanges, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update email list subscriptions for a customer Update email list subscriptions for a customer 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerProfileOid">The customer profile oid</param>
        /// <param name="listChanges">List changes</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (CustomerEmailListChanges)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CustomerEmailListChanges>> UpdateCustomerEmailListsWithHttpInfoAsync (int customerProfileOid, CustomerEmailListChanges listChanges, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'customerProfileOid' is set
            if (customerProfileOid == null)
                throw new ApiException(400, "Missing required parameter 'customerProfileOid' when calling CustomerApi->UpdateCustomerEmailLists");
            // verify the required parameter 'listChanges' is set
            if (listChanges == null)
                throw new ApiException(400, "Missing required parameter 'listChanges' when calling CustomerApi->UpdateCustomerEmailLists");

            var localVarPath = "/customer/customers/{customer_profile_oid}/email_lists";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json; charset=UTF-8"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (customerProfileOid != null) localVarPathParams.Add("customer_profile_oid", this.Configuration.ApiClient.ParameterToString(customerProfileOid)); // path parameter
            if (listChanges != null && listChanges.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(listChanges); // http body (model) parameter
            }
            else
            {
                localVarPostBody = listChanges; // byte array
            }

            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateCustomerEmailLists", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CustomerEmailListChanges>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (CustomerEmailListChanges) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CustomerEmailListChanges)));
        }

        /// <summary>
        /// Update a customer wishlist item Update a customer wishlist item 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerProfileOid">The customer oid for this wishlist.</param>
        /// <param name="customerWishlistItemOid">The wishlist oid for this wishlist item.</param>
        /// <param name="wishlistItem">Wishlist item to update</param>
        /// <returns>CustomerWishListItem</returns>
        public CustomerWishListItem UpdateWishListItem (int customerProfileOid, int customerWishlistItemOid, CustomerWishListItem wishlistItem)
        {
             ApiResponse<CustomerWishListItem> localVarResponse = UpdateWishListItemWithHttpInfo(customerProfileOid, customerWishlistItemOid, wishlistItem);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update a customer wishlist item Update a customer wishlist item 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerProfileOid">The customer oid for this wishlist.</param>
        /// <param name="customerWishlistItemOid">The wishlist oid for this wishlist item.</param>
        /// <param name="wishlistItem">Wishlist item to update</param>
        /// <returns>ApiResponse of CustomerWishListItem</returns>
        public ApiResponse<CustomerWishListItem> UpdateWishListItemWithHttpInfo (int customerProfileOid, int customerWishlistItemOid, CustomerWishListItem wishlistItem)
        {
            // verify the required parameter 'customerProfileOid' is set
            if (customerProfileOid == null)
                throw new ApiException(400, "Missing required parameter 'customerProfileOid' when calling CustomerApi->UpdateWishListItem");
            // verify the required parameter 'customerWishlistItemOid' is set
            if (customerWishlistItemOid == null)
                throw new ApiException(400, "Missing required parameter 'customerWishlistItemOid' when calling CustomerApi->UpdateWishListItem");
            // verify the required parameter 'wishlistItem' is set
            if (wishlistItem == null)
                throw new ApiException(400, "Missing required parameter 'wishlistItem' when calling CustomerApi->UpdateWishListItem");

            var localVarPath = "/customer/customers/{customer_profile_oid}/wishlist/{customer_wishlist_item_oid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json; charset=UTF-8"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (customerProfileOid != null) localVarPathParams.Add("customer_profile_oid", this.Configuration.ApiClient.ParameterToString(customerProfileOid)); // path parameter
            if (customerWishlistItemOid != null) localVarPathParams.Add("customer_wishlist_item_oid", this.Configuration.ApiClient.ParameterToString(customerWishlistItemOid)); // path parameter
            if (wishlistItem != null && wishlistItem.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(wishlistItem); // http body (model) parameter
            }
            else
            {
                localVarPostBody = wishlistItem; // byte array
            }

            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateWishListItem", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CustomerWishListItem>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (CustomerWishListItem) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CustomerWishListItem)));
        }

        /// <summary>
        /// Update a customer wishlist item Update a customer wishlist item 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerProfileOid">The customer oid for this wishlist.</param>
        /// <param name="customerWishlistItemOid">The wishlist oid for this wishlist item.</param>
        /// <param name="wishlistItem">Wishlist item to update</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of CustomerWishListItem</returns>
        public async System.Threading.Tasks.Task<CustomerWishListItem> UpdateWishListItemAsync (int customerProfileOid, int customerWishlistItemOid, CustomerWishListItem wishlistItem, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<CustomerWishListItem> localVarResponse = await UpdateWishListItemWithHttpInfoAsync(customerProfileOid, customerWishlistItemOid, wishlistItem, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update a customer wishlist item Update a customer wishlist item 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerProfileOid">The customer oid for this wishlist.</param>
        /// <param name="customerWishlistItemOid">The wishlist oid for this wishlist item.</param>
        /// <param name="wishlistItem">Wishlist item to update</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (CustomerWishListItem)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CustomerWishListItem>> UpdateWishListItemWithHttpInfoAsync (int customerProfileOid, int customerWishlistItemOid, CustomerWishListItem wishlistItem, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'customerProfileOid' is set
            if (customerProfileOid == null)
                throw new ApiException(400, "Missing required parameter 'customerProfileOid' when calling CustomerApi->UpdateWishListItem");
            // verify the required parameter 'customerWishlistItemOid' is set
            if (customerWishlistItemOid == null)
                throw new ApiException(400, "Missing required parameter 'customerWishlistItemOid' when calling CustomerApi->UpdateWishListItem");
            // verify the required parameter 'wishlistItem' is set
            if (wishlistItem == null)
                throw new ApiException(400, "Missing required parameter 'wishlistItem' when calling CustomerApi->UpdateWishListItem");

            var localVarPath = "/customer/customers/{customer_profile_oid}/wishlist/{customer_wishlist_item_oid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json; charset=UTF-8"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (customerProfileOid != null) localVarPathParams.Add("customer_profile_oid", this.Configuration.ApiClient.ParameterToString(customerProfileOid)); // path parameter
            if (customerWishlistItemOid != null) localVarPathParams.Add("customer_wishlist_item_oid", this.Configuration.ApiClient.ParameterToString(customerWishlistItemOid)); // path parameter
            if (wishlistItem != null && wishlistItem.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(wishlistItem); // http body (model) parameter
            }
            else
            {
                localVarPostBody = wishlistItem; // byte array
            }

            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateWishListItem", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CustomerWishListItem>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (CustomerWishListItem) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CustomerWishListItem)));
        }

        /// <summary>
        /// Validate a token that can be used to verify a customer email address Validate a token that can be used to verify a customer email address.  The implementation of how a customer interacts with this token is left to the merchant. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="validationRequest">Token validation request</param>
        /// <returns>EmailVerifyTokenValidateResponse</returns>
        public EmailVerifyTokenValidateResponse ValidateEmailVerificationToken (EmailVerifyTokenValidateRequest validationRequest)
        {
             ApiResponse<EmailVerifyTokenValidateResponse> localVarResponse = ValidateEmailVerificationTokenWithHttpInfo(validationRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Validate a token that can be used to verify a customer email address Validate a token that can be used to verify a customer email address.  The implementation of how a customer interacts with this token is left to the merchant. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="validationRequest">Token validation request</param>
        /// <returns>ApiResponse of EmailVerifyTokenValidateResponse</returns>
        public ApiResponse<EmailVerifyTokenValidateResponse> ValidateEmailVerificationTokenWithHttpInfo (EmailVerifyTokenValidateRequest validationRequest)
        {
            // verify the required parameter 'validationRequest' is set
            if (validationRequest == null)
                throw new ApiException(400, "Missing required parameter 'validationRequest' when calling CustomerApi->ValidateEmailVerificationToken");

            var localVarPath = "/customer/customers/email_verify/validate_token";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (validationRequest != null && validationRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(validationRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = validationRequest; // byte array
            }

            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ValidateEmailVerificationToken", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EmailVerifyTokenValidateResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (EmailVerifyTokenValidateResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EmailVerifyTokenValidateResponse)));
        }

        /// <summary>
        /// Validate a token that can be used to verify a customer email address Validate a token that can be used to verify a customer email address.  The implementation of how a customer interacts with this token is left to the merchant. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="validationRequest">Token validation request</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of EmailVerifyTokenValidateResponse</returns>
        public async System.Threading.Tasks.Task<EmailVerifyTokenValidateResponse> ValidateEmailVerificationTokenAsync (EmailVerifyTokenValidateRequest validationRequest, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<EmailVerifyTokenValidateResponse> localVarResponse = await ValidateEmailVerificationTokenWithHttpInfoAsync(validationRequest, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Validate a token that can be used to verify a customer email address Validate a token that can be used to verify a customer email address.  The implementation of how a customer interacts with this token is left to the merchant. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="validationRequest">Token validation request</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (EmailVerifyTokenValidateResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<EmailVerifyTokenValidateResponse>> ValidateEmailVerificationTokenWithHttpInfoAsync (EmailVerifyTokenValidateRequest validationRequest, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'validationRequest' is set
            if (validationRequest == null)
                throw new ApiException(400, "Missing required parameter 'validationRequest' when calling CustomerApi->ValidateEmailVerificationToken");

            var localVarPath = "/customer/customers/email_verify/validate_token";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (validationRequest != null && validationRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(validationRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = validationRequest; // byte array
            }

            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ValidateEmailVerificationToken", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EmailVerifyTokenValidateResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (EmailVerifyTokenValidateResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EmailVerifyTokenValidateResponse)));
        }

    }
}
