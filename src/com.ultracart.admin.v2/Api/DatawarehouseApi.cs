/* 
 * UltraCart Rest API V2
 *
 * UltraCart REST API Version 2
 *
 * OpenAPI spec version: 2.0.0
 * Contact: support@ultracart.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using com.ultracart.admin.v2.Client;
using com.ultracart.admin.v2.Model;

namespace com.ultracart.admin.v2.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IDatawarehouseApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Delete a report
        /// </summary>
        /// <remarks>
        /// Delete a report on the UltraCart account. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reportOid">The report oid to delete.</param>
        /// <returns></returns>
        void DeleteReport (int? reportOid);

        /// <summary>
        /// Delete a report
        /// </summary>
        /// <remarks>
        /// Delete a report on the UltraCart account. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reportOid">The report oid to delete.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteReportWithHttpInfo (int? reportOid);
        /// <summary>
        /// Dry run the report queries
        /// </summary>
        /// <remarks>
        /// Dry run the report queries 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="queryRequest">Dry run request</param>
        /// <returns>ReportDryRunQueriesResponse</returns>
        ReportDryRunQueriesResponse DryRunReportQueries (ReportDryRunQueriesRequest queryRequest);

        /// <summary>
        /// Dry run the report queries
        /// </summary>
        /// <remarks>
        /// Dry run the report queries 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="queryRequest">Dry run request</param>
        /// <returns>ApiResponse of ReportDryRunQueriesResponse</returns>
        ApiResponse<ReportDryRunQueriesResponse> DryRunReportQueriesWithHttpInfo (ReportDryRunQueriesRequest queryRequest);
        /// <summary>
        /// Execute the report queries
        /// </summary>
        /// <remarks>
        /// Execute the report queries 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="queryRequest">Query request</param>
        /// <returns></returns>
        void ExecuteReportQueries (ReportExecuteQueriesRequest queryRequest);

        /// <summary>
        /// Execute the report queries
        /// </summary>
        /// <remarks>
        /// Execute the report queries 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="queryRequest">Query request</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ExecuteReportQueriesWithHttpInfo (ReportExecuteQueriesRequest queryRequest);
        /// <summary>
        /// Get a report
        /// </summary>
        /// <remarks>
        /// Retrieve a report 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reportOid"></param>
        /// <returns>ReportResponse</returns>
        ReportResponse GetReport (int? reportOid);

        /// <summary>
        /// Get a report
        /// </summary>
        /// <remarks>
        /// Retrieve a report 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reportOid"></param>
        /// <returns>ApiResponse of ReportResponse</returns>
        ApiResponse<ReportResponse> GetReportWithHttpInfo (int? reportOid);
        /// <summary>
        /// Get a report data set
        /// </summary>
        /// <remarks>
        /// Retrieve a report data set 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="datasetUuid"></param>
        /// <returns>ReportDataSetResponse</returns>
        ReportDataSetResponse GetReportDataSet (string datasetUuid);

        /// <summary>
        /// Get a report data set
        /// </summary>
        /// <remarks>
        /// Retrieve a report data set 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="datasetUuid"></param>
        /// <returns>ApiResponse of ReportDataSetResponse</returns>
        ApiResponse<ReportDataSetResponse> GetReportDataSetWithHttpInfo (string datasetUuid);
        /// <summary>
        /// Get a report data set page
        /// </summary>
        /// <remarks>
        /// Retrieve a report data set page 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="datasetUuid"></param>
        /// <param name="pageNumber"></param>
        /// <returns>ReportDataSetPageResponse</returns>
        ReportDataSetPageResponse GetReportDataSetPage (string datasetUuid, int? pageNumber);

        /// <summary>
        /// Get a report data set page
        /// </summary>
        /// <remarks>
        /// Retrieve a report data set page 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="datasetUuid"></param>
        /// <param name="pageNumber"></param>
        /// <returns>ApiResponse of ReportDataSetPageResponse</returns>
        ApiResponse<ReportDataSetPageResponse> GetReportDataSetPageWithHttpInfo (string datasetUuid, int? pageNumber);
        /// <summary>
        /// Get report websocket authorization
        /// </summary>
        /// <remarks>
        /// Retrieve a JWT to authorize a report to make a websocket connection. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ReportAuthResponse</returns>
        ReportAuthResponse GetReportWebsocketAuthorization ();

        /// <summary>
        /// Get report websocket authorization
        /// </summary>
        /// <remarks>
        /// Retrieve a JWT to authorize a report to make a websocket connection. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of ReportAuthResponse</returns>
        ApiResponse<ReportAuthResponse> GetReportWebsocketAuthorizationWithHttpInfo ();
        /// <summary>
        /// Get list of reports available
        /// </summary>
        /// <remarks>
        /// Retrieve a list of reports available 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ReportsResponse</returns>
        ReportsResponse GetReports ();

        /// <summary>
        /// Get list of reports available
        /// </summary>
        /// <remarks>
        /// Retrieve a list of reports available 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of ReportsResponse</returns>
        ApiResponse<ReportsResponse> GetReportsWithHttpInfo ();
        /// <summary>
        /// Create a report
        /// </summary>
        /// <remarks>
        /// Create a new report on the UltraCart account. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="report">Report to create</param>
        /// <returns>ReportResponse</returns>
        ReportResponse InsertReport (Report report);

        /// <summary>
        /// Create a report
        /// </summary>
        /// <remarks>
        /// Create a new report on the UltraCart account. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="report">Report to create</param>
        /// <returns>ApiResponse of ReportResponse</returns>
        ApiResponse<ReportResponse> InsertReportWithHttpInfo (Report report);
        /// <summary>
        /// Update a report
        /// </summary>
        /// <remarks>
        /// Update a report on the UltraCart account. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="report">Report to update</param>
        /// <param name="reportOid">The report oid to update.</param>
        /// <returns>ReportResponse</returns>
        ReportResponse UpdateReport (Report report, int? reportOid);

        /// <summary>
        /// Update a report
        /// </summary>
        /// <remarks>
        /// Update a report on the UltraCart account. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="report">Report to update</param>
        /// <param name="reportOid">The report oid to update.</param>
        /// <returns>ApiResponse of ReportResponse</returns>
        ApiResponse<ReportResponse> UpdateReportWithHttpInfo (Report report, int? reportOid);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Delete a report
        /// </summary>
        /// <remarks>
        /// Delete a report on the UltraCart account. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reportOid">The report oid to delete.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteReportAsync (int? reportOid);

        /// <summary>
        /// Delete a report
        /// </summary>
        /// <remarks>
        /// Delete a report on the UltraCart account. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reportOid">The report oid to delete.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteReportAsyncWithHttpInfo (int? reportOid);
        /// <summary>
        /// Dry run the report queries
        /// </summary>
        /// <remarks>
        /// Dry run the report queries 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="queryRequest">Dry run request</param>
        /// <returns>Task of ReportDryRunQueriesResponse</returns>
        System.Threading.Tasks.Task<ReportDryRunQueriesResponse> DryRunReportQueriesAsync (ReportDryRunQueriesRequest queryRequest);

        /// <summary>
        /// Dry run the report queries
        /// </summary>
        /// <remarks>
        /// Dry run the report queries 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="queryRequest">Dry run request</param>
        /// <returns>Task of ApiResponse (ReportDryRunQueriesResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ReportDryRunQueriesResponse>> DryRunReportQueriesAsyncWithHttpInfo (ReportDryRunQueriesRequest queryRequest);
        /// <summary>
        /// Execute the report queries
        /// </summary>
        /// <remarks>
        /// Execute the report queries 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="queryRequest">Query request</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ExecuteReportQueriesAsync (ReportExecuteQueriesRequest queryRequest);

        /// <summary>
        /// Execute the report queries
        /// </summary>
        /// <remarks>
        /// Execute the report queries 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="queryRequest">Query request</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ExecuteReportQueriesAsyncWithHttpInfo (ReportExecuteQueriesRequest queryRequest);
        /// <summary>
        /// Get a report
        /// </summary>
        /// <remarks>
        /// Retrieve a report 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reportOid"></param>
        /// <returns>Task of ReportResponse</returns>
        System.Threading.Tasks.Task<ReportResponse> GetReportAsync (int? reportOid);

        /// <summary>
        /// Get a report
        /// </summary>
        /// <remarks>
        /// Retrieve a report 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reportOid"></param>
        /// <returns>Task of ApiResponse (ReportResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ReportResponse>> GetReportAsyncWithHttpInfo (int? reportOid);
        /// <summary>
        /// Get a report data set
        /// </summary>
        /// <remarks>
        /// Retrieve a report data set 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="datasetUuid"></param>
        /// <returns>Task of ReportDataSetResponse</returns>
        System.Threading.Tasks.Task<ReportDataSetResponse> GetReportDataSetAsync (string datasetUuid);

        /// <summary>
        /// Get a report data set
        /// </summary>
        /// <remarks>
        /// Retrieve a report data set 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="datasetUuid"></param>
        /// <returns>Task of ApiResponse (ReportDataSetResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ReportDataSetResponse>> GetReportDataSetAsyncWithHttpInfo (string datasetUuid);
        /// <summary>
        /// Get a report data set page
        /// </summary>
        /// <remarks>
        /// Retrieve a report data set page 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="datasetUuid"></param>
        /// <param name="pageNumber"></param>
        /// <returns>Task of ReportDataSetPageResponse</returns>
        System.Threading.Tasks.Task<ReportDataSetPageResponse> GetReportDataSetPageAsync (string datasetUuid, int? pageNumber);

        /// <summary>
        /// Get a report data set page
        /// </summary>
        /// <remarks>
        /// Retrieve a report data set page 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="datasetUuid"></param>
        /// <param name="pageNumber"></param>
        /// <returns>Task of ApiResponse (ReportDataSetPageResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ReportDataSetPageResponse>> GetReportDataSetPageAsyncWithHttpInfo (string datasetUuid, int? pageNumber);
        /// <summary>
        /// Get report websocket authorization
        /// </summary>
        /// <remarks>
        /// Retrieve a JWT to authorize a report to make a websocket connection. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ReportAuthResponse</returns>
        System.Threading.Tasks.Task<ReportAuthResponse> GetReportWebsocketAuthorizationAsync ();

        /// <summary>
        /// Get report websocket authorization
        /// </summary>
        /// <remarks>
        /// Retrieve a JWT to authorize a report to make a websocket connection. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (ReportAuthResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ReportAuthResponse>> GetReportWebsocketAuthorizationAsyncWithHttpInfo ();
        /// <summary>
        /// Get list of reports available
        /// </summary>
        /// <remarks>
        /// Retrieve a list of reports available 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ReportsResponse</returns>
        System.Threading.Tasks.Task<ReportsResponse> GetReportsAsync ();

        /// <summary>
        /// Get list of reports available
        /// </summary>
        /// <remarks>
        /// Retrieve a list of reports available 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (ReportsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ReportsResponse>> GetReportsAsyncWithHttpInfo ();
        /// <summary>
        /// Create a report
        /// </summary>
        /// <remarks>
        /// Create a new report on the UltraCart account. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="report">Report to create</param>
        /// <returns>Task of ReportResponse</returns>
        System.Threading.Tasks.Task<ReportResponse> InsertReportAsync (Report report);

        /// <summary>
        /// Create a report
        /// </summary>
        /// <remarks>
        /// Create a new report on the UltraCart account. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="report">Report to create</param>
        /// <returns>Task of ApiResponse (ReportResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ReportResponse>> InsertReportAsyncWithHttpInfo (Report report);
        /// <summary>
        /// Update a report
        /// </summary>
        /// <remarks>
        /// Update a report on the UltraCart account. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="report">Report to update</param>
        /// <param name="reportOid">The report oid to update.</param>
        /// <returns>Task of ReportResponse</returns>
        System.Threading.Tasks.Task<ReportResponse> UpdateReportAsync (Report report, int? reportOid);

        /// <summary>
        /// Update a report
        /// </summary>
        /// <remarks>
        /// Update a report on the UltraCart account. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="report">Report to update</param>
        /// <param name="reportOid">The report oid to update.</param>
        /// <returns>Task of ApiResponse (ReportResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ReportResponse>> UpdateReportAsyncWithHttpInfo (Report report, int? reportOid);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class DatawarehouseApi : IDatawarehouseApi
    {
        private com.ultracart.admin.v2.Client.ExceptionFactory _exceptionFactory = (name, response) => null;
    
        /// <summary>
        /// Initializes a new instance of the <see cref="DatawarehouseApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public DatawarehouseApi(com.ultracart.admin.v2.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = com.ultracart.admin.v2.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = com.ultracart.admin.v2.Client.Configuration.DefaultExceptionFactory;
        }


        /// <summary>
        /// Initializes a new instance of the <see cref="DatawarehouseApi"/> class
        /// using a simple key string and optional version, which you will
        /// almost always want to use the default
        /// </summary>
        /// <param name="SimpleKey">A simple key.  See https://ultracart.atlassian.net/wiki/spaces/ucdoc/pages/38688545/API+Simple+Key</param>
        /// <returns></returns>
        public DatawarehouseApi(string SimpleKey)
        {
            Configuration configuration = new Configuration();
            configuration.ApiKey.Add("x-ultracart-simple-key", SimpleKey);
            configuration.DefaultHeader.Add("X-UltraCart-Api-Version", "2017-03-01");
            this.Configuration = configuration;
            ExceptionFactory = com.ultracart.admin.v2.Client.Configuration.DefaultExceptionFactory;
        }


        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public com.ultracart.admin.v2.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public com.ultracart.admin.v2.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Delete a report Delete a report on the UltraCart account. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reportOid">The report oid to delete.</param>
        /// <returns></returns>
        public void DeleteReport (int? reportOid)
        {
             DeleteReportWithHttpInfo(reportOid);
        }

        /// <summary>
        /// Delete a report Delete a report on the UltraCart account. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reportOid">The report oid to delete.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteReportWithHttpInfo (int? reportOid)
        {
            // verify the required parameter 'reportOid' is set
            if (reportOid == null)
                throw new ApiException(400, "Missing required parameter 'reportOid' when calling DatawarehouseApi->DeleteReport");

            var localVarPath = "/datawarehouse/reports/{report_oid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (reportOid != null) localVarPathParams.Add("report_oid", this.Configuration.ApiClient.ParameterToString(reportOid)); // path parameter

            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteReport", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a report Delete a report on the UltraCart account. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reportOid">The report oid to delete.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteReportAsync (int? reportOid)
        {
             await DeleteReportAsyncWithHttpInfo(reportOid);

        }

        /// <summary>
        /// Delete a report Delete a report on the UltraCart account. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reportOid">The report oid to delete.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteReportAsyncWithHttpInfo (int? reportOid)
        {
            // verify the required parameter 'reportOid' is set
            if (reportOid == null)
                throw new ApiException(400, "Missing required parameter 'reportOid' when calling DatawarehouseApi->DeleteReport");

            var localVarPath = "/datawarehouse/reports/{report_oid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (reportOid != null) localVarPathParams.Add("report_oid", this.Configuration.ApiClient.ParameterToString(reportOid)); // path parameter

            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteReport", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Dry run the report queries Dry run the report queries 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="queryRequest">Dry run request</param>
        /// <returns>ReportDryRunQueriesResponse</returns>
        public ReportDryRunQueriesResponse DryRunReportQueries (ReportDryRunQueriesRequest queryRequest)
        {
             ApiResponse<ReportDryRunQueriesResponse> localVarResponse = DryRunReportQueriesWithHttpInfo(queryRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Dry run the report queries Dry run the report queries 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="queryRequest">Dry run request</param>
        /// <returns>ApiResponse of ReportDryRunQueriesResponse</returns>
        public ApiResponse< ReportDryRunQueriesResponse > DryRunReportQueriesWithHttpInfo (ReportDryRunQueriesRequest queryRequest)
        {
            // verify the required parameter 'queryRequest' is set
            if (queryRequest == null)
                throw new ApiException(400, "Missing required parameter 'queryRequest' when calling DatawarehouseApi->DryRunReportQueries");

            var localVarPath = "/datawarehouse/reports/dryrun";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (queryRequest != null && queryRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(queryRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = queryRequest; // byte array
            }

            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DryRunReportQueries", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ReportDryRunQueriesResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ReportDryRunQueriesResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ReportDryRunQueriesResponse)));
        }

        /// <summary>
        /// Dry run the report queries Dry run the report queries 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="queryRequest">Dry run request</param>
        /// <returns>Task of ReportDryRunQueriesResponse</returns>
        public async System.Threading.Tasks.Task<ReportDryRunQueriesResponse> DryRunReportQueriesAsync (ReportDryRunQueriesRequest queryRequest)
        {
             ApiResponse<ReportDryRunQueriesResponse> localVarResponse = await DryRunReportQueriesAsyncWithHttpInfo(queryRequest);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Dry run the report queries Dry run the report queries 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="queryRequest">Dry run request</param>
        /// <returns>Task of ApiResponse (ReportDryRunQueriesResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ReportDryRunQueriesResponse>> DryRunReportQueriesAsyncWithHttpInfo (ReportDryRunQueriesRequest queryRequest)
        {
            // verify the required parameter 'queryRequest' is set
            if (queryRequest == null)
                throw new ApiException(400, "Missing required parameter 'queryRequest' when calling DatawarehouseApi->DryRunReportQueries");

            var localVarPath = "/datawarehouse/reports/dryrun";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (queryRequest != null && queryRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(queryRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = queryRequest; // byte array
            }

            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DryRunReportQueries", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ReportDryRunQueriesResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ReportDryRunQueriesResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ReportDryRunQueriesResponse)));
        }

        /// <summary>
        /// Execute the report queries Execute the report queries 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="queryRequest">Query request</param>
        /// <returns></returns>
        public void ExecuteReportQueries (ReportExecuteQueriesRequest queryRequest)
        {
             ExecuteReportQueriesWithHttpInfo(queryRequest);
        }

        /// <summary>
        /// Execute the report queries Execute the report queries 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="queryRequest">Query request</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> ExecuteReportQueriesWithHttpInfo (ReportExecuteQueriesRequest queryRequest)
        {
            // verify the required parameter 'queryRequest' is set
            if (queryRequest == null)
                throw new ApiException(400, "Missing required parameter 'queryRequest' when calling DatawarehouseApi->ExecuteReportQueries");

            var localVarPath = "/datawarehouse/reports/execute";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (queryRequest != null && queryRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(queryRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = queryRequest; // byte array
            }

            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ExecuteReportQueries", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Execute the report queries Execute the report queries 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="queryRequest">Query request</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ExecuteReportQueriesAsync (ReportExecuteQueriesRequest queryRequest)
        {
             await ExecuteReportQueriesAsyncWithHttpInfo(queryRequest);

        }

        /// <summary>
        /// Execute the report queries Execute the report queries 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="queryRequest">Query request</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> ExecuteReportQueriesAsyncWithHttpInfo (ReportExecuteQueriesRequest queryRequest)
        {
            // verify the required parameter 'queryRequest' is set
            if (queryRequest == null)
                throw new ApiException(400, "Missing required parameter 'queryRequest' when calling DatawarehouseApi->ExecuteReportQueries");

            var localVarPath = "/datawarehouse/reports/execute";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (queryRequest != null && queryRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(queryRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = queryRequest; // byte array
            }

            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ExecuteReportQueries", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Get a report Retrieve a report 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reportOid"></param>
        /// <returns>ReportResponse</returns>
        public ReportResponse GetReport (int? reportOid)
        {
             ApiResponse<ReportResponse> localVarResponse = GetReportWithHttpInfo(reportOid);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a report Retrieve a report 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reportOid"></param>
        /// <returns>ApiResponse of ReportResponse</returns>
        public ApiResponse< ReportResponse > GetReportWithHttpInfo (int? reportOid)
        {
            // verify the required parameter 'reportOid' is set
            if (reportOid == null)
                throw new ApiException(400, "Missing required parameter 'reportOid' when calling DatawarehouseApi->GetReport");

            var localVarPath = "/datawarehouse/reports/{report_oid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (reportOid != null) localVarPathParams.Add("report_oid", this.Configuration.ApiClient.ParameterToString(reportOid)); // path parameter

            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetReport", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ReportResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ReportResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ReportResponse)));
        }

        /// <summary>
        /// Get a report Retrieve a report 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reportOid"></param>
        /// <returns>Task of ReportResponse</returns>
        public async System.Threading.Tasks.Task<ReportResponse> GetReportAsync (int? reportOid)
        {
             ApiResponse<ReportResponse> localVarResponse = await GetReportAsyncWithHttpInfo(reportOid);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a report Retrieve a report 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reportOid"></param>
        /// <returns>Task of ApiResponse (ReportResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ReportResponse>> GetReportAsyncWithHttpInfo (int? reportOid)
        {
            // verify the required parameter 'reportOid' is set
            if (reportOid == null)
                throw new ApiException(400, "Missing required parameter 'reportOid' when calling DatawarehouseApi->GetReport");

            var localVarPath = "/datawarehouse/reports/{report_oid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (reportOid != null) localVarPathParams.Add("report_oid", this.Configuration.ApiClient.ParameterToString(reportOid)); // path parameter

            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetReport", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ReportResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ReportResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ReportResponse)));
        }

        /// <summary>
        /// Get a report data set Retrieve a report data set 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="datasetUuid"></param>
        /// <returns>ReportDataSetResponse</returns>
        public ReportDataSetResponse GetReportDataSet (string datasetUuid)
        {
             ApiResponse<ReportDataSetResponse> localVarResponse = GetReportDataSetWithHttpInfo(datasetUuid);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a report data set Retrieve a report data set 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="datasetUuid"></param>
        /// <returns>ApiResponse of ReportDataSetResponse</returns>
        public ApiResponse< ReportDataSetResponse > GetReportDataSetWithHttpInfo (string datasetUuid)
        {
            // verify the required parameter 'datasetUuid' is set
            if (datasetUuid == null)
                throw new ApiException(400, "Missing required parameter 'datasetUuid' when calling DatawarehouseApi->GetReportDataSet");

            var localVarPath = "/datawarehouse/reports/dataset/{dataset_uuid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (datasetUuid != null) localVarPathParams.Add("dataset_uuid", this.Configuration.ApiClient.ParameterToString(datasetUuid)); // path parameter

            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetReportDataSet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ReportDataSetResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ReportDataSetResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ReportDataSetResponse)));
        }

        /// <summary>
        /// Get a report data set Retrieve a report data set 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="datasetUuid"></param>
        /// <returns>Task of ReportDataSetResponse</returns>
        public async System.Threading.Tasks.Task<ReportDataSetResponse> GetReportDataSetAsync (string datasetUuid)
        {
             ApiResponse<ReportDataSetResponse> localVarResponse = await GetReportDataSetAsyncWithHttpInfo(datasetUuid);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a report data set Retrieve a report data set 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="datasetUuid"></param>
        /// <returns>Task of ApiResponse (ReportDataSetResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ReportDataSetResponse>> GetReportDataSetAsyncWithHttpInfo (string datasetUuid)
        {
            // verify the required parameter 'datasetUuid' is set
            if (datasetUuid == null)
                throw new ApiException(400, "Missing required parameter 'datasetUuid' when calling DatawarehouseApi->GetReportDataSet");

            var localVarPath = "/datawarehouse/reports/dataset/{dataset_uuid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (datasetUuid != null) localVarPathParams.Add("dataset_uuid", this.Configuration.ApiClient.ParameterToString(datasetUuid)); // path parameter

            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetReportDataSet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ReportDataSetResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ReportDataSetResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ReportDataSetResponse)));
        }

        /// <summary>
        /// Get a report data set page Retrieve a report data set page 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="datasetUuid"></param>
        /// <param name="pageNumber"></param>
        /// <returns>ReportDataSetPageResponse</returns>
        public ReportDataSetPageResponse GetReportDataSetPage (string datasetUuid, int? pageNumber)
        {
             ApiResponse<ReportDataSetPageResponse> localVarResponse = GetReportDataSetPageWithHttpInfo(datasetUuid, pageNumber);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a report data set page Retrieve a report data set page 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="datasetUuid"></param>
        /// <param name="pageNumber"></param>
        /// <returns>ApiResponse of ReportDataSetPageResponse</returns>
        public ApiResponse< ReportDataSetPageResponse > GetReportDataSetPageWithHttpInfo (string datasetUuid, int? pageNumber)
        {
            // verify the required parameter 'datasetUuid' is set
            if (datasetUuid == null)
                throw new ApiException(400, "Missing required parameter 'datasetUuid' when calling DatawarehouseApi->GetReportDataSetPage");
            // verify the required parameter 'pageNumber' is set
            if (pageNumber == null)
                throw new ApiException(400, "Missing required parameter 'pageNumber' when calling DatawarehouseApi->GetReportDataSetPage");

            var localVarPath = "/datawarehouse/reports/dataset/{dataset_uuid}/pages/{page_number}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (datasetUuid != null) localVarPathParams.Add("dataset_uuid", this.Configuration.ApiClient.ParameterToString(datasetUuid)); // path parameter
            if (pageNumber != null) localVarPathParams.Add("page_number", this.Configuration.ApiClient.ParameterToString(pageNumber)); // path parameter

            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetReportDataSetPage", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ReportDataSetPageResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ReportDataSetPageResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ReportDataSetPageResponse)));
        }

        /// <summary>
        /// Get a report data set page Retrieve a report data set page 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="datasetUuid"></param>
        /// <param name="pageNumber"></param>
        /// <returns>Task of ReportDataSetPageResponse</returns>
        public async System.Threading.Tasks.Task<ReportDataSetPageResponse> GetReportDataSetPageAsync (string datasetUuid, int? pageNumber)
        {
             ApiResponse<ReportDataSetPageResponse> localVarResponse = await GetReportDataSetPageAsyncWithHttpInfo(datasetUuid, pageNumber);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a report data set page Retrieve a report data set page 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="datasetUuid"></param>
        /// <param name="pageNumber"></param>
        /// <returns>Task of ApiResponse (ReportDataSetPageResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ReportDataSetPageResponse>> GetReportDataSetPageAsyncWithHttpInfo (string datasetUuid, int? pageNumber)
        {
            // verify the required parameter 'datasetUuid' is set
            if (datasetUuid == null)
                throw new ApiException(400, "Missing required parameter 'datasetUuid' when calling DatawarehouseApi->GetReportDataSetPage");
            // verify the required parameter 'pageNumber' is set
            if (pageNumber == null)
                throw new ApiException(400, "Missing required parameter 'pageNumber' when calling DatawarehouseApi->GetReportDataSetPage");

            var localVarPath = "/datawarehouse/reports/dataset/{dataset_uuid}/pages/{page_number}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (datasetUuid != null) localVarPathParams.Add("dataset_uuid", this.Configuration.ApiClient.ParameterToString(datasetUuid)); // path parameter
            if (pageNumber != null) localVarPathParams.Add("page_number", this.Configuration.ApiClient.ParameterToString(pageNumber)); // path parameter

            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetReportDataSetPage", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ReportDataSetPageResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ReportDataSetPageResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ReportDataSetPageResponse)));
        }

        /// <summary>
        /// Get report websocket authorization Retrieve a JWT to authorize a report to make a websocket connection. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ReportAuthResponse</returns>
        public ReportAuthResponse GetReportWebsocketAuthorization ()
        {
             ApiResponse<ReportAuthResponse> localVarResponse = GetReportWebsocketAuthorizationWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get report websocket authorization Retrieve a JWT to authorize a report to make a websocket connection. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of ReportAuthResponse</returns>
        public ApiResponse< ReportAuthResponse > GetReportWebsocketAuthorizationWithHttpInfo ()
        {

            var localVarPath = "/datawarehouse/reports/auth";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetReportWebsocketAuthorization", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ReportAuthResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ReportAuthResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ReportAuthResponse)));
        }

        /// <summary>
        /// Get report websocket authorization Retrieve a JWT to authorize a report to make a websocket connection. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ReportAuthResponse</returns>
        public async System.Threading.Tasks.Task<ReportAuthResponse> GetReportWebsocketAuthorizationAsync ()
        {
             ApiResponse<ReportAuthResponse> localVarResponse = await GetReportWebsocketAuthorizationAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get report websocket authorization Retrieve a JWT to authorize a report to make a websocket connection. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (ReportAuthResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ReportAuthResponse>> GetReportWebsocketAuthorizationAsyncWithHttpInfo ()
        {

            var localVarPath = "/datawarehouse/reports/auth";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetReportWebsocketAuthorization", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ReportAuthResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ReportAuthResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ReportAuthResponse)));
        }

        /// <summary>
        /// Get list of reports available Retrieve a list of reports available 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ReportsResponse</returns>
        public ReportsResponse GetReports ()
        {
             ApiResponse<ReportsResponse> localVarResponse = GetReportsWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get list of reports available Retrieve a list of reports available 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of ReportsResponse</returns>
        public ApiResponse< ReportsResponse > GetReportsWithHttpInfo ()
        {

            var localVarPath = "/datawarehouse/reports";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetReports", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ReportsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ReportsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ReportsResponse)));
        }

        /// <summary>
        /// Get list of reports available Retrieve a list of reports available 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ReportsResponse</returns>
        public async System.Threading.Tasks.Task<ReportsResponse> GetReportsAsync ()
        {
             ApiResponse<ReportsResponse> localVarResponse = await GetReportsAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get list of reports available Retrieve a list of reports available 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (ReportsResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ReportsResponse>> GetReportsAsyncWithHttpInfo ()
        {

            var localVarPath = "/datawarehouse/reports";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetReports", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ReportsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ReportsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ReportsResponse)));
        }

        /// <summary>
        /// Create a report Create a new report on the UltraCart account. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="report">Report to create</param>
        /// <returns>ReportResponse</returns>
        public ReportResponse InsertReport (Report report)
        {
             ApiResponse<ReportResponse> localVarResponse = InsertReportWithHttpInfo(report);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create a report Create a new report on the UltraCart account. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="report">Report to create</param>
        /// <returns>ApiResponse of ReportResponse</returns>
        public ApiResponse< ReportResponse > InsertReportWithHttpInfo (Report report)
        {
            // verify the required parameter 'report' is set
            if (report == null)
                throw new ApiException(400, "Missing required parameter 'report' when calling DatawarehouseApi->InsertReport");

            var localVarPath = "/datawarehouse/reports";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json; charset=UTF-8"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (report != null && report.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(report); // http body (model) parameter
            }
            else
            {
                localVarPostBody = report; // byte array
            }

            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("InsertReport", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ReportResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ReportResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ReportResponse)));
        }

        /// <summary>
        /// Create a report Create a new report on the UltraCart account. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="report">Report to create</param>
        /// <returns>Task of ReportResponse</returns>
        public async System.Threading.Tasks.Task<ReportResponse> InsertReportAsync (Report report)
        {
             ApiResponse<ReportResponse> localVarResponse = await InsertReportAsyncWithHttpInfo(report);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create a report Create a new report on the UltraCart account. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="report">Report to create</param>
        /// <returns>Task of ApiResponse (ReportResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ReportResponse>> InsertReportAsyncWithHttpInfo (Report report)
        {
            // verify the required parameter 'report' is set
            if (report == null)
                throw new ApiException(400, "Missing required parameter 'report' when calling DatawarehouseApi->InsertReport");

            var localVarPath = "/datawarehouse/reports";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json; charset=UTF-8"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (report != null && report.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(report); // http body (model) parameter
            }
            else
            {
                localVarPostBody = report; // byte array
            }

            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("InsertReport", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ReportResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ReportResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ReportResponse)));
        }

        /// <summary>
        /// Update a report Update a report on the UltraCart account. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="report">Report to update</param>
        /// <param name="reportOid">The report oid to update.</param>
        /// <returns>ReportResponse</returns>
        public ReportResponse UpdateReport (Report report, int? reportOid)
        {
             ApiResponse<ReportResponse> localVarResponse = UpdateReportWithHttpInfo(report, reportOid);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update a report Update a report on the UltraCart account. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="report">Report to update</param>
        /// <param name="reportOid">The report oid to update.</param>
        /// <returns>ApiResponse of ReportResponse</returns>
        public ApiResponse< ReportResponse > UpdateReportWithHttpInfo (Report report, int? reportOid)
        {
            // verify the required parameter 'report' is set
            if (report == null)
                throw new ApiException(400, "Missing required parameter 'report' when calling DatawarehouseApi->UpdateReport");
            // verify the required parameter 'reportOid' is set
            if (reportOid == null)
                throw new ApiException(400, "Missing required parameter 'reportOid' when calling DatawarehouseApi->UpdateReport");

            var localVarPath = "/datawarehouse/reports/{report_oid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json; charset=UTF-8"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (reportOid != null) localVarPathParams.Add("report_oid", this.Configuration.ApiClient.ParameterToString(reportOid)); // path parameter
            if (report != null && report.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(report); // http body (model) parameter
            }
            else
            {
                localVarPostBody = report; // byte array
            }

            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateReport", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ReportResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ReportResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ReportResponse)));
        }

        /// <summary>
        /// Update a report Update a report on the UltraCart account. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="report">Report to update</param>
        /// <param name="reportOid">The report oid to update.</param>
        /// <returns>Task of ReportResponse</returns>
        public async System.Threading.Tasks.Task<ReportResponse> UpdateReportAsync (Report report, int? reportOid)
        {
             ApiResponse<ReportResponse> localVarResponse = await UpdateReportAsyncWithHttpInfo(report, reportOid);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update a report Update a report on the UltraCart account. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="report">Report to update</param>
        /// <param name="reportOid">The report oid to update.</param>
        /// <returns>Task of ApiResponse (ReportResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ReportResponse>> UpdateReportAsyncWithHttpInfo (Report report, int? reportOid)
        {
            // verify the required parameter 'report' is set
            if (report == null)
                throw new ApiException(400, "Missing required parameter 'report' when calling DatawarehouseApi->UpdateReport");
            // verify the required parameter 'reportOid' is set
            if (reportOid == null)
                throw new ApiException(400, "Missing required parameter 'reportOid' when calling DatawarehouseApi->UpdateReport");

            var localVarPath = "/datawarehouse/reports/{report_oid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json; charset=UTF-8"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (reportOid != null) localVarPathParams.Add("report_oid", this.Configuration.ApiClient.ParameterToString(reportOid)); // path parameter
            if (report != null && report.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(report); // http body (model) parameter
            }
            else
            {
                localVarPostBody = report; // byte array
            }

            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateReport", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ReportResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ReportResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ReportResponse)));
        }

    }
}
