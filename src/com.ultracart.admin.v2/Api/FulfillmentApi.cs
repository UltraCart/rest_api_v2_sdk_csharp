/* 
 * UltraCart Rest API V2
 *
 * This is the next generation UltraCart REST API...
 *
 * OpenAPI spec version: 2.0.0
 * Contact: support@ultracart.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using com.ultracart.admin.v2.Client;
using com.ultracart.admin.v2.Model;

namespace com.ultracart.admin.v2.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IFulfillmentApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Acknowledge receipt of orders.
        /// </summary>
        /// <remarks>
        /// Acknowledge receipt of orders so that they are removed from the fulfillment queue.  This method must be called after receiving and order (via webhook) or retrieving (via retrieve orders method). 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="distributionCenterCode">Distribution center code</param>
        /// <param name="orderIds">Orders to acknowledge receipt of (limit 100)</param>
        /// <returns></returns>
        void FulfillmentDistributionCentersDistributionCenterCodeAcknowledgementsPut (string distributionCenterCode, List<string> orderIds);

        /// <summary>
        /// Acknowledge receipt of orders.
        /// </summary>
        /// <remarks>
        /// Acknowledge receipt of orders so that they are removed from the fulfillment queue.  This method must be called after receiving and order (via webhook) or retrieving (via retrieve orders method). 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="distributionCenterCode">Distribution center code</param>
        /// <param name="orderIds">Orders to acknowledge receipt of (limit 100)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> FulfillmentDistributionCentersDistributionCenterCodeAcknowledgementsPutWithHttpInfo (string distributionCenterCode, List<string> orderIds);
        /// <summary>
        /// Update inventory
        /// </summary>
        /// <remarks>
        /// Update the inventory for items associated with this distribution center 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="distributionCenterCode">Distribution center code</param>
        /// <param name="inventories">Inventory updates (limit 500)</param>
        /// <returns></returns>
        void FulfillmentDistributionCentersDistributionCenterCodeInventoryPost (string distributionCenterCode, List<FulfillmentInventory> inventories);

        /// <summary>
        /// Update inventory
        /// </summary>
        /// <remarks>
        /// Update the inventory for items associated with this distribution center 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="distributionCenterCode">Distribution center code</param>
        /// <param name="inventories">Inventory updates (limit 500)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> FulfillmentDistributionCentersDistributionCenterCodeInventoryPostWithHttpInfo (string distributionCenterCode, List<FulfillmentInventory> inventories);
        /// <summary>
        /// Retrieve orders queued up for this distribution center.
        /// </summary>
        /// <remarks>
        /// Retrieves up to 100 orders that are queued up in this distribution center.  You must acknowledge them before additional new orders will be returned.  The orders that are returned contain only items for this distribution center and are expanded with billing, buysafe, channel_partner, checkout, coupons, customer_profile, edi, gift, gift_certificate, internal, items, payment, shipping, summary, taxes. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="distributionCenterCode">Distribution center code</param>
        /// <returns>OrdersResponse</returns>
        OrdersResponse FulfillmentDistributionCentersDistributionCenterCodeOrdersGet (string distributionCenterCode);

        /// <summary>
        /// Retrieve orders queued up for this distribution center.
        /// </summary>
        /// <remarks>
        /// Retrieves up to 100 orders that are queued up in this distribution center.  You must acknowledge them before additional new orders will be returned.  The orders that are returned contain only items for this distribution center and are expanded with billing, buysafe, channel_partner, checkout, coupons, customer_profile, edi, gift, gift_certificate, internal, items, payment, shipping, summary, taxes. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="distributionCenterCode">Distribution center code</param>
        /// <returns>ApiResponse of OrdersResponse</returns>
        ApiResponse<OrdersResponse> FulfillmentDistributionCentersDistributionCenterCodeOrdersGetWithHttpInfo (string distributionCenterCode);
        /// <summary>
        /// Mark orders as shipped
        /// </summary>
        /// <remarks>
        /// Store the tracking information and mark the order shipped for this distribution center. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="distributionCenterCode">Distribution center code</param>
        /// <param name="shipments">Orders to mark shipped</param>
        /// <returns></returns>
        void FulfillmentDistributionCentersDistributionCenterCodeShipmentsPost (string distributionCenterCode, List<FulfillmentShipment> shipments);

        /// <summary>
        /// Mark orders as shipped
        /// </summary>
        /// <remarks>
        /// Store the tracking information and mark the order shipped for this distribution center. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="distributionCenterCode">Distribution center code</param>
        /// <param name="shipments">Orders to mark shipped</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> FulfillmentDistributionCentersDistributionCenterCodeShipmentsPostWithHttpInfo (string distributionCenterCode, List<FulfillmentShipment> shipments);
        /// <summary>
        /// Retrieve distribution centers
        /// </summary>
        /// <remarks>
        /// Retrieves the distribution centers that this user has access to. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>DistributionCentersResponse</returns>
        DistributionCentersResponse FulfillmentDistributionCentersGet ();

        /// <summary>
        /// Retrieve distribution centers
        /// </summary>
        /// <remarks>
        /// Retrieves the distribution centers that this user has access to. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of DistributionCentersResponse</returns>
        ApiResponse<DistributionCentersResponse> FulfillmentDistributionCentersGetWithHttpInfo ();
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Acknowledge receipt of orders.
        /// </summary>
        /// <remarks>
        /// Acknowledge receipt of orders so that they are removed from the fulfillment queue.  This method must be called after receiving and order (via webhook) or retrieving (via retrieve orders method). 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="distributionCenterCode">Distribution center code</param>
        /// <param name="orderIds">Orders to acknowledge receipt of (limit 100)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task FulfillmentDistributionCentersDistributionCenterCodeAcknowledgementsPutAsync (string distributionCenterCode, List<string> orderIds);

        /// <summary>
        /// Acknowledge receipt of orders.
        /// </summary>
        /// <remarks>
        /// Acknowledge receipt of orders so that they are removed from the fulfillment queue.  This method must be called after receiving and order (via webhook) or retrieving (via retrieve orders method). 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="distributionCenterCode">Distribution center code</param>
        /// <param name="orderIds">Orders to acknowledge receipt of (limit 100)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> FulfillmentDistributionCentersDistributionCenterCodeAcknowledgementsPutAsyncWithHttpInfo (string distributionCenterCode, List<string> orderIds);
        /// <summary>
        /// Update inventory
        /// </summary>
        /// <remarks>
        /// Update the inventory for items associated with this distribution center 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="distributionCenterCode">Distribution center code</param>
        /// <param name="inventories">Inventory updates (limit 500)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task FulfillmentDistributionCentersDistributionCenterCodeInventoryPostAsync (string distributionCenterCode, List<FulfillmentInventory> inventories);

        /// <summary>
        /// Update inventory
        /// </summary>
        /// <remarks>
        /// Update the inventory for items associated with this distribution center 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="distributionCenterCode">Distribution center code</param>
        /// <param name="inventories">Inventory updates (limit 500)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> FulfillmentDistributionCentersDistributionCenterCodeInventoryPostAsyncWithHttpInfo (string distributionCenterCode, List<FulfillmentInventory> inventories);
        /// <summary>
        /// Retrieve orders queued up for this distribution center.
        /// </summary>
        /// <remarks>
        /// Retrieves up to 100 orders that are queued up in this distribution center.  You must acknowledge them before additional new orders will be returned.  The orders that are returned contain only items for this distribution center and are expanded with billing, buysafe, channel_partner, checkout, coupons, customer_profile, edi, gift, gift_certificate, internal, items, payment, shipping, summary, taxes. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="distributionCenterCode">Distribution center code</param>
        /// <returns>Task of OrdersResponse</returns>
        System.Threading.Tasks.Task<OrdersResponse> FulfillmentDistributionCentersDistributionCenterCodeOrdersGetAsync (string distributionCenterCode);

        /// <summary>
        /// Retrieve orders queued up for this distribution center.
        /// </summary>
        /// <remarks>
        /// Retrieves up to 100 orders that are queued up in this distribution center.  You must acknowledge them before additional new orders will be returned.  The orders that are returned contain only items for this distribution center and are expanded with billing, buysafe, channel_partner, checkout, coupons, customer_profile, edi, gift, gift_certificate, internal, items, payment, shipping, summary, taxes. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="distributionCenterCode">Distribution center code</param>
        /// <returns>Task of ApiResponse (OrdersResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<OrdersResponse>> FulfillmentDistributionCentersDistributionCenterCodeOrdersGetAsyncWithHttpInfo (string distributionCenterCode);
        /// <summary>
        /// Mark orders as shipped
        /// </summary>
        /// <remarks>
        /// Store the tracking information and mark the order shipped for this distribution center. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="distributionCenterCode">Distribution center code</param>
        /// <param name="shipments">Orders to mark shipped</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task FulfillmentDistributionCentersDistributionCenterCodeShipmentsPostAsync (string distributionCenterCode, List<FulfillmentShipment> shipments);

        /// <summary>
        /// Mark orders as shipped
        /// </summary>
        /// <remarks>
        /// Store the tracking information and mark the order shipped for this distribution center. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="distributionCenterCode">Distribution center code</param>
        /// <param name="shipments">Orders to mark shipped</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> FulfillmentDistributionCentersDistributionCenterCodeShipmentsPostAsyncWithHttpInfo (string distributionCenterCode, List<FulfillmentShipment> shipments);
        /// <summary>
        /// Retrieve distribution centers
        /// </summary>
        /// <remarks>
        /// Retrieves the distribution centers that this user has access to. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of DistributionCentersResponse</returns>
        System.Threading.Tasks.Task<DistributionCentersResponse> FulfillmentDistributionCentersGetAsync ();

        /// <summary>
        /// Retrieve distribution centers
        /// </summary>
        /// <remarks>
        /// Retrieves the distribution centers that this user has access to. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (DistributionCentersResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<DistributionCentersResponse>> FulfillmentDistributionCentersGetAsyncWithHttpInfo ();
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class FulfillmentApi : IFulfillmentApi
    {
        private com.ultracart.admin.v2.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="FulfillmentApi"/> class.
        /// </summary>
        /// <returns></returns>
        public FulfillmentApi(String basePath)
        {
            this.Configuration = new Configuration(new ApiClient(basePath));

            ExceptionFactory = com.ultracart.admin.v2.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="FulfillmentApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public FulfillmentApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = com.ultracart.admin.v2.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public com.ultracart.admin.v2.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public Dictionary<String, String> DefaultHeader()
        {
            return this.Configuration.DefaultHeader;
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Acknowledge receipt of orders. Acknowledge receipt of orders so that they are removed from the fulfillment queue.  This method must be called after receiving and order (via webhook) or retrieving (via retrieve orders method). 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="distributionCenterCode">Distribution center code</param>
        /// <param name="orderIds">Orders to acknowledge receipt of (limit 100)</param>
        /// <returns></returns>
        public void FulfillmentDistributionCentersDistributionCenterCodeAcknowledgementsPut (string distributionCenterCode, List<string> orderIds)
        {
             FulfillmentDistributionCentersDistributionCenterCodeAcknowledgementsPutWithHttpInfo(distributionCenterCode, orderIds);
        }

        /// <summary>
        /// Acknowledge receipt of orders. Acknowledge receipt of orders so that they are removed from the fulfillment queue.  This method must be called after receiving and order (via webhook) or retrieving (via retrieve orders method). 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="distributionCenterCode">Distribution center code</param>
        /// <param name="orderIds">Orders to acknowledge receipt of (limit 100)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> FulfillmentDistributionCentersDistributionCenterCodeAcknowledgementsPutWithHttpInfo (string distributionCenterCode, List<string> orderIds)
        {
            // verify the required parameter 'distributionCenterCode' is set
            if (distributionCenterCode == null)
                throw new ApiException(400, "Missing required parameter 'distributionCenterCode' when calling FulfillmentApi->FulfillmentDistributionCentersDistributionCenterCodeAcknowledgementsPut");
            // verify the required parameter 'orderIds' is set
            if (orderIds == null)
                throw new ApiException(400, "Missing required parameter 'orderIds' when calling FulfillmentApi->FulfillmentDistributionCentersDistributionCenterCodeAcknowledgementsPut");

            var localVarPath = "/fulfillment/distribution_centers/{distribution_center_code}/acknowledgements";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (distributionCenterCode != null) localVarPathParams.Add("distribution_center_code", Configuration.ApiClient.ParameterToString(distributionCenterCode)); // path parameter
            if (orderIds != null && orderIds.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(orderIds); // http body (model) parameter
            }
            else
            {
                localVarPostBody = orderIds; // byte array
            }

            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FulfillmentDistributionCentersDistributionCenterCodeAcknowledgementsPut", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Acknowledge receipt of orders. Acknowledge receipt of orders so that they are removed from the fulfillment queue.  This method must be called after receiving and order (via webhook) or retrieving (via retrieve orders method). 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="distributionCenterCode">Distribution center code</param>
        /// <param name="orderIds">Orders to acknowledge receipt of (limit 100)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task FulfillmentDistributionCentersDistributionCenterCodeAcknowledgementsPutAsync (string distributionCenterCode, List<string> orderIds)
        {
             await FulfillmentDistributionCentersDistributionCenterCodeAcknowledgementsPutAsyncWithHttpInfo(distributionCenterCode, orderIds);

        }

        /// <summary>
        /// Acknowledge receipt of orders. Acknowledge receipt of orders so that they are removed from the fulfillment queue.  This method must be called after receiving and order (via webhook) or retrieving (via retrieve orders method). 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="distributionCenterCode">Distribution center code</param>
        /// <param name="orderIds">Orders to acknowledge receipt of (limit 100)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> FulfillmentDistributionCentersDistributionCenterCodeAcknowledgementsPutAsyncWithHttpInfo (string distributionCenterCode, List<string> orderIds)
        {
            // verify the required parameter 'distributionCenterCode' is set
            if (distributionCenterCode == null)
                throw new ApiException(400, "Missing required parameter 'distributionCenterCode' when calling FulfillmentApi->FulfillmentDistributionCentersDistributionCenterCodeAcknowledgementsPut");
            // verify the required parameter 'orderIds' is set
            if (orderIds == null)
                throw new ApiException(400, "Missing required parameter 'orderIds' when calling FulfillmentApi->FulfillmentDistributionCentersDistributionCenterCodeAcknowledgementsPut");

            var localVarPath = "/fulfillment/distribution_centers/{distribution_center_code}/acknowledgements";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (distributionCenterCode != null) localVarPathParams.Add("distribution_center_code", Configuration.ApiClient.ParameterToString(distributionCenterCode)); // path parameter
            if (orderIds != null && orderIds.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(orderIds); // http body (model) parameter
            }
            else
            {
                localVarPostBody = orderIds; // byte array
            }

            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FulfillmentDistributionCentersDistributionCenterCodeAcknowledgementsPut", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Update inventory Update the inventory for items associated with this distribution center 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="distributionCenterCode">Distribution center code</param>
        /// <param name="inventories">Inventory updates (limit 500)</param>
        /// <returns></returns>
        public void FulfillmentDistributionCentersDistributionCenterCodeInventoryPost (string distributionCenterCode, List<FulfillmentInventory> inventories)
        {
             FulfillmentDistributionCentersDistributionCenterCodeInventoryPostWithHttpInfo(distributionCenterCode, inventories);
        }

        /// <summary>
        /// Update inventory Update the inventory for items associated with this distribution center 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="distributionCenterCode">Distribution center code</param>
        /// <param name="inventories">Inventory updates (limit 500)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> FulfillmentDistributionCentersDistributionCenterCodeInventoryPostWithHttpInfo (string distributionCenterCode, List<FulfillmentInventory> inventories)
        {
            // verify the required parameter 'distributionCenterCode' is set
            if (distributionCenterCode == null)
                throw new ApiException(400, "Missing required parameter 'distributionCenterCode' when calling FulfillmentApi->FulfillmentDistributionCentersDistributionCenterCodeInventoryPost");
            // verify the required parameter 'inventories' is set
            if (inventories == null)
                throw new ApiException(400, "Missing required parameter 'inventories' when calling FulfillmentApi->FulfillmentDistributionCentersDistributionCenterCodeInventoryPost");

            var localVarPath = "/fulfillment/distribution_centers/{distribution_center_code}/inventory";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (distributionCenterCode != null) localVarPathParams.Add("distribution_center_code", Configuration.ApiClient.ParameterToString(distributionCenterCode)); // path parameter
            if (inventories != null && inventories.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(inventories); // http body (model) parameter
            }
            else
            {
                localVarPostBody = inventories; // byte array
            }

            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FulfillmentDistributionCentersDistributionCenterCodeInventoryPost", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Update inventory Update the inventory for items associated with this distribution center 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="distributionCenterCode">Distribution center code</param>
        /// <param name="inventories">Inventory updates (limit 500)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task FulfillmentDistributionCentersDistributionCenterCodeInventoryPostAsync (string distributionCenterCode, List<FulfillmentInventory> inventories)
        {
             await FulfillmentDistributionCentersDistributionCenterCodeInventoryPostAsyncWithHttpInfo(distributionCenterCode, inventories);

        }

        /// <summary>
        /// Update inventory Update the inventory for items associated with this distribution center 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="distributionCenterCode">Distribution center code</param>
        /// <param name="inventories">Inventory updates (limit 500)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> FulfillmentDistributionCentersDistributionCenterCodeInventoryPostAsyncWithHttpInfo (string distributionCenterCode, List<FulfillmentInventory> inventories)
        {
            // verify the required parameter 'distributionCenterCode' is set
            if (distributionCenterCode == null)
                throw new ApiException(400, "Missing required parameter 'distributionCenterCode' when calling FulfillmentApi->FulfillmentDistributionCentersDistributionCenterCodeInventoryPost");
            // verify the required parameter 'inventories' is set
            if (inventories == null)
                throw new ApiException(400, "Missing required parameter 'inventories' when calling FulfillmentApi->FulfillmentDistributionCentersDistributionCenterCodeInventoryPost");

            var localVarPath = "/fulfillment/distribution_centers/{distribution_center_code}/inventory";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (distributionCenterCode != null) localVarPathParams.Add("distribution_center_code", Configuration.ApiClient.ParameterToString(distributionCenterCode)); // path parameter
            if (inventories != null && inventories.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(inventories); // http body (model) parameter
            }
            else
            {
                localVarPostBody = inventories; // byte array
            }

            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FulfillmentDistributionCentersDistributionCenterCodeInventoryPost", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Retrieve orders queued up for this distribution center. Retrieves up to 100 orders that are queued up in this distribution center.  You must acknowledge them before additional new orders will be returned.  The orders that are returned contain only items for this distribution center and are expanded with billing, buysafe, channel_partner, checkout, coupons, customer_profile, edi, gift, gift_certificate, internal, items, payment, shipping, summary, taxes. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="distributionCenterCode">Distribution center code</param>
        /// <returns>OrdersResponse</returns>
        public OrdersResponse FulfillmentDistributionCentersDistributionCenterCodeOrdersGet (string distributionCenterCode)
        {
             ApiResponse<OrdersResponse> localVarResponse = FulfillmentDistributionCentersDistributionCenterCodeOrdersGetWithHttpInfo(distributionCenterCode);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve orders queued up for this distribution center. Retrieves up to 100 orders that are queued up in this distribution center.  You must acknowledge them before additional new orders will be returned.  The orders that are returned contain only items for this distribution center and are expanded with billing, buysafe, channel_partner, checkout, coupons, customer_profile, edi, gift, gift_certificate, internal, items, payment, shipping, summary, taxes. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="distributionCenterCode">Distribution center code</param>
        /// <returns>ApiResponse of OrdersResponse</returns>
        public ApiResponse< OrdersResponse > FulfillmentDistributionCentersDistributionCenterCodeOrdersGetWithHttpInfo (string distributionCenterCode)
        {
            // verify the required parameter 'distributionCenterCode' is set
            if (distributionCenterCode == null)
                throw new ApiException(400, "Missing required parameter 'distributionCenterCode' when calling FulfillmentApi->FulfillmentDistributionCentersDistributionCenterCodeOrdersGet");

            var localVarPath = "/fulfillment/distribution_centers/{distribution_center_code}/orders";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (distributionCenterCode != null) localVarPathParams.Add("distribution_center_code", Configuration.ApiClient.ParameterToString(distributionCenterCode)); // path parameter

            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FulfillmentDistributionCentersDistributionCenterCodeOrdersGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<OrdersResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (OrdersResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(OrdersResponse)));
            
        }

        /// <summary>
        /// Retrieve orders queued up for this distribution center. Retrieves up to 100 orders that are queued up in this distribution center.  You must acknowledge them before additional new orders will be returned.  The orders that are returned contain only items for this distribution center and are expanded with billing, buysafe, channel_partner, checkout, coupons, customer_profile, edi, gift, gift_certificate, internal, items, payment, shipping, summary, taxes. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="distributionCenterCode">Distribution center code</param>
        /// <returns>Task of OrdersResponse</returns>
        public async System.Threading.Tasks.Task<OrdersResponse> FulfillmentDistributionCentersDistributionCenterCodeOrdersGetAsync (string distributionCenterCode)
        {
             ApiResponse<OrdersResponse> localVarResponse = await FulfillmentDistributionCentersDistributionCenterCodeOrdersGetAsyncWithHttpInfo(distributionCenterCode);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieve orders queued up for this distribution center. Retrieves up to 100 orders that are queued up in this distribution center.  You must acknowledge them before additional new orders will be returned.  The orders that are returned contain only items for this distribution center and are expanded with billing, buysafe, channel_partner, checkout, coupons, customer_profile, edi, gift, gift_certificate, internal, items, payment, shipping, summary, taxes. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="distributionCenterCode">Distribution center code</param>
        /// <returns>Task of ApiResponse (OrdersResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<OrdersResponse>> FulfillmentDistributionCentersDistributionCenterCodeOrdersGetAsyncWithHttpInfo (string distributionCenterCode)
        {
            // verify the required parameter 'distributionCenterCode' is set
            if (distributionCenterCode == null)
                throw new ApiException(400, "Missing required parameter 'distributionCenterCode' when calling FulfillmentApi->FulfillmentDistributionCentersDistributionCenterCodeOrdersGet");

            var localVarPath = "/fulfillment/distribution_centers/{distribution_center_code}/orders";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (distributionCenterCode != null) localVarPathParams.Add("distribution_center_code", Configuration.ApiClient.ParameterToString(distributionCenterCode)); // path parameter

            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FulfillmentDistributionCentersDistributionCenterCodeOrdersGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<OrdersResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (OrdersResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(OrdersResponse)));
            
        }

        /// <summary>
        /// Mark orders as shipped Store the tracking information and mark the order shipped for this distribution center. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="distributionCenterCode">Distribution center code</param>
        /// <param name="shipments">Orders to mark shipped</param>
        /// <returns></returns>
        public void FulfillmentDistributionCentersDistributionCenterCodeShipmentsPost (string distributionCenterCode, List<FulfillmentShipment> shipments)
        {
             FulfillmentDistributionCentersDistributionCenterCodeShipmentsPostWithHttpInfo(distributionCenterCode, shipments);
        }

        /// <summary>
        /// Mark orders as shipped Store the tracking information and mark the order shipped for this distribution center. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="distributionCenterCode">Distribution center code</param>
        /// <param name="shipments">Orders to mark shipped</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> FulfillmentDistributionCentersDistributionCenterCodeShipmentsPostWithHttpInfo (string distributionCenterCode, List<FulfillmentShipment> shipments)
        {
            // verify the required parameter 'distributionCenterCode' is set
            if (distributionCenterCode == null)
                throw new ApiException(400, "Missing required parameter 'distributionCenterCode' when calling FulfillmentApi->FulfillmentDistributionCentersDistributionCenterCodeShipmentsPost");
            // verify the required parameter 'shipments' is set
            if (shipments == null)
                throw new ApiException(400, "Missing required parameter 'shipments' when calling FulfillmentApi->FulfillmentDistributionCentersDistributionCenterCodeShipmentsPost");

            var localVarPath = "/fulfillment/distribution_centers/{distribution_center_code}/shipments";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (distributionCenterCode != null) localVarPathParams.Add("distribution_center_code", Configuration.ApiClient.ParameterToString(distributionCenterCode)); // path parameter
            if (shipments != null && shipments.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(shipments); // http body (model) parameter
            }
            else
            {
                localVarPostBody = shipments; // byte array
            }

            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FulfillmentDistributionCentersDistributionCenterCodeShipmentsPost", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Mark orders as shipped Store the tracking information and mark the order shipped for this distribution center. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="distributionCenterCode">Distribution center code</param>
        /// <param name="shipments">Orders to mark shipped</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task FulfillmentDistributionCentersDistributionCenterCodeShipmentsPostAsync (string distributionCenterCode, List<FulfillmentShipment> shipments)
        {
             await FulfillmentDistributionCentersDistributionCenterCodeShipmentsPostAsyncWithHttpInfo(distributionCenterCode, shipments);

        }

        /// <summary>
        /// Mark orders as shipped Store the tracking information and mark the order shipped for this distribution center. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="distributionCenterCode">Distribution center code</param>
        /// <param name="shipments">Orders to mark shipped</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> FulfillmentDistributionCentersDistributionCenterCodeShipmentsPostAsyncWithHttpInfo (string distributionCenterCode, List<FulfillmentShipment> shipments)
        {
            // verify the required parameter 'distributionCenterCode' is set
            if (distributionCenterCode == null)
                throw new ApiException(400, "Missing required parameter 'distributionCenterCode' when calling FulfillmentApi->FulfillmentDistributionCentersDistributionCenterCodeShipmentsPost");
            // verify the required parameter 'shipments' is set
            if (shipments == null)
                throw new ApiException(400, "Missing required parameter 'shipments' when calling FulfillmentApi->FulfillmentDistributionCentersDistributionCenterCodeShipmentsPost");

            var localVarPath = "/fulfillment/distribution_centers/{distribution_center_code}/shipments";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (distributionCenterCode != null) localVarPathParams.Add("distribution_center_code", Configuration.ApiClient.ParameterToString(distributionCenterCode)); // path parameter
            if (shipments != null && shipments.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(shipments); // http body (model) parameter
            }
            else
            {
                localVarPostBody = shipments; // byte array
            }

            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FulfillmentDistributionCentersDistributionCenterCodeShipmentsPost", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Retrieve distribution centers Retrieves the distribution centers that this user has access to. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>DistributionCentersResponse</returns>
        public DistributionCentersResponse FulfillmentDistributionCentersGet ()
        {
             ApiResponse<DistributionCentersResponse> localVarResponse = FulfillmentDistributionCentersGetWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve distribution centers Retrieves the distribution centers that this user has access to. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of DistributionCentersResponse</returns>
        public ApiResponse< DistributionCentersResponse > FulfillmentDistributionCentersGetWithHttpInfo ()
        {

            var localVarPath = "/fulfillment/distribution_centers";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");

            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FulfillmentDistributionCentersGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DistributionCentersResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DistributionCentersResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(DistributionCentersResponse)));
            
        }

        /// <summary>
        /// Retrieve distribution centers Retrieves the distribution centers that this user has access to. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of DistributionCentersResponse</returns>
        public async System.Threading.Tasks.Task<DistributionCentersResponse> FulfillmentDistributionCentersGetAsync ()
        {
             ApiResponse<DistributionCentersResponse> localVarResponse = await FulfillmentDistributionCentersGetAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieve distribution centers Retrieves the distribution centers that this user has access to. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (DistributionCentersResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DistributionCentersResponse>> FulfillmentDistributionCentersGetAsyncWithHttpInfo ()
        {

            var localVarPath = "/fulfillment/distribution_centers";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");

            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FulfillmentDistributionCentersGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DistributionCentersResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DistributionCentersResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(DistributionCentersResponse)));
            
        }

    }
}
