/*
 * UltraCart Rest API V2
 *
 * UltraCart REST API Version 2
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@ultracart.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Threading;
using RestSharp;
using com.ultracart.admin.v2.Client;
using com.ultracart.admin.v2.Model;

namespace com.ultracart.admin.v2.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IGiftCertificateApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Add a gift certificate ledger entry
        /// </summary>
        /// <remarks>
        /// Adds a ledger entry for this gift certificate. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="giftCertificateOid"></param>
        /// <param name="giftCertificateLedgerEntry">Gift certificate ledger entry</param>
        /// <returns>GiftCertificateResponse</returns>
        GiftCertificateResponse AddGiftCertificateLedgerEntry (int giftCertificateOid, GiftCertificateLedgerEntry giftCertificateLedgerEntry);

        /// <summary>
        /// Add a gift certificate ledger entry
        /// </summary>
        /// <remarks>
        /// Adds a ledger entry for this gift certificate. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="giftCertificateOid"></param>
        /// <param name="giftCertificateLedgerEntry">Gift certificate ledger entry</param>
        /// <returns>ApiResponse of GiftCertificateResponse</returns>
        ApiResponse<GiftCertificateResponse> AddGiftCertificateLedgerEntryWithHttpInfo (int giftCertificateOid, GiftCertificateLedgerEntry giftCertificateLedgerEntry);
        /// <summary>
        /// Create a gift certificate
        /// </summary>
        /// <remarks>
        /// Creates a gift certificate for this merchant account. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="giftCertificateCreateRequest">Gift certificate create request</param>
        /// <returns>GiftCertificateResponse</returns>
        GiftCertificateResponse CreateGiftCertificate (GiftCertificateCreateRequest giftCertificateCreateRequest);

        /// <summary>
        /// Create a gift certificate
        /// </summary>
        /// <remarks>
        /// Creates a gift certificate for this merchant account. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="giftCertificateCreateRequest">Gift certificate create request</param>
        /// <returns>ApiResponse of GiftCertificateResponse</returns>
        ApiResponse<GiftCertificateResponse> CreateGiftCertificateWithHttpInfo (GiftCertificateCreateRequest giftCertificateCreateRequest);
        /// <summary>
        /// Delete a gift certificate
        /// </summary>
        /// <remarks>
        /// Deletes a gift certificate for this merchant account. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="giftCertificateOid"></param>
        /// <returns></returns>
        void DeleteGiftCertificate (int giftCertificateOid);

        /// <summary>
        /// Delete a gift certificate
        /// </summary>
        /// <remarks>
        /// Deletes a gift certificate for this merchant account. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="giftCertificateOid"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteGiftCertificateWithHttpInfo (int giftCertificateOid);
        /// <summary>
        /// Retrieve gift certificate by code
        /// </summary>
        /// <remarks>
        /// Retrieves a gift certificate from the account based on the code (the value the customer enters at checkout time). 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code"></param>
        /// <returns>GiftCertificateResponse</returns>
        GiftCertificateResponse GetGiftCertificateByCode (string code);

        /// <summary>
        /// Retrieve gift certificate by code
        /// </summary>
        /// <remarks>
        /// Retrieves a gift certificate from the account based on the code (the value the customer enters at checkout time). 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code"></param>
        /// <returns>ApiResponse of GiftCertificateResponse</returns>
        ApiResponse<GiftCertificateResponse> GetGiftCertificateByCodeWithHttpInfo (string code);
        /// <summary>
        /// Retrieve gift certificate by oid
        /// </summary>
        /// <remarks>
        /// Retrieves a gift certificate from the account based on the internal primary key. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="giftCertificateOid"></param>
        /// <returns>GiftCertificateResponse</returns>
        GiftCertificateResponse GetGiftCertificateByOid (int giftCertificateOid);

        /// <summary>
        /// Retrieve gift certificate by oid
        /// </summary>
        /// <remarks>
        /// Retrieves a gift certificate from the account based on the internal primary key. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="giftCertificateOid"></param>
        /// <returns>ApiResponse of GiftCertificateResponse</returns>
        ApiResponse<GiftCertificateResponse> GetGiftCertificateByOidWithHttpInfo (int giftCertificateOid);
        /// <summary>
        /// Retrieve gift certificate by email
        /// </summary>
        /// <remarks>
        /// Retrieves all gift certificates from the account based on customer email. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="email"></param>
        /// <returns>GiftCertificatesResponse</returns>
        GiftCertificatesResponse GetGiftCertificatesByEmail (string email);

        /// <summary>
        /// Retrieve gift certificate by email
        /// </summary>
        /// <remarks>
        /// Retrieves all gift certificates from the account based on customer email. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="email"></param>
        /// <returns>ApiResponse of GiftCertificatesResponse</returns>
        ApiResponse<GiftCertificatesResponse> GetGiftCertificatesByEmailWithHttpInfo (string email);
        /// <summary>
        /// Retrieve gift certificates by query
        /// </summary>
        /// <remarks>
        /// Retrieves gift certificates from the account.  If no parameters are specified, all gift certificates will be returned.  You will need to make multiple API calls in order to retrieve the entire result set since this API performs result set pagination. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="giftCertificateQuery">Gift certificates query</param>
        /// <param name="limit">The maximum number of records to return on this one API call. (Max 200) (optional, default to 100)</param>
        /// <param name="offset">Pagination of the record set.  Offset is a zero based index. (optional, default to 0)</param>
        /// <param name="since">Fetch customers that have been created/modified since this date/time. (optional)</param>
        /// <param name="sort">The sort order of the customers.  See Sorting documentation for examples of using multiple values and sorting by ascending and descending. (optional)</param>
        /// <param name="expand">The object expansion to perform on the result.  See documentation for examples (optional)</param>
        /// <returns>GiftCertificatesResponse</returns>
        GiftCertificatesResponse GetGiftCertificatesByQuery (GiftCertificateQuery giftCertificateQuery, int? limit = default(int?), int? offset = default(int?), string since = default(string), string sort = default(string), string expand = default(string));

        /// <summary>
        /// Retrieve gift certificates by query
        /// </summary>
        /// <remarks>
        /// Retrieves gift certificates from the account.  If no parameters are specified, all gift certificates will be returned.  You will need to make multiple API calls in order to retrieve the entire result set since this API performs result set pagination. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="giftCertificateQuery">Gift certificates query</param>
        /// <param name="limit">The maximum number of records to return on this one API call. (Max 200) (optional, default to 100)</param>
        /// <param name="offset">Pagination of the record set.  Offset is a zero based index. (optional, default to 0)</param>
        /// <param name="since">Fetch customers that have been created/modified since this date/time. (optional)</param>
        /// <param name="sort">The sort order of the customers.  See Sorting documentation for examples of using multiple values and sorting by ascending and descending. (optional)</param>
        /// <param name="expand">The object expansion to perform on the result.  See documentation for examples (optional)</param>
        /// <returns>ApiResponse of GiftCertificatesResponse</returns>
        ApiResponse<GiftCertificatesResponse> GetGiftCertificatesByQueryWithHttpInfo (GiftCertificateQuery giftCertificateQuery, int? limit = default(int?), int? offset = default(int?), string since = default(string), string sort = default(string), string expand = default(string));
        /// <summary>
        /// Update a gift certificate
        /// </summary>
        /// <remarks>
        /// Update a gift certificate for this merchant account. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="giftCertificateOid"></param>
        /// <param name="giftCertificate">Gift certificate</param>
        /// <returns>GiftCertificateResponse</returns>
        GiftCertificateResponse UpdateGiftCertificate (int giftCertificateOid, GiftCertificate giftCertificate);

        /// <summary>
        /// Update a gift certificate
        /// </summary>
        /// <remarks>
        /// Update a gift certificate for this merchant account. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="giftCertificateOid"></param>
        /// <param name="giftCertificate">Gift certificate</param>
        /// <returns>ApiResponse of GiftCertificateResponse</returns>
        ApiResponse<GiftCertificateResponse> UpdateGiftCertificateWithHttpInfo (int giftCertificateOid, GiftCertificate giftCertificate);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Add a gift certificate ledger entry
        /// </summary>
        /// <remarks>
        /// Adds a ledger entry for this gift certificate. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="giftCertificateOid"></param>
        /// <param name="giftCertificateLedgerEntry">Gift certificate ledger entry</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of GiftCertificateResponse</returns>
        System.Threading.Tasks.Task<GiftCertificateResponse> AddGiftCertificateLedgerEntryAsync (int giftCertificateOid, GiftCertificateLedgerEntry giftCertificateLedgerEntry, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Add a gift certificate ledger entry
        /// </summary>
        /// <remarks>
        /// Adds a ledger entry for this gift certificate. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="giftCertificateOid"></param>
        /// <param name="giftCertificateLedgerEntry">Gift certificate ledger entry</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (GiftCertificateResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GiftCertificateResponse>> AddGiftCertificateLedgerEntryWithHttpInfoAsync (int giftCertificateOid, GiftCertificateLedgerEntry giftCertificateLedgerEntry, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Create a gift certificate
        /// </summary>
        /// <remarks>
        /// Creates a gift certificate for this merchant account. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="giftCertificateCreateRequest">Gift certificate create request</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of GiftCertificateResponse</returns>
        System.Threading.Tasks.Task<GiftCertificateResponse> CreateGiftCertificateAsync (GiftCertificateCreateRequest giftCertificateCreateRequest, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Create a gift certificate
        /// </summary>
        /// <remarks>
        /// Creates a gift certificate for this merchant account. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="giftCertificateCreateRequest">Gift certificate create request</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (GiftCertificateResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GiftCertificateResponse>> CreateGiftCertificateWithHttpInfoAsync (GiftCertificateCreateRequest giftCertificateCreateRequest, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Delete a gift certificate
        /// </summary>
        /// <remarks>
        /// Deletes a gift certificate for this merchant account. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="giftCertificateOid"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteGiftCertificateAsync (int giftCertificateOid, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Delete a gift certificate
        /// </summary>
        /// <remarks>
        /// Deletes a gift certificate for this merchant account. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="giftCertificateOid"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteGiftCertificateWithHttpInfoAsync (int giftCertificateOid, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Retrieve gift certificate by code
        /// </summary>
        /// <remarks>
        /// Retrieves a gift certificate from the account based on the code (the value the customer enters at checkout time). 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of GiftCertificateResponse</returns>
        System.Threading.Tasks.Task<GiftCertificateResponse> GetGiftCertificateByCodeAsync (string code, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Retrieve gift certificate by code
        /// </summary>
        /// <remarks>
        /// Retrieves a gift certificate from the account based on the code (the value the customer enters at checkout time). 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (GiftCertificateResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GiftCertificateResponse>> GetGiftCertificateByCodeWithHttpInfoAsync (string code, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Retrieve gift certificate by oid
        /// </summary>
        /// <remarks>
        /// Retrieves a gift certificate from the account based on the internal primary key. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="giftCertificateOid"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of GiftCertificateResponse</returns>
        System.Threading.Tasks.Task<GiftCertificateResponse> GetGiftCertificateByOidAsync (int giftCertificateOid, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Retrieve gift certificate by oid
        /// </summary>
        /// <remarks>
        /// Retrieves a gift certificate from the account based on the internal primary key. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="giftCertificateOid"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (GiftCertificateResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GiftCertificateResponse>> GetGiftCertificateByOidWithHttpInfoAsync (int giftCertificateOid, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Retrieve gift certificate by email
        /// </summary>
        /// <remarks>
        /// Retrieves all gift certificates from the account based on customer email. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="email"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of GiftCertificatesResponse</returns>
        System.Threading.Tasks.Task<GiftCertificatesResponse> GetGiftCertificatesByEmailAsync (string email, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Retrieve gift certificate by email
        /// </summary>
        /// <remarks>
        /// Retrieves all gift certificates from the account based on customer email. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="email"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (GiftCertificatesResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GiftCertificatesResponse>> GetGiftCertificatesByEmailWithHttpInfoAsync (string email, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Retrieve gift certificates by query
        /// </summary>
        /// <remarks>
        /// Retrieves gift certificates from the account.  If no parameters are specified, all gift certificates will be returned.  You will need to make multiple API calls in order to retrieve the entire result set since this API performs result set pagination. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="giftCertificateQuery">Gift certificates query</param>
        /// <param name="limit">The maximum number of records to return on this one API call. (Max 200) (optional, default to 100)</param>
        /// <param name="offset">Pagination of the record set.  Offset is a zero based index. (optional, default to 0)</param>
        /// <param name="since">Fetch customers that have been created/modified since this date/time. (optional)</param>
        /// <param name="sort">The sort order of the customers.  See Sorting documentation for examples of using multiple values and sorting by ascending and descending. (optional)</param>
        /// <param name="expand">The object expansion to perform on the result.  See documentation for examples (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of GiftCertificatesResponse</returns>
        System.Threading.Tasks.Task<GiftCertificatesResponse> GetGiftCertificatesByQueryAsync (GiftCertificateQuery giftCertificateQuery, int? limit = default(int?), int? offset = default(int?), string since = default(string), string sort = default(string), string expand = default(string), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Retrieve gift certificates by query
        /// </summary>
        /// <remarks>
        /// Retrieves gift certificates from the account.  If no parameters are specified, all gift certificates will be returned.  You will need to make multiple API calls in order to retrieve the entire result set since this API performs result set pagination. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="giftCertificateQuery">Gift certificates query</param>
        /// <param name="limit">The maximum number of records to return on this one API call. (Max 200) (optional, default to 100)</param>
        /// <param name="offset">Pagination of the record set.  Offset is a zero based index. (optional, default to 0)</param>
        /// <param name="since">Fetch customers that have been created/modified since this date/time. (optional)</param>
        /// <param name="sort">The sort order of the customers.  See Sorting documentation for examples of using multiple values and sorting by ascending and descending. (optional)</param>
        /// <param name="expand">The object expansion to perform on the result.  See documentation for examples (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (GiftCertificatesResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GiftCertificatesResponse>> GetGiftCertificatesByQueryWithHttpInfoAsync (GiftCertificateQuery giftCertificateQuery, int? limit = default(int?), int? offset = default(int?), string since = default(string), string sort = default(string), string expand = default(string), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Update a gift certificate
        /// </summary>
        /// <remarks>
        /// Update a gift certificate for this merchant account. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="giftCertificateOid"></param>
        /// <param name="giftCertificate">Gift certificate</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of GiftCertificateResponse</returns>
        System.Threading.Tasks.Task<GiftCertificateResponse> UpdateGiftCertificateAsync (int giftCertificateOid, GiftCertificate giftCertificate, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Update a gift certificate
        /// </summary>
        /// <remarks>
        /// Update a gift certificate for this merchant account. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="giftCertificateOid"></param>
        /// <param name="giftCertificate">Gift certificate</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (GiftCertificateResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GiftCertificateResponse>> UpdateGiftCertificateWithHttpInfoAsync (int giftCertificateOid, GiftCertificate giftCertificate, CancellationToken cancellationToken = default(CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class GiftCertificateApi : IGiftCertificateApi
    {
        private com.ultracart.admin.v2.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="GiftCertificateApi"/> class.
        /// </summary>
        /// <returns></returns>
        public GiftCertificateApi(String basePath, bool uselessVariable)
        {
            this.Configuration = new com.ultracart.admin.v2.Client.Configuration { BasePath = basePath };

            ExceptionFactory = com.ultracart.admin.v2.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="GiftCertificateApi"/> class
        /// </summary>
        /// <returns></returns>
        public GiftCertificateApi()
        {
            this.Configuration = com.ultracart.admin.v2.Client.Configuration.Default;

            ExceptionFactory = com.ultracart.admin.v2.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="GiftCertificateApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public GiftCertificateApi(com.ultracart.admin.v2.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = com.ultracart.admin.v2.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = com.ultracart.admin.v2.Client.Configuration.DefaultExceptionFactory;
        }


        /// <summary>
        /// Initializes a new instance of the <see cref="GiftCertificateApi"/> class
        /// using a simple key string and optional version, which you will
        /// almost always want to use the default
        /// </summary>
        /// <param name="SimpleKey">A simple key.  See https://ultracart.atlassian.net/wiki/spaces/ucdoc/pages/38688545/API+Simple+Key</param>
        /// <returns></returns>
        public GiftCertificateApi(string SimpleKey)
        {
            Configuration configuration = new Configuration();
            configuration.ApiKey.Add("x-ultracart-simple-key", SimpleKey);
            configuration.DefaultHeader.Add("X-UltraCart-Api-Version", "2017-03-01");
            this.Configuration = configuration;
            ExceptionFactory = com.ultracart.admin.v2.Client.Configuration.DefaultExceptionFactory;
        }


        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public com.ultracart.admin.v2.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public com.ultracart.admin.v2.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Add a gift certificate ledger entry Adds a ledger entry for this gift certificate. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="giftCertificateOid"></param>
        /// <param name="giftCertificateLedgerEntry">Gift certificate ledger entry</param>
        /// <returns>GiftCertificateResponse</returns>
        public GiftCertificateResponse AddGiftCertificateLedgerEntry (int giftCertificateOid, GiftCertificateLedgerEntry giftCertificateLedgerEntry)
        {
             ApiResponse<GiftCertificateResponse> localVarResponse = AddGiftCertificateLedgerEntryWithHttpInfo(giftCertificateOid, giftCertificateLedgerEntry);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Add a gift certificate ledger entry Adds a ledger entry for this gift certificate. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="giftCertificateOid"></param>
        /// <param name="giftCertificateLedgerEntry">Gift certificate ledger entry</param>
        /// <returns>ApiResponse of GiftCertificateResponse</returns>
        public ApiResponse<GiftCertificateResponse> AddGiftCertificateLedgerEntryWithHttpInfo (int giftCertificateOid, GiftCertificateLedgerEntry giftCertificateLedgerEntry)
        {
            // verify the required parameter 'giftCertificateOid' is set
            if (giftCertificateOid == null)
                throw new ApiException(400, "Missing required parameter 'giftCertificateOid' when calling GiftCertificateApi->AddGiftCertificateLedgerEntry");
            // verify the required parameter 'giftCertificateLedgerEntry' is set
            if (giftCertificateLedgerEntry == null)
                throw new ApiException(400, "Missing required parameter 'giftCertificateLedgerEntry' when calling GiftCertificateApi->AddGiftCertificateLedgerEntry");

            var localVarPath = "/gift_certificate/gift_certificates/{gift_certificate_oid}/ledger_entry";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (giftCertificateOid != null) localVarPathParams.Add("gift_certificate_oid", this.Configuration.ApiClient.ParameterToString(giftCertificateOid)); // path parameter
            if (giftCertificateLedgerEntry != null && giftCertificateLedgerEntry.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(giftCertificateLedgerEntry); // http body (model) parameter
            }
            else
            {
                localVarPostBody = giftCertificateLedgerEntry; // byte array
            }

            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddGiftCertificateLedgerEntry", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GiftCertificateResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (GiftCertificateResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GiftCertificateResponse)));
        }

        /// <summary>
        /// Add a gift certificate ledger entry Adds a ledger entry for this gift certificate. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="giftCertificateOid"></param>
        /// <param name="giftCertificateLedgerEntry">Gift certificate ledger entry</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of GiftCertificateResponse</returns>
        public async System.Threading.Tasks.Task<GiftCertificateResponse> AddGiftCertificateLedgerEntryAsync (int giftCertificateOid, GiftCertificateLedgerEntry giftCertificateLedgerEntry, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<GiftCertificateResponse> localVarResponse = await AddGiftCertificateLedgerEntryWithHttpInfoAsync(giftCertificateOid, giftCertificateLedgerEntry, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Add a gift certificate ledger entry Adds a ledger entry for this gift certificate. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="giftCertificateOid"></param>
        /// <param name="giftCertificateLedgerEntry">Gift certificate ledger entry</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (GiftCertificateResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GiftCertificateResponse>> AddGiftCertificateLedgerEntryWithHttpInfoAsync (int giftCertificateOid, GiftCertificateLedgerEntry giftCertificateLedgerEntry, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'giftCertificateOid' is set
            if (giftCertificateOid == null)
                throw new ApiException(400, "Missing required parameter 'giftCertificateOid' when calling GiftCertificateApi->AddGiftCertificateLedgerEntry");
            // verify the required parameter 'giftCertificateLedgerEntry' is set
            if (giftCertificateLedgerEntry == null)
                throw new ApiException(400, "Missing required parameter 'giftCertificateLedgerEntry' when calling GiftCertificateApi->AddGiftCertificateLedgerEntry");

            var localVarPath = "/gift_certificate/gift_certificates/{gift_certificate_oid}/ledger_entry";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (giftCertificateOid != null) localVarPathParams.Add("gift_certificate_oid", this.Configuration.ApiClient.ParameterToString(giftCertificateOid)); // path parameter
            if (giftCertificateLedgerEntry != null && giftCertificateLedgerEntry.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(giftCertificateLedgerEntry); // http body (model) parameter
            }
            else
            {
                localVarPostBody = giftCertificateLedgerEntry; // byte array
            }

            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddGiftCertificateLedgerEntry", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GiftCertificateResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (GiftCertificateResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GiftCertificateResponse)));
        }

        /// <summary>
        /// Create a gift certificate Creates a gift certificate for this merchant account. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="giftCertificateCreateRequest">Gift certificate create request</param>
        /// <returns>GiftCertificateResponse</returns>
        public GiftCertificateResponse CreateGiftCertificate (GiftCertificateCreateRequest giftCertificateCreateRequest)
        {
             ApiResponse<GiftCertificateResponse> localVarResponse = CreateGiftCertificateWithHttpInfo(giftCertificateCreateRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create a gift certificate Creates a gift certificate for this merchant account. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="giftCertificateCreateRequest">Gift certificate create request</param>
        /// <returns>ApiResponse of GiftCertificateResponse</returns>
        public ApiResponse<GiftCertificateResponse> CreateGiftCertificateWithHttpInfo (GiftCertificateCreateRequest giftCertificateCreateRequest)
        {
            // verify the required parameter 'giftCertificateCreateRequest' is set
            if (giftCertificateCreateRequest == null)
                throw new ApiException(400, "Missing required parameter 'giftCertificateCreateRequest' when calling GiftCertificateApi->CreateGiftCertificate");

            var localVarPath = "/gift_certificate/gift_certificates";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (giftCertificateCreateRequest != null && giftCertificateCreateRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(giftCertificateCreateRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = giftCertificateCreateRequest; // byte array
            }

            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateGiftCertificate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GiftCertificateResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (GiftCertificateResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GiftCertificateResponse)));
        }

        /// <summary>
        /// Create a gift certificate Creates a gift certificate for this merchant account. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="giftCertificateCreateRequest">Gift certificate create request</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of GiftCertificateResponse</returns>
        public async System.Threading.Tasks.Task<GiftCertificateResponse> CreateGiftCertificateAsync (GiftCertificateCreateRequest giftCertificateCreateRequest, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<GiftCertificateResponse> localVarResponse = await CreateGiftCertificateWithHttpInfoAsync(giftCertificateCreateRequest, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create a gift certificate Creates a gift certificate for this merchant account. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="giftCertificateCreateRequest">Gift certificate create request</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (GiftCertificateResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GiftCertificateResponse>> CreateGiftCertificateWithHttpInfoAsync (GiftCertificateCreateRequest giftCertificateCreateRequest, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'giftCertificateCreateRequest' is set
            if (giftCertificateCreateRequest == null)
                throw new ApiException(400, "Missing required parameter 'giftCertificateCreateRequest' when calling GiftCertificateApi->CreateGiftCertificate");

            var localVarPath = "/gift_certificate/gift_certificates";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (giftCertificateCreateRequest != null && giftCertificateCreateRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(giftCertificateCreateRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = giftCertificateCreateRequest; // byte array
            }

            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateGiftCertificate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GiftCertificateResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (GiftCertificateResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GiftCertificateResponse)));
        }

        /// <summary>
        /// Delete a gift certificate Deletes a gift certificate for this merchant account. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="giftCertificateOid"></param>
        /// <returns></returns>
        public void DeleteGiftCertificate (int giftCertificateOid)
        {
             DeleteGiftCertificateWithHttpInfo(giftCertificateOid);
        }

        /// <summary>
        /// Delete a gift certificate Deletes a gift certificate for this merchant account. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="giftCertificateOid"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteGiftCertificateWithHttpInfo (int giftCertificateOid)
        {
            // verify the required parameter 'giftCertificateOid' is set
            if (giftCertificateOid == null)
                throw new ApiException(400, "Missing required parameter 'giftCertificateOid' when calling GiftCertificateApi->DeleteGiftCertificate");

            var localVarPath = "/gift_certificate/gift_certificates/{gift_certificate_oid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (giftCertificateOid != null) localVarPathParams.Add("gift_certificate_oid", this.Configuration.ApiClient.ParameterToString(giftCertificateOid)); // path parameter

            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteGiftCertificate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Delete a gift certificate Deletes a gift certificate for this merchant account. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="giftCertificateOid"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteGiftCertificateAsync (int giftCertificateOid, CancellationToken cancellationToken = default(CancellationToken))
        {
             await DeleteGiftCertificateWithHttpInfoAsync(giftCertificateOid, cancellationToken);

        }

        /// <summary>
        /// Delete a gift certificate Deletes a gift certificate for this merchant account. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="giftCertificateOid"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteGiftCertificateWithHttpInfoAsync (int giftCertificateOid, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'giftCertificateOid' is set
            if (giftCertificateOid == null)
                throw new ApiException(400, "Missing required parameter 'giftCertificateOid' when calling GiftCertificateApi->DeleteGiftCertificate");

            var localVarPath = "/gift_certificate/gift_certificates/{gift_certificate_oid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (giftCertificateOid != null) localVarPathParams.Add("gift_certificate_oid", this.Configuration.ApiClient.ParameterToString(giftCertificateOid)); // path parameter

            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteGiftCertificate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Retrieve gift certificate by code Retrieves a gift certificate from the account based on the code (the value the customer enters at checkout time). 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code"></param>
        /// <returns>GiftCertificateResponse</returns>
        public GiftCertificateResponse GetGiftCertificateByCode (string code)
        {
             ApiResponse<GiftCertificateResponse> localVarResponse = GetGiftCertificateByCodeWithHttpInfo(code);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve gift certificate by code Retrieves a gift certificate from the account based on the code (the value the customer enters at checkout time). 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code"></param>
        /// <returns>ApiResponse of GiftCertificateResponse</returns>
        public ApiResponse<GiftCertificateResponse> GetGiftCertificateByCodeWithHttpInfo (string code)
        {
            // verify the required parameter 'code' is set
            if (code == null)
                throw new ApiException(400, "Missing required parameter 'code' when calling GiftCertificateApi->GetGiftCertificateByCode");

            var localVarPath = "/gift_certificate/gift_certificates/by_code/{code}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (code != null) localVarPathParams.Add("code", this.Configuration.ApiClient.ParameterToString(code)); // path parameter

            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetGiftCertificateByCode", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GiftCertificateResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (GiftCertificateResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GiftCertificateResponse)));
        }

        /// <summary>
        /// Retrieve gift certificate by code Retrieves a gift certificate from the account based on the code (the value the customer enters at checkout time). 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of GiftCertificateResponse</returns>
        public async System.Threading.Tasks.Task<GiftCertificateResponse> GetGiftCertificateByCodeAsync (string code, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<GiftCertificateResponse> localVarResponse = await GetGiftCertificateByCodeWithHttpInfoAsync(code, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieve gift certificate by code Retrieves a gift certificate from the account based on the code (the value the customer enters at checkout time). 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (GiftCertificateResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GiftCertificateResponse>> GetGiftCertificateByCodeWithHttpInfoAsync (string code, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'code' is set
            if (code == null)
                throw new ApiException(400, "Missing required parameter 'code' when calling GiftCertificateApi->GetGiftCertificateByCode");

            var localVarPath = "/gift_certificate/gift_certificates/by_code/{code}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (code != null) localVarPathParams.Add("code", this.Configuration.ApiClient.ParameterToString(code)); // path parameter

            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetGiftCertificateByCode", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GiftCertificateResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (GiftCertificateResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GiftCertificateResponse)));
        }

        /// <summary>
        /// Retrieve gift certificate by oid Retrieves a gift certificate from the account based on the internal primary key. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="giftCertificateOid"></param>
        /// <returns>GiftCertificateResponse</returns>
        public GiftCertificateResponse GetGiftCertificateByOid (int giftCertificateOid)
        {
             ApiResponse<GiftCertificateResponse> localVarResponse = GetGiftCertificateByOidWithHttpInfo(giftCertificateOid);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve gift certificate by oid Retrieves a gift certificate from the account based on the internal primary key. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="giftCertificateOid"></param>
        /// <returns>ApiResponse of GiftCertificateResponse</returns>
        public ApiResponse<GiftCertificateResponse> GetGiftCertificateByOidWithHttpInfo (int giftCertificateOid)
        {
            // verify the required parameter 'giftCertificateOid' is set
            if (giftCertificateOid == null)
                throw new ApiException(400, "Missing required parameter 'giftCertificateOid' when calling GiftCertificateApi->GetGiftCertificateByOid");

            var localVarPath = "/gift_certificate/gift_certificates/{gift_certificate_oid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (giftCertificateOid != null) localVarPathParams.Add("gift_certificate_oid", this.Configuration.ApiClient.ParameterToString(giftCertificateOid)); // path parameter

            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetGiftCertificateByOid", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GiftCertificateResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (GiftCertificateResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GiftCertificateResponse)));
        }

        /// <summary>
        /// Retrieve gift certificate by oid Retrieves a gift certificate from the account based on the internal primary key. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="giftCertificateOid"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of GiftCertificateResponse</returns>
        public async System.Threading.Tasks.Task<GiftCertificateResponse> GetGiftCertificateByOidAsync (int giftCertificateOid, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<GiftCertificateResponse> localVarResponse = await GetGiftCertificateByOidWithHttpInfoAsync(giftCertificateOid, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieve gift certificate by oid Retrieves a gift certificate from the account based on the internal primary key. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="giftCertificateOid"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (GiftCertificateResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GiftCertificateResponse>> GetGiftCertificateByOidWithHttpInfoAsync (int giftCertificateOid, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'giftCertificateOid' is set
            if (giftCertificateOid == null)
                throw new ApiException(400, "Missing required parameter 'giftCertificateOid' when calling GiftCertificateApi->GetGiftCertificateByOid");

            var localVarPath = "/gift_certificate/gift_certificates/{gift_certificate_oid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (giftCertificateOid != null) localVarPathParams.Add("gift_certificate_oid", this.Configuration.ApiClient.ParameterToString(giftCertificateOid)); // path parameter

            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetGiftCertificateByOid", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GiftCertificateResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (GiftCertificateResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GiftCertificateResponse)));
        }

        /// <summary>
        /// Retrieve gift certificate by email Retrieves all gift certificates from the account based on customer email. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="email"></param>
        /// <returns>GiftCertificatesResponse</returns>
        public GiftCertificatesResponse GetGiftCertificatesByEmail (string email)
        {
             ApiResponse<GiftCertificatesResponse> localVarResponse = GetGiftCertificatesByEmailWithHttpInfo(email);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve gift certificate by email Retrieves all gift certificates from the account based on customer email. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="email"></param>
        /// <returns>ApiResponse of GiftCertificatesResponse</returns>
        public ApiResponse<GiftCertificatesResponse> GetGiftCertificatesByEmailWithHttpInfo (string email)
        {
            // verify the required parameter 'email' is set
            if (email == null)
                throw new ApiException(400, "Missing required parameter 'email' when calling GiftCertificateApi->GetGiftCertificatesByEmail");

            var localVarPath = "/gift_certificate/gift_certificates/by_email/{email}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (email != null) localVarPathParams.Add("email", this.Configuration.ApiClient.ParameterToString(email)); // path parameter

            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetGiftCertificatesByEmail", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GiftCertificatesResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (GiftCertificatesResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GiftCertificatesResponse)));
        }

        /// <summary>
        /// Retrieve gift certificate by email Retrieves all gift certificates from the account based on customer email. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="email"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of GiftCertificatesResponse</returns>
        public async System.Threading.Tasks.Task<GiftCertificatesResponse> GetGiftCertificatesByEmailAsync (string email, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<GiftCertificatesResponse> localVarResponse = await GetGiftCertificatesByEmailWithHttpInfoAsync(email, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieve gift certificate by email Retrieves all gift certificates from the account based on customer email. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="email"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (GiftCertificatesResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GiftCertificatesResponse>> GetGiftCertificatesByEmailWithHttpInfoAsync (string email, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'email' is set
            if (email == null)
                throw new ApiException(400, "Missing required parameter 'email' when calling GiftCertificateApi->GetGiftCertificatesByEmail");

            var localVarPath = "/gift_certificate/gift_certificates/by_email/{email}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (email != null) localVarPathParams.Add("email", this.Configuration.ApiClient.ParameterToString(email)); // path parameter

            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetGiftCertificatesByEmail", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GiftCertificatesResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (GiftCertificatesResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GiftCertificatesResponse)));
        }

        /// <summary>
        /// Retrieve gift certificates by query Retrieves gift certificates from the account.  If no parameters are specified, all gift certificates will be returned.  You will need to make multiple API calls in order to retrieve the entire result set since this API performs result set pagination. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="giftCertificateQuery">Gift certificates query</param>
        /// <param name="limit">The maximum number of records to return on this one API call. (Max 200) (optional, default to 100)</param>
        /// <param name="offset">Pagination of the record set.  Offset is a zero based index. (optional, default to 0)</param>
        /// <param name="since">Fetch customers that have been created/modified since this date/time. (optional)</param>
        /// <param name="sort">The sort order of the customers.  See Sorting documentation for examples of using multiple values and sorting by ascending and descending. (optional)</param>
        /// <param name="expand">The object expansion to perform on the result.  See documentation for examples (optional)</param>
        /// <returns>GiftCertificatesResponse</returns>
        public GiftCertificatesResponse GetGiftCertificatesByQuery (GiftCertificateQuery giftCertificateQuery, int? limit = default(int?), int? offset = default(int?), string since = default(string), string sort = default(string), string expand = default(string))
        {
             ApiResponse<GiftCertificatesResponse> localVarResponse = GetGiftCertificatesByQueryWithHttpInfo(giftCertificateQuery, limit, offset, since, sort, expand);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve gift certificates by query Retrieves gift certificates from the account.  If no parameters are specified, all gift certificates will be returned.  You will need to make multiple API calls in order to retrieve the entire result set since this API performs result set pagination. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="giftCertificateQuery">Gift certificates query</param>
        /// <param name="limit">The maximum number of records to return on this one API call. (Max 200) (optional, default to 100)</param>
        /// <param name="offset">Pagination of the record set.  Offset is a zero based index. (optional, default to 0)</param>
        /// <param name="since">Fetch customers that have been created/modified since this date/time. (optional)</param>
        /// <param name="sort">The sort order of the customers.  See Sorting documentation for examples of using multiple values and sorting by ascending and descending. (optional)</param>
        /// <param name="expand">The object expansion to perform on the result.  See documentation for examples (optional)</param>
        /// <returns>ApiResponse of GiftCertificatesResponse</returns>
        public ApiResponse<GiftCertificatesResponse> GetGiftCertificatesByQueryWithHttpInfo (GiftCertificateQuery giftCertificateQuery, int? limit = default(int?), int? offset = default(int?), string since = default(string), string sort = default(string), string expand = default(string))
        {
            // verify the required parameter 'giftCertificateQuery' is set
            if (giftCertificateQuery == null)
                throw new ApiException(400, "Missing required parameter 'giftCertificateQuery' when calling GiftCertificateApi->GetGiftCertificatesByQuery");

            var localVarPath = "/gift_certificate/gift_certificates/query";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "_limit", limit)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "_offset", offset)); // query parameter
            if (since != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "_since", since)); // query parameter
            if (sort != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "_sort", sort)); // query parameter
            if (expand != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "_expand", expand)); // query parameter
            if (giftCertificateQuery != null && giftCertificateQuery.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(giftCertificateQuery); // http body (model) parameter
            }
            else
            {
                localVarPostBody = giftCertificateQuery; // byte array
            }

            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetGiftCertificatesByQuery", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GiftCertificatesResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (GiftCertificatesResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GiftCertificatesResponse)));
        }

        /// <summary>
        /// Retrieve gift certificates by query Retrieves gift certificates from the account.  If no parameters are specified, all gift certificates will be returned.  You will need to make multiple API calls in order to retrieve the entire result set since this API performs result set pagination. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="giftCertificateQuery">Gift certificates query</param>
        /// <param name="limit">The maximum number of records to return on this one API call. (Max 200) (optional, default to 100)</param>
        /// <param name="offset">Pagination of the record set.  Offset is a zero based index. (optional, default to 0)</param>
        /// <param name="since">Fetch customers that have been created/modified since this date/time. (optional)</param>
        /// <param name="sort">The sort order of the customers.  See Sorting documentation for examples of using multiple values and sorting by ascending and descending. (optional)</param>
        /// <param name="expand">The object expansion to perform on the result.  See documentation for examples (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of GiftCertificatesResponse</returns>
        public async System.Threading.Tasks.Task<GiftCertificatesResponse> GetGiftCertificatesByQueryAsync (GiftCertificateQuery giftCertificateQuery, int? limit = default(int?), int? offset = default(int?), string since = default(string), string sort = default(string), string expand = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<GiftCertificatesResponse> localVarResponse = await GetGiftCertificatesByQueryWithHttpInfoAsync(giftCertificateQuery, limit, offset, since, sort, expand, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieve gift certificates by query Retrieves gift certificates from the account.  If no parameters are specified, all gift certificates will be returned.  You will need to make multiple API calls in order to retrieve the entire result set since this API performs result set pagination. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="giftCertificateQuery">Gift certificates query</param>
        /// <param name="limit">The maximum number of records to return on this one API call. (Max 200) (optional, default to 100)</param>
        /// <param name="offset">Pagination of the record set.  Offset is a zero based index. (optional, default to 0)</param>
        /// <param name="since">Fetch customers that have been created/modified since this date/time. (optional)</param>
        /// <param name="sort">The sort order of the customers.  See Sorting documentation for examples of using multiple values and sorting by ascending and descending. (optional)</param>
        /// <param name="expand">The object expansion to perform on the result.  See documentation for examples (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (GiftCertificatesResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GiftCertificatesResponse>> GetGiftCertificatesByQueryWithHttpInfoAsync (GiftCertificateQuery giftCertificateQuery, int? limit = default(int?), int? offset = default(int?), string since = default(string), string sort = default(string), string expand = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'giftCertificateQuery' is set
            if (giftCertificateQuery == null)
                throw new ApiException(400, "Missing required parameter 'giftCertificateQuery' when calling GiftCertificateApi->GetGiftCertificatesByQuery");

            var localVarPath = "/gift_certificate/gift_certificates/query";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "_limit", limit)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "_offset", offset)); // query parameter
            if (since != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "_since", since)); // query parameter
            if (sort != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "_sort", sort)); // query parameter
            if (expand != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "_expand", expand)); // query parameter
            if (giftCertificateQuery != null && giftCertificateQuery.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(giftCertificateQuery); // http body (model) parameter
            }
            else
            {
                localVarPostBody = giftCertificateQuery; // byte array
            }

            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetGiftCertificatesByQuery", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GiftCertificatesResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (GiftCertificatesResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GiftCertificatesResponse)));
        }

        /// <summary>
        /// Update a gift certificate Update a gift certificate for this merchant account. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="giftCertificateOid"></param>
        /// <param name="giftCertificate">Gift certificate</param>
        /// <returns>GiftCertificateResponse</returns>
        public GiftCertificateResponse UpdateGiftCertificate (int giftCertificateOid, GiftCertificate giftCertificate)
        {
             ApiResponse<GiftCertificateResponse> localVarResponse = UpdateGiftCertificateWithHttpInfo(giftCertificateOid, giftCertificate);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update a gift certificate Update a gift certificate for this merchant account. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="giftCertificateOid"></param>
        /// <param name="giftCertificate">Gift certificate</param>
        /// <returns>ApiResponse of GiftCertificateResponse</returns>
        public ApiResponse<GiftCertificateResponse> UpdateGiftCertificateWithHttpInfo (int giftCertificateOid, GiftCertificate giftCertificate)
        {
            // verify the required parameter 'giftCertificateOid' is set
            if (giftCertificateOid == null)
                throw new ApiException(400, "Missing required parameter 'giftCertificateOid' when calling GiftCertificateApi->UpdateGiftCertificate");
            // verify the required parameter 'giftCertificate' is set
            if (giftCertificate == null)
                throw new ApiException(400, "Missing required parameter 'giftCertificate' when calling GiftCertificateApi->UpdateGiftCertificate");

            var localVarPath = "/gift_certificate/gift_certificates/{gift_certificate_oid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (giftCertificateOid != null) localVarPathParams.Add("gift_certificate_oid", this.Configuration.ApiClient.ParameterToString(giftCertificateOid)); // path parameter
            if (giftCertificate != null && giftCertificate.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(giftCertificate); // http body (model) parameter
            }
            else
            {
                localVarPostBody = giftCertificate; // byte array
            }

            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateGiftCertificate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GiftCertificateResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (GiftCertificateResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GiftCertificateResponse)));
        }

        /// <summary>
        /// Update a gift certificate Update a gift certificate for this merchant account. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="giftCertificateOid"></param>
        /// <param name="giftCertificate">Gift certificate</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of GiftCertificateResponse</returns>
        public async System.Threading.Tasks.Task<GiftCertificateResponse> UpdateGiftCertificateAsync (int giftCertificateOid, GiftCertificate giftCertificate, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<GiftCertificateResponse> localVarResponse = await UpdateGiftCertificateWithHttpInfoAsync(giftCertificateOid, giftCertificate, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update a gift certificate Update a gift certificate for this merchant account. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="giftCertificateOid"></param>
        /// <param name="giftCertificate">Gift certificate</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (GiftCertificateResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GiftCertificateResponse>> UpdateGiftCertificateWithHttpInfoAsync (int giftCertificateOid, GiftCertificate giftCertificate, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'giftCertificateOid' is set
            if (giftCertificateOid == null)
                throw new ApiException(400, "Missing required parameter 'giftCertificateOid' when calling GiftCertificateApi->UpdateGiftCertificate");
            // verify the required parameter 'giftCertificate' is set
            if (giftCertificate == null)
                throw new ApiException(400, "Missing required parameter 'giftCertificate' when calling GiftCertificateApi->UpdateGiftCertificate");

            var localVarPath = "/gift_certificate/gift_certificates/{gift_certificate_oid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (giftCertificateOid != null) localVarPathParams.Add("gift_certificate_oid", this.Configuration.ApiClient.ParameterToString(giftCertificateOid)); // path parameter
            if (giftCertificate != null && giftCertificate.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(giftCertificate); // http body (model) parameter
            }
            else
            {
                localVarPostBody = giftCertificate; // byte array
            }

            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateGiftCertificate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GiftCertificateResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (GiftCertificateResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GiftCertificateResponse)));
        }

    }
}
