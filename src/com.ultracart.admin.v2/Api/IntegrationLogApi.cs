/* 
 * UltraCart Rest API V2
 *
 * UltraCart REST API Version 2
 *
 * OpenAPI spec version: 2.0.0
 * Contact: support@ultracart.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using com.ultracart.admin.v2.Client;
using com.ultracart.admin.v2.Model;

namespace com.ultracart.admin.v2.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IIntegrationLogApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Retrieve an integration log
        /// </summary>
        /// <remarks>
        /// Retrieve an integration logs from the account based identifiers 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pk"></param>
        /// <param name="sk"></param>
        /// <returns>IntegrationLogResponse</returns>
        IntegrationLogResponse GetIntegrationLog (string pk, string sk);

        /// <summary>
        /// Retrieve an integration log
        /// </summary>
        /// <remarks>
        /// Retrieve an integration logs from the account based identifiers 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pk"></param>
        /// <param name="sk"></param>
        /// <returns>ApiResponse of IntegrationLogResponse</returns>
        ApiResponse<IntegrationLogResponse> GetIntegrationLogWithHttpInfo (string pk, string sk);
        /// <summary>
        /// Retrieve an integration log file
        /// </summary>
        /// <remarks>
        /// Retrieve an integration log file from the account based identifiers 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pk"></param>
        /// <param name="sk"></param>
        /// <param name="uuid"></param>
        /// <returns>System.IO.Stream</returns>
        System.IO.Stream GetIntegrationLogFile (string pk, string sk, string uuid);

        /// <summary>
        /// Retrieve an integration log file
        /// </summary>
        /// <remarks>
        /// Retrieve an integration log file from the account based identifiers 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pk"></param>
        /// <param name="sk"></param>
        /// <param name="uuid"></param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        ApiResponse<System.IO.Stream> GetIntegrationLogFileWithHttpInfo (string pk, string sk, string uuid);
        /// <summary>
        /// Retrieve an integration log file converted to PDF
        /// </summary>
        /// <remarks>
        /// Retrieve an integration log file from the account based identifiers 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pk"></param>
        /// <param name="sk"></param>
        /// <param name="uuid"></param>
        /// <returns>System.IO.Stream</returns>
        System.IO.Stream GetIntegrationLogFilePdf (string pk, string sk, string uuid);

        /// <summary>
        /// Retrieve an integration log file converted to PDF
        /// </summary>
        /// <remarks>
        /// Retrieve an integration log file from the account based identifiers 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pk"></param>
        /// <param name="sk"></param>
        /// <param name="uuid"></param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        ApiResponse<System.IO.Stream> GetIntegrationLogFilePdfWithHttpInfo (string pk, string sk, string uuid);
        /// <summary>
        /// Retrieve integration log summaries
        /// </summary>
        /// <remarks>
        /// Retrieves a set of integration log summaries from the account based on a query object. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="integrationLogSummariesQuery">Integration log summaries query</param>
        /// <returns>IntegrationLogSummaryQueryResponse</returns>
        IntegrationLogSummaryQueryResponse GetIntegrationLogSummariesQuery (IntegrationLogSummaryQueryRequest integrationLogSummariesQuery);

        /// <summary>
        /// Retrieve integration log summaries
        /// </summary>
        /// <remarks>
        /// Retrieves a set of integration log summaries from the account based on a query object. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="integrationLogSummariesQuery">Integration log summaries query</param>
        /// <returns>ApiResponse of IntegrationLogSummaryQueryResponse</returns>
        ApiResponse<IntegrationLogSummaryQueryResponse> GetIntegrationLogSummariesQueryWithHttpInfo (IntegrationLogSummaryQueryRequest integrationLogSummariesQuery);
        /// <summary>
        /// Retrieve integration logs
        /// </summary>
        /// <remarks>
        /// Retrieves a set of integration logs from the account based on a query object. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="integrationLogQuery">Integration log query</param>
        /// <param name="limit">The maximum number of records to return on this one API call. (Default 100, Max 500) (optional, default to 100)</param>
        /// <param name="offset">Pagination of the record set.  Offset is a zero based index. (optional, default to 0)</param>
        /// <param name="sort">The sort order of the items.  See Sorting documentation for examples of using multiple values and sorting by ascending and descending. (optional)</param>
        /// <returns>IntegrationLogQueryResponse</returns>
        IntegrationLogQueryResponse GetIntegrationLogsQuery (IntegrationLogQueryRequest integrationLogQuery, int? limit = null, int? offset = null, string sort = null);

        /// <summary>
        /// Retrieve integration logs
        /// </summary>
        /// <remarks>
        /// Retrieves a set of integration logs from the account based on a query object. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="integrationLogQuery">Integration log query</param>
        /// <param name="limit">The maximum number of records to return on this one API call. (Default 100, Max 500) (optional, default to 100)</param>
        /// <param name="offset">Pagination of the record set.  Offset is a zero based index. (optional, default to 0)</param>
        /// <param name="sort">The sort order of the items.  See Sorting documentation for examples of using multiple values and sorting by ascending and descending. (optional)</param>
        /// <returns>ApiResponse of IntegrationLogQueryResponse</returns>
        ApiResponse<IntegrationLogQueryResponse> GetIntegrationLogsQueryWithHttpInfo (IntegrationLogQueryRequest integrationLogQuery, int? limit = null, int? offset = null, string sort = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Retrieve an integration log
        /// </summary>
        /// <remarks>
        /// Retrieve an integration logs from the account based identifiers 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pk"></param>
        /// <param name="sk"></param>
        /// <returns>Task of IntegrationLogResponse</returns>
        System.Threading.Tasks.Task<IntegrationLogResponse> GetIntegrationLogAsync (string pk, string sk);

        /// <summary>
        /// Retrieve an integration log
        /// </summary>
        /// <remarks>
        /// Retrieve an integration logs from the account based identifiers 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pk"></param>
        /// <param name="sk"></param>
        /// <returns>Task of ApiResponse (IntegrationLogResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<IntegrationLogResponse>> GetIntegrationLogAsyncWithHttpInfo (string pk, string sk);
        /// <summary>
        /// Retrieve an integration log file
        /// </summary>
        /// <remarks>
        /// Retrieve an integration log file from the account based identifiers 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pk"></param>
        /// <param name="sk"></param>
        /// <param name="uuid"></param>
        /// <returns>Task of System.IO.Stream</returns>
        System.Threading.Tasks.Task<System.IO.Stream> GetIntegrationLogFileAsync (string pk, string sk, string uuid);

        /// <summary>
        /// Retrieve an integration log file
        /// </summary>
        /// <remarks>
        /// Retrieve an integration log file from the account based identifiers 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pk"></param>
        /// <param name="sk"></param>
        /// <param name="uuid"></param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> GetIntegrationLogFileAsyncWithHttpInfo (string pk, string sk, string uuid);
        /// <summary>
        /// Retrieve an integration log file converted to PDF
        /// </summary>
        /// <remarks>
        /// Retrieve an integration log file from the account based identifiers 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pk"></param>
        /// <param name="sk"></param>
        /// <param name="uuid"></param>
        /// <returns>Task of System.IO.Stream</returns>
        System.Threading.Tasks.Task<System.IO.Stream> GetIntegrationLogFilePdfAsync (string pk, string sk, string uuid);

        /// <summary>
        /// Retrieve an integration log file converted to PDF
        /// </summary>
        /// <remarks>
        /// Retrieve an integration log file from the account based identifiers 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pk"></param>
        /// <param name="sk"></param>
        /// <param name="uuid"></param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> GetIntegrationLogFilePdfAsyncWithHttpInfo (string pk, string sk, string uuid);
        /// <summary>
        /// Retrieve integration log summaries
        /// </summary>
        /// <remarks>
        /// Retrieves a set of integration log summaries from the account based on a query object. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="integrationLogSummariesQuery">Integration log summaries query</param>
        /// <returns>Task of IntegrationLogSummaryQueryResponse</returns>
        System.Threading.Tasks.Task<IntegrationLogSummaryQueryResponse> GetIntegrationLogSummariesQueryAsync (IntegrationLogSummaryQueryRequest integrationLogSummariesQuery);

        /// <summary>
        /// Retrieve integration log summaries
        /// </summary>
        /// <remarks>
        /// Retrieves a set of integration log summaries from the account based on a query object. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="integrationLogSummariesQuery">Integration log summaries query</param>
        /// <returns>Task of ApiResponse (IntegrationLogSummaryQueryResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<IntegrationLogSummaryQueryResponse>> GetIntegrationLogSummariesQueryAsyncWithHttpInfo (IntegrationLogSummaryQueryRequest integrationLogSummariesQuery);
        /// <summary>
        /// Retrieve integration logs
        /// </summary>
        /// <remarks>
        /// Retrieves a set of integration logs from the account based on a query object. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="integrationLogQuery">Integration log query</param>
        /// <param name="limit">The maximum number of records to return on this one API call. (Default 100, Max 500) (optional, default to 100)</param>
        /// <param name="offset">Pagination of the record set.  Offset is a zero based index. (optional, default to 0)</param>
        /// <param name="sort">The sort order of the items.  See Sorting documentation for examples of using multiple values and sorting by ascending and descending. (optional)</param>
        /// <returns>Task of IntegrationLogQueryResponse</returns>
        System.Threading.Tasks.Task<IntegrationLogQueryResponse> GetIntegrationLogsQueryAsync (IntegrationLogQueryRequest integrationLogQuery, int? limit = null, int? offset = null, string sort = null);

        /// <summary>
        /// Retrieve integration logs
        /// </summary>
        /// <remarks>
        /// Retrieves a set of integration logs from the account based on a query object. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="integrationLogQuery">Integration log query</param>
        /// <param name="limit">The maximum number of records to return on this one API call. (Default 100, Max 500) (optional, default to 100)</param>
        /// <param name="offset">Pagination of the record set.  Offset is a zero based index. (optional, default to 0)</param>
        /// <param name="sort">The sort order of the items.  See Sorting documentation for examples of using multiple values and sorting by ascending and descending. (optional)</param>
        /// <returns>Task of ApiResponse (IntegrationLogQueryResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<IntegrationLogQueryResponse>> GetIntegrationLogsQueryAsyncWithHttpInfo (IntegrationLogQueryRequest integrationLogQuery, int? limit = null, int? offset = null, string sort = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class IntegrationLogApi : IIntegrationLogApi
    {
        private com.ultracart.admin.v2.Client.ExceptionFactory _exceptionFactory = (name, response) => null;
    
        /// <summary>
        /// Initializes a new instance of the <see cref="IntegrationLogApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public IntegrationLogApi(com.ultracart.admin.v2.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = com.ultracart.admin.v2.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = com.ultracart.admin.v2.Client.Configuration.DefaultExceptionFactory;
        }


        /// <summary>
        /// Initializes a new instance of the <see cref="IntegrationLogApi"/> class
        /// using a simple key string and optional version, which you will
        /// almost always want to use the default
        /// </summary>
        /// <param name="SimpleKey">A simple key.  See https://ultracart.atlassian.net/wiki/spaces/ucdoc/pages/38688545/API+Simple+Key</param>
        /// <returns></returns>
        public IntegrationLogApi(string SimpleKey)
        {
            Configuration configuration = new Configuration();
            configuration.ApiKey.Add("x-ultracart-simple-key", SimpleKey);
            configuration.DefaultHeader.Add("X-UltraCart-Api-Version", "2017-03-01");
            this.Configuration = configuration;
            ExceptionFactory = com.ultracart.admin.v2.Client.Configuration.DefaultExceptionFactory;
        }


        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public com.ultracart.admin.v2.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public com.ultracart.admin.v2.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Retrieve an integration log Retrieve an integration logs from the account based identifiers 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pk"></param>
        /// <param name="sk"></param>
        /// <returns>IntegrationLogResponse</returns>
        public IntegrationLogResponse GetIntegrationLog (string pk, string sk)
        {
             ApiResponse<IntegrationLogResponse> localVarResponse = GetIntegrationLogWithHttpInfo(pk, sk);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve an integration log Retrieve an integration logs from the account based identifiers 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pk"></param>
        /// <param name="sk"></param>
        /// <returns>ApiResponse of IntegrationLogResponse</returns>
        public ApiResponse< IntegrationLogResponse > GetIntegrationLogWithHttpInfo (string pk, string sk)
        {
            // verify the required parameter 'pk' is set
            if (pk == null)
                throw new ApiException(400, "Missing required parameter 'pk' when calling IntegrationLogApi->GetIntegrationLog");
            // verify the required parameter 'sk' is set
            if (sk == null)
                throw new ApiException(400, "Missing required parameter 'sk' when calling IntegrationLogApi->GetIntegrationLog");

            var localVarPath = "/integration_log/query/{pk}/{sk}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pk != null) localVarPathParams.Add("pk", this.Configuration.ApiClient.ParameterToString(pk)); // path parameter
            if (sk != null) localVarPathParams.Add("sk", this.Configuration.ApiClient.ParameterToString(sk)); // path parameter

            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetIntegrationLog", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<IntegrationLogResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (IntegrationLogResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(IntegrationLogResponse)));
        }

        /// <summary>
        /// Retrieve an integration log Retrieve an integration logs from the account based identifiers 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pk"></param>
        /// <param name="sk"></param>
        /// <returns>Task of IntegrationLogResponse</returns>
        public async System.Threading.Tasks.Task<IntegrationLogResponse> GetIntegrationLogAsync (string pk, string sk)
        {
             ApiResponse<IntegrationLogResponse> localVarResponse = await GetIntegrationLogAsyncWithHttpInfo(pk, sk);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieve an integration log Retrieve an integration logs from the account based identifiers 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pk"></param>
        /// <param name="sk"></param>
        /// <returns>Task of ApiResponse (IntegrationLogResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<IntegrationLogResponse>> GetIntegrationLogAsyncWithHttpInfo (string pk, string sk)
        {
            // verify the required parameter 'pk' is set
            if (pk == null)
                throw new ApiException(400, "Missing required parameter 'pk' when calling IntegrationLogApi->GetIntegrationLog");
            // verify the required parameter 'sk' is set
            if (sk == null)
                throw new ApiException(400, "Missing required parameter 'sk' when calling IntegrationLogApi->GetIntegrationLog");

            var localVarPath = "/integration_log/query/{pk}/{sk}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pk != null) localVarPathParams.Add("pk", this.Configuration.ApiClient.ParameterToString(pk)); // path parameter
            if (sk != null) localVarPathParams.Add("sk", this.Configuration.ApiClient.ParameterToString(sk)); // path parameter

            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetIntegrationLog", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<IntegrationLogResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (IntegrationLogResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(IntegrationLogResponse)));
        }

        /// <summary>
        /// Retrieve an integration log file Retrieve an integration log file from the account based identifiers 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pk"></param>
        /// <param name="sk"></param>
        /// <param name="uuid"></param>
        /// <returns>System.IO.Stream</returns>
        public System.IO.Stream GetIntegrationLogFile (string pk, string sk, string uuid)
        {
             ApiResponse<System.IO.Stream> localVarResponse = GetIntegrationLogFileWithHttpInfo(pk, sk, uuid);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve an integration log file Retrieve an integration log file from the account based identifiers 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pk"></param>
        /// <param name="sk"></param>
        /// <param name="uuid"></param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        public ApiResponse< System.IO.Stream > GetIntegrationLogFileWithHttpInfo (string pk, string sk, string uuid)
        {
            // verify the required parameter 'pk' is set
            if (pk == null)
                throw new ApiException(400, "Missing required parameter 'pk' when calling IntegrationLogApi->GetIntegrationLogFile");
            // verify the required parameter 'sk' is set
            if (sk == null)
                throw new ApiException(400, "Missing required parameter 'sk' when calling IntegrationLogApi->GetIntegrationLogFile");
            // verify the required parameter 'uuid' is set
            if (uuid == null)
                throw new ApiException(400, "Missing required parameter 'uuid' when calling IntegrationLogApi->GetIntegrationLogFile");

            var localVarPath = "/integration_log/query/{pk}/{sk}/{uuid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/octet-stream"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pk != null) localVarPathParams.Add("pk", this.Configuration.ApiClient.ParameterToString(pk)); // path parameter
            if (sk != null) localVarPathParams.Add("sk", this.Configuration.ApiClient.ParameterToString(sk)); // path parameter
            if (uuid != null) localVarPathParams.Add("uuid", this.Configuration.ApiClient.ParameterToString(uuid)); // path parameter

            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetIntegrationLogFile", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (System.IO.Stream) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
        }

        /// <summary>
        /// Retrieve an integration log file Retrieve an integration log file from the account based identifiers 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pk"></param>
        /// <param name="sk"></param>
        /// <param name="uuid"></param>
        /// <returns>Task of System.IO.Stream</returns>
        public async System.Threading.Tasks.Task<System.IO.Stream> GetIntegrationLogFileAsync (string pk, string sk, string uuid)
        {
             ApiResponse<System.IO.Stream> localVarResponse = await GetIntegrationLogFileAsyncWithHttpInfo(pk, sk, uuid);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieve an integration log file Retrieve an integration log file from the account based identifiers 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pk"></param>
        /// <param name="sk"></param>
        /// <param name="uuid"></param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> GetIntegrationLogFileAsyncWithHttpInfo (string pk, string sk, string uuid)
        {
            // verify the required parameter 'pk' is set
            if (pk == null)
                throw new ApiException(400, "Missing required parameter 'pk' when calling IntegrationLogApi->GetIntegrationLogFile");
            // verify the required parameter 'sk' is set
            if (sk == null)
                throw new ApiException(400, "Missing required parameter 'sk' when calling IntegrationLogApi->GetIntegrationLogFile");
            // verify the required parameter 'uuid' is set
            if (uuid == null)
                throw new ApiException(400, "Missing required parameter 'uuid' when calling IntegrationLogApi->GetIntegrationLogFile");

            var localVarPath = "/integration_log/query/{pk}/{sk}/{uuid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/octet-stream"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pk != null) localVarPathParams.Add("pk", this.Configuration.ApiClient.ParameterToString(pk)); // path parameter
            if (sk != null) localVarPathParams.Add("sk", this.Configuration.ApiClient.ParameterToString(sk)); // path parameter
            if (uuid != null) localVarPathParams.Add("uuid", this.Configuration.ApiClient.ParameterToString(uuid)); // path parameter

            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetIntegrationLogFile", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (System.IO.Stream) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
        }

        /// <summary>
        /// Retrieve an integration log file converted to PDF Retrieve an integration log file from the account based identifiers 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pk"></param>
        /// <param name="sk"></param>
        /// <param name="uuid"></param>
        /// <returns>System.IO.Stream</returns>
        public System.IO.Stream GetIntegrationLogFilePdf (string pk, string sk, string uuid)
        {
             ApiResponse<System.IO.Stream> localVarResponse = GetIntegrationLogFilePdfWithHttpInfo(pk, sk, uuid);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve an integration log file converted to PDF Retrieve an integration log file from the account based identifiers 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pk"></param>
        /// <param name="sk"></param>
        /// <param name="uuid"></param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        public ApiResponse< System.IO.Stream > GetIntegrationLogFilePdfWithHttpInfo (string pk, string sk, string uuid)
        {
            // verify the required parameter 'pk' is set
            if (pk == null)
                throw new ApiException(400, "Missing required parameter 'pk' when calling IntegrationLogApi->GetIntegrationLogFilePdf");
            // verify the required parameter 'sk' is set
            if (sk == null)
                throw new ApiException(400, "Missing required parameter 'sk' when calling IntegrationLogApi->GetIntegrationLogFilePdf");
            // verify the required parameter 'uuid' is set
            if (uuid == null)
                throw new ApiException(400, "Missing required parameter 'uuid' when calling IntegrationLogApi->GetIntegrationLogFilePdf");

            var localVarPath = "/integration_log/query/{pk}/{sk}/{uuid}/pdf";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/octet-stream"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pk != null) localVarPathParams.Add("pk", this.Configuration.ApiClient.ParameterToString(pk)); // path parameter
            if (sk != null) localVarPathParams.Add("sk", this.Configuration.ApiClient.ParameterToString(sk)); // path parameter
            if (uuid != null) localVarPathParams.Add("uuid", this.Configuration.ApiClient.ParameterToString(uuid)); // path parameter

            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetIntegrationLogFilePdf", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (System.IO.Stream) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
        }

        /// <summary>
        /// Retrieve an integration log file converted to PDF Retrieve an integration log file from the account based identifiers 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pk"></param>
        /// <param name="sk"></param>
        /// <param name="uuid"></param>
        /// <returns>Task of System.IO.Stream</returns>
        public async System.Threading.Tasks.Task<System.IO.Stream> GetIntegrationLogFilePdfAsync (string pk, string sk, string uuid)
        {
             ApiResponse<System.IO.Stream> localVarResponse = await GetIntegrationLogFilePdfAsyncWithHttpInfo(pk, sk, uuid);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieve an integration log file converted to PDF Retrieve an integration log file from the account based identifiers 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pk"></param>
        /// <param name="sk"></param>
        /// <param name="uuid"></param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> GetIntegrationLogFilePdfAsyncWithHttpInfo (string pk, string sk, string uuid)
        {
            // verify the required parameter 'pk' is set
            if (pk == null)
                throw new ApiException(400, "Missing required parameter 'pk' when calling IntegrationLogApi->GetIntegrationLogFilePdf");
            // verify the required parameter 'sk' is set
            if (sk == null)
                throw new ApiException(400, "Missing required parameter 'sk' when calling IntegrationLogApi->GetIntegrationLogFilePdf");
            // verify the required parameter 'uuid' is set
            if (uuid == null)
                throw new ApiException(400, "Missing required parameter 'uuid' when calling IntegrationLogApi->GetIntegrationLogFilePdf");

            var localVarPath = "/integration_log/query/{pk}/{sk}/{uuid}/pdf";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/octet-stream"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pk != null) localVarPathParams.Add("pk", this.Configuration.ApiClient.ParameterToString(pk)); // path parameter
            if (sk != null) localVarPathParams.Add("sk", this.Configuration.ApiClient.ParameterToString(sk)); // path parameter
            if (uuid != null) localVarPathParams.Add("uuid", this.Configuration.ApiClient.ParameterToString(uuid)); // path parameter

            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetIntegrationLogFilePdf", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (System.IO.Stream) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
        }

        /// <summary>
        /// Retrieve integration log summaries Retrieves a set of integration log summaries from the account based on a query object. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="integrationLogSummariesQuery">Integration log summaries query</param>
        /// <returns>IntegrationLogSummaryQueryResponse</returns>
        public IntegrationLogSummaryQueryResponse GetIntegrationLogSummariesQuery (IntegrationLogSummaryQueryRequest integrationLogSummariesQuery)
        {
             ApiResponse<IntegrationLogSummaryQueryResponse> localVarResponse = GetIntegrationLogSummariesQueryWithHttpInfo(integrationLogSummariesQuery);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve integration log summaries Retrieves a set of integration log summaries from the account based on a query object. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="integrationLogSummariesQuery">Integration log summaries query</param>
        /// <returns>ApiResponse of IntegrationLogSummaryQueryResponse</returns>
        public ApiResponse< IntegrationLogSummaryQueryResponse > GetIntegrationLogSummariesQueryWithHttpInfo (IntegrationLogSummaryQueryRequest integrationLogSummariesQuery)
        {
            // verify the required parameter 'integrationLogSummariesQuery' is set
            if (integrationLogSummariesQuery == null)
                throw new ApiException(400, "Missing required parameter 'integrationLogSummariesQuery' when calling IntegrationLogApi->GetIntegrationLogSummariesQuery");

            var localVarPath = "/integration_log/summary/query";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (integrationLogSummariesQuery != null && integrationLogSummariesQuery.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(integrationLogSummariesQuery); // http body (model) parameter
            }
            else
            {
                localVarPostBody = integrationLogSummariesQuery; // byte array
            }

            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetIntegrationLogSummariesQuery", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<IntegrationLogSummaryQueryResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (IntegrationLogSummaryQueryResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(IntegrationLogSummaryQueryResponse)));
        }

        /// <summary>
        /// Retrieve integration log summaries Retrieves a set of integration log summaries from the account based on a query object. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="integrationLogSummariesQuery">Integration log summaries query</param>
        /// <returns>Task of IntegrationLogSummaryQueryResponse</returns>
        public async System.Threading.Tasks.Task<IntegrationLogSummaryQueryResponse> GetIntegrationLogSummariesQueryAsync (IntegrationLogSummaryQueryRequest integrationLogSummariesQuery)
        {
             ApiResponse<IntegrationLogSummaryQueryResponse> localVarResponse = await GetIntegrationLogSummariesQueryAsyncWithHttpInfo(integrationLogSummariesQuery);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieve integration log summaries Retrieves a set of integration log summaries from the account based on a query object. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="integrationLogSummariesQuery">Integration log summaries query</param>
        /// <returns>Task of ApiResponse (IntegrationLogSummaryQueryResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<IntegrationLogSummaryQueryResponse>> GetIntegrationLogSummariesQueryAsyncWithHttpInfo (IntegrationLogSummaryQueryRequest integrationLogSummariesQuery)
        {
            // verify the required parameter 'integrationLogSummariesQuery' is set
            if (integrationLogSummariesQuery == null)
                throw new ApiException(400, "Missing required parameter 'integrationLogSummariesQuery' when calling IntegrationLogApi->GetIntegrationLogSummariesQuery");

            var localVarPath = "/integration_log/summary/query";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (integrationLogSummariesQuery != null && integrationLogSummariesQuery.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(integrationLogSummariesQuery); // http body (model) parameter
            }
            else
            {
                localVarPostBody = integrationLogSummariesQuery; // byte array
            }

            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetIntegrationLogSummariesQuery", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<IntegrationLogSummaryQueryResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (IntegrationLogSummaryQueryResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(IntegrationLogSummaryQueryResponse)));
        }

        /// <summary>
        /// Retrieve integration logs Retrieves a set of integration logs from the account based on a query object. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="integrationLogQuery">Integration log query</param>
        /// <param name="limit">The maximum number of records to return on this one API call. (Default 100, Max 500) (optional, default to 100)</param>
        /// <param name="offset">Pagination of the record set.  Offset is a zero based index. (optional, default to 0)</param>
        /// <param name="sort">The sort order of the items.  See Sorting documentation for examples of using multiple values and sorting by ascending and descending. (optional)</param>
        /// <returns>IntegrationLogQueryResponse</returns>
        public IntegrationLogQueryResponse GetIntegrationLogsQuery (IntegrationLogQueryRequest integrationLogQuery, int? limit = null, int? offset = null, string sort = null)
        {
             ApiResponse<IntegrationLogQueryResponse> localVarResponse = GetIntegrationLogsQueryWithHttpInfo(integrationLogQuery, limit, offset, sort);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve integration logs Retrieves a set of integration logs from the account based on a query object. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="integrationLogQuery">Integration log query</param>
        /// <param name="limit">The maximum number of records to return on this one API call. (Default 100, Max 500) (optional, default to 100)</param>
        /// <param name="offset">Pagination of the record set.  Offset is a zero based index. (optional, default to 0)</param>
        /// <param name="sort">The sort order of the items.  See Sorting documentation for examples of using multiple values and sorting by ascending and descending. (optional)</param>
        /// <returns>ApiResponse of IntegrationLogQueryResponse</returns>
        public ApiResponse< IntegrationLogQueryResponse > GetIntegrationLogsQueryWithHttpInfo (IntegrationLogQueryRequest integrationLogQuery, int? limit = null, int? offset = null, string sort = null)
        {
            // verify the required parameter 'integrationLogQuery' is set
            if (integrationLogQuery == null)
                throw new ApiException(400, "Missing required parameter 'integrationLogQuery' when calling IntegrationLogApi->GetIntegrationLogsQuery");

            var localVarPath = "/integration_log/query";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "_limit", limit)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "_offset", offset)); // query parameter
            if (sort != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "_sort", sort)); // query parameter
            if (integrationLogQuery != null && integrationLogQuery.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(integrationLogQuery); // http body (model) parameter
            }
            else
            {
                localVarPostBody = integrationLogQuery; // byte array
            }

            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetIntegrationLogsQuery", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<IntegrationLogQueryResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (IntegrationLogQueryResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(IntegrationLogQueryResponse)));
        }

        /// <summary>
        /// Retrieve integration logs Retrieves a set of integration logs from the account based on a query object. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="integrationLogQuery">Integration log query</param>
        /// <param name="limit">The maximum number of records to return on this one API call. (Default 100, Max 500) (optional, default to 100)</param>
        /// <param name="offset">Pagination of the record set.  Offset is a zero based index. (optional, default to 0)</param>
        /// <param name="sort">The sort order of the items.  See Sorting documentation for examples of using multiple values and sorting by ascending and descending. (optional)</param>
        /// <returns>Task of IntegrationLogQueryResponse</returns>
        public async System.Threading.Tasks.Task<IntegrationLogQueryResponse> GetIntegrationLogsQueryAsync (IntegrationLogQueryRequest integrationLogQuery, int? limit = null, int? offset = null, string sort = null)
        {
             ApiResponse<IntegrationLogQueryResponse> localVarResponse = await GetIntegrationLogsQueryAsyncWithHttpInfo(integrationLogQuery, limit, offset, sort);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieve integration logs Retrieves a set of integration logs from the account based on a query object. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="integrationLogQuery">Integration log query</param>
        /// <param name="limit">The maximum number of records to return on this one API call. (Default 100, Max 500) (optional, default to 100)</param>
        /// <param name="offset">Pagination of the record set.  Offset is a zero based index. (optional, default to 0)</param>
        /// <param name="sort">The sort order of the items.  See Sorting documentation for examples of using multiple values and sorting by ascending and descending. (optional)</param>
        /// <returns>Task of ApiResponse (IntegrationLogQueryResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<IntegrationLogQueryResponse>> GetIntegrationLogsQueryAsyncWithHttpInfo (IntegrationLogQueryRequest integrationLogQuery, int? limit = null, int? offset = null, string sort = null)
        {
            // verify the required parameter 'integrationLogQuery' is set
            if (integrationLogQuery == null)
                throw new ApiException(400, "Missing required parameter 'integrationLogQuery' when calling IntegrationLogApi->GetIntegrationLogsQuery");

            var localVarPath = "/integration_log/query";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "_limit", limit)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "_offset", offset)); // query parameter
            if (sort != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "_sort", sort)); // query parameter
            if (integrationLogQuery != null && integrationLogQuery.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(integrationLogQuery); // http body (model) parameter
            }
            else
            {
                localVarPostBody = integrationLogQuery; // byte array
            }

            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetIntegrationLogsQuery", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<IntegrationLogQueryResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (IntegrationLogQueryResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(IntegrationLogQueryResponse)));
        }

    }
}
