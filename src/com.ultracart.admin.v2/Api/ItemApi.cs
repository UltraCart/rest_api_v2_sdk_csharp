/*
 * UltraCart Rest API V2
 *
 * UltraCart REST API Version 2
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@ultracart.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Threading;
using RestSharp;
using com.ultracart.admin.v2.Client;
using com.ultracart.admin.v2.Model;

namespace com.ultracart.admin.v2.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IItemApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Delete a digital item, which is a file within the digital library, not an actual merchant item
        /// </summary>
        /// <remarks>
        /// Delete a digital item on the UltraCart account. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="digitalItemOid">The digital item oid to delete.</param>
        /// <returns></returns>
        void DeleteDigitalItem (int digitalItemOid);

        /// <summary>
        /// Delete a digital item, which is a file within the digital library, not an actual merchant item
        /// </summary>
        /// <remarks>
        /// Delete a digital item on the UltraCart account. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="digitalItemOid">The digital item oid to delete.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteDigitalItemWithHttpInfo (int digitalItemOid);
        /// <summary>
        /// Delete an item
        /// </summary>
        /// <remarks>
        /// Delete an item on the UltraCart account. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="merchantItemOid">The item oid to delete.</param>
        /// <returns></returns>
        void DeleteItem (int merchantItemOid);

        /// <summary>
        /// Delete an item
        /// </summary>
        /// <remarks>
        /// Delete an item on the UltraCart account. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="merchantItemOid">The item oid to delete.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteItemWithHttpInfo (int merchantItemOid);
        /// <summary>
        /// Delete a review
        /// </summary>
        /// <remarks>
        /// Delete an item review. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reviewOid">The review oid to delete.</param>
        /// <param name="merchantItemOid">The item oid the review is associated with.</param>
        /// <returns></returns>
        void DeleteReview (int reviewOid, int merchantItemOid);

        /// <summary>
        /// Delete a review
        /// </summary>
        /// <remarks>
        /// Delete an item review. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reviewOid">The review oid to delete.</param>
        /// <param name="merchantItemOid">The item oid the review is associated with.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteReviewWithHttpInfo (int reviewOid, int merchantItemOid);
        /// <summary>
        /// Retrieve a digital item from the digital library, which are digital files that may be attached to normal items
        /// </summary>
        /// <remarks>
        /// Retrieves a digital item (file information) from the account.  Be aware that these are not normal items that can be added to a shopping cart. Rather, they are digital files that may be associated with normal items. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="digitalItemOid">The digital item oid to retrieve.</param>
        /// <returns>ItemDigitalItemResponse</returns>
        ItemDigitalItemResponse GetDigitalItem (int digitalItemOid);

        /// <summary>
        /// Retrieve a digital item from the digital library, which are digital files that may be attached to normal items
        /// </summary>
        /// <remarks>
        /// Retrieves a digital item (file information) from the account.  Be aware that these are not normal items that can be added to a shopping cart. Rather, they are digital files that may be associated with normal items. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="digitalItemOid">The digital item oid to retrieve.</param>
        /// <returns>ApiResponse of ItemDigitalItemResponse</returns>
        ApiResponse<ItemDigitalItemResponse> GetDigitalItemWithHttpInfo (int digitalItemOid);
        /// <summary>
        /// Retrieve digital items from the digital library which are digital files that may be attached to normal items
        /// </summary>
        /// <remarks>
        /// Retrieves a group of digital items (file information) from the account.  If no parameters are specified, all digital items will be returned.  Be aware that these are not normal items that can be added to a shopping cart. Rather, they are digital files that may be associated with normal items.  You will need to make multiple API calls in order to retrieve the entire result set since this API performs result set pagination. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">The maximum number of records to return on this one API call. (Default 100, Max 2000) (optional, default to 100)</param>
        /// <param name="offset">Pagination of the record set.  Offset is a zero based index. (optional, default to 0)</param>
        /// <param name="since">Fetch items that have been created/modified since this date/time. (optional)</param>
        /// <param name="sort">The sort order of the items.  See Sorting documentation for examples of using multiple values and sorting by ascending and descending. (optional)</param>
        /// <param name="expand">The object expansion to perform on the result.  See documentation for examples (optional)</param>
        /// <param name="placeholders">Whether or not placeholder values should be returned in the result.  Useful for UIs that consume this REST API. (optional)</param>
        /// <returns>ItemDigitalItemsResponse</returns>
        ItemDigitalItemsResponse GetDigitalItems (int? limit = default(int?), int? offset = default(int?), string since = default(string), string sort = default(string), string expand = default(string), bool? placeholders = default(bool?));

        /// <summary>
        /// Retrieve digital items from the digital library which are digital files that may be attached to normal items
        /// </summary>
        /// <remarks>
        /// Retrieves a group of digital items (file information) from the account.  If no parameters are specified, all digital items will be returned.  Be aware that these are not normal items that can be added to a shopping cart. Rather, they are digital files that may be associated with normal items.  You will need to make multiple API calls in order to retrieve the entire result set since this API performs result set pagination. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">The maximum number of records to return on this one API call. (Default 100, Max 2000) (optional, default to 100)</param>
        /// <param name="offset">Pagination of the record set.  Offset is a zero based index. (optional, default to 0)</param>
        /// <param name="since">Fetch items that have been created/modified since this date/time. (optional)</param>
        /// <param name="sort">The sort order of the items.  See Sorting documentation for examples of using multiple values and sorting by ascending and descending. (optional)</param>
        /// <param name="expand">The object expansion to perform on the result.  See documentation for examples (optional)</param>
        /// <param name="placeholders">Whether or not placeholder values should be returned in the result.  Useful for UIs that consume this REST API. (optional)</param>
        /// <returns>ApiResponse of ItemDigitalItemsResponse</returns>
        ApiResponse<ItemDigitalItemsResponse> GetDigitalItemsWithHttpInfo (int? limit = default(int?), int? offset = default(int?), string since = default(string), string sort = default(string), string expand = default(string), bool? placeholders = default(bool?));
        /// <summary>
        /// Retrieves digital items from the digital library (which are digital files that may be attached to normal items) that having a matching external id
        /// </summary>
        /// <remarks>
        /// Retrieves digital items from the digital library (which are digital files that may be attached to normal items) that having a matching external id.  Be aware that these are not normal items that can be added to a shopping cart. Rather, they are digital files that may be associated with normal items. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="externalId">The external id to match against.</param>
        /// <returns>ItemDigitalItemsResponse</returns>
        ItemDigitalItemsResponse GetDigitalItemsByExternalId (string externalId);

        /// <summary>
        /// Retrieves digital items from the digital library (which are digital files that may be attached to normal items) that having a matching external id
        /// </summary>
        /// <remarks>
        /// Retrieves digital items from the digital library (which are digital files that may be attached to normal items) that having a matching external id.  Be aware that these are not normal items that can be added to a shopping cart. Rather, they are digital files that may be associated with normal items. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="externalId">The external id to match against.</param>
        /// <returns>ApiResponse of ItemDigitalItemsResponse</returns>
        ApiResponse<ItemDigitalItemsResponse> GetDigitalItemsByExternalIdWithHttpInfo (string externalId);
        /// <summary>
        /// Retrieve a list of item inventories.  This method may be called once every 15 minutes.  More than that will result in a 429 response.
        /// </summary>
        /// <remarks>
        /// Retrieve a list of item inventories.  This method may be called once every 15 minutes.  More than that will result in a 429 response. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ItemInventorySnapshotResponse</returns>
        ItemInventorySnapshotResponse GetInventorySnapshot ();

        /// <summary>
        /// Retrieve a list of item inventories.  This method may be called once every 15 minutes.  More than that will result in a 429 response.
        /// </summary>
        /// <remarks>
        /// Retrieve a list of item inventories.  This method may be called once every 15 minutes.  More than that will result in a 429 response. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of ItemInventorySnapshotResponse</returns>
        ApiResponse<ItemInventorySnapshotResponse> GetInventorySnapshotWithHttpInfo ();
        /// <summary>
        /// Retrieve an item
        /// </summary>
        /// <remarks>
        /// Retrieves a single item using the specified item oid. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="merchantItemOid">The item oid to retrieve.</param>
        /// <param name="expand">The object expansion to perform on the result.  See documentation for examples (optional)</param>
        /// <param name="placeholders">Whether or not placeholder values should be returned in the result.  Useful for UIs that consume this REST API. (optional)</param>
        /// <returns>ItemResponse</returns>
        ItemResponse GetItem (int merchantItemOid, string expand = default(string), bool? placeholders = default(bool?));

        /// <summary>
        /// Retrieve an item
        /// </summary>
        /// <remarks>
        /// Retrieves a single item using the specified item oid. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="merchantItemOid">The item oid to retrieve.</param>
        /// <param name="expand">The object expansion to perform on the result.  See documentation for examples (optional)</param>
        /// <param name="placeholders">Whether or not placeholder values should be returned in the result.  Useful for UIs that consume this REST API. (optional)</param>
        /// <returns>ApiResponse of ItemResponse</returns>
        ApiResponse<ItemResponse> GetItemWithHttpInfo (int merchantItemOid, string expand = default(string), bool? placeholders = default(bool?));
        /// <summary>
        /// Retrieve an item by item id
        /// </summary>
        /// <remarks>
        /// Retrieves a single item using the specified item id. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="merchantItemId">The item id to retrieve.</param>
        /// <param name="expand">The object expansion to perform on the result.  See documentation for examples (optional)</param>
        /// <param name="placeholders">Whether or not placeholder values should be returned in the result.  Useful for UIs that consume this REST API. (optional)</param>
        /// <returns>ItemResponse</returns>
        ItemResponse GetItemByMerchantItemId (string merchantItemId, string expand = default(string), bool? placeholders = default(bool?));

        /// <summary>
        /// Retrieve an item by item id
        /// </summary>
        /// <remarks>
        /// Retrieves a single item using the specified item id. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="merchantItemId">The item id to retrieve.</param>
        /// <param name="expand">The object expansion to perform on the result.  See documentation for examples (optional)</param>
        /// <param name="placeholders">Whether or not placeholder values should be returned in the result.  Useful for UIs that consume this REST API. (optional)</param>
        /// <returns>ApiResponse of ItemResponse</returns>
        ApiResponse<ItemResponse> GetItemByMerchantItemIdWithHttpInfo (string merchantItemId, string expand = default(string), bool? placeholders = default(bool?));
        /// <summary>
        /// Retrieve items
        /// </summary>
        /// <remarks>
        /// Retrieves a group of items from the account.  If no parameters are specified, all items will be returned.  You will need to make multiple API calls in order to retrieve the entire result set since this API performs result set pagination. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parentCategoryId">The parent category object id to retrieve items for.  Unspecified means all items on the account.  0 &#x3D; root (optional)</param>
        /// <param name="parentCategoryPath">The parent category path to retrieve items for.  Unspecified means all items on the account.  / &#x3D; root (optional)</param>
        /// <param name="limit">The maximum number of records to return on this one API call. (Default 100, Max 2000) (optional, default to 100)</param>
        /// <param name="offset">Pagination of the record set.  Offset is a zero based index. (optional, default to 0)</param>
        /// <param name="since">Fetch items that have been created/modified since this date/time. (optional)</param>
        /// <param name="sort">The sort order of the items.  See Sorting documentation for examples of using multiple values and sorting by ascending and descending. (optional)</param>
        /// <param name="expand">The object expansion to perform on the result.  See documentation for examples (optional)</param>
        /// <param name="placeholders">Whether or not placeholder values should be returned in the result.  Useful for UIs that consume this REST API. (optional)</param>
        /// <returns>ItemsResponse</returns>
        ItemsResponse GetItems (int? parentCategoryId = default(int?), string parentCategoryPath = default(string), int? limit = default(int?), int? offset = default(int?), string since = default(string), string sort = default(string), string expand = default(string), bool? placeholders = default(bool?));

        /// <summary>
        /// Retrieve items
        /// </summary>
        /// <remarks>
        /// Retrieves a group of items from the account.  If no parameters are specified, all items will be returned.  You will need to make multiple API calls in order to retrieve the entire result set since this API performs result set pagination. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parentCategoryId">The parent category object id to retrieve items for.  Unspecified means all items on the account.  0 &#x3D; root (optional)</param>
        /// <param name="parentCategoryPath">The parent category path to retrieve items for.  Unspecified means all items on the account.  / &#x3D; root (optional)</param>
        /// <param name="limit">The maximum number of records to return on this one API call. (Default 100, Max 2000) (optional, default to 100)</param>
        /// <param name="offset">Pagination of the record set.  Offset is a zero based index. (optional, default to 0)</param>
        /// <param name="since">Fetch items that have been created/modified since this date/time. (optional)</param>
        /// <param name="sort">The sort order of the items.  See Sorting documentation for examples of using multiple values and sorting by ascending and descending. (optional)</param>
        /// <param name="expand">The object expansion to perform on the result.  See documentation for examples (optional)</param>
        /// <param name="placeholders">Whether or not placeholder values should be returned in the result.  Useful for UIs that consume this REST API. (optional)</param>
        /// <returns>ApiResponse of ItemsResponse</returns>
        ApiResponse<ItemsResponse> GetItemsWithHttpInfo (int? parentCategoryId = default(int?), string parentCategoryPath = default(string), int? limit = default(int?), int? offset = default(int?), string since = default(string), string sort = default(string), string expand = default(string), bool? placeholders = default(bool?));
        /// <summary>
        /// Retrieve pricing tiers
        /// </summary>
        /// <remarks>
        /// Retrieves the pricing tiers 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="expand">The object expansion to perform on the result.  See documentation for examples (optional)</param>
        /// <returns>PricingTiersResponse</returns>
        PricingTiersResponse GetPricingTiers (string expand = default(string));

        /// <summary>
        /// Retrieve pricing tiers
        /// </summary>
        /// <remarks>
        /// Retrieves the pricing tiers 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="expand">The object expansion to perform on the result.  See documentation for examples (optional)</param>
        /// <returns>ApiResponse of PricingTiersResponse</returns>
        ApiResponse<PricingTiersResponse> GetPricingTiersWithHttpInfo (string expand = default(string));
        /// <summary>
        /// Get a review
        /// </summary>
        /// <remarks>
        /// Retrieve an item review. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reviewOid">The review oid to retrieve.</param>
        /// <param name="merchantItemOid">The item oid the review is associated with.</param>
        /// <returns>ItemReviewResponse</returns>
        ItemReviewResponse GetReview (int reviewOid, int merchantItemOid);

        /// <summary>
        /// Get a review
        /// </summary>
        /// <remarks>
        /// Retrieve an item review. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reviewOid">The review oid to retrieve.</param>
        /// <param name="merchantItemOid">The item oid the review is associated with.</param>
        /// <returns>ApiResponse of ItemReviewResponse</returns>
        ApiResponse<ItemReviewResponse> GetReviewWithHttpInfo (int reviewOid, int merchantItemOid);
        /// <summary>
        /// Get reviews for an item
        /// </summary>
        /// <remarks>
        /// Retrieve item reviews. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="merchantItemOid">The item oid the review is associated with.</param>
        /// <returns>ItemReviewsResponse</returns>
        ItemReviewsResponse GetReviews (int merchantItemOid);

        /// <summary>
        /// Get reviews for an item
        /// </summary>
        /// <remarks>
        /// Retrieve item reviews. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="merchantItemOid">The item oid the review is associated with.</param>
        /// <returns>ApiResponse of ItemReviewsResponse</returns>
        ApiResponse<ItemReviewsResponse> GetReviewsWithHttpInfo (int merchantItemOid);
        /// <summary>
        /// Retrieve digital items from the digital library (which are digital files that may be attached to normal items) not yet associated with actual items
        /// </summary>
        /// <remarks>
        /// Retrieves a group of digital items (file information) from the account that are not yet associated with any actual items.  If no parameters are specified, all digital items will be returned.  Be aware that these are not normal items that can be added to a shopping cart. Rather, they are digital files that may be associated with normal items.  You will need to make multiple API calls in order to retrieve the entire result set since this API performs result set pagination. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">The maximum number of records to return on this one API call. (Default 100, Max 2000) (optional, default to 100)</param>
        /// <param name="offset">Pagination of the record set.  Offset is a zero based index. (optional, default to 0)</param>
        /// <param name="since">Fetch items that have been created/modified since this date/time. (optional)</param>
        /// <param name="sort">The sort order of the items.  See Sorting documentation for examples of using multiple values and sorting by ascending and descending. (optional)</param>
        /// <param name="expand">The object expansion to perform on the result.  See documentation for examples (optional)</param>
        /// <param name="placeholders">Whether or not placeholder values should be returned in the result.  Useful for UIs that consume this REST API. (optional)</param>
        /// <returns>ItemDigitalItemsResponse</returns>
        ItemDigitalItemsResponse GetUnassociatedDigitalItems (int? limit = default(int?), int? offset = default(int?), string since = default(string), string sort = default(string), string expand = default(string), bool? placeholders = default(bool?));

        /// <summary>
        /// Retrieve digital items from the digital library (which are digital files that may be attached to normal items) not yet associated with actual items
        /// </summary>
        /// <remarks>
        /// Retrieves a group of digital items (file information) from the account that are not yet associated with any actual items.  If no parameters are specified, all digital items will be returned.  Be aware that these are not normal items that can be added to a shopping cart. Rather, they are digital files that may be associated with normal items.  You will need to make multiple API calls in order to retrieve the entire result set since this API performs result set pagination. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">The maximum number of records to return on this one API call. (Default 100, Max 2000) (optional, default to 100)</param>
        /// <param name="offset">Pagination of the record set.  Offset is a zero based index. (optional, default to 0)</param>
        /// <param name="since">Fetch items that have been created/modified since this date/time. (optional)</param>
        /// <param name="sort">The sort order of the items.  See Sorting documentation for examples of using multiple values and sorting by ascending and descending. (optional)</param>
        /// <param name="expand">The object expansion to perform on the result.  See documentation for examples (optional)</param>
        /// <param name="placeholders">Whether or not placeholder values should be returned in the result.  Useful for UIs that consume this REST API. (optional)</param>
        /// <returns>ApiResponse of ItemDigitalItemsResponse</returns>
        ApiResponse<ItemDigitalItemsResponse> GetUnassociatedDigitalItemsWithHttpInfo (int? limit = default(int?), int? offset = default(int?), string since = default(string), string sort = default(string), string expand = default(string), bool? placeholders = default(bool?));
        /// <summary>
        /// Create a file within the digital library
        /// </summary>
        /// <remarks>
        /// Create a file within the digital library.  This does not create an item, but makes this digital file available and selectable as part (or all) of an item. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="digitalItem">Digital item to create</param>
        /// <returns>ItemDigitalItemResponse</returns>
        ItemDigitalItemResponse InsertDigitalItem (ItemDigitalItem digitalItem);

        /// <summary>
        /// Create a file within the digital library
        /// </summary>
        /// <remarks>
        /// Create a file within the digital library.  This does not create an item, but makes this digital file available and selectable as part (or all) of an item. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="digitalItem">Digital item to create</param>
        /// <returns>ApiResponse of ItemDigitalItemResponse</returns>
        ApiResponse<ItemDigitalItemResponse> InsertDigitalItemWithHttpInfo (ItemDigitalItem digitalItem);
        /// <summary>
        /// Create an item
        /// </summary>
        /// <remarks>
        /// Create a new item on the UltraCart account. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="item">Item to create</param>
        /// <param name="expand">The object expansion to perform on the result.  See documentation for examples (optional)</param>
        /// <param name="placeholders">Whether or not placeholder values should be returned in the result.  Useful for UIs that consume this REST API. (optional)</param>
        /// <returns>ItemResponse</returns>
        ItemResponse InsertItem (Item item, string expand = default(string), bool? placeholders = default(bool?));

        /// <summary>
        /// Create an item
        /// </summary>
        /// <remarks>
        /// Create a new item on the UltraCart account. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="item">Item to create</param>
        /// <param name="expand">The object expansion to perform on the result.  See documentation for examples (optional)</param>
        /// <param name="placeholders">Whether or not placeholder values should be returned in the result.  Useful for UIs that consume this REST API. (optional)</param>
        /// <returns>ApiResponse of ItemResponse</returns>
        ApiResponse<ItemResponse> InsertItemWithHttpInfo (Item item, string expand = default(string), bool? placeholders = default(bool?));
        /// <summary>
        /// Insert a review
        /// </summary>
        /// <remarks>
        /// Insert a item review. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="merchantItemOid">The item oid the review is associated with.</param>
        /// <param name="review">Review to insert</param>
        /// <returns>ItemReviewResponse</returns>
        ItemReviewResponse InsertReview (int merchantItemOid, ItemReview review);

        /// <summary>
        /// Insert a review
        /// </summary>
        /// <remarks>
        /// Insert a item review. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="merchantItemOid">The item oid the review is associated with.</param>
        /// <param name="review">Review to insert</param>
        /// <returns>ApiResponse of ItemReviewResponse</returns>
        ApiResponse<ItemReviewResponse> InsertReviewWithHttpInfo (int merchantItemOid, ItemReview review);
        /// <summary>
        /// Upsert an item content attribute
        /// </summary>
        /// <remarks>
        /// Update an item content attribute, creating it new if it does not yet exist. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="merchantItemOid">The item oid to modify.</param>
        /// <param name="itemAttribute">Item content attribute to upsert</param>
        /// <returns></returns>
        void InsertUpdateItemContentAttribute (int merchantItemOid, ItemContentAttribute itemAttribute);

        /// <summary>
        /// Upsert an item content attribute
        /// </summary>
        /// <remarks>
        /// Update an item content attribute, creating it new if it does not yet exist. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="merchantItemOid">The item oid to modify.</param>
        /// <param name="itemAttribute">Item content attribute to upsert</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> InsertUpdateItemContentAttributeWithHttpInfo (int merchantItemOid, ItemContentAttribute itemAttribute);
        /// <summary>
        /// Updates a file within the digital library
        /// </summary>
        /// <remarks>
        /// Updates a file within the digital library.  This does not update an item, but updates a digital file available and selectable as part (or all) of an item. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="digitalItemOid">The digital item oid to update.</param>
        /// <param name="digitalItem">Digital item to update</param>
        /// <returns>ItemDigitalItemResponse</returns>
        ItemDigitalItemResponse UpdateDigitalItem (int digitalItemOid, ItemDigitalItem digitalItem);

        /// <summary>
        /// Updates a file within the digital library
        /// </summary>
        /// <remarks>
        /// Updates a file within the digital library.  This does not update an item, but updates a digital file available and selectable as part (or all) of an item. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="digitalItemOid">The digital item oid to update.</param>
        /// <param name="digitalItem">Digital item to update</param>
        /// <returns>ApiResponse of ItemDigitalItemResponse</returns>
        ApiResponse<ItemDigitalItemResponse> UpdateDigitalItemWithHttpInfo (int digitalItemOid, ItemDigitalItem digitalItem);
        /// <summary>
        /// Update an item
        /// </summary>
        /// <remarks>
        /// Update a new item on the UltraCart account. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="merchantItemOid">The item oid to update.</param>
        /// <param name="item">Item to update</param>
        /// <param name="expand">The object expansion to perform on the result.  See documentation for examples (optional)</param>
        /// <param name="placeholders">Whether or not placeholder values should be returned in the result.  Useful for UIs that consume this REST API. (optional)</param>
        /// <returns>ItemResponse</returns>
        ItemResponse UpdateItem (int merchantItemOid, Item item, string expand = default(string), bool? placeholders = default(bool?));

        /// <summary>
        /// Update an item
        /// </summary>
        /// <remarks>
        /// Update a new item on the UltraCart account. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="merchantItemOid">The item oid to update.</param>
        /// <param name="item">Item to update</param>
        /// <param name="expand">The object expansion to perform on the result.  See documentation for examples (optional)</param>
        /// <param name="placeholders">Whether or not placeholder values should be returned in the result.  Useful for UIs that consume this REST API. (optional)</param>
        /// <returns>ApiResponse of ItemResponse</returns>
        ApiResponse<ItemResponse> UpdateItemWithHttpInfo (int merchantItemOid, Item item, string expand = default(string), bool? placeholders = default(bool?));
        /// <summary>
        /// Update multiple items
        /// </summary>
        /// <remarks>
        /// Update multiple item on the UltraCart account. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemsRequest">Items to update (synchronous maximum 20 / asynchronous maximum 100)</param>
        /// <param name="expand">The object expansion to perform on the result.  See documentation for examples (optional)</param>
        /// <param name="placeholders">Whether or not placeholder values should be returned in the result.  Useful for UIs that consume this REST API. (optional)</param>
        /// <param name="async">True if the operation should be run async.  No result returned (optional)</param>
        /// <returns>ItemsResponse</returns>
        ItemsResponse UpdateItems (ItemsRequest itemsRequest, string expand = default(string), bool? placeholders = default(bool?), bool? async = default(bool?));

        /// <summary>
        /// Update multiple items
        /// </summary>
        /// <remarks>
        /// Update multiple item on the UltraCart account. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemsRequest">Items to update (synchronous maximum 20 / asynchronous maximum 100)</param>
        /// <param name="expand">The object expansion to perform on the result.  See documentation for examples (optional)</param>
        /// <param name="placeholders">Whether or not placeholder values should be returned in the result.  Useful for UIs that consume this REST API. (optional)</param>
        /// <param name="async">True if the operation should be run async.  No result returned (optional)</param>
        /// <returns>ApiResponse of ItemsResponse</returns>
        ApiResponse<ItemsResponse> UpdateItemsWithHttpInfo (ItemsRequest itemsRequest, string expand = default(string), bool? placeholders = default(bool?), bool? async = default(bool?));
        /// <summary>
        /// Update a review
        /// </summary>
        /// <remarks>
        /// Update an item review. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reviewOid">The review oid to update.</param>
        /// <param name="merchantItemOid">The item oid the review is associated with.</param>
        /// <param name="review">Review to update</param>
        /// <returns>ItemReviewResponse</returns>
        ItemReviewResponse UpdateReview (int reviewOid, int merchantItemOid, ItemReview review);

        /// <summary>
        /// Update a review
        /// </summary>
        /// <remarks>
        /// Update an item review. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reviewOid">The review oid to update.</param>
        /// <param name="merchantItemOid">The item oid the review is associated with.</param>
        /// <param name="review">Review to update</param>
        /// <returns>ApiResponse of ItemReviewResponse</returns>
        ApiResponse<ItemReviewResponse> UpdateReviewWithHttpInfo (int reviewOid, int merchantItemOid, ItemReview review);
        /// <summary>
        /// Upload an image to the temporary multimedia.
        /// </summary>
        /// <remarks>
        /// Uploads an image and returns back meta information about the image as well as the identifier needed for the item update. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file">File to upload</param>
        /// <returns>TempMultimediaResponse</returns>
        TempMultimediaResponse UploadTemporaryMultimedia (System.IO.Stream file);

        /// <summary>
        /// Upload an image to the temporary multimedia.
        /// </summary>
        /// <remarks>
        /// Uploads an image and returns back meta information about the image as well as the identifier needed for the item update. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file">File to upload</param>
        /// <returns>ApiResponse of TempMultimediaResponse</returns>
        ApiResponse<TempMultimediaResponse> UploadTemporaryMultimediaWithHttpInfo (System.IO.Stream file);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Delete a digital item, which is a file within the digital library, not an actual merchant item
        /// </summary>
        /// <remarks>
        /// Delete a digital item on the UltraCart account. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="digitalItemOid">The digital item oid to delete.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteDigitalItemAsync (int digitalItemOid, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Delete a digital item, which is a file within the digital library, not an actual merchant item
        /// </summary>
        /// <remarks>
        /// Delete a digital item on the UltraCart account. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="digitalItemOid">The digital item oid to delete.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteDigitalItemWithHttpInfoAsync (int digitalItemOid, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Delete an item
        /// </summary>
        /// <remarks>
        /// Delete an item on the UltraCart account. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="merchantItemOid">The item oid to delete.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteItemAsync (int merchantItemOid, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Delete an item
        /// </summary>
        /// <remarks>
        /// Delete an item on the UltraCart account. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="merchantItemOid">The item oid to delete.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteItemWithHttpInfoAsync (int merchantItemOid, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Delete a review
        /// </summary>
        /// <remarks>
        /// Delete an item review. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reviewOid">The review oid to delete.</param>
        /// <param name="merchantItemOid">The item oid the review is associated with.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteReviewAsync (int reviewOid, int merchantItemOid, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Delete a review
        /// </summary>
        /// <remarks>
        /// Delete an item review. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reviewOid">The review oid to delete.</param>
        /// <param name="merchantItemOid">The item oid the review is associated with.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteReviewWithHttpInfoAsync (int reviewOid, int merchantItemOid, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Retrieve a digital item from the digital library, which are digital files that may be attached to normal items
        /// </summary>
        /// <remarks>
        /// Retrieves a digital item (file information) from the account.  Be aware that these are not normal items that can be added to a shopping cart. Rather, they are digital files that may be associated with normal items. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="digitalItemOid">The digital item oid to retrieve.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ItemDigitalItemResponse</returns>
        System.Threading.Tasks.Task<ItemDigitalItemResponse> GetDigitalItemAsync (int digitalItemOid, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Retrieve a digital item from the digital library, which are digital files that may be attached to normal items
        /// </summary>
        /// <remarks>
        /// Retrieves a digital item (file information) from the account.  Be aware that these are not normal items that can be added to a shopping cart. Rather, they are digital files that may be associated with normal items. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="digitalItemOid">The digital item oid to retrieve.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (ItemDigitalItemResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ItemDigitalItemResponse>> GetDigitalItemWithHttpInfoAsync (int digitalItemOid, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Retrieve digital items from the digital library which are digital files that may be attached to normal items
        /// </summary>
        /// <remarks>
        /// Retrieves a group of digital items (file information) from the account.  If no parameters are specified, all digital items will be returned.  Be aware that these are not normal items that can be added to a shopping cart. Rather, they are digital files that may be associated with normal items.  You will need to make multiple API calls in order to retrieve the entire result set since this API performs result set pagination. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">The maximum number of records to return on this one API call. (Default 100, Max 2000) (optional, default to 100)</param>
        /// <param name="offset">Pagination of the record set.  Offset is a zero based index. (optional, default to 0)</param>
        /// <param name="since">Fetch items that have been created/modified since this date/time. (optional)</param>
        /// <param name="sort">The sort order of the items.  See Sorting documentation for examples of using multiple values and sorting by ascending and descending. (optional)</param>
        /// <param name="expand">The object expansion to perform on the result.  See documentation for examples (optional)</param>
        /// <param name="placeholders">Whether or not placeholder values should be returned in the result.  Useful for UIs that consume this REST API. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ItemDigitalItemsResponse</returns>
        System.Threading.Tasks.Task<ItemDigitalItemsResponse> GetDigitalItemsAsync (int? limit = default(int?), int? offset = default(int?), string since = default(string), string sort = default(string), string expand = default(string), bool? placeholders = default(bool?), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Retrieve digital items from the digital library which are digital files that may be attached to normal items
        /// </summary>
        /// <remarks>
        /// Retrieves a group of digital items (file information) from the account.  If no parameters are specified, all digital items will be returned.  Be aware that these are not normal items that can be added to a shopping cart. Rather, they are digital files that may be associated with normal items.  You will need to make multiple API calls in order to retrieve the entire result set since this API performs result set pagination. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">The maximum number of records to return on this one API call. (Default 100, Max 2000) (optional, default to 100)</param>
        /// <param name="offset">Pagination of the record set.  Offset is a zero based index. (optional, default to 0)</param>
        /// <param name="since">Fetch items that have been created/modified since this date/time. (optional)</param>
        /// <param name="sort">The sort order of the items.  See Sorting documentation for examples of using multiple values and sorting by ascending and descending. (optional)</param>
        /// <param name="expand">The object expansion to perform on the result.  See documentation for examples (optional)</param>
        /// <param name="placeholders">Whether or not placeholder values should be returned in the result.  Useful for UIs that consume this REST API. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (ItemDigitalItemsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ItemDigitalItemsResponse>> GetDigitalItemsWithHttpInfoAsync (int? limit = default(int?), int? offset = default(int?), string since = default(string), string sort = default(string), string expand = default(string), bool? placeholders = default(bool?), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Retrieves digital items from the digital library (which are digital files that may be attached to normal items) that having a matching external id
        /// </summary>
        /// <remarks>
        /// Retrieves digital items from the digital library (which are digital files that may be attached to normal items) that having a matching external id.  Be aware that these are not normal items that can be added to a shopping cart. Rather, they are digital files that may be associated with normal items. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="externalId">The external id to match against.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ItemDigitalItemsResponse</returns>
        System.Threading.Tasks.Task<ItemDigitalItemsResponse> GetDigitalItemsByExternalIdAsync (string externalId, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Retrieves digital items from the digital library (which are digital files that may be attached to normal items) that having a matching external id
        /// </summary>
        /// <remarks>
        /// Retrieves digital items from the digital library (which are digital files that may be attached to normal items) that having a matching external id.  Be aware that these are not normal items that can be added to a shopping cart. Rather, they are digital files that may be associated with normal items. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="externalId">The external id to match against.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (ItemDigitalItemsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ItemDigitalItemsResponse>> GetDigitalItemsByExternalIdWithHttpInfoAsync (string externalId, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Retrieve a list of item inventories.  This method may be called once every 15 minutes.  More than that will result in a 429 response.
        /// </summary>
        /// <remarks>
        /// Retrieve a list of item inventories.  This method may be called once every 15 minutes.  More than that will result in a 429 response. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ItemInventorySnapshotResponse</returns>
        System.Threading.Tasks.Task<ItemInventorySnapshotResponse> GetInventorySnapshotAsync (CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Retrieve a list of item inventories.  This method may be called once every 15 minutes.  More than that will result in a 429 response.
        /// </summary>
        /// <remarks>
        /// Retrieve a list of item inventories.  This method may be called once every 15 minutes.  More than that will result in a 429 response. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (ItemInventorySnapshotResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ItemInventorySnapshotResponse>> GetInventorySnapshotWithHttpInfoAsync (CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Retrieve an item
        /// </summary>
        /// <remarks>
        /// Retrieves a single item using the specified item oid. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="merchantItemOid">The item oid to retrieve.</param>
        /// <param name="expand">The object expansion to perform on the result.  See documentation for examples (optional)</param>
        /// <param name="placeholders">Whether or not placeholder values should be returned in the result.  Useful for UIs that consume this REST API. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ItemResponse</returns>
        System.Threading.Tasks.Task<ItemResponse> GetItemAsync (int merchantItemOid, string expand = default(string), bool? placeholders = default(bool?), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Retrieve an item
        /// </summary>
        /// <remarks>
        /// Retrieves a single item using the specified item oid. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="merchantItemOid">The item oid to retrieve.</param>
        /// <param name="expand">The object expansion to perform on the result.  See documentation for examples (optional)</param>
        /// <param name="placeholders">Whether or not placeholder values should be returned in the result.  Useful for UIs that consume this REST API. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (ItemResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ItemResponse>> GetItemWithHttpInfoAsync (int merchantItemOid, string expand = default(string), bool? placeholders = default(bool?), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Retrieve an item by item id
        /// </summary>
        /// <remarks>
        /// Retrieves a single item using the specified item id. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="merchantItemId">The item id to retrieve.</param>
        /// <param name="expand">The object expansion to perform on the result.  See documentation for examples (optional)</param>
        /// <param name="placeholders">Whether or not placeholder values should be returned in the result.  Useful for UIs that consume this REST API. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ItemResponse</returns>
        System.Threading.Tasks.Task<ItemResponse> GetItemByMerchantItemIdAsync (string merchantItemId, string expand = default(string), bool? placeholders = default(bool?), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Retrieve an item by item id
        /// </summary>
        /// <remarks>
        /// Retrieves a single item using the specified item id. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="merchantItemId">The item id to retrieve.</param>
        /// <param name="expand">The object expansion to perform on the result.  See documentation for examples (optional)</param>
        /// <param name="placeholders">Whether or not placeholder values should be returned in the result.  Useful for UIs that consume this REST API. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (ItemResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ItemResponse>> GetItemByMerchantItemIdWithHttpInfoAsync (string merchantItemId, string expand = default(string), bool? placeholders = default(bool?), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Retrieve items
        /// </summary>
        /// <remarks>
        /// Retrieves a group of items from the account.  If no parameters are specified, all items will be returned.  You will need to make multiple API calls in order to retrieve the entire result set since this API performs result set pagination. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parentCategoryId">The parent category object id to retrieve items for.  Unspecified means all items on the account.  0 &#x3D; root (optional)</param>
        /// <param name="parentCategoryPath">The parent category path to retrieve items for.  Unspecified means all items on the account.  / &#x3D; root (optional)</param>
        /// <param name="limit">The maximum number of records to return on this one API call. (Default 100, Max 2000) (optional, default to 100)</param>
        /// <param name="offset">Pagination of the record set.  Offset is a zero based index. (optional, default to 0)</param>
        /// <param name="since">Fetch items that have been created/modified since this date/time. (optional)</param>
        /// <param name="sort">The sort order of the items.  See Sorting documentation for examples of using multiple values and sorting by ascending and descending. (optional)</param>
        /// <param name="expand">The object expansion to perform on the result.  See documentation for examples (optional)</param>
        /// <param name="placeholders">Whether or not placeholder values should be returned in the result.  Useful for UIs that consume this REST API. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ItemsResponse</returns>
        System.Threading.Tasks.Task<ItemsResponse> GetItemsAsync (int? parentCategoryId = default(int?), string parentCategoryPath = default(string), int? limit = default(int?), int? offset = default(int?), string since = default(string), string sort = default(string), string expand = default(string), bool? placeholders = default(bool?), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Retrieve items
        /// </summary>
        /// <remarks>
        /// Retrieves a group of items from the account.  If no parameters are specified, all items will be returned.  You will need to make multiple API calls in order to retrieve the entire result set since this API performs result set pagination. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parentCategoryId">The parent category object id to retrieve items for.  Unspecified means all items on the account.  0 &#x3D; root (optional)</param>
        /// <param name="parentCategoryPath">The parent category path to retrieve items for.  Unspecified means all items on the account.  / &#x3D; root (optional)</param>
        /// <param name="limit">The maximum number of records to return on this one API call. (Default 100, Max 2000) (optional, default to 100)</param>
        /// <param name="offset">Pagination of the record set.  Offset is a zero based index. (optional, default to 0)</param>
        /// <param name="since">Fetch items that have been created/modified since this date/time. (optional)</param>
        /// <param name="sort">The sort order of the items.  See Sorting documentation for examples of using multiple values and sorting by ascending and descending. (optional)</param>
        /// <param name="expand">The object expansion to perform on the result.  See documentation for examples (optional)</param>
        /// <param name="placeholders">Whether or not placeholder values should be returned in the result.  Useful for UIs that consume this REST API. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (ItemsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ItemsResponse>> GetItemsWithHttpInfoAsync (int? parentCategoryId = default(int?), string parentCategoryPath = default(string), int? limit = default(int?), int? offset = default(int?), string since = default(string), string sort = default(string), string expand = default(string), bool? placeholders = default(bool?), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Retrieve pricing tiers
        /// </summary>
        /// <remarks>
        /// Retrieves the pricing tiers 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="expand">The object expansion to perform on the result.  See documentation for examples (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of PricingTiersResponse</returns>
        System.Threading.Tasks.Task<PricingTiersResponse> GetPricingTiersAsync (string expand = default(string), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Retrieve pricing tiers
        /// </summary>
        /// <remarks>
        /// Retrieves the pricing tiers 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="expand">The object expansion to perform on the result.  See documentation for examples (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (PricingTiersResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<PricingTiersResponse>> GetPricingTiersWithHttpInfoAsync (string expand = default(string), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get a review
        /// </summary>
        /// <remarks>
        /// Retrieve an item review. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reviewOid">The review oid to retrieve.</param>
        /// <param name="merchantItemOid">The item oid the review is associated with.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ItemReviewResponse</returns>
        System.Threading.Tasks.Task<ItemReviewResponse> GetReviewAsync (int reviewOid, int merchantItemOid, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get a review
        /// </summary>
        /// <remarks>
        /// Retrieve an item review. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reviewOid">The review oid to retrieve.</param>
        /// <param name="merchantItemOid">The item oid the review is associated with.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (ItemReviewResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ItemReviewResponse>> GetReviewWithHttpInfoAsync (int reviewOid, int merchantItemOid, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get reviews for an item
        /// </summary>
        /// <remarks>
        /// Retrieve item reviews. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="merchantItemOid">The item oid the review is associated with.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ItemReviewsResponse</returns>
        System.Threading.Tasks.Task<ItemReviewsResponse> GetReviewsAsync (int merchantItemOid, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get reviews for an item
        /// </summary>
        /// <remarks>
        /// Retrieve item reviews. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="merchantItemOid">The item oid the review is associated with.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (ItemReviewsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ItemReviewsResponse>> GetReviewsWithHttpInfoAsync (int merchantItemOid, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Retrieve digital items from the digital library (which are digital files that may be attached to normal items) not yet associated with actual items
        /// </summary>
        /// <remarks>
        /// Retrieves a group of digital items (file information) from the account that are not yet associated with any actual items.  If no parameters are specified, all digital items will be returned.  Be aware that these are not normal items that can be added to a shopping cart. Rather, they are digital files that may be associated with normal items.  You will need to make multiple API calls in order to retrieve the entire result set since this API performs result set pagination. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">The maximum number of records to return on this one API call. (Default 100, Max 2000) (optional, default to 100)</param>
        /// <param name="offset">Pagination of the record set.  Offset is a zero based index. (optional, default to 0)</param>
        /// <param name="since">Fetch items that have been created/modified since this date/time. (optional)</param>
        /// <param name="sort">The sort order of the items.  See Sorting documentation for examples of using multiple values and sorting by ascending and descending. (optional)</param>
        /// <param name="expand">The object expansion to perform on the result.  See documentation for examples (optional)</param>
        /// <param name="placeholders">Whether or not placeholder values should be returned in the result.  Useful for UIs that consume this REST API. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ItemDigitalItemsResponse</returns>
        System.Threading.Tasks.Task<ItemDigitalItemsResponse> GetUnassociatedDigitalItemsAsync (int? limit = default(int?), int? offset = default(int?), string since = default(string), string sort = default(string), string expand = default(string), bool? placeholders = default(bool?), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Retrieve digital items from the digital library (which are digital files that may be attached to normal items) not yet associated with actual items
        /// </summary>
        /// <remarks>
        /// Retrieves a group of digital items (file information) from the account that are not yet associated with any actual items.  If no parameters are specified, all digital items will be returned.  Be aware that these are not normal items that can be added to a shopping cart. Rather, they are digital files that may be associated with normal items.  You will need to make multiple API calls in order to retrieve the entire result set since this API performs result set pagination. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">The maximum number of records to return on this one API call. (Default 100, Max 2000) (optional, default to 100)</param>
        /// <param name="offset">Pagination of the record set.  Offset is a zero based index. (optional, default to 0)</param>
        /// <param name="since">Fetch items that have been created/modified since this date/time. (optional)</param>
        /// <param name="sort">The sort order of the items.  See Sorting documentation for examples of using multiple values and sorting by ascending and descending. (optional)</param>
        /// <param name="expand">The object expansion to perform on the result.  See documentation for examples (optional)</param>
        /// <param name="placeholders">Whether or not placeholder values should be returned in the result.  Useful for UIs that consume this REST API. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (ItemDigitalItemsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ItemDigitalItemsResponse>> GetUnassociatedDigitalItemsWithHttpInfoAsync (int? limit = default(int?), int? offset = default(int?), string since = default(string), string sort = default(string), string expand = default(string), bool? placeholders = default(bool?), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Create a file within the digital library
        /// </summary>
        /// <remarks>
        /// Create a file within the digital library.  This does not create an item, but makes this digital file available and selectable as part (or all) of an item. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="digitalItem">Digital item to create</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ItemDigitalItemResponse</returns>
        System.Threading.Tasks.Task<ItemDigitalItemResponse> InsertDigitalItemAsync (ItemDigitalItem digitalItem, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Create a file within the digital library
        /// </summary>
        /// <remarks>
        /// Create a file within the digital library.  This does not create an item, but makes this digital file available and selectable as part (or all) of an item. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="digitalItem">Digital item to create</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (ItemDigitalItemResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ItemDigitalItemResponse>> InsertDigitalItemWithHttpInfoAsync (ItemDigitalItem digitalItem, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Create an item
        /// </summary>
        /// <remarks>
        /// Create a new item on the UltraCart account. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="item">Item to create</param>
        /// <param name="expand">The object expansion to perform on the result.  See documentation for examples (optional)</param>
        /// <param name="placeholders">Whether or not placeholder values should be returned in the result.  Useful for UIs that consume this REST API. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ItemResponse</returns>
        System.Threading.Tasks.Task<ItemResponse> InsertItemAsync (Item item, string expand = default(string), bool? placeholders = default(bool?), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Create an item
        /// </summary>
        /// <remarks>
        /// Create a new item on the UltraCart account. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="item">Item to create</param>
        /// <param name="expand">The object expansion to perform on the result.  See documentation for examples (optional)</param>
        /// <param name="placeholders">Whether or not placeholder values should be returned in the result.  Useful for UIs that consume this REST API. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (ItemResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ItemResponse>> InsertItemWithHttpInfoAsync (Item item, string expand = default(string), bool? placeholders = default(bool?), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Insert a review
        /// </summary>
        /// <remarks>
        /// Insert a item review. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="merchantItemOid">The item oid the review is associated with.</param>
        /// <param name="review">Review to insert</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ItemReviewResponse</returns>
        System.Threading.Tasks.Task<ItemReviewResponse> InsertReviewAsync (int merchantItemOid, ItemReview review, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Insert a review
        /// </summary>
        /// <remarks>
        /// Insert a item review. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="merchantItemOid">The item oid the review is associated with.</param>
        /// <param name="review">Review to insert</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (ItemReviewResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ItemReviewResponse>> InsertReviewWithHttpInfoAsync (int merchantItemOid, ItemReview review, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Upsert an item content attribute
        /// </summary>
        /// <remarks>
        /// Update an item content attribute, creating it new if it does not yet exist. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="merchantItemOid">The item oid to modify.</param>
        /// <param name="itemAttribute">Item content attribute to upsert</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task InsertUpdateItemContentAttributeAsync (int merchantItemOid, ItemContentAttribute itemAttribute, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Upsert an item content attribute
        /// </summary>
        /// <remarks>
        /// Update an item content attribute, creating it new if it does not yet exist. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="merchantItemOid">The item oid to modify.</param>
        /// <param name="itemAttribute">Item content attribute to upsert</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> InsertUpdateItemContentAttributeWithHttpInfoAsync (int merchantItemOid, ItemContentAttribute itemAttribute, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Updates a file within the digital library
        /// </summary>
        /// <remarks>
        /// Updates a file within the digital library.  This does not update an item, but updates a digital file available and selectable as part (or all) of an item. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="digitalItemOid">The digital item oid to update.</param>
        /// <param name="digitalItem">Digital item to update</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ItemDigitalItemResponse</returns>
        System.Threading.Tasks.Task<ItemDigitalItemResponse> UpdateDigitalItemAsync (int digitalItemOid, ItemDigitalItem digitalItem, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Updates a file within the digital library
        /// </summary>
        /// <remarks>
        /// Updates a file within the digital library.  This does not update an item, but updates a digital file available and selectable as part (or all) of an item. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="digitalItemOid">The digital item oid to update.</param>
        /// <param name="digitalItem">Digital item to update</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (ItemDigitalItemResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ItemDigitalItemResponse>> UpdateDigitalItemWithHttpInfoAsync (int digitalItemOid, ItemDigitalItem digitalItem, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Update an item
        /// </summary>
        /// <remarks>
        /// Update a new item on the UltraCart account. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="merchantItemOid">The item oid to update.</param>
        /// <param name="item">Item to update</param>
        /// <param name="expand">The object expansion to perform on the result.  See documentation for examples (optional)</param>
        /// <param name="placeholders">Whether or not placeholder values should be returned in the result.  Useful for UIs that consume this REST API. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ItemResponse</returns>
        System.Threading.Tasks.Task<ItemResponse> UpdateItemAsync (int merchantItemOid, Item item, string expand = default(string), bool? placeholders = default(bool?), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Update an item
        /// </summary>
        /// <remarks>
        /// Update a new item on the UltraCart account. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="merchantItemOid">The item oid to update.</param>
        /// <param name="item">Item to update</param>
        /// <param name="expand">The object expansion to perform on the result.  See documentation for examples (optional)</param>
        /// <param name="placeholders">Whether or not placeholder values should be returned in the result.  Useful for UIs that consume this REST API. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (ItemResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ItemResponse>> UpdateItemWithHttpInfoAsync (int merchantItemOid, Item item, string expand = default(string), bool? placeholders = default(bool?), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Update multiple items
        /// </summary>
        /// <remarks>
        /// Update multiple item on the UltraCart account. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemsRequest">Items to update (synchronous maximum 20 / asynchronous maximum 100)</param>
        /// <param name="expand">The object expansion to perform on the result.  See documentation for examples (optional)</param>
        /// <param name="placeholders">Whether or not placeholder values should be returned in the result.  Useful for UIs that consume this REST API. (optional)</param>
        /// <param name="async">True if the operation should be run async.  No result returned (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ItemsResponse</returns>
        System.Threading.Tasks.Task<ItemsResponse> UpdateItemsAsync (ItemsRequest itemsRequest, string expand = default(string), bool? placeholders = default(bool?), bool? async = default(bool?), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Update multiple items
        /// </summary>
        /// <remarks>
        /// Update multiple item on the UltraCart account. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemsRequest">Items to update (synchronous maximum 20 / asynchronous maximum 100)</param>
        /// <param name="expand">The object expansion to perform on the result.  See documentation for examples (optional)</param>
        /// <param name="placeholders">Whether or not placeholder values should be returned in the result.  Useful for UIs that consume this REST API. (optional)</param>
        /// <param name="async">True if the operation should be run async.  No result returned (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (ItemsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ItemsResponse>> UpdateItemsWithHttpInfoAsync (ItemsRequest itemsRequest, string expand = default(string), bool? placeholders = default(bool?), bool? async = default(bool?), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Update a review
        /// </summary>
        /// <remarks>
        /// Update an item review. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reviewOid">The review oid to update.</param>
        /// <param name="merchantItemOid">The item oid the review is associated with.</param>
        /// <param name="review">Review to update</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ItemReviewResponse</returns>
        System.Threading.Tasks.Task<ItemReviewResponse> UpdateReviewAsync (int reviewOid, int merchantItemOid, ItemReview review, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Update a review
        /// </summary>
        /// <remarks>
        /// Update an item review. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reviewOid">The review oid to update.</param>
        /// <param name="merchantItemOid">The item oid the review is associated with.</param>
        /// <param name="review">Review to update</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (ItemReviewResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ItemReviewResponse>> UpdateReviewWithHttpInfoAsync (int reviewOid, int merchantItemOid, ItemReview review, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Upload an image to the temporary multimedia.
        /// </summary>
        /// <remarks>
        /// Uploads an image and returns back meta information about the image as well as the identifier needed for the item update. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file">File to upload</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of TempMultimediaResponse</returns>
        System.Threading.Tasks.Task<TempMultimediaResponse> UploadTemporaryMultimediaAsync (System.IO.Stream file, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Upload an image to the temporary multimedia.
        /// </summary>
        /// <remarks>
        /// Uploads an image and returns back meta information about the image as well as the identifier needed for the item update. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file">File to upload</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (TempMultimediaResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TempMultimediaResponse>> UploadTemporaryMultimediaWithHttpInfoAsync (System.IO.Stream file, CancellationToken cancellationToken = default(CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ItemApi : IItemApi
    {
        private com.ultracart.admin.v2.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ItemApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ItemApi(String basePath, bool uselessVariable)
        {
            this.Configuration = new com.ultracart.admin.v2.Client.Configuration { BasePath = basePath };

            ExceptionFactory = com.ultracart.admin.v2.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ItemApi"/> class
        /// </summary>
        /// <returns></returns>
        public ItemApi()
        {
            this.Configuration = com.ultracart.admin.v2.Client.Configuration.Default;

            ExceptionFactory = com.ultracart.admin.v2.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ItemApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ItemApi(com.ultracart.admin.v2.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = com.ultracart.admin.v2.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = com.ultracart.admin.v2.Client.Configuration.DefaultExceptionFactory;
        }


        /// <summary>
        /// Initializes a new instance of the <see cref="ItemApi"/> class
        /// using a simple key string and optional version, which you will
        /// almost always want to use the default
        /// </summary>
        /// <param name="SimpleKey">A simple key.  See https://ultracart.atlassian.net/wiki/spaces/ucdoc/pages/38688545/API+Simple+Key</param>
        /// <returns></returns>
        public ItemApi(string SimpleKey)
        {
            Configuration configuration = new Configuration();
            configuration.ApiKey.Add("x-ultracart-simple-key", SimpleKey);
            configuration.DefaultHeader.Add("X-UltraCart-Api-Version", "2017-03-01");
            this.Configuration = configuration;
            ExceptionFactory = com.ultracart.admin.v2.Client.Configuration.DefaultExceptionFactory;
        }


        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public com.ultracart.admin.v2.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public com.ultracart.admin.v2.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Delete a digital item, which is a file within the digital library, not an actual merchant item Delete a digital item on the UltraCart account. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="digitalItemOid">The digital item oid to delete.</param>
        /// <returns></returns>
        public void DeleteDigitalItem (int digitalItemOid)
        {
             DeleteDigitalItemWithHttpInfo(digitalItemOid);
        }

        /// <summary>
        /// Delete a digital item, which is a file within the digital library, not an actual merchant item Delete a digital item on the UltraCart account. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="digitalItemOid">The digital item oid to delete.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteDigitalItemWithHttpInfo (int digitalItemOid)
        {
            // verify the required parameter 'digitalItemOid' is set
            if (digitalItemOid == null)
                throw new ApiException(400, "Missing required parameter 'digitalItemOid' when calling ItemApi->DeleteDigitalItem");

            var localVarPath = "/item/digital_library/{digital_item_oid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (digitalItemOid != null) localVarPathParams.Add("digital_item_oid", this.Configuration.ApiClient.ParameterToString(digitalItemOid)); // path parameter

            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteDigitalItem", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Delete a digital item, which is a file within the digital library, not an actual merchant item Delete a digital item on the UltraCart account. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="digitalItemOid">The digital item oid to delete.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteDigitalItemAsync (int digitalItemOid, CancellationToken cancellationToken = default(CancellationToken))
        {
             await DeleteDigitalItemWithHttpInfoAsync(digitalItemOid, cancellationToken);

        }

        /// <summary>
        /// Delete a digital item, which is a file within the digital library, not an actual merchant item Delete a digital item on the UltraCart account. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="digitalItemOid">The digital item oid to delete.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteDigitalItemWithHttpInfoAsync (int digitalItemOid, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'digitalItemOid' is set
            if (digitalItemOid == null)
                throw new ApiException(400, "Missing required parameter 'digitalItemOid' when calling ItemApi->DeleteDigitalItem");

            var localVarPath = "/item/digital_library/{digital_item_oid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (digitalItemOid != null) localVarPathParams.Add("digital_item_oid", this.Configuration.ApiClient.ParameterToString(digitalItemOid)); // path parameter

            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteDigitalItem", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Delete an item Delete an item on the UltraCart account. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="merchantItemOid">The item oid to delete.</param>
        /// <returns></returns>
        public void DeleteItem (int merchantItemOid)
        {
             DeleteItemWithHttpInfo(merchantItemOid);
        }

        /// <summary>
        /// Delete an item Delete an item on the UltraCart account. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="merchantItemOid">The item oid to delete.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteItemWithHttpInfo (int merchantItemOid)
        {
            // verify the required parameter 'merchantItemOid' is set
            if (merchantItemOid == null)
                throw new ApiException(400, "Missing required parameter 'merchantItemOid' when calling ItemApi->DeleteItem");

            var localVarPath = "/item/items/{merchant_item_oid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (merchantItemOid != null) localVarPathParams.Add("merchant_item_oid", this.Configuration.ApiClient.ParameterToString(merchantItemOid)); // path parameter

            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteItem", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Delete an item Delete an item on the UltraCart account. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="merchantItemOid">The item oid to delete.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteItemAsync (int merchantItemOid, CancellationToken cancellationToken = default(CancellationToken))
        {
             await DeleteItemWithHttpInfoAsync(merchantItemOid, cancellationToken);

        }

        /// <summary>
        /// Delete an item Delete an item on the UltraCart account. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="merchantItemOid">The item oid to delete.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteItemWithHttpInfoAsync (int merchantItemOid, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'merchantItemOid' is set
            if (merchantItemOid == null)
                throw new ApiException(400, "Missing required parameter 'merchantItemOid' when calling ItemApi->DeleteItem");

            var localVarPath = "/item/items/{merchant_item_oid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (merchantItemOid != null) localVarPathParams.Add("merchant_item_oid", this.Configuration.ApiClient.ParameterToString(merchantItemOid)); // path parameter

            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteItem", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Delete a review Delete an item review. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reviewOid">The review oid to delete.</param>
        /// <param name="merchantItemOid">The item oid the review is associated with.</param>
        /// <returns></returns>
        public void DeleteReview (int reviewOid, int merchantItemOid)
        {
             DeleteReviewWithHttpInfo(reviewOid, merchantItemOid);
        }

        /// <summary>
        /// Delete a review Delete an item review. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reviewOid">The review oid to delete.</param>
        /// <param name="merchantItemOid">The item oid the review is associated with.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteReviewWithHttpInfo (int reviewOid, int merchantItemOid)
        {
            // verify the required parameter 'reviewOid' is set
            if (reviewOid == null)
                throw new ApiException(400, "Missing required parameter 'reviewOid' when calling ItemApi->DeleteReview");
            // verify the required parameter 'merchantItemOid' is set
            if (merchantItemOid == null)
                throw new ApiException(400, "Missing required parameter 'merchantItemOid' when calling ItemApi->DeleteReview");

            var localVarPath = "/item/items/{merchant_item_oid}/reviews/{review_oid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (reviewOid != null) localVarPathParams.Add("review_oid", this.Configuration.ApiClient.ParameterToString(reviewOid)); // path parameter
            if (merchantItemOid != null) localVarPathParams.Add("merchant_item_oid", this.Configuration.ApiClient.ParameterToString(merchantItemOid)); // path parameter

            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteReview", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Delete a review Delete an item review. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reviewOid">The review oid to delete.</param>
        /// <param name="merchantItemOid">The item oid the review is associated with.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteReviewAsync (int reviewOid, int merchantItemOid, CancellationToken cancellationToken = default(CancellationToken))
        {
             await DeleteReviewWithHttpInfoAsync(reviewOid, merchantItemOid, cancellationToken);

        }

        /// <summary>
        /// Delete a review Delete an item review. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reviewOid">The review oid to delete.</param>
        /// <param name="merchantItemOid">The item oid the review is associated with.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteReviewWithHttpInfoAsync (int reviewOid, int merchantItemOid, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'reviewOid' is set
            if (reviewOid == null)
                throw new ApiException(400, "Missing required parameter 'reviewOid' when calling ItemApi->DeleteReview");
            // verify the required parameter 'merchantItemOid' is set
            if (merchantItemOid == null)
                throw new ApiException(400, "Missing required parameter 'merchantItemOid' when calling ItemApi->DeleteReview");

            var localVarPath = "/item/items/{merchant_item_oid}/reviews/{review_oid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (reviewOid != null) localVarPathParams.Add("review_oid", this.Configuration.ApiClient.ParameterToString(reviewOid)); // path parameter
            if (merchantItemOid != null) localVarPathParams.Add("merchant_item_oid", this.Configuration.ApiClient.ParameterToString(merchantItemOid)); // path parameter

            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteReview", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Retrieve a digital item from the digital library, which are digital files that may be attached to normal items Retrieves a digital item (file information) from the account.  Be aware that these are not normal items that can be added to a shopping cart. Rather, they are digital files that may be associated with normal items. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="digitalItemOid">The digital item oid to retrieve.</param>
        /// <returns>ItemDigitalItemResponse</returns>
        public ItemDigitalItemResponse GetDigitalItem (int digitalItemOid)
        {
             ApiResponse<ItemDigitalItemResponse> localVarResponse = GetDigitalItemWithHttpInfo(digitalItemOid);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve a digital item from the digital library, which are digital files that may be attached to normal items Retrieves a digital item (file information) from the account.  Be aware that these are not normal items that can be added to a shopping cart. Rather, they are digital files that may be associated with normal items. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="digitalItemOid">The digital item oid to retrieve.</param>
        /// <returns>ApiResponse of ItemDigitalItemResponse</returns>
        public ApiResponse<ItemDigitalItemResponse> GetDigitalItemWithHttpInfo (int digitalItemOid)
        {
            // verify the required parameter 'digitalItemOid' is set
            if (digitalItemOid == null)
                throw new ApiException(400, "Missing required parameter 'digitalItemOid' when calling ItemApi->GetDigitalItem");

            var localVarPath = "/item/digital_library/{digital_item_oid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (digitalItemOid != null) localVarPathParams.Add("digital_item_oid", this.Configuration.ApiClient.ParameterToString(digitalItemOid)); // path parameter

            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDigitalItem", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ItemDigitalItemResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ItemDigitalItemResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ItemDigitalItemResponse)));
        }

        /// <summary>
        /// Retrieve a digital item from the digital library, which are digital files that may be attached to normal items Retrieves a digital item (file information) from the account.  Be aware that these are not normal items that can be added to a shopping cart. Rather, they are digital files that may be associated with normal items. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="digitalItemOid">The digital item oid to retrieve.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ItemDigitalItemResponse</returns>
        public async System.Threading.Tasks.Task<ItemDigitalItemResponse> GetDigitalItemAsync (int digitalItemOid, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<ItemDigitalItemResponse> localVarResponse = await GetDigitalItemWithHttpInfoAsync(digitalItemOid, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieve a digital item from the digital library, which are digital files that may be attached to normal items Retrieves a digital item (file information) from the account.  Be aware that these are not normal items that can be added to a shopping cart. Rather, they are digital files that may be associated with normal items. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="digitalItemOid">The digital item oid to retrieve.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (ItemDigitalItemResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ItemDigitalItemResponse>> GetDigitalItemWithHttpInfoAsync (int digitalItemOid, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'digitalItemOid' is set
            if (digitalItemOid == null)
                throw new ApiException(400, "Missing required parameter 'digitalItemOid' when calling ItemApi->GetDigitalItem");

            var localVarPath = "/item/digital_library/{digital_item_oid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (digitalItemOid != null) localVarPathParams.Add("digital_item_oid", this.Configuration.ApiClient.ParameterToString(digitalItemOid)); // path parameter

            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDigitalItem", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ItemDigitalItemResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ItemDigitalItemResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ItemDigitalItemResponse)));
        }

        /// <summary>
        /// Retrieve digital items from the digital library which are digital files that may be attached to normal items Retrieves a group of digital items (file information) from the account.  If no parameters are specified, all digital items will be returned.  Be aware that these are not normal items that can be added to a shopping cart. Rather, they are digital files that may be associated with normal items.  You will need to make multiple API calls in order to retrieve the entire result set since this API performs result set pagination. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">The maximum number of records to return on this one API call. (Default 100, Max 2000) (optional, default to 100)</param>
        /// <param name="offset">Pagination of the record set.  Offset is a zero based index. (optional, default to 0)</param>
        /// <param name="since">Fetch items that have been created/modified since this date/time. (optional)</param>
        /// <param name="sort">The sort order of the items.  See Sorting documentation for examples of using multiple values and sorting by ascending and descending. (optional)</param>
        /// <param name="expand">The object expansion to perform on the result.  See documentation for examples (optional)</param>
        /// <param name="placeholders">Whether or not placeholder values should be returned in the result.  Useful for UIs that consume this REST API. (optional)</param>
        /// <returns>ItemDigitalItemsResponse</returns>
        public ItemDigitalItemsResponse GetDigitalItems (int? limit = default(int?), int? offset = default(int?), string since = default(string), string sort = default(string), string expand = default(string), bool? placeholders = default(bool?))
        {
             ApiResponse<ItemDigitalItemsResponse> localVarResponse = GetDigitalItemsWithHttpInfo(limit, offset, since, sort, expand, placeholders);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve digital items from the digital library which are digital files that may be attached to normal items Retrieves a group of digital items (file information) from the account.  If no parameters are specified, all digital items will be returned.  Be aware that these are not normal items that can be added to a shopping cart. Rather, they are digital files that may be associated with normal items.  You will need to make multiple API calls in order to retrieve the entire result set since this API performs result set pagination. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">The maximum number of records to return on this one API call. (Default 100, Max 2000) (optional, default to 100)</param>
        /// <param name="offset">Pagination of the record set.  Offset is a zero based index. (optional, default to 0)</param>
        /// <param name="since">Fetch items that have been created/modified since this date/time. (optional)</param>
        /// <param name="sort">The sort order of the items.  See Sorting documentation for examples of using multiple values and sorting by ascending and descending. (optional)</param>
        /// <param name="expand">The object expansion to perform on the result.  See documentation for examples (optional)</param>
        /// <param name="placeholders">Whether or not placeholder values should be returned in the result.  Useful for UIs that consume this REST API. (optional)</param>
        /// <returns>ApiResponse of ItemDigitalItemsResponse</returns>
        public ApiResponse<ItemDigitalItemsResponse> GetDigitalItemsWithHttpInfo (int? limit = default(int?), int? offset = default(int?), string since = default(string), string sort = default(string), string expand = default(string), bool? placeholders = default(bool?))
        {

            var localVarPath = "/item/digital_library";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "_limit", limit)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "_offset", offset)); // query parameter
            if (since != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "_since", since)); // query parameter
            if (sort != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "_sort", sort)); // query parameter
            if (expand != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "_expand", expand)); // query parameter
            if (placeholders != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "_placeholders", placeholders)); // query parameter

            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDigitalItems", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ItemDigitalItemsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ItemDigitalItemsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ItemDigitalItemsResponse)));
        }

        /// <summary>
        /// Retrieve digital items from the digital library which are digital files that may be attached to normal items Retrieves a group of digital items (file information) from the account.  If no parameters are specified, all digital items will be returned.  Be aware that these are not normal items that can be added to a shopping cart. Rather, they are digital files that may be associated with normal items.  You will need to make multiple API calls in order to retrieve the entire result set since this API performs result set pagination. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">The maximum number of records to return on this one API call. (Default 100, Max 2000) (optional, default to 100)</param>
        /// <param name="offset">Pagination of the record set.  Offset is a zero based index. (optional, default to 0)</param>
        /// <param name="since">Fetch items that have been created/modified since this date/time. (optional)</param>
        /// <param name="sort">The sort order of the items.  See Sorting documentation for examples of using multiple values and sorting by ascending and descending. (optional)</param>
        /// <param name="expand">The object expansion to perform on the result.  See documentation for examples (optional)</param>
        /// <param name="placeholders">Whether or not placeholder values should be returned in the result.  Useful for UIs that consume this REST API. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ItemDigitalItemsResponse</returns>
        public async System.Threading.Tasks.Task<ItemDigitalItemsResponse> GetDigitalItemsAsync (int? limit = default(int?), int? offset = default(int?), string since = default(string), string sort = default(string), string expand = default(string), bool? placeholders = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<ItemDigitalItemsResponse> localVarResponse = await GetDigitalItemsWithHttpInfoAsync(limit, offset, since, sort, expand, placeholders, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieve digital items from the digital library which are digital files that may be attached to normal items Retrieves a group of digital items (file information) from the account.  If no parameters are specified, all digital items will be returned.  Be aware that these are not normal items that can be added to a shopping cart. Rather, they are digital files that may be associated with normal items.  You will need to make multiple API calls in order to retrieve the entire result set since this API performs result set pagination. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">The maximum number of records to return on this one API call. (Default 100, Max 2000) (optional, default to 100)</param>
        /// <param name="offset">Pagination of the record set.  Offset is a zero based index. (optional, default to 0)</param>
        /// <param name="since">Fetch items that have been created/modified since this date/time. (optional)</param>
        /// <param name="sort">The sort order of the items.  See Sorting documentation for examples of using multiple values and sorting by ascending and descending. (optional)</param>
        /// <param name="expand">The object expansion to perform on the result.  See documentation for examples (optional)</param>
        /// <param name="placeholders">Whether or not placeholder values should be returned in the result.  Useful for UIs that consume this REST API. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (ItemDigitalItemsResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ItemDigitalItemsResponse>> GetDigitalItemsWithHttpInfoAsync (int? limit = default(int?), int? offset = default(int?), string since = default(string), string sort = default(string), string expand = default(string), bool? placeholders = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/item/digital_library";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "_limit", limit)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "_offset", offset)); // query parameter
            if (since != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "_since", since)); // query parameter
            if (sort != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "_sort", sort)); // query parameter
            if (expand != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "_expand", expand)); // query parameter
            if (placeholders != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "_placeholders", placeholders)); // query parameter

            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDigitalItems", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ItemDigitalItemsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ItemDigitalItemsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ItemDigitalItemsResponse)));
        }

        /// <summary>
        /// Retrieves digital items from the digital library (which are digital files that may be attached to normal items) that having a matching external id Retrieves digital items from the digital library (which are digital files that may be attached to normal items) that having a matching external id.  Be aware that these are not normal items that can be added to a shopping cart. Rather, they are digital files that may be associated with normal items. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="externalId">The external id to match against.</param>
        /// <returns>ItemDigitalItemsResponse</returns>
        public ItemDigitalItemsResponse GetDigitalItemsByExternalId (string externalId)
        {
             ApiResponse<ItemDigitalItemsResponse> localVarResponse = GetDigitalItemsByExternalIdWithHttpInfo(externalId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves digital items from the digital library (which are digital files that may be attached to normal items) that having a matching external id Retrieves digital items from the digital library (which are digital files that may be attached to normal items) that having a matching external id.  Be aware that these are not normal items that can be added to a shopping cart. Rather, they are digital files that may be associated with normal items. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="externalId">The external id to match against.</param>
        /// <returns>ApiResponse of ItemDigitalItemsResponse</returns>
        public ApiResponse<ItemDigitalItemsResponse> GetDigitalItemsByExternalIdWithHttpInfo (string externalId)
        {
            // verify the required parameter 'externalId' is set
            if (externalId == null)
                throw new ApiException(400, "Missing required parameter 'externalId' when calling ItemApi->GetDigitalItemsByExternalId");

            var localVarPath = "/item/digital_library/by_external/{external_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (externalId != null) localVarPathParams.Add("external_id", this.Configuration.ApiClient.ParameterToString(externalId)); // path parameter

            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDigitalItemsByExternalId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ItemDigitalItemsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ItemDigitalItemsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ItemDigitalItemsResponse)));
        }

        /// <summary>
        /// Retrieves digital items from the digital library (which are digital files that may be attached to normal items) that having a matching external id Retrieves digital items from the digital library (which are digital files that may be attached to normal items) that having a matching external id.  Be aware that these are not normal items that can be added to a shopping cart. Rather, they are digital files that may be associated with normal items. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="externalId">The external id to match against.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ItemDigitalItemsResponse</returns>
        public async System.Threading.Tasks.Task<ItemDigitalItemsResponse> GetDigitalItemsByExternalIdAsync (string externalId, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<ItemDigitalItemsResponse> localVarResponse = await GetDigitalItemsByExternalIdWithHttpInfoAsync(externalId, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieves digital items from the digital library (which are digital files that may be attached to normal items) that having a matching external id Retrieves digital items from the digital library (which are digital files that may be attached to normal items) that having a matching external id.  Be aware that these are not normal items that can be added to a shopping cart. Rather, they are digital files that may be associated with normal items. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="externalId">The external id to match against.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (ItemDigitalItemsResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ItemDigitalItemsResponse>> GetDigitalItemsByExternalIdWithHttpInfoAsync (string externalId, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'externalId' is set
            if (externalId == null)
                throw new ApiException(400, "Missing required parameter 'externalId' when calling ItemApi->GetDigitalItemsByExternalId");

            var localVarPath = "/item/digital_library/by_external/{external_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (externalId != null) localVarPathParams.Add("external_id", this.Configuration.ApiClient.ParameterToString(externalId)); // path parameter

            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDigitalItemsByExternalId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ItemDigitalItemsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ItemDigitalItemsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ItemDigitalItemsResponse)));
        }

        /// <summary>
        /// Retrieve a list of item inventories.  This method may be called once every 15 minutes.  More than that will result in a 429 response. Retrieve a list of item inventories.  This method may be called once every 15 minutes.  More than that will result in a 429 response. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ItemInventorySnapshotResponse</returns>
        public ItemInventorySnapshotResponse GetInventorySnapshot ()
        {
             ApiResponse<ItemInventorySnapshotResponse> localVarResponse = GetInventorySnapshotWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve a list of item inventories.  This method may be called once every 15 minutes.  More than that will result in a 429 response. Retrieve a list of item inventories.  This method may be called once every 15 minutes.  More than that will result in a 429 response. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of ItemInventorySnapshotResponse</returns>
        public ApiResponse<ItemInventorySnapshotResponse> GetInventorySnapshotWithHttpInfo ()
        {

            var localVarPath = "/item/items/inventory_snapshot";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetInventorySnapshot", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ItemInventorySnapshotResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ItemInventorySnapshotResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ItemInventorySnapshotResponse)));
        }

        /// <summary>
        /// Retrieve a list of item inventories.  This method may be called once every 15 minutes.  More than that will result in a 429 response. Retrieve a list of item inventories.  This method may be called once every 15 minutes.  More than that will result in a 429 response. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ItemInventorySnapshotResponse</returns>
        public async System.Threading.Tasks.Task<ItemInventorySnapshotResponse> GetInventorySnapshotAsync (CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<ItemInventorySnapshotResponse> localVarResponse = await GetInventorySnapshotWithHttpInfoAsync(cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieve a list of item inventories.  This method may be called once every 15 minutes.  More than that will result in a 429 response. Retrieve a list of item inventories.  This method may be called once every 15 minutes.  More than that will result in a 429 response. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (ItemInventorySnapshotResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ItemInventorySnapshotResponse>> GetInventorySnapshotWithHttpInfoAsync (CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/item/items/inventory_snapshot";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetInventorySnapshot", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ItemInventorySnapshotResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ItemInventorySnapshotResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ItemInventorySnapshotResponse)));
        }

        /// <summary>
        /// Retrieve an item Retrieves a single item using the specified item oid. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="merchantItemOid">The item oid to retrieve.</param>
        /// <param name="expand">The object expansion to perform on the result.  See documentation for examples (optional)</param>
        /// <param name="placeholders">Whether or not placeholder values should be returned in the result.  Useful for UIs that consume this REST API. (optional)</param>
        /// <returns>ItemResponse</returns>
        public ItemResponse GetItem (int merchantItemOid, string expand = default(string), bool? placeholders = default(bool?))
        {
             ApiResponse<ItemResponse> localVarResponse = GetItemWithHttpInfo(merchantItemOid, expand, placeholders);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve an item Retrieves a single item using the specified item oid. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="merchantItemOid">The item oid to retrieve.</param>
        /// <param name="expand">The object expansion to perform on the result.  See documentation for examples (optional)</param>
        /// <param name="placeholders">Whether or not placeholder values should be returned in the result.  Useful for UIs that consume this REST API. (optional)</param>
        /// <returns>ApiResponse of ItemResponse</returns>
        public ApiResponse<ItemResponse> GetItemWithHttpInfo (int merchantItemOid, string expand = default(string), bool? placeholders = default(bool?))
        {
            // verify the required parameter 'merchantItemOid' is set
            if (merchantItemOid == null)
                throw new ApiException(400, "Missing required parameter 'merchantItemOid' when calling ItemApi->GetItem");

            var localVarPath = "/item/items/{merchant_item_oid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (merchantItemOid != null) localVarPathParams.Add("merchant_item_oid", this.Configuration.ApiClient.ParameterToString(merchantItemOid)); // path parameter
            if (expand != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "_expand", expand)); // query parameter
            if (placeholders != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "_placeholders", placeholders)); // query parameter

            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetItem", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ItemResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ItemResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ItemResponse)));
        }

        /// <summary>
        /// Retrieve an item Retrieves a single item using the specified item oid. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="merchantItemOid">The item oid to retrieve.</param>
        /// <param name="expand">The object expansion to perform on the result.  See documentation for examples (optional)</param>
        /// <param name="placeholders">Whether or not placeholder values should be returned in the result.  Useful for UIs that consume this REST API. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ItemResponse</returns>
        public async System.Threading.Tasks.Task<ItemResponse> GetItemAsync (int merchantItemOid, string expand = default(string), bool? placeholders = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<ItemResponse> localVarResponse = await GetItemWithHttpInfoAsync(merchantItemOid, expand, placeholders, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieve an item Retrieves a single item using the specified item oid. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="merchantItemOid">The item oid to retrieve.</param>
        /// <param name="expand">The object expansion to perform on the result.  See documentation for examples (optional)</param>
        /// <param name="placeholders">Whether or not placeholder values should be returned in the result.  Useful for UIs that consume this REST API. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (ItemResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ItemResponse>> GetItemWithHttpInfoAsync (int merchantItemOid, string expand = default(string), bool? placeholders = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'merchantItemOid' is set
            if (merchantItemOid == null)
                throw new ApiException(400, "Missing required parameter 'merchantItemOid' when calling ItemApi->GetItem");

            var localVarPath = "/item/items/{merchant_item_oid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (merchantItemOid != null) localVarPathParams.Add("merchant_item_oid", this.Configuration.ApiClient.ParameterToString(merchantItemOid)); // path parameter
            if (expand != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "_expand", expand)); // query parameter
            if (placeholders != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "_placeholders", placeholders)); // query parameter

            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetItem", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ItemResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ItemResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ItemResponse)));
        }

        /// <summary>
        /// Retrieve an item by item id Retrieves a single item using the specified item id. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="merchantItemId">The item id to retrieve.</param>
        /// <param name="expand">The object expansion to perform on the result.  See documentation for examples (optional)</param>
        /// <param name="placeholders">Whether or not placeholder values should be returned in the result.  Useful for UIs that consume this REST API. (optional)</param>
        /// <returns>ItemResponse</returns>
        public ItemResponse GetItemByMerchantItemId (string merchantItemId, string expand = default(string), bool? placeholders = default(bool?))
        {
             ApiResponse<ItemResponse> localVarResponse = GetItemByMerchantItemIdWithHttpInfo(merchantItemId, expand, placeholders);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve an item by item id Retrieves a single item using the specified item id. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="merchantItemId">The item id to retrieve.</param>
        /// <param name="expand">The object expansion to perform on the result.  See documentation for examples (optional)</param>
        /// <param name="placeholders">Whether or not placeholder values should be returned in the result.  Useful for UIs that consume this REST API. (optional)</param>
        /// <returns>ApiResponse of ItemResponse</returns>
        public ApiResponse<ItemResponse> GetItemByMerchantItemIdWithHttpInfo (string merchantItemId, string expand = default(string), bool? placeholders = default(bool?))
        {
            // verify the required parameter 'merchantItemId' is set
            if (merchantItemId == null)
                throw new ApiException(400, "Missing required parameter 'merchantItemId' when calling ItemApi->GetItemByMerchantItemId");

            var localVarPath = "/item/items/merchant_item_id/{merchant_item_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (merchantItemId != null) localVarPathParams.Add("merchant_item_id", this.Configuration.ApiClient.ParameterToString(merchantItemId)); // path parameter
            if (expand != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "_expand", expand)); // query parameter
            if (placeholders != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "_placeholders", placeholders)); // query parameter

            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetItemByMerchantItemId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ItemResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ItemResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ItemResponse)));
        }

        /// <summary>
        /// Retrieve an item by item id Retrieves a single item using the specified item id. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="merchantItemId">The item id to retrieve.</param>
        /// <param name="expand">The object expansion to perform on the result.  See documentation for examples (optional)</param>
        /// <param name="placeholders">Whether or not placeholder values should be returned in the result.  Useful for UIs that consume this REST API. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ItemResponse</returns>
        public async System.Threading.Tasks.Task<ItemResponse> GetItemByMerchantItemIdAsync (string merchantItemId, string expand = default(string), bool? placeholders = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<ItemResponse> localVarResponse = await GetItemByMerchantItemIdWithHttpInfoAsync(merchantItemId, expand, placeholders, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieve an item by item id Retrieves a single item using the specified item id. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="merchantItemId">The item id to retrieve.</param>
        /// <param name="expand">The object expansion to perform on the result.  See documentation for examples (optional)</param>
        /// <param name="placeholders">Whether or not placeholder values should be returned in the result.  Useful for UIs that consume this REST API. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (ItemResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ItemResponse>> GetItemByMerchantItemIdWithHttpInfoAsync (string merchantItemId, string expand = default(string), bool? placeholders = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'merchantItemId' is set
            if (merchantItemId == null)
                throw new ApiException(400, "Missing required parameter 'merchantItemId' when calling ItemApi->GetItemByMerchantItemId");

            var localVarPath = "/item/items/merchant_item_id/{merchant_item_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (merchantItemId != null) localVarPathParams.Add("merchant_item_id", this.Configuration.ApiClient.ParameterToString(merchantItemId)); // path parameter
            if (expand != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "_expand", expand)); // query parameter
            if (placeholders != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "_placeholders", placeholders)); // query parameter

            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetItemByMerchantItemId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ItemResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ItemResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ItemResponse)));
        }

        /// <summary>
        /// Retrieve items Retrieves a group of items from the account.  If no parameters are specified, all items will be returned.  You will need to make multiple API calls in order to retrieve the entire result set since this API performs result set pagination. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parentCategoryId">The parent category object id to retrieve items for.  Unspecified means all items on the account.  0 &#x3D; root (optional)</param>
        /// <param name="parentCategoryPath">The parent category path to retrieve items for.  Unspecified means all items on the account.  / &#x3D; root (optional)</param>
        /// <param name="limit">The maximum number of records to return on this one API call. (Default 100, Max 2000) (optional, default to 100)</param>
        /// <param name="offset">Pagination of the record set.  Offset is a zero based index. (optional, default to 0)</param>
        /// <param name="since">Fetch items that have been created/modified since this date/time. (optional)</param>
        /// <param name="sort">The sort order of the items.  See Sorting documentation for examples of using multiple values and sorting by ascending and descending. (optional)</param>
        /// <param name="expand">The object expansion to perform on the result.  See documentation for examples (optional)</param>
        /// <param name="placeholders">Whether or not placeholder values should be returned in the result.  Useful for UIs that consume this REST API. (optional)</param>
        /// <returns>ItemsResponse</returns>
        public ItemsResponse GetItems (int? parentCategoryId = default(int?), string parentCategoryPath = default(string), int? limit = default(int?), int? offset = default(int?), string since = default(string), string sort = default(string), string expand = default(string), bool? placeholders = default(bool?))
        {
             ApiResponse<ItemsResponse> localVarResponse = GetItemsWithHttpInfo(parentCategoryId, parentCategoryPath, limit, offset, since, sort, expand, placeholders);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve items Retrieves a group of items from the account.  If no parameters are specified, all items will be returned.  You will need to make multiple API calls in order to retrieve the entire result set since this API performs result set pagination. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parentCategoryId">The parent category object id to retrieve items for.  Unspecified means all items on the account.  0 &#x3D; root (optional)</param>
        /// <param name="parentCategoryPath">The parent category path to retrieve items for.  Unspecified means all items on the account.  / &#x3D; root (optional)</param>
        /// <param name="limit">The maximum number of records to return on this one API call. (Default 100, Max 2000) (optional, default to 100)</param>
        /// <param name="offset">Pagination of the record set.  Offset is a zero based index. (optional, default to 0)</param>
        /// <param name="since">Fetch items that have been created/modified since this date/time. (optional)</param>
        /// <param name="sort">The sort order of the items.  See Sorting documentation for examples of using multiple values and sorting by ascending and descending. (optional)</param>
        /// <param name="expand">The object expansion to perform on the result.  See documentation for examples (optional)</param>
        /// <param name="placeholders">Whether or not placeholder values should be returned in the result.  Useful for UIs that consume this REST API. (optional)</param>
        /// <returns>ApiResponse of ItemsResponse</returns>
        public ApiResponse<ItemsResponse> GetItemsWithHttpInfo (int? parentCategoryId = default(int?), string parentCategoryPath = default(string), int? limit = default(int?), int? offset = default(int?), string since = default(string), string sort = default(string), string expand = default(string), bool? placeholders = default(bool?))
        {

            var localVarPath = "/item/items";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (parentCategoryId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "parent_category_id", parentCategoryId)); // query parameter
            if (parentCategoryPath != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "parent_category_path", parentCategoryPath)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "_limit", limit)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "_offset", offset)); // query parameter
            if (since != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "_since", since)); // query parameter
            if (sort != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "_sort", sort)); // query parameter
            if (expand != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "_expand", expand)); // query parameter
            if (placeholders != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "_placeholders", placeholders)); // query parameter

            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetItems", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ItemsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ItemsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ItemsResponse)));
        }

        /// <summary>
        /// Retrieve items Retrieves a group of items from the account.  If no parameters are specified, all items will be returned.  You will need to make multiple API calls in order to retrieve the entire result set since this API performs result set pagination. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parentCategoryId">The parent category object id to retrieve items for.  Unspecified means all items on the account.  0 &#x3D; root (optional)</param>
        /// <param name="parentCategoryPath">The parent category path to retrieve items for.  Unspecified means all items on the account.  / &#x3D; root (optional)</param>
        /// <param name="limit">The maximum number of records to return on this one API call. (Default 100, Max 2000) (optional, default to 100)</param>
        /// <param name="offset">Pagination of the record set.  Offset is a zero based index. (optional, default to 0)</param>
        /// <param name="since">Fetch items that have been created/modified since this date/time. (optional)</param>
        /// <param name="sort">The sort order of the items.  See Sorting documentation for examples of using multiple values and sorting by ascending and descending. (optional)</param>
        /// <param name="expand">The object expansion to perform on the result.  See documentation for examples (optional)</param>
        /// <param name="placeholders">Whether or not placeholder values should be returned in the result.  Useful for UIs that consume this REST API. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ItemsResponse</returns>
        public async System.Threading.Tasks.Task<ItemsResponse> GetItemsAsync (int? parentCategoryId = default(int?), string parentCategoryPath = default(string), int? limit = default(int?), int? offset = default(int?), string since = default(string), string sort = default(string), string expand = default(string), bool? placeholders = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<ItemsResponse> localVarResponse = await GetItemsWithHttpInfoAsync(parentCategoryId, parentCategoryPath, limit, offset, since, sort, expand, placeholders, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieve items Retrieves a group of items from the account.  If no parameters are specified, all items will be returned.  You will need to make multiple API calls in order to retrieve the entire result set since this API performs result set pagination. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parentCategoryId">The parent category object id to retrieve items for.  Unspecified means all items on the account.  0 &#x3D; root (optional)</param>
        /// <param name="parentCategoryPath">The parent category path to retrieve items for.  Unspecified means all items on the account.  / &#x3D; root (optional)</param>
        /// <param name="limit">The maximum number of records to return on this one API call. (Default 100, Max 2000) (optional, default to 100)</param>
        /// <param name="offset">Pagination of the record set.  Offset is a zero based index. (optional, default to 0)</param>
        /// <param name="since">Fetch items that have been created/modified since this date/time. (optional)</param>
        /// <param name="sort">The sort order of the items.  See Sorting documentation for examples of using multiple values and sorting by ascending and descending. (optional)</param>
        /// <param name="expand">The object expansion to perform on the result.  See documentation for examples (optional)</param>
        /// <param name="placeholders">Whether or not placeholder values should be returned in the result.  Useful for UIs that consume this REST API. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (ItemsResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ItemsResponse>> GetItemsWithHttpInfoAsync (int? parentCategoryId = default(int?), string parentCategoryPath = default(string), int? limit = default(int?), int? offset = default(int?), string since = default(string), string sort = default(string), string expand = default(string), bool? placeholders = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/item/items";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (parentCategoryId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "parent_category_id", parentCategoryId)); // query parameter
            if (parentCategoryPath != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "parent_category_path", parentCategoryPath)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "_limit", limit)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "_offset", offset)); // query parameter
            if (since != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "_since", since)); // query parameter
            if (sort != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "_sort", sort)); // query parameter
            if (expand != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "_expand", expand)); // query parameter
            if (placeholders != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "_placeholders", placeholders)); // query parameter

            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetItems", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ItemsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ItemsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ItemsResponse)));
        }

        /// <summary>
        /// Retrieve pricing tiers Retrieves the pricing tiers 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="expand">The object expansion to perform on the result.  See documentation for examples (optional)</param>
        /// <returns>PricingTiersResponse</returns>
        public PricingTiersResponse GetPricingTiers (string expand = default(string))
        {
             ApiResponse<PricingTiersResponse> localVarResponse = GetPricingTiersWithHttpInfo(expand);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve pricing tiers Retrieves the pricing tiers 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="expand">The object expansion to perform on the result.  See documentation for examples (optional)</param>
        /// <returns>ApiResponse of PricingTiersResponse</returns>
        public ApiResponse<PricingTiersResponse> GetPricingTiersWithHttpInfo (string expand = default(string))
        {

            var localVarPath = "/item/pricing_tiers";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (expand != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "_expand", expand)); // query parameter

            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPricingTiers", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PricingTiersResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (PricingTiersResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PricingTiersResponse)));
        }

        /// <summary>
        /// Retrieve pricing tiers Retrieves the pricing tiers 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="expand">The object expansion to perform on the result.  See documentation for examples (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of PricingTiersResponse</returns>
        public async System.Threading.Tasks.Task<PricingTiersResponse> GetPricingTiersAsync (string expand = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<PricingTiersResponse> localVarResponse = await GetPricingTiersWithHttpInfoAsync(expand, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieve pricing tiers Retrieves the pricing tiers 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="expand">The object expansion to perform on the result.  See documentation for examples (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (PricingTiersResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PricingTiersResponse>> GetPricingTiersWithHttpInfoAsync (string expand = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/item/pricing_tiers";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (expand != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "_expand", expand)); // query parameter

            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPricingTiers", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PricingTiersResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (PricingTiersResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PricingTiersResponse)));
        }

        /// <summary>
        /// Get a review Retrieve an item review. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reviewOid">The review oid to retrieve.</param>
        /// <param name="merchantItemOid">The item oid the review is associated with.</param>
        /// <returns>ItemReviewResponse</returns>
        public ItemReviewResponse GetReview (int reviewOid, int merchantItemOid)
        {
             ApiResponse<ItemReviewResponse> localVarResponse = GetReviewWithHttpInfo(reviewOid, merchantItemOid);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a review Retrieve an item review. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reviewOid">The review oid to retrieve.</param>
        /// <param name="merchantItemOid">The item oid the review is associated with.</param>
        /// <returns>ApiResponse of ItemReviewResponse</returns>
        public ApiResponse<ItemReviewResponse> GetReviewWithHttpInfo (int reviewOid, int merchantItemOid)
        {
            // verify the required parameter 'reviewOid' is set
            if (reviewOid == null)
                throw new ApiException(400, "Missing required parameter 'reviewOid' when calling ItemApi->GetReview");
            // verify the required parameter 'merchantItemOid' is set
            if (merchantItemOid == null)
                throw new ApiException(400, "Missing required parameter 'merchantItemOid' when calling ItemApi->GetReview");

            var localVarPath = "/item/items/{merchant_item_oid}/reviews/{review_oid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (reviewOid != null) localVarPathParams.Add("review_oid", this.Configuration.ApiClient.ParameterToString(reviewOid)); // path parameter
            if (merchantItemOid != null) localVarPathParams.Add("merchant_item_oid", this.Configuration.ApiClient.ParameterToString(merchantItemOid)); // path parameter

            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetReview", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ItemReviewResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ItemReviewResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ItemReviewResponse)));
        }

        /// <summary>
        /// Get a review Retrieve an item review. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reviewOid">The review oid to retrieve.</param>
        /// <param name="merchantItemOid">The item oid the review is associated with.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ItemReviewResponse</returns>
        public async System.Threading.Tasks.Task<ItemReviewResponse> GetReviewAsync (int reviewOid, int merchantItemOid, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<ItemReviewResponse> localVarResponse = await GetReviewWithHttpInfoAsync(reviewOid, merchantItemOid, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a review Retrieve an item review. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reviewOid">The review oid to retrieve.</param>
        /// <param name="merchantItemOid">The item oid the review is associated with.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (ItemReviewResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ItemReviewResponse>> GetReviewWithHttpInfoAsync (int reviewOid, int merchantItemOid, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'reviewOid' is set
            if (reviewOid == null)
                throw new ApiException(400, "Missing required parameter 'reviewOid' when calling ItemApi->GetReview");
            // verify the required parameter 'merchantItemOid' is set
            if (merchantItemOid == null)
                throw new ApiException(400, "Missing required parameter 'merchantItemOid' when calling ItemApi->GetReview");

            var localVarPath = "/item/items/{merchant_item_oid}/reviews/{review_oid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (reviewOid != null) localVarPathParams.Add("review_oid", this.Configuration.ApiClient.ParameterToString(reviewOid)); // path parameter
            if (merchantItemOid != null) localVarPathParams.Add("merchant_item_oid", this.Configuration.ApiClient.ParameterToString(merchantItemOid)); // path parameter

            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetReview", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ItemReviewResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ItemReviewResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ItemReviewResponse)));
        }

        /// <summary>
        /// Get reviews for an item Retrieve item reviews. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="merchantItemOid">The item oid the review is associated with.</param>
        /// <returns>ItemReviewsResponse</returns>
        public ItemReviewsResponse GetReviews (int merchantItemOid)
        {
             ApiResponse<ItemReviewsResponse> localVarResponse = GetReviewsWithHttpInfo(merchantItemOid);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get reviews for an item Retrieve item reviews. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="merchantItemOid">The item oid the review is associated with.</param>
        /// <returns>ApiResponse of ItemReviewsResponse</returns>
        public ApiResponse<ItemReviewsResponse> GetReviewsWithHttpInfo (int merchantItemOid)
        {
            // verify the required parameter 'merchantItemOid' is set
            if (merchantItemOid == null)
                throw new ApiException(400, "Missing required parameter 'merchantItemOid' when calling ItemApi->GetReviews");

            var localVarPath = "/item/items/{merchant_item_oid}/reviews";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (merchantItemOid != null) localVarPathParams.Add("merchant_item_oid", this.Configuration.ApiClient.ParameterToString(merchantItemOid)); // path parameter

            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetReviews", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ItemReviewsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ItemReviewsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ItemReviewsResponse)));
        }

        /// <summary>
        /// Get reviews for an item Retrieve item reviews. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="merchantItemOid">The item oid the review is associated with.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ItemReviewsResponse</returns>
        public async System.Threading.Tasks.Task<ItemReviewsResponse> GetReviewsAsync (int merchantItemOid, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<ItemReviewsResponse> localVarResponse = await GetReviewsWithHttpInfoAsync(merchantItemOid, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get reviews for an item Retrieve item reviews. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="merchantItemOid">The item oid the review is associated with.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (ItemReviewsResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ItemReviewsResponse>> GetReviewsWithHttpInfoAsync (int merchantItemOid, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'merchantItemOid' is set
            if (merchantItemOid == null)
                throw new ApiException(400, "Missing required parameter 'merchantItemOid' when calling ItemApi->GetReviews");

            var localVarPath = "/item/items/{merchant_item_oid}/reviews";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (merchantItemOid != null) localVarPathParams.Add("merchant_item_oid", this.Configuration.ApiClient.ParameterToString(merchantItemOid)); // path parameter

            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetReviews", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ItemReviewsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ItemReviewsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ItemReviewsResponse)));
        }

        /// <summary>
        /// Retrieve digital items from the digital library (which are digital files that may be attached to normal items) not yet associated with actual items Retrieves a group of digital items (file information) from the account that are not yet associated with any actual items.  If no parameters are specified, all digital items will be returned.  Be aware that these are not normal items that can be added to a shopping cart. Rather, they are digital files that may be associated with normal items.  You will need to make multiple API calls in order to retrieve the entire result set since this API performs result set pagination. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">The maximum number of records to return on this one API call. (Default 100, Max 2000) (optional, default to 100)</param>
        /// <param name="offset">Pagination of the record set.  Offset is a zero based index. (optional, default to 0)</param>
        /// <param name="since">Fetch items that have been created/modified since this date/time. (optional)</param>
        /// <param name="sort">The sort order of the items.  See Sorting documentation for examples of using multiple values and sorting by ascending and descending. (optional)</param>
        /// <param name="expand">The object expansion to perform on the result.  See documentation for examples (optional)</param>
        /// <param name="placeholders">Whether or not placeholder values should be returned in the result.  Useful for UIs that consume this REST API. (optional)</param>
        /// <returns>ItemDigitalItemsResponse</returns>
        public ItemDigitalItemsResponse GetUnassociatedDigitalItems (int? limit = default(int?), int? offset = default(int?), string since = default(string), string sort = default(string), string expand = default(string), bool? placeholders = default(bool?))
        {
             ApiResponse<ItemDigitalItemsResponse> localVarResponse = GetUnassociatedDigitalItemsWithHttpInfo(limit, offset, since, sort, expand, placeholders);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve digital items from the digital library (which are digital files that may be attached to normal items) not yet associated with actual items Retrieves a group of digital items (file information) from the account that are not yet associated with any actual items.  If no parameters are specified, all digital items will be returned.  Be aware that these are not normal items that can be added to a shopping cart. Rather, they are digital files that may be associated with normal items.  You will need to make multiple API calls in order to retrieve the entire result set since this API performs result set pagination. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">The maximum number of records to return on this one API call. (Default 100, Max 2000) (optional, default to 100)</param>
        /// <param name="offset">Pagination of the record set.  Offset is a zero based index. (optional, default to 0)</param>
        /// <param name="since">Fetch items that have been created/modified since this date/time. (optional)</param>
        /// <param name="sort">The sort order of the items.  See Sorting documentation for examples of using multiple values and sorting by ascending and descending. (optional)</param>
        /// <param name="expand">The object expansion to perform on the result.  See documentation for examples (optional)</param>
        /// <param name="placeholders">Whether or not placeholder values should be returned in the result.  Useful for UIs that consume this REST API. (optional)</param>
        /// <returns>ApiResponse of ItemDigitalItemsResponse</returns>
        public ApiResponse<ItemDigitalItemsResponse> GetUnassociatedDigitalItemsWithHttpInfo (int? limit = default(int?), int? offset = default(int?), string since = default(string), string sort = default(string), string expand = default(string), bool? placeholders = default(bool?))
        {

            var localVarPath = "/item/digital_library/unassociated";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "_limit", limit)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "_offset", offset)); // query parameter
            if (since != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "_since", since)); // query parameter
            if (sort != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "_sort", sort)); // query parameter
            if (expand != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "_expand", expand)); // query parameter
            if (placeholders != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "_placeholders", placeholders)); // query parameter

            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetUnassociatedDigitalItems", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ItemDigitalItemsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ItemDigitalItemsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ItemDigitalItemsResponse)));
        }

        /// <summary>
        /// Retrieve digital items from the digital library (which are digital files that may be attached to normal items) not yet associated with actual items Retrieves a group of digital items (file information) from the account that are not yet associated with any actual items.  If no parameters are specified, all digital items will be returned.  Be aware that these are not normal items that can be added to a shopping cart. Rather, they are digital files that may be associated with normal items.  You will need to make multiple API calls in order to retrieve the entire result set since this API performs result set pagination. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">The maximum number of records to return on this one API call. (Default 100, Max 2000) (optional, default to 100)</param>
        /// <param name="offset">Pagination of the record set.  Offset is a zero based index. (optional, default to 0)</param>
        /// <param name="since">Fetch items that have been created/modified since this date/time. (optional)</param>
        /// <param name="sort">The sort order of the items.  See Sorting documentation for examples of using multiple values and sorting by ascending and descending. (optional)</param>
        /// <param name="expand">The object expansion to perform on the result.  See documentation for examples (optional)</param>
        /// <param name="placeholders">Whether or not placeholder values should be returned in the result.  Useful for UIs that consume this REST API. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ItemDigitalItemsResponse</returns>
        public async System.Threading.Tasks.Task<ItemDigitalItemsResponse> GetUnassociatedDigitalItemsAsync (int? limit = default(int?), int? offset = default(int?), string since = default(string), string sort = default(string), string expand = default(string), bool? placeholders = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<ItemDigitalItemsResponse> localVarResponse = await GetUnassociatedDigitalItemsWithHttpInfoAsync(limit, offset, since, sort, expand, placeholders, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieve digital items from the digital library (which are digital files that may be attached to normal items) not yet associated with actual items Retrieves a group of digital items (file information) from the account that are not yet associated with any actual items.  If no parameters are specified, all digital items will be returned.  Be aware that these are not normal items that can be added to a shopping cart. Rather, they are digital files that may be associated with normal items.  You will need to make multiple API calls in order to retrieve the entire result set since this API performs result set pagination. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">The maximum number of records to return on this one API call. (Default 100, Max 2000) (optional, default to 100)</param>
        /// <param name="offset">Pagination of the record set.  Offset is a zero based index. (optional, default to 0)</param>
        /// <param name="since">Fetch items that have been created/modified since this date/time. (optional)</param>
        /// <param name="sort">The sort order of the items.  See Sorting documentation for examples of using multiple values and sorting by ascending and descending. (optional)</param>
        /// <param name="expand">The object expansion to perform on the result.  See documentation for examples (optional)</param>
        /// <param name="placeholders">Whether or not placeholder values should be returned in the result.  Useful for UIs that consume this REST API. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (ItemDigitalItemsResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ItemDigitalItemsResponse>> GetUnassociatedDigitalItemsWithHttpInfoAsync (int? limit = default(int?), int? offset = default(int?), string since = default(string), string sort = default(string), string expand = default(string), bool? placeholders = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/item/digital_library/unassociated";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "_limit", limit)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "_offset", offset)); // query parameter
            if (since != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "_since", since)); // query parameter
            if (sort != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "_sort", sort)); // query parameter
            if (expand != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "_expand", expand)); // query parameter
            if (placeholders != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "_placeholders", placeholders)); // query parameter

            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetUnassociatedDigitalItems", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ItemDigitalItemsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ItemDigitalItemsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ItemDigitalItemsResponse)));
        }

        /// <summary>
        /// Create a file within the digital library Create a file within the digital library.  This does not create an item, but makes this digital file available and selectable as part (or all) of an item. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="digitalItem">Digital item to create</param>
        /// <returns>ItemDigitalItemResponse</returns>
        public ItemDigitalItemResponse InsertDigitalItem (ItemDigitalItem digitalItem)
        {
             ApiResponse<ItemDigitalItemResponse> localVarResponse = InsertDigitalItemWithHttpInfo(digitalItem);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create a file within the digital library Create a file within the digital library.  This does not create an item, but makes this digital file available and selectable as part (or all) of an item. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="digitalItem">Digital item to create</param>
        /// <returns>ApiResponse of ItemDigitalItemResponse</returns>
        public ApiResponse<ItemDigitalItemResponse> InsertDigitalItemWithHttpInfo (ItemDigitalItem digitalItem)
        {
            // verify the required parameter 'digitalItem' is set
            if (digitalItem == null)
                throw new ApiException(400, "Missing required parameter 'digitalItem' when calling ItemApi->InsertDigitalItem");

            var localVarPath = "/item/digital_library";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json; charset=UTF-8"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (digitalItem != null && digitalItem.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(digitalItem); // http body (model) parameter
            }
            else
            {
                localVarPostBody = digitalItem; // byte array
            }

            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("InsertDigitalItem", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ItemDigitalItemResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ItemDigitalItemResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ItemDigitalItemResponse)));
        }

        /// <summary>
        /// Create a file within the digital library Create a file within the digital library.  This does not create an item, but makes this digital file available and selectable as part (or all) of an item. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="digitalItem">Digital item to create</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ItemDigitalItemResponse</returns>
        public async System.Threading.Tasks.Task<ItemDigitalItemResponse> InsertDigitalItemAsync (ItemDigitalItem digitalItem, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<ItemDigitalItemResponse> localVarResponse = await InsertDigitalItemWithHttpInfoAsync(digitalItem, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create a file within the digital library Create a file within the digital library.  This does not create an item, but makes this digital file available and selectable as part (or all) of an item. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="digitalItem">Digital item to create</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (ItemDigitalItemResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ItemDigitalItemResponse>> InsertDigitalItemWithHttpInfoAsync (ItemDigitalItem digitalItem, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'digitalItem' is set
            if (digitalItem == null)
                throw new ApiException(400, "Missing required parameter 'digitalItem' when calling ItemApi->InsertDigitalItem");

            var localVarPath = "/item/digital_library";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json; charset=UTF-8"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (digitalItem != null && digitalItem.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(digitalItem); // http body (model) parameter
            }
            else
            {
                localVarPostBody = digitalItem; // byte array
            }

            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("InsertDigitalItem", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ItemDigitalItemResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ItemDigitalItemResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ItemDigitalItemResponse)));
        }

        /// <summary>
        /// Create an item Create a new item on the UltraCart account. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="item">Item to create</param>
        /// <param name="expand">The object expansion to perform on the result.  See documentation for examples (optional)</param>
        /// <param name="placeholders">Whether or not placeholder values should be returned in the result.  Useful for UIs that consume this REST API. (optional)</param>
        /// <returns>ItemResponse</returns>
        public ItemResponse InsertItem (Item item, string expand = default(string), bool? placeholders = default(bool?))
        {
             ApiResponse<ItemResponse> localVarResponse = InsertItemWithHttpInfo(item, expand, placeholders);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create an item Create a new item on the UltraCart account. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="item">Item to create</param>
        /// <param name="expand">The object expansion to perform on the result.  See documentation for examples (optional)</param>
        /// <param name="placeholders">Whether or not placeholder values should be returned in the result.  Useful for UIs that consume this REST API. (optional)</param>
        /// <returns>ApiResponse of ItemResponse</returns>
        public ApiResponse<ItemResponse> InsertItemWithHttpInfo (Item item, string expand = default(string), bool? placeholders = default(bool?))
        {
            // verify the required parameter 'item' is set
            if (item == null)
                throw new ApiException(400, "Missing required parameter 'item' when calling ItemApi->InsertItem");

            var localVarPath = "/item/items";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json; charset=UTF-8"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (expand != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "_expand", expand)); // query parameter
            if (placeholders != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "_placeholders", placeholders)); // query parameter
            if (item != null && item.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(item); // http body (model) parameter
            }
            else
            {
                localVarPostBody = item; // byte array
            }

            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("InsertItem", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ItemResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ItemResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ItemResponse)));
        }

        /// <summary>
        /// Create an item Create a new item on the UltraCart account. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="item">Item to create</param>
        /// <param name="expand">The object expansion to perform on the result.  See documentation for examples (optional)</param>
        /// <param name="placeholders">Whether or not placeholder values should be returned in the result.  Useful for UIs that consume this REST API. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ItemResponse</returns>
        public async System.Threading.Tasks.Task<ItemResponse> InsertItemAsync (Item item, string expand = default(string), bool? placeholders = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<ItemResponse> localVarResponse = await InsertItemWithHttpInfoAsync(item, expand, placeholders, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create an item Create a new item on the UltraCart account. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="item">Item to create</param>
        /// <param name="expand">The object expansion to perform on the result.  See documentation for examples (optional)</param>
        /// <param name="placeholders">Whether or not placeholder values should be returned in the result.  Useful for UIs that consume this REST API. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (ItemResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ItemResponse>> InsertItemWithHttpInfoAsync (Item item, string expand = default(string), bool? placeholders = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'item' is set
            if (item == null)
                throw new ApiException(400, "Missing required parameter 'item' when calling ItemApi->InsertItem");

            var localVarPath = "/item/items";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json; charset=UTF-8"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (expand != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "_expand", expand)); // query parameter
            if (placeholders != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "_placeholders", placeholders)); // query parameter
            if (item != null && item.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(item); // http body (model) parameter
            }
            else
            {
                localVarPostBody = item; // byte array
            }

            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("InsertItem", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ItemResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ItemResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ItemResponse)));
        }

        /// <summary>
        /// Insert a review Insert a item review. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="merchantItemOid">The item oid the review is associated with.</param>
        /// <param name="review">Review to insert</param>
        /// <returns>ItemReviewResponse</returns>
        public ItemReviewResponse InsertReview (int merchantItemOid, ItemReview review)
        {
             ApiResponse<ItemReviewResponse> localVarResponse = InsertReviewWithHttpInfo(merchantItemOid, review);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Insert a review Insert a item review. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="merchantItemOid">The item oid the review is associated with.</param>
        /// <param name="review">Review to insert</param>
        /// <returns>ApiResponse of ItemReviewResponse</returns>
        public ApiResponse<ItemReviewResponse> InsertReviewWithHttpInfo (int merchantItemOid, ItemReview review)
        {
            // verify the required parameter 'merchantItemOid' is set
            if (merchantItemOid == null)
                throw new ApiException(400, "Missing required parameter 'merchantItemOid' when calling ItemApi->InsertReview");
            // verify the required parameter 'review' is set
            if (review == null)
                throw new ApiException(400, "Missing required parameter 'review' when calling ItemApi->InsertReview");

            var localVarPath = "/item/items/{merchant_item_oid}/reviews";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json; charset=UTF-8"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (merchantItemOid != null) localVarPathParams.Add("merchant_item_oid", this.Configuration.ApiClient.ParameterToString(merchantItemOid)); // path parameter
            if (review != null && review.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(review); // http body (model) parameter
            }
            else
            {
                localVarPostBody = review; // byte array
            }

            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("InsertReview", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ItemReviewResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ItemReviewResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ItemReviewResponse)));
        }

        /// <summary>
        /// Insert a review Insert a item review. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="merchantItemOid">The item oid the review is associated with.</param>
        /// <param name="review">Review to insert</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ItemReviewResponse</returns>
        public async System.Threading.Tasks.Task<ItemReviewResponse> InsertReviewAsync (int merchantItemOid, ItemReview review, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<ItemReviewResponse> localVarResponse = await InsertReviewWithHttpInfoAsync(merchantItemOid, review, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Insert a review Insert a item review. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="merchantItemOid">The item oid the review is associated with.</param>
        /// <param name="review">Review to insert</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (ItemReviewResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ItemReviewResponse>> InsertReviewWithHttpInfoAsync (int merchantItemOid, ItemReview review, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'merchantItemOid' is set
            if (merchantItemOid == null)
                throw new ApiException(400, "Missing required parameter 'merchantItemOid' when calling ItemApi->InsertReview");
            // verify the required parameter 'review' is set
            if (review == null)
                throw new ApiException(400, "Missing required parameter 'review' when calling ItemApi->InsertReview");

            var localVarPath = "/item/items/{merchant_item_oid}/reviews";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json; charset=UTF-8"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (merchantItemOid != null) localVarPathParams.Add("merchant_item_oid", this.Configuration.ApiClient.ParameterToString(merchantItemOid)); // path parameter
            if (review != null && review.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(review); // http body (model) parameter
            }
            else
            {
                localVarPostBody = review; // byte array
            }

            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("InsertReview", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ItemReviewResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ItemReviewResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ItemReviewResponse)));
        }

        /// <summary>
        /// Upsert an item content attribute Update an item content attribute, creating it new if it does not yet exist. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="merchantItemOid">The item oid to modify.</param>
        /// <param name="itemAttribute">Item content attribute to upsert</param>
        /// <returns></returns>
        public void InsertUpdateItemContentAttribute (int merchantItemOid, ItemContentAttribute itemAttribute)
        {
             InsertUpdateItemContentAttributeWithHttpInfo(merchantItemOid, itemAttribute);
        }

        /// <summary>
        /// Upsert an item content attribute Update an item content attribute, creating it new if it does not yet exist. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="merchantItemOid">The item oid to modify.</param>
        /// <param name="itemAttribute">Item content attribute to upsert</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> InsertUpdateItemContentAttributeWithHttpInfo (int merchantItemOid, ItemContentAttribute itemAttribute)
        {
            // verify the required parameter 'merchantItemOid' is set
            if (merchantItemOid == null)
                throw new ApiException(400, "Missing required parameter 'merchantItemOid' when calling ItemApi->InsertUpdateItemContentAttribute");
            // verify the required parameter 'itemAttribute' is set
            if (itemAttribute == null)
                throw new ApiException(400, "Missing required parameter 'itemAttribute' when calling ItemApi->InsertUpdateItemContentAttribute");

            var localVarPath = "/item/items/{merchant_item_oid}/content/attributes";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json; charset=UTF-8"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (merchantItemOid != null) localVarPathParams.Add("merchant_item_oid", this.Configuration.ApiClient.ParameterToString(merchantItemOid)); // path parameter
            if (itemAttribute != null && itemAttribute.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(itemAttribute); // http body (model) parameter
            }
            else
            {
                localVarPostBody = itemAttribute; // byte array
            }

            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("InsertUpdateItemContentAttribute", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Upsert an item content attribute Update an item content attribute, creating it new if it does not yet exist. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="merchantItemOid">The item oid to modify.</param>
        /// <param name="itemAttribute">Item content attribute to upsert</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task InsertUpdateItemContentAttributeAsync (int merchantItemOid, ItemContentAttribute itemAttribute, CancellationToken cancellationToken = default(CancellationToken))
        {
             await InsertUpdateItemContentAttributeWithHttpInfoAsync(merchantItemOid, itemAttribute, cancellationToken);

        }

        /// <summary>
        /// Upsert an item content attribute Update an item content attribute, creating it new if it does not yet exist. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="merchantItemOid">The item oid to modify.</param>
        /// <param name="itemAttribute">Item content attribute to upsert</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> InsertUpdateItemContentAttributeWithHttpInfoAsync (int merchantItemOid, ItemContentAttribute itemAttribute, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'merchantItemOid' is set
            if (merchantItemOid == null)
                throw new ApiException(400, "Missing required parameter 'merchantItemOid' when calling ItemApi->InsertUpdateItemContentAttribute");
            // verify the required parameter 'itemAttribute' is set
            if (itemAttribute == null)
                throw new ApiException(400, "Missing required parameter 'itemAttribute' when calling ItemApi->InsertUpdateItemContentAttribute");

            var localVarPath = "/item/items/{merchant_item_oid}/content/attributes";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json; charset=UTF-8"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (merchantItemOid != null) localVarPathParams.Add("merchant_item_oid", this.Configuration.ApiClient.ParameterToString(merchantItemOid)); // path parameter
            if (itemAttribute != null && itemAttribute.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(itemAttribute); // http body (model) parameter
            }
            else
            {
                localVarPostBody = itemAttribute; // byte array
            }

            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("InsertUpdateItemContentAttribute", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Updates a file within the digital library Updates a file within the digital library.  This does not update an item, but updates a digital file available and selectable as part (or all) of an item. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="digitalItemOid">The digital item oid to update.</param>
        /// <param name="digitalItem">Digital item to update</param>
        /// <returns>ItemDigitalItemResponse</returns>
        public ItemDigitalItemResponse UpdateDigitalItem (int digitalItemOid, ItemDigitalItem digitalItem)
        {
             ApiResponse<ItemDigitalItemResponse> localVarResponse = UpdateDigitalItemWithHttpInfo(digitalItemOid, digitalItem);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Updates a file within the digital library Updates a file within the digital library.  This does not update an item, but updates a digital file available and selectable as part (or all) of an item. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="digitalItemOid">The digital item oid to update.</param>
        /// <param name="digitalItem">Digital item to update</param>
        /// <returns>ApiResponse of ItemDigitalItemResponse</returns>
        public ApiResponse<ItemDigitalItemResponse> UpdateDigitalItemWithHttpInfo (int digitalItemOid, ItemDigitalItem digitalItem)
        {
            // verify the required parameter 'digitalItemOid' is set
            if (digitalItemOid == null)
                throw new ApiException(400, "Missing required parameter 'digitalItemOid' when calling ItemApi->UpdateDigitalItem");
            // verify the required parameter 'digitalItem' is set
            if (digitalItem == null)
                throw new ApiException(400, "Missing required parameter 'digitalItem' when calling ItemApi->UpdateDigitalItem");

            var localVarPath = "/item/digital_library/{digital_item_oid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json; charset=UTF-8"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (digitalItemOid != null) localVarPathParams.Add("digital_item_oid", this.Configuration.ApiClient.ParameterToString(digitalItemOid)); // path parameter
            if (digitalItem != null && digitalItem.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(digitalItem); // http body (model) parameter
            }
            else
            {
                localVarPostBody = digitalItem; // byte array
            }

            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateDigitalItem", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ItemDigitalItemResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ItemDigitalItemResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ItemDigitalItemResponse)));
        }

        /// <summary>
        /// Updates a file within the digital library Updates a file within the digital library.  This does not update an item, but updates a digital file available and selectable as part (or all) of an item. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="digitalItemOid">The digital item oid to update.</param>
        /// <param name="digitalItem">Digital item to update</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ItemDigitalItemResponse</returns>
        public async System.Threading.Tasks.Task<ItemDigitalItemResponse> UpdateDigitalItemAsync (int digitalItemOid, ItemDigitalItem digitalItem, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<ItemDigitalItemResponse> localVarResponse = await UpdateDigitalItemWithHttpInfoAsync(digitalItemOid, digitalItem, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Updates a file within the digital library Updates a file within the digital library.  This does not update an item, but updates a digital file available and selectable as part (or all) of an item. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="digitalItemOid">The digital item oid to update.</param>
        /// <param name="digitalItem">Digital item to update</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (ItemDigitalItemResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ItemDigitalItemResponse>> UpdateDigitalItemWithHttpInfoAsync (int digitalItemOid, ItemDigitalItem digitalItem, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'digitalItemOid' is set
            if (digitalItemOid == null)
                throw new ApiException(400, "Missing required parameter 'digitalItemOid' when calling ItemApi->UpdateDigitalItem");
            // verify the required parameter 'digitalItem' is set
            if (digitalItem == null)
                throw new ApiException(400, "Missing required parameter 'digitalItem' when calling ItemApi->UpdateDigitalItem");

            var localVarPath = "/item/digital_library/{digital_item_oid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json; charset=UTF-8"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (digitalItemOid != null) localVarPathParams.Add("digital_item_oid", this.Configuration.ApiClient.ParameterToString(digitalItemOid)); // path parameter
            if (digitalItem != null && digitalItem.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(digitalItem); // http body (model) parameter
            }
            else
            {
                localVarPostBody = digitalItem; // byte array
            }

            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateDigitalItem", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ItemDigitalItemResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ItemDigitalItemResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ItemDigitalItemResponse)));
        }

        /// <summary>
        /// Update an item Update a new item on the UltraCart account. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="merchantItemOid">The item oid to update.</param>
        /// <param name="item">Item to update</param>
        /// <param name="expand">The object expansion to perform on the result.  See documentation for examples (optional)</param>
        /// <param name="placeholders">Whether or not placeholder values should be returned in the result.  Useful for UIs that consume this REST API. (optional)</param>
        /// <returns>ItemResponse</returns>
        public ItemResponse UpdateItem (int merchantItemOid, Item item, string expand = default(string), bool? placeholders = default(bool?))
        {
             ApiResponse<ItemResponse> localVarResponse = UpdateItemWithHttpInfo(merchantItemOid, item, expand, placeholders);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update an item Update a new item on the UltraCart account. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="merchantItemOid">The item oid to update.</param>
        /// <param name="item">Item to update</param>
        /// <param name="expand">The object expansion to perform on the result.  See documentation for examples (optional)</param>
        /// <param name="placeholders">Whether or not placeholder values should be returned in the result.  Useful for UIs that consume this REST API. (optional)</param>
        /// <returns>ApiResponse of ItemResponse</returns>
        public ApiResponse<ItemResponse> UpdateItemWithHttpInfo (int merchantItemOid, Item item, string expand = default(string), bool? placeholders = default(bool?))
        {
            // verify the required parameter 'merchantItemOid' is set
            if (merchantItemOid == null)
                throw new ApiException(400, "Missing required parameter 'merchantItemOid' when calling ItemApi->UpdateItem");
            // verify the required parameter 'item' is set
            if (item == null)
                throw new ApiException(400, "Missing required parameter 'item' when calling ItemApi->UpdateItem");

            var localVarPath = "/item/items/{merchant_item_oid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json; charset=UTF-8"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (merchantItemOid != null) localVarPathParams.Add("merchant_item_oid", this.Configuration.ApiClient.ParameterToString(merchantItemOid)); // path parameter
            if (expand != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "_expand", expand)); // query parameter
            if (placeholders != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "_placeholders", placeholders)); // query parameter
            if (item != null && item.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(item); // http body (model) parameter
            }
            else
            {
                localVarPostBody = item; // byte array
            }

            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateItem", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ItemResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ItemResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ItemResponse)));
        }

        /// <summary>
        /// Update an item Update a new item on the UltraCart account. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="merchantItemOid">The item oid to update.</param>
        /// <param name="item">Item to update</param>
        /// <param name="expand">The object expansion to perform on the result.  See documentation for examples (optional)</param>
        /// <param name="placeholders">Whether or not placeholder values should be returned in the result.  Useful for UIs that consume this REST API. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ItemResponse</returns>
        public async System.Threading.Tasks.Task<ItemResponse> UpdateItemAsync (int merchantItemOid, Item item, string expand = default(string), bool? placeholders = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<ItemResponse> localVarResponse = await UpdateItemWithHttpInfoAsync(merchantItemOid, item, expand, placeholders, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update an item Update a new item on the UltraCart account. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="merchantItemOid">The item oid to update.</param>
        /// <param name="item">Item to update</param>
        /// <param name="expand">The object expansion to perform on the result.  See documentation for examples (optional)</param>
        /// <param name="placeholders">Whether or not placeholder values should be returned in the result.  Useful for UIs that consume this REST API. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (ItemResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ItemResponse>> UpdateItemWithHttpInfoAsync (int merchantItemOid, Item item, string expand = default(string), bool? placeholders = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'merchantItemOid' is set
            if (merchantItemOid == null)
                throw new ApiException(400, "Missing required parameter 'merchantItemOid' when calling ItemApi->UpdateItem");
            // verify the required parameter 'item' is set
            if (item == null)
                throw new ApiException(400, "Missing required parameter 'item' when calling ItemApi->UpdateItem");

            var localVarPath = "/item/items/{merchant_item_oid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json; charset=UTF-8"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (merchantItemOid != null) localVarPathParams.Add("merchant_item_oid", this.Configuration.ApiClient.ParameterToString(merchantItemOid)); // path parameter
            if (expand != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "_expand", expand)); // query parameter
            if (placeholders != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "_placeholders", placeholders)); // query parameter
            if (item != null && item.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(item); // http body (model) parameter
            }
            else
            {
                localVarPostBody = item; // byte array
            }

            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateItem", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ItemResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ItemResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ItemResponse)));
        }

        /// <summary>
        /// Update multiple items Update multiple item on the UltraCart account. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemsRequest">Items to update (synchronous maximum 20 / asynchronous maximum 100)</param>
        /// <param name="expand">The object expansion to perform on the result.  See documentation for examples (optional)</param>
        /// <param name="placeholders">Whether or not placeholder values should be returned in the result.  Useful for UIs that consume this REST API. (optional)</param>
        /// <param name="async">True if the operation should be run async.  No result returned (optional)</param>
        /// <returns>ItemsResponse</returns>
        public ItemsResponse UpdateItems (ItemsRequest itemsRequest, string expand = default(string), bool? placeholders = default(bool?), bool? async = default(bool?))
        {
             ApiResponse<ItemsResponse> localVarResponse = UpdateItemsWithHttpInfo(itemsRequest, expand, placeholders, async);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update multiple items Update multiple item on the UltraCart account. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemsRequest">Items to update (synchronous maximum 20 / asynchronous maximum 100)</param>
        /// <param name="expand">The object expansion to perform on the result.  See documentation for examples (optional)</param>
        /// <param name="placeholders">Whether or not placeholder values should be returned in the result.  Useful for UIs that consume this REST API. (optional)</param>
        /// <param name="async">True if the operation should be run async.  No result returned (optional)</param>
        /// <returns>ApiResponse of ItemsResponse</returns>
        public ApiResponse<ItemsResponse> UpdateItemsWithHttpInfo (ItemsRequest itemsRequest, string expand = default(string), bool? placeholders = default(bool?), bool? async = default(bool?))
        {
            // verify the required parameter 'itemsRequest' is set
            if (itemsRequest == null)
                throw new ApiException(400, "Missing required parameter 'itemsRequest' when calling ItemApi->UpdateItems");

            var localVarPath = "/item/items/batch";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json; charset=UTF-8"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (expand != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "_expand", expand)); // query parameter
            if (placeholders != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "_placeholders", placeholders)); // query parameter
            if (async != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "_async", async)); // query parameter
            if (itemsRequest != null && itemsRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(itemsRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = itemsRequest; // byte array
            }

            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateItems", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ItemsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ItemsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ItemsResponse)));
        }

        /// <summary>
        /// Update multiple items Update multiple item on the UltraCart account. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemsRequest">Items to update (synchronous maximum 20 / asynchronous maximum 100)</param>
        /// <param name="expand">The object expansion to perform on the result.  See documentation for examples (optional)</param>
        /// <param name="placeholders">Whether or not placeholder values should be returned in the result.  Useful for UIs that consume this REST API. (optional)</param>
        /// <param name="async">True if the operation should be run async.  No result returned (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ItemsResponse</returns>
        public async System.Threading.Tasks.Task<ItemsResponse> UpdateItemsAsync (ItemsRequest itemsRequest, string expand = default(string), bool? placeholders = default(bool?), bool? async = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<ItemsResponse> localVarResponse = await UpdateItemsWithHttpInfoAsync(itemsRequest, expand, placeholders, async, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update multiple items Update multiple item on the UltraCart account. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemsRequest">Items to update (synchronous maximum 20 / asynchronous maximum 100)</param>
        /// <param name="expand">The object expansion to perform on the result.  See documentation for examples (optional)</param>
        /// <param name="placeholders">Whether or not placeholder values should be returned in the result.  Useful for UIs that consume this REST API. (optional)</param>
        /// <param name="async">True if the operation should be run async.  No result returned (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (ItemsResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ItemsResponse>> UpdateItemsWithHttpInfoAsync (ItemsRequest itemsRequest, string expand = default(string), bool? placeholders = default(bool?), bool? async = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'itemsRequest' is set
            if (itemsRequest == null)
                throw new ApiException(400, "Missing required parameter 'itemsRequest' when calling ItemApi->UpdateItems");

            var localVarPath = "/item/items/batch";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json; charset=UTF-8"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (expand != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "_expand", expand)); // query parameter
            if (placeholders != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "_placeholders", placeholders)); // query parameter
            if (async != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "_async", async)); // query parameter
            if (itemsRequest != null && itemsRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(itemsRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = itemsRequest; // byte array
            }

            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateItems", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ItemsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ItemsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ItemsResponse)));
        }

        /// <summary>
        /// Update a review Update an item review. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reviewOid">The review oid to update.</param>
        /// <param name="merchantItemOid">The item oid the review is associated with.</param>
        /// <param name="review">Review to update</param>
        /// <returns>ItemReviewResponse</returns>
        public ItemReviewResponse UpdateReview (int reviewOid, int merchantItemOid, ItemReview review)
        {
             ApiResponse<ItemReviewResponse> localVarResponse = UpdateReviewWithHttpInfo(reviewOid, merchantItemOid, review);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update a review Update an item review. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reviewOid">The review oid to update.</param>
        /// <param name="merchantItemOid">The item oid the review is associated with.</param>
        /// <param name="review">Review to update</param>
        /// <returns>ApiResponse of ItemReviewResponse</returns>
        public ApiResponse<ItemReviewResponse> UpdateReviewWithHttpInfo (int reviewOid, int merchantItemOid, ItemReview review)
        {
            // verify the required parameter 'reviewOid' is set
            if (reviewOid == null)
                throw new ApiException(400, "Missing required parameter 'reviewOid' when calling ItemApi->UpdateReview");
            // verify the required parameter 'merchantItemOid' is set
            if (merchantItemOid == null)
                throw new ApiException(400, "Missing required parameter 'merchantItemOid' when calling ItemApi->UpdateReview");
            // verify the required parameter 'review' is set
            if (review == null)
                throw new ApiException(400, "Missing required parameter 'review' when calling ItemApi->UpdateReview");

            var localVarPath = "/item/items/{merchant_item_oid}/reviews/{review_oid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json; charset=UTF-8"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (reviewOid != null) localVarPathParams.Add("review_oid", this.Configuration.ApiClient.ParameterToString(reviewOid)); // path parameter
            if (merchantItemOid != null) localVarPathParams.Add("merchant_item_oid", this.Configuration.ApiClient.ParameterToString(merchantItemOid)); // path parameter
            if (review != null && review.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(review); // http body (model) parameter
            }
            else
            {
                localVarPostBody = review; // byte array
            }

            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateReview", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ItemReviewResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ItemReviewResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ItemReviewResponse)));
        }

        /// <summary>
        /// Update a review Update an item review. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reviewOid">The review oid to update.</param>
        /// <param name="merchantItemOid">The item oid the review is associated with.</param>
        /// <param name="review">Review to update</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ItemReviewResponse</returns>
        public async System.Threading.Tasks.Task<ItemReviewResponse> UpdateReviewAsync (int reviewOid, int merchantItemOid, ItemReview review, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<ItemReviewResponse> localVarResponse = await UpdateReviewWithHttpInfoAsync(reviewOid, merchantItemOid, review, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update a review Update an item review. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reviewOid">The review oid to update.</param>
        /// <param name="merchantItemOid">The item oid the review is associated with.</param>
        /// <param name="review">Review to update</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (ItemReviewResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ItemReviewResponse>> UpdateReviewWithHttpInfoAsync (int reviewOid, int merchantItemOid, ItemReview review, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'reviewOid' is set
            if (reviewOid == null)
                throw new ApiException(400, "Missing required parameter 'reviewOid' when calling ItemApi->UpdateReview");
            // verify the required parameter 'merchantItemOid' is set
            if (merchantItemOid == null)
                throw new ApiException(400, "Missing required parameter 'merchantItemOid' when calling ItemApi->UpdateReview");
            // verify the required parameter 'review' is set
            if (review == null)
                throw new ApiException(400, "Missing required parameter 'review' when calling ItemApi->UpdateReview");

            var localVarPath = "/item/items/{merchant_item_oid}/reviews/{review_oid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json; charset=UTF-8"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (reviewOid != null) localVarPathParams.Add("review_oid", this.Configuration.ApiClient.ParameterToString(reviewOid)); // path parameter
            if (merchantItemOid != null) localVarPathParams.Add("merchant_item_oid", this.Configuration.ApiClient.ParameterToString(merchantItemOid)); // path parameter
            if (review != null && review.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(review); // http body (model) parameter
            }
            else
            {
                localVarPostBody = review; // byte array
            }

            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateReview", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ItemReviewResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ItemReviewResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ItemReviewResponse)));
        }

        /// <summary>
        /// Upload an image to the temporary multimedia. Uploads an image and returns back meta information about the image as well as the identifier needed for the item update. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file">File to upload</param>
        /// <returns>TempMultimediaResponse</returns>
        public TempMultimediaResponse UploadTemporaryMultimedia (System.IO.Stream file)
        {
             ApiResponse<TempMultimediaResponse> localVarResponse = UploadTemporaryMultimediaWithHttpInfo(file);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Upload an image to the temporary multimedia. Uploads an image and returns back meta information about the image as well as the identifier needed for the item update. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file">File to upload</param>
        /// <returns>ApiResponse of TempMultimediaResponse</returns>
        public ApiResponse<TempMultimediaResponse> UploadTemporaryMultimediaWithHttpInfo (System.IO.Stream file)
        {
            // verify the required parameter 'file' is set
            if (file == null)
                throw new ApiException(400, "Missing required parameter 'file' when calling ItemApi->UploadTemporaryMultimedia");

            var localVarPath = "/item/temp_multimedia";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (file != null) localVarFileParams.Add("file", this.Configuration.ApiClient.ParameterToFile("file", file));

            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UploadTemporaryMultimedia", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TempMultimediaResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (TempMultimediaResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TempMultimediaResponse)));
        }

        /// <summary>
        /// Upload an image to the temporary multimedia. Uploads an image and returns back meta information about the image as well as the identifier needed for the item update. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file">File to upload</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of TempMultimediaResponse</returns>
        public async System.Threading.Tasks.Task<TempMultimediaResponse> UploadTemporaryMultimediaAsync (System.IO.Stream file, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<TempMultimediaResponse> localVarResponse = await UploadTemporaryMultimediaWithHttpInfoAsync(file, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Upload an image to the temporary multimedia. Uploads an image and returns back meta information about the image as well as the identifier needed for the item update. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file">File to upload</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (TempMultimediaResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TempMultimediaResponse>> UploadTemporaryMultimediaWithHttpInfoAsync (System.IO.Stream file, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'file' is set
            if (file == null)
                throw new ApiException(400, "Missing required parameter 'file' when calling ItemApi->UploadTemporaryMultimedia");

            var localVarPath = "/item/temp_multimedia";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (file != null) localVarFileParams.Add("file", this.Configuration.ApiClient.ParameterToFile("file", file));

            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UploadTemporaryMultimedia", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TempMultimediaResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (TempMultimediaResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TempMultimediaResponse)));
        }

    }
}
