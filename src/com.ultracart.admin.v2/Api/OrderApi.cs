/* 
 * UltraCart Rest API V2
 *
 * UltraCart REST API Version 2
 *
 * OpenAPI spec version: 2.0.0
 * Contact: support@ultracart.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using com.ultracart.admin.v2.Client;
using com.ultracart.admin.v2.Model;

namespace com.ultracart.admin.v2.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IOrderApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Adjusts an order total
        /// </summary>
        /// <remarks>
        /// Adjusts an order total.  Adjusts individual items appropriately and considers taxes.  Desired total should be provided in the same currency as the order and must be less than the current total and greater than zero.  This call will change the order total.  It returns true if the desired total is achieved.  If the goal seeking algorithm falls short (usually by pennies), this method returns back false.  View the merchant notes for the order for further details. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId">The order id to cancel.</param>
        /// <param name="desiredTotal">The desired total with no formatting. example 123.45</param>
        /// <returns>BaseResponse</returns>
        BaseResponse AdjustOrderTotal (string orderId, string desiredTotal);

        /// <summary>
        /// Adjusts an order total
        /// </summary>
        /// <remarks>
        /// Adjusts an order total.  Adjusts individual items appropriately and considers taxes.  Desired total should be provided in the same currency as the order and must be less than the current total and greater than zero.  This call will change the order total.  It returns true if the desired total is achieved.  If the goal seeking algorithm falls short (usually by pennies), this method returns back false.  View the merchant notes for the order for further details. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId">The order id to cancel.</param>
        /// <param name="desiredTotal">The desired total with no formatting. example 123.45</param>
        /// <returns>ApiResponse of BaseResponse</returns>
        ApiResponse<BaseResponse> AdjustOrderTotalWithHttpInfo (string orderId, string desiredTotal);
        /// <summary>
        /// Cancel an order
        /// </summary>
        /// <remarks>
        /// Cancel an order on the UltraCart account.  If the success flag is false, then consult the error message for why it failed. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId">The order id to cancel.</param>
        /// <returns>BaseResponse</returns>
        BaseResponse CancelOrder (string orderId);

        /// <summary>
        /// Cancel an order
        /// </summary>
        /// <remarks>
        /// Cancel an order on the UltraCart account.  If the success flag is false, then consult the error message for why it failed. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId">The order id to cancel.</param>
        /// <returns>ApiResponse of BaseResponse</returns>
        ApiResponse<BaseResponse> CancelOrderWithHttpInfo (string orderId);
        /// <summary>
        /// Delete an order
        /// </summary>
        /// <remarks>
        /// Delete an order on the UltraCart account. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId">The order id to delete.</param>
        /// <returns></returns>
        void DeleteOrder (string orderId);

        /// <summary>
        /// Delete an order
        /// </summary>
        /// <remarks>
        /// Delete an order on the UltraCart account. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId">The order id to delete.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteOrderWithHttpInfo (string orderId);
        /// <summary>
        /// Duplicate an order
        /// </summary>
        /// <remarks>
        /// Perform a duplicate of the specified order_id and return a new order located in Accounts Receivable. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId">The order id to duplicate.</param>
        /// <param name="expand">The object expansion to perform on the result.  See documentation for examples (optional)</param>
        /// <returns>OrderResponse</returns>
        OrderResponse DuplicateOrder (string orderId, string expand = null);

        /// <summary>
        /// Duplicate an order
        /// </summary>
        /// <remarks>
        /// Perform a duplicate of the specified order_id and return a new order located in Accounts Receivable. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId">The order id to duplicate.</param>
        /// <param name="expand">The object expansion to perform on the result.  See documentation for examples (optional)</param>
        /// <returns>ApiResponse of OrderResponse</returns>
        ApiResponse<OrderResponse> DuplicateOrderWithHttpInfo (string orderId, string expand = null);
        /// <summary>
        /// Format order
        /// </summary>
        /// <remarks>
        /// Format the order for display at text or html 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId">The order id to format</param>
        /// <param name="formatOptions">Format options</param>
        /// <returns>OrderFormatResponse</returns>
        OrderFormatResponse Format (string orderId, OrderFormat formatOptions);

        /// <summary>
        /// Format order
        /// </summary>
        /// <remarks>
        /// Format the order for display at text or html 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId">The order id to format</param>
        /// <param name="formatOptions">Format options</param>
        /// <returns>ApiResponse of OrderFormatResponse</returns>
        ApiResponse<OrderFormatResponse> FormatWithHttpInfo (string orderId, OrderFormat formatOptions);
        /// <summary>
        /// Generate an order token for a given order id
        /// </summary>
        /// <remarks>
        /// Retrieves a single order token for a given order id.  The token can be used with the getOrderByToken API. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId">The order id to generate a token for.</param>
        /// <returns>OrderTokenResponse</returns>
        OrderTokenResponse GenerateOrderToken (string orderId);

        /// <summary>
        /// Generate an order token for a given order id
        /// </summary>
        /// <remarks>
        /// Retrieves a single order token for a given order id.  The token can be used with the getOrderByToken API. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId">The order id to generate a token for.</param>
        /// <returns>ApiResponse of OrderTokenResponse</returns>
        ApiResponse<OrderTokenResponse> GenerateOrderTokenWithHttpInfo (string orderId);
        /// <summary>
        /// Generate a packing slip for this order across all distribution centers.
        /// </summary>
        /// <remarks>
        /// The packing slip PDF that is returned is base 64 encoded 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId">Order ID</param>
        /// <returns>OrderPackingSlipResponse</returns>
        OrderPackingSlipResponse GeneratePackingSlipAllDC (string orderId);

        /// <summary>
        /// Generate a packing slip for this order across all distribution centers.
        /// </summary>
        /// <remarks>
        /// The packing slip PDF that is returned is base 64 encoded 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId">Order ID</param>
        /// <returns>ApiResponse of OrderPackingSlipResponse</returns>
        ApiResponse<OrderPackingSlipResponse> GeneratePackingSlipAllDCWithHttpInfo (string orderId);
        /// <summary>
        /// Generate a packing slip for this order for the given distribution center.
        /// </summary>
        /// <remarks>
        /// The packing slip PDF that is returned is base 64 encoded 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="distributionCenterCode">Distribution center code</param>
        /// <param name="orderId">Order ID</param>
        /// <returns>OrderPackingSlipResponse</returns>
        OrderPackingSlipResponse GeneratePackingSlipSpecificDC (string distributionCenterCode, string orderId);

        /// <summary>
        /// Generate a packing slip for this order for the given distribution center.
        /// </summary>
        /// <remarks>
        /// The packing slip PDF that is returned is base 64 encoded 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="distributionCenterCode">Distribution center code</param>
        /// <param name="orderId">Order ID</param>
        /// <returns>ApiResponse of OrderPackingSlipResponse</returns>
        ApiResponse<OrderPackingSlipResponse> GeneratePackingSlipSpecificDCWithHttpInfo (string distributionCenterCode, string orderId);
        /// <summary>
        /// Retrieve A/R Retry Configuration
        /// </summary>
        /// <remarks>
        /// Retrieve A/R Retry Configuration. This is primarily an internal API call.  It is doubtful you would ever need to use it. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>AccountsReceivableRetryConfigResponse</returns>
        AccountsReceivableRetryConfigResponse GetAccountsReceivableRetryConfig ();

        /// <summary>
        /// Retrieve A/R Retry Configuration
        /// </summary>
        /// <remarks>
        /// Retrieve A/R Retry Configuration. This is primarily an internal API call.  It is doubtful you would ever need to use it. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of AccountsReceivableRetryConfigResponse</returns>
        ApiResponse<AccountsReceivableRetryConfigResponse> GetAccountsReceivableRetryConfigWithHttpInfo ();
        /// <summary>
        /// Retrieve A/R Retry Statistics
        /// </summary>
        /// <remarks>
        /// Retrieve A/R Retry Statistics. This is primarily an internal API call.  It is doubtful you would ever need to use it. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="from"> (optional)</param>
        /// <param name="to"> (optional)</param>
        /// <returns>AccountsReceivableRetryStatsResponse</returns>
        AccountsReceivableRetryStatsResponse GetAccountsReceivableRetryStats (string from = null, string to = null);

        /// <summary>
        /// Retrieve A/R Retry Statistics
        /// </summary>
        /// <remarks>
        /// Retrieve A/R Retry Statistics. This is primarily an internal API call.  It is doubtful you would ever need to use it. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="from"> (optional)</param>
        /// <param name="to"> (optional)</param>
        /// <returns>ApiResponse of AccountsReceivableRetryStatsResponse</returns>
        ApiResponse<AccountsReceivableRetryStatsResponse> GetAccountsReceivableRetryStatsWithHttpInfo (string from = null, string to = null);
        /// <summary>
        /// Retrieve an order
        /// </summary>
        /// <remarks>
        /// Retrieves a single order using the specified order id. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId">The order id to retrieve.</param>
        /// <param name="expand">The object expansion to perform on the result.  See documentation for examples (optional)</param>
        /// <returns>OrderResponse</returns>
        OrderResponse GetOrder (string orderId, string expand = null);

        /// <summary>
        /// Retrieve an order
        /// </summary>
        /// <remarks>
        /// Retrieves a single order using the specified order id. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId">The order id to retrieve.</param>
        /// <param name="expand">The object expansion to perform on the result.  See documentation for examples (optional)</param>
        /// <returns>ApiResponse of OrderResponse</returns>
        ApiResponse<OrderResponse> GetOrderWithHttpInfo (string orderId, string expand = null);
        /// <summary>
        /// Retrieve an order using a token
        /// </summary>
        /// <remarks>
        /// Retrieves a single order using the specified order token. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderByTokenQuery">Order by token query</param>
        /// <param name="expand">The object expansion to perform on the result.  See documentation for examples (optional)</param>
        /// <returns>OrderResponse</returns>
        OrderResponse GetOrderByToken (OrderByTokenQuery orderByTokenQuery, string expand = null);

        /// <summary>
        /// Retrieve an order using a token
        /// </summary>
        /// <remarks>
        /// Retrieves a single order using the specified order token. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderByTokenQuery">Order by token query</param>
        /// <param name="expand">The object expansion to perform on the result.  See documentation for examples (optional)</param>
        /// <returns>ApiResponse of OrderResponse</returns>
        ApiResponse<OrderResponse> GetOrderByTokenWithHttpInfo (OrderByTokenQuery orderByTokenQuery, string expand = null);
        /// <summary>
        /// Retrieve orders
        /// </summary>
        /// <remarks>
        /// Retrieves a group of orders from the account.  If no parameters are specified, the API call will fail with a bad request error.  Always specify some parameters to limit the scope of the orders returned to ones you are truly interested in.  You will need to make multiple API calls in order to retrieve the entire result set since this API performs result set pagination. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId">Order Id (optional)</param>
        /// <param name="paymentMethod">Payment Method (optional)</param>
        /// <param name="company">Company (optional)</param>
        /// <param name="firstName">First Name (optional)</param>
        /// <param name="lastName">Last Name (optional)</param>
        /// <param name="city">City (optional)</param>
        /// <param name="stateRegion">State/Region (optional)</param>
        /// <param name="postalCode">Postal Code (optional)</param>
        /// <param name="countryCode">Country Code (ISO-3166 two letter) (optional)</param>
        /// <param name="phone">Phone (optional)</param>
        /// <param name="email">Email (optional)</param>
        /// <param name="ccEmail">CC Email (optional)</param>
        /// <param name="total">Total (optional)</param>
        /// <param name="screenBrandingThemeCode">Screen Branding Theme Code (optional)</param>
        /// <param name="storefrontHostName">StoreFront Host Name (optional)</param>
        /// <param name="creationDateBegin">Creation Date Begin (optional)</param>
        /// <param name="creationDateEnd">Creation Date End (optional)</param>
        /// <param name="paymentDateBegin">Payment Date Begin (optional)</param>
        /// <param name="paymentDateEnd">Payment Date End (optional)</param>
        /// <param name="shipmentDateBegin">Shipment Date Begin (optional)</param>
        /// <param name="shipmentDateEnd">Shipment Date End (optional)</param>
        /// <param name="rma">RMA (optional)</param>
        /// <param name="purchaseOrderNumber">Purchase Order Number (optional)</param>
        /// <param name="itemId">Item Id (optional)</param>
        /// <param name="currentStage">Current Stage (optional)</param>
        /// <param name="channelPartnerCode">Channel Partner Code (optional)</param>
        /// <param name="channelPartnerOrderId">Channel Partner Order ID (optional)</param>
        /// <param name="limit">The maximum number of records to return on this one API call. (Maximum 200) (optional, default to 100)</param>
        /// <param name="offset">Pagination of the record set.  Offset is a zero based index. (optional, default to 0)</param>
        /// <param name="sort">The sort order of the orders.  See Sorting documentation for examples of using multiple values and sorting by ascending and descending. (optional)</param>
        /// <param name="expand">The object expansion to perform on the result. (optional)</param>
        /// <returns>OrdersResponse</returns>
        OrdersResponse GetOrders (string orderId = null, string paymentMethod = null, string company = null, string firstName = null, string lastName = null, string city = null, string stateRegion = null, string postalCode = null, string countryCode = null, string phone = null, string email = null, string ccEmail = null, decimal? total = null, string screenBrandingThemeCode = null, string storefrontHostName = null, string creationDateBegin = null, string creationDateEnd = null, string paymentDateBegin = null, string paymentDateEnd = null, string shipmentDateBegin = null, string shipmentDateEnd = null, string rma = null, string purchaseOrderNumber = null, string itemId = null, string currentStage = null, string channelPartnerCode = null, string channelPartnerOrderId = null, int? limit = null, int? offset = null, string sort = null, string expand = null);

        /// <summary>
        /// Retrieve orders
        /// </summary>
        /// <remarks>
        /// Retrieves a group of orders from the account.  If no parameters are specified, the API call will fail with a bad request error.  Always specify some parameters to limit the scope of the orders returned to ones you are truly interested in.  You will need to make multiple API calls in order to retrieve the entire result set since this API performs result set pagination. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId">Order Id (optional)</param>
        /// <param name="paymentMethod">Payment Method (optional)</param>
        /// <param name="company">Company (optional)</param>
        /// <param name="firstName">First Name (optional)</param>
        /// <param name="lastName">Last Name (optional)</param>
        /// <param name="city">City (optional)</param>
        /// <param name="stateRegion">State/Region (optional)</param>
        /// <param name="postalCode">Postal Code (optional)</param>
        /// <param name="countryCode">Country Code (ISO-3166 two letter) (optional)</param>
        /// <param name="phone">Phone (optional)</param>
        /// <param name="email">Email (optional)</param>
        /// <param name="ccEmail">CC Email (optional)</param>
        /// <param name="total">Total (optional)</param>
        /// <param name="screenBrandingThemeCode">Screen Branding Theme Code (optional)</param>
        /// <param name="storefrontHostName">StoreFront Host Name (optional)</param>
        /// <param name="creationDateBegin">Creation Date Begin (optional)</param>
        /// <param name="creationDateEnd">Creation Date End (optional)</param>
        /// <param name="paymentDateBegin">Payment Date Begin (optional)</param>
        /// <param name="paymentDateEnd">Payment Date End (optional)</param>
        /// <param name="shipmentDateBegin">Shipment Date Begin (optional)</param>
        /// <param name="shipmentDateEnd">Shipment Date End (optional)</param>
        /// <param name="rma">RMA (optional)</param>
        /// <param name="purchaseOrderNumber">Purchase Order Number (optional)</param>
        /// <param name="itemId">Item Id (optional)</param>
        /// <param name="currentStage">Current Stage (optional)</param>
        /// <param name="channelPartnerCode">Channel Partner Code (optional)</param>
        /// <param name="channelPartnerOrderId">Channel Partner Order ID (optional)</param>
        /// <param name="limit">The maximum number of records to return on this one API call. (Maximum 200) (optional, default to 100)</param>
        /// <param name="offset">Pagination of the record set.  Offset is a zero based index. (optional, default to 0)</param>
        /// <param name="sort">The sort order of the orders.  See Sorting documentation for examples of using multiple values and sorting by ascending and descending. (optional)</param>
        /// <param name="expand">The object expansion to perform on the result. (optional)</param>
        /// <returns>ApiResponse of OrdersResponse</returns>
        ApiResponse<OrdersResponse> GetOrdersWithHttpInfo (string orderId = null, string paymentMethod = null, string company = null, string firstName = null, string lastName = null, string city = null, string stateRegion = null, string postalCode = null, string countryCode = null, string phone = null, string email = null, string ccEmail = null, decimal? total = null, string screenBrandingThemeCode = null, string storefrontHostName = null, string creationDateBegin = null, string creationDateEnd = null, string paymentDateBegin = null, string paymentDateEnd = null, string shipmentDateBegin = null, string shipmentDateEnd = null, string rma = null, string purchaseOrderNumber = null, string itemId = null, string currentStage = null, string channelPartnerCode = null, string channelPartnerOrderId = null, int? limit = null, int? offset = null, string sort = null, string expand = null);
        /// <summary>
        /// Retrieve order batch
        /// </summary>
        /// <remarks>
        /// Retrieves a group of orders from the account based on an array of order ids.  If more than 500 order ids are specified, the API call will fail with a bad request error. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderBatch">Order batch</param>
        /// <param name="expand">The object expansion to perform on the result. (optional)</param>
        /// <returns>OrdersResponse</returns>
        OrdersResponse GetOrdersBatch (OrderQueryBatch orderBatch, string expand = null);

        /// <summary>
        /// Retrieve order batch
        /// </summary>
        /// <remarks>
        /// Retrieves a group of orders from the account based on an array of order ids.  If more than 500 order ids are specified, the API call will fail with a bad request error. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderBatch">Order batch</param>
        /// <param name="expand">The object expansion to perform on the result. (optional)</param>
        /// <returns>ApiResponse of OrdersResponse</returns>
        ApiResponse<OrdersResponse> GetOrdersBatchWithHttpInfo (OrderQueryBatch orderBatch, string expand = null);
        /// <summary>
        /// Retrieve orders by query
        /// </summary>
        /// <remarks>
        /// Retrieves a group of orders from the account based on a query object.  If no parameters are specified, the API call will fail with a bad request error.  Always specify some parameters to limit the scope of the orders returned to ones you are truly interested in.  You will need to make multiple API calls in order to retrieve the entire result set since this API performs result set pagination. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderQuery">Order query</param>
        /// <param name="limit">The maximum number of records to return on this one API call. (Maximum 200) (optional, default to 100)</param>
        /// <param name="offset">Pagination of the record set.  Offset is a zero based index. (optional, default to 0)</param>
        /// <param name="sort">The sort order of the orders.  See Sorting documentation for examples of using multiple values and sorting by ascending and descending. (optional)</param>
        /// <param name="expand">The object expansion to perform on the result. (optional)</param>
        /// <returns>OrdersResponse</returns>
        OrdersResponse GetOrdersByQuery (OrderQuery orderQuery, int? limit = null, int? offset = null, string sort = null, string expand = null);

        /// <summary>
        /// Retrieve orders by query
        /// </summary>
        /// <remarks>
        /// Retrieves a group of orders from the account based on a query object.  If no parameters are specified, the API call will fail with a bad request error.  Always specify some parameters to limit the scope of the orders returned to ones you are truly interested in.  You will need to make multiple API calls in order to retrieve the entire result set since this API performs result set pagination. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderQuery">Order query</param>
        /// <param name="limit">The maximum number of records to return on this one API call. (Maximum 200) (optional, default to 100)</param>
        /// <param name="offset">Pagination of the record set.  Offset is a zero based index. (optional, default to 0)</param>
        /// <param name="sort">The sort order of the orders.  See Sorting documentation for examples of using multiple values and sorting by ascending and descending. (optional)</param>
        /// <param name="expand">The object expansion to perform on the result. (optional)</param>
        /// <returns>ApiResponse of OrdersResponse</returns>
        ApiResponse<OrdersResponse> GetOrdersByQueryWithHttpInfo (OrderQuery orderQuery, int? limit = null, int? offset = null, string sort = null, string expand = null);
        /// <summary>
        /// Insert an order
        /// </summary>
        /// <remarks>
        /// Inserts a new order on the UltraCart account.  This is probably NOT the method you want.  This is for channel orders.  For regular orders the customer is entering, use the CheckoutApi.  It has many, many more features, checks, and validations. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="order">Order to insert</param>
        /// <param name="expand">The object expansion to perform on the result.  See documentation for examples (optional)</param>
        /// <returns>OrderResponse</returns>
        OrderResponse InsertOrder (Order order, string expand = null);

        /// <summary>
        /// Insert an order
        /// </summary>
        /// <remarks>
        /// Inserts a new order on the UltraCart account.  This is probably NOT the method you want.  This is for channel orders.  For regular orders the customer is entering, use the CheckoutApi.  It has many, many more features, checks, and validations. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="order">Order to insert</param>
        /// <param name="expand">The object expansion to perform on the result.  See documentation for examples (optional)</param>
        /// <returns>ApiResponse of OrderResponse</returns>
        ApiResponse<OrderResponse> InsertOrderWithHttpInfo (Order order, string expand = null);
        /// <summary>
        /// Process payment
        /// </summary>
        /// <remarks>
        /// Process payment on order 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId">The order id to process payment on</param>
        /// <param name="processPaymentRequest">Process payment parameters</param>
        /// <returns>OrderProcessPaymentResponse</returns>
        OrderProcessPaymentResponse ProcessPayment (string orderId, OrderProcessPaymentRequest processPaymentRequest);

        /// <summary>
        /// Process payment
        /// </summary>
        /// <remarks>
        /// Process payment on order 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId">The order id to process payment on</param>
        /// <param name="processPaymentRequest">Process payment parameters</param>
        /// <returns>ApiResponse of OrderProcessPaymentResponse</returns>
        ApiResponse<OrderProcessPaymentResponse> ProcessPaymentWithHttpInfo (string orderId, OrderProcessPaymentRequest processPaymentRequest);
        /// <summary>
        /// Refund an order
        /// </summary>
        /// <remarks>
        /// Perform a refund operation on an order and then update the order if successful 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="order">Order to refund</param>
        /// <param name="orderId">The order id to refund.</param>
        /// <param name="rejectAfterRefund">Reject order after refund (optional, default to false)</param>
        /// <param name="skipCustomerNotification">Skip customer email notification (optional, default to false)</param>
        /// <param name="autoOrderCancel">Cancel associated auto orders (optional, default to false)</param>
        /// <param name="manualRefund">Consider a manual refund done externally (optional, default to false)</param>
        /// <param name="reverseAffiliateTransactions">Reverse affiliate transactions (optional, default to true)</param>
        /// <param name="expand">The object expansion to perform on the result.  See documentation for examples (optional)</param>
        /// <returns>OrderResponse</returns>
        OrderResponse RefundOrder (Order order, string orderId, bool? rejectAfterRefund = null, bool? skipCustomerNotification = null, bool? autoOrderCancel = null, bool? manualRefund = null, bool? reverseAffiliateTransactions = null, string expand = null);

        /// <summary>
        /// Refund an order
        /// </summary>
        /// <remarks>
        /// Perform a refund operation on an order and then update the order if successful 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="order">Order to refund</param>
        /// <param name="orderId">The order id to refund.</param>
        /// <param name="rejectAfterRefund">Reject order after refund (optional, default to false)</param>
        /// <param name="skipCustomerNotification">Skip customer email notification (optional, default to false)</param>
        /// <param name="autoOrderCancel">Cancel associated auto orders (optional, default to false)</param>
        /// <param name="manualRefund">Consider a manual refund done externally (optional, default to false)</param>
        /// <param name="reverseAffiliateTransactions">Reverse affiliate transactions (optional, default to true)</param>
        /// <param name="expand">The object expansion to perform on the result.  See documentation for examples (optional)</param>
        /// <returns>ApiResponse of OrderResponse</returns>
        ApiResponse<OrderResponse> RefundOrderWithHttpInfo (Order order, string orderId, bool? rejectAfterRefund = null, bool? skipCustomerNotification = null, bool? autoOrderCancel = null, bool? manualRefund = null, bool? reverseAffiliateTransactions = null, string expand = null);
        /// <summary>
        /// Replacement order
        /// </summary>
        /// <remarks>
        /// Create a replacement order based upon a previous order 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId">The order id to generate a replacement for.</param>
        /// <param name="replacement">Replacement order details</param>
        /// <returns>OrderReplacementResponse</returns>
        OrderReplacementResponse Replacement (string orderId, OrderReplacement replacement);

        /// <summary>
        /// Replacement order
        /// </summary>
        /// <remarks>
        /// Create a replacement order based upon a previous order 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId">The order id to generate a replacement for.</param>
        /// <param name="replacement">Replacement order details</param>
        /// <returns>ApiResponse of OrderReplacementResponse</returns>
        ApiResponse<OrderReplacementResponse> ReplacementWithHttpInfo (string orderId, OrderReplacement replacement);
        /// <summary>
        /// Resend receipt
        /// </summary>
        /// <remarks>
        /// Resend the receipt for an order on the UltraCart account. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId">The order id to resend the receipt for.</param>
        /// <returns>BaseResponse</returns>
        BaseResponse ResendReceipt (string orderId);

        /// <summary>
        /// Resend receipt
        /// </summary>
        /// <remarks>
        /// Resend the receipt for an order on the UltraCart account. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId">The order id to resend the receipt for.</param>
        /// <returns>ApiResponse of BaseResponse</returns>
        ApiResponse<BaseResponse> ResendReceiptWithHttpInfo (string orderId);
        /// <summary>
        /// Resend shipment confirmation
        /// </summary>
        /// <remarks>
        /// Resend shipment confirmation for an order on the UltraCart account. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId">The order id to resend the shipment notification for.</param>
        /// <returns>BaseResponse</returns>
        BaseResponse ResendShipmentConfirmation (string orderId);

        /// <summary>
        /// Resend shipment confirmation
        /// </summary>
        /// <remarks>
        /// Resend shipment confirmation for an order on the UltraCart account. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId">The order id to resend the shipment notification for.</param>
        /// <returns>ApiResponse of BaseResponse</returns>
        ApiResponse<BaseResponse> ResendShipmentConfirmationWithHttpInfo (string orderId);
        /// <summary>
        /// Update A/R Retry Configuration
        /// </summary>
        /// <remarks>
        /// Update A/R Retry Configuration.  This is primarily an internal API call.  It is doubtful you would ever need to use it. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="retryConfig">AccountsReceivableRetryConfig object</param>
        /// <returns>BaseResponse</returns>
        BaseResponse UpdateAccountsReceivableRetryConfig (AccountsReceivableRetryConfig retryConfig);

        /// <summary>
        /// Update A/R Retry Configuration
        /// </summary>
        /// <remarks>
        /// Update A/R Retry Configuration.  This is primarily an internal API call.  It is doubtful you would ever need to use it. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="retryConfig">AccountsReceivableRetryConfig object</param>
        /// <returns>ApiResponse of BaseResponse</returns>
        ApiResponse<BaseResponse> UpdateAccountsReceivableRetryConfigWithHttpInfo (AccountsReceivableRetryConfig retryConfig);
        /// <summary>
        /// Update an order
        /// </summary>
        /// <remarks>
        /// Update a new order on the UltraCart account.  This is probably NOT the method you want.  It is rare to update a completed order.  This will not trigger charges, emails, or any other automation. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="order">Order to update</param>
        /// <param name="orderId">The order id to update.</param>
        /// <param name="expand">The object expansion to perform on the result.  See documentation for examples (optional)</param>
        /// <returns>OrderResponse</returns>
        OrderResponse UpdateOrder (Order order, string orderId, string expand = null);

        /// <summary>
        /// Update an order
        /// </summary>
        /// <remarks>
        /// Update a new order on the UltraCart account.  This is probably NOT the method you want.  It is rare to update a completed order.  This will not trigger charges, emails, or any other automation. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="order">Order to update</param>
        /// <param name="orderId">The order id to update.</param>
        /// <param name="expand">The object expansion to perform on the result.  See documentation for examples (optional)</param>
        /// <returns>ApiResponse of OrderResponse</returns>
        ApiResponse<OrderResponse> UpdateOrderWithHttpInfo (Order order, string orderId, string expand = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Adjusts an order total
        /// </summary>
        /// <remarks>
        /// Adjusts an order total.  Adjusts individual items appropriately and considers taxes.  Desired total should be provided in the same currency as the order and must be less than the current total and greater than zero.  This call will change the order total.  It returns true if the desired total is achieved.  If the goal seeking algorithm falls short (usually by pennies), this method returns back false.  View the merchant notes for the order for further details. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId">The order id to cancel.</param>
        /// <param name="desiredTotal">The desired total with no formatting. example 123.45</param>
        /// <returns>Task of BaseResponse</returns>
        System.Threading.Tasks.Task<BaseResponse> AdjustOrderTotalAsync (string orderId, string desiredTotal);

        /// <summary>
        /// Adjusts an order total
        /// </summary>
        /// <remarks>
        /// Adjusts an order total.  Adjusts individual items appropriately and considers taxes.  Desired total should be provided in the same currency as the order and must be less than the current total and greater than zero.  This call will change the order total.  It returns true if the desired total is achieved.  If the goal seeking algorithm falls short (usually by pennies), this method returns back false.  View the merchant notes for the order for further details. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId">The order id to cancel.</param>
        /// <param name="desiredTotal">The desired total with no formatting. example 123.45</param>
        /// <returns>Task of ApiResponse (BaseResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<BaseResponse>> AdjustOrderTotalAsyncWithHttpInfo (string orderId, string desiredTotal);
        /// <summary>
        /// Cancel an order
        /// </summary>
        /// <remarks>
        /// Cancel an order on the UltraCart account.  If the success flag is false, then consult the error message for why it failed. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId">The order id to cancel.</param>
        /// <returns>Task of BaseResponse</returns>
        System.Threading.Tasks.Task<BaseResponse> CancelOrderAsync (string orderId);

        /// <summary>
        /// Cancel an order
        /// </summary>
        /// <remarks>
        /// Cancel an order on the UltraCart account.  If the success flag is false, then consult the error message for why it failed. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId">The order id to cancel.</param>
        /// <returns>Task of ApiResponse (BaseResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<BaseResponse>> CancelOrderAsyncWithHttpInfo (string orderId);
        /// <summary>
        /// Delete an order
        /// </summary>
        /// <remarks>
        /// Delete an order on the UltraCart account. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId">The order id to delete.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteOrderAsync (string orderId);

        /// <summary>
        /// Delete an order
        /// </summary>
        /// <remarks>
        /// Delete an order on the UltraCart account. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId">The order id to delete.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteOrderAsyncWithHttpInfo (string orderId);
        /// <summary>
        /// Duplicate an order
        /// </summary>
        /// <remarks>
        /// Perform a duplicate of the specified order_id and return a new order located in Accounts Receivable. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId">The order id to duplicate.</param>
        /// <param name="expand">The object expansion to perform on the result.  See documentation for examples (optional)</param>
        /// <returns>Task of OrderResponse</returns>
        System.Threading.Tasks.Task<OrderResponse> DuplicateOrderAsync (string orderId, string expand = null);

        /// <summary>
        /// Duplicate an order
        /// </summary>
        /// <remarks>
        /// Perform a duplicate of the specified order_id and return a new order located in Accounts Receivable. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId">The order id to duplicate.</param>
        /// <param name="expand">The object expansion to perform on the result.  See documentation for examples (optional)</param>
        /// <returns>Task of ApiResponse (OrderResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<OrderResponse>> DuplicateOrderAsyncWithHttpInfo (string orderId, string expand = null);
        /// <summary>
        /// Format order
        /// </summary>
        /// <remarks>
        /// Format the order for display at text or html 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId">The order id to format</param>
        /// <param name="formatOptions">Format options</param>
        /// <returns>Task of OrderFormatResponse</returns>
        System.Threading.Tasks.Task<OrderFormatResponse> FormatAsync (string orderId, OrderFormat formatOptions);

        /// <summary>
        /// Format order
        /// </summary>
        /// <remarks>
        /// Format the order for display at text or html 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId">The order id to format</param>
        /// <param name="formatOptions">Format options</param>
        /// <returns>Task of ApiResponse (OrderFormatResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<OrderFormatResponse>> FormatAsyncWithHttpInfo (string orderId, OrderFormat formatOptions);
        /// <summary>
        /// Generate an order token for a given order id
        /// </summary>
        /// <remarks>
        /// Retrieves a single order token for a given order id.  The token can be used with the getOrderByToken API. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId">The order id to generate a token for.</param>
        /// <returns>Task of OrderTokenResponse</returns>
        System.Threading.Tasks.Task<OrderTokenResponse> GenerateOrderTokenAsync (string orderId);

        /// <summary>
        /// Generate an order token for a given order id
        /// </summary>
        /// <remarks>
        /// Retrieves a single order token for a given order id.  The token can be used with the getOrderByToken API. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId">The order id to generate a token for.</param>
        /// <returns>Task of ApiResponse (OrderTokenResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<OrderTokenResponse>> GenerateOrderTokenAsyncWithHttpInfo (string orderId);
        /// <summary>
        /// Generate a packing slip for this order across all distribution centers.
        /// </summary>
        /// <remarks>
        /// The packing slip PDF that is returned is base 64 encoded 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId">Order ID</param>
        /// <returns>Task of OrderPackingSlipResponse</returns>
        System.Threading.Tasks.Task<OrderPackingSlipResponse> GeneratePackingSlipAllDCAsync (string orderId);

        /// <summary>
        /// Generate a packing slip for this order across all distribution centers.
        /// </summary>
        /// <remarks>
        /// The packing slip PDF that is returned is base 64 encoded 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId">Order ID</param>
        /// <returns>Task of ApiResponse (OrderPackingSlipResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<OrderPackingSlipResponse>> GeneratePackingSlipAllDCAsyncWithHttpInfo (string orderId);
        /// <summary>
        /// Generate a packing slip for this order for the given distribution center.
        /// </summary>
        /// <remarks>
        /// The packing slip PDF that is returned is base 64 encoded 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="distributionCenterCode">Distribution center code</param>
        /// <param name="orderId">Order ID</param>
        /// <returns>Task of OrderPackingSlipResponse</returns>
        System.Threading.Tasks.Task<OrderPackingSlipResponse> GeneratePackingSlipSpecificDCAsync (string distributionCenterCode, string orderId);

        /// <summary>
        /// Generate a packing slip for this order for the given distribution center.
        /// </summary>
        /// <remarks>
        /// The packing slip PDF that is returned is base 64 encoded 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="distributionCenterCode">Distribution center code</param>
        /// <param name="orderId">Order ID</param>
        /// <returns>Task of ApiResponse (OrderPackingSlipResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<OrderPackingSlipResponse>> GeneratePackingSlipSpecificDCAsyncWithHttpInfo (string distributionCenterCode, string orderId);
        /// <summary>
        /// Retrieve A/R Retry Configuration
        /// </summary>
        /// <remarks>
        /// Retrieve A/R Retry Configuration. This is primarily an internal API call.  It is doubtful you would ever need to use it. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of AccountsReceivableRetryConfigResponse</returns>
        System.Threading.Tasks.Task<AccountsReceivableRetryConfigResponse> GetAccountsReceivableRetryConfigAsync ();

        /// <summary>
        /// Retrieve A/R Retry Configuration
        /// </summary>
        /// <remarks>
        /// Retrieve A/R Retry Configuration. This is primarily an internal API call.  It is doubtful you would ever need to use it. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (AccountsReceivableRetryConfigResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AccountsReceivableRetryConfigResponse>> GetAccountsReceivableRetryConfigAsyncWithHttpInfo ();
        /// <summary>
        /// Retrieve A/R Retry Statistics
        /// </summary>
        /// <remarks>
        /// Retrieve A/R Retry Statistics. This is primarily an internal API call.  It is doubtful you would ever need to use it. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="from"> (optional)</param>
        /// <param name="to"> (optional)</param>
        /// <returns>Task of AccountsReceivableRetryStatsResponse</returns>
        System.Threading.Tasks.Task<AccountsReceivableRetryStatsResponse> GetAccountsReceivableRetryStatsAsync (string from = null, string to = null);

        /// <summary>
        /// Retrieve A/R Retry Statistics
        /// </summary>
        /// <remarks>
        /// Retrieve A/R Retry Statistics. This is primarily an internal API call.  It is doubtful you would ever need to use it. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="from"> (optional)</param>
        /// <param name="to"> (optional)</param>
        /// <returns>Task of ApiResponse (AccountsReceivableRetryStatsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AccountsReceivableRetryStatsResponse>> GetAccountsReceivableRetryStatsAsyncWithHttpInfo (string from = null, string to = null);
        /// <summary>
        /// Retrieve an order
        /// </summary>
        /// <remarks>
        /// Retrieves a single order using the specified order id. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId">The order id to retrieve.</param>
        /// <param name="expand">The object expansion to perform on the result.  See documentation for examples (optional)</param>
        /// <returns>Task of OrderResponse</returns>
        System.Threading.Tasks.Task<OrderResponse> GetOrderAsync (string orderId, string expand = null);

        /// <summary>
        /// Retrieve an order
        /// </summary>
        /// <remarks>
        /// Retrieves a single order using the specified order id. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId">The order id to retrieve.</param>
        /// <param name="expand">The object expansion to perform on the result.  See documentation for examples (optional)</param>
        /// <returns>Task of ApiResponse (OrderResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<OrderResponse>> GetOrderAsyncWithHttpInfo (string orderId, string expand = null);
        /// <summary>
        /// Retrieve an order using a token
        /// </summary>
        /// <remarks>
        /// Retrieves a single order using the specified order token. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderByTokenQuery">Order by token query</param>
        /// <param name="expand">The object expansion to perform on the result.  See documentation for examples (optional)</param>
        /// <returns>Task of OrderResponse</returns>
        System.Threading.Tasks.Task<OrderResponse> GetOrderByTokenAsync (OrderByTokenQuery orderByTokenQuery, string expand = null);

        /// <summary>
        /// Retrieve an order using a token
        /// </summary>
        /// <remarks>
        /// Retrieves a single order using the specified order token. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderByTokenQuery">Order by token query</param>
        /// <param name="expand">The object expansion to perform on the result.  See documentation for examples (optional)</param>
        /// <returns>Task of ApiResponse (OrderResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<OrderResponse>> GetOrderByTokenAsyncWithHttpInfo (OrderByTokenQuery orderByTokenQuery, string expand = null);
        /// <summary>
        /// Retrieve orders
        /// </summary>
        /// <remarks>
        /// Retrieves a group of orders from the account.  If no parameters are specified, the API call will fail with a bad request error.  Always specify some parameters to limit the scope of the orders returned to ones you are truly interested in.  You will need to make multiple API calls in order to retrieve the entire result set since this API performs result set pagination. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId">Order Id (optional)</param>
        /// <param name="paymentMethod">Payment Method (optional)</param>
        /// <param name="company">Company (optional)</param>
        /// <param name="firstName">First Name (optional)</param>
        /// <param name="lastName">Last Name (optional)</param>
        /// <param name="city">City (optional)</param>
        /// <param name="stateRegion">State/Region (optional)</param>
        /// <param name="postalCode">Postal Code (optional)</param>
        /// <param name="countryCode">Country Code (ISO-3166 two letter) (optional)</param>
        /// <param name="phone">Phone (optional)</param>
        /// <param name="email">Email (optional)</param>
        /// <param name="ccEmail">CC Email (optional)</param>
        /// <param name="total">Total (optional)</param>
        /// <param name="screenBrandingThemeCode">Screen Branding Theme Code (optional)</param>
        /// <param name="storefrontHostName">StoreFront Host Name (optional)</param>
        /// <param name="creationDateBegin">Creation Date Begin (optional)</param>
        /// <param name="creationDateEnd">Creation Date End (optional)</param>
        /// <param name="paymentDateBegin">Payment Date Begin (optional)</param>
        /// <param name="paymentDateEnd">Payment Date End (optional)</param>
        /// <param name="shipmentDateBegin">Shipment Date Begin (optional)</param>
        /// <param name="shipmentDateEnd">Shipment Date End (optional)</param>
        /// <param name="rma">RMA (optional)</param>
        /// <param name="purchaseOrderNumber">Purchase Order Number (optional)</param>
        /// <param name="itemId">Item Id (optional)</param>
        /// <param name="currentStage">Current Stage (optional)</param>
        /// <param name="channelPartnerCode">Channel Partner Code (optional)</param>
        /// <param name="channelPartnerOrderId">Channel Partner Order ID (optional)</param>
        /// <param name="limit">The maximum number of records to return on this one API call. (Maximum 200) (optional, default to 100)</param>
        /// <param name="offset">Pagination of the record set.  Offset is a zero based index. (optional, default to 0)</param>
        /// <param name="sort">The sort order of the orders.  See Sorting documentation for examples of using multiple values and sorting by ascending and descending. (optional)</param>
        /// <param name="expand">The object expansion to perform on the result. (optional)</param>
        /// <returns>Task of OrdersResponse</returns>
        System.Threading.Tasks.Task<OrdersResponse> GetOrdersAsync (string orderId = null, string paymentMethod = null, string company = null, string firstName = null, string lastName = null, string city = null, string stateRegion = null, string postalCode = null, string countryCode = null, string phone = null, string email = null, string ccEmail = null, decimal? total = null, string screenBrandingThemeCode = null, string storefrontHostName = null, string creationDateBegin = null, string creationDateEnd = null, string paymentDateBegin = null, string paymentDateEnd = null, string shipmentDateBegin = null, string shipmentDateEnd = null, string rma = null, string purchaseOrderNumber = null, string itemId = null, string currentStage = null, string channelPartnerCode = null, string channelPartnerOrderId = null, int? limit = null, int? offset = null, string sort = null, string expand = null);

        /// <summary>
        /// Retrieve orders
        /// </summary>
        /// <remarks>
        /// Retrieves a group of orders from the account.  If no parameters are specified, the API call will fail with a bad request error.  Always specify some parameters to limit the scope of the orders returned to ones you are truly interested in.  You will need to make multiple API calls in order to retrieve the entire result set since this API performs result set pagination. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId">Order Id (optional)</param>
        /// <param name="paymentMethod">Payment Method (optional)</param>
        /// <param name="company">Company (optional)</param>
        /// <param name="firstName">First Name (optional)</param>
        /// <param name="lastName">Last Name (optional)</param>
        /// <param name="city">City (optional)</param>
        /// <param name="stateRegion">State/Region (optional)</param>
        /// <param name="postalCode">Postal Code (optional)</param>
        /// <param name="countryCode">Country Code (ISO-3166 two letter) (optional)</param>
        /// <param name="phone">Phone (optional)</param>
        /// <param name="email">Email (optional)</param>
        /// <param name="ccEmail">CC Email (optional)</param>
        /// <param name="total">Total (optional)</param>
        /// <param name="screenBrandingThemeCode">Screen Branding Theme Code (optional)</param>
        /// <param name="storefrontHostName">StoreFront Host Name (optional)</param>
        /// <param name="creationDateBegin">Creation Date Begin (optional)</param>
        /// <param name="creationDateEnd">Creation Date End (optional)</param>
        /// <param name="paymentDateBegin">Payment Date Begin (optional)</param>
        /// <param name="paymentDateEnd">Payment Date End (optional)</param>
        /// <param name="shipmentDateBegin">Shipment Date Begin (optional)</param>
        /// <param name="shipmentDateEnd">Shipment Date End (optional)</param>
        /// <param name="rma">RMA (optional)</param>
        /// <param name="purchaseOrderNumber">Purchase Order Number (optional)</param>
        /// <param name="itemId">Item Id (optional)</param>
        /// <param name="currentStage">Current Stage (optional)</param>
        /// <param name="channelPartnerCode">Channel Partner Code (optional)</param>
        /// <param name="channelPartnerOrderId">Channel Partner Order ID (optional)</param>
        /// <param name="limit">The maximum number of records to return on this one API call. (Maximum 200) (optional, default to 100)</param>
        /// <param name="offset">Pagination of the record set.  Offset is a zero based index. (optional, default to 0)</param>
        /// <param name="sort">The sort order of the orders.  See Sorting documentation for examples of using multiple values and sorting by ascending and descending. (optional)</param>
        /// <param name="expand">The object expansion to perform on the result. (optional)</param>
        /// <returns>Task of ApiResponse (OrdersResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<OrdersResponse>> GetOrdersAsyncWithHttpInfo (string orderId = null, string paymentMethod = null, string company = null, string firstName = null, string lastName = null, string city = null, string stateRegion = null, string postalCode = null, string countryCode = null, string phone = null, string email = null, string ccEmail = null, decimal? total = null, string screenBrandingThemeCode = null, string storefrontHostName = null, string creationDateBegin = null, string creationDateEnd = null, string paymentDateBegin = null, string paymentDateEnd = null, string shipmentDateBegin = null, string shipmentDateEnd = null, string rma = null, string purchaseOrderNumber = null, string itemId = null, string currentStage = null, string channelPartnerCode = null, string channelPartnerOrderId = null, int? limit = null, int? offset = null, string sort = null, string expand = null);
        /// <summary>
        /// Retrieve order batch
        /// </summary>
        /// <remarks>
        /// Retrieves a group of orders from the account based on an array of order ids.  If more than 500 order ids are specified, the API call will fail with a bad request error. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderBatch">Order batch</param>
        /// <param name="expand">The object expansion to perform on the result. (optional)</param>
        /// <returns>Task of OrdersResponse</returns>
        System.Threading.Tasks.Task<OrdersResponse> GetOrdersBatchAsync (OrderQueryBatch orderBatch, string expand = null);

        /// <summary>
        /// Retrieve order batch
        /// </summary>
        /// <remarks>
        /// Retrieves a group of orders from the account based on an array of order ids.  If more than 500 order ids are specified, the API call will fail with a bad request error. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderBatch">Order batch</param>
        /// <param name="expand">The object expansion to perform on the result. (optional)</param>
        /// <returns>Task of ApiResponse (OrdersResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<OrdersResponse>> GetOrdersBatchAsyncWithHttpInfo (OrderQueryBatch orderBatch, string expand = null);
        /// <summary>
        /// Retrieve orders by query
        /// </summary>
        /// <remarks>
        /// Retrieves a group of orders from the account based on a query object.  If no parameters are specified, the API call will fail with a bad request error.  Always specify some parameters to limit the scope of the orders returned to ones you are truly interested in.  You will need to make multiple API calls in order to retrieve the entire result set since this API performs result set pagination. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderQuery">Order query</param>
        /// <param name="limit">The maximum number of records to return on this one API call. (Maximum 200) (optional, default to 100)</param>
        /// <param name="offset">Pagination of the record set.  Offset is a zero based index. (optional, default to 0)</param>
        /// <param name="sort">The sort order of the orders.  See Sorting documentation for examples of using multiple values and sorting by ascending and descending. (optional)</param>
        /// <param name="expand">The object expansion to perform on the result. (optional)</param>
        /// <returns>Task of OrdersResponse</returns>
        System.Threading.Tasks.Task<OrdersResponse> GetOrdersByQueryAsync (OrderQuery orderQuery, int? limit = null, int? offset = null, string sort = null, string expand = null);

        /// <summary>
        /// Retrieve orders by query
        /// </summary>
        /// <remarks>
        /// Retrieves a group of orders from the account based on a query object.  If no parameters are specified, the API call will fail with a bad request error.  Always specify some parameters to limit the scope of the orders returned to ones you are truly interested in.  You will need to make multiple API calls in order to retrieve the entire result set since this API performs result set pagination. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderQuery">Order query</param>
        /// <param name="limit">The maximum number of records to return on this one API call. (Maximum 200) (optional, default to 100)</param>
        /// <param name="offset">Pagination of the record set.  Offset is a zero based index. (optional, default to 0)</param>
        /// <param name="sort">The sort order of the orders.  See Sorting documentation for examples of using multiple values and sorting by ascending and descending. (optional)</param>
        /// <param name="expand">The object expansion to perform on the result. (optional)</param>
        /// <returns>Task of ApiResponse (OrdersResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<OrdersResponse>> GetOrdersByQueryAsyncWithHttpInfo (OrderQuery orderQuery, int? limit = null, int? offset = null, string sort = null, string expand = null);
        /// <summary>
        /// Insert an order
        /// </summary>
        /// <remarks>
        /// Inserts a new order on the UltraCart account.  This is probably NOT the method you want.  This is for channel orders.  For regular orders the customer is entering, use the CheckoutApi.  It has many, many more features, checks, and validations. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="order">Order to insert</param>
        /// <param name="expand">The object expansion to perform on the result.  See documentation for examples (optional)</param>
        /// <returns>Task of OrderResponse</returns>
        System.Threading.Tasks.Task<OrderResponse> InsertOrderAsync (Order order, string expand = null);

        /// <summary>
        /// Insert an order
        /// </summary>
        /// <remarks>
        /// Inserts a new order on the UltraCart account.  This is probably NOT the method you want.  This is for channel orders.  For regular orders the customer is entering, use the CheckoutApi.  It has many, many more features, checks, and validations. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="order">Order to insert</param>
        /// <param name="expand">The object expansion to perform on the result.  See documentation for examples (optional)</param>
        /// <returns>Task of ApiResponse (OrderResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<OrderResponse>> InsertOrderAsyncWithHttpInfo (Order order, string expand = null);
        /// <summary>
        /// Process payment
        /// </summary>
        /// <remarks>
        /// Process payment on order 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId">The order id to process payment on</param>
        /// <param name="processPaymentRequest">Process payment parameters</param>
        /// <returns>Task of OrderProcessPaymentResponse</returns>
        System.Threading.Tasks.Task<OrderProcessPaymentResponse> ProcessPaymentAsync (string orderId, OrderProcessPaymentRequest processPaymentRequest);

        /// <summary>
        /// Process payment
        /// </summary>
        /// <remarks>
        /// Process payment on order 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId">The order id to process payment on</param>
        /// <param name="processPaymentRequest">Process payment parameters</param>
        /// <returns>Task of ApiResponse (OrderProcessPaymentResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<OrderProcessPaymentResponse>> ProcessPaymentAsyncWithHttpInfo (string orderId, OrderProcessPaymentRequest processPaymentRequest);
        /// <summary>
        /// Refund an order
        /// </summary>
        /// <remarks>
        /// Perform a refund operation on an order and then update the order if successful 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="order">Order to refund</param>
        /// <param name="orderId">The order id to refund.</param>
        /// <param name="rejectAfterRefund">Reject order after refund (optional, default to false)</param>
        /// <param name="skipCustomerNotification">Skip customer email notification (optional, default to false)</param>
        /// <param name="autoOrderCancel">Cancel associated auto orders (optional, default to false)</param>
        /// <param name="manualRefund">Consider a manual refund done externally (optional, default to false)</param>
        /// <param name="reverseAffiliateTransactions">Reverse affiliate transactions (optional, default to true)</param>
        /// <param name="expand">The object expansion to perform on the result.  See documentation for examples (optional)</param>
        /// <returns>Task of OrderResponse</returns>
        System.Threading.Tasks.Task<OrderResponse> RefundOrderAsync (Order order, string orderId, bool? rejectAfterRefund = null, bool? skipCustomerNotification = null, bool? autoOrderCancel = null, bool? manualRefund = null, bool? reverseAffiliateTransactions = null, string expand = null);

        /// <summary>
        /// Refund an order
        /// </summary>
        /// <remarks>
        /// Perform a refund operation on an order and then update the order if successful 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="order">Order to refund</param>
        /// <param name="orderId">The order id to refund.</param>
        /// <param name="rejectAfterRefund">Reject order after refund (optional, default to false)</param>
        /// <param name="skipCustomerNotification">Skip customer email notification (optional, default to false)</param>
        /// <param name="autoOrderCancel">Cancel associated auto orders (optional, default to false)</param>
        /// <param name="manualRefund">Consider a manual refund done externally (optional, default to false)</param>
        /// <param name="reverseAffiliateTransactions">Reverse affiliate transactions (optional, default to true)</param>
        /// <param name="expand">The object expansion to perform on the result.  See documentation for examples (optional)</param>
        /// <returns>Task of ApiResponse (OrderResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<OrderResponse>> RefundOrderAsyncWithHttpInfo (Order order, string orderId, bool? rejectAfterRefund = null, bool? skipCustomerNotification = null, bool? autoOrderCancel = null, bool? manualRefund = null, bool? reverseAffiliateTransactions = null, string expand = null);
        /// <summary>
        /// Replacement order
        /// </summary>
        /// <remarks>
        /// Create a replacement order based upon a previous order 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId">The order id to generate a replacement for.</param>
        /// <param name="replacement">Replacement order details</param>
        /// <returns>Task of OrderReplacementResponse</returns>
        System.Threading.Tasks.Task<OrderReplacementResponse> ReplacementAsync (string orderId, OrderReplacement replacement);

        /// <summary>
        /// Replacement order
        /// </summary>
        /// <remarks>
        /// Create a replacement order based upon a previous order 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId">The order id to generate a replacement for.</param>
        /// <param name="replacement">Replacement order details</param>
        /// <returns>Task of ApiResponse (OrderReplacementResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<OrderReplacementResponse>> ReplacementAsyncWithHttpInfo (string orderId, OrderReplacement replacement);
        /// <summary>
        /// Resend receipt
        /// </summary>
        /// <remarks>
        /// Resend the receipt for an order on the UltraCart account. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId">The order id to resend the receipt for.</param>
        /// <returns>Task of BaseResponse</returns>
        System.Threading.Tasks.Task<BaseResponse> ResendReceiptAsync (string orderId);

        /// <summary>
        /// Resend receipt
        /// </summary>
        /// <remarks>
        /// Resend the receipt for an order on the UltraCart account. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId">The order id to resend the receipt for.</param>
        /// <returns>Task of ApiResponse (BaseResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<BaseResponse>> ResendReceiptAsyncWithHttpInfo (string orderId);
        /// <summary>
        /// Resend shipment confirmation
        /// </summary>
        /// <remarks>
        /// Resend shipment confirmation for an order on the UltraCart account. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId">The order id to resend the shipment notification for.</param>
        /// <returns>Task of BaseResponse</returns>
        System.Threading.Tasks.Task<BaseResponse> ResendShipmentConfirmationAsync (string orderId);

        /// <summary>
        /// Resend shipment confirmation
        /// </summary>
        /// <remarks>
        /// Resend shipment confirmation for an order on the UltraCart account. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId">The order id to resend the shipment notification for.</param>
        /// <returns>Task of ApiResponse (BaseResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<BaseResponse>> ResendShipmentConfirmationAsyncWithHttpInfo (string orderId);
        /// <summary>
        /// Update A/R Retry Configuration
        /// </summary>
        /// <remarks>
        /// Update A/R Retry Configuration.  This is primarily an internal API call.  It is doubtful you would ever need to use it. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="retryConfig">AccountsReceivableRetryConfig object</param>
        /// <returns>Task of BaseResponse</returns>
        System.Threading.Tasks.Task<BaseResponse> UpdateAccountsReceivableRetryConfigAsync (AccountsReceivableRetryConfig retryConfig);

        /// <summary>
        /// Update A/R Retry Configuration
        /// </summary>
        /// <remarks>
        /// Update A/R Retry Configuration.  This is primarily an internal API call.  It is doubtful you would ever need to use it. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="retryConfig">AccountsReceivableRetryConfig object</param>
        /// <returns>Task of ApiResponse (BaseResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<BaseResponse>> UpdateAccountsReceivableRetryConfigAsyncWithHttpInfo (AccountsReceivableRetryConfig retryConfig);
        /// <summary>
        /// Update an order
        /// </summary>
        /// <remarks>
        /// Update a new order on the UltraCart account.  This is probably NOT the method you want.  It is rare to update a completed order.  This will not trigger charges, emails, or any other automation. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="order">Order to update</param>
        /// <param name="orderId">The order id to update.</param>
        /// <param name="expand">The object expansion to perform on the result.  See documentation for examples (optional)</param>
        /// <returns>Task of OrderResponse</returns>
        System.Threading.Tasks.Task<OrderResponse> UpdateOrderAsync (Order order, string orderId, string expand = null);

        /// <summary>
        /// Update an order
        /// </summary>
        /// <remarks>
        /// Update a new order on the UltraCart account.  This is probably NOT the method you want.  It is rare to update a completed order.  This will not trigger charges, emails, or any other automation. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="order">Order to update</param>
        /// <param name="orderId">The order id to update.</param>
        /// <param name="expand">The object expansion to perform on the result.  See documentation for examples (optional)</param>
        /// <returns>Task of ApiResponse (OrderResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<OrderResponse>> UpdateOrderAsyncWithHttpInfo (Order order, string orderId, string expand = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class OrderApi : IOrderApi
    {
        private com.ultracart.admin.v2.Client.ExceptionFactory _exceptionFactory = (name, response) => null;
    
        /// <summary>
        /// Initializes a new instance of the <see cref="OrderApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public OrderApi(com.ultracart.admin.v2.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = com.ultracart.admin.v2.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = com.ultracart.admin.v2.Client.Configuration.DefaultExceptionFactory;
        }


        /// <summary>
        /// Initializes a new instance of the <see cref="OrderApi"/> class
        /// using a simple key string and optional version, which you will
        /// almost always want to use the default
        /// </summary>
        /// <param name="SimpleKey">A simple key.  See https://ultracart.atlassian.net/wiki/spaces/ucdoc/pages/38688545/API+Simple+Key</param>
        /// <returns></returns>
        public OrderApi(string SimpleKey)
        {
            Configuration configuration = new Configuration();
            configuration.ApiKey.Add("x-ultracart-simple-key", SimpleKey);
            configuration.DefaultHeader.Add("X-UltraCart-Api-Version", "2017-03-01");
            this.Configuration = configuration;
            ExceptionFactory = com.ultracart.admin.v2.Client.Configuration.DefaultExceptionFactory;
        }


        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public com.ultracart.admin.v2.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public com.ultracart.admin.v2.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Adjusts an order total Adjusts an order total.  Adjusts individual items appropriately and considers taxes.  Desired total should be provided in the same currency as the order and must be less than the current total and greater than zero.  This call will change the order total.  It returns true if the desired total is achieved.  If the goal seeking algorithm falls short (usually by pennies), this method returns back false.  View the merchant notes for the order for further details. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId">The order id to cancel.</param>
        /// <param name="desiredTotal">The desired total with no formatting. example 123.45</param>
        /// <returns>BaseResponse</returns>
        public BaseResponse AdjustOrderTotal (string orderId, string desiredTotal)
        {
             ApiResponse<BaseResponse> localVarResponse = AdjustOrderTotalWithHttpInfo(orderId, desiredTotal);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Adjusts an order total Adjusts an order total.  Adjusts individual items appropriately and considers taxes.  Desired total should be provided in the same currency as the order and must be less than the current total and greater than zero.  This call will change the order total.  It returns true if the desired total is achieved.  If the goal seeking algorithm falls short (usually by pennies), this method returns back false.  View the merchant notes for the order for further details. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId">The order id to cancel.</param>
        /// <param name="desiredTotal">The desired total with no formatting. example 123.45</param>
        /// <returns>ApiResponse of BaseResponse</returns>
        public ApiResponse< BaseResponse > AdjustOrderTotalWithHttpInfo (string orderId, string desiredTotal)
        {
            // verify the required parameter 'orderId' is set
            if (orderId == null)
                throw new ApiException(400, "Missing required parameter 'orderId' when calling OrderApi->AdjustOrderTotal");
            // verify the required parameter 'desiredTotal' is set
            if (desiredTotal == null)
                throw new ApiException(400, "Missing required parameter 'desiredTotal' when calling OrderApi->AdjustOrderTotal");

            var localVarPath = "/order/orders/{order_id}/adjust_order_total/{desired_total}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (orderId != null) localVarPathParams.Add("order_id", this.Configuration.ApiClient.ParameterToString(orderId)); // path parameter
            if (desiredTotal != null) localVarPathParams.Add("desired_total", this.Configuration.ApiClient.ParameterToString(desiredTotal)); // path parameter

            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AdjustOrderTotal", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BaseResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (BaseResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BaseResponse)));
        }

        /// <summary>
        /// Adjusts an order total Adjusts an order total.  Adjusts individual items appropriately and considers taxes.  Desired total should be provided in the same currency as the order and must be less than the current total and greater than zero.  This call will change the order total.  It returns true if the desired total is achieved.  If the goal seeking algorithm falls short (usually by pennies), this method returns back false.  View the merchant notes for the order for further details. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId">The order id to cancel.</param>
        /// <param name="desiredTotal">The desired total with no formatting. example 123.45</param>
        /// <returns>Task of BaseResponse</returns>
        public async System.Threading.Tasks.Task<BaseResponse> AdjustOrderTotalAsync (string orderId, string desiredTotal)
        {
             ApiResponse<BaseResponse> localVarResponse = await AdjustOrderTotalAsyncWithHttpInfo(orderId, desiredTotal);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Adjusts an order total Adjusts an order total.  Adjusts individual items appropriately and considers taxes.  Desired total should be provided in the same currency as the order and must be less than the current total and greater than zero.  This call will change the order total.  It returns true if the desired total is achieved.  If the goal seeking algorithm falls short (usually by pennies), this method returns back false.  View the merchant notes for the order for further details. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId">The order id to cancel.</param>
        /// <param name="desiredTotal">The desired total with no formatting. example 123.45</param>
        /// <returns>Task of ApiResponse (BaseResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<BaseResponse>> AdjustOrderTotalAsyncWithHttpInfo (string orderId, string desiredTotal)
        {
            // verify the required parameter 'orderId' is set
            if (orderId == null)
                throw new ApiException(400, "Missing required parameter 'orderId' when calling OrderApi->AdjustOrderTotal");
            // verify the required parameter 'desiredTotal' is set
            if (desiredTotal == null)
                throw new ApiException(400, "Missing required parameter 'desiredTotal' when calling OrderApi->AdjustOrderTotal");

            var localVarPath = "/order/orders/{order_id}/adjust_order_total/{desired_total}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (orderId != null) localVarPathParams.Add("order_id", this.Configuration.ApiClient.ParameterToString(orderId)); // path parameter
            if (desiredTotal != null) localVarPathParams.Add("desired_total", this.Configuration.ApiClient.ParameterToString(desiredTotal)); // path parameter

            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AdjustOrderTotal", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BaseResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (BaseResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BaseResponse)));
        }

        /// <summary>
        /// Cancel an order Cancel an order on the UltraCart account.  If the success flag is false, then consult the error message for why it failed. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId">The order id to cancel.</param>
        /// <returns>BaseResponse</returns>
        public BaseResponse CancelOrder (string orderId)
        {
             ApiResponse<BaseResponse> localVarResponse = CancelOrderWithHttpInfo(orderId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Cancel an order Cancel an order on the UltraCart account.  If the success flag is false, then consult the error message for why it failed. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId">The order id to cancel.</param>
        /// <returns>ApiResponse of BaseResponse</returns>
        public ApiResponse< BaseResponse > CancelOrderWithHttpInfo (string orderId)
        {
            // verify the required parameter 'orderId' is set
            if (orderId == null)
                throw new ApiException(400, "Missing required parameter 'orderId' when calling OrderApi->CancelOrder");

            var localVarPath = "/order/orders/{order_id}/cancel";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (orderId != null) localVarPathParams.Add("order_id", this.Configuration.ApiClient.ParameterToString(orderId)); // path parameter

            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CancelOrder", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BaseResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (BaseResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BaseResponse)));
        }

        /// <summary>
        /// Cancel an order Cancel an order on the UltraCart account.  If the success flag is false, then consult the error message for why it failed. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId">The order id to cancel.</param>
        /// <returns>Task of BaseResponse</returns>
        public async System.Threading.Tasks.Task<BaseResponse> CancelOrderAsync (string orderId)
        {
             ApiResponse<BaseResponse> localVarResponse = await CancelOrderAsyncWithHttpInfo(orderId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Cancel an order Cancel an order on the UltraCart account.  If the success flag is false, then consult the error message for why it failed. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId">The order id to cancel.</param>
        /// <returns>Task of ApiResponse (BaseResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<BaseResponse>> CancelOrderAsyncWithHttpInfo (string orderId)
        {
            // verify the required parameter 'orderId' is set
            if (orderId == null)
                throw new ApiException(400, "Missing required parameter 'orderId' when calling OrderApi->CancelOrder");

            var localVarPath = "/order/orders/{order_id}/cancel";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (orderId != null) localVarPathParams.Add("order_id", this.Configuration.ApiClient.ParameterToString(orderId)); // path parameter

            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CancelOrder", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BaseResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (BaseResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BaseResponse)));
        }

        /// <summary>
        /// Delete an order Delete an order on the UltraCart account. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId">The order id to delete.</param>
        /// <returns></returns>
        public void DeleteOrder (string orderId)
        {
             DeleteOrderWithHttpInfo(orderId);
        }

        /// <summary>
        /// Delete an order Delete an order on the UltraCart account. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId">The order id to delete.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteOrderWithHttpInfo (string orderId)
        {
            // verify the required parameter 'orderId' is set
            if (orderId == null)
                throw new ApiException(400, "Missing required parameter 'orderId' when calling OrderApi->DeleteOrder");

            var localVarPath = "/order/orders/{order_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (orderId != null) localVarPathParams.Add("order_id", this.Configuration.ApiClient.ParameterToString(orderId)); // path parameter

            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteOrder", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete an order Delete an order on the UltraCart account. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId">The order id to delete.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteOrderAsync (string orderId)
        {
             await DeleteOrderAsyncWithHttpInfo(orderId);

        }

        /// <summary>
        /// Delete an order Delete an order on the UltraCart account. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId">The order id to delete.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteOrderAsyncWithHttpInfo (string orderId)
        {
            // verify the required parameter 'orderId' is set
            if (orderId == null)
                throw new ApiException(400, "Missing required parameter 'orderId' when calling OrderApi->DeleteOrder");

            var localVarPath = "/order/orders/{order_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (orderId != null) localVarPathParams.Add("order_id", this.Configuration.ApiClient.ParameterToString(orderId)); // path parameter

            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteOrder", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Duplicate an order Perform a duplicate of the specified order_id and return a new order located in Accounts Receivable. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId">The order id to duplicate.</param>
        /// <param name="expand">The object expansion to perform on the result.  See documentation for examples (optional)</param>
        /// <returns>OrderResponse</returns>
        public OrderResponse DuplicateOrder (string orderId, string expand = null)
        {
             ApiResponse<OrderResponse> localVarResponse = DuplicateOrderWithHttpInfo(orderId, expand);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Duplicate an order Perform a duplicate of the specified order_id and return a new order located in Accounts Receivable. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId">The order id to duplicate.</param>
        /// <param name="expand">The object expansion to perform on the result.  See documentation for examples (optional)</param>
        /// <returns>ApiResponse of OrderResponse</returns>
        public ApiResponse< OrderResponse > DuplicateOrderWithHttpInfo (string orderId, string expand = null)
        {
            // verify the required parameter 'orderId' is set
            if (orderId == null)
                throw new ApiException(400, "Missing required parameter 'orderId' when calling OrderApi->DuplicateOrder");

            var localVarPath = "/order/orders/{order_id}/duplicate";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (orderId != null) localVarPathParams.Add("order_id", this.Configuration.ApiClient.ParameterToString(orderId)); // path parameter
            if (expand != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "_expand", expand)); // query parameter

            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DuplicateOrder", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<OrderResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (OrderResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(OrderResponse)));
        }

        /// <summary>
        /// Duplicate an order Perform a duplicate of the specified order_id and return a new order located in Accounts Receivable. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId">The order id to duplicate.</param>
        /// <param name="expand">The object expansion to perform on the result.  See documentation for examples (optional)</param>
        /// <returns>Task of OrderResponse</returns>
        public async System.Threading.Tasks.Task<OrderResponse> DuplicateOrderAsync (string orderId, string expand = null)
        {
             ApiResponse<OrderResponse> localVarResponse = await DuplicateOrderAsyncWithHttpInfo(orderId, expand);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Duplicate an order Perform a duplicate of the specified order_id and return a new order located in Accounts Receivable. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId">The order id to duplicate.</param>
        /// <param name="expand">The object expansion to perform on the result.  See documentation for examples (optional)</param>
        /// <returns>Task of ApiResponse (OrderResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<OrderResponse>> DuplicateOrderAsyncWithHttpInfo (string orderId, string expand = null)
        {
            // verify the required parameter 'orderId' is set
            if (orderId == null)
                throw new ApiException(400, "Missing required parameter 'orderId' when calling OrderApi->DuplicateOrder");

            var localVarPath = "/order/orders/{order_id}/duplicate";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (orderId != null) localVarPathParams.Add("order_id", this.Configuration.ApiClient.ParameterToString(orderId)); // path parameter
            if (expand != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "_expand", expand)); // query parameter

            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DuplicateOrder", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<OrderResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (OrderResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(OrderResponse)));
        }

        /// <summary>
        /// Format order Format the order for display at text or html 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId">The order id to format</param>
        /// <param name="formatOptions">Format options</param>
        /// <returns>OrderFormatResponse</returns>
        public OrderFormatResponse Format (string orderId, OrderFormat formatOptions)
        {
             ApiResponse<OrderFormatResponse> localVarResponse = FormatWithHttpInfo(orderId, formatOptions);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Format order Format the order for display at text or html 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId">The order id to format</param>
        /// <param name="formatOptions">Format options</param>
        /// <returns>ApiResponse of OrderFormatResponse</returns>
        public ApiResponse< OrderFormatResponse > FormatWithHttpInfo (string orderId, OrderFormat formatOptions)
        {
            // verify the required parameter 'orderId' is set
            if (orderId == null)
                throw new ApiException(400, "Missing required parameter 'orderId' when calling OrderApi->Format");
            // verify the required parameter 'formatOptions' is set
            if (formatOptions == null)
                throw new ApiException(400, "Missing required parameter 'formatOptions' when calling OrderApi->Format");

            var localVarPath = "/order/orders/{order_id}/format";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (orderId != null) localVarPathParams.Add("order_id", this.Configuration.ApiClient.ParameterToString(orderId)); // path parameter
            if (formatOptions != null && formatOptions.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(formatOptions); // http body (model) parameter
            }
            else
            {
                localVarPostBody = formatOptions; // byte array
            }

            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Format", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<OrderFormatResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (OrderFormatResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(OrderFormatResponse)));
        }

        /// <summary>
        /// Format order Format the order for display at text or html 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId">The order id to format</param>
        /// <param name="formatOptions">Format options</param>
        /// <returns>Task of OrderFormatResponse</returns>
        public async System.Threading.Tasks.Task<OrderFormatResponse> FormatAsync (string orderId, OrderFormat formatOptions)
        {
             ApiResponse<OrderFormatResponse> localVarResponse = await FormatAsyncWithHttpInfo(orderId, formatOptions);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Format order Format the order for display at text or html 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId">The order id to format</param>
        /// <param name="formatOptions">Format options</param>
        /// <returns>Task of ApiResponse (OrderFormatResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<OrderFormatResponse>> FormatAsyncWithHttpInfo (string orderId, OrderFormat formatOptions)
        {
            // verify the required parameter 'orderId' is set
            if (orderId == null)
                throw new ApiException(400, "Missing required parameter 'orderId' when calling OrderApi->Format");
            // verify the required parameter 'formatOptions' is set
            if (formatOptions == null)
                throw new ApiException(400, "Missing required parameter 'formatOptions' when calling OrderApi->Format");

            var localVarPath = "/order/orders/{order_id}/format";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (orderId != null) localVarPathParams.Add("order_id", this.Configuration.ApiClient.ParameterToString(orderId)); // path parameter
            if (formatOptions != null && formatOptions.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(formatOptions); // http body (model) parameter
            }
            else
            {
                localVarPostBody = formatOptions; // byte array
            }

            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Format", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<OrderFormatResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (OrderFormatResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(OrderFormatResponse)));
        }

        /// <summary>
        /// Generate an order token for a given order id Retrieves a single order token for a given order id.  The token can be used with the getOrderByToken API. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId">The order id to generate a token for.</param>
        /// <returns>OrderTokenResponse</returns>
        public OrderTokenResponse GenerateOrderToken (string orderId)
        {
             ApiResponse<OrderTokenResponse> localVarResponse = GenerateOrderTokenWithHttpInfo(orderId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Generate an order token for a given order id Retrieves a single order token for a given order id.  The token can be used with the getOrderByToken API. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId">The order id to generate a token for.</param>
        /// <returns>ApiResponse of OrderTokenResponse</returns>
        public ApiResponse< OrderTokenResponse > GenerateOrderTokenWithHttpInfo (string orderId)
        {
            // verify the required parameter 'orderId' is set
            if (orderId == null)
                throw new ApiException(400, "Missing required parameter 'orderId' when calling OrderApi->GenerateOrderToken");

            var localVarPath = "/order/orders/token/{order_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (orderId != null) localVarPathParams.Add("order_id", this.Configuration.ApiClient.ParameterToString(orderId)); // path parameter

            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GenerateOrderToken", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<OrderTokenResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (OrderTokenResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(OrderTokenResponse)));
        }

        /// <summary>
        /// Generate an order token for a given order id Retrieves a single order token for a given order id.  The token can be used with the getOrderByToken API. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId">The order id to generate a token for.</param>
        /// <returns>Task of OrderTokenResponse</returns>
        public async System.Threading.Tasks.Task<OrderTokenResponse> GenerateOrderTokenAsync (string orderId)
        {
             ApiResponse<OrderTokenResponse> localVarResponse = await GenerateOrderTokenAsyncWithHttpInfo(orderId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Generate an order token for a given order id Retrieves a single order token for a given order id.  The token can be used with the getOrderByToken API. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId">The order id to generate a token for.</param>
        /// <returns>Task of ApiResponse (OrderTokenResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<OrderTokenResponse>> GenerateOrderTokenAsyncWithHttpInfo (string orderId)
        {
            // verify the required parameter 'orderId' is set
            if (orderId == null)
                throw new ApiException(400, "Missing required parameter 'orderId' when calling OrderApi->GenerateOrderToken");

            var localVarPath = "/order/orders/token/{order_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (orderId != null) localVarPathParams.Add("order_id", this.Configuration.ApiClient.ParameterToString(orderId)); // path parameter

            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GenerateOrderToken", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<OrderTokenResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (OrderTokenResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(OrderTokenResponse)));
        }

        /// <summary>
        /// Generate a packing slip for this order across all distribution centers. The packing slip PDF that is returned is base 64 encoded 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId">Order ID</param>
        /// <returns>OrderPackingSlipResponse</returns>
        public OrderPackingSlipResponse GeneratePackingSlipAllDC (string orderId)
        {
             ApiResponse<OrderPackingSlipResponse> localVarResponse = GeneratePackingSlipAllDCWithHttpInfo(orderId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Generate a packing slip for this order across all distribution centers. The packing slip PDF that is returned is base 64 encoded 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId">Order ID</param>
        /// <returns>ApiResponse of OrderPackingSlipResponse</returns>
        public ApiResponse< OrderPackingSlipResponse > GeneratePackingSlipAllDCWithHttpInfo (string orderId)
        {
            // verify the required parameter 'orderId' is set
            if (orderId == null)
                throw new ApiException(400, "Missing required parameter 'orderId' when calling OrderApi->GeneratePackingSlipAllDC");

            var localVarPath = "/order/orders/{order_id}/packing_slip";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (orderId != null) localVarPathParams.Add("order_id", this.Configuration.ApiClient.ParameterToString(orderId)); // path parameter

            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GeneratePackingSlipAllDC", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<OrderPackingSlipResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (OrderPackingSlipResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(OrderPackingSlipResponse)));
        }

        /// <summary>
        /// Generate a packing slip for this order across all distribution centers. The packing slip PDF that is returned is base 64 encoded 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId">Order ID</param>
        /// <returns>Task of OrderPackingSlipResponse</returns>
        public async System.Threading.Tasks.Task<OrderPackingSlipResponse> GeneratePackingSlipAllDCAsync (string orderId)
        {
             ApiResponse<OrderPackingSlipResponse> localVarResponse = await GeneratePackingSlipAllDCAsyncWithHttpInfo(orderId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Generate a packing slip for this order across all distribution centers. The packing slip PDF that is returned is base 64 encoded 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId">Order ID</param>
        /// <returns>Task of ApiResponse (OrderPackingSlipResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<OrderPackingSlipResponse>> GeneratePackingSlipAllDCAsyncWithHttpInfo (string orderId)
        {
            // verify the required parameter 'orderId' is set
            if (orderId == null)
                throw new ApiException(400, "Missing required parameter 'orderId' when calling OrderApi->GeneratePackingSlipAllDC");

            var localVarPath = "/order/orders/{order_id}/packing_slip";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (orderId != null) localVarPathParams.Add("order_id", this.Configuration.ApiClient.ParameterToString(orderId)); // path parameter

            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GeneratePackingSlipAllDC", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<OrderPackingSlipResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (OrderPackingSlipResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(OrderPackingSlipResponse)));
        }

        /// <summary>
        /// Generate a packing slip for this order for the given distribution center. The packing slip PDF that is returned is base 64 encoded 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="distributionCenterCode">Distribution center code</param>
        /// <param name="orderId">Order ID</param>
        /// <returns>OrderPackingSlipResponse</returns>
        public OrderPackingSlipResponse GeneratePackingSlipSpecificDC (string distributionCenterCode, string orderId)
        {
             ApiResponse<OrderPackingSlipResponse> localVarResponse = GeneratePackingSlipSpecificDCWithHttpInfo(distributionCenterCode, orderId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Generate a packing slip for this order for the given distribution center. The packing slip PDF that is returned is base 64 encoded 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="distributionCenterCode">Distribution center code</param>
        /// <param name="orderId">Order ID</param>
        /// <returns>ApiResponse of OrderPackingSlipResponse</returns>
        public ApiResponse< OrderPackingSlipResponse > GeneratePackingSlipSpecificDCWithHttpInfo (string distributionCenterCode, string orderId)
        {
            // verify the required parameter 'distributionCenterCode' is set
            if (distributionCenterCode == null)
                throw new ApiException(400, "Missing required parameter 'distributionCenterCode' when calling OrderApi->GeneratePackingSlipSpecificDC");
            // verify the required parameter 'orderId' is set
            if (orderId == null)
                throw new ApiException(400, "Missing required parameter 'orderId' when calling OrderApi->GeneratePackingSlipSpecificDC");

            var localVarPath = "/order/orders/{order_id}/packing_slip/{distribution_center_code}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (distributionCenterCode != null) localVarPathParams.Add("distribution_center_code", this.Configuration.ApiClient.ParameterToString(distributionCenterCode)); // path parameter
            if (orderId != null) localVarPathParams.Add("order_id", this.Configuration.ApiClient.ParameterToString(orderId)); // path parameter

            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GeneratePackingSlipSpecificDC", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<OrderPackingSlipResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (OrderPackingSlipResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(OrderPackingSlipResponse)));
        }

        /// <summary>
        /// Generate a packing slip for this order for the given distribution center. The packing slip PDF that is returned is base 64 encoded 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="distributionCenterCode">Distribution center code</param>
        /// <param name="orderId">Order ID</param>
        /// <returns>Task of OrderPackingSlipResponse</returns>
        public async System.Threading.Tasks.Task<OrderPackingSlipResponse> GeneratePackingSlipSpecificDCAsync (string distributionCenterCode, string orderId)
        {
             ApiResponse<OrderPackingSlipResponse> localVarResponse = await GeneratePackingSlipSpecificDCAsyncWithHttpInfo(distributionCenterCode, orderId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Generate a packing slip for this order for the given distribution center. The packing slip PDF that is returned is base 64 encoded 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="distributionCenterCode">Distribution center code</param>
        /// <param name="orderId">Order ID</param>
        /// <returns>Task of ApiResponse (OrderPackingSlipResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<OrderPackingSlipResponse>> GeneratePackingSlipSpecificDCAsyncWithHttpInfo (string distributionCenterCode, string orderId)
        {
            // verify the required parameter 'distributionCenterCode' is set
            if (distributionCenterCode == null)
                throw new ApiException(400, "Missing required parameter 'distributionCenterCode' when calling OrderApi->GeneratePackingSlipSpecificDC");
            // verify the required parameter 'orderId' is set
            if (orderId == null)
                throw new ApiException(400, "Missing required parameter 'orderId' when calling OrderApi->GeneratePackingSlipSpecificDC");

            var localVarPath = "/order/orders/{order_id}/packing_slip/{distribution_center_code}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (distributionCenterCode != null) localVarPathParams.Add("distribution_center_code", this.Configuration.ApiClient.ParameterToString(distributionCenterCode)); // path parameter
            if (orderId != null) localVarPathParams.Add("order_id", this.Configuration.ApiClient.ParameterToString(orderId)); // path parameter

            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GeneratePackingSlipSpecificDC", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<OrderPackingSlipResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (OrderPackingSlipResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(OrderPackingSlipResponse)));
        }

        /// <summary>
        /// Retrieve A/R Retry Configuration Retrieve A/R Retry Configuration. This is primarily an internal API call.  It is doubtful you would ever need to use it. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>AccountsReceivableRetryConfigResponse</returns>
        public AccountsReceivableRetryConfigResponse GetAccountsReceivableRetryConfig ()
        {
             ApiResponse<AccountsReceivableRetryConfigResponse> localVarResponse = GetAccountsReceivableRetryConfigWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve A/R Retry Configuration Retrieve A/R Retry Configuration. This is primarily an internal API call.  It is doubtful you would ever need to use it. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of AccountsReceivableRetryConfigResponse</returns>
        public ApiResponse< AccountsReceivableRetryConfigResponse > GetAccountsReceivableRetryConfigWithHttpInfo ()
        {

            var localVarPath = "/order/accountsReceivableRetryConfig";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAccountsReceivableRetryConfig", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AccountsReceivableRetryConfigResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AccountsReceivableRetryConfigResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AccountsReceivableRetryConfigResponse)));
        }

        /// <summary>
        /// Retrieve A/R Retry Configuration Retrieve A/R Retry Configuration. This is primarily an internal API call.  It is doubtful you would ever need to use it. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of AccountsReceivableRetryConfigResponse</returns>
        public async System.Threading.Tasks.Task<AccountsReceivableRetryConfigResponse> GetAccountsReceivableRetryConfigAsync ()
        {
             ApiResponse<AccountsReceivableRetryConfigResponse> localVarResponse = await GetAccountsReceivableRetryConfigAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieve A/R Retry Configuration Retrieve A/R Retry Configuration. This is primarily an internal API call.  It is doubtful you would ever need to use it. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (AccountsReceivableRetryConfigResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AccountsReceivableRetryConfigResponse>> GetAccountsReceivableRetryConfigAsyncWithHttpInfo ()
        {

            var localVarPath = "/order/accountsReceivableRetryConfig";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAccountsReceivableRetryConfig", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AccountsReceivableRetryConfigResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AccountsReceivableRetryConfigResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AccountsReceivableRetryConfigResponse)));
        }

        /// <summary>
        /// Retrieve A/R Retry Statistics Retrieve A/R Retry Statistics. This is primarily an internal API call.  It is doubtful you would ever need to use it. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="from"> (optional)</param>
        /// <param name="to"> (optional)</param>
        /// <returns>AccountsReceivableRetryStatsResponse</returns>
        public AccountsReceivableRetryStatsResponse GetAccountsReceivableRetryStats (string from = null, string to = null)
        {
             ApiResponse<AccountsReceivableRetryStatsResponse> localVarResponse = GetAccountsReceivableRetryStatsWithHttpInfo(from, to);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve A/R Retry Statistics Retrieve A/R Retry Statistics. This is primarily an internal API call.  It is doubtful you would ever need to use it. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="from"> (optional)</param>
        /// <param name="to"> (optional)</param>
        /// <returns>ApiResponse of AccountsReceivableRetryStatsResponse</returns>
        public ApiResponse< AccountsReceivableRetryStatsResponse > GetAccountsReceivableRetryStatsWithHttpInfo (string from = null, string to = null)
        {

            var localVarPath = "/order/accountsReceivableRetryConfig/stats";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (from != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "from", from)); // query parameter
            if (to != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "to", to)); // query parameter

            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAccountsReceivableRetryStats", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AccountsReceivableRetryStatsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AccountsReceivableRetryStatsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AccountsReceivableRetryStatsResponse)));
        }

        /// <summary>
        /// Retrieve A/R Retry Statistics Retrieve A/R Retry Statistics. This is primarily an internal API call.  It is doubtful you would ever need to use it. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="from"> (optional)</param>
        /// <param name="to"> (optional)</param>
        /// <returns>Task of AccountsReceivableRetryStatsResponse</returns>
        public async System.Threading.Tasks.Task<AccountsReceivableRetryStatsResponse> GetAccountsReceivableRetryStatsAsync (string from = null, string to = null)
        {
             ApiResponse<AccountsReceivableRetryStatsResponse> localVarResponse = await GetAccountsReceivableRetryStatsAsyncWithHttpInfo(from, to);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieve A/R Retry Statistics Retrieve A/R Retry Statistics. This is primarily an internal API call.  It is doubtful you would ever need to use it. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="from"> (optional)</param>
        /// <param name="to"> (optional)</param>
        /// <returns>Task of ApiResponse (AccountsReceivableRetryStatsResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AccountsReceivableRetryStatsResponse>> GetAccountsReceivableRetryStatsAsyncWithHttpInfo (string from = null, string to = null)
        {

            var localVarPath = "/order/accountsReceivableRetryConfig/stats";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (from != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "from", from)); // query parameter
            if (to != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "to", to)); // query parameter

            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAccountsReceivableRetryStats", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AccountsReceivableRetryStatsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AccountsReceivableRetryStatsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AccountsReceivableRetryStatsResponse)));
        }

        /// <summary>
        /// Retrieve an order Retrieves a single order using the specified order id. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId">The order id to retrieve.</param>
        /// <param name="expand">The object expansion to perform on the result.  See documentation for examples (optional)</param>
        /// <returns>OrderResponse</returns>
        public OrderResponse GetOrder (string orderId, string expand = null)
        {
             ApiResponse<OrderResponse> localVarResponse = GetOrderWithHttpInfo(orderId, expand);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve an order Retrieves a single order using the specified order id. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId">The order id to retrieve.</param>
        /// <param name="expand">The object expansion to perform on the result.  See documentation for examples (optional)</param>
        /// <returns>ApiResponse of OrderResponse</returns>
        public ApiResponse< OrderResponse > GetOrderWithHttpInfo (string orderId, string expand = null)
        {
            // verify the required parameter 'orderId' is set
            if (orderId == null)
                throw new ApiException(400, "Missing required parameter 'orderId' when calling OrderApi->GetOrder");

            var localVarPath = "/order/orders/{order_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (orderId != null) localVarPathParams.Add("order_id", this.Configuration.ApiClient.ParameterToString(orderId)); // path parameter
            if (expand != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "_expand", expand)); // query parameter

            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetOrder", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<OrderResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (OrderResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(OrderResponse)));
        }

        /// <summary>
        /// Retrieve an order Retrieves a single order using the specified order id. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId">The order id to retrieve.</param>
        /// <param name="expand">The object expansion to perform on the result.  See documentation for examples (optional)</param>
        /// <returns>Task of OrderResponse</returns>
        public async System.Threading.Tasks.Task<OrderResponse> GetOrderAsync (string orderId, string expand = null)
        {
             ApiResponse<OrderResponse> localVarResponse = await GetOrderAsyncWithHttpInfo(orderId, expand);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieve an order Retrieves a single order using the specified order id. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId">The order id to retrieve.</param>
        /// <param name="expand">The object expansion to perform on the result.  See documentation for examples (optional)</param>
        /// <returns>Task of ApiResponse (OrderResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<OrderResponse>> GetOrderAsyncWithHttpInfo (string orderId, string expand = null)
        {
            // verify the required parameter 'orderId' is set
            if (orderId == null)
                throw new ApiException(400, "Missing required parameter 'orderId' when calling OrderApi->GetOrder");

            var localVarPath = "/order/orders/{order_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (orderId != null) localVarPathParams.Add("order_id", this.Configuration.ApiClient.ParameterToString(orderId)); // path parameter
            if (expand != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "_expand", expand)); // query parameter

            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetOrder", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<OrderResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (OrderResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(OrderResponse)));
        }

        /// <summary>
        /// Retrieve an order using a token Retrieves a single order using the specified order token. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderByTokenQuery">Order by token query</param>
        /// <param name="expand">The object expansion to perform on the result.  See documentation for examples (optional)</param>
        /// <returns>OrderResponse</returns>
        public OrderResponse GetOrderByToken (OrderByTokenQuery orderByTokenQuery, string expand = null)
        {
             ApiResponse<OrderResponse> localVarResponse = GetOrderByTokenWithHttpInfo(orderByTokenQuery, expand);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve an order using a token Retrieves a single order using the specified order token. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderByTokenQuery">Order by token query</param>
        /// <param name="expand">The object expansion to perform on the result.  See documentation for examples (optional)</param>
        /// <returns>ApiResponse of OrderResponse</returns>
        public ApiResponse< OrderResponse > GetOrderByTokenWithHttpInfo (OrderByTokenQuery orderByTokenQuery, string expand = null)
        {
            // verify the required parameter 'orderByTokenQuery' is set
            if (orderByTokenQuery == null)
                throw new ApiException(400, "Missing required parameter 'orderByTokenQuery' when calling OrderApi->GetOrderByToken");

            var localVarPath = "/order/orders/token";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (expand != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "_expand", expand)); // query parameter
            if (orderByTokenQuery != null && orderByTokenQuery.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(orderByTokenQuery); // http body (model) parameter
            }
            else
            {
                localVarPostBody = orderByTokenQuery; // byte array
            }

            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetOrderByToken", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<OrderResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (OrderResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(OrderResponse)));
        }

        /// <summary>
        /// Retrieve an order using a token Retrieves a single order using the specified order token. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderByTokenQuery">Order by token query</param>
        /// <param name="expand">The object expansion to perform on the result.  See documentation for examples (optional)</param>
        /// <returns>Task of OrderResponse</returns>
        public async System.Threading.Tasks.Task<OrderResponse> GetOrderByTokenAsync (OrderByTokenQuery orderByTokenQuery, string expand = null)
        {
             ApiResponse<OrderResponse> localVarResponse = await GetOrderByTokenAsyncWithHttpInfo(orderByTokenQuery, expand);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieve an order using a token Retrieves a single order using the specified order token. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderByTokenQuery">Order by token query</param>
        /// <param name="expand">The object expansion to perform on the result.  See documentation for examples (optional)</param>
        /// <returns>Task of ApiResponse (OrderResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<OrderResponse>> GetOrderByTokenAsyncWithHttpInfo (OrderByTokenQuery orderByTokenQuery, string expand = null)
        {
            // verify the required parameter 'orderByTokenQuery' is set
            if (orderByTokenQuery == null)
                throw new ApiException(400, "Missing required parameter 'orderByTokenQuery' when calling OrderApi->GetOrderByToken");

            var localVarPath = "/order/orders/token";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (expand != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "_expand", expand)); // query parameter
            if (orderByTokenQuery != null && orderByTokenQuery.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(orderByTokenQuery); // http body (model) parameter
            }
            else
            {
                localVarPostBody = orderByTokenQuery; // byte array
            }

            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetOrderByToken", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<OrderResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (OrderResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(OrderResponse)));
        }

        /// <summary>
        /// Retrieve orders Retrieves a group of orders from the account.  If no parameters are specified, the API call will fail with a bad request error.  Always specify some parameters to limit the scope of the orders returned to ones you are truly interested in.  You will need to make multiple API calls in order to retrieve the entire result set since this API performs result set pagination. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId">Order Id (optional)</param>
        /// <param name="paymentMethod">Payment Method (optional)</param>
        /// <param name="company">Company (optional)</param>
        /// <param name="firstName">First Name (optional)</param>
        /// <param name="lastName">Last Name (optional)</param>
        /// <param name="city">City (optional)</param>
        /// <param name="stateRegion">State/Region (optional)</param>
        /// <param name="postalCode">Postal Code (optional)</param>
        /// <param name="countryCode">Country Code (ISO-3166 two letter) (optional)</param>
        /// <param name="phone">Phone (optional)</param>
        /// <param name="email">Email (optional)</param>
        /// <param name="ccEmail">CC Email (optional)</param>
        /// <param name="total">Total (optional)</param>
        /// <param name="screenBrandingThemeCode">Screen Branding Theme Code (optional)</param>
        /// <param name="storefrontHostName">StoreFront Host Name (optional)</param>
        /// <param name="creationDateBegin">Creation Date Begin (optional)</param>
        /// <param name="creationDateEnd">Creation Date End (optional)</param>
        /// <param name="paymentDateBegin">Payment Date Begin (optional)</param>
        /// <param name="paymentDateEnd">Payment Date End (optional)</param>
        /// <param name="shipmentDateBegin">Shipment Date Begin (optional)</param>
        /// <param name="shipmentDateEnd">Shipment Date End (optional)</param>
        /// <param name="rma">RMA (optional)</param>
        /// <param name="purchaseOrderNumber">Purchase Order Number (optional)</param>
        /// <param name="itemId">Item Id (optional)</param>
        /// <param name="currentStage">Current Stage (optional)</param>
        /// <param name="channelPartnerCode">Channel Partner Code (optional)</param>
        /// <param name="channelPartnerOrderId">Channel Partner Order ID (optional)</param>
        /// <param name="limit">The maximum number of records to return on this one API call. (Maximum 200) (optional, default to 100)</param>
        /// <param name="offset">Pagination of the record set.  Offset is a zero based index. (optional, default to 0)</param>
        /// <param name="sort">The sort order of the orders.  See Sorting documentation for examples of using multiple values and sorting by ascending and descending. (optional)</param>
        /// <param name="expand">The object expansion to perform on the result. (optional)</param>
        /// <returns>OrdersResponse</returns>
        public OrdersResponse GetOrders (string orderId = null, string paymentMethod = null, string company = null, string firstName = null, string lastName = null, string city = null, string stateRegion = null, string postalCode = null, string countryCode = null, string phone = null, string email = null, string ccEmail = null, decimal? total = null, string screenBrandingThemeCode = null, string storefrontHostName = null, string creationDateBegin = null, string creationDateEnd = null, string paymentDateBegin = null, string paymentDateEnd = null, string shipmentDateBegin = null, string shipmentDateEnd = null, string rma = null, string purchaseOrderNumber = null, string itemId = null, string currentStage = null, string channelPartnerCode = null, string channelPartnerOrderId = null, int? limit = null, int? offset = null, string sort = null, string expand = null)
        {
             ApiResponse<OrdersResponse> localVarResponse = GetOrdersWithHttpInfo(orderId, paymentMethod, company, firstName, lastName, city, stateRegion, postalCode, countryCode, phone, email, ccEmail, total, screenBrandingThemeCode, storefrontHostName, creationDateBegin, creationDateEnd, paymentDateBegin, paymentDateEnd, shipmentDateBegin, shipmentDateEnd, rma, purchaseOrderNumber, itemId, currentStage, channelPartnerCode, channelPartnerOrderId, limit, offset, sort, expand);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve orders Retrieves a group of orders from the account.  If no parameters are specified, the API call will fail with a bad request error.  Always specify some parameters to limit the scope of the orders returned to ones you are truly interested in.  You will need to make multiple API calls in order to retrieve the entire result set since this API performs result set pagination. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId">Order Id (optional)</param>
        /// <param name="paymentMethod">Payment Method (optional)</param>
        /// <param name="company">Company (optional)</param>
        /// <param name="firstName">First Name (optional)</param>
        /// <param name="lastName">Last Name (optional)</param>
        /// <param name="city">City (optional)</param>
        /// <param name="stateRegion">State/Region (optional)</param>
        /// <param name="postalCode">Postal Code (optional)</param>
        /// <param name="countryCode">Country Code (ISO-3166 two letter) (optional)</param>
        /// <param name="phone">Phone (optional)</param>
        /// <param name="email">Email (optional)</param>
        /// <param name="ccEmail">CC Email (optional)</param>
        /// <param name="total">Total (optional)</param>
        /// <param name="screenBrandingThemeCode">Screen Branding Theme Code (optional)</param>
        /// <param name="storefrontHostName">StoreFront Host Name (optional)</param>
        /// <param name="creationDateBegin">Creation Date Begin (optional)</param>
        /// <param name="creationDateEnd">Creation Date End (optional)</param>
        /// <param name="paymentDateBegin">Payment Date Begin (optional)</param>
        /// <param name="paymentDateEnd">Payment Date End (optional)</param>
        /// <param name="shipmentDateBegin">Shipment Date Begin (optional)</param>
        /// <param name="shipmentDateEnd">Shipment Date End (optional)</param>
        /// <param name="rma">RMA (optional)</param>
        /// <param name="purchaseOrderNumber">Purchase Order Number (optional)</param>
        /// <param name="itemId">Item Id (optional)</param>
        /// <param name="currentStage">Current Stage (optional)</param>
        /// <param name="channelPartnerCode">Channel Partner Code (optional)</param>
        /// <param name="channelPartnerOrderId">Channel Partner Order ID (optional)</param>
        /// <param name="limit">The maximum number of records to return on this one API call. (Maximum 200) (optional, default to 100)</param>
        /// <param name="offset">Pagination of the record set.  Offset is a zero based index. (optional, default to 0)</param>
        /// <param name="sort">The sort order of the orders.  See Sorting documentation for examples of using multiple values and sorting by ascending and descending. (optional)</param>
        /// <param name="expand">The object expansion to perform on the result. (optional)</param>
        /// <returns>ApiResponse of OrdersResponse</returns>
        public ApiResponse< OrdersResponse > GetOrdersWithHttpInfo (string orderId = null, string paymentMethod = null, string company = null, string firstName = null, string lastName = null, string city = null, string stateRegion = null, string postalCode = null, string countryCode = null, string phone = null, string email = null, string ccEmail = null, decimal? total = null, string screenBrandingThemeCode = null, string storefrontHostName = null, string creationDateBegin = null, string creationDateEnd = null, string paymentDateBegin = null, string paymentDateEnd = null, string shipmentDateBegin = null, string shipmentDateEnd = null, string rma = null, string purchaseOrderNumber = null, string itemId = null, string currentStage = null, string channelPartnerCode = null, string channelPartnerOrderId = null, int? limit = null, int? offset = null, string sort = null, string expand = null)
        {

            var localVarPath = "/order/orders";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (orderId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "order_id", orderId)); // query parameter
            if (paymentMethod != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "payment_method", paymentMethod)); // query parameter
            if (company != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "company", company)); // query parameter
            if (firstName != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "first_name", firstName)); // query parameter
            if (lastName != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "last_name", lastName)); // query parameter
            if (city != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "city", city)); // query parameter
            if (stateRegion != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "state_region", stateRegion)); // query parameter
            if (postalCode != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "postal_code", postalCode)); // query parameter
            if (countryCode != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "country_code", countryCode)); // query parameter
            if (phone != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "phone", phone)); // query parameter
            if (email != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "email", email)); // query parameter
            if (ccEmail != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "cc_email", ccEmail)); // query parameter
            if (total != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "total", total)); // query parameter
            if (screenBrandingThemeCode != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "screen_branding_theme_code", screenBrandingThemeCode)); // query parameter
            if (storefrontHostName != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "storefront_host_name", storefrontHostName)); // query parameter
            if (creationDateBegin != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "creation_date_begin", creationDateBegin)); // query parameter
            if (creationDateEnd != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "creation_date_end", creationDateEnd)); // query parameter
            if (paymentDateBegin != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "payment_date_begin", paymentDateBegin)); // query parameter
            if (paymentDateEnd != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "payment_date_end", paymentDateEnd)); // query parameter
            if (shipmentDateBegin != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "shipment_date_begin", shipmentDateBegin)); // query parameter
            if (shipmentDateEnd != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "shipment_date_end", shipmentDateEnd)); // query parameter
            if (rma != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "rma", rma)); // query parameter
            if (purchaseOrderNumber != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "purchase_order_number", purchaseOrderNumber)); // query parameter
            if (itemId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "item_id", itemId)); // query parameter
            if (currentStage != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "current_stage", currentStage)); // query parameter
            if (channelPartnerCode != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "channel_partner_code", channelPartnerCode)); // query parameter
            if (channelPartnerOrderId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "channel_partner_order_id", channelPartnerOrderId)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "_limit", limit)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "_offset", offset)); // query parameter
            if (sort != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "_sort", sort)); // query parameter
            if (expand != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "_expand", expand)); // query parameter

            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetOrders", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<OrdersResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (OrdersResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(OrdersResponse)));
        }

        /// <summary>
        /// Retrieve orders Retrieves a group of orders from the account.  If no parameters are specified, the API call will fail with a bad request error.  Always specify some parameters to limit the scope of the orders returned to ones you are truly interested in.  You will need to make multiple API calls in order to retrieve the entire result set since this API performs result set pagination. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId">Order Id (optional)</param>
        /// <param name="paymentMethod">Payment Method (optional)</param>
        /// <param name="company">Company (optional)</param>
        /// <param name="firstName">First Name (optional)</param>
        /// <param name="lastName">Last Name (optional)</param>
        /// <param name="city">City (optional)</param>
        /// <param name="stateRegion">State/Region (optional)</param>
        /// <param name="postalCode">Postal Code (optional)</param>
        /// <param name="countryCode">Country Code (ISO-3166 two letter) (optional)</param>
        /// <param name="phone">Phone (optional)</param>
        /// <param name="email">Email (optional)</param>
        /// <param name="ccEmail">CC Email (optional)</param>
        /// <param name="total">Total (optional)</param>
        /// <param name="screenBrandingThemeCode">Screen Branding Theme Code (optional)</param>
        /// <param name="storefrontHostName">StoreFront Host Name (optional)</param>
        /// <param name="creationDateBegin">Creation Date Begin (optional)</param>
        /// <param name="creationDateEnd">Creation Date End (optional)</param>
        /// <param name="paymentDateBegin">Payment Date Begin (optional)</param>
        /// <param name="paymentDateEnd">Payment Date End (optional)</param>
        /// <param name="shipmentDateBegin">Shipment Date Begin (optional)</param>
        /// <param name="shipmentDateEnd">Shipment Date End (optional)</param>
        /// <param name="rma">RMA (optional)</param>
        /// <param name="purchaseOrderNumber">Purchase Order Number (optional)</param>
        /// <param name="itemId">Item Id (optional)</param>
        /// <param name="currentStage">Current Stage (optional)</param>
        /// <param name="channelPartnerCode">Channel Partner Code (optional)</param>
        /// <param name="channelPartnerOrderId">Channel Partner Order ID (optional)</param>
        /// <param name="limit">The maximum number of records to return on this one API call. (Maximum 200) (optional, default to 100)</param>
        /// <param name="offset">Pagination of the record set.  Offset is a zero based index. (optional, default to 0)</param>
        /// <param name="sort">The sort order of the orders.  See Sorting documentation for examples of using multiple values and sorting by ascending and descending. (optional)</param>
        /// <param name="expand">The object expansion to perform on the result. (optional)</param>
        /// <returns>Task of OrdersResponse</returns>
        public async System.Threading.Tasks.Task<OrdersResponse> GetOrdersAsync (string orderId = null, string paymentMethod = null, string company = null, string firstName = null, string lastName = null, string city = null, string stateRegion = null, string postalCode = null, string countryCode = null, string phone = null, string email = null, string ccEmail = null, decimal? total = null, string screenBrandingThemeCode = null, string storefrontHostName = null, string creationDateBegin = null, string creationDateEnd = null, string paymentDateBegin = null, string paymentDateEnd = null, string shipmentDateBegin = null, string shipmentDateEnd = null, string rma = null, string purchaseOrderNumber = null, string itemId = null, string currentStage = null, string channelPartnerCode = null, string channelPartnerOrderId = null, int? limit = null, int? offset = null, string sort = null, string expand = null)
        {
             ApiResponse<OrdersResponse> localVarResponse = await GetOrdersAsyncWithHttpInfo(orderId, paymentMethod, company, firstName, lastName, city, stateRegion, postalCode, countryCode, phone, email, ccEmail, total, screenBrandingThemeCode, storefrontHostName, creationDateBegin, creationDateEnd, paymentDateBegin, paymentDateEnd, shipmentDateBegin, shipmentDateEnd, rma, purchaseOrderNumber, itemId, currentStage, channelPartnerCode, channelPartnerOrderId, limit, offset, sort, expand);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieve orders Retrieves a group of orders from the account.  If no parameters are specified, the API call will fail with a bad request error.  Always specify some parameters to limit the scope of the orders returned to ones you are truly interested in.  You will need to make multiple API calls in order to retrieve the entire result set since this API performs result set pagination. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId">Order Id (optional)</param>
        /// <param name="paymentMethod">Payment Method (optional)</param>
        /// <param name="company">Company (optional)</param>
        /// <param name="firstName">First Name (optional)</param>
        /// <param name="lastName">Last Name (optional)</param>
        /// <param name="city">City (optional)</param>
        /// <param name="stateRegion">State/Region (optional)</param>
        /// <param name="postalCode">Postal Code (optional)</param>
        /// <param name="countryCode">Country Code (ISO-3166 two letter) (optional)</param>
        /// <param name="phone">Phone (optional)</param>
        /// <param name="email">Email (optional)</param>
        /// <param name="ccEmail">CC Email (optional)</param>
        /// <param name="total">Total (optional)</param>
        /// <param name="screenBrandingThemeCode">Screen Branding Theme Code (optional)</param>
        /// <param name="storefrontHostName">StoreFront Host Name (optional)</param>
        /// <param name="creationDateBegin">Creation Date Begin (optional)</param>
        /// <param name="creationDateEnd">Creation Date End (optional)</param>
        /// <param name="paymentDateBegin">Payment Date Begin (optional)</param>
        /// <param name="paymentDateEnd">Payment Date End (optional)</param>
        /// <param name="shipmentDateBegin">Shipment Date Begin (optional)</param>
        /// <param name="shipmentDateEnd">Shipment Date End (optional)</param>
        /// <param name="rma">RMA (optional)</param>
        /// <param name="purchaseOrderNumber">Purchase Order Number (optional)</param>
        /// <param name="itemId">Item Id (optional)</param>
        /// <param name="currentStage">Current Stage (optional)</param>
        /// <param name="channelPartnerCode">Channel Partner Code (optional)</param>
        /// <param name="channelPartnerOrderId">Channel Partner Order ID (optional)</param>
        /// <param name="limit">The maximum number of records to return on this one API call. (Maximum 200) (optional, default to 100)</param>
        /// <param name="offset">Pagination of the record set.  Offset is a zero based index. (optional, default to 0)</param>
        /// <param name="sort">The sort order of the orders.  See Sorting documentation for examples of using multiple values and sorting by ascending and descending. (optional)</param>
        /// <param name="expand">The object expansion to perform on the result. (optional)</param>
        /// <returns>Task of ApiResponse (OrdersResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<OrdersResponse>> GetOrdersAsyncWithHttpInfo (string orderId = null, string paymentMethod = null, string company = null, string firstName = null, string lastName = null, string city = null, string stateRegion = null, string postalCode = null, string countryCode = null, string phone = null, string email = null, string ccEmail = null, decimal? total = null, string screenBrandingThemeCode = null, string storefrontHostName = null, string creationDateBegin = null, string creationDateEnd = null, string paymentDateBegin = null, string paymentDateEnd = null, string shipmentDateBegin = null, string shipmentDateEnd = null, string rma = null, string purchaseOrderNumber = null, string itemId = null, string currentStage = null, string channelPartnerCode = null, string channelPartnerOrderId = null, int? limit = null, int? offset = null, string sort = null, string expand = null)
        {

            var localVarPath = "/order/orders";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (orderId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "order_id", orderId)); // query parameter
            if (paymentMethod != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "payment_method", paymentMethod)); // query parameter
            if (company != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "company", company)); // query parameter
            if (firstName != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "first_name", firstName)); // query parameter
            if (lastName != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "last_name", lastName)); // query parameter
            if (city != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "city", city)); // query parameter
            if (stateRegion != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "state_region", stateRegion)); // query parameter
            if (postalCode != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "postal_code", postalCode)); // query parameter
            if (countryCode != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "country_code", countryCode)); // query parameter
            if (phone != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "phone", phone)); // query parameter
            if (email != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "email", email)); // query parameter
            if (ccEmail != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "cc_email", ccEmail)); // query parameter
            if (total != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "total", total)); // query parameter
            if (screenBrandingThemeCode != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "screen_branding_theme_code", screenBrandingThemeCode)); // query parameter
            if (storefrontHostName != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "storefront_host_name", storefrontHostName)); // query parameter
            if (creationDateBegin != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "creation_date_begin", creationDateBegin)); // query parameter
            if (creationDateEnd != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "creation_date_end", creationDateEnd)); // query parameter
            if (paymentDateBegin != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "payment_date_begin", paymentDateBegin)); // query parameter
            if (paymentDateEnd != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "payment_date_end", paymentDateEnd)); // query parameter
            if (shipmentDateBegin != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "shipment_date_begin", shipmentDateBegin)); // query parameter
            if (shipmentDateEnd != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "shipment_date_end", shipmentDateEnd)); // query parameter
            if (rma != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "rma", rma)); // query parameter
            if (purchaseOrderNumber != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "purchase_order_number", purchaseOrderNumber)); // query parameter
            if (itemId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "item_id", itemId)); // query parameter
            if (currentStage != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "current_stage", currentStage)); // query parameter
            if (channelPartnerCode != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "channel_partner_code", channelPartnerCode)); // query parameter
            if (channelPartnerOrderId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "channel_partner_order_id", channelPartnerOrderId)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "_limit", limit)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "_offset", offset)); // query parameter
            if (sort != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "_sort", sort)); // query parameter
            if (expand != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "_expand", expand)); // query parameter

            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetOrders", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<OrdersResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (OrdersResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(OrdersResponse)));
        }

        /// <summary>
        /// Retrieve order batch Retrieves a group of orders from the account based on an array of order ids.  If more than 500 order ids are specified, the API call will fail with a bad request error. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderBatch">Order batch</param>
        /// <param name="expand">The object expansion to perform on the result. (optional)</param>
        /// <returns>OrdersResponse</returns>
        public OrdersResponse GetOrdersBatch (OrderQueryBatch orderBatch, string expand = null)
        {
             ApiResponse<OrdersResponse> localVarResponse = GetOrdersBatchWithHttpInfo(orderBatch, expand);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve order batch Retrieves a group of orders from the account based on an array of order ids.  If more than 500 order ids are specified, the API call will fail with a bad request error. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderBatch">Order batch</param>
        /// <param name="expand">The object expansion to perform on the result. (optional)</param>
        /// <returns>ApiResponse of OrdersResponse</returns>
        public ApiResponse< OrdersResponse > GetOrdersBatchWithHttpInfo (OrderQueryBatch orderBatch, string expand = null)
        {
            // verify the required parameter 'orderBatch' is set
            if (orderBatch == null)
                throw new ApiException(400, "Missing required parameter 'orderBatch' when calling OrderApi->GetOrdersBatch");

            var localVarPath = "/order/orders/batch";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (expand != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "_expand", expand)); // query parameter
            if (orderBatch != null && orderBatch.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(orderBatch); // http body (model) parameter
            }
            else
            {
                localVarPostBody = orderBatch; // byte array
            }

            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetOrdersBatch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<OrdersResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (OrdersResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(OrdersResponse)));
        }

        /// <summary>
        /// Retrieve order batch Retrieves a group of orders from the account based on an array of order ids.  If more than 500 order ids are specified, the API call will fail with a bad request error. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderBatch">Order batch</param>
        /// <param name="expand">The object expansion to perform on the result. (optional)</param>
        /// <returns>Task of OrdersResponse</returns>
        public async System.Threading.Tasks.Task<OrdersResponse> GetOrdersBatchAsync (OrderQueryBatch orderBatch, string expand = null)
        {
             ApiResponse<OrdersResponse> localVarResponse = await GetOrdersBatchAsyncWithHttpInfo(orderBatch, expand);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieve order batch Retrieves a group of orders from the account based on an array of order ids.  If more than 500 order ids are specified, the API call will fail with a bad request error. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderBatch">Order batch</param>
        /// <param name="expand">The object expansion to perform on the result. (optional)</param>
        /// <returns>Task of ApiResponse (OrdersResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<OrdersResponse>> GetOrdersBatchAsyncWithHttpInfo (OrderQueryBatch orderBatch, string expand = null)
        {
            // verify the required parameter 'orderBatch' is set
            if (orderBatch == null)
                throw new ApiException(400, "Missing required parameter 'orderBatch' when calling OrderApi->GetOrdersBatch");

            var localVarPath = "/order/orders/batch";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (expand != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "_expand", expand)); // query parameter
            if (orderBatch != null && orderBatch.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(orderBatch); // http body (model) parameter
            }
            else
            {
                localVarPostBody = orderBatch; // byte array
            }

            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetOrdersBatch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<OrdersResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (OrdersResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(OrdersResponse)));
        }

        /// <summary>
        /// Retrieve orders by query Retrieves a group of orders from the account based on a query object.  If no parameters are specified, the API call will fail with a bad request error.  Always specify some parameters to limit the scope of the orders returned to ones you are truly interested in.  You will need to make multiple API calls in order to retrieve the entire result set since this API performs result set pagination. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderQuery">Order query</param>
        /// <param name="limit">The maximum number of records to return on this one API call. (Maximum 200) (optional, default to 100)</param>
        /// <param name="offset">Pagination of the record set.  Offset is a zero based index. (optional, default to 0)</param>
        /// <param name="sort">The sort order of the orders.  See Sorting documentation for examples of using multiple values and sorting by ascending and descending. (optional)</param>
        /// <param name="expand">The object expansion to perform on the result. (optional)</param>
        /// <returns>OrdersResponse</returns>
        public OrdersResponse GetOrdersByQuery (OrderQuery orderQuery, int? limit = null, int? offset = null, string sort = null, string expand = null)
        {
             ApiResponse<OrdersResponse> localVarResponse = GetOrdersByQueryWithHttpInfo(orderQuery, limit, offset, sort, expand);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve orders by query Retrieves a group of orders from the account based on a query object.  If no parameters are specified, the API call will fail with a bad request error.  Always specify some parameters to limit the scope of the orders returned to ones you are truly interested in.  You will need to make multiple API calls in order to retrieve the entire result set since this API performs result set pagination. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderQuery">Order query</param>
        /// <param name="limit">The maximum number of records to return on this one API call. (Maximum 200) (optional, default to 100)</param>
        /// <param name="offset">Pagination of the record set.  Offset is a zero based index. (optional, default to 0)</param>
        /// <param name="sort">The sort order of the orders.  See Sorting documentation for examples of using multiple values and sorting by ascending and descending. (optional)</param>
        /// <param name="expand">The object expansion to perform on the result. (optional)</param>
        /// <returns>ApiResponse of OrdersResponse</returns>
        public ApiResponse< OrdersResponse > GetOrdersByQueryWithHttpInfo (OrderQuery orderQuery, int? limit = null, int? offset = null, string sort = null, string expand = null)
        {
            // verify the required parameter 'orderQuery' is set
            if (orderQuery == null)
                throw new ApiException(400, "Missing required parameter 'orderQuery' when calling OrderApi->GetOrdersByQuery");

            var localVarPath = "/order/orders/query";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "_limit", limit)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "_offset", offset)); // query parameter
            if (sort != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "_sort", sort)); // query parameter
            if (expand != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "_expand", expand)); // query parameter
            if (orderQuery != null && orderQuery.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(orderQuery); // http body (model) parameter
            }
            else
            {
                localVarPostBody = orderQuery; // byte array
            }

            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetOrdersByQuery", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<OrdersResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (OrdersResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(OrdersResponse)));
        }

        /// <summary>
        /// Retrieve orders by query Retrieves a group of orders from the account based on a query object.  If no parameters are specified, the API call will fail with a bad request error.  Always specify some parameters to limit the scope of the orders returned to ones you are truly interested in.  You will need to make multiple API calls in order to retrieve the entire result set since this API performs result set pagination. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderQuery">Order query</param>
        /// <param name="limit">The maximum number of records to return on this one API call. (Maximum 200) (optional, default to 100)</param>
        /// <param name="offset">Pagination of the record set.  Offset is a zero based index. (optional, default to 0)</param>
        /// <param name="sort">The sort order of the orders.  See Sorting documentation for examples of using multiple values and sorting by ascending and descending. (optional)</param>
        /// <param name="expand">The object expansion to perform on the result. (optional)</param>
        /// <returns>Task of OrdersResponse</returns>
        public async System.Threading.Tasks.Task<OrdersResponse> GetOrdersByQueryAsync (OrderQuery orderQuery, int? limit = null, int? offset = null, string sort = null, string expand = null)
        {
             ApiResponse<OrdersResponse> localVarResponse = await GetOrdersByQueryAsyncWithHttpInfo(orderQuery, limit, offset, sort, expand);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieve orders by query Retrieves a group of orders from the account based on a query object.  If no parameters are specified, the API call will fail with a bad request error.  Always specify some parameters to limit the scope of the orders returned to ones you are truly interested in.  You will need to make multiple API calls in order to retrieve the entire result set since this API performs result set pagination. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderQuery">Order query</param>
        /// <param name="limit">The maximum number of records to return on this one API call. (Maximum 200) (optional, default to 100)</param>
        /// <param name="offset">Pagination of the record set.  Offset is a zero based index. (optional, default to 0)</param>
        /// <param name="sort">The sort order of the orders.  See Sorting documentation for examples of using multiple values and sorting by ascending and descending. (optional)</param>
        /// <param name="expand">The object expansion to perform on the result. (optional)</param>
        /// <returns>Task of ApiResponse (OrdersResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<OrdersResponse>> GetOrdersByQueryAsyncWithHttpInfo (OrderQuery orderQuery, int? limit = null, int? offset = null, string sort = null, string expand = null)
        {
            // verify the required parameter 'orderQuery' is set
            if (orderQuery == null)
                throw new ApiException(400, "Missing required parameter 'orderQuery' when calling OrderApi->GetOrdersByQuery");

            var localVarPath = "/order/orders/query";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "_limit", limit)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "_offset", offset)); // query parameter
            if (sort != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "_sort", sort)); // query parameter
            if (expand != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "_expand", expand)); // query parameter
            if (orderQuery != null && orderQuery.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(orderQuery); // http body (model) parameter
            }
            else
            {
                localVarPostBody = orderQuery; // byte array
            }

            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetOrdersByQuery", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<OrdersResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (OrdersResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(OrdersResponse)));
        }

        /// <summary>
        /// Insert an order Inserts a new order on the UltraCart account.  This is probably NOT the method you want.  This is for channel orders.  For regular orders the customer is entering, use the CheckoutApi.  It has many, many more features, checks, and validations. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="order">Order to insert</param>
        /// <param name="expand">The object expansion to perform on the result.  See documentation for examples (optional)</param>
        /// <returns>OrderResponse</returns>
        public OrderResponse InsertOrder (Order order, string expand = null)
        {
             ApiResponse<OrderResponse> localVarResponse = InsertOrderWithHttpInfo(order, expand);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Insert an order Inserts a new order on the UltraCart account.  This is probably NOT the method you want.  This is for channel orders.  For regular orders the customer is entering, use the CheckoutApi.  It has many, many more features, checks, and validations. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="order">Order to insert</param>
        /// <param name="expand">The object expansion to perform on the result.  See documentation for examples (optional)</param>
        /// <returns>ApiResponse of OrderResponse</returns>
        public ApiResponse< OrderResponse > InsertOrderWithHttpInfo (Order order, string expand = null)
        {
            // verify the required parameter 'order' is set
            if (order == null)
                throw new ApiException(400, "Missing required parameter 'order' when calling OrderApi->InsertOrder");

            var localVarPath = "/order/orders";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json; charset=UTF-8"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (expand != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "_expand", expand)); // query parameter
            if (order != null && order.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(order); // http body (model) parameter
            }
            else
            {
                localVarPostBody = order; // byte array
            }

            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("InsertOrder", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<OrderResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (OrderResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(OrderResponse)));
        }

        /// <summary>
        /// Insert an order Inserts a new order on the UltraCart account.  This is probably NOT the method you want.  This is for channel orders.  For regular orders the customer is entering, use the CheckoutApi.  It has many, many more features, checks, and validations. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="order">Order to insert</param>
        /// <param name="expand">The object expansion to perform on the result.  See documentation for examples (optional)</param>
        /// <returns>Task of OrderResponse</returns>
        public async System.Threading.Tasks.Task<OrderResponse> InsertOrderAsync (Order order, string expand = null)
        {
             ApiResponse<OrderResponse> localVarResponse = await InsertOrderAsyncWithHttpInfo(order, expand);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Insert an order Inserts a new order on the UltraCart account.  This is probably NOT the method you want.  This is for channel orders.  For regular orders the customer is entering, use the CheckoutApi.  It has many, many more features, checks, and validations. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="order">Order to insert</param>
        /// <param name="expand">The object expansion to perform on the result.  See documentation for examples (optional)</param>
        /// <returns>Task of ApiResponse (OrderResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<OrderResponse>> InsertOrderAsyncWithHttpInfo (Order order, string expand = null)
        {
            // verify the required parameter 'order' is set
            if (order == null)
                throw new ApiException(400, "Missing required parameter 'order' when calling OrderApi->InsertOrder");

            var localVarPath = "/order/orders";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json; charset=UTF-8"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (expand != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "_expand", expand)); // query parameter
            if (order != null && order.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(order); // http body (model) parameter
            }
            else
            {
                localVarPostBody = order; // byte array
            }

            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("InsertOrder", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<OrderResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (OrderResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(OrderResponse)));
        }

        /// <summary>
        /// Process payment Process payment on order 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId">The order id to process payment on</param>
        /// <param name="processPaymentRequest">Process payment parameters</param>
        /// <returns>OrderProcessPaymentResponse</returns>
        public OrderProcessPaymentResponse ProcessPayment (string orderId, OrderProcessPaymentRequest processPaymentRequest)
        {
             ApiResponse<OrderProcessPaymentResponse> localVarResponse = ProcessPaymentWithHttpInfo(orderId, processPaymentRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Process payment Process payment on order 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId">The order id to process payment on</param>
        /// <param name="processPaymentRequest">Process payment parameters</param>
        /// <returns>ApiResponse of OrderProcessPaymentResponse</returns>
        public ApiResponse< OrderProcessPaymentResponse > ProcessPaymentWithHttpInfo (string orderId, OrderProcessPaymentRequest processPaymentRequest)
        {
            // verify the required parameter 'orderId' is set
            if (orderId == null)
                throw new ApiException(400, "Missing required parameter 'orderId' when calling OrderApi->ProcessPayment");
            // verify the required parameter 'processPaymentRequest' is set
            if (processPaymentRequest == null)
                throw new ApiException(400, "Missing required parameter 'processPaymentRequest' when calling OrderApi->ProcessPayment");

            var localVarPath = "/order/orders/{order_id}/process_payment";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (orderId != null) localVarPathParams.Add("order_id", this.Configuration.ApiClient.ParameterToString(orderId)); // path parameter
            if (processPaymentRequest != null && processPaymentRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(processPaymentRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = processPaymentRequest; // byte array
            }

            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ProcessPayment", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<OrderProcessPaymentResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (OrderProcessPaymentResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(OrderProcessPaymentResponse)));
        }

        /// <summary>
        /// Process payment Process payment on order 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId">The order id to process payment on</param>
        /// <param name="processPaymentRequest">Process payment parameters</param>
        /// <returns>Task of OrderProcessPaymentResponse</returns>
        public async System.Threading.Tasks.Task<OrderProcessPaymentResponse> ProcessPaymentAsync (string orderId, OrderProcessPaymentRequest processPaymentRequest)
        {
             ApiResponse<OrderProcessPaymentResponse> localVarResponse = await ProcessPaymentAsyncWithHttpInfo(orderId, processPaymentRequest);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Process payment Process payment on order 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId">The order id to process payment on</param>
        /// <param name="processPaymentRequest">Process payment parameters</param>
        /// <returns>Task of ApiResponse (OrderProcessPaymentResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<OrderProcessPaymentResponse>> ProcessPaymentAsyncWithHttpInfo (string orderId, OrderProcessPaymentRequest processPaymentRequest)
        {
            // verify the required parameter 'orderId' is set
            if (orderId == null)
                throw new ApiException(400, "Missing required parameter 'orderId' when calling OrderApi->ProcessPayment");
            // verify the required parameter 'processPaymentRequest' is set
            if (processPaymentRequest == null)
                throw new ApiException(400, "Missing required parameter 'processPaymentRequest' when calling OrderApi->ProcessPayment");

            var localVarPath = "/order/orders/{order_id}/process_payment";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (orderId != null) localVarPathParams.Add("order_id", this.Configuration.ApiClient.ParameterToString(orderId)); // path parameter
            if (processPaymentRequest != null && processPaymentRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(processPaymentRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = processPaymentRequest; // byte array
            }

            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ProcessPayment", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<OrderProcessPaymentResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (OrderProcessPaymentResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(OrderProcessPaymentResponse)));
        }

        /// <summary>
        /// Refund an order Perform a refund operation on an order and then update the order if successful 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="order">Order to refund</param>
        /// <param name="orderId">The order id to refund.</param>
        /// <param name="rejectAfterRefund">Reject order after refund (optional, default to false)</param>
        /// <param name="skipCustomerNotification">Skip customer email notification (optional, default to false)</param>
        /// <param name="autoOrderCancel">Cancel associated auto orders (optional, default to false)</param>
        /// <param name="manualRefund">Consider a manual refund done externally (optional, default to false)</param>
        /// <param name="reverseAffiliateTransactions">Reverse affiliate transactions (optional, default to true)</param>
        /// <param name="expand">The object expansion to perform on the result.  See documentation for examples (optional)</param>
        /// <returns>OrderResponse</returns>
        public OrderResponse RefundOrder (Order order, string orderId, bool? rejectAfterRefund = null, bool? skipCustomerNotification = null, bool? autoOrderCancel = null, bool? manualRefund = null, bool? reverseAffiliateTransactions = null, string expand = null)
        {
             ApiResponse<OrderResponse> localVarResponse = RefundOrderWithHttpInfo(order, orderId, rejectAfterRefund, skipCustomerNotification, autoOrderCancel, manualRefund, reverseAffiliateTransactions, expand);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Refund an order Perform a refund operation on an order and then update the order if successful 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="order">Order to refund</param>
        /// <param name="orderId">The order id to refund.</param>
        /// <param name="rejectAfterRefund">Reject order after refund (optional, default to false)</param>
        /// <param name="skipCustomerNotification">Skip customer email notification (optional, default to false)</param>
        /// <param name="autoOrderCancel">Cancel associated auto orders (optional, default to false)</param>
        /// <param name="manualRefund">Consider a manual refund done externally (optional, default to false)</param>
        /// <param name="reverseAffiliateTransactions">Reverse affiliate transactions (optional, default to true)</param>
        /// <param name="expand">The object expansion to perform on the result.  See documentation for examples (optional)</param>
        /// <returns>ApiResponse of OrderResponse</returns>
        public ApiResponse< OrderResponse > RefundOrderWithHttpInfo (Order order, string orderId, bool? rejectAfterRefund = null, bool? skipCustomerNotification = null, bool? autoOrderCancel = null, bool? manualRefund = null, bool? reverseAffiliateTransactions = null, string expand = null)
        {
            // verify the required parameter 'order' is set
            if (order == null)
                throw new ApiException(400, "Missing required parameter 'order' when calling OrderApi->RefundOrder");
            // verify the required parameter 'orderId' is set
            if (orderId == null)
                throw new ApiException(400, "Missing required parameter 'orderId' when calling OrderApi->RefundOrder");

            var localVarPath = "/order/orders/{order_id}/refund";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json; charset=UTF-8"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (orderId != null) localVarPathParams.Add("order_id", this.Configuration.ApiClient.ParameterToString(orderId)); // path parameter
            if (rejectAfterRefund != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "reject_after_refund", rejectAfterRefund)); // query parameter
            if (skipCustomerNotification != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "skip_customer_notification", skipCustomerNotification)); // query parameter
            if (autoOrderCancel != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "auto_order_cancel", autoOrderCancel)); // query parameter
            if (manualRefund != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "manual_refund", manualRefund)); // query parameter
            if (reverseAffiliateTransactions != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "reverse_affiliate_transactions", reverseAffiliateTransactions)); // query parameter
            if (expand != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "_expand", expand)); // query parameter
            if (order != null && order.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(order); // http body (model) parameter
            }
            else
            {
                localVarPostBody = order; // byte array
            }

            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RefundOrder", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<OrderResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (OrderResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(OrderResponse)));
        }

        /// <summary>
        /// Refund an order Perform a refund operation on an order and then update the order if successful 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="order">Order to refund</param>
        /// <param name="orderId">The order id to refund.</param>
        /// <param name="rejectAfterRefund">Reject order after refund (optional, default to false)</param>
        /// <param name="skipCustomerNotification">Skip customer email notification (optional, default to false)</param>
        /// <param name="autoOrderCancel">Cancel associated auto orders (optional, default to false)</param>
        /// <param name="manualRefund">Consider a manual refund done externally (optional, default to false)</param>
        /// <param name="reverseAffiliateTransactions">Reverse affiliate transactions (optional, default to true)</param>
        /// <param name="expand">The object expansion to perform on the result.  See documentation for examples (optional)</param>
        /// <returns>Task of OrderResponse</returns>
        public async System.Threading.Tasks.Task<OrderResponse> RefundOrderAsync (Order order, string orderId, bool? rejectAfterRefund = null, bool? skipCustomerNotification = null, bool? autoOrderCancel = null, bool? manualRefund = null, bool? reverseAffiliateTransactions = null, string expand = null)
        {
             ApiResponse<OrderResponse> localVarResponse = await RefundOrderAsyncWithHttpInfo(order, orderId, rejectAfterRefund, skipCustomerNotification, autoOrderCancel, manualRefund, reverseAffiliateTransactions, expand);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Refund an order Perform a refund operation on an order and then update the order if successful 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="order">Order to refund</param>
        /// <param name="orderId">The order id to refund.</param>
        /// <param name="rejectAfterRefund">Reject order after refund (optional, default to false)</param>
        /// <param name="skipCustomerNotification">Skip customer email notification (optional, default to false)</param>
        /// <param name="autoOrderCancel">Cancel associated auto orders (optional, default to false)</param>
        /// <param name="manualRefund">Consider a manual refund done externally (optional, default to false)</param>
        /// <param name="reverseAffiliateTransactions">Reverse affiliate transactions (optional, default to true)</param>
        /// <param name="expand">The object expansion to perform on the result.  See documentation for examples (optional)</param>
        /// <returns>Task of ApiResponse (OrderResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<OrderResponse>> RefundOrderAsyncWithHttpInfo (Order order, string orderId, bool? rejectAfterRefund = null, bool? skipCustomerNotification = null, bool? autoOrderCancel = null, bool? manualRefund = null, bool? reverseAffiliateTransactions = null, string expand = null)
        {
            // verify the required parameter 'order' is set
            if (order == null)
                throw new ApiException(400, "Missing required parameter 'order' when calling OrderApi->RefundOrder");
            // verify the required parameter 'orderId' is set
            if (orderId == null)
                throw new ApiException(400, "Missing required parameter 'orderId' when calling OrderApi->RefundOrder");

            var localVarPath = "/order/orders/{order_id}/refund";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json; charset=UTF-8"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (orderId != null) localVarPathParams.Add("order_id", this.Configuration.ApiClient.ParameterToString(orderId)); // path parameter
            if (rejectAfterRefund != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "reject_after_refund", rejectAfterRefund)); // query parameter
            if (skipCustomerNotification != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "skip_customer_notification", skipCustomerNotification)); // query parameter
            if (autoOrderCancel != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "auto_order_cancel", autoOrderCancel)); // query parameter
            if (manualRefund != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "manual_refund", manualRefund)); // query parameter
            if (reverseAffiliateTransactions != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "reverse_affiliate_transactions", reverseAffiliateTransactions)); // query parameter
            if (expand != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "_expand", expand)); // query parameter
            if (order != null && order.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(order); // http body (model) parameter
            }
            else
            {
                localVarPostBody = order; // byte array
            }

            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RefundOrder", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<OrderResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (OrderResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(OrderResponse)));
        }

        /// <summary>
        /// Replacement order Create a replacement order based upon a previous order 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId">The order id to generate a replacement for.</param>
        /// <param name="replacement">Replacement order details</param>
        /// <returns>OrderReplacementResponse</returns>
        public OrderReplacementResponse Replacement (string orderId, OrderReplacement replacement)
        {
             ApiResponse<OrderReplacementResponse> localVarResponse = ReplacementWithHttpInfo(orderId, replacement);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Replacement order Create a replacement order based upon a previous order 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId">The order id to generate a replacement for.</param>
        /// <param name="replacement">Replacement order details</param>
        /// <returns>ApiResponse of OrderReplacementResponse</returns>
        public ApiResponse< OrderReplacementResponse > ReplacementWithHttpInfo (string orderId, OrderReplacement replacement)
        {
            // verify the required parameter 'orderId' is set
            if (orderId == null)
                throw new ApiException(400, "Missing required parameter 'orderId' when calling OrderApi->Replacement");
            // verify the required parameter 'replacement' is set
            if (replacement == null)
                throw new ApiException(400, "Missing required parameter 'replacement' when calling OrderApi->Replacement");

            var localVarPath = "/order/orders/{order_id}/replacement";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (orderId != null) localVarPathParams.Add("order_id", this.Configuration.ApiClient.ParameterToString(orderId)); // path parameter
            if (replacement != null && replacement.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(replacement); // http body (model) parameter
            }
            else
            {
                localVarPostBody = replacement; // byte array
            }

            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Replacement", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<OrderReplacementResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (OrderReplacementResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(OrderReplacementResponse)));
        }

        /// <summary>
        /// Replacement order Create a replacement order based upon a previous order 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId">The order id to generate a replacement for.</param>
        /// <param name="replacement">Replacement order details</param>
        /// <returns>Task of OrderReplacementResponse</returns>
        public async System.Threading.Tasks.Task<OrderReplacementResponse> ReplacementAsync (string orderId, OrderReplacement replacement)
        {
             ApiResponse<OrderReplacementResponse> localVarResponse = await ReplacementAsyncWithHttpInfo(orderId, replacement);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Replacement order Create a replacement order based upon a previous order 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId">The order id to generate a replacement for.</param>
        /// <param name="replacement">Replacement order details</param>
        /// <returns>Task of ApiResponse (OrderReplacementResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<OrderReplacementResponse>> ReplacementAsyncWithHttpInfo (string orderId, OrderReplacement replacement)
        {
            // verify the required parameter 'orderId' is set
            if (orderId == null)
                throw new ApiException(400, "Missing required parameter 'orderId' when calling OrderApi->Replacement");
            // verify the required parameter 'replacement' is set
            if (replacement == null)
                throw new ApiException(400, "Missing required parameter 'replacement' when calling OrderApi->Replacement");

            var localVarPath = "/order/orders/{order_id}/replacement";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (orderId != null) localVarPathParams.Add("order_id", this.Configuration.ApiClient.ParameterToString(orderId)); // path parameter
            if (replacement != null && replacement.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(replacement); // http body (model) parameter
            }
            else
            {
                localVarPostBody = replacement; // byte array
            }

            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Replacement", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<OrderReplacementResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (OrderReplacementResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(OrderReplacementResponse)));
        }

        /// <summary>
        /// Resend receipt Resend the receipt for an order on the UltraCart account. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId">The order id to resend the receipt for.</param>
        /// <returns>BaseResponse</returns>
        public BaseResponse ResendReceipt (string orderId)
        {
             ApiResponse<BaseResponse> localVarResponse = ResendReceiptWithHttpInfo(orderId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Resend receipt Resend the receipt for an order on the UltraCart account. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId">The order id to resend the receipt for.</param>
        /// <returns>ApiResponse of BaseResponse</returns>
        public ApiResponse< BaseResponse > ResendReceiptWithHttpInfo (string orderId)
        {
            // verify the required parameter 'orderId' is set
            if (orderId == null)
                throw new ApiException(400, "Missing required parameter 'orderId' when calling OrderApi->ResendReceipt");

            var localVarPath = "/order/orders/{order_id}/resend_receipt";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (orderId != null) localVarPathParams.Add("order_id", this.Configuration.ApiClient.ParameterToString(orderId)); // path parameter

            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ResendReceipt", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BaseResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (BaseResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BaseResponse)));
        }

        /// <summary>
        /// Resend receipt Resend the receipt for an order on the UltraCart account. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId">The order id to resend the receipt for.</param>
        /// <returns>Task of BaseResponse</returns>
        public async System.Threading.Tasks.Task<BaseResponse> ResendReceiptAsync (string orderId)
        {
             ApiResponse<BaseResponse> localVarResponse = await ResendReceiptAsyncWithHttpInfo(orderId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Resend receipt Resend the receipt for an order on the UltraCart account. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId">The order id to resend the receipt for.</param>
        /// <returns>Task of ApiResponse (BaseResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<BaseResponse>> ResendReceiptAsyncWithHttpInfo (string orderId)
        {
            // verify the required parameter 'orderId' is set
            if (orderId == null)
                throw new ApiException(400, "Missing required parameter 'orderId' when calling OrderApi->ResendReceipt");

            var localVarPath = "/order/orders/{order_id}/resend_receipt";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (orderId != null) localVarPathParams.Add("order_id", this.Configuration.ApiClient.ParameterToString(orderId)); // path parameter

            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ResendReceipt", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BaseResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (BaseResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BaseResponse)));
        }

        /// <summary>
        /// Resend shipment confirmation Resend shipment confirmation for an order on the UltraCart account. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId">The order id to resend the shipment notification for.</param>
        /// <returns>BaseResponse</returns>
        public BaseResponse ResendShipmentConfirmation (string orderId)
        {
             ApiResponse<BaseResponse> localVarResponse = ResendShipmentConfirmationWithHttpInfo(orderId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Resend shipment confirmation Resend shipment confirmation for an order on the UltraCart account. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId">The order id to resend the shipment notification for.</param>
        /// <returns>ApiResponse of BaseResponse</returns>
        public ApiResponse< BaseResponse > ResendShipmentConfirmationWithHttpInfo (string orderId)
        {
            // verify the required parameter 'orderId' is set
            if (orderId == null)
                throw new ApiException(400, "Missing required parameter 'orderId' when calling OrderApi->ResendShipmentConfirmation");

            var localVarPath = "/order/orders/{order_id}/resend_shipment_confirmation";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (orderId != null) localVarPathParams.Add("order_id", this.Configuration.ApiClient.ParameterToString(orderId)); // path parameter

            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ResendShipmentConfirmation", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BaseResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (BaseResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BaseResponse)));
        }

        /// <summary>
        /// Resend shipment confirmation Resend shipment confirmation for an order on the UltraCart account. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId">The order id to resend the shipment notification for.</param>
        /// <returns>Task of BaseResponse</returns>
        public async System.Threading.Tasks.Task<BaseResponse> ResendShipmentConfirmationAsync (string orderId)
        {
             ApiResponse<BaseResponse> localVarResponse = await ResendShipmentConfirmationAsyncWithHttpInfo(orderId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Resend shipment confirmation Resend shipment confirmation for an order on the UltraCart account. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId">The order id to resend the shipment notification for.</param>
        /// <returns>Task of ApiResponse (BaseResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<BaseResponse>> ResendShipmentConfirmationAsyncWithHttpInfo (string orderId)
        {
            // verify the required parameter 'orderId' is set
            if (orderId == null)
                throw new ApiException(400, "Missing required parameter 'orderId' when calling OrderApi->ResendShipmentConfirmation");

            var localVarPath = "/order/orders/{order_id}/resend_shipment_confirmation";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (orderId != null) localVarPathParams.Add("order_id", this.Configuration.ApiClient.ParameterToString(orderId)); // path parameter

            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ResendShipmentConfirmation", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BaseResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (BaseResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BaseResponse)));
        }

        /// <summary>
        /// Update A/R Retry Configuration Update A/R Retry Configuration.  This is primarily an internal API call.  It is doubtful you would ever need to use it. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="retryConfig">AccountsReceivableRetryConfig object</param>
        /// <returns>BaseResponse</returns>
        public BaseResponse UpdateAccountsReceivableRetryConfig (AccountsReceivableRetryConfig retryConfig)
        {
             ApiResponse<BaseResponse> localVarResponse = UpdateAccountsReceivableRetryConfigWithHttpInfo(retryConfig);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update A/R Retry Configuration Update A/R Retry Configuration.  This is primarily an internal API call.  It is doubtful you would ever need to use it. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="retryConfig">AccountsReceivableRetryConfig object</param>
        /// <returns>ApiResponse of BaseResponse</returns>
        public ApiResponse< BaseResponse > UpdateAccountsReceivableRetryConfigWithHttpInfo (AccountsReceivableRetryConfig retryConfig)
        {
            // verify the required parameter 'retryConfig' is set
            if (retryConfig == null)
                throw new ApiException(400, "Missing required parameter 'retryConfig' when calling OrderApi->UpdateAccountsReceivableRetryConfig");

            var localVarPath = "/order/accountsReceivableRetryConfig";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (retryConfig != null && retryConfig.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(retryConfig); // http body (model) parameter
            }
            else
            {
                localVarPostBody = retryConfig; // byte array
            }

            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateAccountsReceivableRetryConfig", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BaseResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (BaseResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BaseResponse)));
        }

        /// <summary>
        /// Update A/R Retry Configuration Update A/R Retry Configuration.  This is primarily an internal API call.  It is doubtful you would ever need to use it. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="retryConfig">AccountsReceivableRetryConfig object</param>
        /// <returns>Task of BaseResponse</returns>
        public async System.Threading.Tasks.Task<BaseResponse> UpdateAccountsReceivableRetryConfigAsync (AccountsReceivableRetryConfig retryConfig)
        {
             ApiResponse<BaseResponse> localVarResponse = await UpdateAccountsReceivableRetryConfigAsyncWithHttpInfo(retryConfig);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update A/R Retry Configuration Update A/R Retry Configuration.  This is primarily an internal API call.  It is doubtful you would ever need to use it. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="retryConfig">AccountsReceivableRetryConfig object</param>
        /// <returns>Task of ApiResponse (BaseResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<BaseResponse>> UpdateAccountsReceivableRetryConfigAsyncWithHttpInfo (AccountsReceivableRetryConfig retryConfig)
        {
            // verify the required parameter 'retryConfig' is set
            if (retryConfig == null)
                throw new ApiException(400, "Missing required parameter 'retryConfig' when calling OrderApi->UpdateAccountsReceivableRetryConfig");

            var localVarPath = "/order/accountsReceivableRetryConfig";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (retryConfig != null && retryConfig.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(retryConfig); // http body (model) parameter
            }
            else
            {
                localVarPostBody = retryConfig; // byte array
            }

            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateAccountsReceivableRetryConfig", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BaseResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (BaseResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BaseResponse)));
        }

        /// <summary>
        /// Update an order Update a new order on the UltraCart account.  This is probably NOT the method you want.  It is rare to update a completed order.  This will not trigger charges, emails, or any other automation. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="order">Order to update</param>
        /// <param name="orderId">The order id to update.</param>
        /// <param name="expand">The object expansion to perform on the result.  See documentation for examples (optional)</param>
        /// <returns>OrderResponse</returns>
        public OrderResponse UpdateOrder (Order order, string orderId, string expand = null)
        {
             ApiResponse<OrderResponse> localVarResponse = UpdateOrderWithHttpInfo(order, orderId, expand);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update an order Update a new order on the UltraCart account.  This is probably NOT the method you want.  It is rare to update a completed order.  This will not trigger charges, emails, or any other automation. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="order">Order to update</param>
        /// <param name="orderId">The order id to update.</param>
        /// <param name="expand">The object expansion to perform on the result.  See documentation for examples (optional)</param>
        /// <returns>ApiResponse of OrderResponse</returns>
        public ApiResponse< OrderResponse > UpdateOrderWithHttpInfo (Order order, string orderId, string expand = null)
        {
            // verify the required parameter 'order' is set
            if (order == null)
                throw new ApiException(400, "Missing required parameter 'order' when calling OrderApi->UpdateOrder");
            // verify the required parameter 'orderId' is set
            if (orderId == null)
                throw new ApiException(400, "Missing required parameter 'orderId' when calling OrderApi->UpdateOrder");

            var localVarPath = "/order/orders/{order_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json; charset=UTF-8"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (orderId != null) localVarPathParams.Add("order_id", this.Configuration.ApiClient.ParameterToString(orderId)); // path parameter
            if (expand != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "_expand", expand)); // query parameter
            if (order != null && order.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(order); // http body (model) parameter
            }
            else
            {
                localVarPostBody = order; // byte array
            }

            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateOrder", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<OrderResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (OrderResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(OrderResponse)));
        }

        /// <summary>
        /// Update an order Update a new order on the UltraCart account.  This is probably NOT the method you want.  It is rare to update a completed order.  This will not trigger charges, emails, or any other automation. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="order">Order to update</param>
        /// <param name="orderId">The order id to update.</param>
        /// <param name="expand">The object expansion to perform on the result.  See documentation for examples (optional)</param>
        /// <returns>Task of OrderResponse</returns>
        public async System.Threading.Tasks.Task<OrderResponse> UpdateOrderAsync (Order order, string orderId, string expand = null)
        {
             ApiResponse<OrderResponse> localVarResponse = await UpdateOrderAsyncWithHttpInfo(order, orderId, expand);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update an order Update a new order on the UltraCart account.  This is probably NOT the method you want.  It is rare to update a completed order.  This will not trigger charges, emails, or any other automation. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="order">Order to update</param>
        /// <param name="orderId">The order id to update.</param>
        /// <param name="expand">The object expansion to perform on the result.  See documentation for examples (optional)</param>
        /// <returns>Task of ApiResponse (OrderResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<OrderResponse>> UpdateOrderAsyncWithHttpInfo (Order order, string orderId, string expand = null)
        {
            // verify the required parameter 'order' is set
            if (order == null)
                throw new ApiException(400, "Missing required parameter 'order' when calling OrderApi->UpdateOrder");
            // verify the required parameter 'orderId' is set
            if (orderId == null)
                throw new ApiException(400, "Missing required parameter 'orderId' when calling OrderApi->UpdateOrder");

            var localVarPath = "/order/orders/{order_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json; charset=UTF-8"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (orderId != null) localVarPathParams.Add("order_id", this.Configuration.ApiClient.ParameterToString(orderId)); // path parameter
            if (expand != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "_expand", expand)); // query parameter
            if (order != null && order.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(order); // http body (model) parameter
            }
            else
            {
                localVarPostBody = order; // byte array
            }

            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateOrder", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<OrderResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (OrderResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(OrderResponse)));
        }

    }
}
