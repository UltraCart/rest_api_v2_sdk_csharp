/* 
 * UltraCart Rest API V2
 *
 * UltraCart REST API Version 2
 *
 * OpenAPI spec version: 2.0.0
 * Contact: support@ultracart.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using com.ultracart.admin.v2.Client;
using com.ultracart.admin.v2.Model;

namespace com.ultracart.admin.v2.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IStorefrontApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Add to library
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addLibraryRequest">New library item request</param>
        /// <returns>LibraryItemResponse</returns>
        LibraryItemResponse AddToLibrary (AddLibraryItemRequest addLibraryRequest);

        /// <summary>
        /// Add to library
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addLibraryRequest">New library item request</param>
        /// <returns>ApiResponse of LibraryItemResponse</returns>
        ApiResponse<LibraryItemResponse> AddToLibraryWithHttpInfo (AddLibraryItemRequest addLibraryRequest);
        /// <summary>
        /// Apply library item to storefront.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applyLibraryRequest">New library item</param>
        /// <returns>ApplyLibraryItemResponse</returns>
        ApplyLibraryItemResponse ApplyToStoreFront (ApplyLibraryItemRequest applyLibraryRequest);

        /// <summary>
        /// Apply library item to storefront.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applyLibraryRequest">New library item</param>
        /// <returns>ApiResponse of ApplyLibraryItemResponse</returns>
        ApiResponse<ApplyLibraryItemResponse> ApplyToStoreFrontWithHttpInfo (ApplyLibraryItemRequest applyLibraryRequest);
        /// <summary>
        /// Archive email list
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="emailListUuid"></param>
        /// <returns>EmailListArchiveResponse</returns>
        EmailListArchiveResponse ArchiveEmailList (int? storefrontOid, string emailListUuid);

        /// <summary>
        /// Archive email list
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="emailListUuid"></param>
        /// <returns>ApiResponse of EmailListArchiveResponse</returns>
        ApiResponse<EmailListArchiveResponse> ArchiveEmailListWithHttpInfo (int? storefrontOid, string emailListUuid);
        /// <summary>
        /// Archive email segment
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="emailSegmentUuid"></param>
        /// <returns>EmailSegmentArchiveResponse</returns>
        EmailSegmentArchiveResponse ArchiveEmailSegment (int? storefrontOid, string emailSegmentUuid);

        /// <summary>
        /// Archive email segment
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="emailSegmentUuid"></param>
        /// <returns>ApiResponse of EmailSegmentArchiveResponse</returns>
        ApiResponse<EmailSegmentArchiveResponse> ArchiveEmailSegmentWithHttpInfo (int? storefrontOid, string emailSegmentUuid);
        /// <summary>
        /// Back populate email flow
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="emailFlowUuid"></param>
        /// <param name="backPopulateRequest">The request to back populate</param>
        /// <returns>EmailFlowBackPopulateResponse</returns>
        EmailFlowBackPopulateResponse BackPopulateEmailFlow (int? storefrontOid, string emailFlowUuid, EmailFlowBackPopulateRequest backPopulateRequest);

        /// <summary>
        /// Back populate email flow
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="emailFlowUuid"></param>
        /// <param name="backPopulateRequest">The request to back populate</param>
        /// <returns>ApiResponse of EmailFlowBackPopulateResponse</returns>
        ApiResponse<EmailFlowBackPopulateResponse> BackPopulateEmailFlowWithHttpInfo (int? storefrontOid, string emailFlowUuid, EmailFlowBackPopulateRequest backPopulateRequest);
        /// <summary>
        /// Check download of email segment
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="emailSegmentUuid"></param>
        /// <param name="emailSegmentRebuildUuid"></param>
        /// <returns>EmailSegmentDownloadPrepareResponse</returns>
        EmailSegmentDownloadPrepareResponse CheckDownloadEmailSegment (int? storefrontOid, string emailSegmentUuid, string emailSegmentRebuildUuid);

        /// <summary>
        /// Check download of email segment
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="emailSegmentUuid"></param>
        /// <param name="emailSegmentRebuildUuid"></param>
        /// <returns>ApiResponse of EmailSegmentDownloadPrepareResponse</returns>
        ApiResponse<EmailSegmentDownloadPrepareResponse> CheckDownloadEmailSegmentWithHttpInfo (int? storefrontOid, string emailSegmentUuid, string emailSegmentRebuildUuid);
        /// <summary>
        /// Clone email campaign
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="emailCampaignUuid"></param>
        /// <param name="targetStorefrontOid"> (optional)</param>
        /// <returns>EmailCampaignResponse</returns>
        EmailCampaignResponse CloneEmailCampaign (int? storefrontOid, string emailCampaignUuid, int? targetStorefrontOid = null);

        /// <summary>
        /// Clone email campaign
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="emailCampaignUuid"></param>
        /// <param name="targetStorefrontOid"> (optional)</param>
        /// <returns>ApiResponse of EmailCampaignResponse</returns>
        ApiResponse<EmailCampaignResponse> CloneEmailCampaignWithHttpInfo (int? storefrontOid, string emailCampaignUuid, int? targetStorefrontOid = null);
        /// <summary>
        /// Clone email flow
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="emailFlowUuid"></param>
        /// <param name="targetStorefrontOid"> (optional)</param>
        /// <returns>EmailFlowResponse</returns>
        EmailFlowResponse CloneEmailFlow (int? storefrontOid, string emailFlowUuid, int? targetStorefrontOid = null);

        /// <summary>
        /// Clone email flow
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="emailFlowUuid"></param>
        /// <param name="targetStorefrontOid"> (optional)</param>
        /// <returns>ApiResponse of EmailFlowResponse</returns>
        ApiResponse<EmailFlowResponse> CloneEmailFlowWithHttpInfo (int? storefrontOid, string emailFlowUuid, int? targetStorefrontOid = null);
        /// <summary>
        /// Create email campaign
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="domain"></param>
        /// <returns>EmailSendingDomainResponse</returns>
        EmailSendingDomainResponse CreateEmailSendingDomain (string domain);

        /// <summary>
        /// Create email campaign
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="domain"></param>
        /// <returns>ApiResponse of EmailSendingDomainResponse</returns>
        ApiResponse<EmailSendingDomainResponse> CreateEmailSendingDomainWithHttpInfo (string domain);
        /// <summary>
        /// Create email sending domain for various providers
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="emailDomain">EmailDomain</param>
        /// <returns>EmailSendingDomainResponse</returns>
        EmailSendingDomainResponse CreateEmailSendingDomain2 (EmailDomain emailDomain);

        /// <summary>
        /// Create email sending domain for various providers
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="emailDomain">EmailDomain</param>
        /// <returns>ApiResponse of EmailSendingDomainResponse</returns>
        ApiResponse<EmailSendingDomainResponse> CreateEmailSendingDomain2WithHttpInfo (EmailDomain emailDomain);
        /// <summary>
        /// Create Twilio account
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="twilio">Twilio</param>
        /// <returns>TwilioResponse</returns>
        TwilioResponse CreateTwilioAccount (Twilio twilio);

        /// <summary>
        /// Create Twilio account
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="twilio">Twilio</param>
        /// <returns>ApiResponse of TwilioResponse</returns>
        ApiResponse<TwilioResponse> CreateTwilioAccountWithHttpInfo (Twilio twilio);
        /// <summary>
        /// Delete email campaignFolder
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="emailCampaignFolderUuid"></param>
        /// <returns>BaseResponse</returns>
        BaseResponse DeleteEmailCampaignFolder (int? storefrontOid, string emailCampaignFolderUuid);

        /// <summary>
        /// Delete email campaignFolder
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="emailCampaignFolderUuid"></param>
        /// <returns>ApiResponse of BaseResponse</returns>
        ApiResponse<BaseResponse> DeleteEmailCampaignFolderWithHttpInfo (int? storefrontOid, string emailCampaignFolderUuid);
        /// <summary>
        /// Delete communication sequence stats
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="commseqUuid"></param>
        /// <returns></returns>
        void DeleteEmailCommseqStat (int? storefrontOid, string commseqUuid);

        /// <summary>
        /// Delete communication sequence stats
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="commseqUuid"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteEmailCommseqStatWithHttpInfo (int? storefrontOid, string commseqUuid);
        /// <summary>
        /// Delete email email
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="commseqEmailUuid"></param>
        /// <returns>BaseResponse</returns>
        BaseResponse DeleteEmailEmail (int? storefrontOid, string commseqEmailUuid);

        /// <summary>
        /// Delete email email
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="commseqEmailUuid"></param>
        /// <returns>ApiResponse of BaseResponse</returns>
        ApiResponse<BaseResponse> DeleteEmailEmailWithHttpInfo (int? storefrontOid, string commseqEmailUuid);
        /// <summary>
        /// Delete email flowFolder
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="emailFlowFolderUuid"></param>
        /// <returns>BaseResponse</returns>
        BaseResponse DeleteEmailFlowFolder (int? storefrontOid, string emailFlowFolderUuid);

        /// <summary>
        /// Delete email flowFolder
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="emailFlowFolderUuid"></param>
        /// <returns>ApiResponse of BaseResponse</returns>
        ApiResponse<BaseResponse> DeleteEmailFlowFolderWithHttpInfo (int? storefrontOid, string emailFlowFolderUuid);
        /// <summary>
        /// Delete email list customer
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="emailListUuid"></param>
        /// <param name="emailCustomerUuid"></param>
        /// <returns>BaseResponse</returns>
        BaseResponse DeleteEmailListCustomer (int? storefrontOid, string emailListUuid, string emailCustomerUuid);

        /// <summary>
        /// Delete email list customer
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="emailListUuid"></param>
        /// <param name="emailCustomerUuid"></param>
        /// <returns>ApiResponse of BaseResponse</returns>
        ApiResponse<BaseResponse> DeleteEmailListCustomerWithHttpInfo (int? storefrontOid, string emailListUuid, string emailCustomerUuid);
        /// <summary>
        /// Delete email ListSegmentFolder
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="emailListSegmentFolderUuid"></param>
        /// <returns>BaseResponse</returns>
        BaseResponse DeleteEmailListSegmentFolder (int? storefrontOid, string emailListSegmentFolderUuid);

        /// <summary>
        /// Delete email ListSegmentFolder
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="emailListSegmentFolderUuid"></param>
        /// <returns>ApiResponse of BaseResponse</returns>
        ApiResponse<BaseResponse> DeleteEmailListSegmentFolderWithHttpInfo (int? storefrontOid, string emailListSegmentFolderUuid);
        /// <summary>
        /// Delete email postcard
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="commseqPostcardUuid"></param>
        /// <returns>BaseResponse</returns>
        BaseResponse DeleteEmailPostcard (int? storefrontOid, string commseqPostcardUuid);

        /// <summary>
        /// Delete email postcard
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="commseqPostcardUuid"></param>
        /// <returns>ApiResponse of BaseResponse</returns>
        ApiResponse<BaseResponse> DeleteEmailPostcardWithHttpInfo (int? storefrontOid, string commseqPostcardUuid);
        /// <summary>
        /// delete email campaign
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="domain"></param>
        /// <returns>BaseResponse</returns>
        BaseResponse DeleteEmailSendingDomain (string domain);

        /// <summary>
        /// delete email campaign
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="domain"></param>
        /// <returns>ApiResponse of BaseResponse</returns>
        ApiResponse<BaseResponse> DeleteEmailSendingDomainWithHttpInfo (string domain);
        /// <summary>
        /// Delete experiment
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="storefrontExperimentOid"></param>
        /// <returns></returns>
        void DeleteExperiment (int? storefrontOid, int? storefrontExperimentOid);

        /// <summary>
        /// Delete experiment
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="storefrontExperimentOid"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteExperimentWithHttpInfo (int? storefrontOid, int? storefrontExperimentOid);
        /// <summary>
        /// Delete screen recording heatmap
        /// </summary>
        /// <remarks>
        /// Delete screen recording heatmap 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="query">Query</param>
        /// <returns></returns>
        void DeleteHeatmap (int? storefrontOid, ScreenRecordingHeatmapReset query);

        /// <summary>
        /// Delete screen recording heatmap
        /// </summary>
        /// <remarks>
        /// Delete screen recording heatmap 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="query">Query</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteHeatmapWithHttpInfo (int? storefrontOid, ScreenRecordingHeatmapReset query);
        /// <summary>
        /// Delete library item
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="libraryItemOid"></param>
        /// <returns></returns>
        void DeleteLibraryItem (int? libraryItemOid);

        /// <summary>
        /// Delete library item
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="libraryItemOid"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteLibraryItemWithHttpInfo (int? libraryItemOid);
        /// <summary>
        /// Delete all published versions for a library item, including anything in review.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="libraryItemOid"></param>
        /// <returns></returns>
        void DeleteLibraryItemPublishedVersions (int? libraryItemOid);

        /// <summary>
        /// Delete all published versions for a library item, including anything in review.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="libraryItemOid"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteLibraryItemPublishedVersionsWithHttpInfo (int? libraryItemOid);
        /// <summary>
        /// Delete screen recording segment
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="screenRecordingSegmentOid"></param>
        /// <returns></returns>
        void DeleteScreenRecordingSegment (int? storefrontOid, int? screenRecordingSegmentOid);

        /// <summary>
        /// Delete screen recording segment
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="screenRecordingSegmentOid"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteScreenRecordingSegmentWithHttpInfo (int? storefrontOid, int? screenRecordingSegmentOid);
        /// <summary>
        /// delete Twilio account
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="espTwilioUuid"></param>
        /// <returns>BaseResponse</returns>
        BaseResponse DeleteTwilioAccount (string espTwilioUuid);

        /// <summary>
        /// delete Twilio account
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="espTwilioUuid"></param>
        /// <returns>ApiResponse of BaseResponse</returns>
        ApiResponse<BaseResponse> DeleteTwilioAccountWithHttpInfo (string espTwilioUuid);
        /// <summary>
        /// Duplicate library item.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="libraryItemOid"></param>
        /// <returns>LibraryItemResponse</returns>
        LibraryItemResponse DuplicateLibraryItem (int? libraryItemOid);

        /// <summary>
        /// Duplicate library item.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="libraryItemOid"></param>
        /// <returns>ApiResponse of LibraryItemResponse</returns>
        ApiResponse<LibraryItemResponse> DuplicateLibraryItemWithHttpInfo (int? libraryItemOid);
        /// <summary>
        /// Update favorite flag on screen recording
        /// </summary>
        /// <remarks>
        /// Update favorite flag on screen recording 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="screenRecordingUuid"></param>
        /// <returns></returns>
        void FavoriteScreenRecording (int? storefrontOid, string screenRecordingUuid);

        /// <summary>
        /// Update favorite flag on screen recording
        /// </summary>
        /// <remarks>
        /// Update favorite flag on screen recording 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="screenRecordingUuid"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> FavoriteScreenRecordingWithHttpInfo (int? storefrontOid, string screenRecordingUuid);
        /// <summary>
        /// Obtain lat/long for an address
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="geocodeRequest">geocode request</param>
        /// <returns>GeocodeResponse</returns>
        GeocodeResponse GeocodeAddress (int? storefrontOid, GeocodeRequest geocodeRequest);

        /// <summary>
        /// Obtain lat/long for an address
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="geocodeRequest">geocode request</param>
        /// <returns>ApiResponse of GeocodeResponse</returns>
        ApiResponse<GeocodeResponse> GeocodeAddressWithHttpInfo (int? storefrontOid, GeocodeRequest geocodeRequest);
        /// <summary>
        /// Get countries
        /// </summary>
        /// <remarks>
        /// Obtain a list of all the countries 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <returns>CountriesResponse</returns>
        CountriesResponse GetCountries (int? storefrontOid);

        /// <summary>
        /// Get countries
        /// </summary>
        /// <remarks>
        /// Obtain a list of all the countries 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <returns>ApiResponse of CountriesResponse</returns>
        ApiResponse<CountriesResponse> GetCountriesWithHttpInfo (int? storefrontOid);
        /// <summary>
        /// Gets editor token
        /// </summary>
        /// <remarks>
        /// Fetches a temporary authentication token for the editor 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <returns>EmailEditorTokenResponse</returns>
        EmailEditorTokenResponse GetEditorToken (int? storefrontOid);

        /// <summary>
        /// Gets editor token
        /// </summary>
        /// <remarks>
        /// Fetches a temporary authentication token for the editor 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <returns>ApiResponse of EmailEditorTokenResponse</returns>
        ApiResponse<EmailEditorTokenResponse> GetEditorTokenWithHttpInfo (int? storefrontOid);
        /// <summary>
        /// Get email communication base templates
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <returns>EmailBaseTemplateListResponse</returns>
        EmailBaseTemplateListResponse GetEmailBaseTemplates (int? storefrontOid);

        /// <summary>
        /// Get email communication base templates
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <returns>ApiResponse of EmailBaseTemplateListResponse</returns>
        ApiResponse<EmailBaseTemplateListResponse> GetEmailBaseTemplatesWithHttpInfo (int? storefrontOid);
        /// <summary>
        /// Get email campaign
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="emailCampaignUuid"></param>
        /// <returns>EmailCampaignResponse</returns>
        EmailCampaignResponse GetEmailCampaign (int? storefrontOid, string emailCampaignUuid);

        /// <summary>
        /// Get email campaign
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="emailCampaignUuid"></param>
        /// <returns>ApiResponse of EmailCampaignResponse</returns>
        ApiResponse<EmailCampaignResponse> GetEmailCampaignWithHttpInfo (int? storefrontOid, string emailCampaignUuid);
        /// <summary>
        /// Get email campaign folder
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="emailCampaignFolderUuid"></param>
        /// <returns>EmailCampaignFolderResponse</returns>
        EmailCampaignFolderResponse GetEmailCampaignFolder (int? storefrontOid, string emailCampaignFolderUuid);

        /// <summary>
        /// Get email campaign folder
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="emailCampaignFolderUuid"></param>
        /// <returns>ApiResponse of EmailCampaignFolderResponse</returns>
        ApiResponse<EmailCampaignFolderResponse> GetEmailCampaignFolderWithHttpInfo (int? storefrontOid, string emailCampaignFolderUuid);
        /// <summary>
        /// Get email campaign folders
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <returns>EmailCampaignFoldersResponse</returns>
        EmailCampaignFoldersResponse GetEmailCampaignFolders (int? storefrontOid);

        /// <summary>
        /// Get email campaign folders
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <returns>ApiResponse of EmailCampaignFoldersResponse</returns>
        ApiResponse<EmailCampaignFoldersResponse> GetEmailCampaignFoldersWithHttpInfo (int? storefrontOid);
        /// <summary>
        /// Get email campaign screenshots
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="emailCampaignUuid"></param>
        /// <returns>ScreenshotsResponse</returns>
        ScreenshotsResponse GetEmailCampaignScreenshots (int? storefrontOid, string emailCampaignUuid);

        /// <summary>
        /// Get email campaign screenshots
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="emailCampaignUuid"></param>
        /// <returns>ApiResponse of ScreenshotsResponse</returns>
        ApiResponse<ScreenshotsResponse> GetEmailCampaignScreenshotsWithHttpInfo (int? storefrontOid, string emailCampaignUuid);
        /// <summary>
        /// Get email campaigns
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <returns>EmailCampaignsResponse</returns>
        EmailCampaignsResponse GetEmailCampaigns (int? storefrontOid);

        /// <summary>
        /// Get email campaigns
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <returns>ApiResponse of EmailCampaignsResponse</returns>
        ApiResponse<EmailCampaignsResponse> GetEmailCampaignsWithHttpInfo (int? storefrontOid);
        /// <summary>
        /// Get email campaigns with stats
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="statDays"></param>
        /// <returns>EmailCampaignsResponse</returns>
        EmailCampaignsResponse GetEmailCampaignsWithStats (int? storefrontOid, string statDays);

        /// <summary>
        /// Get email campaigns with stats
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="statDays"></param>
        /// <returns>ApiResponse of EmailCampaignsResponse</returns>
        ApiResponse<EmailCampaignsResponse> GetEmailCampaignsWithStatsWithHttpInfo (int? storefrontOid, string statDays);
        /// <summary>
        /// Get email commseq
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="commseqUuid"></param>
        /// <returns>EmailCommseqResponse</returns>
        EmailCommseqResponse GetEmailCommseq (int? storefrontOid, string commseqUuid);

        /// <summary>
        /// Get email commseq
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="commseqUuid"></param>
        /// <returns>ApiResponse of EmailCommseqResponse</returns>
        ApiResponse<EmailCommseqResponse> GetEmailCommseqWithHttpInfo (int? storefrontOid, string commseqUuid);
        /// <summary>
        /// Get email communication sequence emails stats
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="commseqUuid"></param>
        /// <param name="statsRequest">StatsRequest</param>
        /// <returns>EmailStatSummaryResponse</returns>
        EmailStatSummaryResponse GetEmailCommseqEmailStats (int? storefrontOid, string commseqUuid, EmailStatSummaryRequest statsRequest);

        /// <summary>
        /// Get email communication sequence emails stats
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="commseqUuid"></param>
        /// <param name="statsRequest">StatsRequest</param>
        /// <returns>ApiResponse of EmailStatSummaryResponse</returns>
        ApiResponse<EmailStatSummaryResponse> GetEmailCommseqEmailStatsWithHttpInfo (int? storefrontOid, string commseqUuid, EmailStatSummaryRequest statsRequest);
        /// <summary>
        /// Get email communication sequence postcard stats
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="commseqUuid"></param>
        /// <param name="statsRequest">StatsRequest</param>
        /// <returns>EmailStatPostcardSummaryResponse</returns>
        EmailStatPostcardSummaryResponse GetEmailCommseqPostcardStats (int? storefrontOid, string commseqUuid, EmailStatPostcardSummaryRequest statsRequest);

        /// <summary>
        /// Get email communication sequence postcard stats
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="commseqUuid"></param>
        /// <param name="statsRequest">StatsRequest</param>
        /// <returns>ApiResponse of EmailStatPostcardSummaryResponse</returns>
        ApiResponse<EmailStatPostcardSummaryResponse> GetEmailCommseqPostcardStatsWithHttpInfo (int? storefrontOid, string commseqUuid, EmailStatPostcardSummaryRequest statsRequest);
        /// <summary>
        /// Get communication sequence stats overall
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="commseqUuid"></param>
        /// <returns>EmailCommseqStatResponse</returns>
        EmailCommseqStatResponse GetEmailCommseqStatOverall (int? storefrontOid, string commseqUuid);

        /// <summary>
        /// Get communication sequence stats overall
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="commseqUuid"></param>
        /// <returns>ApiResponse of EmailCommseqStatResponse</returns>
        ApiResponse<EmailCommseqStatResponse> GetEmailCommseqStatOverallWithHttpInfo (int? storefrontOid, string commseqUuid);
        /// <summary>
        /// Get email communication sequence step stats
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="commseqUuid"></param>
        /// <param name="statsRequest">StatsRequest</param>
        /// <returns>EmailStepStatResponse</returns>
        EmailStepStatResponse GetEmailCommseqStepStats (int? storefrontOid, string commseqUuid, EmailStepStatRequest statsRequest);

        /// <summary>
        /// Get email communication sequence step stats
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="commseqUuid"></param>
        /// <param name="statsRequest">StatsRequest</param>
        /// <returns>ApiResponse of EmailStepStatResponse</returns>
        ApiResponse<EmailStepStatResponse> GetEmailCommseqStepStatsWithHttpInfo (int? storefrontOid, string commseqUuid, EmailStepStatRequest statsRequest);
        /// <summary>
        /// Get email communication sequence customers waiting at each requested step
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="commseqUuid"></param>
        /// <param name="waitingRequest">WaitingRequest</param>
        /// <returns>EmailStepWaitingResponse</returns>
        EmailStepWaitingResponse GetEmailCommseqStepWaiting (int? storefrontOid, string commseqUuid, EmailStepWaitingRequest waitingRequest);

        /// <summary>
        /// Get email communication sequence customers waiting at each requested step
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="commseqUuid"></param>
        /// <param name="waitingRequest">WaitingRequest</param>
        /// <returns>ApiResponse of EmailStepWaitingResponse</returns>
        ApiResponse<EmailStepWaitingResponse> GetEmailCommseqStepWaitingWithHttpInfo (int? storefrontOid, string commseqUuid, EmailStepWaitingRequest waitingRequest);
        /// <summary>
        /// Get email webhook editor values
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="commseqUuid"></param>
        /// <returns>EmailWebhookEditorValuesResponse</returns>
        EmailWebhookEditorValuesResponse GetEmailCommseqWebhookEditorValues (int? storefrontOid, string commseqUuid);

        /// <summary>
        /// Get email webhook editor values
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="commseqUuid"></param>
        /// <returns>ApiResponse of EmailWebhookEditorValuesResponse</returns>
        ApiResponse<EmailWebhookEditorValuesResponse> GetEmailCommseqWebhookEditorValuesWithHttpInfo (int? storefrontOid, string commseqUuid);
        /// <summary>
        /// Get email commseqs
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <returns>EmailCommseqsResponse</returns>
        EmailCommseqsResponse GetEmailCommseqs (int? storefrontOid);

        /// <summary>
        /// Get email commseqs
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <returns>ApiResponse of EmailCommseqsResponse</returns>
        ApiResponse<EmailCommseqsResponse> GetEmailCommseqsWithHttpInfo (int? storefrontOid);
        /// <summary>
        /// Get customers editor URL
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="emailCustomerUuid"></param>
        /// <returns>EmailCustomerEditorUrlResponse</returns>
        EmailCustomerEditorUrlResponse GetEmailCustomerEditorUrl (int? storefrontOid, string emailCustomerUuid);

        /// <summary>
        /// Get customers editor URL
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="emailCustomerUuid"></param>
        /// <returns>ApiResponse of EmailCustomerEditorUrlResponse</returns>
        ApiResponse<EmailCustomerEditorUrlResponse> GetEmailCustomerEditorUrlWithHttpInfo (int? storefrontOid, string emailCustomerUuid);
        /// <summary>
        /// Get email customers
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="pageNumber"> (optional)</param>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="searchEmailPrefix"> (optional)</param>
        /// <returns>EmailCustomersResponse</returns>
        EmailCustomersResponse GetEmailCustomers (int? storefrontOid, int? pageNumber = null, int? pageSize = null, string searchEmailPrefix = null);

        /// <summary>
        /// Get email customers
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="pageNumber"> (optional)</param>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="searchEmailPrefix"> (optional)</param>
        /// <returns>ApiResponse of EmailCustomersResponse</returns>
        ApiResponse<EmailCustomersResponse> GetEmailCustomersWithHttpInfo (int? storefrontOid, int? pageNumber = null, int? pageSize = null, string searchEmailPrefix = null);
        /// <summary>
        /// Get email dashboard activity
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="lastRecords"> (optional)</param>
        /// <returns>EmailDashboardActivityResponse</returns>
        EmailDashboardActivityResponse GetEmailDashboardActivity (int? storefrontOid, int? lastRecords = null);

        /// <summary>
        /// Get email dashboard activity
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="lastRecords"> (optional)</param>
        /// <returns>ApiResponse of EmailDashboardActivityResponse</returns>
        ApiResponse<EmailDashboardActivityResponse> GetEmailDashboardActivityWithHttpInfo (int? storefrontOid, int? lastRecords = null);
        /// <summary>
        /// Get dashboard stats
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="days"> (optional)</param>
        /// <returns>EmailDashboardStatsResponse</returns>
        EmailDashboardStatsResponse GetEmailDashboardStats (int? storefrontOid, int? days = null);

        /// <summary>
        /// Get dashboard stats
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="days"> (optional)</param>
        /// <returns>ApiResponse of EmailDashboardStatsResponse</returns>
        ApiResponse<EmailDashboardStatsResponse> GetEmailDashboardStatsWithHttpInfo (int? storefrontOid, int? days = null);
        /// <summary>
        /// Get email dispatch logs
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="commseqUuid"></param>
        /// <param name="commseqStepUuid"></param>
        /// <returns>EmailCommseqStepLogsResponse</returns>
        EmailCommseqStepLogsResponse GetEmailDispatchLogs (int? storefrontOid, string commseqUuid, string commseqStepUuid);

        /// <summary>
        /// Get email dispatch logs
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="commseqUuid"></param>
        /// <param name="commseqStepUuid"></param>
        /// <returns>ApiResponse of EmailCommseqStepLogsResponse</returns>
        ApiResponse<EmailCommseqStepLogsResponse> GetEmailDispatchLogsWithHttpInfo (int? storefrontOid, string commseqUuid, string commseqStepUuid);
        /// <summary>
        /// Get email email
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="commseqEmailUuid"></param>
        /// <returns>EmailCommseqEmailResponse</returns>
        EmailCommseqEmailResponse GetEmailEmail (int? storefrontOid, string commseqEmailUuid);

        /// <summary>
        /// Get email email
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="commseqEmailUuid"></param>
        /// <returns>ApiResponse of EmailCommseqEmailResponse</returns>
        ApiResponse<EmailCommseqEmailResponse> GetEmailEmailWithHttpInfo (int? storefrontOid, string commseqEmailUuid);
        /// <summary>
        /// Get email email clicks
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="commseqUuid"></param>
        /// <param name="commseqStepUuid"></param>
        /// <param name="commseqEmailUuid"></param>
        /// <param name="days"> (optional)</param>
        /// <returns>EmailClicksResponse</returns>
        EmailClicksResponse GetEmailEmailClicks (int? storefrontOid, string commseqUuid, string commseqStepUuid, string commseqEmailUuid, int? days = null);

        /// <summary>
        /// Get email email clicks
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="commseqUuid"></param>
        /// <param name="commseqStepUuid"></param>
        /// <param name="commseqEmailUuid"></param>
        /// <param name="days"> (optional)</param>
        /// <returns>ApiResponse of EmailClicksResponse</returns>
        ApiResponse<EmailClicksResponse> GetEmailEmailClicksWithHttpInfo (int? storefrontOid, string commseqUuid, string commseqStepUuid, string commseqEmailUuid, int? days = null);
        /// <summary>
        /// Get email order customer editor url
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="commseqEmailUuid"></param>
        /// <param name="orderId"></param>
        /// <returns>EmailCustomerEditorUrlResponse</returns>
        EmailCustomerEditorUrlResponse GetEmailEmailCustomerEditorUrl (int? storefrontOid, string commseqEmailUuid, string orderId);

        /// <summary>
        /// Get email order customer editor url
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="commseqEmailUuid"></param>
        /// <param name="orderId"></param>
        /// <returns>ApiResponse of EmailCustomerEditorUrlResponse</returns>
        ApiResponse<EmailCustomerEditorUrlResponse> GetEmailEmailCustomerEditorUrlWithHttpInfo (int? storefrontOid, string commseqEmailUuid, string orderId);
        /// <summary>
        /// Get email email orders
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="commseqUuid"></param>
        /// <param name="commseqStepUuid"></param>
        /// <param name="commseqEmailUuid"></param>
        /// <param name="days"> (optional)</param>
        /// <returns>EmailOrdersResponse</returns>
        EmailOrdersResponse GetEmailEmailOrders (int? storefrontOid, string commseqUuid, string commseqStepUuid, string commseqEmailUuid, int? days = null);

        /// <summary>
        /// Get email email orders
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="commseqUuid"></param>
        /// <param name="commseqStepUuid"></param>
        /// <param name="commseqEmailUuid"></param>
        /// <param name="days"> (optional)</param>
        /// <returns>ApiResponse of EmailOrdersResponse</returns>
        ApiResponse<EmailOrdersResponse> GetEmailEmailOrdersWithHttpInfo (int? storefrontOid, string commseqUuid, string commseqStepUuid, string commseqEmailUuid, int? days = null);
        /// <summary>
        /// Get email emails
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <returns>EmailCommseqEmailsResponse</returns>
        EmailCommseqEmailsResponse GetEmailEmails (int? storefrontOid);

        /// <summary>
        /// Get email emails
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <returns>ApiResponse of EmailCommseqEmailsResponse</returns>
        ApiResponse<EmailCommseqEmailsResponse> GetEmailEmailsWithHttpInfo (int? storefrontOid);
        /// <summary>
        /// Get email emails multiple
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="emailCommseqEmailsRequest">Request of email uuids</param>
        /// <returns>EmailCommseqEmailsResponse</returns>
        EmailCommseqEmailsResponse GetEmailEmailsMultiple (int? storefrontOid, EmailCommseqEmailsRequest emailCommseqEmailsRequest);

        /// <summary>
        /// Get email emails multiple
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="emailCommseqEmailsRequest">Request of email uuids</param>
        /// <returns>ApiResponse of EmailCommseqEmailsResponse</returns>
        ApiResponse<EmailCommseqEmailsResponse> GetEmailEmailsMultipleWithHttpInfo (int? storefrontOid, EmailCommseqEmailsRequest emailCommseqEmailsRequest);
        /// <summary>
        /// Get email flow
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="emailFlowUuid"></param>
        /// <returns>EmailFlowResponse</returns>
        EmailFlowResponse GetEmailFlow (int? storefrontOid, string emailFlowUuid);

        /// <summary>
        /// Get email flow
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="emailFlowUuid"></param>
        /// <returns>ApiResponse of EmailFlowResponse</returns>
        ApiResponse<EmailFlowResponse> GetEmailFlowWithHttpInfo (int? storefrontOid, string emailFlowUuid);
        /// <summary>
        /// Get email flow folder
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="emailFlowFolderUuid"></param>
        /// <returns>EmailFlowFolderResponse</returns>
        EmailFlowFolderResponse GetEmailFlowFolder (int? storefrontOid, string emailFlowFolderUuid);

        /// <summary>
        /// Get email flow folder
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="emailFlowFolderUuid"></param>
        /// <returns>ApiResponse of EmailFlowFolderResponse</returns>
        ApiResponse<EmailFlowFolderResponse> GetEmailFlowFolderWithHttpInfo (int? storefrontOid, string emailFlowFolderUuid);
        /// <summary>
        /// Get email flow folders
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <returns>EmailFlowFoldersResponse</returns>
        EmailFlowFoldersResponse GetEmailFlowFolders (int? storefrontOid);

        /// <summary>
        /// Get email flow folders
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <returns>ApiResponse of EmailFlowFoldersResponse</returns>
        ApiResponse<EmailFlowFoldersResponse> GetEmailFlowFoldersWithHttpInfo (int? storefrontOid);
        /// <summary>
        /// Get email flow screenshots
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="emailFlowUuid"></param>
        /// <returns>ScreenshotsResponse</returns>
        ScreenshotsResponse GetEmailFlowScreenshots (int? storefrontOid, string emailFlowUuid);

        /// <summary>
        /// Get email flow screenshots
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="emailFlowUuid"></param>
        /// <returns>ApiResponse of ScreenshotsResponse</returns>
        ApiResponse<ScreenshotsResponse> GetEmailFlowScreenshotsWithHttpInfo (int? storefrontOid, string emailFlowUuid);
        /// <summary>
        /// Get email flows
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <returns>EmailFlowsResponse</returns>
        EmailFlowsResponse GetEmailFlows (int? storefrontOid);

        /// <summary>
        /// Get email flows
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <returns>ApiResponse of EmailFlowsResponse</returns>
        ApiResponse<EmailFlowsResponse> GetEmailFlowsWithHttpInfo (int? storefrontOid);
        /// <summary>
        /// Get email globalsettings
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>EmailGlobalSettingsResponse</returns>
        EmailGlobalSettingsResponse GetEmailGlobalSettings ();

        /// <summary>
        /// Get email globalsettings
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of EmailGlobalSettingsResponse</returns>
        ApiResponse<EmailGlobalSettingsResponse> GetEmailGlobalSettingsWithHttpInfo ();
        /// <summary>
        /// Get email list
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="emailListUuid"></param>
        /// <returns>EmailListResponse</returns>
        EmailListResponse GetEmailList (int? storefrontOid, string emailListUuid);

        /// <summary>
        /// Get email list
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="emailListUuid"></param>
        /// <returns>ApiResponse of EmailListResponse</returns>
        ApiResponse<EmailListResponse> GetEmailListWithHttpInfo (int? storefrontOid, string emailListUuid);
        /// <summary>
        /// Get email list customer editor url
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="emailListUuid"></param>
        /// <param name="emailCustomerUuid"></param>
        /// <returns>EmailCustomerEditorUrlResponse</returns>
        EmailCustomerEditorUrlResponse GetEmailListCustomerEditorUrl (int? storefrontOid, string emailListUuid, string emailCustomerUuid);

        /// <summary>
        /// Get email list customer editor url
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="emailListUuid"></param>
        /// <param name="emailCustomerUuid"></param>
        /// <returns>ApiResponse of EmailCustomerEditorUrlResponse</returns>
        ApiResponse<EmailCustomerEditorUrlResponse> GetEmailListCustomerEditorUrlWithHttpInfo (int? storefrontOid, string emailListUuid, string emailCustomerUuid);
        /// <summary>
        /// Get email list customers
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="emailListUuid"></param>
        /// <param name="pageNumber"> (optional)</param>
        /// <param name="pageSize"> (optional)</param>
        /// <returns>EmailListCustomersResponse</returns>
        EmailListCustomersResponse GetEmailListCustomers (int? storefrontOid, string emailListUuid, int? pageNumber = null, int? pageSize = null);

        /// <summary>
        /// Get email list customers
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="emailListUuid"></param>
        /// <param name="pageNumber"> (optional)</param>
        /// <param name="pageSize"> (optional)</param>
        /// <returns>ApiResponse of EmailListCustomersResponse</returns>
        ApiResponse<EmailListCustomersResponse> GetEmailListCustomersWithHttpInfo (int? storefrontOid, string emailListUuid, int? pageNumber = null, int? pageSize = null);
        /// <summary>
        /// Get email campaign folder
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="emailListSegmentFolderUuid"></param>
        /// <returns>EmailListSegmentFolderResponse</returns>
        EmailListSegmentFolderResponse GetEmailListSegmentFolder (int? storefrontOid, string emailListSegmentFolderUuid);

        /// <summary>
        /// Get email campaign folder
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="emailListSegmentFolderUuid"></param>
        /// <returns>ApiResponse of EmailListSegmentFolderResponse</returns>
        ApiResponse<EmailListSegmentFolderResponse> GetEmailListSegmentFolderWithHttpInfo (int? storefrontOid, string emailListSegmentFolderUuid);
        /// <summary>
        /// Get email campaign folders
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <returns>EmailListSegmentFoldersResponse</returns>
        EmailListSegmentFoldersResponse GetEmailListSegmentFolders (int? storefrontOid);

        /// <summary>
        /// Get email campaign folders
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <returns>ApiResponse of EmailListSegmentFoldersResponse</returns>
        ApiResponse<EmailListSegmentFoldersResponse> GetEmailListSegmentFoldersWithHttpInfo (int? storefrontOid);
        /// <summary>
        /// Get email lists
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <returns>EmailListsResponse</returns>
        EmailListsResponse GetEmailLists (int? storefrontOid);

        /// <summary>
        /// Get email lists
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <returns>ApiResponse of EmailListsResponse</returns>
        ApiResponse<EmailListsResponse> GetEmailListsWithHttpInfo (int? storefrontOid);
        /// <summary>
        /// Get email performance
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <returns>EmailPerformanceResponse</returns>
        EmailPerformanceResponse GetEmailPerformance (int? storefrontOid);

        /// <summary>
        /// Get email performance
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <returns>ApiResponse of EmailPerformanceResponse</returns>
        ApiResponse<EmailPerformanceResponse> GetEmailPerformanceWithHttpInfo (int? storefrontOid);
        /// <summary>
        /// Get email plan
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <returns>EmailPlanResponse</returns>
        EmailPlanResponse GetEmailPlan (int? storefrontOid);

        /// <summary>
        /// Get email plan
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <returns>ApiResponse of EmailPlanResponse</returns>
        ApiResponse<EmailPlanResponse> GetEmailPlanWithHttpInfo (int? storefrontOid);
        /// <summary>
        /// Get email postcard
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="commseqPostcardUuid"></param>
        /// <returns>EmailCommseqPostcardResponse</returns>
        EmailCommseqPostcardResponse GetEmailPostcard (int? storefrontOid, string commseqPostcardUuid);

        /// <summary>
        /// Get email postcard
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="commseqPostcardUuid"></param>
        /// <returns>ApiResponse of EmailCommseqPostcardResponse</returns>
        ApiResponse<EmailCommseqPostcardResponse> GetEmailPostcardWithHttpInfo (int? storefrontOid, string commseqPostcardUuid);
        /// <summary>
        /// Get email postcards
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <returns>EmailCommseqPostcardsResponse</returns>
        EmailCommseqPostcardsResponse GetEmailPostcards (int? storefrontOid);

        /// <summary>
        /// Get email postcards
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <returns>ApiResponse of EmailCommseqPostcardsResponse</returns>
        ApiResponse<EmailCommseqPostcardsResponse> GetEmailPostcardsWithHttpInfo (int? storefrontOid);
        /// <summary>
        /// Get email postcards multiple
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="emailCommseqPostcardsRequest">Request of postcard uuids</param>
        /// <returns>EmailCommseqPostcardsResponse</returns>
        EmailCommseqPostcardsResponse GetEmailPostcardsMultiple (int? storefrontOid, EmailCommseqPostcardsRequest emailCommseqPostcardsRequest);

        /// <summary>
        /// Get email postcards multiple
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="emailCommseqPostcardsRequest">Request of postcard uuids</param>
        /// <returns>ApiResponse of EmailCommseqPostcardsResponse</returns>
        ApiResponse<EmailCommseqPostcardsResponse> GetEmailPostcardsMultipleWithHttpInfo (int? storefrontOid, EmailCommseqPostcardsRequest emailCommseqPostcardsRequest);
        /// <summary>
        /// Get email segment
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="emailSegmentUuid"></param>
        /// <returns>EmailSegmentResponse</returns>
        EmailSegmentResponse GetEmailSegment (int? storefrontOid, string emailSegmentUuid);

        /// <summary>
        /// Get email segment
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="emailSegmentUuid"></param>
        /// <returns>ApiResponse of EmailSegmentResponse</returns>
        ApiResponse<EmailSegmentResponse> GetEmailSegmentWithHttpInfo (int? storefrontOid, string emailSegmentUuid);
        /// <summary>
        /// Get email segment customers editor URL
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="emailSegmentUuid"></param>
        /// <param name="emailCustomerUuid"></param>
        /// <returns>EmailCustomerEditorUrlResponse</returns>
        EmailCustomerEditorUrlResponse GetEmailSegmentCustomerEditorUrl (int? storefrontOid, string emailSegmentUuid, string emailCustomerUuid);

        /// <summary>
        /// Get email segment customers editor URL
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="emailSegmentUuid"></param>
        /// <param name="emailCustomerUuid"></param>
        /// <returns>ApiResponse of EmailCustomerEditorUrlResponse</returns>
        ApiResponse<EmailCustomerEditorUrlResponse> GetEmailSegmentCustomerEditorUrlWithHttpInfo (int? storefrontOid, string emailSegmentUuid, string emailCustomerUuid);
        /// <summary>
        /// Get email segment customers
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="emailSegmentUuid"></param>
        /// <param name="pageNumber"> (optional)</param>
        /// <param name="pageSize"> (optional)</param>
        /// <returns>EmailSegmentCustomersResponse</returns>
        EmailSegmentCustomersResponse GetEmailSegmentCustomers (int? storefrontOid, string emailSegmentUuid, int? pageNumber = null, int? pageSize = null);

        /// <summary>
        /// Get email segment customers
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="emailSegmentUuid"></param>
        /// <param name="pageNumber"> (optional)</param>
        /// <param name="pageSize"> (optional)</param>
        /// <returns>ApiResponse of EmailSegmentCustomersResponse</returns>
        ApiResponse<EmailSegmentCustomersResponse> GetEmailSegmentCustomersWithHttpInfo (int? storefrontOid, string emailSegmentUuid, int? pageNumber = null, int? pageSize = null);
        /// <summary>
        /// Get email segments
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <returns>EmailSegmentsResponse</returns>
        EmailSegmentsResponse GetEmailSegments (int? storefrontOid);

        /// <summary>
        /// Get email segments
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <returns>ApiResponse of EmailSegmentsResponse</returns>
        ApiResponse<EmailSegmentsResponse> GetEmailSegmentsWithHttpInfo (int? storefrontOid);
        /// <summary>
        /// Get email sending domain
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="domain"></param>
        /// <returns>EmailSendingDomainResponse</returns>
        EmailSendingDomainResponse GetEmailSendingDomain (string domain);

        /// <summary>
        /// Get email sending domain
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="domain"></param>
        /// <returns>ApiResponse of EmailSendingDomainResponse</returns>
        ApiResponse<EmailSendingDomainResponse> GetEmailSendingDomainWithHttpInfo (string domain);
        /// <summary>
        /// Get email sending domain status
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="domain"></param>
        /// <returns>EmailSendingDomainResponse</returns>
        EmailSendingDomainResponse GetEmailSendingDomainStatus (string domain);

        /// <summary>
        /// Get email sending domain status
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="domain"></param>
        /// <returns>ApiResponse of EmailSendingDomainResponse</returns>
        ApiResponse<EmailSendingDomainResponse> GetEmailSendingDomainStatusWithHttpInfo (string domain);
        /// <summary>
        /// Get email sending domains
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>EmailSendingDomainsResponse</returns>
        EmailSendingDomainsResponse GetEmailSendingDomains ();

        /// <summary>
        /// Get email sending domains
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of EmailSendingDomainsResponse</returns>
        ApiResponse<EmailSendingDomainsResponse> GetEmailSendingDomainsWithHttpInfo ();
        /// <summary>
        /// Get email settings
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <returns>EmailSettingsResponse</returns>
        EmailSettingsResponse GetEmailSettings (int? storefrontOid);

        /// <summary>
        /// Get email settings
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <returns>ApiResponse of EmailSettingsResponse</returns>
        ApiResponse<EmailSettingsResponse> GetEmailSettingsWithHttpInfo (int? storefrontOid);
        /// <summary>
        /// Get email template
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="emailTemplateOid"></param>
        /// <returns>EmailTemplate</returns>
        EmailTemplate GetEmailTemplate (int? storefrontOid, int? emailTemplateOid);

        /// <summary>
        /// Get email template
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="emailTemplateOid"></param>
        /// <returns>ApiResponse of EmailTemplate</returns>
        ApiResponse<EmailTemplate> GetEmailTemplateWithHttpInfo (int? storefrontOid, int? emailTemplateOid);
        /// <summary>
        /// Get email templates
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="triggerType"> (optional)</param>
        /// <returns>EmailTemplatesResponse</returns>
        EmailTemplatesResponse GetEmailTemplates (int? storefrontOid, string triggerType = null);

        /// <summary>
        /// Get email templates
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="triggerType"> (optional)</param>
        /// <returns>ApiResponse of EmailTemplatesResponse</returns>
        ApiResponse<EmailTemplatesResponse> GetEmailTemplatesWithHttpInfo (int? storefrontOid, string triggerType = null);
        /// <summary>
        /// Get a list of third party email providers
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <returns>EmailThirdPartyProvidersResponse</returns>
        EmailThirdPartyProvidersResponse GetEmailThirdPartyProviders (int? storefrontOid);

        /// <summary>
        /// Get a list of third party email providers
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <returns>ApiResponse of EmailThirdPartyProvidersResponse</returns>
        ApiResponse<EmailThirdPartyProvidersResponse> GetEmailThirdPartyProvidersWithHttpInfo (int? storefrontOid);
        /// <summary>
        /// Get experiments
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <returns>ExperimentsResponse</returns>
        ExperimentsResponse GetExperiments (int? storefrontOid);

        /// <summary>
        /// Get experiments
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <returns>ApiResponse of ExperimentsResponse</returns>
        ApiResponse<ExperimentsResponse> GetExperimentsWithHttpInfo (int? storefrontOid);
        /// <summary>
        /// Get screen recording heatmap
        /// </summary>
        /// <remarks>
        /// Get screen recording heatmap 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="query">Query</param>
        /// <returns>ScreenRecordingHeatmapResponse</returns>
        ScreenRecordingHeatmapResponse GetHeatmap (int? storefrontOid, ScreenRecordingHeatmapRequest query);

        /// <summary>
        /// Get screen recording heatmap
        /// </summary>
        /// <remarks>
        /// Get screen recording heatmap 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="query">Query</param>
        /// <returns>ApiResponse of ScreenRecordingHeatmapResponse</returns>
        ApiResponse<ScreenRecordingHeatmapResponse> GetHeatmapWithHttpInfo (int? storefrontOid, ScreenRecordingHeatmapRequest query);
        /// <summary>
        /// Get screen recording heatmap index
        /// </summary>
        /// <remarks>
        /// Get screen recording heatmap index 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="query">Query</param>
        /// <param name="limit">The maximum number of records to return on this one API call. (Default 100, Max 500) (optional, default to 100)</param>
        /// <param name="offset">Pagination of the record set.  Offset is a zero based index. (optional, default to 0)</param>
        /// <param name="sort">The sort order of the items.  See Sorting documentation for examples of using multiple values and sorting by ascending and descending. (optional)</param>
        /// <returns>ScreenRecordingHeatmapIndexResponse</returns>
        ScreenRecordingHeatmapIndexResponse GetHeatmapIndex (int? storefrontOid, ScreenRecordingHeatmapIndexRequest query, int? limit = null, int? offset = null, string sort = null);

        /// <summary>
        /// Get screen recording heatmap index
        /// </summary>
        /// <remarks>
        /// Get screen recording heatmap index 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="query">Query</param>
        /// <param name="limit">The maximum number of records to return on this one API call. (Default 100, Max 500) (optional, default to 100)</param>
        /// <param name="offset">Pagination of the record set.  Offset is a zero based index. (optional, default to 0)</param>
        /// <param name="sort">The sort order of the items.  See Sorting documentation for examples of using multiple values and sorting by ascending and descending. (optional)</param>
        /// <returns>ApiResponse of ScreenRecordingHeatmapIndexResponse</returns>
        ApiResponse<ScreenRecordingHeatmapIndexResponse> GetHeatmapIndexWithHttpInfo (int? storefrontOid, ScreenRecordingHeatmapIndexRequest query, int? limit = null, int? offset = null, string sort = null);
        /// <summary>
        /// Get histogram property names
        /// </summary>
        /// <remarks>
        /// Obtain a list of property names for a given property type 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="propertyType"> (optional)</param>
        /// <returns>EmailHistogramPropertyNamesResponse</returns>
        EmailHistogramPropertyNamesResponse GetHistogramPropertyNames (int? storefrontOid, string propertyType = null);

        /// <summary>
        /// Get histogram property names
        /// </summary>
        /// <remarks>
        /// Obtain a list of property names for a given property type 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="propertyType"> (optional)</param>
        /// <returns>ApiResponse of EmailHistogramPropertyNamesResponse</returns>
        ApiResponse<EmailHistogramPropertyNamesResponse> GetHistogramPropertyNamesWithHttpInfo (int? storefrontOid, string propertyType = null);
        /// <summary>
        /// Get histogram property values
        /// </summary>
        /// <remarks>
        /// Obtain a list of property values for a given property name and type 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="propertyName"> (optional)</param>
        /// <param name="propertyType"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <returns>EmailHistogramPropertyValuesResponse</returns>
        EmailHistogramPropertyValuesResponse GetHistogramPropertyValues (int? storefrontOid, string propertyName = null, string propertyType = null, int? limit = null);

        /// <summary>
        /// Get histogram property values
        /// </summary>
        /// <remarks>
        /// Obtain a list of property values for a given property name and type 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="propertyName"> (optional)</param>
        /// <param name="propertyType"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <returns>ApiResponse of EmailHistogramPropertyValuesResponse</returns>
        ApiResponse<EmailHistogramPropertyValuesResponse> GetHistogramPropertyValuesWithHttpInfo (int? storefrontOid, string propertyName = null, string propertyType = null, int? limit = null);
        /// <summary>
        /// Get library values used to populate drop down boxes for filtering.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>LibraryFilterValuesResponse</returns>
        LibraryFilterValuesResponse GetLibraryFilterValues ();

        /// <summary>
        /// Get library values used to populate drop down boxes for filtering.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of LibraryFilterValuesResponse</returns>
        ApiResponse<LibraryFilterValuesResponse> GetLibraryFilterValuesWithHttpInfo ();
        /// <summary>
        /// Get library item.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="libraryItemOid"></param>
        /// <returns>LibraryItemResponse</returns>
        LibraryItemResponse GetLibraryItem (int? libraryItemOid);

        /// <summary>
        /// Get library item.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="libraryItemOid"></param>
        /// <returns>ApiResponse of LibraryItemResponse</returns>
        ApiResponse<LibraryItemResponse> GetLibraryItemWithHttpInfo (int? libraryItemOid);
        /// <summary>
        /// Get all published versions for a library item.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="libraryItemOid"></param>
        /// <returns>LibraryItemsResponse</returns>
        LibraryItemsResponse GetLibraryItemPublishedVersions (int? libraryItemOid);

        /// <summary>
        /// Get all published versions for a library item.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="libraryItemOid"></param>
        /// <returns>ApiResponse of LibraryItemsResponse</returns>
        ApiResponse<LibraryItemsResponse> GetLibraryItemPublishedVersionsWithHttpInfo (int? libraryItemOid);
        /// <summary>
        /// Get screen recording
        /// </summary>
        /// <remarks>
        /// Get screen recording 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="screenRecordingUuid"></param>
        /// <returns>ScreenRecordingResponse</returns>
        ScreenRecordingResponse GetScreenRecording (int? storefrontOid, string screenRecordingUuid);

        /// <summary>
        /// Get screen recording
        /// </summary>
        /// <remarks>
        /// Get screen recording 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="screenRecordingUuid"></param>
        /// <returns>ApiResponse of ScreenRecordingResponse</returns>
        ApiResponse<ScreenRecordingResponse> GetScreenRecordingWithHttpInfo (int? storefrontOid, string screenRecordingUuid);
        /// <summary>
        /// Get screen recording page view data
        /// </summary>
        /// <remarks>
        /// Get screen recording page view data 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="screenRecordingUuid"></param>
        /// <param name="screenRecordingPageViewUuid"></param>
        /// <returns>ScreenRecordingPageViewDataResponse</returns>
        ScreenRecordingPageViewDataResponse GetScreenRecordingPageViewData (int? storefrontOid, string screenRecordingUuid, string screenRecordingPageViewUuid);

        /// <summary>
        /// Get screen recording page view data
        /// </summary>
        /// <remarks>
        /// Get screen recording page view data 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="screenRecordingUuid"></param>
        /// <param name="screenRecordingPageViewUuid"></param>
        /// <returns>ApiResponse of ScreenRecordingPageViewDataResponse</returns>
        ApiResponse<ScreenRecordingPageViewDataResponse> GetScreenRecordingPageViewDataWithHttpInfo (int? storefrontOid, string screenRecordingUuid, string screenRecordingPageViewUuid);
        /// <summary>
        /// Get screen recording segment
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="screenRecordingSegmentOid"></param>
        /// <returns>ScreenRecordingSegmentResponse</returns>
        ScreenRecordingSegmentResponse GetScreenRecordingSegment (int? storefrontOid, int? screenRecordingSegmentOid);

        /// <summary>
        /// Get screen recording segment
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="screenRecordingSegmentOid"></param>
        /// <returns>ApiResponse of ScreenRecordingSegmentResponse</returns>
        ApiResponse<ScreenRecordingSegmentResponse> GetScreenRecordingSegmentWithHttpInfo (int? storefrontOid, int? screenRecordingSegmentOid);
        /// <summary>
        /// Get screen recording segments
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <returns>ScreenRecordingSegmentsResponse</returns>
        ScreenRecordingSegmentsResponse GetScreenRecordingSegments (int? storefrontOid);

        /// <summary>
        /// Get screen recording segments
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <returns>ApiResponse of ScreenRecordingSegmentsResponse</returns>
        ApiResponse<ScreenRecordingSegmentsResponse> GetScreenRecordingSegmentsWithHttpInfo (int? storefrontOid);
        /// <summary>
        /// Get screen recording settings
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <returns>ScreenRecordingSettingsResponse</returns>
        ScreenRecordingSettingsResponse GetScreenRecordingSettings (int? storefrontOid);

        /// <summary>
        /// Get screen recording settings
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <returns>ApiResponse of ScreenRecordingSettingsResponse</returns>
        ApiResponse<ScreenRecordingSettingsResponse> GetScreenRecordingSettingsWithHttpInfo (int? storefrontOid);
        /// <summary>
        /// Get tags used by screen recording
        /// </summary>
        /// <remarks>
        /// Get tags used by screen recording 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <returns>ScreenRecordingTagsResponse</returns>
        ScreenRecordingTagsResponse GetScreenRecordingTags (int? storefrontOid);

        /// <summary>
        /// Get tags used by screen recording
        /// </summary>
        /// <remarks>
        /// Get tags used by screen recording 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <returns>ApiResponse of ScreenRecordingTagsResponse</returns>
        ApiResponse<ScreenRecordingTagsResponse> GetScreenRecordingTagsWithHttpInfo (int? storefrontOid);
        /// <summary>
        /// Query screen recordings
        /// </summary>
        /// <remarks>
        /// Query screen recordings 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="query">Query</param>
        /// <param name="limit">The maximum number of records to return on this one API call. (Default 100, Max 500) (optional, default to 100)</param>
        /// <param name="offset">Pagination of the record set.  Offset is a zero based index. (optional, default to 0)</param>
        /// <param name="sort">The sort order of the items.  See Sorting documentation for examples of using multiple values and sorting by ascending and descending. (optional)</param>
        /// <returns>ScreenRecordingQueryResponse</returns>
        ScreenRecordingQueryResponse GetScreenRecordingsByQuery (int? storefrontOid, ScreenRecordingQueryRequest query, int? limit = null, int? offset = null, string sort = null);

        /// <summary>
        /// Query screen recordings
        /// </summary>
        /// <remarks>
        /// Query screen recordings 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="query">Query</param>
        /// <param name="limit">The maximum number of records to return on this one API call. (Default 100, Max 500) (optional, default to 100)</param>
        /// <param name="offset">Pagination of the record set.  Offset is a zero based index. (optional, default to 0)</param>
        /// <param name="sort">The sort order of the items.  See Sorting documentation for examples of using multiple values and sorting by ascending and descending. (optional)</param>
        /// <returns>ApiResponse of ScreenRecordingQueryResponse</returns>
        ApiResponse<ScreenRecordingQueryResponse> GetScreenRecordingsByQueryWithHttpInfo (int? storefrontOid, ScreenRecordingQueryRequest query, int? limit = null, int? offset = null, string sort = null);
        /// <summary>
        /// Get screen recordings by segment
        /// </summary>
        /// <remarks>
        /// Get screen recordings by segment 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="screenRecordingSegmentOid"></param>
        /// <param name="limit">The maximum number of records to return on this one API call. (Default 100, Max 500) (optional, default to 100)</param>
        /// <param name="offset">Pagination of the record set.  Offset is a zero based index. (optional, default to 0)</param>
        /// <param name="sort">The sort order of the items.  See Sorting documentation for examples of using multiple values and sorting by ascending and descending. (optional)</param>
        /// <returns>ScreenRecordingQueryResponse</returns>
        ScreenRecordingQueryResponse GetScreenRecordingsBySegment (int? storefrontOid, int? screenRecordingSegmentOid, int? limit = null, int? offset = null, string sort = null);

        /// <summary>
        /// Get screen recordings by segment
        /// </summary>
        /// <remarks>
        /// Get screen recordings by segment 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="screenRecordingSegmentOid"></param>
        /// <param name="limit">The maximum number of records to return on this one API call. (Default 100, Max 500) (optional, default to 100)</param>
        /// <param name="offset">Pagination of the record set.  Offset is a zero based index. (optional, default to 0)</param>
        /// <param name="sort">The sort order of the items.  See Sorting documentation for examples of using multiple values and sorting by ascending and descending. (optional)</param>
        /// <returns>ApiResponse of ScreenRecordingQueryResponse</returns>
        ApiResponse<ScreenRecordingQueryResponse> GetScreenRecordingsBySegmentWithHttpInfo (int? storefrontOid, int? screenRecordingSegmentOid, int? limit = null, int? offset = null, string sort = null);
        /// <summary>
        /// Retrieve pricing tiers
        /// </summary>
        /// <remarks>
        /// Retrieves the pricing tiers 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="expand">The object expansion to perform on the result.  See documentation for examples (optional)</param>
        /// <returns>PricingTiersResponse</returns>
        PricingTiersResponse GetStoreFrontPricingTiers (string expand = null);

        /// <summary>
        /// Retrieve pricing tiers
        /// </summary>
        /// <remarks>
        /// Retrieves the pricing tiers 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="expand">The object expansion to perform on the result.  See documentation for examples (optional)</param>
        /// <returns>ApiResponse of PricingTiersResponse</returns>
        ApiResponse<PricingTiersResponse> GetStoreFrontPricingTiersWithHttpInfo (string expand = null);
        /// <summary>
        /// Get thumbnail parameters
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="thumbnailParameters">Thumbnail Parameters</param>
        /// <returns>ThumbnailParametersResponse</returns>
        ThumbnailParametersResponse GetThumbnailParameters (ThumbnailParametersRequest thumbnailParameters);

        /// <summary>
        /// Get thumbnail parameters
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="thumbnailParameters">Thumbnail Parameters</param>
        /// <returns>ApiResponse of ThumbnailParametersResponse</returns>
        ApiResponse<ThumbnailParametersResponse> GetThumbnailParametersWithHttpInfo (ThumbnailParametersRequest thumbnailParameters);
        /// <summary>
        /// Gets a transaction email object
        /// </summary>
        /// <remarks>
        /// Fetch a transactional email 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="emailId"></param>
        /// <returns>TransactionEmailResponse</returns>
        TransactionEmailResponse GetTransactionEmail (int? storefrontOid, string emailId);

        /// <summary>
        /// Gets a transaction email object
        /// </summary>
        /// <remarks>
        /// Fetch a transactional email 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="emailId"></param>
        /// <returns>ApiResponse of TransactionEmailResponse</returns>
        ApiResponse<TransactionEmailResponse> GetTransactionEmailWithHttpInfo (int? storefrontOid, string emailId);
        /// <summary>
        /// Gets a list of transaction email names
        /// </summary>
        /// <remarks>
        /// Obtain a list of all transactional emails and return back just their names 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <returns>TransactionEmailListResponse</returns>
        TransactionEmailListResponse GetTransactionEmailList (int? storefrontOid);

        /// <summary>
        /// Gets a list of transaction email names
        /// </summary>
        /// <remarks>
        /// Obtain a list of all transactional emails and return back just their names 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <returns>ApiResponse of TransactionEmailListResponse</returns>
        ApiResponse<TransactionEmailListResponse> GetTransactionEmailListWithHttpInfo (int? storefrontOid);
        /// <summary>
        /// Get transactional email screenshots
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="emailId"></param>
        /// <returns>ScreenshotsResponse</returns>
        ScreenshotsResponse GetTransactionEmailScreenshots (int? storefrontOid, string emailId);

        /// <summary>
        /// Get transactional email screenshots
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="emailId"></param>
        /// <returns>ApiResponse of ScreenshotsResponse</returns>
        ApiResponse<ScreenshotsResponse> GetTransactionEmailScreenshotsWithHttpInfo (int? storefrontOid, string emailId);
        /// <summary>
        /// Get Twilio account
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="espTwilioUuid"></param>
        /// <returns>TwilioResponse</returns>
        TwilioResponse GetTwilioAccount (string espTwilioUuid);

        /// <summary>
        /// Get Twilio account
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="espTwilioUuid"></param>
        /// <returns>ApiResponse of TwilioResponse</returns>
        ApiResponse<TwilioResponse> GetTwilioAccountWithHttpInfo (string espTwilioUuid);
        /// <summary>
        /// Get all Twilio accounts
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>TwiliosResponse</returns>
        TwiliosResponse GetTwilioAccounts ();

        /// <summary>
        /// Get all Twilio accounts
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of TwiliosResponse</returns>
        ApiResponse<TwiliosResponse> GetTwilioAccountsWithHttpInfo ();
        /// <summary>
        /// Globally unsubscribe a customer
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="unsubscribe">Unsubscribe</param>
        /// <returns>EmailGlobalUnsubscribeResponse</returns>
        EmailGlobalUnsubscribeResponse GlobalUnsubscribe (int? storefrontOid, EmailGlobalUnsubscribeRequest unsubscribe);

        /// <summary>
        /// Globally unsubscribe a customer
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="unsubscribe">Unsubscribe</param>
        /// <returns>ApiResponse of EmailGlobalUnsubscribeResponse</returns>
        ApiResponse<EmailGlobalUnsubscribeResponse> GlobalUnsubscribeWithHttpInfo (int? storefrontOid, EmailGlobalUnsubscribeRequest unsubscribe);
        /// <summary>
        /// Import a third party provider list
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="importRequest">lists to import</param>
        /// <returns></returns>
        void ImportEmailThirdPartyProviderList (int? storefrontOid, EmailThirdPartyListImportRequest importRequest);

        /// <summary>
        /// Import a third party provider list
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="importRequest">lists to import</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ImportEmailThirdPartyProviderListWithHttpInfo (int? storefrontOid, EmailThirdPartyListImportRequest importRequest);
        /// <summary>
        /// Insert email campaign
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="emailCampaign">Email campaign</param>
        /// <returns>EmailCampaignResponse</returns>
        EmailCampaignResponse InsertEmailCampaign (int? storefrontOid, EmailCampaign emailCampaign);

        /// <summary>
        /// Insert email campaign
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="emailCampaign">Email campaign</param>
        /// <returns>ApiResponse of EmailCampaignResponse</returns>
        ApiResponse<EmailCampaignResponse> InsertEmailCampaignWithHttpInfo (int? storefrontOid, EmailCampaign emailCampaign);
        /// <summary>
        /// Insert email campaign folder
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="emailCampaignFolder">Email campaign folder</param>
        /// <returns>EmailCampaignFolderResponse</returns>
        EmailCampaignFolderResponse InsertEmailCampaignFolder (int? storefrontOid, EmailCampaignFolder emailCampaignFolder);

        /// <summary>
        /// Insert email campaign folder
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="emailCampaignFolder">Email campaign folder</param>
        /// <returns>ApiResponse of EmailCampaignFolderResponse</returns>
        ApiResponse<EmailCampaignFolderResponse> InsertEmailCampaignFolderWithHttpInfo (int? storefrontOid, EmailCampaignFolder emailCampaignFolder);
        /// <summary>
        /// Insert email commseq
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="emailCommseq">Email commseq</param>
        /// <returns>EmailCommseqResponse</returns>
        EmailCommseqResponse InsertEmailCommseq (int? storefrontOid, EmailCommseq emailCommseq);

        /// <summary>
        /// Insert email commseq
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="emailCommseq">Email commseq</param>
        /// <returns>ApiResponse of EmailCommseqResponse</returns>
        ApiResponse<EmailCommseqResponse> InsertEmailCommseqWithHttpInfo (int? storefrontOid, EmailCommseq emailCommseq);
        /// <summary>
        /// Insert email email
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="emailCommseqEmail">Email email</param>
        /// <returns>EmailCommseqEmailResponse</returns>
        EmailCommseqEmailResponse InsertEmailEmail (int? storefrontOid, EmailCommseqEmail emailCommseqEmail);

        /// <summary>
        /// Insert email email
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="emailCommseqEmail">Email email</param>
        /// <returns>ApiResponse of EmailCommseqEmailResponse</returns>
        ApiResponse<EmailCommseqEmailResponse> InsertEmailEmailWithHttpInfo (int? storefrontOid, EmailCommseqEmail emailCommseqEmail);
        /// <summary>
        /// Insert email flow
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="emailFlow">Email flow</param>
        /// <returns>EmailFlowResponse</returns>
        EmailFlowResponse InsertEmailFlow (int? storefrontOid, EmailFlow emailFlow);

        /// <summary>
        /// Insert email flow
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="emailFlow">Email flow</param>
        /// <returns>ApiResponse of EmailFlowResponse</returns>
        ApiResponse<EmailFlowResponse> InsertEmailFlowWithHttpInfo (int? storefrontOid, EmailFlow emailFlow);
        /// <summary>
        /// Insert email flow folder
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="emailFlowFolder">Email flow folder</param>
        /// <returns>EmailFlowFolderResponse</returns>
        EmailFlowFolderResponse InsertEmailFlowFolder (int? storefrontOid, EmailFlowFolder emailFlowFolder);

        /// <summary>
        /// Insert email flow folder
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="emailFlowFolder">Email flow folder</param>
        /// <returns>ApiResponse of EmailFlowFolderResponse</returns>
        ApiResponse<EmailFlowFolderResponse> InsertEmailFlowFolderWithHttpInfo (int? storefrontOid, EmailFlowFolder emailFlowFolder);
        /// <summary>
        /// Insert email list
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="emailList">Email list</param>
        /// <returns>EmailListResponse</returns>
        EmailListResponse InsertEmailList (int? storefrontOid, EmailList emailList);

        /// <summary>
        /// Insert email list
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="emailList">Email list</param>
        /// <returns>ApiResponse of EmailListResponse</returns>
        ApiResponse<EmailListResponse> InsertEmailListWithHttpInfo (int? storefrontOid, EmailList emailList);
        /// <summary>
        /// Insert email campaign folder
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="emailListSegmentFolder">Email campaign folder</param>
        /// <returns>EmailListSegmentFolderResponse</returns>
        EmailListSegmentFolderResponse InsertEmailListSegmentFolder (int? storefrontOid, EmailListSegmentFolder emailListSegmentFolder);

        /// <summary>
        /// Insert email campaign folder
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="emailListSegmentFolder">Email campaign folder</param>
        /// <returns>ApiResponse of EmailListSegmentFolderResponse</returns>
        ApiResponse<EmailListSegmentFolderResponse> InsertEmailListSegmentFolderWithHttpInfo (int? storefrontOid, EmailListSegmentFolder emailListSegmentFolder);
        /// <summary>
        /// Insert email postcard
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="emailCommseqPostcard">Email postcard</param>
        /// <returns>EmailCommseqPostcardResponse</returns>
        EmailCommseqPostcardResponse InsertEmailPostcard (int? storefrontOid, EmailCommseqPostcard emailCommseqPostcard);

        /// <summary>
        /// Insert email postcard
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="emailCommseqPostcard">Email postcard</param>
        /// <returns>ApiResponse of EmailCommseqPostcardResponse</returns>
        ApiResponse<EmailCommseqPostcardResponse> InsertEmailPostcardWithHttpInfo (int? storefrontOid, EmailCommseqPostcard emailCommseqPostcard);
        /// <summary>
        /// Insert email segment
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="emailSegment">Email segment</param>
        /// <returns>EmailSegmentResponse</returns>
        EmailSegmentResponse InsertEmailSegment (int? storefrontOid, EmailSegment emailSegment);

        /// <summary>
        /// Insert email segment
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="emailSegment">Email segment</param>
        /// <returns>ApiResponse of EmailSegmentResponse</returns>
        ApiResponse<EmailSegmentResponse> InsertEmailSegmentWithHttpInfo (int? storefrontOid, EmailSegment emailSegment);
        /// <summary>
        /// Insert screen recording segment
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="segment">Segment</param>
        /// <returns>ScreenRecordingSegmentResponse</returns>
        ScreenRecordingSegmentResponse InsertScreenRecordingSegment (int? storefrontOid, ScreenRecordingSegment segment);

        /// <summary>
        /// Insert screen recording segment
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="segment">Segment</param>
        /// <returns>ApiResponse of ScreenRecordingSegmentResponse</returns>
        ApiResponse<ScreenRecordingSegmentResponse> InsertScreenRecordingSegmentWithHttpInfo (int? storefrontOid, ScreenRecordingSegment segment);
        /// <summary>
        /// Prepare download of email segment
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="emailSegmentUuid"></param>
        /// <returns>EmailSegmentDownloadPrepareResponse</returns>
        EmailSegmentDownloadPrepareResponse PrepareDownloadEmailSegment (int? storefrontOid, string emailSegmentUuid);

        /// <summary>
        /// Prepare download of email segment
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="emailSegmentUuid"></param>
        /// <returns>ApiResponse of EmailSegmentDownloadPrepareResponse</returns>
        ApiResponse<EmailSegmentDownloadPrepareResponse> PrepareDownloadEmailSegmentWithHttpInfo (int? storefrontOid, string emailSegmentUuid);
        /// <summary>
        /// Publish library item.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="libraryItemOid"></param>
        /// <param name="publishLibraryRequest">Publish library item request</param>
        /// <returns>LibraryItemResponse</returns>
        LibraryItemResponse PublishLibraryItem (int? libraryItemOid, PublishLibraryItemRequest publishLibraryRequest);

        /// <summary>
        /// Publish library item.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="libraryItemOid"></param>
        /// <param name="publishLibraryRequest">Publish library item request</param>
        /// <returns>ApiResponse of LibraryItemResponse</returns>
        ApiResponse<LibraryItemResponse> PublishLibraryItemWithHttpInfo (int? libraryItemOid, PublishLibraryItemRequest publishLibraryRequest);
        /// <summary>
        /// Purchase public library item, which creates a copy of the item in your personal code library
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="libraryItemOid"></param>
        /// <param name="storefrontOid"> (optional)</param>
        /// <returns>LibraryItemResponse</returns>
        LibraryItemResponse PurchaseLibraryItem (int? libraryItemOid, int? storefrontOid = null);

        /// <summary>
        /// Purchase public library item, which creates a copy of the item in your personal code library
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="libraryItemOid"></param>
        /// <param name="storefrontOid"> (optional)</param>
        /// <returns>ApiResponse of LibraryItemResponse</returns>
        ApiResponse<LibraryItemResponse> PurchaseLibraryItemWithHttpInfo (int? libraryItemOid, int? storefrontOid = null);
        /// <summary>
        /// Release email communication sequence customers waiting at the specified step
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="commseqUuid"></param>
        /// <param name="commseqStepUuid"></param>
        /// <returns></returns>
        void ReleaseEmailCommseqStepWaiting (int? storefrontOid, string commseqUuid, string commseqStepUuid);

        /// <summary>
        /// Release email communication sequence customers waiting at the specified step
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="commseqUuid"></param>
        /// <param name="commseqStepUuid"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ReleaseEmailCommseqStepWaitingWithHttpInfo (int? storefrontOid, string commseqUuid, string commseqStepUuid);
        /// <summary>
        /// Request a review of an email
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="commseqEmailUuid"></param>
        /// <param name="emailCommseqEmailReviewRequest">Email commseq email review request</param>
        /// <returns>EmailCommseqEmailSendTestResponse</returns>
        EmailCommseqEmailSendTestResponse Review (int? storefrontOid, string commseqEmailUuid, EmailCommseqEmailSendTestRequest emailCommseqEmailReviewRequest);

        /// <summary>
        /// Request a review of an email
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="commseqEmailUuid"></param>
        /// <param name="emailCommseqEmailReviewRequest">Email commseq email review request</param>
        /// <returns>ApiResponse of EmailCommseqEmailSendTestResponse</returns>
        ApiResponse<EmailCommseqEmailSendTestResponse> ReviewWithHttpInfo (int? storefrontOid, string commseqEmailUuid, EmailCommseqEmailSendTestRequest emailCommseqEmailReviewRequest);
        /// <summary>
        /// Searches for all matching values
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="category"> (optional)</param>
        /// <param name="matches"> (optional)</param>
        /// <param name="storefrontOid"> (optional)</param>
        /// <param name="maxHits"> (optional)</param>
        /// <param name="subcategory"> (optional)</param>
        /// <returns>LookupResponse</returns>
        LookupResponse Search (string category = null, string matches = null, string storefrontOid = null, int? maxHits = null, string subcategory = null);

        /// <summary>
        /// Searches for all matching values
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="category"> (optional)</param>
        /// <param name="matches"> (optional)</param>
        /// <param name="storefrontOid"> (optional)</param>
        /// <param name="maxHits"> (optional)</param>
        /// <param name="subcategory"> (optional)</param>
        /// <returns>ApiResponse of LookupResponse</returns>
        ApiResponse<LookupResponse> SearchWithHttpInfo (string category = null, string matches = null, string storefrontOid = null, int? maxHits = null, string subcategory = null);
        /// <summary>
        /// Searches for all matching values (using POST)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="lookupRequest">LookupRequest</param>
        /// <returns>LookupResponse</returns>
        LookupResponse Search2 (LookupRequest lookupRequest);

        /// <summary>
        /// Searches for all matching values (using POST)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="lookupRequest">LookupRequest</param>
        /// <returns>ApiResponse of LookupResponse</returns>
        ApiResponse<LookupResponse> Search2WithHttpInfo (LookupRequest lookupRequest);
        /// <summary>
        /// Search email list customers
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="emailListUuid"></param>
        /// <param name="startsWith"> (optional)</param>
        /// <returns>EmailListCustomersResponse</returns>
        EmailListCustomersResponse SearchEmailListCustomers (int? storefrontOid, string emailListUuid, string startsWith = null);

        /// <summary>
        /// Search email list customers
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="emailListUuid"></param>
        /// <param name="startsWith"> (optional)</param>
        /// <returns>ApiResponse of EmailListCustomersResponse</returns>
        ApiResponse<EmailListCustomersResponse> SearchEmailListCustomersWithHttpInfo (int? storefrontOid, string emailListUuid, string startsWith = null);
        /// <summary>
        /// Search email segment customers
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="emailSegmentUuid"></param>
        /// <param name="startsWith"> (optional)</param>
        /// <returns>EmailSegmentCustomersResponse</returns>
        EmailSegmentCustomersResponse SearchEmailSegmentCustomers (int? storefrontOid, string emailSegmentUuid, string startsWith = null);

        /// <summary>
        /// Search email segment customers
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="emailSegmentUuid"></param>
        /// <param name="startsWith"> (optional)</param>
        /// <returns>ApiResponse of EmailSegmentCustomersResponse</returns>
        ApiResponse<EmailSegmentCustomersResponse> SearchEmailSegmentCustomersWithHttpInfo (int? storefrontOid, string emailSegmentUuid, string startsWith = null);
        /// <summary>
        /// Retrieve library items
        /// </summary>
        /// <remarks>
        /// Retrieves a library items based on a query object.  If no parameters are specified, the API call will default to the merchant id only.  You will need to make multiple API calls in order to retrieve the entire result set since this API performs result set pagination. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemQuery">Item query</param>
        /// <param name="limit">The maximum number of records to return on this one API call. (Maximum 10000) (optional, default to 10000)</param>
        /// <param name="offset">Pagination of the record set.  Offset is a zero based index. (optional, default to 0)</param>
        /// <param name="sort">The sort order of the library items.  See Sorting documentation for examples of using multiple values and sorting by ascending and descending. (optional)</param>
        /// <returns>LibraryItemsResponse</returns>
        LibraryItemsResponse SearchLibraryItems (LibraryItemQuery itemQuery, int? limit = null, int? offset = null, string sort = null);

        /// <summary>
        /// Retrieve library items
        /// </summary>
        /// <remarks>
        /// Retrieves a library items based on a query object.  If no parameters are specified, the API call will default to the merchant id only.  You will need to make multiple API calls in order to retrieve the entire result set since this API performs result set pagination. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemQuery">Item query</param>
        /// <param name="limit">The maximum number of records to return on this one API call. (Maximum 10000) (optional, default to 10000)</param>
        /// <param name="offset">Pagination of the record set.  Offset is a zero based index. (optional, default to 0)</param>
        /// <param name="sort">The sort order of the library items.  See Sorting documentation for examples of using multiple values and sorting by ascending and descending. (optional)</param>
        /// <returns>ApiResponse of LibraryItemsResponse</returns>
        ApiResponse<LibraryItemsResponse> SearchLibraryItemsWithHttpInfo (LibraryItemQuery itemQuery, int? limit = null, int? offset = null, string sort = null);
        /// <summary>
        /// Retrieve library items
        /// </summary>
        /// <remarks>
        /// Retrieves a library items based on a query object.  If no parameters are specified, the API call will default to the merchant id only.  You will need to make multiple API calls in order to retrieve the entire result set since this API performs result set pagination. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemQuery">Item query</param>
        /// <param name="limit">The maximum number of records to return on this one API call. (Maximum 10000) (optional, default to 10000)</param>
        /// <param name="offset">Pagination of the record set.  Offset is a zero based index. (optional, default to 0)</param>
        /// <param name="sort">The sort order of the library items.  See Sorting documentation for examples of using multiple values and sorting by ascending and descending. (optional)</param>
        /// <returns>LibraryItemsResponse</returns>
        LibraryItemsResponse SearchPublishedItems (LibraryItemQuery itemQuery, int? limit = null, int? offset = null, string sort = null);

        /// <summary>
        /// Retrieve library items
        /// </summary>
        /// <remarks>
        /// Retrieves a library items based on a query object.  If no parameters are specified, the API call will default to the merchant id only.  You will need to make multiple API calls in order to retrieve the entire result set since this API performs result set pagination. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemQuery">Item query</param>
        /// <param name="limit">The maximum number of records to return on this one API call. (Maximum 10000) (optional, default to 10000)</param>
        /// <param name="offset">Pagination of the record set.  Offset is a zero based index. (optional, default to 0)</param>
        /// <param name="sort">The sort order of the library items.  See Sorting documentation for examples of using multiple values and sorting by ascending and descending. (optional)</param>
        /// <returns>ApiResponse of LibraryItemsResponse</returns>
        ApiResponse<LibraryItemsResponse> SearchPublishedItemsWithHttpInfo (LibraryItemQuery itemQuery, int? limit = null, int? offset = null, string sort = null);
        /// <summary>
        /// Retrieve library items needing review or rejected
        /// </summary>
        /// <remarks>
        /// Retrieves a library items based on a query object.  If no parameters are specified, the API call will default to the merchant id only.  You will need to make multiple API calls in order to retrieve the entire result set since this API performs result set pagination. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemQuery">Item query</param>
        /// <param name="limit">The maximum number of records to return on this one API call. (Maximum 10000) (optional, default to 10000)</param>
        /// <param name="offset">Pagination of the record set.  Offset is a zero based index. (optional, default to 0)</param>
        /// <param name="sort">The sort order of the library items.  See Sorting documentation for examples of using multiple values and sorting by ascending and descending. (optional)</param>
        /// <returns>LibraryItemsResponse</returns>
        LibraryItemsResponse SearchReviewItems (LibraryItemQuery itemQuery, int? limit = null, int? offset = null, string sort = null);

        /// <summary>
        /// Retrieve library items needing review or rejected
        /// </summary>
        /// <remarks>
        /// Retrieves a library items based on a query object.  If no parameters are specified, the API call will default to the merchant id only.  You will need to make multiple API calls in order to retrieve the entire result set since this API performs result set pagination. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemQuery">Item query</param>
        /// <param name="limit">The maximum number of records to return on this one API call. (Maximum 10000) (optional, default to 10000)</param>
        /// <param name="offset">Pagination of the record set.  Offset is a zero based index. (optional, default to 0)</param>
        /// <param name="sort">The sort order of the library items.  See Sorting documentation for examples of using multiple values and sorting by ascending and descending. (optional)</param>
        /// <returns>ApiResponse of LibraryItemsResponse</returns>
        ApiResponse<LibraryItemsResponse> SearchReviewItemsWithHttpInfo (LibraryItemQuery itemQuery, int? limit = null, int? offset = null, string sort = null);
        /// <summary>
        /// Retrieve library items
        /// </summary>
        /// <remarks>
        /// Retrieves a library items based on a query object.  If no parameters are specified, the API call will default to the merchant id only.  You will need to make multiple API calls in order to retrieve the entire result set since this API performs result set pagination. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemQuery">Item query</param>
        /// <param name="limit">The maximum number of records to return on this one API call. (Maximum 10000) (optional, default to 10000)</param>
        /// <param name="offset">Pagination of the record set.  Offset is a zero based index. (optional, default to 0)</param>
        /// <param name="sort">The sort order of the library items.  See Sorting documentation for examples of using multiple values and sorting by ascending and descending. (optional)</param>
        /// <returns>LibraryItemsResponse</returns>
        LibraryItemsResponse SearchSharedItems (LibraryItemQuery itemQuery, int? limit = null, int? offset = null, string sort = null);

        /// <summary>
        /// Retrieve library items
        /// </summary>
        /// <remarks>
        /// Retrieves a library items based on a query object.  If no parameters are specified, the API call will default to the merchant id only.  You will need to make multiple API calls in order to retrieve the entire result set since this API performs result set pagination. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemQuery">Item query</param>
        /// <param name="limit">The maximum number of records to return on this one API call. (Maximum 10000) (optional, default to 10000)</param>
        /// <param name="offset">Pagination of the record set.  Offset is a zero based index. (optional, default to 0)</param>
        /// <param name="sort">The sort order of the library items.  See Sorting documentation for examples of using multiple values and sorting by ascending and descending. (optional)</param>
        /// <returns>ApiResponse of LibraryItemsResponse</returns>
        ApiResponse<LibraryItemsResponse> SearchSharedItemsWithHttpInfo (LibraryItemQuery itemQuery, int? limit = null, int? offset = null, string sort = null);
        /// <summary>
        /// Send email test
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="commseqEmailUuid"></param>
        /// <param name="emailCommseqEmailTestRequest">Email commseq email test request</param>
        /// <returns>EmailCommseqEmailSendTestResponse</returns>
        EmailCommseqEmailSendTestResponse SendEmailTest (int? storefrontOid, string commseqEmailUuid, EmailCommseqEmailSendTestRequest emailCommseqEmailTestRequest);

        /// <summary>
        /// Send email test
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="commseqEmailUuid"></param>
        /// <param name="emailCommseqEmailTestRequest">Email commseq email test request</param>
        /// <returns>ApiResponse of EmailCommseqEmailSendTestResponse</returns>
        ApiResponse<EmailCommseqEmailSendTestResponse> SendEmailTestWithHttpInfo (int? storefrontOid, string commseqEmailUuid, EmailCommseqEmailSendTestRequest emailCommseqEmailTestRequest);
        /// <summary>
        /// Send postcard test
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="commseqPostcardUuid"></param>
        /// <param name="emailCommseqPostcardTestRequest">Email commseq email test request</param>
        /// <returns>EmailCommseqPostcardSendTestResponse</returns>
        EmailCommseqPostcardSendTestResponse SendPostcardTest (int? storefrontOid, string commseqPostcardUuid, EmailCommseqPostcardSendTestRequest emailCommseqPostcardTestRequest);

        /// <summary>
        /// Send postcard test
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="commseqPostcardUuid"></param>
        /// <param name="emailCommseqPostcardTestRequest">Email commseq email test request</param>
        /// <returns>ApiResponse of EmailCommseqPostcardSendTestResponse</returns>
        ApiResponse<EmailCommseqPostcardSendTestResponse> SendPostcardTestWithHttpInfo (int? storefrontOid, string commseqPostcardUuid, EmailCommseqPostcardSendTestRequest emailCommseqPostcardTestRequest);
        /// <summary>
        /// Send webhook test
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="emailCommseqWebhookTestRequest">Email commseq webhook test request</param>
        /// <returns>EmailCommseqWebhookSendTestResponse</returns>
        EmailCommseqWebhookSendTestResponse SendWebhookTest (int? storefrontOid, EmailCommseqWebhookSendTestRequest emailCommseqWebhookTestRequest);

        /// <summary>
        /// Send webhook test
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="emailCommseqWebhookTestRequest">Email commseq webhook test request</param>
        /// <returns>ApiResponse of EmailCommseqWebhookSendTestResponse</returns>
        ApiResponse<EmailCommseqWebhookSendTestResponse> SendWebhookTestWithHttpInfo (int? storefrontOid, EmailCommseqWebhookSendTestRequest emailCommseqWebhookTestRequest);
        /// <summary>
        /// Start email campaign
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="emailCampaignUuid"></param>
        /// <returns>BaseResponse</returns>
        BaseResponse StartEmailCampaign (int? storefrontOid, string emailCampaignUuid);

        /// <summary>
        /// Start email campaign
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="emailCampaignUuid"></param>
        /// <returns>ApiResponse of BaseResponse</returns>
        ApiResponse<BaseResponse> StartEmailCampaignWithHttpInfo (int? storefrontOid, string emailCampaignUuid);
        /// <summary>
        /// Subscribe customers to email list
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="emailListUuid"></param>
        /// <param name="customers">Customers</param>
        /// <returns>EmailListSubscribeResponse</returns>
        EmailListSubscribeResponse SubscribeToEmailList (int? storefrontOid, string emailListUuid, List<EmailCustomer> customers);

        /// <summary>
        /// Subscribe customers to email list
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="emailListUuid"></param>
        /// <param name="customers">Customers</param>
        /// <returns>ApiResponse of EmailListSubscribeResponse</returns>
        ApiResponse<EmailListSubscribeResponse> SubscribeToEmailListWithHttpInfo (int? storefrontOid, string emailListUuid, List<EmailCustomer> customers);
        /// <summary>
        /// Remove favorite flag on screen recording
        /// </summary>
        /// <remarks>
        /// Remove favorite flag on screen recording 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="screenRecordingUuid"></param>
        /// <returns></returns>
        void UnfavoriteScreenRecording (int? storefrontOid, string screenRecordingUuid);

        /// <summary>
        /// Remove favorite flag on screen recording
        /// </summary>
        /// <remarks>
        /// Remove favorite flag on screen recording 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="screenRecordingUuid"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UnfavoriteScreenRecordingWithHttpInfo (int? storefrontOid, string screenRecordingUuid);
        /// <summary>
        /// Update email campaign
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="emailCampaignUuid"></param>
        /// <param name="emailCampaign">Email campaign</param>
        /// <returns>EmailCampaignResponse</returns>
        EmailCampaignResponse UpdateEmailCampaign (int? storefrontOid, string emailCampaignUuid, EmailCampaign emailCampaign);

        /// <summary>
        /// Update email campaign
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="emailCampaignUuid"></param>
        /// <param name="emailCampaign">Email campaign</param>
        /// <returns>ApiResponse of EmailCampaignResponse</returns>
        ApiResponse<EmailCampaignResponse> UpdateEmailCampaignWithHttpInfo (int? storefrontOid, string emailCampaignUuid, EmailCampaign emailCampaign);
        /// <summary>
        /// Update email campaign folder
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="emailCampaignFolderUuid"></param>
        /// <param name="emailCampaignFolder">Email campaign folder</param>
        /// <returns>EmailCampaignFolderResponse</returns>
        EmailCampaignFolderResponse UpdateEmailCampaignFolder (int? storefrontOid, string emailCampaignFolderUuid, EmailCampaignFolder emailCampaignFolder);

        /// <summary>
        /// Update email campaign folder
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="emailCampaignFolderUuid"></param>
        /// <param name="emailCampaignFolder">Email campaign folder</param>
        /// <returns>ApiResponse of EmailCampaignFolderResponse</returns>
        ApiResponse<EmailCampaignFolderResponse> UpdateEmailCampaignFolderWithHttpInfo (int? storefrontOid, string emailCampaignFolderUuid, EmailCampaignFolder emailCampaignFolder);
        /// <summary>
        /// Update email commseq
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="commseqUuid"></param>
        /// <param name="emailCommseq">Email commseq</param>
        /// <returns>EmailCommseqResponse</returns>
        EmailCommseqResponse UpdateEmailCommseq (int? storefrontOid, string commseqUuid, EmailCommseq emailCommseq);

        /// <summary>
        /// Update email commseq
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="commseqUuid"></param>
        /// <param name="emailCommseq">Email commseq</param>
        /// <returns>ApiResponse of EmailCommseqResponse</returns>
        ApiResponse<EmailCommseqResponse> UpdateEmailCommseqWithHttpInfo (int? storefrontOid, string commseqUuid, EmailCommseq emailCommseq);
        /// <summary>
        /// Update email customer
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="emailCustomerUuid"></param>
        /// <param name="emailCustomer">Email customer</param>
        /// <returns></returns>
        void UpdateEmailCustomer (int? storefrontOid, string emailCustomerUuid, EmailCustomer emailCustomer);

        /// <summary>
        /// Update email customer
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="emailCustomerUuid"></param>
        /// <param name="emailCustomer">Email customer</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UpdateEmailCustomerWithHttpInfo (int? storefrontOid, string emailCustomerUuid, EmailCustomer emailCustomer);
        /// <summary>
        /// Update email email
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="commseqEmailUuid"></param>
        /// <param name="emailCommseqEmail">Email commseq email</param>
        /// <returns>EmailCommseqEmailResponse</returns>
        EmailCommseqEmailResponse UpdateEmailEmail (int? storefrontOid, string commseqEmailUuid, EmailCommseqEmail emailCommseqEmail);

        /// <summary>
        /// Update email email
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="commseqEmailUuid"></param>
        /// <param name="emailCommseqEmail">Email commseq email</param>
        /// <returns>ApiResponse of EmailCommseqEmailResponse</returns>
        ApiResponse<EmailCommseqEmailResponse> UpdateEmailEmailWithHttpInfo (int? storefrontOid, string commseqEmailUuid, EmailCommseqEmail emailCommseqEmail);
        /// <summary>
        /// Update email flow
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="emailFlowUuid"></param>
        /// <param name="emailFlow">Email flow</param>
        /// <returns>EmailFlowResponse</returns>
        EmailFlowResponse UpdateEmailFlow (int? storefrontOid, string emailFlowUuid, EmailFlow emailFlow);

        /// <summary>
        /// Update email flow
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="emailFlowUuid"></param>
        /// <param name="emailFlow">Email flow</param>
        /// <returns>ApiResponse of EmailFlowResponse</returns>
        ApiResponse<EmailFlowResponse> UpdateEmailFlowWithHttpInfo (int? storefrontOid, string emailFlowUuid, EmailFlow emailFlow);
        /// <summary>
        /// Update email flow folder
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="emailFlowFolderUuid"></param>
        /// <param name="emailFlowFolder">Email flow folder</param>
        /// <returns>EmailFlowFolderResponse</returns>
        EmailFlowFolderResponse UpdateEmailFlowFolder (int? storefrontOid, string emailFlowFolderUuid, EmailFlowFolder emailFlowFolder);

        /// <summary>
        /// Update email flow folder
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="emailFlowFolderUuid"></param>
        /// <param name="emailFlowFolder">Email flow folder</param>
        /// <returns>ApiResponse of EmailFlowFolderResponse</returns>
        ApiResponse<EmailFlowFolderResponse> UpdateEmailFlowFolderWithHttpInfo (int? storefrontOid, string emailFlowFolderUuid, EmailFlowFolder emailFlowFolder);
        /// <summary>
        /// Update email global settings
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="globalSettings">global settings request</param>
        /// <returns>EmailGlobalSettingsResponse</returns>
        EmailGlobalSettingsResponse UpdateEmailGlobalSettings (EmailGlobalSettings globalSettings);

        /// <summary>
        /// Update email global settings
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="globalSettings">global settings request</param>
        /// <returns>ApiResponse of EmailGlobalSettingsResponse</returns>
        ApiResponse<EmailGlobalSettingsResponse> UpdateEmailGlobalSettingsWithHttpInfo (EmailGlobalSettings globalSettings);
        /// <summary>
        /// Update email list
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="emailListUuid"></param>
        /// <param name="emailList">Email list</param>
        /// <returns>EmailListResponse</returns>
        EmailListResponse UpdateEmailList (int? storefrontOid, string emailListUuid, EmailList emailList);

        /// <summary>
        /// Update email list
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="emailListUuid"></param>
        /// <param name="emailList">Email list</param>
        /// <returns>ApiResponse of EmailListResponse</returns>
        ApiResponse<EmailListResponse> UpdateEmailListWithHttpInfo (int? storefrontOid, string emailListUuid, EmailList emailList);
        /// <summary>
        /// Update email campaign folder
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="emailListSegmentFolderUuid"></param>
        /// <param name="emailListSegmentFolder">Email campaign folder</param>
        /// <returns>EmailListSegmentFolderResponse</returns>
        EmailListSegmentFolderResponse UpdateEmailListSegmentFolder (int? storefrontOid, string emailListSegmentFolderUuid, EmailListSegmentFolder emailListSegmentFolder);

        /// <summary>
        /// Update email campaign folder
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="emailListSegmentFolderUuid"></param>
        /// <param name="emailListSegmentFolder">Email campaign folder</param>
        /// <returns>ApiResponse of EmailListSegmentFolderResponse</returns>
        ApiResponse<EmailListSegmentFolderResponse> UpdateEmailListSegmentFolderWithHttpInfo (int? storefrontOid, string emailListSegmentFolderUuid, EmailListSegmentFolder emailListSegmentFolder);
        /// <summary>
        /// Update email plan
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="settings">plan request</param>
        /// <returns>EmailPlanResponse</returns>
        EmailPlanResponse UpdateEmailPlan (int? storefrontOid, EmailPlan settings);

        /// <summary>
        /// Update email plan
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="settings">plan request</param>
        /// <returns>ApiResponse of EmailPlanResponse</returns>
        ApiResponse<EmailPlanResponse> UpdateEmailPlanWithHttpInfo (int? storefrontOid, EmailPlan settings);
        /// <summary>
        /// Update email postcard
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="commseqPostcardUuid"></param>
        /// <param name="emailCommseqPostcard">Email commseq postcard</param>
        /// <returns>EmailCommseqPostcardResponse</returns>
        EmailCommseqPostcardResponse UpdateEmailPostcard (int? storefrontOid, string commseqPostcardUuid, EmailCommseqPostcard emailCommseqPostcard);

        /// <summary>
        /// Update email postcard
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="commseqPostcardUuid"></param>
        /// <param name="emailCommseqPostcard">Email commseq postcard</param>
        /// <returns>ApiResponse of EmailCommseqPostcardResponse</returns>
        ApiResponse<EmailCommseqPostcardResponse> UpdateEmailPostcardWithHttpInfo (int? storefrontOid, string commseqPostcardUuid, EmailCommseqPostcard emailCommseqPostcard);
        /// <summary>
        /// Update email segment
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="emailSegmentUuid"></param>
        /// <param name="emailSegment">Email segment</param>
        /// <returns>EmailSegmentResponse</returns>
        EmailSegmentResponse UpdateEmailSegment (int? storefrontOid, string emailSegmentUuid, EmailSegment emailSegment);

        /// <summary>
        /// Update email segment
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="emailSegmentUuid"></param>
        /// <param name="emailSegment">Email segment</param>
        /// <returns>ApiResponse of EmailSegmentResponse</returns>
        ApiResponse<EmailSegmentResponse> UpdateEmailSegmentWithHttpInfo (int? storefrontOid, string emailSegmentUuid, EmailSegment emailSegment);
        /// <summary>
        /// Update email sending domain
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="domain"></param>
        /// <param name="emailDomain">EmailDomain</param>
        /// <returns>EmailSendingDomainResponse</returns>
        EmailSendingDomainResponse UpdateEmailSendingDomain (string domain, EmailDomain emailDomain);

        /// <summary>
        /// Update email sending domain
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="domain"></param>
        /// <param name="emailDomain">EmailDomain</param>
        /// <returns>ApiResponse of EmailSendingDomainResponse</returns>
        ApiResponse<EmailSendingDomainResponse> UpdateEmailSendingDomainWithHttpInfo (string domain, EmailDomain emailDomain);
        /// <summary>
        /// Update email settings
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="settings">settings request</param>
        /// <returns>EmailSettingsResponse</returns>
        EmailSettingsResponse UpdateEmailSettings (int? storefrontOid, EmailSettings settings);

        /// <summary>
        /// Update email settings
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="settings">settings request</param>
        /// <returns>ApiResponse of EmailSettingsResponse</returns>
        ApiResponse<EmailSettingsResponse> UpdateEmailSettingsWithHttpInfo (int? storefrontOid, EmailSettings settings);
        /// <summary>
        /// Update experiment
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="storefrontExperimentOid"></param>
        /// <param name="experiment">Experiment</param>
        /// <returns>ExperimentResponse</returns>
        ExperimentResponse UpdateExperiment (int? storefrontOid, int? storefrontExperimentOid, Experiment experiment);

        /// <summary>
        /// Update experiment
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="storefrontExperimentOid"></param>
        /// <param name="experiment">Experiment</param>
        /// <returns>ApiResponse of ExperimentResponse</returns>
        ApiResponse<ExperimentResponse> UpdateExperimentWithHttpInfo (int? storefrontOid, int? storefrontExperimentOid, Experiment experiment);
        /// <summary>
        /// Update library item. Note that only certain fields may be updated via this method.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="libraryItemOid"></param>
        /// <param name="libraryItem">Library item</param>
        /// <returns>LibraryItemResponse</returns>
        LibraryItemResponse UpdateLibraryItem (int? libraryItemOid, LibraryItem libraryItem);

        /// <summary>
        /// Update library item. Note that only certain fields may be updated via this method.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="libraryItemOid"></param>
        /// <param name="libraryItem">Library item</param>
        /// <returns>ApiResponse of LibraryItemResponse</returns>
        ApiResponse<LibraryItemResponse> UpdateLibraryItemWithHttpInfo (int? libraryItemOid, LibraryItem libraryItem);
        /// <summary>
        /// Update merchant notes on a screen recording
        /// </summary>
        /// <remarks>
        /// Update merchant notes on a screen recording 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="screenRecordingUuid"></param>
        /// <param name="merchantNotesRequest">Merchant Notes</param>
        /// <returns></returns>
        void UpdateScreenRecordingMerchantNotes (int? storefrontOid, string screenRecordingUuid, ScreenRecordingMerchantNotesRequest merchantNotesRequest);

        /// <summary>
        /// Update merchant notes on a screen recording
        /// </summary>
        /// <remarks>
        /// Update merchant notes on a screen recording 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="screenRecordingUuid"></param>
        /// <param name="merchantNotesRequest">Merchant Notes</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UpdateScreenRecordingMerchantNotesWithHttpInfo (int? storefrontOid, string screenRecordingUuid, ScreenRecordingMerchantNotesRequest merchantNotesRequest);
        /// <summary>
        /// Update screen recording segment
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="screenRecordingSegmentOid"></param>
        /// <param name="segment">Segment</param>
        /// <returns>ScreenRecordingSegmentResponse</returns>
        ScreenRecordingSegmentResponse UpdateScreenRecordingSegment (int? storefrontOid, int? screenRecordingSegmentOid, ScreenRecordingSegment segment);

        /// <summary>
        /// Update screen recording segment
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="screenRecordingSegmentOid"></param>
        /// <param name="segment">Segment</param>
        /// <returns>ApiResponse of ScreenRecordingSegmentResponse</returns>
        ApiResponse<ScreenRecordingSegmentResponse> UpdateScreenRecordingSegmentWithHttpInfo (int? storefrontOid, int? screenRecordingSegmentOid, ScreenRecordingSegment segment);
        /// <summary>
        /// Update screen recording settings
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="settings">Settings</param>
        /// <returns>ScreenRecordingSettingsResponse</returns>
        ScreenRecordingSettingsResponse UpdateScreenRecordingSettings (int? storefrontOid, ScreenRecordingSettings settings);

        /// <summary>
        /// Update screen recording settings
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="settings">Settings</param>
        /// <returns>ApiResponse of ScreenRecordingSettingsResponse</returns>
        ApiResponse<ScreenRecordingSettingsResponse> UpdateScreenRecordingSettingsWithHttpInfo (int? storefrontOid, ScreenRecordingSettings settings);
        /// <summary>
        /// Update tags on a screen recording
        /// </summary>
        /// <remarks>
        /// Update tags on a screen recording 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="screenRecordingUuid"></param>
        /// <param name="tags">Tags</param>
        /// <returns></returns>
        void UpdateScreenRecordingTags (int? storefrontOid, string screenRecordingUuid, ScreenRecordingTagsRequest tags);

        /// <summary>
        /// Update tags on a screen recording
        /// </summary>
        /// <remarks>
        /// Update tags on a screen recording 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="screenRecordingUuid"></param>
        /// <param name="tags">Tags</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UpdateScreenRecordingTagsWithHttpInfo (int? storefrontOid, string screenRecordingUuid, ScreenRecordingTagsRequest tags);
        /// <summary>
        /// Updates a transaction email object
        /// </summary>
        /// <remarks>
        /// Updates a transactional email 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="emailId"></param>
        /// <param name="transactionEmail">TransactionEmail</param>
        /// <returns>TransactionEmailResponse</returns>
        TransactionEmailResponse UpdateTransactionEmail (int? storefrontOid, string emailId, TransactionEmail transactionEmail);

        /// <summary>
        /// Updates a transaction email object
        /// </summary>
        /// <remarks>
        /// Updates a transactional email 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="emailId"></param>
        /// <param name="transactionEmail">TransactionEmail</param>
        /// <returns>ApiResponse of TransactionEmailResponse</returns>
        ApiResponse<TransactionEmailResponse> UpdateTransactionEmailWithHttpInfo (int? storefrontOid, string emailId, TransactionEmail transactionEmail);
        /// <summary>
        /// Update Twilio account
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="espTwilioUuid"></param>
        /// <param name="twilio">Twilio</param>
        /// <returns>TwilioResponse</returns>
        TwilioResponse UpdateTwilioAccount (string espTwilioUuid, Twilio twilio);

        /// <summary>
        /// Update Twilio account
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="espTwilioUuid"></param>
        /// <param name="twilio">Twilio</param>
        /// <returns>ApiResponse of TwilioResponse</returns>
        ApiResponse<TwilioResponse> UpdateTwilioAccountWithHttpInfo (string espTwilioUuid, Twilio twilio);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Add to library
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addLibraryRequest">New library item request</param>
        /// <returns>Task of LibraryItemResponse</returns>
        System.Threading.Tasks.Task<LibraryItemResponse> AddToLibraryAsync (AddLibraryItemRequest addLibraryRequest);

        /// <summary>
        /// Add to library
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addLibraryRequest">New library item request</param>
        /// <returns>Task of ApiResponse (LibraryItemResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<LibraryItemResponse>> AddToLibraryAsyncWithHttpInfo (AddLibraryItemRequest addLibraryRequest);
        /// <summary>
        /// Apply library item to storefront.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applyLibraryRequest">New library item</param>
        /// <returns>Task of ApplyLibraryItemResponse</returns>
        System.Threading.Tasks.Task<ApplyLibraryItemResponse> ApplyToStoreFrontAsync (ApplyLibraryItemRequest applyLibraryRequest);

        /// <summary>
        /// Apply library item to storefront.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applyLibraryRequest">New library item</param>
        /// <returns>Task of ApiResponse (ApplyLibraryItemResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApplyLibraryItemResponse>> ApplyToStoreFrontAsyncWithHttpInfo (ApplyLibraryItemRequest applyLibraryRequest);
        /// <summary>
        /// Archive email list
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="emailListUuid"></param>
        /// <returns>Task of EmailListArchiveResponse</returns>
        System.Threading.Tasks.Task<EmailListArchiveResponse> ArchiveEmailListAsync (int? storefrontOid, string emailListUuid);

        /// <summary>
        /// Archive email list
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="emailListUuid"></param>
        /// <returns>Task of ApiResponse (EmailListArchiveResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<EmailListArchiveResponse>> ArchiveEmailListAsyncWithHttpInfo (int? storefrontOid, string emailListUuid);
        /// <summary>
        /// Archive email segment
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="emailSegmentUuid"></param>
        /// <returns>Task of EmailSegmentArchiveResponse</returns>
        System.Threading.Tasks.Task<EmailSegmentArchiveResponse> ArchiveEmailSegmentAsync (int? storefrontOid, string emailSegmentUuid);

        /// <summary>
        /// Archive email segment
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="emailSegmentUuid"></param>
        /// <returns>Task of ApiResponse (EmailSegmentArchiveResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<EmailSegmentArchiveResponse>> ArchiveEmailSegmentAsyncWithHttpInfo (int? storefrontOid, string emailSegmentUuid);
        /// <summary>
        /// Back populate email flow
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="emailFlowUuid"></param>
        /// <param name="backPopulateRequest">The request to back populate</param>
        /// <returns>Task of EmailFlowBackPopulateResponse</returns>
        System.Threading.Tasks.Task<EmailFlowBackPopulateResponse> BackPopulateEmailFlowAsync (int? storefrontOid, string emailFlowUuid, EmailFlowBackPopulateRequest backPopulateRequest);

        /// <summary>
        /// Back populate email flow
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="emailFlowUuid"></param>
        /// <param name="backPopulateRequest">The request to back populate</param>
        /// <returns>Task of ApiResponse (EmailFlowBackPopulateResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<EmailFlowBackPopulateResponse>> BackPopulateEmailFlowAsyncWithHttpInfo (int? storefrontOid, string emailFlowUuid, EmailFlowBackPopulateRequest backPopulateRequest);
        /// <summary>
        /// Check download of email segment
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="emailSegmentUuid"></param>
        /// <param name="emailSegmentRebuildUuid"></param>
        /// <returns>Task of EmailSegmentDownloadPrepareResponse</returns>
        System.Threading.Tasks.Task<EmailSegmentDownloadPrepareResponse> CheckDownloadEmailSegmentAsync (int? storefrontOid, string emailSegmentUuid, string emailSegmentRebuildUuid);

        /// <summary>
        /// Check download of email segment
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="emailSegmentUuid"></param>
        /// <param name="emailSegmentRebuildUuid"></param>
        /// <returns>Task of ApiResponse (EmailSegmentDownloadPrepareResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<EmailSegmentDownloadPrepareResponse>> CheckDownloadEmailSegmentAsyncWithHttpInfo (int? storefrontOid, string emailSegmentUuid, string emailSegmentRebuildUuid);
        /// <summary>
        /// Clone email campaign
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="emailCampaignUuid"></param>
        /// <param name="targetStorefrontOid"> (optional)</param>
        /// <returns>Task of EmailCampaignResponse</returns>
        System.Threading.Tasks.Task<EmailCampaignResponse> CloneEmailCampaignAsync (int? storefrontOid, string emailCampaignUuid, int? targetStorefrontOid = null);

        /// <summary>
        /// Clone email campaign
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="emailCampaignUuid"></param>
        /// <param name="targetStorefrontOid"> (optional)</param>
        /// <returns>Task of ApiResponse (EmailCampaignResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<EmailCampaignResponse>> CloneEmailCampaignAsyncWithHttpInfo (int? storefrontOid, string emailCampaignUuid, int? targetStorefrontOid = null);
        /// <summary>
        /// Clone email flow
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="emailFlowUuid"></param>
        /// <param name="targetStorefrontOid"> (optional)</param>
        /// <returns>Task of EmailFlowResponse</returns>
        System.Threading.Tasks.Task<EmailFlowResponse> CloneEmailFlowAsync (int? storefrontOid, string emailFlowUuid, int? targetStorefrontOid = null);

        /// <summary>
        /// Clone email flow
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="emailFlowUuid"></param>
        /// <param name="targetStorefrontOid"> (optional)</param>
        /// <returns>Task of ApiResponse (EmailFlowResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<EmailFlowResponse>> CloneEmailFlowAsyncWithHttpInfo (int? storefrontOid, string emailFlowUuid, int? targetStorefrontOid = null);
        /// <summary>
        /// Create email campaign
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="domain"></param>
        /// <returns>Task of EmailSendingDomainResponse</returns>
        System.Threading.Tasks.Task<EmailSendingDomainResponse> CreateEmailSendingDomainAsync (string domain);

        /// <summary>
        /// Create email campaign
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="domain"></param>
        /// <returns>Task of ApiResponse (EmailSendingDomainResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<EmailSendingDomainResponse>> CreateEmailSendingDomainAsyncWithHttpInfo (string domain);
        /// <summary>
        /// Create email sending domain for various providers
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="emailDomain">EmailDomain</param>
        /// <returns>Task of EmailSendingDomainResponse</returns>
        System.Threading.Tasks.Task<EmailSendingDomainResponse> CreateEmailSendingDomain2Async (EmailDomain emailDomain);

        /// <summary>
        /// Create email sending domain for various providers
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="emailDomain">EmailDomain</param>
        /// <returns>Task of ApiResponse (EmailSendingDomainResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<EmailSendingDomainResponse>> CreateEmailSendingDomain2AsyncWithHttpInfo (EmailDomain emailDomain);
        /// <summary>
        /// Create Twilio account
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="twilio">Twilio</param>
        /// <returns>Task of TwilioResponse</returns>
        System.Threading.Tasks.Task<TwilioResponse> CreateTwilioAccountAsync (Twilio twilio);

        /// <summary>
        /// Create Twilio account
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="twilio">Twilio</param>
        /// <returns>Task of ApiResponse (TwilioResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TwilioResponse>> CreateTwilioAccountAsyncWithHttpInfo (Twilio twilio);
        /// <summary>
        /// Delete email campaignFolder
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="emailCampaignFolderUuid"></param>
        /// <returns>Task of BaseResponse</returns>
        System.Threading.Tasks.Task<BaseResponse> DeleteEmailCampaignFolderAsync (int? storefrontOid, string emailCampaignFolderUuid);

        /// <summary>
        /// Delete email campaignFolder
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="emailCampaignFolderUuid"></param>
        /// <returns>Task of ApiResponse (BaseResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<BaseResponse>> DeleteEmailCampaignFolderAsyncWithHttpInfo (int? storefrontOid, string emailCampaignFolderUuid);
        /// <summary>
        /// Delete communication sequence stats
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="commseqUuid"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteEmailCommseqStatAsync (int? storefrontOid, string commseqUuid);

        /// <summary>
        /// Delete communication sequence stats
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="commseqUuid"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteEmailCommseqStatAsyncWithHttpInfo (int? storefrontOid, string commseqUuid);
        /// <summary>
        /// Delete email email
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="commseqEmailUuid"></param>
        /// <returns>Task of BaseResponse</returns>
        System.Threading.Tasks.Task<BaseResponse> DeleteEmailEmailAsync (int? storefrontOid, string commseqEmailUuid);

        /// <summary>
        /// Delete email email
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="commseqEmailUuid"></param>
        /// <returns>Task of ApiResponse (BaseResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<BaseResponse>> DeleteEmailEmailAsyncWithHttpInfo (int? storefrontOid, string commseqEmailUuid);
        /// <summary>
        /// Delete email flowFolder
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="emailFlowFolderUuid"></param>
        /// <returns>Task of BaseResponse</returns>
        System.Threading.Tasks.Task<BaseResponse> DeleteEmailFlowFolderAsync (int? storefrontOid, string emailFlowFolderUuid);

        /// <summary>
        /// Delete email flowFolder
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="emailFlowFolderUuid"></param>
        /// <returns>Task of ApiResponse (BaseResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<BaseResponse>> DeleteEmailFlowFolderAsyncWithHttpInfo (int? storefrontOid, string emailFlowFolderUuid);
        /// <summary>
        /// Delete email list customer
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="emailListUuid"></param>
        /// <param name="emailCustomerUuid"></param>
        /// <returns>Task of BaseResponse</returns>
        System.Threading.Tasks.Task<BaseResponse> DeleteEmailListCustomerAsync (int? storefrontOid, string emailListUuid, string emailCustomerUuid);

        /// <summary>
        /// Delete email list customer
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="emailListUuid"></param>
        /// <param name="emailCustomerUuid"></param>
        /// <returns>Task of ApiResponse (BaseResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<BaseResponse>> DeleteEmailListCustomerAsyncWithHttpInfo (int? storefrontOid, string emailListUuid, string emailCustomerUuid);
        /// <summary>
        /// Delete email ListSegmentFolder
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="emailListSegmentFolderUuid"></param>
        /// <returns>Task of BaseResponse</returns>
        System.Threading.Tasks.Task<BaseResponse> DeleteEmailListSegmentFolderAsync (int? storefrontOid, string emailListSegmentFolderUuid);

        /// <summary>
        /// Delete email ListSegmentFolder
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="emailListSegmentFolderUuid"></param>
        /// <returns>Task of ApiResponse (BaseResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<BaseResponse>> DeleteEmailListSegmentFolderAsyncWithHttpInfo (int? storefrontOid, string emailListSegmentFolderUuid);
        /// <summary>
        /// Delete email postcard
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="commseqPostcardUuid"></param>
        /// <returns>Task of BaseResponse</returns>
        System.Threading.Tasks.Task<BaseResponse> DeleteEmailPostcardAsync (int? storefrontOid, string commseqPostcardUuid);

        /// <summary>
        /// Delete email postcard
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="commseqPostcardUuid"></param>
        /// <returns>Task of ApiResponse (BaseResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<BaseResponse>> DeleteEmailPostcardAsyncWithHttpInfo (int? storefrontOid, string commseqPostcardUuid);
        /// <summary>
        /// delete email campaign
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="domain"></param>
        /// <returns>Task of BaseResponse</returns>
        System.Threading.Tasks.Task<BaseResponse> DeleteEmailSendingDomainAsync (string domain);

        /// <summary>
        /// delete email campaign
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="domain"></param>
        /// <returns>Task of ApiResponse (BaseResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<BaseResponse>> DeleteEmailSendingDomainAsyncWithHttpInfo (string domain);
        /// <summary>
        /// Delete experiment
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="storefrontExperimentOid"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteExperimentAsync (int? storefrontOid, int? storefrontExperimentOid);

        /// <summary>
        /// Delete experiment
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="storefrontExperimentOid"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteExperimentAsyncWithHttpInfo (int? storefrontOid, int? storefrontExperimentOid);
        /// <summary>
        /// Delete screen recording heatmap
        /// </summary>
        /// <remarks>
        /// Delete screen recording heatmap 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="query">Query</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteHeatmapAsync (int? storefrontOid, ScreenRecordingHeatmapReset query);

        /// <summary>
        /// Delete screen recording heatmap
        /// </summary>
        /// <remarks>
        /// Delete screen recording heatmap 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="query">Query</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteHeatmapAsyncWithHttpInfo (int? storefrontOid, ScreenRecordingHeatmapReset query);
        /// <summary>
        /// Delete library item
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="libraryItemOid"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteLibraryItemAsync (int? libraryItemOid);

        /// <summary>
        /// Delete library item
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="libraryItemOid"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteLibraryItemAsyncWithHttpInfo (int? libraryItemOid);
        /// <summary>
        /// Delete all published versions for a library item, including anything in review.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="libraryItemOid"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteLibraryItemPublishedVersionsAsync (int? libraryItemOid);

        /// <summary>
        /// Delete all published versions for a library item, including anything in review.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="libraryItemOid"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteLibraryItemPublishedVersionsAsyncWithHttpInfo (int? libraryItemOid);
        /// <summary>
        /// Delete screen recording segment
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="screenRecordingSegmentOid"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteScreenRecordingSegmentAsync (int? storefrontOid, int? screenRecordingSegmentOid);

        /// <summary>
        /// Delete screen recording segment
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="screenRecordingSegmentOid"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteScreenRecordingSegmentAsyncWithHttpInfo (int? storefrontOid, int? screenRecordingSegmentOid);
        /// <summary>
        /// delete Twilio account
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="espTwilioUuid"></param>
        /// <returns>Task of BaseResponse</returns>
        System.Threading.Tasks.Task<BaseResponse> DeleteTwilioAccountAsync (string espTwilioUuid);

        /// <summary>
        /// delete Twilio account
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="espTwilioUuid"></param>
        /// <returns>Task of ApiResponse (BaseResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<BaseResponse>> DeleteTwilioAccountAsyncWithHttpInfo (string espTwilioUuid);
        /// <summary>
        /// Duplicate library item.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="libraryItemOid"></param>
        /// <returns>Task of LibraryItemResponse</returns>
        System.Threading.Tasks.Task<LibraryItemResponse> DuplicateLibraryItemAsync (int? libraryItemOid);

        /// <summary>
        /// Duplicate library item.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="libraryItemOid"></param>
        /// <returns>Task of ApiResponse (LibraryItemResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<LibraryItemResponse>> DuplicateLibraryItemAsyncWithHttpInfo (int? libraryItemOid);
        /// <summary>
        /// Update favorite flag on screen recording
        /// </summary>
        /// <remarks>
        /// Update favorite flag on screen recording 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="screenRecordingUuid"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task FavoriteScreenRecordingAsync (int? storefrontOid, string screenRecordingUuid);

        /// <summary>
        /// Update favorite flag on screen recording
        /// </summary>
        /// <remarks>
        /// Update favorite flag on screen recording 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="screenRecordingUuid"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> FavoriteScreenRecordingAsyncWithHttpInfo (int? storefrontOid, string screenRecordingUuid);
        /// <summary>
        /// Obtain lat/long for an address
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="geocodeRequest">geocode request</param>
        /// <returns>Task of GeocodeResponse</returns>
        System.Threading.Tasks.Task<GeocodeResponse> GeocodeAddressAsync (int? storefrontOid, GeocodeRequest geocodeRequest);

        /// <summary>
        /// Obtain lat/long for an address
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="geocodeRequest">geocode request</param>
        /// <returns>Task of ApiResponse (GeocodeResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GeocodeResponse>> GeocodeAddressAsyncWithHttpInfo (int? storefrontOid, GeocodeRequest geocodeRequest);
        /// <summary>
        /// Get countries
        /// </summary>
        /// <remarks>
        /// Obtain a list of all the countries 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <returns>Task of CountriesResponse</returns>
        System.Threading.Tasks.Task<CountriesResponse> GetCountriesAsync (int? storefrontOid);

        /// <summary>
        /// Get countries
        /// </summary>
        /// <remarks>
        /// Obtain a list of all the countries 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <returns>Task of ApiResponse (CountriesResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CountriesResponse>> GetCountriesAsyncWithHttpInfo (int? storefrontOid);
        /// <summary>
        /// Gets editor token
        /// </summary>
        /// <remarks>
        /// Fetches a temporary authentication token for the editor 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <returns>Task of EmailEditorTokenResponse</returns>
        System.Threading.Tasks.Task<EmailEditorTokenResponse> GetEditorTokenAsync (int? storefrontOid);

        /// <summary>
        /// Gets editor token
        /// </summary>
        /// <remarks>
        /// Fetches a temporary authentication token for the editor 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <returns>Task of ApiResponse (EmailEditorTokenResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<EmailEditorTokenResponse>> GetEditorTokenAsyncWithHttpInfo (int? storefrontOid);
        /// <summary>
        /// Get email communication base templates
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <returns>Task of EmailBaseTemplateListResponse</returns>
        System.Threading.Tasks.Task<EmailBaseTemplateListResponse> GetEmailBaseTemplatesAsync (int? storefrontOid);

        /// <summary>
        /// Get email communication base templates
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <returns>Task of ApiResponse (EmailBaseTemplateListResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<EmailBaseTemplateListResponse>> GetEmailBaseTemplatesAsyncWithHttpInfo (int? storefrontOid);
        /// <summary>
        /// Get email campaign
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="emailCampaignUuid"></param>
        /// <returns>Task of EmailCampaignResponse</returns>
        System.Threading.Tasks.Task<EmailCampaignResponse> GetEmailCampaignAsync (int? storefrontOid, string emailCampaignUuid);

        /// <summary>
        /// Get email campaign
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="emailCampaignUuid"></param>
        /// <returns>Task of ApiResponse (EmailCampaignResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<EmailCampaignResponse>> GetEmailCampaignAsyncWithHttpInfo (int? storefrontOid, string emailCampaignUuid);
        /// <summary>
        /// Get email campaign folder
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="emailCampaignFolderUuid"></param>
        /// <returns>Task of EmailCampaignFolderResponse</returns>
        System.Threading.Tasks.Task<EmailCampaignFolderResponse> GetEmailCampaignFolderAsync (int? storefrontOid, string emailCampaignFolderUuid);

        /// <summary>
        /// Get email campaign folder
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="emailCampaignFolderUuid"></param>
        /// <returns>Task of ApiResponse (EmailCampaignFolderResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<EmailCampaignFolderResponse>> GetEmailCampaignFolderAsyncWithHttpInfo (int? storefrontOid, string emailCampaignFolderUuid);
        /// <summary>
        /// Get email campaign folders
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <returns>Task of EmailCampaignFoldersResponse</returns>
        System.Threading.Tasks.Task<EmailCampaignFoldersResponse> GetEmailCampaignFoldersAsync (int? storefrontOid);

        /// <summary>
        /// Get email campaign folders
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <returns>Task of ApiResponse (EmailCampaignFoldersResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<EmailCampaignFoldersResponse>> GetEmailCampaignFoldersAsyncWithHttpInfo (int? storefrontOid);
        /// <summary>
        /// Get email campaign screenshots
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="emailCampaignUuid"></param>
        /// <returns>Task of ScreenshotsResponse</returns>
        System.Threading.Tasks.Task<ScreenshotsResponse> GetEmailCampaignScreenshotsAsync (int? storefrontOid, string emailCampaignUuid);

        /// <summary>
        /// Get email campaign screenshots
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="emailCampaignUuid"></param>
        /// <returns>Task of ApiResponse (ScreenshotsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ScreenshotsResponse>> GetEmailCampaignScreenshotsAsyncWithHttpInfo (int? storefrontOid, string emailCampaignUuid);
        /// <summary>
        /// Get email campaigns
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <returns>Task of EmailCampaignsResponse</returns>
        System.Threading.Tasks.Task<EmailCampaignsResponse> GetEmailCampaignsAsync (int? storefrontOid);

        /// <summary>
        /// Get email campaigns
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <returns>Task of ApiResponse (EmailCampaignsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<EmailCampaignsResponse>> GetEmailCampaignsAsyncWithHttpInfo (int? storefrontOid);
        /// <summary>
        /// Get email campaigns with stats
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="statDays"></param>
        /// <returns>Task of EmailCampaignsResponse</returns>
        System.Threading.Tasks.Task<EmailCampaignsResponse> GetEmailCampaignsWithStatsAsync (int? storefrontOid, string statDays);

        /// <summary>
        /// Get email campaigns with stats
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="statDays"></param>
        /// <returns>Task of ApiResponse (EmailCampaignsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<EmailCampaignsResponse>> GetEmailCampaignsWithStatsAsyncWithHttpInfo (int? storefrontOid, string statDays);
        /// <summary>
        /// Get email commseq
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="commseqUuid"></param>
        /// <returns>Task of EmailCommseqResponse</returns>
        System.Threading.Tasks.Task<EmailCommseqResponse> GetEmailCommseqAsync (int? storefrontOid, string commseqUuid);

        /// <summary>
        /// Get email commseq
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="commseqUuid"></param>
        /// <returns>Task of ApiResponse (EmailCommseqResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<EmailCommseqResponse>> GetEmailCommseqAsyncWithHttpInfo (int? storefrontOid, string commseqUuid);
        /// <summary>
        /// Get email communication sequence emails stats
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="commseqUuid"></param>
        /// <param name="statsRequest">StatsRequest</param>
        /// <returns>Task of EmailStatSummaryResponse</returns>
        System.Threading.Tasks.Task<EmailStatSummaryResponse> GetEmailCommseqEmailStatsAsync (int? storefrontOid, string commseqUuid, EmailStatSummaryRequest statsRequest);

        /// <summary>
        /// Get email communication sequence emails stats
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="commseqUuid"></param>
        /// <param name="statsRequest">StatsRequest</param>
        /// <returns>Task of ApiResponse (EmailStatSummaryResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<EmailStatSummaryResponse>> GetEmailCommseqEmailStatsAsyncWithHttpInfo (int? storefrontOid, string commseqUuid, EmailStatSummaryRequest statsRequest);
        /// <summary>
        /// Get email communication sequence postcard stats
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="commseqUuid"></param>
        /// <param name="statsRequest">StatsRequest</param>
        /// <returns>Task of EmailStatPostcardSummaryResponse</returns>
        System.Threading.Tasks.Task<EmailStatPostcardSummaryResponse> GetEmailCommseqPostcardStatsAsync (int? storefrontOid, string commseqUuid, EmailStatPostcardSummaryRequest statsRequest);

        /// <summary>
        /// Get email communication sequence postcard stats
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="commseqUuid"></param>
        /// <param name="statsRequest">StatsRequest</param>
        /// <returns>Task of ApiResponse (EmailStatPostcardSummaryResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<EmailStatPostcardSummaryResponse>> GetEmailCommseqPostcardStatsAsyncWithHttpInfo (int? storefrontOid, string commseqUuid, EmailStatPostcardSummaryRequest statsRequest);
        /// <summary>
        /// Get communication sequence stats overall
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="commseqUuid"></param>
        /// <returns>Task of EmailCommseqStatResponse</returns>
        System.Threading.Tasks.Task<EmailCommseqStatResponse> GetEmailCommseqStatOverallAsync (int? storefrontOid, string commseqUuid);

        /// <summary>
        /// Get communication sequence stats overall
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="commseqUuid"></param>
        /// <returns>Task of ApiResponse (EmailCommseqStatResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<EmailCommseqStatResponse>> GetEmailCommseqStatOverallAsyncWithHttpInfo (int? storefrontOid, string commseqUuid);
        /// <summary>
        /// Get email communication sequence step stats
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="commseqUuid"></param>
        /// <param name="statsRequest">StatsRequest</param>
        /// <returns>Task of EmailStepStatResponse</returns>
        System.Threading.Tasks.Task<EmailStepStatResponse> GetEmailCommseqStepStatsAsync (int? storefrontOid, string commseqUuid, EmailStepStatRequest statsRequest);

        /// <summary>
        /// Get email communication sequence step stats
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="commseqUuid"></param>
        /// <param name="statsRequest">StatsRequest</param>
        /// <returns>Task of ApiResponse (EmailStepStatResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<EmailStepStatResponse>> GetEmailCommseqStepStatsAsyncWithHttpInfo (int? storefrontOid, string commseqUuid, EmailStepStatRequest statsRequest);
        /// <summary>
        /// Get email communication sequence customers waiting at each requested step
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="commseqUuid"></param>
        /// <param name="waitingRequest">WaitingRequest</param>
        /// <returns>Task of EmailStepWaitingResponse</returns>
        System.Threading.Tasks.Task<EmailStepWaitingResponse> GetEmailCommseqStepWaitingAsync (int? storefrontOid, string commseqUuid, EmailStepWaitingRequest waitingRequest);

        /// <summary>
        /// Get email communication sequence customers waiting at each requested step
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="commseqUuid"></param>
        /// <param name="waitingRequest">WaitingRequest</param>
        /// <returns>Task of ApiResponse (EmailStepWaitingResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<EmailStepWaitingResponse>> GetEmailCommseqStepWaitingAsyncWithHttpInfo (int? storefrontOid, string commseqUuid, EmailStepWaitingRequest waitingRequest);
        /// <summary>
        /// Get email webhook editor values
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="commseqUuid"></param>
        /// <returns>Task of EmailWebhookEditorValuesResponse</returns>
        System.Threading.Tasks.Task<EmailWebhookEditorValuesResponse> GetEmailCommseqWebhookEditorValuesAsync (int? storefrontOid, string commseqUuid);

        /// <summary>
        /// Get email webhook editor values
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="commseqUuid"></param>
        /// <returns>Task of ApiResponse (EmailWebhookEditorValuesResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<EmailWebhookEditorValuesResponse>> GetEmailCommseqWebhookEditorValuesAsyncWithHttpInfo (int? storefrontOid, string commseqUuid);
        /// <summary>
        /// Get email commseqs
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <returns>Task of EmailCommseqsResponse</returns>
        System.Threading.Tasks.Task<EmailCommseqsResponse> GetEmailCommseqsAsync (int? storefrontOid);

        /// <summary>
        /// Get email commseqs
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <returns>Task of ApiResponse (EmailCommseqsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<EmailCommseqsResponse>> GetEmailCommseqsAsyncWithHttpInfo (int? storefrontOid);
        /// <summary>
        /// Get customers editor URL
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="emailCustomerUuid"></param>
        /// <returns>Task of EmailCustomerEditorUrlResponse</returns>
        System.Threading.Tasks.Task<EmailCustomerEditorUrlResponse> GetEmailCustomerEditorUrlAsync (int? storefrontOid, string emailCustomerUuid);

        /// <summary>
        /// Get customers editor URL
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="emailCustomerUuid"></param>
        /// <returns>Task of ApiResponse (EmailCustomerEditorUrlResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<EmailCustomerEditorUrlResponse>> GetEmailCustomerEditorUrlAsyncWithHttpInfo (int? storefrontOid, string emailCustomerUuid);
        /// <summary>
        /// Get email customers
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="pageNumber"> (optional)</param>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="searchEmailPrefix"> (optional)</param>
        /// <returns>Task of EmailCustomersResponse</returns>
        System.Threading.Tasks.Task<EmailCustomersResponse> GetEmailCustomersAsync (int? storefrontOid, int? pageNumber = null, int? pageSize = null, string searchEmailPrefix = null);

        /// <summary>
        /// Get email customers
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="pageNumber"> (optional)</param>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="searchEmailPrefix"> (optional)</param>
        /// <returns>Task of ApiResponse (EmailCustomersResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<EmailCustomersResponse>> GetEmailCustomersAsyncWithHttpInfo (int? storefrontOid, int? pageNumber = null, int? pageSize = null, string searchEmailPrefix = null);
        /// <summary>
        /// Get email dashboard activity
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="lastRecords"> (optional)</param>
        /// <returns>Task of EmailDashboardActivityResponse</returns>
        System.Threading.Tasks.Task<EmailDashboardActivityResponse> GetEmailDashboardActivityAsync (int? storefrontOid, int? lastRecords = null);

        /// <summary>
        /// Get email dashboard activity
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="lastRecords"> (optional)</param>
        /// <returns>Task of ApiResponse (EmailDashboardActivityResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<EmailDashboardActivityResponse>> GetEmailDashboardActivityAsyncWithHttpInfo (int? storefrontOid, int? lastRecords = null);
        /// <summary>
        /// Get dashboard stats
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="days"> (optional)</param>
        /// <returns>Task of EmailDashboardStatsResponse</returns>
        System.Threading.Tasks.Task<EmailDashboardStatsResponse> GetEmailDashboardStatsAsync (int? storefrontOid, int? days = null);

        /// <summary>
        /// Get dashboard stats
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="days"> (optional)</param>
        /// <returns>Task of ApiResponse (EmailDashboardStatsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<EmailDashboardStatsResponse>> GetEmailDashboardStatsAsyncWithHttpInfo (int? storefrontOid, int? days = null);
        /// <summary>
        /// Get email dispatch logs
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="commseqUuid"></param>
        /// <param name="commseqStepUuid"></param>
        /// <returns>Task of EmailCommseqStepLogsResponse</returns>
        System.Threading.Tasks.Task<EmailCommseqStepLogsResponse> GetEmailDispatchLogsAsync (int? storefrontOid, string commseqUuid, string commseqStepUuid);

        /// <summary>
        /// Get email dispatch logs
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="commseqUuid"></param>
        /// <param name="commseqStepUuid"></param>
        /// <returns>Task of ApiResponse (EmailCommseqStepLogsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<EmailCommseqStepLogsResponse>> GetEmailDispatchLogsAsyncWithHttpInfo (int? storefrontOid, string commseqUuid, string commseqStepUuid);
        /// <summary>
        /// Get email email
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="commseqEmailUuid"></param>
        /// <returns>Task of EmailCommseqEmailResponse</returns>
        System.Threading.Tasks.Task<EmailCommseqEmailResponse> GetEmailEmailAsync (int? storefrontOid, string commseqEmailUuid);

        /// <summary>
        /// Get email email
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="commseqEmailUuid"></param>
        /// <returns>Task of ApiResponse (EmailCommseqEmailResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<EmailCommseqEmailResponse>> GetEmailEmailAsyncWithHttpInfo (int? storefrontOid, string commseqEmailUuid);
        /// <summary>
        /// Get email email clicks
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="commseqUuid"></param>
        /// <param name="commseqStepUuid"></param>
        /// <param name="commseqEmailUuid"></param>
        /// <param name="days"> (optional)</param>
        /// <returns>Task of EmailClicksResponse</returns>
        System.Threading.Tasks.Task<EmailClicksResponse> GetEmailEmailClicksAsync (int? storefrontOid, string commseqUuid, string commseqStepUuid, string commseqEmailUuid, int? days = null);

        /// <summary>
        /// Get email email clicks
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="commseqUuid"></param>
        /// <param name="commseqStepUuid"></param>
        /// <param name="commseqEmailUuid"></param>
        /// <param name="days"> (optional)</param>
        /// <returns>Task of ApiResponse (EmailClicksResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<EmailClicksResponse>> GetEmailEmailClicksAsyncWithHttpInfo (int? storefrontOid, string commseqUuid, string commseqStepUuid, string commseqEmailUuid, int? days = null);
        /// <summary>
        /// Get email order customer editor url
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="commseqEmailUuid"></param>
        /// <param name="orderId"></param>
        /// <returns>Task of EmailCustomerEditorUrlResponse</returns>
        System.Threading.Tasks.Task<EmailCustomerEditorUrlResponse> GetEmailEmailCustomerEditorUrlAsync (int? storefrontOid, string commseqEmailUuid, string orderId);

        /// <summary>
        /// Get email order customer editor url
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="commseqEmailUuid"></param>
        /// <param name="orderId"></param>
        /// <returns>Task of ApiResponse (EmailCustomerEditorUrlResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<EmailCustomerEditorUrlResponse>> GetEmailEmailCustomerEditorUrlAsyncWithHttpInfo (int? storefrontOid, string commseqEmailUuid, string orderId);
        /// <summary>
        /// Get email email orders
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="commseqUuid"></param>
        /// <param name="commseqStepUuid"></param>
        /// <param name="commseqEmailUuid"></param>
        /// <param name="days"> (optional)</param>
        /// <returns>Task of EmailOrdersResponse</returns>
        System.Threading.Tasks.Task<EmailOrdersResponse> GetEmailEmailOrdersAsync (int? storefrontOid, string commseqUuid, string commseqStepUuid, string commseqEmailUuid, int? days = null);

        /// <summary>
        /// Get email email orders
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="commseqUuid"></param>
        /// <param name="commseqStepUuid"></param>
        /// <param name="commseqEmailUuid"></param>
        /// <param name="days"> (optional)</param>
        /// <returns>Task of ApiResponse (EmailOrdersResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<EmailOrdersResponse>> GetEmailEmailOrdersAsyncWithHttpInfo (int? storefrontOid, string commseqUuid, string commseqStepUuid, string commseqEmailUuid, int? days = null);
        /// <summary>
        /// Get email emails
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <returns>Task of EmailCommseqEmailsResponse</returns>
        System.Threading.Tasks.Task<EmailCommseqEmailsResponse> GetEmailEmailsAsync (int? storefrontOid);

        /// <summary>
        /// Get email emails
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <returns>Task of ApiResponse (EmailCommseqEmailsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<EmailCommseqEmailsResponse>> GetEmailEmailsAsyncWithHttpInfo (int? storefrontOid);
        /// <summary>
        /// Get email emails multiple
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="emailCommseqEmailsRequest">Request of email uuids</param>
        /// <returns>Task of EmailCommseqEmailsResponse</returns>
        System.Threading.Tasks.Task<EmailCommseqEmailsResponse> GetEmailEmailsMultipleAsync (int? storefrontOid, EmailCommseqEmailsRequest emailCommseqEmailsRequest);

        /// <summary>
        /// Get email emails multiple
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="emailCommseqEmailsRequest">Request of email uuids</param>
        /// <returns>Task of ApiResponse (EmailCommseqEmailsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<EmailCommseqEmailsResponse>> GetEmailEmailsMultipleAsyncWithHttpInfo (int? storefrontOid, EmailCommseqEmailsRequest emailCommseqEmailsRequest);
        /// <summary>
        /// Get email flow
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="emailFlowUuid"></param>
        /// <returns>Task of EmailFlowResponse</returns>
        System.Threading.Tasks.Task<EmailFlowResponse> GetEmailFlowAsync (int? storefrontOid, string emailFlowUuid);

        /// <summary>
        /// Get email flow
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="emailFlowUuid"></param>
        /// <returns>Task of ApiResponse (EmailFlowResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<EmailFlowResponse>> GetEmailFlowAsyncWithHttpInfo (int? storefrontOid, string emailFlowUuid);
        /// <summary>
        /// Get email flow folder
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="emailFlowFolderUuid"></param>
        /// <returns>Task of EmailFlowFolderResponse</returns>
        System.Threading.Tasks.Task<EmailFlowFolderResponse> GetEmailFlowFolderAsync (int? storefrontOid, string emailFlowFolderUuid);

        /// <summary>
        /// Get email flow folder
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="emailFlowFolderUuid"></param>
        /// <returns>Task of ApiResponse (EmailFlowFolderResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<EmailFlowFolderResponse>> GetEmailFlowFolderAsyncWithHttpInfo (int? storefrontOid, string emailFlowFolderUuid);
        /// <summary>
        /// Get email flow folders
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <returns>Task of EmailFlowFoldersResponse</returns>
        System.Threading.Tasks.Task<EmailFlowFoldersResponse> GetEmailFlowFoldersAsync (int? storefrontOid);

        /// <summary>
        /// Get email flow folders
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <returns>Task of ApiResponse (EmailFlowFoldersResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<EmailFlowFoldersResponse>> GetEmailFlowFoldersAsyncWithHttpInfo (int? storefrontOid);
        /// <summary>
        /// Get email flow screenshots
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="emailFlowUuid"></param>
        /// <returns>Task of ScreenshotsResponse</returns>
        System.Threading.Tasks.Task<ScreenshotsResponse> GetEmailFlowScreenshotsAsync (int? storefrontOid, string emailFlowUuid);

        /// <summary>
        /// Get email flow screenshots
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="emailFlowUuid"></param>
        /// <returns>Task of ApiResponse (ScreenshotsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ScreenshotsResponse>> GetEmailFlowScreenshotsAsyncWithHttpInfo (int? storefrontOid, string emailFlowUuid);
        /// <summary>
        /// Get email flows
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <returns>Task of EmailFlowsResponse</returns>
        System.Threading.Tasks.Task<EmailFlowsResponse> GetEmailFlowsAsync (int? storefrontOid);

        /// <summary>
        /// Get email flows
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <returns>Task of ApiResponse (EmailFlowsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<EmailFlowsResponse>> GetEmailFlowsAsyncWithHttpInfo (int? storefrontOid);
        /// <summary>
        /// Get email globalsettings
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of EmailGlobalSettingsResponse</returns>
        System.Threading.Tasks.Task<EmailGlobalSettingsResponse> GetEmailGlobalSettingsAsync ();

        /// <summary>
        /// Get email globalsettings
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (EmailGlobalSettingsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<EmailGlobalSettingsResponse>> GetEmailGlobalSettingsAsyncWithHttpInfo ();
        /// <summary>
        /// Get email list
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="emailListUuid"></param>
        /// <returns>Task of EmailListResponse</returns>
        System.Threading.Tasks.Task<EmailListResponse> GetEmailListAsync (int? storefrontOid, string emailListUuid);

        /// <summary>
        /// Get email list
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="emailListUuid"></param>
        /// <returns>Task of ApiResponse (EmailListResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<EmailListResponse>> GetEmailListAsyncWithHttpInfo (int? storefrontOid, string emailListUuid);
        /// <summary>
        /// Get email list customer editor url
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="emailListUuid"></param>
        /// <param name="emailCustomerUuid"></param>
        /// <returns>Task of EmailCustomerEditorUrlResponse</returns>
        System.Threading.Tasks.Task<EmailCustomerEditorUrlResponse> GetEmailListCustomerEditorUrlAsync (int? storefrontOid, string emailListUuid, string emailCustomerUuid);

        /// <summary>
        /// Get email list customer editor url
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="emailListUuid"></param>
        /// <param name="emailCustomerUuid"></param>
        /// <returns>Task of ApiResponse (EmailCustomerEditorUrlResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<EmailCustomerEditorUrlResponse>> GetEmailListCustomerEditorUrlAsyncWithHttpInfo (int? storefrontOid, string emailListUuid, string emailCustomerUuid);
        /// <summary>
        /// Get email list customers
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="emailListUuid"></param>
        /// <param name="pageNumber"> (optional)</param>
        /// <param name="pageSize"> (optional)</param>
        /// <returns>Task of EmailListCustomersResponse</returns>
        System.Threading.Tasks.Task<EmailListCustomersResponse> GetEmailListCustomersAsync (int? storefrontOid, string emailListUuid, int? pageNumber = null, int? pageSize = null);

        /// <summary>
        /// Get email list customers
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="emailListUuid"></param>
        /// <param name="pageNumber"> (optional)</param>
        /// <param name="pageSize"> (optional)</param>
        /// <returns>Task of ApiResponse (EmailListCustomersResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<EmailListCustomersResponse>> GetEmailListCustomersAsyncWithHttpInfo (int? storefrontOid, string emailListUuid, int? pageNumber = null, int? pageSize = null);
        /// <summary>
        /// Get email campaign folder
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="emailListSegmentFolderUuid"></param>
        /// <returns>Task of EmailListSegmentFolderResponse</returns>
        System.Threading.Tasks.Task<EmailListSegmentFolderResponse> GetEmailListSegmentFolderAsync (int? storefrontOid, string emailListSegmentFolderUuid);

        /// <summary>
        /// Get email campaign folder
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="emailListSegmentFolderUuid"></param>
        /// <returns>Task of ApiResponse (EmailListSegmentFolderResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<EmailListSegmentFolderResponse>> GetEmailListSegmentFolderAsyncWithHttpInfo (int? storefrontOid, string emailListSegmentFolderUuid);
        /// <summary>
        /// Get email campaign folders
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <returns>Task of EmailListSegmentFoldersResponse</returns>
        System.Threading.Tasks.Task<EmailListSegmentFoldersResponse> GetEmailListSegmentFoldersAsync (int? storefrontOid);

        /// <summary>
        /// Get email campaign folders
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <returns>Task of ApiResponse (EmailListSegmentFoldersResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<EmailListSegmentFoldersResponse>> GetEmailListSegmentFoldersAsyncWithHttpInfo (int? storefrontOid);
        /// <summary>
        /// Get email lists
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <returns>Task of EmailListsResponse</returns>
        System.Threading.Tasks.Task<EmailListsResponse> GetEmailListsAsync (int? storefrontOid);

        /// <summary>
        /// Get email lists
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <returns>Task of ApiResponse (EmailListsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<EmailListsResponse>> GetEmailListsAsyncWithHttpInfo (int? storefrontOid);
        /// <summary>
        /// Get email performance
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <returns>Task of EmailPerformanceResponse</returns>
        System.Threading.Tasks.Task<EmailPerformanceResponse> GetEmailPerformanceAsync (int? storefrontOid);

        /// <summary>
        /// Get email performance
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <returns>Task of ApiResponse (EmailPerformanceResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<EmailPerformanceResponse>> GetEmailPerformanceAsyncWithHttpInfo (int? storefrontOid);
        /// <summary>
        /// Get email plan
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <returns>Task of EmailPlanResponse</returns>
        System.Threading.Tasks.Task<EmailPlanResponse> GetEmailPlanAsync (int? storefrontOid);

        /// <summary>
        /// Get email plan
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <returns>Task of ApiResponse (EmailPlanResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<EmailPlanResponse>> GetEmailPlanAsyncWithHttpInfo (int? storefrontOid);
        /// <summary>
        /// Get email postcard
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="commseqPostcardUuid"></param>
        /// <returns>Task of EmailCommseqPostcardResponse</returns>
        System.Threading.Tasks.Task<EmailCommseqPostcardResponse> GetEmailPostcardAsync (int? storefrontOid, string commseqPostcardUuid);

        /// <summary>
        /// Get email postcard
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="commseqPostcardUuid"></param>
        /// <returns>Task of ApiResponse (EmailCommseqPostcardResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<EmailCommseqPostcardResponse>> GetEmailPostcardAsyncWithHttpInfo (int? storefrontOid, string commseqPostcardUuid);
        /// <summary>
        /// Get email postcards
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <returns>Task of EmailCommseqPostcardsResponse</returns>
        System.Threading.Tasks.Task<EmailCommseqPostcardsResponse> GetEmailPostcardsAsync (int? storefrontOid);

        /// <summary>
        /// Get email postcards
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <returns>Task of ApiResponse (EmailCommseqPostcardsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<EmailCommseqPostcardsResponse>> GetEmailPostcardsAsyncWithHttpInfo (int? storefrontOid);
        /// <summary>
        /// Get email postcards multiple
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="emailCommseqPostcardsRequest">Request of postcard uuids</param>
        /// <returns>Task of EmailCommseqPostcardsResponse</returns>
        System.Threading.Tasks.Task<EmailCommseqPostcardsResponse> GetEmailPostcardsMultipleAsync (int? storefrontOid, EmailCommseqPostcardsRequest emailCommseqPostcardsRequest);

        /// <summary>
        /// Get email postcards multiple
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="emailCommseqPostcardsRequest">Request of postcard uuids</param>
        /// <returns>Task of ApiResponse (EmailCommseqPostcardsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<EmailCommseqPostcardsResponse>> GetEmailPostcardsMultipleAsyncWithHttpInfo (int? storefrontOid, EmailCommseqPostcardsRequest emailCommseqPostcardsRequest);
        /// <summary>
        /// Get email segment
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="emailSegmentUuid"></param>
        /// <returns>Task of EmailSegmentResponse</returns>
        System.Threading.Tasks.Task<EmailSegmentResponse> GetEmailSegmentAsync (int? storefrontOid, string emailSegmentUuid);

        /// <summary>
        /// Get email segment
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="emailSegmentUuid"></param>
        /// <returns>Task of ApiResponse (EmailSegmentResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<EmailSegmentResponse>> GetEmailSegmentAsyncWithHttpInfo (int? storefrontOid, string emailSegmentUuid);
        /// <summary>
        /// Get email segment customers editor URL
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="emailSegmentUuid"></param>
        /// <param name="emailCustomerUuid"></param>
        /// <returns>Task of EmailCustomerEditorUrlResponse</returns>
        System.Threading.Tasks.Task<EmailCustomerEditorUrlResponse> GetEmailSegmentCustomerEditorUrlAsync (int? storefrontOid, string emailSegmentUuid, string emailCustomerUuid);

        /// <summary>
        /// Get email segment customers editor URL
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="emailSegmentUuid"></param>
        /// <param name="emailCustomerUuid"></param>
        /// <returns>Task of ApiResponse (EmailCustomerEditorUrlResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<EmailCustomerEditorUrlResponse>> GetEmailSegmentCustomerEditorUrlAsyncWithHttpInfo (int? storefrontOid, string emailSegmentUuid, string emailCustomerUuid);
        /// <summary>
        /// Get email segment customers
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="emailSegmentUuid"></param>
        /// <param name="pageNumber"> (optional)</param>
        /// <param name="pageSize"> (optional)</param>
        /// <returns>Task of EmailSegmentCustomersResponse</returns>
        System.Threading.Tasks.Task<EmailSegmentCustomersResponse> GetEmailSegmentCustomersAsync (int? storefrontOid, string emailSegmentUuid, int? pageNumber = null, int? pageSize = null);

        /// <summary>
        /// Get email segment customers
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="emailSegmentUuid"></param>
        /// <param name="pageNumber"> (optional)</param>
        /// <param name="pageSize"> (optional)</param>
        /// <returns>Task of ApiResponse (EmailSegmentCustomersResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<EmailSegmentCustomersResponse>> GetEmailSegmentCustomersAsyncWithHttpInfo (int? storefrontOid, string emailSegmentUuid, int? pageNumber = null, int? pageSize = null);
        /// <summary>
        /// Get email segments
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <returns>Task of EmailSegmentsResponse</returns>
        System.Threading.Tasks.Task<EmailSegmentsResponse> GetEmailSegmentsAsync (int? storefrontOid);

        /// <summary>
        /// Get email segments
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <returns>Task of ApiResponse (EmailSegmentsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<EmailSegmentsResponse>> GetEmailSegmentsAsyncWithHttpInfo (int? storefrontOid);
        /// <summary>
        /// Get email sending domain
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="domain"></param>
        /// <returns>Task of EmailSendingDomainResponse</returns>
        System.Threading.Tasks.Task<EmailSendingDomainResponse> GetEmailSendingDomainAsync (string domain);

        /// <summary>
        /// Get email sending domain
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="domain"></param>
        /// <returns>Task of ApiResponse (EmailSendingDomainResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<EmailSendingDomainResponse>> GetEmailSendingDomainAsyncWithHttpInfo (string domain);
        /// <summary>
        /// Get email sending domain status
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="domain"></param>
        /// <returns>Task of EmailSendingDomainResponse</returns>
        System.Threading.Tasks.Task<EmailSendingDomainResponse> GetEmailSendingDomainStatusAsync (string domain);

        /// <summary>
        /// Get email sending domain status
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="domain"></param>
        /// <returns>Task of ApiResponse (EmailSendingDomainResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<EmailSendingDomainResponse>> GetEmailSendingDomainStatusAsyncWithHttpInfo (string domain);
        /// <summary>
        /// Get email sending domains
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of EmailSendingDomainsResponse</returns>
        System.Threading.Tasks.Task<EmailSendingDomainsResponse> GetEmailSendingDomainsAsync ();

        /// <summary>
        /// Get email sending domains
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (EmailSendingDomainsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<EmailSendingDomainsResponse>> GetEmailSendingDomainsAsyncWithHttpInfo ();
        /// <summary>
        /// Get email settings
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <returns>Task of EmailSettingsResponse</returns>
        System.Threading.Tasks.Task<EmailSettingsResponse> GetEmailSettingsAsync (int? storefrontOid);

        /// <summary>
        /// Get email settings
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <returns>Task of ApiResponse (EmailSettingsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<EmailSettingsResponse>> GetEmailSettingsAsyncWithHttpInfo (int? storefrontOid);
        /// <summary>
        /// Get email template
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="emailTemplateOid"></param>
        /// <returns>Task of EmailTemplate</returns>
        System.Threading.Tasks.Task<EmailTemplate> GetEmailTemplateAsync (int? storefrontOid, int? emailTemplateOid);

        /// <summary>
        /// Get email template
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="emailTemplateOid"></param>
        /// <returns>Task of ApiResponse (EmailTemplate)</returns>
        System.Threading.Tasks.Task<ApiResponse<EmailTemplate>> GetEmailTemplateAsyncWithHttpInfo (int? storefrontOid, int? emailTemplateOid);
        /// <summary>
        /// Get email templates
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="triggerType"> (optional)</param>
        /// <returns>Task of EmailTemplatesResponse</returns>
        System.Threading.Tasks.Task<EmailTemplatesResponse> GetEmailTemplatesAsync (int? storefrontOid, string triggerType = null);

        /// <summary>
        /// Get email templates
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="triggerType"> (optional)</param>
        /// <returns>Task of ApiResponse (EmailTemplatesResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<EmailTemplatesResponse>> GetEmailTemplatesAsyncWithHttpInfo (int? storefrontOid, string triggerType = null);
        /// <summary>
        /// Get a list of third party email providers
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <returns>Task of EmailThirdPartyProvidersResponse</returns>
        System.Threading.Tasks.Task<EmailThirdPartyProvidersResponse> GetEmailThirdPartyProvidersAsync (int? storefrontOid);

        /// <summary>
        /// Get a list of third party email providers
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <returns>Task of ApiResponse (EmailThirdPartyProvidersResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<EmailThirdPartyProvidersResponse>> GetEmailThirdPartyProvidersAsyncWithHttpInfo (int? storefrontOid);
        /// <summary>
        /// Get experiments
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <returns>Task of ExperimentsResponse</returns>
        System.Threading.Tasks.Task<ExperimentsResponse> GetExperimentsAsync (int? storefrontOid);

        /// <summary>
        /// Get experiments
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <returns>Task of ApiResponse (ExperimentsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ExperimentsResponse>> GetExperimentsAsyncWithHttpInfo (int? storefrontOid);
        /// <summary>
        /// Get screen recording heatmap
        /// </summary>
        /// <remarks>
        /// Get screen recording heatmap 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="query">Query</param>
        /// <returns>Task of ScreenRecordingHeatmapResponse</returns>
        System.Threading.Tasks.Task<ScreenRecordingHeatmapResponse> GetHeatmapAsync (int? storefrontOid, ScreenRecordingHeatmapRequest query);

        /// <summary>
        /// Get screen recording heatmap
        /// </summary>
        /// <remarks>
        /// Get screen recording heatmap 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="query">Query</param>
        /// <returns>Task of ApiResponse (ScreenRecordingHeatmapResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ScreenRecordingHeatmapResponse>> GetHeatmapAsyncWithHttpInfo (int? storefrontOid, ScreenRecordingHeatmapRequest query);
        /// <summary>
        /// Get screen recording heatmap index
        /// </summary>
        /// <remarks>
        /// Get screen recording heatmap index 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="query">Query</param>
        /// <param name="limit">The maximum number of records to return on this one API call. (Default 100, Max 500) (optional, default to 100)</param>
        /// <param name="offset">Pagination of the record set.  Offset is a zero based index. (optional, default to 0)</param>
        /// <param name="sort">The sort order of the items.  See Sorting documentation for examples of using multiple values and sorting by ascending and descending. (optional)</param>
        /// <returns>Task of ScreenRecordingHeatmapIndexResponse</returns>
        System.Threading.Tasks.Task<ScreenRecordingHeatmapIndexResponse> GetHeatmapIndexAsync (int? storefrontOid, ScreenRecordingHeatmapIndexRequest query, int? limit = null, int? offset = null, string sort = null);

        /// <summary>
        /// Get screen recording heatmap index
        /// </summary>
        /// <remarks>
        /// Get screen recording heatmap index 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="query">Query</param>
        /// <param name="limit">The maximum number of records to return on this one API call. (Default 100, Max 500) (optional, default to 100)</param>
        /// <param name="offset">Pagination of the record set.  Offset is a zero based index. (optional, default to 0)</param>
        /// <param name="sort">The sort order of the items.  See Sorting documentation for examples of using multiple values and sorting by ascending and descending. (optional)</param>
        /// <returns>Task of ApiResponse (ScreenRecordingHeatmapIndexResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ScreenRecordingHeatmapIndexResponse>> GetHeatmapIndexAsyncWithHttpInfo (int? storefrontOid, ScreenRecordingHeatmapIndexRequest query, int? limit = null, int? offset = null, string sort = null);
        /// <summary>
        /// Get histogram property names
        /// </summary>
        /// <remarks>
        /// Obtain a list of property names for a given property type 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="propertyType"> (optional)</param>
        /// <returns>Task of EmailHistogramPropertyNamesResponse</returns>
        System.Threading.Tasks.Task<EmailHistogramPropertyNamesResponse> GetHistogramPropertyNamesAsync (int? storefrontOid, string propertyType = null);

        /// <summary>
        /// Get histogram property names
        /// </summary>
        /// <remarks>
        /// Obtain a list of property names for a given property type 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="propertyType"> (optional)</param>
        /// <returns>Task of ApiResponse (EmailHistogramPropertyNamesResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<EmailHistogramPropertyNamesResponse>> GetHistogramPropertyNamesAsyncWithHttpInfo (int? storefrontOid, string propertyType = null);
        /// <summary>
        /// Get histogram property values
        /// </summary>
        /// <remarks>
        /// Obtain a list of property values for a given property name and type 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="propertyName"> (optional)</param>
        /// <param name="propertyType"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <returns>Task of EmailHistogramPropertyValuesResponse</returns>
        System.Threading.Tasks.Task<EmailHistogramPropertyValuesResponse> GetHistogramPropertyValuesAsync (int? storefrontOid, string propertyName = null, string propertyType = null, int? limit = null);

        /// <summary>
        /// Get histogram property values
        /// </summary>
        /// <remarks>
        /// Obtain a list of property values for a given property name and type 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="propertyName"> (optional)</param>
        /// <param name="propertyType"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <returns>Task of ApiResponse (EmailHistogramPropertyValuesResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<EmailHistogramPropertyValuesResponse>> GetHistogramPropertyValuesAsyncWithHttpInfo (int? storefrontOid, string propertyName = null, string propertyType = null, int? limit = null);
        /// <summary>
        /// Get library values used to populate drop down boxes for filtering.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of LibraryFilterValuesResponse</returns>
        System.Threading.Tasks.Task<LibraryFilterValuesResponse> GetLibraryFilterValuesAsync ();

        /// <summary>
        /// Get library values used to populate drop down boxes for filtering.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (LibraryFilterValuesResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<LibraryFilterValuesResponse>> GetLibraryFilterValuesAsyncWithHttpInfo ();
        /// <summary>
        /// Get library item.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="libraryItemOid"></param>
        /// <returns>Task of LibraryItemResponse</returns>
        System.Threading.Tasks.Task<LibraryItemResponse> GetLibraryItemAsync (int? libraryItemOid);

        /// <summary>
        /// Get library item.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="libraryItemOid"></param>
        /// <returns>Task of ApiResponse (LibraryItemResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<LibraryItemResponse>> GetLibraryItemAsyncWithHttpInfo (int? libraryItemOid);
        /// <summary>
        /// Get all published versions for a library item.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="libraryItemOid"></param>
        /// <returns>Task of LibraryItemsResponse</returns>
        System.Threading.Tasks.Task<LibraryItemsResponse> GetLibraryItemPublishedVersionsAsync (int? libraryItemOid);

        /// <summary>
        /// Get all published versions for a library item.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="libraryItemOid"></param>
        /// <returns>Task of ApiResponse (LibraryItemsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<LibraryItemsResponse>> GetLibraryItemPublishedVersionsAsyncWithHttpInfo (int? libraryItemOid);
        /// <summary>
        /// Get screen recording
        /// </summary>
        /// <remarks>
        /// Get screen recording 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="screenRecordingUuid"></param>
        /// <returns>Task of ScreenRecordingResponse</returns>
        System.Threading.Tasks.Task<ScreenRecordingResponse> GetScreenRecordingAsync (int? storefrontOid, string screenRecordingUuid);

        /// <summary>
        /// Get screen recording
        /// </summary>
        /// <remarks>
        /// Get screen recording 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="screenRecordingUuid"></param>
        /// <returns>Task of ApiResponse (ScreenRecordingResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ScreenRecordingResponse>> GetScreenRecordingAsyncWithHttpInfo (int? storefrontOid, string screenRecordingUuid);
        /// <summary>
        /// Get screen recording page view data
        /// </summary>
        /// <remarks>
        /// Get screen recording page view data 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="screenRecordingUuid"></param>
        /// <param name="screenRecordingPageViewUuid"></param>
        /// <returns>Task of ScreenRecordingPageViewDataResponse</returns>
        System.Threading.Tasks.Task<ScreenRecordingPageViewDataResponse> GetScreenRecordingPageViewDataAsync (int? storefrontOid, string screenRecordingUuid, string screenRecordingPageViewUuid);

        /// <summary>
        /// Get screen recording page view data
        /// </summary>
        /// <remarks>
        /// Get screen recording page view data 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="screenRecordingUuid"></param>
        /// <param name="screenRecordingPageViewUuid"></param>
        /// <returns>Task of ApiResponse (ScreenRecordingPageViewDataResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ScreenRecordingPageViewDataResponse>> GetScreenRecordingPageViewDataAsyncWithHttpInfo (int? storefrontOid, string screenRecordingUuid, string screenRecordingPageViewUuid);
        /// <summary>
        /// Get screen recording segment
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="screenRecordingSegmentOid"></param>
        /// <returns>Task of ScreenRecordingSegmentResponse</returns>
        System.Threading.Tasks.Task<ScreenRecordingSegmentResponse> GetScreenRecordingSegmentAsync (int? storefrontOid, int? screenRecordingSegmentOid);

        /// <summary>
        /// Get screen recording segment
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="screenRecordingSegmentOid"></param>
        /// <returns>Task of ApiResponse (ScreenRecordingSegmentResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ScreenRecordingSegmentResponse>> GetScreenRecordingSegmentAsyncWithHttpInfo (int? storefrontOid, int? screenRecordingSegmentOid);
        /// <summary>
        /// Get screen recording segments
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <returns>Task of ScreenRecordingSegmentsResponse</returns>
        System.Threading.Tasks.Task<ScreenRecordingSegmentsResponse> GetScreenRecordingSegmentsAsync (int? storefrontOid);

        /// <summary>
        /// Get screen recording segments
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <returns>Task of ApiResponse (ScreenRecordingSegmentsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ScreenRecordingSegmentsResponse>> GetScreenRecordingSegmentsAsyncWithHttpInfo (int? storefrontOid);
        /// <summary>
        /// Get screen recording settings
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <returns>Task of ScreenRecordingSettingsResponse</returns>
        System.Threading.Tasks.Task<ScreenRecordingSettingsResponse> GetScreenRecordingSettingsAsync (int? storefrontOid);

        /// <summary>
        /// Get screen recording settings
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <returns>Task of ApiResponse (ScreenRecordingSettingsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ScreenRecordingSettingsResponse>> GetScreenRecordingSettingsAsyncWithHttpInfo (int? storefrontOid);
        /// <summary>
        /// Get tags used by screen recording
        /// </summary>
        /// <remarks>
        /// Get tags used by screen recording 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <returns>Task of ScreenRecordingTagsResponse</returns>
        System.Threading.Tasks.Task<ScreenRecordingTagsResponse> GetScreenRecordingTagsAsync (int? storefrontOid);

        /// <summary>
        /// Get tags used by screen recording
        /// </summary>
        /// <remarks>
        /// Get tags used by screen recording 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <returns>Task of ApiResponse (ScreenRecordingTagsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ScreenRecordingTagsResponse>> GetScreenRecordingTagsAsyncWithHttpInfo (int? storefrontOid);
        /// <summary>
        /// Query screen recordings
        /// </summary>
        /// <remarks>
        /// Query screen recordings 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="query">Query</param>
        /// <param name="limit">The maximum number of records to return on this one API call. (Default 100, Max 500) (optional, default to 100)</param>
        /// <param name="offset">Pagination of the record set.  Offset is a zero based index. (optional, default to 0)</param>
        /// <param name="sort">The sort order of the items.  See Sorting documentation for examples of using multiple values and sorting by ascending and descending. (optional)</param>
        /// <returns>Task of ScreenRecordingQueryResponse</returns>
        System.Threading.Tasks.Task<ScreenRecordingQueryResponse> GetScreenRecordingsByQueryAsync (int? storefrontOid, ScreenRecordingQueryRequest query, int? limit = null, int? offset = null, string sort = null);

        /// <summary>
        /// Query screen recordings
        /// </summary>
        /// <remarks>
        /// Query screen recordings 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="query">Query</param>
        /// <param name="limit">The maximum number of records to return on this one API call. (Default 100, Max 500) (optional, default to 100)</param>
        /// <param name="offset">Pagination of the record set.  Offset is a zero based index. (optional, default to 0)</param>
        /// <param name="sort">The sort order of the items.  See Sorting documentation for examples of using multiple values and sorting by ascending and descending. (optional)</param>
        /// <returns>Task of ApiResponse (ScreenRecordingQueryResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ScreenRecordingQueryResponse>> GetScreenRecordingsByQueryAsyncWithHttpInfo (int? storefrontOid, ScreenRecordingQueryRequest query, int? limit = null, int? offset = null, string sort = null);
        /// <summary>
        /// Get screen recordings by segment
        /// </summary>
        /// <remarks>
        /// Get screen recordings by segment 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="screenRecordingSegmentOid"></param>
        /// <param name="limit">The maximum number of records to return on this one API call. (Default 100, Max 500) (optional, default to 100)</param>
        /// <param name="offset">Pagination of the record set.  Offset is a zero based index. (optional, default to 0)</param>
        /// <param name="sort">The sort order of the items.  See Sorting documentation for examples of using multiple values and sorting by ascending and descending. (optional)</param>
        /// <returns>Task of ScreenRecordingQueryResponse</returns>
        System.Threading.Tasks.Task<ScreenRecordingQueryResponse> GetScreenRecordingsBySegmentAsync (int? storefrontOid, int? screenRecordingSegmentOid, int? limit = null, int? offset = null, string sort = null);

        /// <summary>
        /// Get screen recordings by segment
        /// </summary>
        /// <remarks>
        /// Get screen recordings by segment 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="screenRecordingSegmentOid"></param>
        /// <param name="limit">The maximum number of records to return on this one API call. (Default 100, Max 500) (optional, default to 100)</param>
        /// <param name="offset">Pagination of the record set.  Offset is a zero based index. (optional, default to 0)</param>
        /// <param name="sort">The sort order of the items.  See Sorting documentation for examples of using multiple values and sorting by ascending and descending. (optional)</param>
        /// <returns>Task of ApiResponse (ScreenRecordingQueryResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ScreenRecordingQueryResponse>> GetScreenRecordingsBySegmentAsyncWithHttpInfo (int? storefrontOid, int? screenRecordingSegmentOid, int? limit = null, int? offset = null, string sort = null);
        /// <summary>
        /// Retrieve pricing tiers
        /// </summary>
        /// <remarks>
        /// Retrieves the pricing tiers 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="expand">The object expansion to perform on the result.  See documentation for examples (optional)</param>
        /// <returns>Task of PricingTiersResponse</returns>
        System.Threading.Tasks.Task<PricingTiersResponse> GetStoreFrontPricingTiersAsync (string expand = null);

        /// <summary>
        /// Retrieve pricing tiers
        /// </summary>
        /// <remarks>
        /// Retrieves the pricing tiers 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="expand">The object expansion to perform on the result.  See documentation for examples (optional)</param>
        /// <returns>Task of ApiResponse (PricingTiersResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<PricingTiersResponse>> GetStoreFrontPricingTiersAsyncWithHttpInfo (string expand = null);
        /// <summary>
        /// Get thumbnail parameters
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="thumbnailParameters">Thumbnail Parameters</param>
        /// <returns>Task of ThumbnailParametersResponse</returns>
        System.Threading.Tasks.Task<ThumbnailParametersResponse> GetThumbnailParametersAsync (ThumbnailParametersRequest thumbnailParameters);

        /// <summary>
        /// Get thumbnail parameters
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="thumbnailParameters">Thumbnail Parameters</param>
        /// <returns>Task of ApiResponse (ThumbnailParametersResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ThumbnailParametersResponse>> GetThumbnailParametersAsyncWithHttpInfo (ThumbnailParametersRequest thumbnailParameters);
        /// <summary>
        /// Gets a transaction email object
        /// </summary>
        /// <remarks>
        /// Fetch a transactional email 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="emailId"></param>
        /// <returns>Task of TransactionEmailResponse</returns>
        System.Threading.Tasks.Task<TransactionEmailResponse> GetTransactionEmailAsync (int? storefrontOid, string emailId);

        /// <summary>
        /// Gets a transaction email object
        /// </summary>
        /// <remarks>
        /// Fetch a transactional email 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="emailId"></param>
        /// <returns>Task of ApiResponse (TransactionEmailResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TransactionEmailResponse>> GetTransactionEmailAsyncWithHttpInfo (int? storefrontOid, string emailId);
        /// <summary>
        /// Gets a list of transaction email names
        /// </summary>
        /// <remarks>
        /// Obtain a list of all transactional emails and return back just their names 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <returns>Task of TransactionEmailListResponse</returns>
        System.Threading.Tasks.Task<TransactionEmailListResponse> GetTransactionEmailListAsync (int? storefrontOid);

        /// <summary>
        /// Gets a list of transaction email names
        /// </summary>
        /// <remarks>
        /// Obtain a list of all transactional emails and return back just their names 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <returns>Task of ApiResponse (TransactionEmailListResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TransactionEmailListResponse>> GetTransactionEmailListAsyncWithHttpInfo (int? storefrontOid);
        /// <summary>
        /// Get transactional email screenshots
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="emailId"></param>
        /// <returns>Task of ScreenshotsResponse</returns>
        System.Threading.Tasks.Task<ScreenshotsResponse> GetTransactionEmailScreenshotsAsync (int? storefrontOid, string emailId);

        /// <summary>
        /// Get transactional email screenshots
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="emailId"></param>
        /// <returns>Task of ApiResponse (ScreenshotsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ScreenshotsResponse>> GetTransactionEmailScreenshotsAsyncWithHttpInfo (int? storefrontOid, string emailId);
        /// <summary>
        /// Get Twilio account
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="espTwilioUuid"></param>
        /// <returns>Task of TwilioResponse</returns>
        System.Threading.Tasks.Task<TwilioResponse> GetTwilioAccountAsync (string espTwilioUuid);

        /// <summary>
        /// Get Twilio account
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="espTwilioUuid"></param>
        /// <returns>Task of ApiResponse (TwilioResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TwilioResponse>> GetTwilioAccountAsyncWithHttpInfo (string espTwilioUuid);
        /// <summary>
        /// Get all Twilio accounts
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of TwiliosResponse</returns>
        System.Threading.Tasks.Task<TwiliosResponse> GetTwilioAccountsAsync ();

        /// <summary>
        /// Get all Twilio accounts
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (TwiliosResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TwiliosResponse>> GetTwilioAccountsAsyncWithHttpInfo ();
        /// <summary>
        /// Globally unsubscribe a customer
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="unsubscribe">Unsubscribe</param>
        /// <returns>Task of EmailGlobalUnsubscribeResponse</returns>
        System.Threading.Tasks.Task<EmailGlobalUnsubscribeResponse> GlobalUnsubscribeAsync (int? storefrontOid, EmailGlobalUnsubscribeRequest unsubscribe);

        /// <summary>
        /// Globally unsubscribe a customer
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="unsubscribe">Unsubscribe</param>
        /// <returns>Task of ApiResponse (EmailGlobalUnsubscribeResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<EmailGlobalUnsubscribeResponse>> GlobalUnsubscribeAsyncWithHttpInfo (int? storefrontOid, EmailGlobalUnsubscribeRequest unsubscribe);
        /// <summary>
        /// Import a third party provider list
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="importRequest">lists to import</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ImportEmailThirdPartyProviderListAsync (int? storefrontOid, EmailThirdPartyListImportRequest importRequest);

        /// <summary>
        /// Import a third party provider list
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="importRequest">lists to import</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ImportEmailThirdPartyProviderListAsyncWithHttpInfo (int? storefrontOid, EmailThirdPartyListImportRequest importRequest);
        /// <summary>
        /// Insert email campaign
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="emailCampaign">Email campaign</param>
        /// <returns>Task of EmailCampaignResponse</returns>
        System.Threading.Tasks.Task<EmailCampaignResponse> InsertEmailCampaignAsync (int? storefrontOid, EmailCampaign emailCampaign);

        /// <summary>
        /// Insert email campaign
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="emailCampaign">Email campaign</param>
        /// <returns>Task of ApiResponse (EmailCampaignResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<EmailCampaignResponse>> InsertEmailCampaignAsyncWithHttpInfo (int? storefrontOid, EmailCampaign emailCampaign);
        /// <summary>
        /// Insert email campaign folder
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="emailCampaignFolder">Email campaign folder</param>
        /// <returns>Task of EmailCampaignFolderResponse</returns>
        System.Threading.Tasks.Task<EmailCampaignFolderResponse> InsertEmailCampaignFolderAsync (int? storefrontOid, EmailCampaignFolder emailCampaignFolder);

        /// <summary>
        /// Insert email campaign folder
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="emailCampaignFolder">Email campaign folder</param>
        /// <returns>Task of ApiResponse (EmailCampaignFolderResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<EmailCampaignFolderResponse>> InsertEmailCampaignFolderAsyncWithHttpInfo (int? storefrontOid, EmailCampaignFolder emailCampaignFolder);
        /// <summary>
        /// Insert email commseq
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="emailCommseq">Email commseq</param>
        /// <returns>Task of EmailCommseqResponse</returns>
        System.Threading.Tasks.Task<EmailCommseqResponse> InsertEmailCommseqAsync (int? storefrontOid, EmailCommseq emailCommseq);

        /// <summary>
        /// Insert email commseq
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="emailCommseq">Email commseq</param>
        /// <returns>Task of ApiResponse (EmailCommseqResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<EmailCommseqResponse>> InsertEmailCommseqAsyncWithHttpInfo (int? storefrontOid, EmailCommseq emailCommseq);
        /// <summary>
        /// Insert email email
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="emailCommseqEmail">Email email</param>
        /// <returns>Task of EmailCommseqEmailResponse</returns>
        System.Threading.Tasks.Task<EmailCommseqEmailResponse> InsertEmailEmailAsync (int? storefrontOid, EmailCommseqEmail emailCommseqEmail);

        /// <summary>
        /// Insert email email
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="emailCommseqEmail">Email email</param>
        /// <returns>Task of ApiResponse (EmailCommseqEmailResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<EmailCommseqEmailResponse>> InsertEmailEmailAsyncWithHttpInfo (int? storefrontOid, EmailCommseqEmail emailCommseqEmail);
        /// <summary>
        /// Insert email flow
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="emailFlow">Email flow</param>
        /// <returns>Task of EmailFlowResponse</returns>
        System.Threading.Tasks.Task<EmailFlowResponse> InsertEmailFlowAsync (int? storefrontOid, EmailFlow emailFlow);

        /// <summary>
        /// Insert email flow
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="emailFlow">Email flow</param>
        /// <returns>Task of ApiResponse (EmailFlowResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<EmailFlowResponse>> InsertEmailFlowAsyncWithHttpInfo (int? storefrontOid, EmailFlow emailFlow);
        /// <summary>
        /// Insert email flow folder
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="emailFlowFolder">Email flow folder</param>
        /// <returns>Task of EmailFlowFolderResponse</returns>
        System.Threading.Tasks.Task<EmailFlowFolderResponse> InsertEmailFlowFolderAsync (int? storefrontOid, EmailFlowFolder emailFlowFolder);

        /// <summary>
        /// Insert email flow folder
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="emailFlowFolder">Email flow folder</param>
        /// <returns>Task of ApiResponse (EmailFlowFolderResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<EmailFlowFolderResponse>> InsertEmailFlowFolderAsyncWithHttpInfo (int? storefrontOid, EmailFlowFolder emailFlowFolder);
        /// <summary>
        /// Insert email list
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="emailList">Email list</param>
        /// <returns>Task of EmailListResponse</returns>
        System.Threading.Tasks.Task<EmailListResponse> InsertEmailListAsync (int? storefrontOid, EmailList emailList);

        /// <summary>
        /// Insert email list
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="emailList">Email list</param>
        /// <returns>Task of ApiResponse (EmailListResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<EmailListResponse>> InsertEmailListAsyncWithHttpInfo (int? storefrontOid, EmailList emailList);
        /// <summary>
        /// Insert email campaign folder
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="emailListSegmentFolder">Email campaign folder</param>
        /// <returns>Task of EmailListSegmentFolderResponse</returns>
        System.Threading.Tasks.Task<EmailListSegmentFolderResponse> InsertEmailListSegmentFolderAsync (int? storefrontOid, EmailListSegmentFolder emailListSegmentFolder);

        /// <summary>
        /// Insert email campaign folder
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="emailListSegmentFolder">Email campaign folder</param>
        /// <returns>Task of ApiResponse (EmailListSegmentFolderResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<EmailListSegmentFolderResponse>> InsertEmailListSegmentFolderAsyncWithHttpInfo (int? storefrontOid, EmailListSegmentFolder emailListSegmentFolder);
        /// <summary>
        /// Insert email postcard
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="emailCommseqPostcard">Email postcard</param>
        /// <returns>Task of EmailCommseqPostcardResponse</returns>
        System.Threading.Tasks.Task<EmailCommseqPostcardResponse> InsertEmailPostcardAsync (int? storefrontOid, EmailCommseqPostcard emailCommseqPostcard);

        /// <summary>
        /// Insert email postcard
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="emailCommseqPostcard">Email postcard</param>
        /// <returns>Task of ApiResponse (EmailCommseqPostcardResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<EmailCommseqPostcardResponse>> InsertEmailPostcardAsyncWithHttpInfo (int? storefrontOid, EmailCommseqPostcard emailCommseqPostcard);
        /// <summary>
        /// Insert email segment
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="emailSegment">Email segment</param>
        /// <returns>Task of EmailSegmentResponse</returns>
        System.Threading.Tasks.Task<EmailSegmentResponse> InsertEmailSegmentAsync (int? storefrontOid, EmailSegment emailSegment);

        /// <summary>
        /// Insert email segment
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="emailSegment">Email segment</param>
        /// <returns>Task of ApiResponse (EmailSegmentResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<EmailSegmentResponse>> InsertEmailSegmentAsyncWithHttpInfo (int? storefrontOid, EmailSegment emailSegment);
        /// <summary>
        /// Insert screen recording segment
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="segment">Segment</param>
        /// <returns>Task of ScreenRecordingSegmentResponse</returns>
        System.Threading.Tasks.Task<ScreenRecordingSegmentResponse> InsertScreenRecordingSegmentAsync (int? storefrontOid, ScreenRecordingSegment segment);

        /// <summary>
        /// Insert screen recording segment
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="segment">Segment</param>
        /// <returns>Task of ApiResponse (ScreenRecordingSegmentResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ScreenRecordingSegmentResponse>> InsertScreenRecordingSegmentAsyncWithHttpInfo (int? storefrontOid, ScreenRecordingSegment segment);
        /// <summary>
        /// Prepare download of email segment
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="emailSegmentUuid"></param>
        /// <returns>Task of EmailSegmentDownloadPrepareResponse</returns>
        System.Threading.Tasks.Task<EmailSegmentDownloadPrepareResponse> PrepareDownloadEmailSegmentAsync (int? storefrontOid, string emailSegmentUuid);

        /// <summary>
        /// Prepare download of email segment
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="emailSegmentUuid"></param>
        /// <returns>Task of ApiResponse (EmailSegmentDownloadPrepareResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<EmailSegmentDownloadPrepareResponse>> PrepareDownloadEmailSegmentAsyncWithHttpInfo (int? storefrontOid, string emailSegmentUuid);
        /// <summary>
        /// Publish library item.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="libraryItemOid"></param>
        /// <param name="publishLibraryRequest">Publish library item request</param>
        /// <returns>Task of LibraryItemResponse</returns>
        System.Threading.Tasks.Task<LibraryItemResponse> PublishLibraryItemAsync (int? libraryItemOid, PublishLibraryItemRequest publishLibraryRequest);

        /// <summary>
        /// Publish library item.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="libraryItemOid"></param>
        /// <param name="publishLibraryRequest">Publish library item request</param>
        /// <returns>Task of ApiResponse (LibraryItemResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<LibraryItemResponse>> PublishLibraryItemAsyncWithHttpInfo (int? libraryItemOid, PublishLibraryItemRequest publishLibraryRequest);
        /// <summary>
        /// Purchase public library item, which creates a copy of the item in your personal code library
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="libraryItemOid"></param>
        /// <param name="storefrontOid"> (optional)</param>
        /// <returns>Task of LibraryItemResponse</returns>
        System.Threading.Tasks.Task<LibraryItemResponse> PurchaseLibraryItemAsync (int? libraryItemOid, int? storefrontOid = null);

        /// <summary>
        /// Purchase public library item, which creates a copy of the item in your personal code library
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="libraryItemOid"></param>
        /// <param name="storefrontOid"> (optional)</param>
        /// <returns>Task of ApiResponse (LibraryItemResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<LibraryItemResponse>> PurchaseLibraryItemAsyncWithHttpInfo (int? libraryItemOid, int? storefrontOid = null);
        /// <summary>
        /// Release email communication sequence customers waiting at the specified step
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="commseqUuid"></param>
        /// <param name="commseqStepUuid"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ReleaseEmailCommseqStepWaitingAsync (int? storefrontOid, string commseqUuid, string commseqStepUuid);

        /// <summary>
        /// Release email communication sequence customers waiting at the specified step
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="commseqUuid"></param>
        /// <param name="commseqStepUuid"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ReleaseEmailCommseqStepWaitingAsyncWithHttpInfo (int? storefrontOid, string commseqUuid, string commseqStepUuid);
        /// <summary>
        /// Request a review of an email
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="commseqEmailUuid"></param>
        /// <param name="emailCommseqEmailReviewRequest">Email commseq email review request</param>
        /// <returns>Task of EmailCommseqEmailSendTestResponse</returns>
        System.Threading.Tasks.Task<EmailCommseqEmailSendTestResponse> ReviewAsync (int? storefrontOid, string commseqEmailUuid, EmailCommseqEmailSendTestRequest emailCommseqEmailReviewRequest);

        /// <summary>
        /// Request a review of an email
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="commseqEmailUuid"></param>
        /// <param name="emailCommseqEmailReviewRequest">Email commseq email review request</param>
        /// <returns>Task of ApiResponse (EmailCommseqEmailSendTestResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<EmailCommseqEmailSendTestResponse>> ReviewAsyncWithHttpInfo (int? storefrontOid, string commseqEmailUuid, EmailCommseqEmailSendTestRequest emailCommseqEmailReviewRequest);
        /// <summary>
        /// Searches for all matching values
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="category"> (optional)</param>
        /// <param name="matches"> (optional)</param>
        /// <param name="storefrontOid"> (optional)</param>
        /// <param name="maxHits"> (optional)</param>
        /// <param name="subcategory"> (optional)</param>
        /// <returns>Task of LookupResponse</returns>
        System.Threading.Tasks.Task<LookupResponse> SearchAsync (string category = null, string matches = null, string storefrontOid = null, int? maxHits = null, string subcategory = null);

        /// <summary>
        /// Searches for all matching values
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="category"> (optional)</param>
        /// <param name="matches"> (optional)</param>
        /// <param name="storefrontOid"> (optional)</param>
        /// <param name="maxHits"> (optional)</param>
        /// <param name="subcategory"> (optional)</param>
        /// <returns>Task of ApiResponse (LookupResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<LookupResponse>> SearchAsyncWithHttpInfo (string category = null, string matches = null, string storefrontOid = null, int? maxHits = null, string subcategory = null);
        /// <summary>
        /// Searches for all matching values (using POST)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="lookupRequest">LookupRequest</param>
        /// <returns>Task of LookupResponse</returns>
        System.Threading.Tasks.Task<LookupResponse> Search2Async (LookupRequest lookupRequest);

        /// <summary>
        /// Searches for all matching values (using POST)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="lookupRequest">LookupRequest</param>
        /// <returns>Task of ApiResponse (LookupResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<LookupResponse>> Search2AsyncWithHttpInfo (LookupRequest lookupRequest);
        /// <summary>
        /// Search email list customers
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="emailListUuid"></param>
        /// <param name="startsWith"> (optional)</param>
        /// <returns>Task of EmailListCustomersResponse</returns>
        System.Threading.Tasks.Task<EmailListCustomersResponse> SearchEmailListCustomersAsync (int? storefrontOid, string emailListUuid, string startsWith = null);

        /// <summary>
        /// Search email list customers
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="emailListUuid"></param>
        /// <param name="startsWith"> (optional)</param>
        /// <returns>Task of ApiResponse (EmailListCustomersResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<EmailListCustomersResponse>> SearchEmailListCustomersAsyncWithHttpInfo (int? storefrontOid, string emailListUuid, string startsWith = null);
        /// <summary>
        /// Search email segment customers
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="emailSegmentUuid"></param>
        /// <param name="startsWith"> (optional)</param>
        /// <returns>Task of EmailSegmentCustomersResponse</returns>
        System.Threading.Tasks.Task<EmailSegmentCustomersResponse> SearchEmailSegmentCustomersAsync (int? storefrontOid, string emailSegmentUuid, string startsWith = null);

        /// <summary>
        /// Search email segment customers
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="emailSegmentUuid"></param>
        /// <param name="startsWith"> (optional)</param>
        /// <returns>Task of ApiResponse (EmailSegmentCustomersResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<EmailSegmentCustomersResponse>> SearchEmailSegmentCustomersAsyncWithHttpInfo (int? storefrontOid, string emailSegmentUuid, string startsWith = null);
        /// <summary>
        /// Retrieve library items
        /// </summary>
        /// <remarks>
        /// Retrieves a library items based on a query object.  If no parameters are specified, the API call will default to the merchant id only.  You will need to make multiple API calls in order to retrieve the entire result set since this API performs result set pagination. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemQuery">Item query</param>
        /// <param name="limit">The maximum number of records to return on this one API call. (Maximum 10000) (optional, default to 10000)</param>
        /// <param name="offset">Pagination of the record set.  Offset is a zero based index. (optional, default to 0)</param>
        /// <param name="sort">The sort order of the library items.  See Sorting documentation for examples of using multiple values and sorting by ascending and descending. (optional)</param>
        /// <returns>Task of LibraryItemsResponse</returns>
        System.Threading.Tasks.Task<LibraryItemsResponse> SearchLibraryItemsAsync (LibraryItemQuery itemQuery, int? limit = null, int? offset = null, string sort = null);

        /// <summary>
        /// Retrieve library items
        /// </summary>
        /// <remarks>
        /// Retrieves a library items based on a query object.  If no parameters are specified, the API call will default to the merchant id only.  You will need to make multiple API calls in order to retrieve the entire result set since this API performs result set pagination. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemQuery">Item query</param>
        /// <param name="limit">The maximum number of records to return on this one API call. (Maximum 10000) (optional, default to 10000)</param>
        /// <param name="offset">Pagination of the record set.  Offset is a zero based index. (optional, default to 0)</param>
        /// <param name="sort">The sort order of the library items.  See Sorting documentation for examples of using multiple values and sorting by ascending and descending. (optional)</param>
        /// <returns>Task of ApiResponse (LibraryItemsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<LibraryItemsResponse>> SearchLibraryItemsAsyncWithHttpInfo (LibraryItemQuery itemQuery, int? limit = null, int? offset = null, string sort = null);
        /// <summary>
        /// Retrieve library items
        /// </summary>
        /// <remarks>
        /// Retrieves a library items based on a query object.  If no parameters are specified, the API call will default to the merchant id only.  You will need to make multiple API calls in order to retrieve the entire result set since this API performs result set pagination. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemQuery">Item query</param>
        /// <param name="limit">The maximum number of records to return on this one API call. (Maximum 10000) (optional, default to 10000)</param>
        /// <param name="offset">Pagination of the record set.  Offset is a zero based index. (optional, default to 0)</param>
        /// <param name="sort">The sort order of the library items.  See Sorting documentation for examples of using multiple values and sorting by ascending and descending. (optional)</param>
        /// <returns>Task of LibraryItemsResponse</returns>
        System.Threading.Tasks.Task<LibraryItemsResponse> SearchPublishedItemsAsync (LibraryItemQuery itemQuery, int? limit = null, int? offset = null, string sort = null);

        /// <summary>
        /// Retrieve library items
        /// </summary>
        /// <remarks>
        /// Retrieves a library items based on a query object.  If no parameters are specified, the API call will default to the merchant id only.  You will need to make multiple API calls in order to retrieve the entire result set since this API performs result set pagination. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemQuery">Item query</param>
        /// <param name="limit">The maximum number of records to return on this one API call. (Maximum 10000) (optional, default to 10000)</param>
        /// <param name="offset">Pagination of the record set.  Offset is a zero based index. (optional, default to 0)</param>
        /// <param name="sort">The sort order of the library items.  See Sorting documentation for examples of using multiple values and sorting by ascending and descending. (optional)</param>
        /// <returns>Task of ApiResponse (LibraryItemsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<LibraryItemsResponse>> SearchPublishedItemsAsyncWithHttpInfo (LibraryItemQuery itemQuery, int? limit = null, int? offset = null, string sort = null);
        /// <summary>
        /// Retrieve library items needing review or rejected
        /// </summary>
        /// <remarks>
        /// Retrieves a library items based on a query object.  If no parameters are specified, the API call will default to the merchant id only.  You will need to make multiple API calls in order to retrieve the entire result set since this API performs result set pagination. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemQuery">Item query</param>
        /// <param name="limit">The maximum number of records to return on this one API call. (Maximum 10000) (optional, default to 10000)</param>
        /// <param name="offset">Pagination of the record set.  Offset is a zero based index. (optional, default to 0)</param>
        /// <param name="sort">The sort order of the library items.  See Sorting documentation for examples of using multiple values and sorting by ascending and descending. (optional)</param>
        /// <returns>Task of LibraryItemsResponse</returns>
        System.Threading.Tasks.Task<LibraryItemsResponse> SearchReviewItemsAsync (LibraryItemQuery itemQuery, int? limit = null, int? offset = null, string sort = null);

        /// <summary>
        /// Retrieve library items needing review or rejected
        /// </summary>
        /// <remarks>
        /// Retrieves a library items based on a query object.  If no parameters are specified, the API call will default to the merchant id only.  You will need to make multiple API calls in order to retrieve the entire result set since this API performs result set pagination. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemQuery">Item query</param>
        /// <param name="limit">The maximum number of records to return on this one API call. (Maximum 10000) (optional, default to 10000)</param>
        /// <param name="offset">Pagination of the record set.  Offset is a zero based index. (optional, default to 0)</param>
        /// <param name="sort">The sort order of the library items.  See Sorting documentation for examples of using multiple values and sorting by ascending and descending. (optional)</param>
        /// <returns>Task of ApiResponse (LibraryItemsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<LibraryItemsResponse>> SearchReviewItemsAsyncWithHttpInfo (LibraryItemQuery itemQuery, int? limit = null, int? offset = null, string sort = null);
        /// <summary>
        /// Retrieve library items
        /// </summary>
        /// <remarks>
        /// Retrieves a library items based on a query object.  If no parameters are specified, the API call will default to the merchant id only.  You will need to make multiple API calls in order to retrieve the entire result set since this API performs result set pagination. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemQuery">Item query</param>
        /// <param name="limit">The maximum number of records to return on this one API call. (Maximum 10000) (optional, default to 10000)</param>
        /// <param name="offset">Pagination of the record set.  Offset is a zero based index. (optional, default to 0)</param>
        /// <param name="sort">The sort order of the library items.  See Sorting documentation for examples of using multiple values and sorting by ascending and descending. (optional)</param>
        /// <returns>Task of LibraryItemsResponse</returns>
        System.Threading.Tasks.Task<LibraryItemsResponse> SearchSharedItemsAsync (LibraryItemQuery itemQuery, int? limit = null, int? offset = null, string sort = null);

        /// <summary>
        /// Retrieve library items
        /// </summary>
        /// <remarks>
        /// Retrieves a library items based on a query object.  If no parameters are specified, the API call will default to the merchant id only.  You will need to make multiple API calls in order to retrieve the entire result set since this API performs result set pagination. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemQuery">Item query</param>
        /// <param name="limit">The maximum number of records to return on this one API call. (Maximum 10000) (optional, default to 10000)</param>
        /// <param name="offset">Pagination of the record set.  Offset is a zero based index. (optional, default to 0)</param>
        /// <param name="sort">The sort order of the library items.  See Sorting documentation for examples of using multiple values and sorting by ascending and descending. (optional)</param>
        /// <returns>Task of ApiResponse (LibraryItemsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<LibraryItemsResponse>> SearchSharedItemsAsyncWithHttpInfo (LibraryItemQuery itemQuery, int? limit = null, int? offset = null, string sort = null);
        /// <summary>
        /// Send email test
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="commseqEmailUuid"></param>
        /// <param name="emailCommseqEmailTestRequest">Email commseq email test request</param>
        /// <returns>Task of EmailCommseqEmailSendTestResponse</returns>
        System.Threading.Tasks.Task<EmailCommseqEmailSendTestResponse> SendEmailTestAsync (int? storefrontOid, string commseqEmailUuid, EmailCommseqEmailSendTestRequest emailCommseqEmailTestRequest);

        /// <summary>
        /// Send email test
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="commseqEmailUuid"></param>
        /// <param name="emailCommseqEmailTestRequest">Email commseq email test request</param>
        /// <returns>Task of ApiResponse (EmailCommseqEmailSendTestResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<EmailCommseqEmailSendTestResponse>> SendEmailTestAsyncWithHttpInfo (int? storefrontOid, string commseqEmailUuid, EmailCommseqEmailSendTestRequest emailCommseqEmailTestRequest);
        /// <summary>
        /// Send postcard test
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="commseqPostcardUuid"></param>
        /// <param name="emailCommseqPostcardTestRequest">Email commseq email test request</param>
        /// <returns>Task of EmailCommseqPostcardSendTestResponse</returns>
        System.Threading.Tasks.Task<EmailCommseqPostcardSendTestResponse> SendPostcardTestAsync (int? storefrontOid, string commseqPostcardUuid, EmailCommseqPostcardSendTestRequest emailCommseqPostcardTestRequest);

        /// <summary>
        /// Send postcard test
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="commseqPostcardUuid"></param>
        /// <param name="emailCommseqPostcardTestRequest">Email commseq email test request</param>
        /// <returns>Task of ApiResponse (EmailCommseqPostcardSendTestResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<EmailCommseqPostcardSendTestResponse>> SendPostcardTestAsyncWithHttpInfo (int? storefrontOid, string commseqPostcardUuid, EmailCommseqPostcardSendTestRequest emailCommseqPostcardTestRequest);
        /// <summary>
        /// Send webhook test
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="emailCommseqWebhookTestRequest">Email commseq webhook test request</param>
        /// <returns>Task of EmailCommseqWebhookSendTestResponse</returns>
        System.Threading.Tasks.Task<EmailCommseqWebhookSendTestResponse> SendWebhookTestAsync (int? storefrontOid, EmailCommseqWebhookSendTestRequest emailCommseqWebhookTestRequest);

        /// <summary>
        /// Send webhook test
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="emailCommseqWebhookTestRequest">Email commseq webhook test request</param>
        /// <returns>Task of ApiResponse (EmailCommseqWebhookSendTestResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<EmailCommseqWebhookSendTestResponse>> SendWebhookTestAsyncWithHttpInfo (int? storefrontOid, EmailCommseqWebhookSendTestRequest emailCommseqWebhookTestRequest);
        /// <summary>
        /// Start email campaign
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="emailCampaignUuid"></param>
        /// <returns>Task of BaseResponse</returns>
        System.Threading.Tasks.Task<BaseResponse> StartEmailCampaignAsync (int? storefrontOid, string emailCampaignUuid);

        /// <summary>
        /// Start email campaign
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="emailCampaignUuid"></param>
        /// <returns>Task of ApiResponse (BaseResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<BaseResponse>> StartEmailCampaignAsyncWithHttpInfo (int? storefrontOid, string emailCampaignUuid);
        /// <summary>
        /// Subscribe customers to email list
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="emailListUuid"></param>
        /// <param name="customers">Customers</param>
        /// <returns>Task of EmailListSubscribeResponse</returns>
        System.Threading.Tasks.Task<EmailListSubscribeResponse> SubscribeToEmailListAsync (int? storefrontOid, string emailListUuid, List<EmailCustomer> customers);

        /// <summary>
        /// Subscribe customers to email list
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="emailListUuid"></param>
        /// <param name="customers">Customers</param>
        /// <returns>Task of ApiResponse (EmailListSubscribeResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<EmailListSubscribeResponse>> SubscribeToEmailListAsyncWithHttpInfo (int? storefrontOid, string emailListUuid, List<EmailCustomer> customers);
        /// <summary>
        /// Remove favorite flag on screen recording
        /// </summary>
        /// <remarks>
        /// Remove favorite flag on screen recording 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="screenRecordingUuid"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UnfavoriteScreenRecordingAsync (int? storefrontOid, string screenRecordingUuid);

        /// <summary>
        /// Remove favorite flag on screen recording
        /// </summary>
        /// <remarks>
        /// Remove favorite flag on screen recording 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="screenRecordingUuid"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UnfavoriteScreenRecordingAsyncWithHttpInfo (int? storefrontOid, string screenRecordingUuid);
        /// <summary>
        /// Update email campaign
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="emailCampaignUuid"></param>
        /// <param name="emailCampaign">Email campaign</param>
        /// <returns>Task of EmailCampaignResponse</returns>
        System.Threading.Tasks.Task<EmailCampaignResponse> UpdateEmailCampaignAsync (int? storefrontOid, string emailCampaignUuid, EmailCampaign emailCampaign);

        /// <summary>
        /// Update email campaign
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="emailCampaignUuid"></param>
        /// <param name="emailCampaign">Email campaign</param>
        /// <returns>Task of ApiResponse (EmailCampaignResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<EmailCampaignResponse>> UpdateEmailCampaignAsyncWithHttpInfo (int? storefrontOid, string emailCampaignUuid, EmailCampaign emailCampaign);
        /// <summary>
        /// Update email campaign folder
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="emailCampaignFolderUuid"></param>
        /// <param name="emailCampaignFolder">Email campaign folder</param>
        /// <returns>Task of EmailCampaignFolderResponse</returns>
        System.Threading.Tasks.Task<EmailCampaignFolderResponse> UpdateEmailCampaignFolderAsync (int? storefrontOid, string emailCampaignFolderUuid, EmailCampaignFolder emailCampaignFolder);

        /// <summary>
        /// Update email campaign folder
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="emailCampaignFolderUuid"></param>
        /// <param name="emailCampaignFolder">Email campaign folder</param>
        /// <returns>Task of ApiResponse (EmailCampaignFolderResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<EmailCampaignFolderResponse>> UpdateEmailCampaignFolderAsyncWithHttpInfo (int? storefrontOid, string emailCampaignFolderUuid, EmailCampaignFolder emailCampaignFolder);
        /// <summary>
        /// Update email commseq
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="commseqUuid"></param>
        /// <param name="emailCommseq">Email commseq</param>
        /// <returns>Task of EmailCommseqResponse</returns>
        System.Threading.Tasks.Task<EmailCommseqResponse> UpdateEmailCommseqAsync (int? storefrontOid, string commseqUuid, EmailCommseq emailCommseq);

        /// <summary>
        /// Update email commseq
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="commseqUuid"></param>
        /// <param name="emailCommseq">Email commseq</param>
        /// <returns>Task of ApiResponse (EmailCommseqResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<EmailCommseqResponse>> UpdateEmailCommseqAsyncWithHttpInfo (int? storefrontOid, string commseqUuid, EmailCommseq emailCommseq);
        /// <summary>
        /// Update email customer
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="emailCustomerUuid"></param>
        /// <param name="emailCustomer">Email customer</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UpdateEmailCustomerAsync (int? storefrontOid, string emailCustomerUuid, EmailCustomer emailCustomer);

        /// <summary>
        /// Update email customer
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="emailCustomerUuid"></param>
        /// <param name="emailCustomer">Email customer</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UpdateEmailCustomerAsyncWithHttpInfo (int? storefrontOid, string emailCustomerUuid, EmailCustomer emailCustomer);
        /// <summary>
        /// Update email email
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="commseqEmailUuid"></param>
        /// <param name="emailCommseqEmail">Email commseq email</param>
        /// <returns>Task of EmailCommseqEmailResponse</returns>
        System.Threading.Tasks.Task<EmailCommseqEmailResponse> UpdateEmailEmailAsync (int? storefrontOid, string commseqEmailUuid, EmailCommseqEmail emailCommseqEmail);

        /// <summary>
        /// Update email email
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="commseqEmailUuid"></param>
        /// <param name="emailCommseqEmail">Email commseq email</param>
        /// <returns>Task of ApiResponse (EmailCommseqEmailResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<EmailCommseqEmailResponse>> UpdateEmailEmailAsyncWithHttpInfo (int? storefrontOid, string commseqEmailUuid, EmailCommseqEmail emailCommseqEmail);
        /// <summary>
        /// Update email flow
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="emailFlowUuid"></param>
        /// <param name="emailFlow">Email flow</param>
        /// <returns>Task of EmailFlowResponse</returns>
        System.Threading.Tasks.Task<EmailFlowResponse> UpdateEmailFlowAsync (int? storefrontOid, string emailFlowUuid, EmailFlow emailFlow);

        /// <summary>
        /// Update email flow
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="emailFlowUuid"></param>
        /// <param name="emailFlow">Email flow</param>
        /// <returns>Task of ApiResponse (EmailFlowResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<EmailFlowResponse>> UpdateEmailFlowAsyncWithHttpInfo (int? storefrontOid, string emailFlowUuid, EmailFlow emailFlow);
        /// <summary>
        /// Update email flow folder
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="emailFlowFolderUuid"></param>
        /// <param name="emailFlowFolder">Email flow folder</param>
        /// <returns>Task of EmailFlowFolderResponse</returns>
        System.Threading.Tasks.Task<EmailFlowFolderResponse> UpdateEmailFlowFolderAsync (int? storefrontOid, string emailFlowFolderUuid, EmailFlowFolder emailFlowFolder);

        /// <summary>
        /// Update email flow folder
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="emailFlowFolderUuid"></param>
        /// <param name="emailFlowFolder">Email flow folder</param>
        /// <returns>Task of ApiResponse (EmailFlowFolderResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<EmailFlowFolderResponse>> UpdateEmailFlowFolderAsyncWithHttpInfo (int? storefrontOid, string emailFlowFolderUuid, EmailFlowFolder emailFlowFolder);
        /// <summary>
        /// Update email global settings
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="globalSettings">global settings request</param>
        /// <returns>Task of EmailGlobalSettingsResponse</returns>
        System.Threading.Tasks.Task<EmailGlobalSettingsResponse> UpdateEmailGlobalSettingsAsync (EmailGlobalSettings globalSettings);

        /// <summary>
        /// Update email global settings
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="globalSettings">global settings request</param>
        /// <returns>Task of ApiResponse (EmailGlobalSettingsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<EmailGlobalSettingsResponse>> UpdateEmailGlobalSettingsAsyncWithHttpInfo (EmailGlobalSettings globalSettings);
        /// <summary>
        /// Update email list
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="emailListUuid"></param>
        /// <param name="emailList">Email list</param>
        /// <returns>Task of EmailListResponse</returns>
        System.Threading.Tasks.Task<EmailListResponse> UpdateEmailListAsync (int? storefrontOid, string emailListUuid, EmailList emailList);

        /// <summary>
        /// Update email list
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="emailListUuid"></param>
        /// <param name="emailList">Email list</param>
        /// <returns>Task of ApiResponse (EmailListResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<EmailListResponse>> UpdateEmailListAsyncWithHttpInfo (int? storefrontOid, string emailListUuid, EmailList emailList);
        /// <summary>
        /// Update email campaign folder
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="emailListSegmentFolderUuid"></param>
        /// <param name="emailListSegmentFolder">Email campaign folder</param>
        /// <returns>Task of EmailListSegmentFolderResponse</returns>
        System.Threading.Tasks.Task<EmailListSegmentFolderResponse> UpdateEmailListSegmentFolderAsync (int? storefrontOid, string emailListSegmentFolderUuid, EmailListSegmentFolder emailListSegmentFolder);

        /// <summary>
        /// Update email campaign folder
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="emailListSegmentFolderUuid"></param>
        /// <param name="emailListSegmentFolder">Email campaign folder</param>
        /// <returns>Task of ApiResponse (EmailListSegmentFolderResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<EmailListSegmentFolderResponse>> UpdateEmailListSegmentFolderAsyncWithHttpInfo (int? storefrontOid, string emailListSegmentFolderUuid, EmailListSegmentFolder emailListSegmentFolder);
        /// <summary>
        /// Update email plan
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="settings">plan request</param>
        /// <returns>Task of EmailPlanResponse</returns>
        System.Threading.Tasks.Task<EmailPlanResponse> UpdateEmailPlanAsync (int? storefrontOid, EmailPlan settings);

        /// <summary>
        /// Update email plan
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="settings">plan request</param>
        /// <returns>Task of ApiResponse (EmailPlanResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<EmailPlanResponse>> UpdateEmailPlanAsyncWithHttpInfo (int? storefrontOid, EmailPlan settings);
        /// <summary>
        /// Update email postcard
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="commseqPostcardUuid"></param>
        /// <param name="emailCommseqPostcard">Email commseq postcard</param>
        /// <returns>Task of EmailCommseqPostcardResponse</returns>
        System.Threading.Tasks.Task<EmailCommseqPostcardResponse> UpdateEmailPostcardAsync (int? storefrontOid, string commseqPostcardUuid, EmailCommseqPostcard emailCommseqPostcard);

        /// <summary>
        /// Update email postcard
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="commseqPostcardUuid"></param>
        /// <param name="emailCommseqPostcard">Email commseq postcard</param>
        /// <returns>Task of ApiResponse (EmailCommseqPostcardResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<EmailCommseqPostcardResponse>> UpdateEmailPostcardAsyncWithHttpInfo (int? storefrontOid, string commseqPostcardUuid, EmailCommseqPostcard emailCommseqPostcard);
        /// <summary>
        /// Update email segment
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="emailSegmentUuid"></param>
        /// <param name="emailSegment">Email segment</param>
        /// <returns>Task of EmailSegmentResponse</returns>
        System.Threading.Tasks.Task<EmailSegmentResponse> UpdateEmailSegmentAsync (int? storefrontOid, string emailSegmentUuid, EmailSegment emailSegment);

        /// <summary>
        /// Update email segment
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="emailSegmentUuid"></param>
        /// <param name="emailSegment">Email segment</param>
        /// <returns>Task of ApiResponse (EmailSegmentResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<EmailSegmentResponse>> UpdateEmailSegmentAsyncWithHttpInfo (int? storefrontOid, string emailSegmentUuid, EmailSegment emailSegment);
        /// <summary>
        /// Update email sending domain
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="domain"></param>
        /// <param name="emailDomain">EmailDomain</param>
        /// <returns>Task of EmailSendingDomainResponse</returns>
        System.Threading.Tasks.Task<EmailSendingDomainResponse> UpdateEmailSendingDomainAsync (string domain, EmailDomain emailDomain);

        /// <summary>
        /// Update email sending domain
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="domain"></param>
        /// <param name="emailDomain">EmailDomain</param>
        /// <returns>Task of ApiResponse (EmailSendingDomainResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<EmailSendingDomainResponse>> UpdateEmailSendingDomainAsyncWithHttpInfo (string domain, EmailDomain emailDomain);
        /// <summary>
        /// Update email settings
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="settings">settings request</param>
        /// <returns>Task of EmailSettingsResponse</returns>
        System.Threading.Tasks.Task<EmailSettingsResponse> UpdateEmailSettingsAsync (int? storefrontOid, EmailSettings settings);

        /// <summary>
        /// Update email settings
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="settings">settings request</param>
        /// <returns>Task of ApiResponse (EmailSettingsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<EmailSettingsResponse>> UpdateEmailSettingsAsyncWithHttpInfo (int? storefrontOid, EmailSettings settings);
        /// <summary>
        /// Update experiment
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="storefrontExperimentOid"></param>
        /// <param name="experiment">Experiment</param>
        /// <returns>Task of ExperimentResponse</returns>
        System.Threading.Tasks.Task<ExperimentResponse> UpdateExperimentAsync (int? storefrontOid, int? storefrontExperimentOid, Experiment experiment);

        /// <summary>
        /// Update experiment
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="storefrontExperimentOid"></param>
        /// <param name="experiment">Experiment</param>
        /// <returns>Task of ApiResponse (ExperimentResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ExperimentResponse>> UpdateExperimentAsyncWithHttpInfo (int? storefrontOid, int? storefrontExperimentOid, Experiment experiment);
        /// <summary>
        /// Update library item. Note that only certain fields may be updated via this method.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="libraryItemOid"></param>
        /// <param name="libraryItem">Library item</param>
        /// <returns>Task of LibraryItemResponse</returns>
        System.Threading.Tasks.Task<LibraryItemResponse> UpdateLibraryItemAsync (int? libraryItemOid, LibraryItem libraryItem);

        /// <summary>
        /// Update library item. Note that only certain fields may be updated via this method.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="libraryItemOid"></param>
        /// <param name="libraryItem">Library item</param>
        /// <returns>Task of ApiResponse (LibraryItemResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<LibraryItemResponse>> UpdateLibraryItemAsyncWithHttpInfo (int? libraryItemOid, LibraryItem libraryItem);
        /// <summary>
        /// Update merchant notes on a screen recording
        /// </summary>
        /// <remarks>
        /// Update merchant notes on a screen recording 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="screenRecordingUuid"></param>
        /// <param name="merchantNotesRequest">Merchant Notes</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UpdateScreenRecordingMerchantNotesAsync (int? storefrontOid, string screenRecordingUuid, ScreenRecordingMerchantNotesRequest merchantNotesRequest);

        /// <summary>
        /// Update merchant notes on a screen recording
        /// </summary>
        /// <remarks>
        /// Update merchant notes on a screen recording 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="screenRecordingUuid"></param>
        /// <param name="merchantNotesRequest">Merchant Notes</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UpdateScreenRecordingMerchantNotesAsyncWithHttpInfo (int? storefrontOid, string screenRecordingUuid, ScreenRecordingMerchantNotesRequest merchantNotesRequest);
        /// <summary>
        /// Update screen recording segment
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="screenRecordingSegmentOid"></param>
        /// <param name="segment">Segment</param>
        /// <returns>Task of ScreenRecordingSegmentResponse</returns>
        System.Threading.Tasks.Task<ScreenRecordingSegmentResponse> UpdateScreenRecordingSegmentAsync (int? storefrontOid, int? screenRecordingSegmentOid, ScreenRecordingSegment segment);

        /// <summary>
        /// Update screen recording segment
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="screenRecordingSegmentOid"></param>
        /// <param name="segment">Segment</param>
        /// <returns>Task of ApiResponse (ScreenRecordingSegmentResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ScreenRecordingSegmentResponse>> UpdateScreenRecordingSegmentAsyncWithHttpInfo (int? storefrontOid, int? screenRecordingSegmentOid, ScreenRecordingSegment segment);
        /// <summary>
        /// Update screen recording settings
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="settings">Settings</param>
        /// <returns>Task of ScreenRecordingSettingsResponse</returns>
        System.Threading.Tasks.Task<ScreenRecordingSettingsResponse> UpdateScreenRecordingSettingsAsync (int? storefrontOid, ScreenRecordingSettings settings);

        /// <summary>
        /// Update screen recording settings
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="settings">Settings</param>
        /// <returns>Task of ApiResponse (ScreenRecordingSettingsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ScreenRecordingSettingsResponse>> UpdateScreenRecordingSettingsAsyncWithHttpInfo (int? storefrontOid, ScreenRecordingSettings settings);
        /// <summary>
        /// Update tags on a screen recording
        /// </summary>
        /// <remarks>
        /// Update tags on a screen recording 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="screenRecordingUuid"></param>
        /// <param name="tags">Tags</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UpdateScreenRecordingTagsAsync (int? storefrontOid, string screenRecordingUuid, ScreenRecordingTagsRequest tags);

        /// <summary>
        /// Update tags on a screen recording
        /// </summary>
        /// <remarks>
        /// Update tags on a screen recording 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="screenRecordingUuid"></param>
        /// <param name="tags">Tags</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UpdateScreenRecordingTagsAsyncWithHttpInfo (int? storefrontOid, string screenRecordingUuid, ScreenRecordingTagsRequest tags);
        /// <summary>
        /// Updates a transaction email object
        /// </summary>
        /// <remarks>
        /// Updates a transactional email 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="emailId"></param>
        /// <param name="transactionEmail">TransactionEmail</param>
        /// <returns>Task of TransactionEmailResponse</returns>
        System.Threading.Tasks.Task<TransactionEmailResponse> UpdateTransactionEmailAsync (int? storefrontOid, string emailId, TransactionEmail transactionEmail);

        /// <summary>
        /// Updates a transaction email object
        /// </summary>
        /// <remarks>
        /// Updates a transactional email 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="emailId"></param>
        /// <param name="transactionEmail">TransactionEmail</param>
        /// <returns>Task of ApiResponse (TransactionEmailResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TransactionEmailResponse>> UpdateTransactionEmailAsyncWithHttpInfo (int? storefrontOid, string emailId, TransactionEmail transactionEmail);
        /// <summary>
        /// Update Twilio account
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="espTwilioUuid"></param>
        /// <param name="twilio">Twilio</param>
        /// <returns>Task of TwilioResponse</returns>
        System.Threading.Tasks.Task<TwilioResponse> UpdateTwilioAccountAsync (string espTwilioUuid, Twilio twilio);

        /// <summary>
        /// Update Twilio account
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="espTwilioUuid"></param>
        /// <param name="twilio">Twilio</param>
        /// <returns>Task of ApiResponse (TwilioResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TwilioResponse>> UpdateTwilioAccountAsyncWithHttpInfo (string espTwilioUuid, Twilio twilio);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class StorefrontApi : IStorefrontApi
    {
        private com.ultracart.admin.v2.Client.ExceptionFactory _exceptionFactory = (name, response) => null;
    
        /// <summary>
        /// Initializes a new instance of the <see cref="StorefrontApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public StorefrontApi(com.ultracart.admin.v2.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = com.ultracart.admin.v2.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = com.ultracart.admin.v2.Client.Configuration.DefaultExceptionFactory;
        }


        /// <summary>
        /// Initializes a new instance of the <see cref="StorefrontApi"/> class
        /// using a simple key string and optional version, which you will
        /// almost always want to use the default
        /// </summary>
        /// <param name="SimpleKey">A simple key.  See https://ultracart.atlassian.net/wiki/spaces/ucdoc/pages/38688545/API+Simple+Key</param>
        /// <returns></returns>
        public StorefrontApi(string SimpleKey)
        {
            Configuration configuration = new Configuration();
            configuration.ApiKey.Add("x-ultracart-simple-key", SimpleKey);
            configuration.DefaultHeader.Add("X-UltraCart-Api-Version", "2017-03-01");
            this.Configuration = configuration;
            ExceptionFactory = com.ultracart.admin.v2.Client.Configuration.DefaultExceptionFactory;
        }


        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public com.ultracart.admin.v2.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public com.ultracart.admin.v2.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Add to library 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addLibraryRequest">New library item request</param>
        /// <returns>LibraryItemResponse</returns>
        public LibraryItemResponse AddToLibrary (AddLibraryItemRequest addLibraryRequest)
        {
             ApiResponse<LibraryItemResponse> localVarResponse = AddToLibraryWithHttpInfo(addLibraryRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Add to library 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addLibraryRequest">New library item request</param>
        /// <returns>ApiResponse of LibraryItemResponse</returns>
        public ApiResponse< LibraryItemResponse > AddToLibraryWithHttpInfo (AddLibraryItemRequest addLibraryRequest)
        {
            // verify the required parameter 'addLibraryRequest' is set
            if (addLibraryRequest == null)
                throw new ApiException(400, "Missing required parameter 'addLibraryRequest' when calling StorefrontApi->AddToLibrary");

            var localVarPath = "/storefront/code_library";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (addLibraryRequest != null && addLibraryRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(addLibraryRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = addLibraryRequest; // byte array
            }

            // authentication (ultraCartBrowserApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key")))
            {
                localVarHeaderParams["x-ultracart-browser-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key");
            }
            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddToLibrary", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<LibraryItemResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (LibraryItemResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(LibraryItemResponse)));
        }

        /// <summary>
        /// Add to library 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addLibraryRequest">New library item request</param>
        /// <returns>Task of LibraryItemResponse</returns>
        public async System.Threading.Tasks.Task<LibraryItemResponse> AddToLibraryAsync (AddLibraryItemRequest addLibraryRequest)
        {
             ApiResponse<LibraryItemResponse> localVarResponse = await AddToLibraryAsyncWithHttpInfo(addLibraryRequest);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Add to library 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addLibraryRequest">New library item request</param>
        /// <returns>Task of ApiResponse (LibraryItemResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<LibraryItemResponse>> AddToLibraryAsyncWithHttpInfo (AddLibraryItemRequest addLibraryRequest)
        {
            // verify the required parameter 'addLibraryRequest' is set
            if (addLibraryRequest == null)
                throw new ApiException(400, "Missing required parameter 'addLibraryRequest' when calling StorefrontApi->AddToLibrary");

            var localVarPath = "/storefront/code_library";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (addLibraryRequest != null && addLibraryRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(addLibraryRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = addLibraryRequest; // byte array
            }

            // authentication (ultraCartBrowserApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key")))
            {
                localVarHeaderParams["x-ultracart-browser-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key");
            }
            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddToLibrary", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<LibraryItemResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (LibraryItemResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(LibraryItemResponse)));
        }

        /// <summary>
        /// Apply library item to storefront. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applyLibraryRequest">New library item</param>
        /// <returns>ApplyLibraryItemResponse</returns>
        public ApplyLibraryItemResponse ApplyToStoreFront (ApplyLibraryItemRequest applyLibraryRequest)
        {
             ApiResponse<ApplyLibraryItemResponse> localVarResponse = ApplyToStoreFrontWithHttpInfo(applyLibraryRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Apply library item to storefront. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applyLibraryRequest">New library item</param>
        /// <returns>ApiResponse of ApplyLibraryItemResponse</returns>
        public ApiResponse< ApplyLibraryItemResponse > ApplyToStoreFrontWithHttpInfo (ApplyLibraryItemRequest applyLibraryRequest)
        {
            // verify the required parameter 'applyLibraryRequest' is set
            if (applyLibraryRequest == null)
                throw new ApiException(400, "Missing required parameter 'applyLibraryRequest' when calling StorefrontApi->ApplyToStoreFront");

            var localVarPath = "/storefront/code_library/apply";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (applyLibraryRequest != null && applyLibraryRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(applyLibraryRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = applyLibraryRequest; // byte array
            }

            // authentication (ultraCartBrowserApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key")))
            {
                localVarHeaderParams["x-ultracart-browser-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key");
            }
            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApplyToStoreFront", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApplyLibraryItemResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApplyLibraryItemResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApplyLibraryItemResponse)));
        }

        /// <summary>
        /// Apply library item to storefront. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applyLibraryRequest">New library item</param>
        /// <returns>Task of ApplyLibraryItemResponse</returns>
        public async System.Threading.Tasks.Task<ApplyLibraryItemResponse> ApplyToStoreFrontAsync (ApplyLibraryItemRequest applyLibraryRequest)
        {
             ApiResponse<ApplyLibraryItemResponse> localVarResponse = await ApplyToStoreFrontAsyncWithHttpInfo(applyLibraryRequest);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Apply library item to storefront. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applyLibraryRequest">New library item</param>
        /// <returns>Task of ApiResponse (ApplyLibraryItemResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ApplyLibraryItemResponse>> ApplyToStoreFrontAsyncWithHttpInfo (ApplyLibraryItemRequest applyLibraryRequest)
        {
            // verify the required parameter 'applyLibraryRequest' is set
            if (applyLibraryRequest == null)
                throw new ApiException(400, "Missing required parameter 'applyLibraryRequest' when calling StorefrontApi->ApplyToStoreFront");

            var localVarPath = "/storefront/code_library/apply";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (applyLibraryRequest != null && applyLibraryRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(applyLibraryRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = applyLibraryRequest; // byte array
            }

            // authentication (ultraCartBrowserApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key")))
            {
                localVarHeaderParams["x-ultracart-browser-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key");
            }
            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApplyToStoreFront", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApplyLibraryItemResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApplyLibraryItemResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApplyLibraryItemResponse)));
        }

        /// <summary>
        /// Archive email list 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="emailListUuid"></param>
        /// <returns>EmailListArchiveResponse</returns>
        public EmailListArchiveResponse ArchiveEmailList (int? storefrontOid, string emailListUuid)
        {
             ApiResponse<EmailListArchiveResponse> localVarResponse = ArchiveEmailListWithHttpInfo(storefrontOid, emailListUuid);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Archive email list 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="emailListUuid"></param>
        /// <returns>ApiResponse of EmailListArchiveResponse</returns>
        public ApiResponse< EmailListArchiveResponse > ArchiveEmailListWithHttpInfo (int? storefrontOid, string emailListUuid)
        {
            // verify the required parameter 'storefrontOid' is set
            if (storefrontOid == null)
                throw new ApiException(400, "Missing required parameter 'storefrontOid' when calling StorefrontApi->ArchiveEmailList");
            // verify the required parameter 'emailListUuid' is set
            if (emailListUuid == null)
                throw new ApiException(400, "Missing required parameter 'emailListUuid' when calling StorefrontApi->ArchiveEmailList");

            var localVarPath = "/storefront/{storefront_oid}/email/lists/{email_list_uuid}/archive";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (storefrontOid != null) localVarPathParams.Add("storefront_oid", this.Configuration.ApiClient.ParameterToString(storefrontOid)); // path parameter
            if (emailListUuid != null) localVarPathParams.Add("email_list_uuid", this.Configuration.ApiClient.ParameterToString(emailListUuid)); // path parameter

            // authentication (ultraCartBrowserApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key")))
            {
                localVarHeaderParams["x-ultracart-browser-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key");
            }
            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ArchiveEmailList", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EmailListArchiveResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (EmailListArchiveResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EmailListArchiveResponse)));
        }

        /// <summary>
        /// Archive email list 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="emailListUuid"></param>
        /// <returns>Task of EmailListArchiveResponse</returns>
        public async System.Threading.Tasks.Task<EmailListArchiveResponse> ArchiveEmailListAsync (int? storefrontOid, string emailListUuid)
        {
             ApiResponse<EmailListArchiveResponse> localVarResponse = await ArchiveEmailListAsyncWithHttpInfo(storefrontOid, emailListUuid);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Archive email list 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="emailListUuid"></param>
        /// <returns>Task of ApiResponse (EmailListArchiveResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<EmailListArchiveResponse>> ArchiveEmailListAsyncWithHttpInfo (int? storefrontOid, string emailListUuid)
        {
            // verify the required parameter 'storefrontOid' is set
            if (storefrontOid == null)
                throw new ApiException(400, "Missing required parameter 'storefrontOid' when calling StorefrontApi->ArchiveEmailList");
            // verify the required parameter 'emailListUuid' is set
            if (emailListUuid == null)
                throw new ApiException(400, "Missing required parameter 'emailListUuid' when calling StorefrontApi->ArchiveEmailList");

            var localVarPath = "/storefront/{storefront_oid}/email/lists/{email_list_uuid}/archive";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (storefrontOid != null) localVarPathParams.Add("storefront_oid", this.Configuration.ApiClient.ParameterToString(storefrontOid)); // path parameter
            if (emailListUuid != null) localVarPathParams.Add("email_list_uuid", this.Configuration.ApiClient.ParameterToString(emailListUuid)); // path parameter

            // authentication (ultraCartBrowserApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key")))
            {
                localVarHeaderParams["x-ultracart-browser-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key");
            }
            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ArchiveEmailList", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EmailListArchiveResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (EmailListArchiveResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EmailListArchiveResponse)));
        }

        /// <summary>
        /// Archive email segment 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="emailSegmentUuid"></param>
        /// <returns>EmailSegmentArchiveResponse</returns>
        public EmailSegmentArchiveResponse ArchiveEmailSegment (int? storefrontOid, string emailSegmentUuid)
        {
             ApiResponse<EmailSegmentArchiveResponse> localVarResponse = ArchiveEmailSegmentWithHttpInfo(storefrontOid, emailSegmentUuid);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Archive email segment 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="emailSegmentUuid"></param>
        /// <returns>ApiResponse of EmailSegmentArchiveResponse</returns>
        public ApiResponse< EmailSegmentArchiveResponse > ArchiveEmailSegmentWithHttpInfo (int? storefrontOid, string emailSegmentUuid)
        {
            // verify the required parameter 'storefrontOid' is set
            if (storefrontOid == null)
                throw new ApiException(400, "Missing required parameter 'storefrontOid' when calling StorefrontApi->ArchiveEmailSegment");
            // verify the required parameter 'emailSegmentUuid' is set
            if (emailSegmentUuid == null)
                throw new ApiException(400, "Missing required parameter 'emailSegmentUuid' when calling StorefrontApi->ArchiveEmailSegment");

            var localVarPath = "/storefront/{storefront_oid}/email/segments/{email_segment_uuid}/archive";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (storefrontOid != null) localVarPathParams.Add("storefront_oid", this.Configuration.ApiClient.ParameterToString(storefrontOid)); // path parameter
            if (emailSegmentUuid != null) localVarPathParams.Add("email_segment_uuid", this.Configuration.ApiClient.ParameterToString(emailSegmentUuid)); // path parameter

            // authentication (ultraCartBrowserApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key")))
            {
                localVarHeaderParams["x-ultracart-browser-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key");
            }
            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ArchiveEmailSegment", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EmailSegmentArchiveResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (EmailSegmentArchiveResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EmailSegmentArchiveResponse)));
        }

        /// <summary>
        /// Archive email segment 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="emailSegmentUuid"></param>
        /// <returns>Task of EmailSegmentArchiveResponse</returns>
        public async System.Threading.Tasks.Task<EmailSegmentArchiveResponse> ArchiveEmailSegmentAsync (int? storefrontOid, string emailSegmentUuid)
        {
             ApiResponse<EmailSegmentArchiveResponse> localVarResponse = await ArchiveEmailSegmentAsyncWithHttpInfo(storefrontOid, emailSegmentUuid);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Archive email segment 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="emailSegmentUuid"></param>
        /// <returns>Task of ApiResponse (EmailSegmentArchiveResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<EmailSegmentArchiveResponse>> ArchiveEmailSegmentAsyncWithHttpInfo (int? storefrontOid, string emailSegmentUuid)
        {
            // verify the required parameter 'storefrontOid' is set
            if (storefrontOid == null)
                throw new ApiException(400, "Missing required parameter 'storefrontOid' when calling StorefrontApi->ArchiveEmailSegment");
            // verify the required parameter 'emailSegmentUuid' is set
            if (emailSegmentUuid == null)
                throw new ApiException(400, "Missing required parameter 'emailSegmentUuid' when calling StorefrontApi->ArchiveEmailSegment");

            var localVarPath = "/storefront/{storefront_oid}/email/segments/{email_segment_uuid}/archive";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (storefrontOid != null) localVarPathParams.Add("storefront_oid", this.Configuration.ApiClient.ParameterToString(storefrontOid)); // path parameter
            if (emailSegmentUuid != null) localVarPathParams.Add("email_segment_uuid", this.Configuration.ApiClient.ParameterToString(emailSegmentUuid)); // path parameter

            // authentication (ultraCartBrowserApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key")))
            {
                localVarHeaderParams["x-ultracart-browser-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key");
            }
            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ArchiveEmailSegment", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EmailSegmentArchiveResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (EmailSegmentArchiveResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EmailSegmentArchiveResponse)));
        }

        /// <summary>
        /// Back populate email flow 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="emailFlowUuid"></param>
        /// <param name="backPopulateRequest">The request to back populate</param>
        /// <returns>EmailFlowBackPopulateResponse</returns>
        public EmailFlowBackPopulateResponse BackPopulateEmailFlow (int? storefrontOid, string emailFlowUuid, EmailFlowBackPopulateRequest backPopulateRequest)
        {
             ApiResponse<EmailFlowBackPopulateResponse> localVarResponse = BackPopulateEmailFlowWithHttpInfo(storefrontOid, emailFlowUuid, backPopulateRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Back populate email flow 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="emailFlowUuid"></param>
        /// <param name="backPopulateRequest">The request to back populate</param>
        /// <returns>ApiResponse of EmailFlowBackPopulateResponse</returns>
        public ApiResponse< EmailFlowBackPopulateResponse > BackPopulateEmailFlowWithHttpInfo (int? storefrontOid, string emailFlowUuid, EmailFlowBackPopulateRequest backPopulateRequest)
        {
            // verify the required parameter 'storefrontOid' is set
            if (storefrontOid == null)
                throw new ApiException(400, "Missing required parameter 'storefrontOid' when calling StorefrontApi->BackPopulateEmailFlow");
            // verify the required parameter 'emailFlowUuid' is set
            if (emailFlowUuid == null)
                throw new ApiException(400, "Missing required parameter 'emailFlowUuid' when calling StorefrontApi->BackPopulateEmailFlow");
            // verify the required parameter 'backPopulateRequest' is set
            if (backPopulateRequest == null)
                throw new ApiException(400, "Missing required parameter 'backPopulateRequest' when calling StorefrontApi->BackPopulateEmailFlow");

            var localVarPath = "/storefront/{storefront_oid}/email/flows/{email_flow_uuid}/backfill";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (storefrontOid != null) localVarPathParams.Add("storefront_oid", this.Configuration.ApiClient.ParameterToString(storefrontOid)); // path parameter
            if (emailFlowUuid != null) localVarPathParams.Add("email_flow_uuid", this.Configuration.ApiClient.ParameterToString(emailFlowUuid)); // path parameter
            if (backPopulateRequest != null && backPopulateRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(backPopulateRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = backPopulateRequest; // byte array
            }

            // authentication (ultraCartBrowserApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key")))
            {
                localVarHeaderParams["x-ultracart-browser-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key");
            }
            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BackPopulateEmailFlow", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EmailFlowBackPopulateResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (EmailFlowBackPopulateResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EmailFlowBackPopulateResponse)));
        }

        /// <summary>
        /// Back populate email flow 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="emailFlowUuid"></param>
        /// <param name="backPopulateRequest">The request to back populate</param>
        /// <returns>Task of EmailFlowBackPopulateResponse</returns>
        public async System.Threading.Tasks.Task<EmailFlowBackPopulateResponse> BackPopulateEmailFlowAsync (int? storefrontOid, string emailFlowUuid, EmailFlowBackPopulateRequest backPopulateRequest)
        {
             ApiResponse<EmailFlowBackPopulateResponse> localVarResponse = await BackPopulateEmailFlowAsyncWithHttpInfo(storefrontOid, emailFlowUuid, backPopulateRequest);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Back populate email flow 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="emailFlowUuid"></param>
        /// <param name="backPopulateRequest">The request to back populate</param>
        /// <returns>Task of ApiResponse (EmailFlowBackPopulateResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<EmailFlowBackPopulateResponse>> BackPopulateEmailFlowAsyncWithHttpInfo (int? storefrontOid, string emailFlowUuid, EmailFlowBackPopulateRequest backPopulateRequest)
        {
            // verify the required parameter 'storefrontOid' is set
            if (storefrontOid == null)
                throw new ApiException(400, "Missing required parameter 'storefrontOid' when calling StorefrontApi->BackPopulateEmailFlow");
            // verify the required parameter 'emailFlowUuid' is set
            if (emailFlowUuid == null)
                throw new ApiException(400, "Missing required parameter 'emailFlowUuid' when calling StorefrontApi->BackPopulateEmailFlow");
            // verify the required parameter 'backPopulateRequest' is set
            if (backPopulateRequest == null)
                throw new ApiException(400, "Missing required parameter 'backPopulateRequest' when calling StorefrontApi->BackPopulateEmailFlow");

            var localVarPath = "/storefront/{storefront_oid}/email/flows/{email_flow_uuid}/backfill";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (storefrontOid != null) localVarPathParams.Add("storefront_oid", this.Configuration.ApiClient.ParameterToString(storefrontOid)); // path parameter
            if (emailFlowUuid != null) localVarPathParams.Add("email_flow_uuid", this.Configuration.ApiClient.ParameterToString(emailFlowUuid)); // path parameter
            if (backPopulateRequest != null && backPopulateRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(backPopulateRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = backPopulateRequest; // byte array
            }

            // authentication (ultraCartBrowserApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key")))
            {
                localVarHeaderParams["x-ultracart-browser-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key");
            }
            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BackPopulateEmailFlow", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EmailFlowBackPopulateResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (EmailFlowBackPopulateResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EmailFlowBackPopulateResponse)));
        }

        /// <summary>
        /// Check download of email segment 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="emailSegmentUuid"></param>
        /// <param name="emailSegmentRebuildUuid"></param>
        /// <returns>EmailSegmentDownloadPrepareResponse</returns>
        public EmailSegmentDownloadPrepareResponse CheckDownloadEmailSegment (int? storefrontOid, string emailSegmentUuid, string emailSegmentRebuildUuid)
        {
             ApiResponse<EmailSegmentDownloadPrepareResponse> localVarResponse = CheckDownloadEmailSegmentWithHttpInfo(storefrontOid, emailSegmentUuid, emailSegmentRebuildUuid);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Check download of email segment 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="emailSegmentUuid"></param>
        /// <param name="emailSegmentRebuildUuid"></param>
        /// <returns>ApiResponse of EmailSegmentDownloadPrepareResponse</returns>
        public ApiResponse< EmailSegmentDownloadPrepareResponse > CheckDownloadEmailSegmentWithHttpInfo (int? storefrontOid, string emailSegmentUuid, string emailSegmentRebuildUuid)
        {
            // verify the required parameter 'storefrontOid' is set
            if (storefrontOid == null)
                throw new ApiException(400, "Missing required parameter 'storefrontOid' when calling StorefrontApi->CheckDownloadEmailSegment");
            // verify the required parameter 'emailSegmentUuid' is set
            if (emailSegmentUuid == null)
                throw new ApiException(400, "Missing required parameter 'emailSegmentUuid' when calling StorefrontApi->CheckDownloadEmailSegment");
            // verify the required parameter 'emailSegmentRebuildUuid' is set
            if (emailSegmentRebuildUuid == null)
                throw new ApiException(400, "Missing required parameter 'emailSegmentRebuildUuid' when calling StorefrontApi->CheckDownloadEmailSegment");

            var localVarPath = "/storefront/{storefront_oid}/email/segments/{email_segment_uuid}/downloadPrepare/{email_segment_rebuild_uuid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (storefrontOid != null) localVarPathParams.Add("storefront_oid", this.Configuration.ApiClient.ParameterToString(storefrontOid)); // path parameter
            if (emailSegmentUuid != null) localVarPathParams.Add("email_segment_uuid", this.Configuration.ApiClient.ParameterToString(emailSegmentUuid)); // path parameter
            if (emailSegmentRebuildUuid != null) localVarPathParams.Add("email_segment_rebuild_uuid", this.Configuration.ApiClient.ParameterToString(emailSegmentRebuildUuid)); // path parameter

            // authentication (ultraCartBrowserApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key")))
            {
                localVarHeaderParams["x-ultracart-browser-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key");
            }
            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CheckDownloadEmailSegment", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EmailSegmentDownloadPrepareResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (EmailSegmentDownloadPrepareResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EmailSegmentDownloadPrepareResponse)));
        }

        /// <summary>
        /// Check download of email segment 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="emailSegmentUuid"></param>
        /// <param name="emailSegmentRebuildUuid"></param>
        /// <returns>Task of EmailSegmentDownloadPrepareResponse</returns>
        public async System.Threading.Tasks.Task<EmailSegmentDownloadPrepareResponse> CheckDownloadEmailSegmentAsync (int? storefrontOid, string emailSegmentUuid, string emailSegmentRebuildUuid)
        {
             ApiResponse<EmailSegmentDownloadPrepareResponse> localVarResponse = await CheckDownloadEmailSegmentAsyncWithHttpInfo(storefrontOid, emailSegmentUuid, emailSegmentRebuildUuid);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Check download of email segment 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="emailSegmentUuid"></param>
        /// <param name="emailSegmentRebuildUuid"></param>
        /// <returns>Task of ApiResponse (EmailSegmentDownloadPrepareResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<EmailSegmentDownloadPrepareResponse>> CheckDownloadEmailSegmentAsyncWithHttpInfo (int? storefrontOid, string emailSegmentUuid, string emailSegmentRebuildUuid)
        {
            // verify the required parameter 'storefrontOid' is set
            if (storefrontOid == null)
                throw new ApiException(400, "Missing required parameter 'storefrontOid' when calling StorefrontApi->CheckDownloadEmailSegment");
            // verify the required parameter 'emailSegmentUuid' is set
            if (emailSegmentUuid == null)
                throw new ApiException(400, "Missing required parameter 'emailSegmentUuid' when calling StorefrontApi->CheckDownloadEmailSegment");
            // verify the required parameter 'emailSegmentRebuildUuid' is set
            if (emailSegmentRebuildUuid == null)
                throw new ApiException(400, "Missing required parameter 'emailSegmentRebuildUuid' when calling StorefrontApi->CheckDownloadEmailSegment");

            var localVarPath = "/storefront/{storefront_oid}/email/segments/{email_segment_uuid}/downloadPrepare/{email_segment_rebuild_uuid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (storefrontOid != null) localVarPathParams.Add("storefront_oid", this.Configuration.ApiClient.ParameterToString(storefrontOid)); // path parameter
            if (emailSegmentUuid != null) localVarPathParams.Add("email_segment_uuid", this.Configuration.ApiClient.ParameterToString(emailSegmentUuid)); // path parameter
            if (emailSegmentRebuildUuid != null) localVarPathParams.Add("email_segment_rebuild_uuid", this.Configuration.ApiClient.ParameterToString(emailSegmentRebuildUuid)); // path parameter

            // authentication (ultraCartBrowserApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key")))
            {
                localVarHeaderParams["x-ultracart-browser-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key");
            }
            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CheckDownloadEmailSegment", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EmailSegmentDownloadPrepareResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (EmailSegmentDownloadPrepareResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EmailSegmentDownloadPrepareResponse)));
        }

        /// <summary>
        /// Clone email campaign 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="emailCampaignUuid"></param>
        /// <param name="targetStorefrontOid"> (optional)</param>
        /// <returns>EmailCampaignResponse</returns>
        public EmailCampaignResponse CloneEmailCampaign (int? storefrontOid, string emailCampaignUuid, int? targetStorefrontOid = null)
        {
             ApiResponse<EmailCampaignResponse> localVarResponse = CloneEmailCampaignWithHttpInfo(storefrontOid, emailCampaignUuid, targetStorefrontOid);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Clone email campaign 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="emailCampaignUuid"></param>
        /// <param name="targetStorefrontOid"> (optional)</param>
        /// <returns>ApiResponse of EmailCampaignResponse</returns>
        public ApiResponse< EmailCampaignResponse > CloneEmailCampaignWithHttpInfo (int? storefrontOid, string emailCampaignUuid, int? targetStorefrontOid = null)
        {
            // verify the required parameter 'storefrontOid' is set
            if (storefrontOid == null)
                throw new ApiException(400, "Missing required parameter 'storefrontOid' when calling StorefrontApi->CloneEmailCampaign");
            // verify the required parameter 'emailCampaignUuid' is set
            if (emailCampaignUuid == null)
                throw new ApiException(400, "Missing required parameter 'emailCampaignUuid' when calling StorefrontApi->CloneEmailCampaign");

            var localVarPath = "/storefront/{storefront_oid}/email/campaigns/{email_campaign_uuid}/clone";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (storefrontOid != null) localVarPathParams.Add("storefront_oid", this.Configuration.ApiClient.ParameterToString(storefrontOid)); // path parameter
            if (emailCampaignUuid != null) localVarPathParams.Add("email_campaign_uuid", this.Configuration.ApiClient.ParameterToString(emailCampaignUuid)); // path parameter
            if (targetStorefrontOid != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "target_storefront_oid", targetStorefrontOid)); // query parameter

            // authentication (ultraCartBrowserApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key")))
            {
                localVarHeaderParams["x-ultracart-browser-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key");
            }
            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CloneEmailCampaign", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EmailCampaignResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (EmailCampaignResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EmailCampaignResponse)));
        }

        /// <summary>
        /// Clone email campaign 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="emailCampaignUuid"></param>
        /// <param name="targetStorefrontOid"> (optional)</param>
        /// <returns>Task of EmailCampaignResponse</returns>
        public async System.Threading.Tasks.Task<EmailCampaignResponse> CloneEmailCampaignAsync (int? storefrontOid, string emailCampaignUuid, int? targetStorefrontOid = null)
        {
             ApiResponse<EmailCampaignResponse> localVarResponse = await CloneEmailCampaignAsyncWithHttpInfo(storefrontOid, emailCampaignUuid, targetStorefrontOid);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Clone email campaign 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="emailCampaignUuid"></param>
        /// <param name="targetStorefrontOid"> (optional)</param>
        /// <returns>Task of ApiResponse (EmailCampaignResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<EmailCampaignResponse>> CloneEmailCampaignAsyncWithHttpInfo (int? storefrontOid, string emailCampaignUuid, int? targetStorefrontOid = null)
        {
            // verify the required parameter 'storefrontOid' is set
            if (storefrontOid == null)
                throw new ApiException(400, "Missing required parameter 'storefrontOid' when calling StorefrontApi->CloneEmailCampaign");
            // verify the required parameter 'emailCampaignUuid' is set
            if (emailCampaignUuid == null)
                throw new ApiException(400, "Missing required parameter 'emailCampaignUuid' when calling StorefrontApi->CloneEmailCampaign");

            var localVarPath = "/storefront/{storefront_oid}/email/campaigns/{email_campaign_uuid}/clone";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (storefrontOid != null) localVarPathParams.Add("storefront_oid", this.Configuration.ApiClient.ParameterToString(storefrontOid)); // path parameter
            if (emailCampaignUuid != null) localVarPathParams.Add("email_campaign_uuid", this.Configuration.ApiClient.ParameterToString(emailCampaignUuid)); // path parameter
            if (targetStorefrontOid != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "target_storefront_oid", targetStorefrontOid)); // query parameter

            // authentication (ultraCartBrowserApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key")))
            {
                localVarHeaderParams["x-ultracart-browser-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key");
            }
            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CloneEmailCampaign", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EmailCampaignResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (EmailCampaignResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EmailCampaignResponse)));
        }

        /// <summary>
        /// Clone email flow 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="emailFlowUuid"></param>
        /// <param name="targetStorefrontOid"> (optional)</param>
        /// <returns>EmailFlowResponse</returns>
        public EmailFlowResponse CloneEmailFlow (int? storefrontOid, string emailFlowUuid, int? targetStorefrontOid = null)
        {
             ApiResponse<EmailFlowResponse> localVarResponse = CloneEmailFlowWithHttpInfo(storefrontOid, emailFlowUuid, targetStorefrontOid);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Clone email flow 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="emailFlowUuid"></param>
        /// <param name="targetStorefrontOid"> (optional)</param>
        /// <returns>ApiResponse of EmailFlowResponse</returns>
        public ApiResponse< EmailFlowResponse > CloneEmailFlowWithHttpInfo (int? storefrontOid, string emailFlowUuid, int? targetStorefrontOid = null)
        {
            // verify the required parameter 'storefrontOid' is set
            if (storefrontOid == null)
                throw new ApiException(400, "Missing required parameter 'storefrontOid' when calling StorefrontApi->CloneEmailFlow");
            // verify the required parameter 'emailFlowUuid' is set
            if (emailFlowUuid == null)
                throw new ApiException(400, "Missing required parameter 'emailFlowUuid' when calling StorefrontApi->CloneEmailFlow");

            var localVarPath = "/storefront/{storefront_oid}/email/flows/{email_flow_uuid}/clone";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (storefrontOid != null) localVarPathParams.Add("storefront_oid", this.Configuration.ApiClient.ParameterToString(storefrontOid)); // path parameter
            if (emailFlowUuid != null) localVarPathParams.Add("email_flow_uuid", this.Configuration.ApiClient.ParameterToString(emailFlowUuid)); // path parameter
            if (targetStorefrontOid != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "target_storefront_oid", targetStorefrontOid)); // query parameter

            // authentication (ultraCartBrowserApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key")))
            {
                localVarHeaderParams["x-ultracart-browser-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key");
            }
            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CloneEmailFlow", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EmailFlowResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (EmailFlowResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EmailFlowResponse)));
        }

        /// <summary>
        /// Clone email flow 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="emailFlowUuid"></param>
        /// <param name="targetStorefrontOid"> (optional)</param>
        /// <returns>Task of EmailFlowResponse</returns>
        public async System.Threading.Tasks.Task<EmailFlowResponse> CloneEmailFlowAsync (int? storefrontOid, string emailFlowUuid, int? targetStorefrontOid = null)
        {
             ApiResponse<EmailFlowResponse> localVarResponse = await CloneEmailFlowAsyncWithHttpInfo(storefrontOid, emailFlowUuid, targetStorefrontOid);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Clone email flow 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="emailFlowUuid"></param>
        /// <param name="targetStorefrontOid"> (optional)</param>
        /// <returns>Task of ApiResponse (EmailFlowResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<EmailFlowResponse>> CloneEmailFlowAsyncWithHttpInfo (int? storefrontOid, string emailFlowUuid, int? targetStorefrontOid = null)
        {
            // verify the required parameter 'storefrontOid' is set
            if (storefrontOid == null)
                throw new ApiException(400, "Missing required parameter 'storefrontOid' when calling StorefrontApi->CloneEmailFlow");
            // verify the required parameter 'emailFlowUuid' is set
            if (emailFlowUuid == null)
                throw new ApiException(400, "Missing required parameter 'emailFlowUuid' when calling StorefrontApi->CloneEmailFlow");

            var localVarPath = "/storefront/{storefront_oid}/email/flows/{email_flow_uuid}/clone";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (storefrontOid != null) localVarPathParams.Add("storefront_oid", this.Configuration.ApiClient.ParameterToString(storefrontOid)); // path parameter
            if (emailFlowUuid != null) localVarPathParams.Add("email_flow_uuid", this.Configuration.ApiClient.ParameterToString(emailFlowUuid)); // path parameter
            if (targetStorefrontOid != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "target_storefront_oid", targetStorefrontOid)); // query parameter

            // authentication (ultraCartBrowserApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key")))
            {
                localVarHeaderParams["x-ultracart-browser-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key");
            }
            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CloneEmailFlow", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EmailFlowResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (EmailFlowResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EmailFlowResponse)));
        }

        /// <summary>
        /// Create email campaign 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="domain"></param>
        /// <returns>EmailSendingDomainResponse</returns>
        public EmailSendingDomainResponse CreateEmailSendingDomain (string domain)
        {
             ApiResponse<EmailSendingDomainResponse> localVarResponse = CreateEmailSendingDomainWithHttpInfo(domain);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create email campaign 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="domain"></param>
        /// <returns>ApiResponse of EmailSendingDomainResponse</returns>
        public ApiResponse< EmailSendingDomainResponse > CreateEmailSendingDomainWithHttpInfo (string domain)
        {
            // verify the required parameter 'domain' is set
            if (domain == null)
                throw new ApiException(400, "Missing required parameter 'domain' when calling StorefrontApi->CreateEmailSendingDomain");

            var localVarPath = "/storefront/email/sending_domains/{domain}/create";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (domain != null) localVarPathParams.Add("domain", this.Configuration.ApiClient.ParameterToString(domain)); // path parameter

            // authentication (ultraCartBrowserApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key")))
            {
                localVarHeaderParams["x-ultracart-browser-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key");
            }
            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateEmailSendingDomain", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EmailSendingDomainResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (EmailSendingDomainResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EmailSendingDomainResponse)));
        }

        /// <summary>
        /// Create email campaign 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="domain"></param>
        /// <returns>Task of EmailSendingDomainResponse</returns>
        public async System.Threading.Tasks.Task<EmailSendingDomainResponse> CreateEmailSendingDomainAsync (string domain)
        {
             ApiResponse<EmailSendingDomainResponse> localVarResponse = await CreateEmailSendingDomainAsyncWithHttpInfo(domain);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create email campaign 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="domain"></param>
        /// <returns>Task of ApiResponse (EmailSendingDomainResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<EmailSendingDomainResponse>> CreateEmailSendingDomainAsyncWithHttpInfo (string domain)
        {
            // verify the required parameter 'domain' is set
            if (domain == null)
                throw new ApiException(400, "Missing required parameter 'domain' when calling StorefrontApi->CreateEmailSendingDomain");

            var localVarPath = "/storefront/email/sending_domains/{domain}/create";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (domain != null) localVarPathParams.Add("domain", this.Configuration.ApiClient.ParameterToString(domain)); // path parameter

            // authentication (ultraCartBrowserApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key")))
            {
                localVarHeaderParams["x-ultracart-browser-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key");
            }
            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateEmailSendingDomain", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EmailSendingDomainResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (EmailSendingDomainResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EmailSendingDomainResponse)));
        }

        /// <summary>
        /// Create email sending domain for various providers 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="emailDomain">EmailDomain</param>
        /// <returns>EmailSendingDomainResponse</returns>
        public EmailSendingDomainResponse CreateEmailSendingDomain2 (EmailDomain emailDomain)
        {
             ApiResponse<EmailSendingDomainResponse> localVarResponse = CreateEmailSendingDomain2WithHttpInfo(emailDomain);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create email sending domain for various providers 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="emailDomain">EmailDomain</param>
        /// <returns>ApiResponse of EmailSendingDomainResponse</returns>
        public ApiResponse< EmailSendingDomainResponse > CreateEmailSendingDomain2WithHttpInfo (EmailDomain emailDomain)
        {
            // verify the required parameter 'emailDomain' is set
            if (emailDomain == null)
                throw new ApiException(400, "Missing required parameter 'emailDomain' when calling StorefrontApi->CreateEmailSendingDomain2");

            var localVarPath = "/storefront/email/sending_domains";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (emailDomain != null && emailDomain.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(emailDomain); // http body (model) parameter
            }
            else
            {
                localVarPostBody = emailDomain; // byte array
            }

            // authentication (ultraCartBrowserApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key")))
            {
                localVarHeaderParams["x-ultracart-browser-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key");
            }
            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateEmailSendingDomain2", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EmailSendingDomainResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (EmailSendingDomainResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EmailSendingDomainResponse)));
        }

        /// <summary>
        /// Create email sending domain for various providers 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="emailDomain">EmailDomain</param>
        /// <returns>Task of EmailSendingDomainResponse</returns>
        public async System.Threading.Tasks.Task<EmailSendingDomainResponse> CreateEmailSendingDomain2Async (EmailDomain emailDomain)
        {
             ApiResponse<EmailSendingDomainResponse> localVarResponse = await CreateEmailSendingDomain2AsyncWithHttpInfo(emailDomain);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create email sending domain for various providers 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="emailDomain">EmailDomain</param>
        /// <returns>Task of ApiResponse (EmailSendingDomainResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<EmailSendingDomainResponse>> CreateEmailSendingDomain2AsyncWithHttpInfo (EmailDomain emailDomain)
        {
            // verify the required parameter 'emailDomain' is set
            if (emailDomain == null)
                throw new ApiException(400, "Missing required parameter 'emailDomain' when calling StorefrontApi->CreateEmailSendingDomain2");

            var localVarPath = "/storefront/email/sending_domains";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (emailDomain != null && emailDomain.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(emailDomain); // http body (model) parameter
            }
            else
            {
                localVarPostBody = emailDomain; // byte array
            }

            // authentication (ultraCartBrowserApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key")))
            {
                localVarHeaderParams["x-ultracart-browser-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key");
            }
            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateEmailSendingDomain2", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EmailSendingDomainResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (EmailSendingDomainResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EmailSendingDomainResponse)));
        }

        /// <summary>
        /// Create Twilio account 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="twilio">Twilio</param>
        /// <returns>TwilioResponse</returns>
        public TwilioResponse CreateTwilioAccount (Twilio twilio)
        {
             ApiResponse<TwilioResponse> localVarResponse = CreateTwilioAccountWithHttpInfo(twilio);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create Twilio account 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="twilio">Twilio</param>
        /// <returns>ApiResponse of TwilioResponse</returns>
        public ApiResponse< TwilioResponse > CreateTwilioAccountWithHttpInfo (Twilio twilio)
        {
            // verify the required parameter 'twilio' is set
            if (twilio == null)
                throw new ApiException(400, "Missing required parameter 'twilio' when calling StorefrontApi->CreateTwilioAccount");

            var localVarPath = "/storefront/twilio/accounts";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (twilio != null && twilio.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(twilio); // http body (model) parameter
            }
            else
            {
                localVarPostBody = twilio; // byte array
            }

            // authentication (ultraCartBrowserApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key")))
            {
                localVarHeaderParams["x-ultracart-browser-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key");
            }
            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateTwilioAccount", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TwilioResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TwilioResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TwilioResponse)));
        }

        /// <summary>
        /// Create Twilio account 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="twilio">Twilio</param>
        /// <returns>Task of TwilioResponse</returns>
        public async System.Threading.Tasks.Task<TwilioResponse> CreateTwilioAccountAsync (Twilio twilio)
        {
             ApiResponse<TwilioResponse> localVarResponse = await CreateTwilioAccountAsyncWithHttpInfo(twilio);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create Twilio account 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="twilio">Twilio</param>
        /// <returns>Task of ApiResponse (TwilioResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TwilioResponse>> CreateTwilioAccountAsyncWithHttpInfo (Twilio twilio)
        {
            // verify the required parameter 'twilio' is set
            if (twilio == null)
                throw new ApiException(400, "Missing required parameter 'twilio' when calling StorefrontApi->CreateTwilioAccount");

            var localVarPath = "/storefront/twilio/accounts";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (twilio != null && twilio.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(twilio); // http body (model) parameter
            }
            else
            {
                localVarPostBody = twilio; // byte array
            }

            // authentication (ultraCartBrowserApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key")))
            {
                localVarHeaderParams["x-ultracart-browser-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key");
            }
            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateTwilioAccount", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TwilioResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TwilioResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TwilioResponse)));
        }

        /// <summary>
        /// Delete email campaignFolder 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="emailCampaignFolderUuid"></param>
        /// <returns>BaseResponse</returns>
        public BaseResponse DeleteEmailCampaignFolder (int? storefrontOid, string emailCampaignFolderUuid)
        {
             ApiResponse<BaseResponse> localVarResponse = DeleteEmailCampaignFolderWithHttpInfo(storefrontOid, emailCampaignFolderUuid);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Delete email campaignFolder 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="emailCampaignFolderUuid"></param>
        /// <returns>ApiResponse of BaseResponse</returns>
        public ApiResponse< BaseResponse > DeleteEmailCampaignFolderWithHttpInfo (int? storefrontOid, string emailCampaignFolderUuid)
        {
            // verify the required parameter 'storefrontOid' is set
            if (storefrontOid == null)
                throw new ApiException(400, "Missing required parameter 'storefrontOid' when calling StorefrontApi->DeleteEmailCampaignFolder");
            // verify the required parameter 'emailCampaignFolderUuid' is set
            if (emailCampaignFolderUuid == null)
                throw new ApiException(400, "Missing required parameter 'emailCampaignFolderUuid' when calling StorefrontApi->DeleteEmailCampaignFolder");

            var localVarPath = "/storefront/{storefront_oid}/email/campaign_folders/{email_campaign_folder_uuid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (storefrontOid != null) localVarPathParams.Add("storefront_oid", this.Configuration.ApiClient.ParameterToString(storefrontOid)); // path parameter
            if (emailCampaignFolderUuid != null) localVarPathParams.Add("email_campaign_folder_uuid", this.Configuration.ApiClient.ParameterToString(emailCampaignFolderUuid)); // path parameter

            // authentication (ultraCartBrowserApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key")))
            {
                localVarHeaderParams["x-ultracart-browser-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key");
            }
            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteEmailCampaignFolder", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BaseResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (BaseResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BaseResponse)));
        }

        /// <summary>
        /// Delete email campaignFolder 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="emailCampaignFolderUuid"></param>
        /// <returns>Task of BaseResponse</returns>
        public async System.Threading.Tasks.Task<BaseResponse> DeleteEmailCampaignFolderAsync (int? storefrontOid, string emailCampaignFolderUuid)
        {
             ApiResponse<BaseResponse> localVarResponse = await DeleteEmailCampaignFolderAsyncWithHttpInfo(storefrontOid, emailCampaignFolderUuid);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Delete email campaignFolder 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="emailCampaignFolderUuid"></param>
        /// <returns>Task of ApiResponse (BaseResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<BaseResponse>> DeleteEmailCampaignFolderAsyncWithHttpInfo (int? storefrontOid, string emailCampaignFolderUuid)
        {
            // verify the required parameter 'storefrontOid' is set
            if (storefrontOid == null)
                throw new ApiException(400, "Missing required parameter 'storefrontOid' when calling StorefrontApi->DeleteEmailCampaignFolder");
            // verify the required parameter 'emailCampaignFolderUuid' is set
            if (emailCampaignFolderUuid == null)
                throw new ApiException(400, "Missing required parameter 'emailCampaignFolderUuid' when calling StorefrontApi->DeleteEmailCampaignFolder");

            var localVarPath = "/storefront/{storefront_oid}/email/campaign_folders/{email_campaign_folder_uuid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (storefrontOid != null) localVarPathParams.Add("storefront_oid", this.Configuration.ApiClient.ParameterToString(storefrontOid)); // path parameter
            if (emailCampaignFolderUuid != null) localVarPathParams.Add("email_campaign_folder_uuid", this.Configuration.ApiClient.ParameterToString(emailCampaignFolderUuid)); // path parameter

            // authentication (ultraCartBrowserApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key")))
            {
                localVarHeaderParams["x-ultracart-browser-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key");
            }
            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteEmailCampaignFolder", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BaseResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (BaseResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BaseResponse)));
        }

        /// <summary>
        /// Delete communication sequence stats 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="commseqUuid"></param>
        /// <returns></returns>
        public void DeleteEmailCommseqStat (int? storefrontOid, string commseqUuid)
        {
             DeleteEmailCommseqStatWithHttpInfo(storefrontOid, commseqUuid);
        }

        /// <summary>
        /// Delete communication sequence stats 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="commseqUuid"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteEmailCommseqStatWithHttpInfo (int? storefrontOid, string commseqUuid)
        {
            // verify the required parameter 'storefrontOid' is set
            if (storefrontOid == null)
                throw new ApiException(400, "Missing required parameter 'storefrontOid' when calling StorefrontApi->DeleteEmailCommseqStat");
            // verify the required parameter 'commseqUuid' is set
            if (commseqUuid == null)
                throw new ApiException(400, "Missing required parameter 'commseqUuid' when calling StorefrontApi->DeleteEmailCommseqStat");

            var localVarPath = "/storefront/{storefront_oid}/email/commseqs/{commseq_uuid}/stat";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (storefrontOid != null) localVarPathParams.Add("storefront_oid", this.Configuration.ApiClient.ParameterToString(storefrontOid)); // path parameter
            if (commseqUuid != null) localVarPathParams.Add("commseq_uuid", this.Configuration.ApiClient.ParameterToString(commseqUuid)); // path parameter

            // authentication (ultraCartBrowserApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key")))
            {
                localVarHeaderParams["x-ultracart-browser-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key");
            }
            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteEmailCommseqStat", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete communication sequence stats 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="commseqUuid"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteEmailCommseqStatAsync (int? storefrontOid, string commseqUuid)
        {
             await DeleteEmailCommseqStatAsyncWithHttpInfo(storefrontOid, commseqUuid);

        }

        /// <summary>
        /// Delete communication sequence stats 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="commseqUuid"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteEmailCommseqStatAsyncWithHttpInfo (int? storefrontOid, string commseqUuid)
        {
            // verify the required parameter 'storefrontOid' is set
            if (storefrontOid == null)
                throw new ApiException(400, "Missing required parameter 'storefrontOid' when calling StorefrontApi->DeleteEmailCommseqStat");
            // verify the required parameter 'commseqUuid' is set
            if (commseqUuid == null)
                throw new ApiException(400, "Missing required parameter 'commseqUuid' when calling StorefrontApi->DeleteEmailCommseqStat");

            var localVarPath = "/storefront/{storefront_oid}/email/commseqs/{commseq_uuid}/stat";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (storefrontOid != null) localVarPathParams.Add("storefront_oid", this.Configuration.ApiClient.ParameterToString(storefrontOid)); // path parameter
            if (commseqUuid != null) localVarPathParams.Add("commseq_uuid", this.Configuration.ApiClient.ParameterToString(commseqUuid)); // path parameter

            // authentication (ultraCartBrowserApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key")))
            {
                localVarHeaderParams["x-ultracart-browser-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key");
            }
            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteEmailCommseqStat", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete email email 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="commseqEmailUuid"></param>
        /// <returns>BaseResponse</returns>
        public BaseResponse DeleteEmailEmail (int? storefrontOid, string commseqEmailUuid)
        {
             ApiResponse<BaseResponse> localVarResponse = DeleteEmailEmailWithHttpInfo(storefrontOid, commseqEmailUuid);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Delete email email 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="commseqEmailUuid"></param>
        /// <returns>ApiResponse of BaseResponse</returns>
        public ApiResponse< BaseResponse > DeleteEmailEmailWithHttpInfo (int? storefrontOid, string commseqEmailUuid)
        {
            // verify the required parameter 'storefrontOid' is set
            if (storefrontOid == null)
                throw new ApiException(400, "Missing required parameter 'storefrontOid' when calling StorefrontApi->DeleteEmailEmail");
            // verify the required parameter 'commseqEmailUuid' is set
            if (commseqEmailUuid == null)
                throw new ApiException(400, "Missing required parameter 'commseqEmailUuid' when calling StorefrontApi->DeleteEmailEmail");

            var localVarPath = "/storefront/{storefront_oid}/email/emails/{commseq_email_uuid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (storefrontOid != null) localVarPathParams.Add("storefront_oid", this.Configuration.ApiClient.ParameterToString(storefrontOid)); // path parameter
            if (commseqEmailUuid != null) localVarPathParams.Add("commseq_email_uuid", this.Configuration.ApiClient.ParameterToString(commseqEmailUuid)); // path parameter

            // authentication (ultraCartBrowserApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key")))
            {
                localVarHeaderParams["x-ultracart-browser-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key");
            }
            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteEmailEmail", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BaseResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (BaseResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BaseResponse)));
        }

        /// <summary>
        /// Delete email email 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="commseqEmailUuid"></param>
        /// <returns>Task of BaseResponse</returns>
        public async System.Threading.Tasks.Task<BaseResponse> DeleteEmailEmailAsync (int? storefrontOid, string commseqEmailUuid)
        {
             ApiResponse<BaseResponse> localVarResponse = await DeleteEmailEmailAsyncWithHttpInfo(storefrontOid, commseqEmailUuid);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Delete email email 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="commseqEmailUuid"></param>
        /// <returns>Task of ApiResponse (BaseResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<BaseResponse>> DeleteEmailEmailAsyncWithHttpInfo (int? storefrontOid, string commseqEmailUuid)
        {
            // verify the required parameter 'storefrontOid' is set
            if (storefrontOid == null)
                throw new ApiException(400, "Missing required parameter 'storefrontOid' when calling StorefrontApi->DeleteEmailEmail");
            // verify the required parameter 'commseqEmailUuid' is set
            if (commseqEmailUuid == null)
                throw new ApiException(400, "Missing required parameter 'commseqEmailUuid' when calling StorefrontApi->DeleteEmailEmail");

            var localVarPath = "/storefront/{storefront_oid}/email/emails/{commseq_email_uuid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (storefrontOid != null) localVarPathParams.Add("storefront_oid", this.Configuration.ApiClient.ParameterToString(storefrontOid)); // path parameter
            if (commseqEmailUuid != null) localVarPathParams.Add("commseq_email_uuid", this.Configuration.ApiClient.ParameterToString(commseqEmailUuid)); // path parameter

            // authentication (ultraCartBrowserApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key")))
            {
                localVarHeaderParams["x-ultracart-browser-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key");
            }
            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteEmailEmail", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BaseResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (BaseResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BaseResponse)));
        }

        /// <summary>
        /// Delete email flowFolder 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="emailFlowFolderUuid"></param>
        /// <returns>BaseResponse</returns>
        public BaseResponse DeleteEmailFlowFolder (int? storefrontOid, string emailFlowFolderUuid)
        {
             ApiResponse<BaseResponse> localVarResponse = DeleteEmailFlowFolderWithHttpInfo(storefrontOid, emailFlowFolderUuid);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Delete email flowFolder 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="emailFlowFolderUuid"></param>
        /// <returns>ApiResponse of BaseResponse</returns>
        public ApiResponse< BaseResponse > DeleteEmailFlowFolderWithHttpInfo (int? storefrontOid, string emailFlowFolderUuid)
        {
            // verify the required parameter 'storefrontOid' is set
            if (storefrontOid == null)
                throw new ApiException(400, "Missing required parameter 'storefrontOid' when calling StorefrontApi->DeleteEmailFlowFolder");
            // verify the required parameter 'emailFlowFolderUuid' is set
            if (emailFlowFolderUuid == null)
                throw new ApiException(400, "Missing required parameter 'emailFlowFolderUuid' when calling StorefrontApi->DeleteEmailFlowFolder");

            var localVarPath = "/storefront/{storefront_oid}/email/flow_folders/{email_flow_folder_uuid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (storefrontOid != null) localVarPathParams.Add("storefront_oid", this.Configuration.ApiClient.ParameterToString(storefrontOid)); // path parameter
            if (emailFlowFolderUuid != null) localVarPathParams.Add("email_flow_folder_uuid", this.Configuration.ApiClient.ParameterToString(emailFlowFolderUuid)); // path parameter

            // authentication (ultraCartBrowserApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key")))
            {
                localVarHeaderParams["x-ultracart-browser-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key");
            }
            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteEmailFlowFolder", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BaseResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (BaseResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BaseResponse)));
        }

        /// <summary>
        /// Delete email flowFolder 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="emailFlowFolderUuid"></param>
        /// <returns>Task of BaseResponse</returns>
        public async System.Threading.Tasks.Task<BaseResponse> DeleteEmailFlowFolderAsync (int? storefrontOid, string emailFlowFolderUuid)
        {
             ApiResponse<BaseResponse> localVarResponse = await DeleteEmailFlowFolderAsyncWithHttpInfo(storefrontOid, emailFlowFolderUuid);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Delete email flowFolder 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="emailFlowFolderUuid"></param>
        /// <returns>Task of ApiResponse (BaseResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<BaseResponse>> DeleteEmailFlowFolderAsyncWithHttpInfo (int? storefrontOid, string emailFlowFolderUuid)
        {
            // verify the required parameter 'storefrontOid' is set
            if (storefrontOid == null)
                throw new ApiException(400, "Missing required parameter 'storefrontOid' when calling StorefrontApi->DeleteEmailFlowFolder");
            // verify the required parameter 'emailFlowFolderUuid' is set
            if (emailFlowFolderUuid == null)
                throw new ApiException(400, "Missing required parameter 'emailFlowFolderUuid' when calling StorefrontApi->DeleteEmailFlowFolder");

            var localVarPath = "/storefront/{storefront_oid}/email/flow_folders/{email_flow_folder_uuid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (storefrontOid != null) localVarPathParams.Add("storefront_oid", this.Configuration.ApiClient.ParameterToString(storefrontOid)); // path parameter
            if (emailFlowFolderUuid != null) localVarPathParams.Add("email_flow_folder_uuid", this.Configuration.ApiClient.ParameterToString(emailFlowFolderUuid)); // path parameter

            // authentication (ultraCartBrowserApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key")))
            {
                localVarHeaderParams["x-ultracart-browser-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key");
            }
            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteEmailFlowFolder", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BaseResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (BaseResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BaseResponse)));
        }

        /// <summary>
        /// Delete email list customer 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="emailListUuid"></param>
        /// <param name="emailCustomerUuid"></param>
        /// <returns>BaseResponse</returns>
        public BaseResponse DeleteEmailListCustomer (int? storefrontOid, string emailListUuid, string emailCustomerUuid)
        {
             ApiResponse<BaseResponse> localVarResponse = DeleteEmailListCustomerWithHttpInfo(storefrontOid, emailListUuid, emailCustomerUuid);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Delete email list customer 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="emailListUuid"></param>
        /// <param name="emailCustomerUuid"></param>
        /// <returns>ApiResponse of BaseResponse</returns>
        public ApiResponse< BaseResponse > DeleteEmailListCustomerWithHttpInfo (int? storefrontOid, string emailListUuid, string emailCustomerUuid)
        {
            // verify the required parameter 'storefrontOid' is set
            if (storefrontOid == null)
                throw new ApiException(400, "Missing required parameter 'storefrontOid' when calling StorefrontApi->DeleteEmailListCustomer");
            // verify the required parameter 'emailListUuid' is set
            if (emailListUuid == null)
                throw new ApiException(400, "Missing required parameter 'emailListUuid' when calling StorefrontApi->DeleteEmailListCustomer");
            // verify the required parameter 'emailCustomerUuid' is set
            if (emailCustomerUuid == null)
                throw new ApiException(400, "Missing required parameter 'emailCustomerUuid' when calling StorefrontApi->DeleteEmailListCustomer");

            var localVarPath = "/storefront/{storefront_oid}/email/lists/{email_list_uuid}/customers/{email_customer_uuid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (storefrontOid != null) localVarPathParams.Add("storefront_oid", this.Configuration.ApiClient.ParameterToString(storefrontOid)); // path parameter
            if (emailListUuid != null) localVarPathParams.Add("email_list_uuid", this.Configuration.ApiClient.ParameterToString(emailListUuid)); // path parameter
            if (emailCustomerUuid != null) localVarPathParams.Add("email_customer_uuid", this.Configuration.ApiClient.ParameterToString(emailCustomerUuid)); // path parameter

            // authentication (ultraCartBrowserApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key")))
            {
                localVarHeaderParams["x-ultracart-browser-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key");
            }
            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteEmailListCustomer", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BaseResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (BaseResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BaseResponse)));
        }

        /// <summary>
        /// Delete email list customer 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="emailListUuid"></param>
        /// <param name="emailCustomerUuid"></param>
        /// <returns>Task of BaseResponse</returns>
        public async System.Threading.Tasks.Task<BaseResponse> DeleteEmailListCustomerAsync (int? storefrontOid, string emailListUuid, string emailCustomerUuid)
        {
             ApiResponse<BaseResponse> localVarResponse = await DeleteEmailListCustomerAsyncWithHttpInfo(storefrontOid, emailListUuid, emailCustomerUuid);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Delete email list customer 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="emailListUuid"></param>
        /// <param name="emailCustomerUuid"></param>
        /// <returns>Task of ApiResponse (BaseResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<BaseResponse>> DeleteEmailListCustomerAsyncWithHttpInfo (int? storefrontOid, string emailListUuid, string emailCustomerUuid)
        {
            // verify the required parameter 'storefrontOid' is set
            if (storefrontOid == null)
                throw new ApiException(400, "Missing required parameter 'storefrontOid' when calling StorefrontApi->DeleteEmailListCustomer");
            // verify the required parameter 'emailListUuid' is set
            if (emailListUuid == null)
                throw new ApiException(400, "Missing required parameter 'emailListUuid' when calling StorefrontApi->DeleteEmailListCustomer");
            // verify the required parameter 'emailCustomerUuid' is set
            if (emailCustomerUuid == null)
                throw new ApiException(400, "Missing required parameter 'emailCustomerUuid' when calling StorefrontApi->DeleteEmailListCustomer");

            var localVarPath = "/storefront/{storefront_oid}/email/lists/{email_list_uuid}/customers/{email_customer_uuid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (storefrontOid != null) localVarPathParams.Add("storefront_oid", this.Configuration.ApiClient.ParameterToString(storefrontOid)); // path parameter
            if (emailListUuid != null) localVarPathParams.Add("email_list_uuid", this.Configuration.ApiClient.ParameterToString(emailListUuid)); // path parameter
            if (emailCustomerUuid != null) localVarPathParams.Add("email_customer_uuid", this.Configuration.ApiClient.ParameterToString(emailCustomerUuid)); // path parameter

            // authentication (ultraCartBrowserApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key")))
            {
                localVarHeaderParams["x-ultracart-browser-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key");
            }
            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteEmailListCustomer", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BaseResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (BaseResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BaseResponse)));
        }

        /// <summary>
        /// Delete email ListSegmentFolder 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="emailListSegmentFolderUuid"></param>
        /// <returns>BaseResponse</returns>
        public BaseResponse DeleteEmailListSegmentFolder (int? storefrontOid, string emailListSegmentFolderUuid)
        {
             ApiResponse<BaseResponse> localVarResponse = DeleteEmailListSegmentFolderWithHttpInfo(storefrontOid, emailListSegmentFolderUuid);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Delete email ListSegmentFolder 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="emailListSegmentFolderUuid"></param>
        /// <returns>ApiResponse of BaseResponse</returns>
        public ApiResponse< BaseResponse > DeleteEmailListSegmentFolderWithHttpInfo (int? storefrontOid, string emailListSegmentFolderUuid)
        {
            // verify the required parameter 'storefrontOid' is set
            if (storefrontOid == null)
                throw new ApiException(400, "Missing required parameter 'storefrontOid' when calling StorefrontApi->DeleteEmailListSegmentFolder");
            // verify the required parameter 'emailListSegmentFolderUuid' is set
            if (emailListSegmentFolderUuid == null)
                throw new ApiException(400, "Missing required parameter 'emailListSegmentFolderUuid' when calling StorefrontApi->DeleteEmailListSegmentFolder");

            var localVarPath = "/storefront/{storefront_oid}/email/list_segment_folders/{email_list_segment_folder_uuid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (storefrontOid != null) localVarPathParams.Add("storefront_oid", this.Configuration.ApiClient.ParameterToString(storefrontOid)); // path parameter
            if (emailListSegmentFolderUuid != null) localVarPathParams.Add("email_list_segment_folder_uuid", this.Configuration.ApiClient.ParameterToString(emailListSegmentFolderUuid)); // path parameter

            // authentication (ultraCartBrowserApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key")))
            {
                localVarHeaderParams["x-ultracart-browser-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key");
            }
            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteEmailListSegmentFolder", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BaseResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (BaseResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BaseResponse)));
        }

        /// <summary>
        /// Delete email ListSegmentFolder 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="emailListSegmentFolderUuid"></param>
        /// <returns>Task of BaseResponse</returns>
        public async System.Threading.Tasks.Task<BaseResponse> DeleteEmailListSegmentFolderAsync (int? storefrontOid, string emailListSegmentFolderUuid)
        {
             ApiResponse<BaseResponse> localVarResponse = await DeleteEmailListSegmentFolderAsyncWithHttpInfo(storefrontOid, emailListSegmentFolderUuid);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Delete email ListSegmentFolder 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="emailListSegmentFolderUuid"></param>
        /// <returns>Task of ApiResponse (BaseResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<BaseResponse>> DeleteEmailListSegmentFolderAsyncWithHttpInfo (int? storefrontOid, string emailListSegmentFolderUuid)
        {
            // verify the required parameter 'storefrontOid' is set
            if (storefrontOid == null)
                throw new ApiException(400, "Missing required parameter 'storefrontOid' when calling StorefrontApi->DeleteEmailListSegmentFolder");
            // verify the required parameter 'emailListSegmentFolderUuid' is set
            if (emailListSegmentFolderUuid == null)
                throw new ApiException(400, "Missing required parameter 'emailListSegmentFolderUuid' when calling StorefrontApi->DeleteEmailListSegmentFolder");

            var localVarPath = "/storefront/{storefront_oid}/email/list_segment_folders/{email_list_segment_folder_uuid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (storefrontOid != null) localVarPathParams.Add("storefront_oid", this.Configuration.ApiClient.ParameterToString(storefrontOid)); // path parameter
            if (emailListSegmentFolderUuid != null) localVarPathParams.Add("email_list_segment_folder_uuid", this.Configuration.ApiClient.ParameterToString(emailListSegmentFolderUuid)); // path parameter

            // authentication (ultraCartBrowserApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key")))
            {
                localVarHeaderParams["x-ultracart-browser-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key");
            }
            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteEmailListSegmentFolder", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BaseResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (BaseResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BaseResponse)));
        }

        /// <summary>
        /// Delete email postcard 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="commseqPostcardUuid"></param>
        /// <returns>BaseResponse</returns>
        public BaseResponse DeleteEmailPostcard (int? storefrontOid, string commseqPostcardUuid)
        {
             ApiResponse<BaseResponse> localVarResponse = DeleteEmailPostcardWithHttpInfo(storefrontOid, commseqPostcardUuid);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Delete email postcard 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="commseqPostcardUuid"></param>
        /// <returns>ApiResponse of BaseResponse</returns>
        public ApiResponse< BaseResponse > DeleteEmailPostcardWithHttpInfo (int? storefrontOid, string commseqPostcardUuid)
        {
            // verify the required parameter 'storefrontOid' is set
            if (storefrontOid == null)
                throw new ApiException(400, "Missing required parameter 'storefrontOid' when calling StorefrontApi->DeleteEmailPostcard");
            // verify the required parameter 'commseqPostcardUuid' is set
            if (commseqPostcardUuid == null)
                throw new ApiException(400, "Missing required parameter 'commseqPostcardUuid' when calling StorefrontApi->DeleteEmailPostcard");

            var localVarPath = "/storefront/{storefront_oid}/email/postcards/{commseq_postcard_uuid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (storefrontOid != null) localVarPathParams.Add("storefront_oid", this.Configuration.ApiClient.ParameterToString(storefrontOid)); // path parameter
            if (commseqPostcardUuid != null) localVarPathParams.Add("commseq_postcard_uuid", this.Configuration.ApiClient.ParameterToString(commseqPostcardUuid)); // path parameter

            // authentication (ultraCartBrowserApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key")))
            {
                localVarHeaderParams["x-ultracart-browser-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key");
            }
            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteEmailPostcard", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BaseResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (BaseResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BaseResponse)));
        }

        /// <summary>
        /// Delete email postcard 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="commseqPostcardUuid"></param>
        /// <returns>Task of BaseResponse</returns>
        public async System.Threading.Tasks.Task<BaseResponse> DeleteEmailPostcardAsync (int? storefrontOid, string commseqPostcardUuid)
        {
             ApiResponse<BaseResponse> localVarResponse = await DeleteEmailPostcardAsyncWithHttpInfo(storefrontOid, commseqPostcardUuid);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Delete email postcard 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="commseqPostcardUuid"></param>
        /// <returns>Task of ApiResponse (BaseResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<BaseResponse>> DeleteEmailPostcardAsyncWithHttpInfo (int? storefrontOid, string commseqPostcardUuid)
        {
            // verify the required parameter 'storefrontOid' is set
            if (storefrontOid == null)
                throw new ApiException(400, "Missing required parameter 'storefrontOid' when calling StorefrontApi->DeleteEmailPostcard");
            // verify the required parameter 'commseqPostcardUuid' is set
            if (commseqPostcardUuid == null)
                throw new ApiException(400, "Missing required parameter 'commseqPostcardUuid' when calling StorefrontApi->DeleteEmailPostcard");

            var localVarPath = "/storefront/{storefront_oid}/email/postcards/{commseq_postcard_uuid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (storefrontOid != null) localVarPathParams.Add("storefront_oid", this.Configuration.ApiClient.ParameterToString(storefrontOid)); // path parameter
            if (commseqPostcardUuid != null) localVarPathParams.Add("commseq_postcard_uuid", this.Configuration.ApiClient.ParameterToString(commseqPostcardUuid)); // path parameter

            // authentication (ultraCartBrowserApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key")))
            {
                localVarHeaderParams["x-ultracart-browser-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key");
            }
            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteEmailPostcard", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BaseResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (BaseResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BaseResponse)));
        }

        /// <summary>
        /// delete email campaign 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="domain"></param>
        /// <returns>BaseResponse</returns>
        public BaseResponse DeleteEmailSendingDomain (string domain)
        {
             ApiResponse<BaseResponse> localVarResponse = DeleteEmailSendingDomainWithHttpInfo(domain);
             return localVarResponse.Data;
        }

        /// <summary>
        /// delete email campaign 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="domain"></param>
        /// <returns>ApiResponse of BaseResponse</returns>
        public ApiResponse< BaseResponse > DeleteEmailSendingDomainWithHttpInfo (string domain)
        {
            // verify the required parameter 'domain' is set
            if (domain == null)
                throw new ApiException(400, "Missing required parameter 'domain' when calling StorefrontApi->DeleteEmailSendingDomain");

            var localVarPath = "/storefront/email/sending_domains/{domain}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (domain != null) localVarPathParams.Add("domain", this.Configuration.ApiClient.ParameterToString(domain)); // path parameter

            // authentication (ultraCartBrowserApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key")))
            {
                localVarHeaderParams["x-ultracart-browser-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key");
            }
            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteEmailSendingDomain", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BaseResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (BaseResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BaseResponse)));
        }

        /// <summary>
        /// delete email campaign 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="domain"></param>
        /// <returns>Task of BaseResponse</returns>
        public async System.Threading.Tasks.Task<BaseResponse> DeleteEmailSendingDomainAsync (string domain)
        {
             ApiResponse<BaseResponse> localVarResponse = await DeleteEmailSendingDomainAsyncWithHttpInfo(domain);
             return localVarResponse.Data;

        }

        /// <summary>
        /// delete email campaign 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="domain"></param>
        /// <returns>Task of ApiResponse (BaseResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<BaseResponse>> DeleteEmailSendingDomainAsyncWithHttpInfo (string domain)
        {
            // verify the required parameter 'domain' is set
            if (domain == null)
                throw new ApiException(400, "Missing required parameter 'domain' when calling StorefrontApi->DeleteEmailSendingDomain");

            var localVarPath = "/storefront/email/sending_domains/{domain}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (domain != null) localVarPathParams.Add("domain", this.Configuration.ApiClient.ParameterToString(domain)); // path parameter

            // authentication (ultraCartBrowserApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key")))
            {
                localVarHeaderParams["x-ultracart-browser-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key");
            }
            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteEmailSendingDomain", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BaseResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (BaseResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BaseResponse)));
        }

        /// <summary>
        /// Delete experiment 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="storefrontExperimentOid"></param>
        /// <returns></returns>
        public void DeleteExperiment (int? storefrontOid, int? storefrontExperimentOid)
        {
             DeleteExperimentWithHttpInfo(storefrontOid, storefrontExperimentOid);
        }

        /// <summary>
        /// Delete experiment 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="storefrontExperimentOid"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteExperimentWithHttpInfo (int? storefrontOid, int? storefrontExperimentOid)
        {
            // verify the required parameter 'storefrontOid' is set
            if (storefrontOid == null)
                throw new ApiException(400, "Missing required parameter 'storefrontOid' when calling StorefrontApi->DeleteExperiment");
            // verify the required parameter 'storefrontExperimentOid' is set
            if (storefrontExperimentOid == null)
                throw new ApiException(400, "Missing required parameter 'storefrontExperimentOid' when calling StorefrontApi->DeleteExperiment");

            var localVarPath = "/storefront/{storefront_oid}/experiments/{storefront_experiment_oid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (storefrontOid != null) localVarPathParams.Add("storefront_oid", this.Configuration.ApiClient.ParameterToString(storefrontOid)); // path parameter
            if (storefrontExperimentOid != null) localVarPathParams.Add("storefront_experiment_oid", this.Configuration.ApiClient.ParameterToString(storefrontExperimentOid)); // path parameter

            // authentication (ultraCartBrowserApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key")))
            {
                localVarHeaderParams["x-ultracart-browser-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key");
            }
            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteExperiment", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete experiment 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="storefrontExperimentOid"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteExperimentAsync (int? storefrontOid, int? storefrontExperimentOid)
        {
             await DeleteExperimentAsyncWithHttpInfo(storefrontOid, storefrontExperimentOid);

        }

        /// <summary>
        /// Delete experiment 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="storefrontExperimentOid"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteExperimentAsyncWithHttpInfo (int? storefrontOid, int? storefrontExperimentOid)
        {
            // verify the required parameter 'storefrontOid' is set
            if (storefrontOid == null)
                throw new ApiException(400, "Missing required parameter 'storefrontOid' when calling StorefrontApi->DeleteExperiment");
            // verify the required parameter 'storefrontExperimentOid' is set
            if (storefrontExperimentOid == null)
                throw new ApiException(400, "Missing required parameter 'storefrontExperimentOid' when calling StorefrontApi->DeleteExperiment");

            var localVarPath = "/storefront/{storefront_oid}/experiments/{storefront_experiment_oid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (storefrontOid != null) localVarPathParams.Add("storefront_oid", this.Configuration.ApiClient.ParameterToString(storefrontOid)); // path parameter
            if (storefrontExperimentOid != null) localVarPathParams.Add("storefront_experiment_oid", this.Configuration.ApiClient.ParameterToString(storefrontExperimentOid)); // path parameter

            // authentication (ultraCartBrowserApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key")))
            {
                localVarHeaderParams["x-ultracart-browser-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key");
            }
            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteExperiment", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete screen recording heatmap Delete screen recording heatmap 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="query">Query</param>
        /// <returns></returns>
        public void DeleteHeatmap (int? storefrontOid, ScreenRecordingHeatmapReset query)
        {
             DeleteHeatmapWithHttpInfo(storefrontOid, query);
        }

        /// <summary>
        /// Delete screen recording heatmap Delete screen recording heatmap 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="query">Query</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteHeatmapWithHttpInfo (int? storefrontOid, ScreenRecordingHeatmapReset query)
        {
            // verify the required parameter 'storefrontOid' is set
            if (storefrontOid == null)
                throw new ApiException(400, "Missing required parameter 'storefrontOid' when calling StorefrontApi->DeleteHeatmap");
            // verify the required parameter 'query' is set
            if (query == null)
                throw new ApiException(400, "Missing required parameter 'query' when calling StorefrontApi->DeleteHeatmap");

            var localVarPath = "/storefront/{storefront_oid}/screen_recordings/heatmap";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (storefrontOid != null) localVarPathParams.Add("storefront_oid", this.Configuration.ApiClient.ParameterToString(storefrontOid)); // path parameter
            if (query != null && query.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(query); // http body (model) parameter
            }
            else
            {
                localVarPostBody = query; // byte array
            }

            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteHeatmap", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete screen recording heatmap Delete screen recording heatmap 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="query">Query</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteHeatmapAsync (int? storefrontOid, ScreenRecordingHeatmapReset query)
        {
             await DeleteHeatmapAsyncWithHttpInfo(storefrontOid, query);

        }

        /// <summary>
        /// Delete screen recording heatmap Delete screen recording heatmap 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="query">Query</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteHeatmapAsyncWithHttpInfo (int? storefrontOid, ScreenRecordingHeatmapReset query)
        {
            // verify the required parameter 'storefrontOid' is set
            if (storefrontOid == null)
                throw new ApiException(400, "Missing required parameter 'storefrontOid' when calling StorefrontApi->DeleteHeatmap");
            // verify the required parameter 'query' is set
            if (query == null)
                throw new ApiException(400, "Missing required parameter 'query' when calling StorefrontApi->DeleteHeatmap");

            var localVarPath = "/storefront/{storefront_oid}/screen_recordings/heatmap";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (storefrontOid != null) localVarPathParams.Add("storefront_oid", this.Configuration.ApiClient.ParameterToString(storefrontOid)); // path parameter
            if (query != null && query.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(query); // http body (model) parameter
            }
            else
            {
                localVarPostBody = query; // byte array
            }

            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteHeatmap", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete library item 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="libraryItemOid"></param>
        /// <returns></returns>
        public void DeleteLibraryItem (int? libraryItemOid)
        {
             DeleteLibraryItemWithHttpInfo(libraryItemOid);
        }

        /// <summary>
        /// Delete library item 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="libraryItemOid"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteLibraryItemWithHttpInfo (int? libraryItemOid)
        {
            // verify the required parameter 'libraryItemOid' is set
            if (libraryItemOid == null)
                throw new ApiException(400, "Missing required parameter 'libraryItemOid' when calling StorefrontApi->DeleteLibraryItem");

            var localVarPath = "/storefront/code_library/{library_item_oid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (libraryItemOid != null) localVarPathParams.Add("library_item_oid", this.Configuration.ApiClient.ParameterToString(libraryItemOid)); // path parameter

            // authentication (ultraCartBrowserApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key")))
            {
                localVarHeaderParams["x-ultracart-browser-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key");
            }
            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteLibraryItem", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete library item 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="libraryItemOid"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteLibraryItemAsync (int? libraryItemOid)
        {
             await DeleteLibraryItemAsyncWithHttpInfo(libraryItemOid);

        }

        /// <summary>
        /// Delete library item 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="libraryItemOid"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteLibraryItemAsyncWithHttpInfo (int? libraryItemOid)
        {
            // verify the required parameter 'libraryItemOid' is set
            if (libraryItemOid == null)
                throw new ApiException(400, "Missing required parameter 'libraryItemOid' when calling StorefrontApi->DeleteLibraryItem");

            var localVarPath = "/storefront/code_library/{library_item_oid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (libraryItemOid != null) localVarPathParams.Add("library_item_oid", this.Configuration.ApiClient.ParameterToString(libraryItemOid)); // path parameter

            // authentication (ultraCartBrowserApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key")))
            {
                localVarHeaderParams["x-ultracart-browser-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key");
            }
            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteLibraryItem", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete all published versions for a library item, including anything in review. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="libraryItemOid"></param>
        /// <returns></returns>
        public void DeleteLibraryItemPublishedVersions (int? libraryItemOid)
        {
             DeleteLibraryItemPublishedVersionsWithHttpInfo(libraryItemOid);
        }

        /// <summary>
        /// Delete all published versions for a library item, including anything in review. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="libraryItemOid"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteLibraryItemPublishedVersionsWithHttpInfo (int? libraryItemOid)
        {
            // verify the required parameter 'libraryItemOid' is set
            if (libraryItemOid == null)
                throw new ApiException(400, "Missing required parameter 'libraryItemOid' when calling StorefrontApi->DeleteLibraryItemPublishedVersions");

            var localVarPath = "/storefront/code_library/{library_item_oid}/published_versions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (libraryItemOid != null) localVarPathParams.Add("library_item_oid", this.Configuration.ApiClient.ParameterToString(libraryItemOid)); // path parameter

            // authentication (ultraCartBrowserApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key")))
            {
                localVarHeaderParams["x-ultracart-browser-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key");
            }
            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteLibraryItemPublishedVersions", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete all published versions for a library item, including anything in review. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="libraryItemOid"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteLibraryItemPublishedVersionsAsync (int? libraryItemOid)
        {
             await DeleteLibraryItemPublishedVersionsAsyncWithHttpInfo(libraryItemOid);

        }

        /// <summary>
        /// Delete all published versions for a library item, including anything in review. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="libraryItemOid"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteLibraryItemPublishedVersionsAsyncWithHttpInfo (int? libraryItemOid)
        {
            // verify the required parameter 'libraryItemOid' is set
            if (libraryItemOid == null)
                throw new ApiException(400, "Missing required parameter 'libraryItemOid' when calling StorefrontApi->DeleteLibraryItemPublishedVersions");

            var localVarPath = "/storefront/code_library/{library_item_oid}/published_versions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (libraryItemOid != null) localVarPathParams.Add("library_item_oid", this.Configuration.ApiClient.ParameterToString(libraryItemOid)); // path parameter

            // authentication (ultraCartBrowserApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key")))
            {
                localVarHeaderParams["x-ultracart-browser-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key");
            }
            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteLibraryItemPublishedVersions", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete screen recording segment 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="screenRecordingSegmentOid"></param>
        /// <returns></returns>
        public void DeleteScreenRecordingSegment (int? storefrontOid, int? screenRecordingSegmentOid)
        {
             DeleteScreenRecordingSegmentWithHttpInfo(storefrontOid, screenRecordingSegmentOid);
        }

        /// <summary>
        /// Delete screen recording segment 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="screenRecordingSegmentOid"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteScreenRecordingSegmentWithHttpInfo (int? storefrontOid, int? screenRecordingSegmentOid)
        {
            // verify the required parameter 'storefrontOid' is set
            if (storefrontOid == null)
                throw new ApiException(400, "Missing required parameter 'storefrontOid' when calling StorefrontApi->DeleteScreenRecordingSegment");
            // verify the required parameter 'screenRecordingSegmentOid' is set
            if (screenRecordingSegmentOid == null)
                throw new ApiException(400, "Missing required parameter 'screenRecordingSegmentOid' when calling StorefrontApi->DeleteScreenRecordingSegment");

            var localVarPath = "/storefront/{storefront_oid}/screen_recordings/segments/{screen_recording_segment_oid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (storefrontOid != null) localVarPathParams.Add("storefront_oid", this.Configuration.ApiClient.ParameterToString(storefrontOid)); // path parameter
            if (screenRecordingSegmentOid != null) localVarPathParams.Add("screen_recording_segment_oid", this.Configuration.ApiClient.ParameterToString(screenRecordingSegmentOid)); // path parameter

            // authentication (ultraCartBrowserApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key")))
            {
                localVarHeaderParams["x-ultracart-browser-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key");
            }
            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteScreenRecordingSegment", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete screen recording segment 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="screenRecordingSegmentOid"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteScreenRecordingSegmentAsync (int? storefrontOid, int? screenRecordingSegmentOid)
        {
             await DeleteScreenRecordingSegmentAsyncWithHttpInfo(storefrontOid, screenRecordingSegmentOid);

        }

        /// <summary>
        /// Delete screen recording segment 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="screenRecordingSegmentOid"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteScreenRecordingSegmentAsyncWithHttpInfo (int? storefrontOid, int? screenRecordingSegmentOid)
        {
            // verify the required parameter 'storefrontOid' is set
            if (storefrontOid == null)
                throw new ApiException(400, "Missing required parameter 'storefrontOid' when calling StorefrontApi->DeleteScreenRecordingSegment");
            // verify the required parameter 'screenRecordingSegmentOid' is set
            if (screenRecordingSegmentOid == null)
                throw new ApiException(400, "Missing required parameter 'screenRecordingSegmentOid' when calling StorefrontApi->DeleteScreenRecordingSegment");

            var localVarPath = "/storefront/{storefront_oid}/screen_recordings/segments/{screen_recording_segment_oid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (storefrontOid != null) localVarPathParams.Add("storefront_oid", this.Configuration.ApiClient.ParameterToString(storefrontOid)); // path parameter
            if (screenRecordingSegmentOid != null) localVarPathParams.Add("screen_recording_segment_oid", this.Configuration.ApiClient.ParameterToString(screenRecordingSegmentOid)); // path parameter

            // authentication (ultraCartBrowserApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key")))
            {
                localVarHeaderParams["x-ultracart-browser-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key");
            }
            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteScreenRecordingSegment", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// delete Twilio account 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="espTwilioUuid"></param>
        /// <returns>BaseResponse</returns>
        public BaseResponse DeleteTwilioAccount (string espTwilioUuid)
        {
             ApiResponse<BaseResponse> localVarResponse = DeleteTwilioAccountWithHttpInfo(espTwilioUuid);
             return localVarResponse.Data;
        }

        /// <summary>
        /// delete Twilio account 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="espTwilioUuid"></param>
        /// <returns>ApiResponse of BaseResponse</returns>
        public ApiResponse< BaseResponse > DeleteTwilioAccountWithHttpInfo (string espTwilioUuid)
        {
            // verify the required parameter 'espTwilioUuid' is set
            if (espTwilioUuid == null)
                throw new ApiException(400, "Missing required parameter 'espTwilioUuid' when calling StorefrontApi->DeleteTwilioAccount");

            var localVarPath = "/storefront/twilio/accounts/{esp_twilio_uuid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (espTwilioUuid != null) localVarPathParams.Add("esp_twilio_uuid", this.Configuration.ApiClient.ParameterToString(espTwilioUuid)); // path parameter

            // authentication (ultraCartBrowserApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key")))
            {
                localVarHeaderParams["x-ultracart-browser-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key");
            }
            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteTwilioAccount", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BaseResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (BaseResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BaseResponse)));
        }

        /// <summary>
        /// delete Twilio account 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="espTwilioUuid"></param>
        /// <returns>Task of BaseResponse</returns>
        public async System.Threading.Tasks.Task<BaseResponse> DeleteTwilioAccountAsync (string espTwilioUuid)
        {
             ApiResponse<BaseResponse> localVarResponse = await DeleteTwilioAccountAsyncWithHttpInfo(espTwilioUuid);
             return localVarResponse.Data;

        }

        /// <summary>
        /// delete Twilio account 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="espTwilioUuid"></param>
        /// <returns>Task of ApiResponse (BaseResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<BaseResponse>> DeleteTwilioAccountAsyncWithHttpInfo (string espTwilioUuid)
        {
            // verify the required parameter 'espTwilioUuid' is set
            if (espTwilioUuid == null)
                throw new ApiException(400, "Missing required parameter 'espTwilioUuid' when calling StorefrontApi->DeleteTwilioAccount");

            var localVarPath = "/storefront/twilio/accounts/{esp_twilio_uuid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (espTwilioUuid != null) localVarPathParams.Add("esp_twilio_uuid", this.Configuration.ApiClient.ParameterToString(espTwilioUuid)); // path parameter

            // authentication (ultraCartBrowserApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key")))
            {
                localVarHeaderParams["x-ultracart-browser-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key");
            }
            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteTwilioAccount", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BaseResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (BaseResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BaseResponse)));
        }

        /// <summary>
        /// Duplicate library item. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="libraryItemOid"></param>
        /// <returns>LibraryItemResponse</returns>
        public LibraryItemResponse DuplicateLibraryItem (int? libraryItemOid)
        {
             ApiResponse<LibraryItemResponse> localVarResponse = DuplicateLibraryItemWithHttpInfo(libraryItemOid);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Duplicate library item. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="libraryItemOid"></param>
        /// <returns>ApiResponse of LibraryItemResponse</returns>
        public ApiResponse< LibraryItemResponse > DuplicateLibraryItemWithHttpInfo (int? libraryItemOid)
        {
            // verify the required parameter 'libraryItemOid' is set
            if (libraryItemOid == null)
                throw new ApiException(400, "Missing required parameter 'libraryItemOid' when calling StorefrontApi->DuplicateLibraryItem");

            var localVarPath = "/storefront/code_library/{library_item_oid}/duplicate";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (libraryItemOid != null) localVarPathParams.Add("library_item_oid", this.Configuration.ApiClient.ParameterToString(libraryItemOid)); // path parameter

            // authentication (ultraCartBrowserApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key")))
            {
                localVarHeaderParams["x-ultracart-browser-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key");
            }
            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DuplicateLibraryItem", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<LibraryItemResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (LibraryItemResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(LibraryItemResponse)));
        }

        /// <summary>
        /// Duplicate library item. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="libraryItemOid"></param>
        /// <returns>Task of LibraryItemResponse</returns>
        public async System.Threading.Tasks.Task<LibraryItemResponse> DuplicateLibraryItemAsync (int? libraryItemOid)
        {
             ApiResponse<LibraryItemResponse> localVarResponse = await DuplicateLibraryItemAsyncWithHttpInfo(libraryItemOid);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Duplicate library item. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="libraryItemOid"></param>
        /// <returns>Task of ApiResponse (LibraryItemResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<LibraryItemResponse>> DuplicateLibraryItemAsyncWithHttpInfo (int? libraryItemOid)
        {
            // verify the required parameter 'libraryItemOid' is set
            if (libraryItemOid == null)
                throw new ApiException(400, "Missing required parameter 'libraryItemOid' when calling StorefrontApi->DuplicateLibraryItem");

            var localVarPath = "/storefront/code_library/{library_item_oid}/duplicate";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (libraryItemOid != null) localVarPathParams.Add("library_item_oid", this.Configuration.ApiClient.ParameterToString(libraryItemOid)); // path parameter

            // authentication (ultraCartBrowserApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key")))
            {
                localVarHeaderParams["x-ultracart-browser-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key");
            }
            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DuplicateLibraryItem", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<LibraryItemResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (LibraryItemResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(LibraryItemResponse)));
        }

        /// <summary>
        /// Update favorite flag on screen recording Update favorite flag on screen recording 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="screenRecordingUuid"></param>
        /// <returns></returns>
        public void FavoriteScreenRecording (int? storefrontOid, string screenRecordingUuid)
        {
             FavoriteScreenRecordingWithHttpInfo(storefrontOid, screenRecordingUuid);
        }

        /// <summary>
        /// Update favorite flag on screen recording Update favorite flag on screen recording 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="screenRecordingUuid"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> FavoriteScreenRecordingWithHttpInfo (int? storefrontOid, string screenRecordingUuid)
        {
            // verify the required parameter 'storefrontOid' is set
            if (storefrontOid == null)
                throw new ApiException(400, "Missing required parameter 'storefrontOid' when calling StorefrontApi->FavoriteScreenRecording");
            // verify the required parameter 'screenRecordingUuid' is set
            if (screenRecordingUuid == null)
                throw new ApiException(400, "Missing required parameter 'screenRecordingUuid' when calling StorefrontApi->FavoriteScreenRecording");

            var localVarPath = "/storefront/{storefront_oid}/screen_recordings/{screen_recording_uuid}/favorite";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (storefrontOid != null) localVarPathParams.Add("storefront_oid", this.Configuration.ApiClient.ParameterToString(storefrontOid)); // path parameter
            if (screenRecordingUuid != null) localVarPathParams.Add("screen_recording_uuid", this.Configuration.ApiClient.ParameterToString(screenRecordingUuid)); // path parameter

            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FavoriteScreenRecording", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Update favorite flag on screen recording Update favorite flag on screen recording 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="screenRecordingUuid"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task FavoriteScreenRecordingAsync (int? storefrontOid, string screenRecordingUuid)
        {
             await FavoriteScreenRecordingAsyncWithHttpInfo(storefrontOid, screenRecordingUuid);

        }

        /// <summary>
        /// Update favorite flag on screen recording Update favorite flag on screen recording 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="screenRecordingUuid"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> FavoriteScreenRecordingAsyncWithHttpInfo (int? storefrontOid, string screenRecordingUuid)
        {
            // verify the required parameter 'storefrontOid' is set
            if (storefrontOid == null)
                throw new ApiException(400, "Missing required parameter 'storefrontOid' when calling StorefrontApi->FavoriteScreenRecording");
            // verify the required parameter 'screenRecordingUuid' is set
            if (screenRecordingUuid == null)
                throw new ApiException(400, "Missing required parameter 'screenRecordingUuid' when calling StorefrontApi->FavoriteScreenRecording");

            var localVarPath = "/storefront/{storefront_oid}/screen_recordings/{screen_recording_uuid}/favorite";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (storefrontOid != null) localVarPathParams.Add("storefront_oid", this.Configuration.ApiClient.ParameterToString(storefrontOid)); // path parameter
            if (screenRecordingUuid != null) localVarPathParams.Add("screen_recording_uuid", this.Configuration.ApiClient.ParameterToString(screenRecordingUuid)); // path parameter

            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FavoriteScreenRecording", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Obtain lat/long for an address 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="geocodeRequest">geocode request</param>
        /// <returns>GeocodeResponse</returns>
        public GeocodeResponse GeocodeAddress (int? storefrontOid, GeocodeRequest geocodeRequest)
        {
             ApiResponse<GeocodeResponse> localVarResponse = GeocodeAddressWithHttpInfo(storefrontOid, geocodeRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Obtain lat/long for an address 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="geocodeRequest">geocode request</param>
        /// <returns>ApiResponse of GeocodeResponse</returns>
        public ApiResponse< GeocodeResponse > GeocodeAddressWithHttpInfo (int? storefrontOid, GeocodeRequest geocodeRequest)
        {
            // verify the required parameter 'storefrontOid' is set
            if (storefrontOid == null)
                throw new ApiException(400, "Missing required parameter 'storefrontOid' when calling StorefrontApi->GeocodeAddress");
            // verify the required parameter 'geocodeRequest' is set
            if (geocodeRequest == null)
                throw new ApiException(400, "Missing required parameter 'geocodeRequest' when calling StorefrontApi->GeocodeAddress");

            var localVarPath = "/storefront/{storefront_oid}/email/geocode";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (storefrontOid != null) localVarPathParams.Add("storefront_oid", this.Configuration.ApiClient.ParameterToString(storefrontOid)); // path parameter
            if (geocodeRequest != null && geocodeRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(geocodeRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = geocodeRequest; // byte array
            }

            // authentication (ultraCartBrowserApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key")))
            {
                localVarHeaderParams["x-ultracart-browser-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key");
            }
            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GeocodeAddress", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GeocodeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GeocodeResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GeocodeResponse)));
        }

        /// <summary>
        /// Obtain lat/long for an address 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="geocodeRequest">geocode request</param>
        /// <returns>Task of GeocodeResponse</returns>
        public async System.Threading.Tasks.Task<GeocodeResponse> GeocodeAddressAsync (int? storefrontOid, GeocodeRequest geocodeRequest)
        {
             ApiResponse<GeocodeResponse> localVarResponse = await GeocodeAddressAsyncWithHttpInfo(storefrontOid, geocodeRequest);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Obtain lat/long for an address 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="geocodeRequest">geocode request</param>
        /// <returns>Task of ApiResponse (GeocodeResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GeocodeResponse>> GeocodeAddressAsyncWithHttpInfo (int? storefrontOid, GeocodeRequest geocodeRequest)
        {
            // verify the required parameter 'storefrontOid' is set
            if (storefrontOid == null)
                throw new ApiException(400, "Missing required parameter 'storefrontOid' when calling StorefrontApi->GeocodeAddress");
            // verify the required parameter 'geocodeRequest' is set
            if (geocodeRequest == null)
                throw new ApiException(400, "Missing required parameter 'geocodeRequest' when calling StorefrontApi->GeocodeAddress");

            var localVarPath = "/storefront/{storefront_oid}/email/geocode";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (storefrontOid != null) localVarPathParams.Add("storefront_oid", this.Configuration.ApiClient.ParameterToString(storefrontOid)); // path parameter
            if (geocodeRequest != null && geocodeRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(geocodeRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = geocodeRequest; // byte array
            }

            // authentication (ultraCartBrowserApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key")))
            {
                localVarHeaderParams["x-ultracart-browser-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key");
            }
            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GeocodeAddress", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GeocodeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GeocodeResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GeocodeResponse)));
        }

        /// <summary>
        /// Get countries Obtain a list of all the countries 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <returns>CountriesResponse</returns>
        public CountriesResponse GetCountries (int? storefrontOid)
        {
             ApiResponse<CountriesResponse> localVarResponse = GetCountriesWithHttpInfo(storefrontOid);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get countries Obtain a list of all the countries 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <returns>ApiResponse of CountriesResponse</returns>
        public ApiResponse< CountriesResponse > GetCountriesWithHttpInfo (int? storefrontOid)
        {
            // verify the required parameter 'storefrontOid' is set
            if (storefrontOid == null)
                throw new ApiException(400, "Missing required parameter 'storefrontOid' when calling StorefrontApi->GetCountries");

            var localVarPath = "/storefront/{storefront_oid}/email/countries";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (storefrontOid != null) localVarPathParams.Add("storefront_oid", this.Configuration.ApiClient.ParameterToString(storefrontOid)); // path parameter

            // authentication (ultraCartBrowserApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key")))
            {
                localVarHeaderParams["x-ultracart-browser-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key");
            }
            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCountries", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CountriesResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CountriesResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CountriesResponse)));
        }

        /// <summary>
        /// Get countries Obtain a list of all the countries 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <returns>Task of CountriesResponse</returns>
        public async System.Threading.Tasks.Task<CountriesResponse> GetCountriesAsync (int? storefrontOid)
        {
             ApiResponse<CountriesResponse> localVarResponse = await GetCountriesAsyncWithHttpInfo(storefrontOid);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get countries Obtain a list of all the countries 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <returns>Task of ApiResponse (CountriesResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CountriesResponse>> GetCountriesAsyncWithHttpInfo (int? storefrontOid)
        {
            // verify the required parameter 'storefrontOid' is set
            if (storefrontOid == null)
                throw new ApiException(400, "Missing required parameter 'storefrontOid' when calling StorefrontApi->GetCountries");

            var localVarPath = "/storefront/{storefront_oid}/email/countries";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (storefrontOid != null) localVarPathParams.Add("storefront_oid", this.Configuration.ApiClient.ParameterToString(storefrontOid)); // path parameter

            // authentication (ultraCartBrowserApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key")))
            {
                localVarHeaderParams["x-ultracart-browser-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key");
            }
            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCountries", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CountriesResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CountriesResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CountriesResponse)));
        }

        /// <summary>
        /// Gets editor token Fetches a temporary authentication token for the editor 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <returns>EmailEditorTokenResponse</returns>
        public EmailEditorTokenResponse GetEditorToken (int? storefrontOid)
        {
             ApiResponse<EmailEditorTokenResponse> localVarResponse = GetEditorTokenWithHttpInfo(storefrontOid);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets editor token Fetches a temporary authentication token for the editor 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <returns>ApiResponse of EmailEditorTokenResponse</returns>
        public ApiResponse< EmailEditorTokenResponse > GetEditorTokenWithHttpInfo (int? storefrontOid)
        {
            // verify the required parameter 'storefrontOid' is set
            if (storefrontOid == null)
                throw new ApiException(400, "Missing required parameter 'storefrontOid' when calling StorefrontApi->GetEditorToken");

            var localVarPath = "/storefront/{storefront_oid}/editor_token";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (storefrontOid != null) localVarPathParams.Add("storefront_oid", this.Configuration.ApiClient.ParameterToString(storefrontOid)); // path parameter

            // authentication (ultraCartBrowserApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key")))
            {
                localVarHeaderParams["x-ultracart-browser-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key");
            }
            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetEditorToken", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EmailEditorTokenResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (EmailEditorTokenResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EmailEditorTokenResponse)));
        }

        /// <summary>
        /// Gets editor token Fetches a temporary authentication token for the editor 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <returns>Task of EmailEditorTokenResponse</returns>
        public async System.Threading.Tasks.Task<EmailEditorTokenResponse> GetEditorTokenAsync (int? storefrontOid)
        {
             ApiResponse<EmailEditorTokenResponse> localVarResponse = await GetEditorTokenAsyncWithHttpInfo(storefrontOid);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets editor token Fetches a temporary authentication token for the editor 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <returns>Task of ApiResponse (EmailEditorTokenResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<EmailEditorTokenResponse>> GetEditorTokenAsyncWithHttpInfo (int? storefrontOid)
        {
            // verify the required parameter 'storefrontOid' is set
            if (storefrontOid == null)
                throw new ApiException(400, "Missing required parameter 'storefrontOid' when calling StorefrontApi->GetEditorToken");

            var localVarPath = "/storefront/{storefront_oid}/editor_token";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (storefrontOid != null) localVarPathParams.Add("storefront_oid", this.Configuration.ApiClient.ParameterToString(storefrontOid)); // path parameter

            // authentication (ultraCartBrowserApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key")))
            {
                localVarHeaderParams["x-ultracart-browser-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key");
            }
            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetEditorToken", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EmailEditorTokenResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (EmailEditorTokenResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EmailEditorTokenResponse)));
        }

        /// <summary>
        /// Get email communication base templates 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <returns>EmailBaseTemplateListResponse</returns>
        public EmailBaseTemplateListResponse GetEmailBaseTemplates (int? storefrontOid)
        {
             ApiResponse<EmailBaseTemplateListResponse> localVarResponse = GetEmailBaseTemplatesWithHttpInfo(storefrontOid);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get email communication base templates 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <returns>ApiResponse of EmailBaseTemplateListResponse</returns>
        public ApiResponse< EmailBaseTemplateListResponse > GetEmailBaseTemplatesWithHttpInfo (int? storefrontOid)
        {
            // verify the required parameter 'storefrontOid' is set
            if (storefrontOid == null)
                throw new ApiException(400, "Missing required parameter 'storefrontOid' when calling StorefrontApi->GetEmailBaseTemplates");

            var localVarPath = "/storefront/{storefront_oid}/email/baseTemplates";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (storefrontOid != null) localVarPathParams.Add("storefront_oid", this.Configuration.ApiClient.ParameterToString(storefrontOid)); // path parameter

            // authentication (ultraCartBrowserApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key")))
            {
                localVarHeaderParams["x-ultracart-browser-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key");
            }
            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetEmailBaseTemplates", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EmailBaseTemplateListResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (EmailBaseTemplateListResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EmailBaseTemplateListResponse)));
        }

        /// <summary>
        /// Get email communication base templates 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <returns>Task of EmailBaseTemplateListResponse</returns>
        public async System.Threading.Tasks.Task<EmailBaseTemplateListResponse> GetEmailBaseTemplatesAsync (int? storefrontOid)
        {
             ApiResponse<EmailBaseTemplateListResponse> localVarResponse = await GetEmailBaseTemplatesAsyncWithHttpInfo(storefrontOid);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get email communication base templates 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <returns>Task of ApiResponse (EmailBaseTemplateListResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<EmailBaseTemplateListResponse>> GetEmailBaseTemplatesAsyncWithHttpInfo (int? storefrontOid)
        {
            // verify the required parameter 'storefrontOid' is set
            if (storefrontOid == null)
                throw new ApiException(400, "Missing required parameter 'storefrontOid' when calling StorefrontApi->GetEmailBaseTemplates");

            var localVarPath = "/storefront/{storefront_oid}/email/baseTemplates";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (storefrontOid != null) localVarPathParams.Add("storefront_oid", this.Configuration.ApiClient.ParameterToString(storefrontOid)); // path parameter

            // authentication (ultraCartBrowserApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key")))
            {
                localVarHeaderParams["x-ultracart-browser-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key");
            }
            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetEmailBaseTemplates", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EmailBaseTemplateListResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (EmailBaseTemplateListResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EmailBaseTemplateListResponse)));
        }

        /// <summary>
        /// Get email campaign 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="emailCampaignUuid"></param>
        /// <returns>EmailCampaignResponse</returns>
        public EmailCampaignResponse GetEmailCampaign (int? storefrontOid, string emailCampaignUuid)
        {
             ApiResponse<EmailCampaignResponse> localVarResponse = GetEmailCampaignWithHttpInfo(storefrontOid, emailCampaignUuid);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get email campaign 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="emailCampaignUuid"></param>
        /// <returns>ApiResponse of EmailCampaignResponse</returns>
        public ApiResponse< EmailCampaignResponse > GetEmailCampaignWithHttpInfo (int? storefrontOid, string emailCampaignUuid)
        {
            // verify the required parameter 'storefrontOid' is set
            if (storefrontOid == null)
                throw new ApiException(400, "Missing required parameter 'storefrontOid' when calling StorefrontApi->GetEmailCampaign");
            // verify the required parameter 'emailCampaignUuid' is set
            if (emailCampaignUuid == null)
                throw new ApiException(400, "Missing required parameter 'emailCampaignUuid' when calling StorefrontApi->GetEmailCampaign");

            var localVarPath = "/storefront/{storefront_oid}/email/campaigns/{email_campaign_uuid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (storefrontOid != null) localVarPathParams.Add("storefront_oid", this.Configuration.ApiClient.ParameterToString(storefrontOid)); // path parameter
            if (emailCampaignUuid != null) localVarPathParams.Add("email_campaign_uuid", this.Configuration.ApiClient.ParameterToString(emailCampaignUuid)); // path parameter

            // authentication (ultraCartBrowserApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key")))
            {
                localVarHeaderParams["x-ultracart-browser-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key");
            }
            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetEmailCampaign", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EmailCampaignResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (EmailCampaignResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EmailCampaignResponse)));
        }

        /// <summary>
        /// Get email campaign 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="emailCampaignUuid"></param>
        /// <returns>Task of EmailCampaignResponse</returns>
        public async System.Threading.Tasks.Task<EmailCampaignResponse> GetEmailCampaignAsync (int? storefrontOid, string emailCampaignUuid)
        {
             ApiResponse<EmailCampaignResponse> localVarResponse = await GetEmailCampaignAsyncWithHttpInfo(storefrontOid, emailCampaignUuid);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get email campaign 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="emailCampaignUuid"></param>
        /// <returns>Task of ApiResponse (EmailCampaignResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<EmailCampaignResponse>> GetEmailCampaignAsyncWithHttpInfo (int? storefrontOid, string emailCampaignUuid)
        {
            // verify the required parameter 'storefrontOid' is set
            if (storefrontOid == null)
                throw new ApiException(400, "Missing required parameter 'storefrontOid' when calling StorefrontApi->GetEmailCampaign");
            // verify the required parameter 'emailCampaignUuid' is set
            if (emailCampaignUuid == null)
                throw new ApiException(400, "Missing required parameter 'emailCampaignUuid' when calling StorefrontApi->GetEmailCampaign");

            var localVarPath = "/storefront/{storefront_oid}/email/campaigns/{email_campaign_uuid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (storefrontOid != null) localVarPathParams.Add("storefront_oid", this.Configuration.ApiClient.ParameterToString(storefrontOid)); // path parameter
            if (emailCampaignUuid != null) localVarPathParams.Add("email_campaign_uuid", this.Configuration.ApiClient.ParameterToString(emailCampaignUuid)); // path parameter

            // authentication (ultraCartBrowserApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key")))
            {
                localVarHeaderParams["x-ultracart-browser-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key");
            }
            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetEmailCampaign", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EmailCampaignResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (EmailCampaignResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EmailCampaignResponse)));
        }

        /// <summary>
        /// Get email campaign folder 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="emailCampaignFolderUuid"></param>
        /// <returns>EmailCampaignFolderResponse</returns>
        public EmailCampaignFolderResponse GetEmailCampaignFolder (int? storefrontOid, string emailCampaignFolderUuid)
        {
             ApiResponse<EmailCampaignFolderResponse> localVarResponse = GetEmailCampaignFolderWithHttpInfo(storefrontOid, emailCampaignFolderUuid);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get email campaign folder 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="emailCampaignFolderUuid"></param>
        /// <returns>ApiResponse of EmailCampaignFolderResponse</returns>
        public ApiResponse< EmailCampaignFolderResponse > GetEmailCampaignFolderWithHttpInfo (int? storefrontOid, string emailCampaignFolderUuid)
        {
            // verify the required parameter 'storefrontOid' is set
            if (storefrontOid == null)
                throw new ApiException(400, "Missing required parameter 'storefrontOid' when calling StorefrontApi->GetEmailCampaignFolder");
            // verify the required parameter 'emailCampaignFolderUuid' is set
            if (emailCampaignFolderUuid == null)
                throw new ApiException(400, "Missing required parameter 'emailCampaignFolderUuid' when calling StorefrontApi->GetEmailCampaignFolder");

            var localVarPath = "/storefront/{storefront_oid}/email/campaign_folders/{email_campaign_folder_uuid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (storefrontOid != null) localVarPathParams.Add("storefront_oid", this.Configuration.ApiClient.ParameterToString(storefrontOid)); // path parameter
            if (emailCampaignFolderUuid != null) localVarPathParams.Add("email_campaign_folder_uuid", this.Configuration.ApiClient.ParameterToString(emailCampaignFolderUuid)); // path parameter

            // authentication (ultraCartBrowserApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key")))
            {
                localVarHeaderParams["x-ultracart-browser-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key");
            }
            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetEmailCampaignFolder", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EmailCampaignFolderResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (EmailCampaignFolderResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EmailCampaignFolderResponse)));
        }

        /// <summary>
        /// Get email campaign folder 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="emailCampaignFolderUuid"></param>
        /// <returns>Task of EmailCampaignFolderResponse</returns>
        public async System.Threading.Tasks.Task<EmailCampaignFolderResponse> GetEmailCampaignFolderAsync (int? storefrontOid, string emailCampaignFolderUuid)
        {
             ApiResponse<EmailCampaignFolderResponse> localVarResponse = await GetEmailCampaignFolderAsyncWithHttpInfo(storefrontOid, emailCampaignFolderUuid);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get email campaign folder 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="emailCampaignFolderUuid"></param>
        /// <returns>Task of ApiResponse (EmailCampaignFolderResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<EmailCampaignFolderResponse>> GetEmailCampaignFolderAsyncWithHttpInfo (int? storefrontOid, string emailCampaignFolderUuid)
        {
            // verify the required parameter 'storefrontOid' is set
            if (storefrontOid == null)
                throw new ApiException(400, "Missing required parameter 'storefrontOid' when calling StorefrontApi->GetEmailCampaignFolder");
            // verify the required parameter 'emailCampaignFolderUuid' is set
            if (emailCampaignFolderUuid == null)
                throw new ApiException(400, "Missing required parameter 'emailCampaignFolderUuid' when calling StorefrontApi->GetEmailCampaignFolder");

            var localVarPath = "/storefront/{storefront_oid}/email/campaign_folders/{email_campaign_folder_uuid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (storefrontOid != null) localVarPathParams.Add("storefront_oid", this.Configuration.ApiClient.ParameterToString(storefrontOid)); // path parameter
            if (emailCampaignFolderUuid != null) localVarPathParams.Add("email_campaign_folder_uuid", this.Configuration.ApiClient.ParameterToString(emailCampaignFolderUuid)); // path parameter

            // authentication (ultraCartBrowserApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key")))
            {
                localVarHeaderParams["x-ultracart-browser-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key");
            }
            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetEmailCampaignFolder", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EmailCampaignFolderResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (EmailCampaignFolderResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EmailCampaignFolderResponse)));
        }

        /// <summary>
        /// Get email campaign folders 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <returns>EmailCampaignFoldersResponse</returns>
        public EmailCampaignFoldersResponse GetEmailCampaignFolders (int? storefrontOid)
        {
             ApiResponse<EmailCampaignFoldersResponse> localVarResponse = GetEmailCampaignFoldersWithHttpInfo(storefrontOid);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get email campaign folders 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <returns>ApiResponse of EmailCampaignFoldersResponse</returns>
        public ApiResponse< EmailCampaignFoldersResponse > GetEmailCampaignFoldersWithHttpInfo (int? storefrontOid)
        {
            // verify the required parameter 'storefrontOid' is set
            if (storefrontOid == null)
                throw new ApiException(400, "Missing required parameter 'storefrontOid' when calling StorefrontApi->GetEmailCampaignFolders");

            var localVarPath = "/storefront/{storefront_oid}/email/campaign_folders";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (storefrontOid != null) localVarPathParams.Add("storefront_oid", this.Configuration.ApiClient.ParameterToString(storefrontOid)); // path parameter

            // authentication (ultraCartBrowserApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key")))
            {
                localVarHeaderParams["x-ultracart-browser-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key");
            }
            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetEmailCampaignFolders", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EmailCampaignFoldersResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (EmailCampaignFoldersResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EmailCampaignFoldersResponse)));
        }

        /// <summary>
        /// Get email campaign folders 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <returns>Task of EmailCampaignFoldersResponse</returns>
        public async System.Threading.Tasks.Task<EmailCampaignFoldersResponse> GetEmailCampaignFoldersAsync (int? storefrontOid)
        {
             ApiResponse<EmailCampaignFoldersResponse> localVarResponse = await GetEmailCampaignFoldersAsyncWithHttpInfo(storefrontOid);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get email campaign folders 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <returns>Task of ApiResponse (EmailCampaignFoldersResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<EmailCampaignFoldersResponse>> GetEmailCampaignFoldersAsyncWithHttpInfo (int? storefrontOid)
        {
            // verify the required parameter 'storefrontOid' is set
            if (storefrontOid == null)
                throw new ApiException(400, "Missing required parameter 'storefrontOid' when calling StorefrontApi->GetEmailCampaignFolders");

            var localVarPath = "/storefront/{storefront_oid}/email/campaign_folders";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (storefrontOid != null) localVarPathParams.Add("storefront_oid", this.Configuration.ApiClient.ParameterToString(storefrontOid)); // path parameter

            // authentication (ultraCartBrowserApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key")))
            {
                localVarHeaderParams["x-ultracart-browser-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key");
            }
            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetEmailCampaignFolders", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EmailCampaignFoldersResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (EmailCampaignFoldersResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EmailCampaignFoldersResponse)));
        }

        /// <summary>
        /// Get email campaign screenshots 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="emailCampaignUuid"></param>
        /// <returns>ScreenshotsResponse</returns>
        public ScreenshotsResponse GetEmailCampaignScreenshots (int? storefrontOid, string emailCampaignUuid)
        {
             ApiResponse<ScreenshotsResponse> localVarResponse = GetEmailCampaignScreenshotsWithHttpInfo(storefrontOid, emailCampaignUuid);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get email campaign screenshots 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="emailCampaignUuid"></param>
        /// <returns>ApiResponse of ScreenshotsResponse</returns>
        public ApiResponse< ScreenshotsResponse > GetEmailCampaignScreenshotsWithHttpInfo (int? storefrontOid, string emailCampaignUuid)
        {
            // verify the required parameter 'storefrontOid' is set
            if (storefrontOid == null)
                throw new ApiException(400, "Missing required parameter 'storefrontOid' when calling StorefrontApi->GetEmailCampaignScreenshots");
            // verify the required parameter 'emailCampaignUuid' is set
            if (emailCampaignUuid == null)
                throw new ApiException(400, "Missing required parameter 'emailCampaignUuid' when calling StorefrontApi->GetEmailCampaignScreenshots");

            var localVarPath = "/storefront/{storefront_oid}/email/campaigns/{email_campaign_uuid}/screenshots";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (storefrontOid != null) localVarPathParams.Add("storefront_oid", this.Configuration.ApiClient.ParameterToString(storefrontOid)); // path parameter
            if (emailCampaignUuid != null) localVarPathParams.Add("email_campaign_uuid", this.Configuration.ApiClient.ParameterToString(emailCampaignUuid)); // path parameter

            // authentication (ultraCartBrowserApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key")))
            {
                localVarHeaderParams["x-ultracart-browser-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key");
            }
            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetEmailCampaignScreenshots", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ScreenshotsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ScreenshotsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ScreenshotsResponse)));
        }

        /// <summary>
        /// Get email campaign screenshots 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="emailCampaignUuid"></param>
        /// <returns>Task of ScreenshotsResponse</returns>
        public async System.Threading.Tasks.Task<ScreenshotsResponse> GetEmailCampaignScreenshotsAsync (int? storefrontOid, string emailCampaignUuid)
        {
             ApiResponse<ScreenshotsResponse> localVarResponse = await GetEmailCampaignScreenshotsAsyncWithHttpInfo(storefrontOid, emailCampaignUuid);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get email campaign screenshots 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="emailCampaignUuid"></param>
        /// <returns>Task of ApiResponse (ScreenshotsResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ScreenshotsResponse>> GetEmailCampaignScreenshotsAsyncWithHttpInfo (int? storefrontOid, string emailCampaignUuid)
        {
            // verify the required parameter 'storefrontOid' is set
            if (storefrontOid == null)
                throw new ApiException(400, "Missing required parameter 'storefrontOid' when calling StorefrontApi->GetEmailCampaignScreenshots");
            // verify the required parameter 'emailCampaignUuid' is set
            if (emailCampaignUuid == null)
                throw new ApiException(400, "Missing required parameter 'emailCampaignUuid' when calling StorefrontApi->GetEmailCampaignScreenshots");

            var localVarPath = "/storefront/{storefront_oid}/email/campaigns/{email_campaign_uuid}/screenshots";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (storefrontOid != null) localVarPathParams.Add("storefront_oid", this.Configuration.ApiClient.ParameterToString(storefrontOid)); // path parameter
            if (emailCampaignUuid != null) localVarPathParams.Add("email_campaign_uuid", this.Configuration.ApiClient.ParameterToString(emailCampaignUuid)); // path parameter

            // authentication (ultraCartBrowserApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key")))
            {
                localVarHeaderParams["x-ultracart-browser-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key");
            }
            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetEmailCampaignScreenshots", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ScreenshotsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ScreenshotsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ScreenshotsResponse)));
        }

        /// <summary>
        /// Get email campaigns 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <returns>EmailCampaignsResponse</returns>
        public EmailCampaignsResponse GetEmailCampaigns (int? storefrontOid)
        {
             ApiResponse<EmailCampaignsResponse> localVarResponse = GetEmailCampaignsWithHttpInfo(storefrontOid);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get email campaigns 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <returns>ApiResponse of EmailCampaignsResponse</returns>
        public ApiResponse< EmailCampaignsResponse > GetEmailCampaignsWithHttpInfo (int? storefrontOid)
        {
            // verify the required parameter 'storefrontOid' is set
            if (storefrontOid == null)
                throw new ApiException(400, "Missing required parameter 'storefrontOid' when calling StorefrontApi->GetEmailCampaigns");

            var localVarPath = "/storefront/{storefront_oid}/email/campaigns";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (storefrontOid != null) localVarPathParams.Add("storefront_oid", this.Configuration.ApiClient.ParameterToString(storefrontOid)); // path parameter

            // authentication (ultraCartBrowserApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key")))
            {
                localVarHeaderParams["x-ultracart-browser-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key");
            }
            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetEmailCampaigns", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EmailCampaignsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (EmailCampaignsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EmailCampaignsResponse)));
        }

        /// <summary>
        /// Get email campaigns 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <returns>Task of EmailCampaignsResponse</returns>
        public async System.Threading.Tasks.Task<EmailCampaignsResponse> GetEmailCampaignsAsync (int? storefrontOid)
        {
             ApiResponse<EmailCampaignsResponse> localVarResponse = await GetEmailCampaignsAsyncWithHttpInfo(storefrontOid);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get email campaigns 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <returns>Task of ApiResponse (EmailCampaignsResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<EmailCampaignsResponse>> GetEmailCampaignsAsyncWithHttpInfo (int? storefrontOid)
        {
            // verify the required parameter 'storefrontOid' is set
            if (storefrontOid == null)
                throw new ApiException(400, "Missing required parameter 'storefrontOid' when calling StorefrontApi->GetEmailCampaigns");

            var localVarPath = "/storefront/{storefront_oid}/email/campaigns";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (storefrontOid != null) localVarPathParams.Add("storefront_oid", this.Configuration.ApiClient.ParameterToString(storefrontOid)); // path parameter

            // authentication (ultraCartBrowserApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key")))
            {
                localVarHeaderParams["x-ultracart-browser-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key");
            }
            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetEmailCampaigns", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EmailCampaignsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (EmailCampaignsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EmailCampaignsResponse)));
        }

        /// <summary>
        /// Get email campaigns with stats 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="statDays"></param>
        /// <returns>EmailCampaignsResponse</returns>
        public EmailCampaignsResponse GetEmailCampaignsWithStats (int? storefrontOid, string statDays)
        {
             ApiResponse<EmailCampaignsResponse> localVarResponse = GetEmailCampaignsWithStatsWithHttpInfo(storefrontOid, statDays);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get email campaigns with stats 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="statDays"></param>
        /// <returns>ApiResponse of EmailCampaignsResponse</returns>
        public ApiResponse< EmailCampaignsResponse > GetEmailCampaignsWithStatsWithHttpInfo (int? storefrontOid, string statDays)
        {
            // verify the required parameter 'storefrontOid' is set
            if (storefrontOid == null)
                throw new ApiException(400, "Missing required parameter 'storefrontOid' when calling StorefrontApi->GetEmailCampaignsWithStats");
            // verify the required parameter 'statDays' is set
            if (statDays == null)
                throw new ApiException(400, "Missing required parameter 'statDays' when calling StorefrontApi->GetEmailCampaignsWithStats");

            var localVarPath = "/storefront/{storefront_oid}/email/campaignsWithStats/{stat_days}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (storefrontOid != null) localVarPathParams.Add("storefront_oid", this.Configuration.ApiClient.ParameterToString(storefrontOid)); // path parameter
            if (statDays != null) localVarPathParams.Add("stat_days", this.Configuration.ApiClient.ParameterToString(statDays)); // path parameter

            // authentication (ultraCartBrowserApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key")))
            {
                localVarHeaderParams["x-ultracart-browser-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key");
            }
            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetEmailCampaignsWithStats", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EmailCampaignsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (EmailCampaignsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EmailCampaignsResponse)));
        }

        /// <summary>
        /// Get email campaigns with stats 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="statDays"></param>
        /// <returns>Task of EmailCampaignsResponse</returns>
        public async System.Threading.Tasks.Task<EmailCampaignsResponse> GetEmailCampaignsWithStatsAsync (int? storefrontOid, string statDays)
        {
             ApiResponse<EmailCampaignsResponse> localVarResponse = await GetEmailCampaignsWithStatsAsyncWithHttpInfo(storefrontOid, statDays);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get email campaigns with stats 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="statDays"></param>
        /// <returns>Task of ApiResponse (EmailCampaignsResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<EmailCampaignsResponse>> GetEmailCampaignsWithStatsAsyncWithHttpInfo (int? storefrontOid, string statDays)
        {
            // verify the required parameter 'storefrontOid' is set
            if (storefrontOid == null)
                throw new ApiException(400, "Missing required parameter 'storefrontOid' when calling StorefrontApi->GetEmailCampaignsWithStats");
            // verify the required parameter 'statDays' is set
            if (statDays == null)
                throw new ApiException(400, "Missing required parameter 'statDays' when calling StorefrontApi->GetEmailCampaignsWithStats");

            var localVarPath = "/storefront/{storefront_oid}/email/campaignsWithStats/{stat_days}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (storefrontOid != null) localVarPathParams.Add("storefront_oid", this.Configuration.ApiClient.ParameterToString(storefrontOid)); // path parameter
            if (statDays != null) localVarPathParams.Add("stat_days", this.Configuration.ApiClient.ParameterToString(statDays)); // path parameter

            // authentication (ultraCartBrowserApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key")))
            {
                localVarHeaderParams["x-ultracart-browser-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key");
            }
            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetEmailCampaignsWithStats", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EmailCampaignsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (EmailCampaignsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EmailCampaignsResponse)));
        }

        /// <summary>
        /// Get email commseq 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="commseqUuid"></param>
        /// <returns>EmailCommseqResponse</returns>
        public EmailCommseqResponse GetEmailCommseq (int? storefrontOid, string commseqUuid)
        {
             ApiResponse<EmailCommseqResponse> localVarResponse = GetEmailCommseqWithHttpInfo(storefrontOid, commseqUuid);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get email commseq 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="commseqUuid"></param>
        /// <returns>ApiResponse of EmailCommseqResponse</returns>
        public ApiResponse< EmailCommseqResponse > GetEmailCommseqWithHttpInfo (int? storefrontOid, string commseqUuid)
        {
            // verify the required parameter 'storefrontOid' is set
            if (storefrontOid == null)
                throw new ApiException(400, "Missing required parameter 'storefrontOid' when calling StorefrontApi->GetEmailCommseq");
            // verify the required parameter 'commseqUuid' is set
            if (commseqUuid == null)
                throw new ApiException(400, "Missing required parameter 'commseqUuid' when calling StorefrontApi->GetEmailCommseq");

            var localVarPath = "/storefront/{storefront_oid}/email/commseqs/{commseq_uuid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (storefrontOid != null) localVarPathParams.Add("storefront_oid", this.Configuration.ApiClient.ParameterToString(storefrontOid)); // path parameter
            if (commseqUuid != null) localVarPathParams.Add("commseq_uuid", this.Configuration.ApiClient.ParameterToString(commseqUuid)); // path parameter

            // authentication (ultraCartBrowserApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key")))
            {
                localVarHeaderParams["x-ultracart-browser-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key");
            }
            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetEmailCommseq", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EmailCommseqResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (EmailCommseqResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EmailCommseqResponse)));
        }

        /// <summary>
        /// Get email commseq 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="commseqUuid"></param>
        /// <returns>Task of EmailCommseqResponse</returns>
        public async System.Threading.Tasks.Task<EmailCommseqResponse> GetEmailCommseqAsync (int? storefrontOid, string commseqUuid)
        {
             ApiResponse<EmailCommseqResponse> localVarResponse = await GetEmailCommseqAsyncWithHttpInfo(storefrontOid, commseqUuid);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get email commseq 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="commseqUuid"></param>
        /// <returns>Task of ApiResponse (EmailCommseqResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<EmailCommseqResponse>> GetEmailCommseqAsyncWithHttpInfo (int? storefrontOid, string commseqUuid)
        {
            // verify the required parameter 'storefrontOid' is set
            if (storefrontOid == null)
                throw new ApiException(400, "Missing required parameter 'storefrontOid' when calling StorefrontApi->GetEmailCommseq");
            // verify the required parameter 'commseqUuid' is set
            if (commseqUuid == null)
                throw new ApiException(400, "Missing required parameter 'commseqUuid' when calling StorefrontApi->GetEmailCommseq");

            var localVarPath = "/storefront/{storefront_oid}/email/commseqs/{commseq_uuid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (storefrontOid != null) localVarPathParams.Add("storefront_oid", this.Configuration.ApiClient.ParameterToString(storefrontOid)); // path parameter
            if (commseqUuid != null) localVarPathParams.Add("commseq_uuid", this.Configuration.ApiClient.ParameterToString(commseqUuid)); // path parameter

            // authentication (ultraCartBrowserApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key")))
            {
                localVarHeaderParams["x-ultracart-browser-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key");
            }
            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetEmailCommseq", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EmailCommseqResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (EmailCommseqResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EmailCommseqResponse)));
        }

        /// <summary>
        /// Get email communication sequence emails stats 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="commseqUuid"></param>
        /// <param name="statsRequest">StatsRequest</param>
        /// <returns>EmailStatSummaryResponse</returns>
        public EmailStatSummaryResponse GetEmailCommseqEmailStats (int? storefrontOid, string commseqUuid, EmailStatSummaryRequest statsRequest)
        {
             ApiResponse<EmailStatSummaryResponse> localVarResponse = GetEmailCommseqEmailStatsWithHttpInfo(storefrontOid, commseqUuid, statsRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get email communication sequence emails stats 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="commseqUuid"></param>
        /// <param name="statsRequest">StatsRequest</param>
        /// <returns>ApiResponse of EmailStatSummaryResponse</returns>
        public ApiResponse< EmailStatSummaryResponse > GetEmailCommseqEmailStatsWithHttpInfo (int? storefrontOid, string commseqUuid, EmailStatSummaryRequest statsRequest)
        {
            // verify the required parameter 'storefrontOid' is set
            if (storefrontOid == null)
                throw new ApiException(400, "Missing required parameter 'storefrontOid' when calling StorefrontApi->GetEmailCommseqEmailStats");
            // verify the required parameter 'commseqUuid' is set
            if (commseqUuid == null)
                throw new ApiException(400, "Missing required parameter 'commseqUuid' when calling StorefrontApi->GetEmailCommseqEmailStats");
            // verify the required parameter 'statsRequest' is set
            if (statsRequest == null)
                throw new ApiException(400, "Missing required parameter 'statsRequest' when calling StorefrontApi->GetEmailCommseqEmailStats");

            var localVarPath = "/storefront/{storefront_oid}/email/commseqs/{commseq_uuid}/emailStats";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (storefrontOid != null) localVarPathParams.Add("storefront_oid", this.Configuration.ApiClient.ParameterToString(storefrontOid)); // path parameter
            if (commseqUuid != null) localVarPathParams.Add("commseq_uuid", this.Configuration.ApiClient.ParameterToString(commseqUuid)); // path parameter
            if (statsRequest != null && statsRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(statsRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = statsRequest; // byte array
            }

            // authentication (ultraCartBrowserApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key")))
            {
                localVarHeaderParams["x-ultracart-browser-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key");
            }
            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetEmailCommseqEmailStats", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EmailStatSummaryResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (EmailStatSummaryResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EmailStatSummaryResponse)));
        }

        /// <summary>
        /// Get email communication sequence emails stats 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="commseqUuid"></param>
        /// <param name="statsRequest">StatsRequest</param>
        /// <returns>Task of EmailStatSummaryResponse</returns>
        public async System.Threading.Tasks.Task<EmailStatSummaryResponse> GetEmailCommseqEmailStatsAsync (int? storefrontOid, string commseqUuid, EmailStatSummaryRequest statsRequest)
        {
             ApiResponse<EmailStatSummaryResponse> localVarResponse = await GetEmailCommseqEmailStatsAsyncWithHttpInfo(storefrontOid, commseqUuid, statsRequest);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get email communication sequence emails stats 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="commseqUuid"></param>
        /// <param name="statsRequest">StatsRequest</param>
        /// <returns>Task of ApiResponse (EmailStatSummaryResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<EmailStatSummaryResponse>> GetEmailCommseqEmailStatsAsyncWithHttpInfo (int? storefrontOid, string commseqUuid, EmailStatSummaryRequest statsRequest)
        {
            // verify the required parameter 'storefrontOid' is set
            if (storefrontOid == null)
                throw new ApiException(400, "Missing required parameter 'storefrontOid' when calling StorefrontApi->GetEmailCommseqEmailStats");
            // verify the required parameter 'commseqUuid' is set
            if (commseqUuid == null)
                throw new ApiException(400, "Missing required parameter 'commseqUuid' when calling StorefrontApi->GetEmailCommseqEmailStats");
            // verify the required parameter 'statsRequest' is set
            if (statsRequest == null)
                throw new ApiException(400, "Missing required parameter 'statsRequest' when calling StorefrontApi->GetEmailCommseqEmailStats");

            var localVarPath = "/storefront/{storefront_oid}/email/commseqs/{commseq_uuid}/emailStats";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (storefrontOid != null) localVarPathParams.Add("storefront_oid", this.Configuration.ApiClient.ParameterToString(storefrontOid)); // path parameter
            if (commseqUuid != null) localVarPathParams.Add("commseq_uuid", this.Configuration.ApiClient.ParameterToString(commseqUuid)); // path parameter
            if (statsRequest != null && statsRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(statsRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = statsRequest; // byte array
            }

            // authentication (ultraCartBrowserApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key")))
            {
                localVarHeaderParams["x-ultracart-browser-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key");
            }
            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetEmailCommseqEmailStats", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EmailStatSummaryResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (EmailStatSummaryResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EmailStatSummaryResponse)));
        }

        /// <summary>
        /// Get email communication sequence postcard stats 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="commseqUuid"></param>
        /// <param name="statsRequest">StatsRequest</param>
        /// <returns>EmailStatPostcardSummaryResponse</returns>
        public EmailStatPostcardSummaryResponse GetEmailCommseqPostcardStats (int? storefrontOid, string commseqUuid, EmailStatPostcardSummaryRequest statsRequest)
        {
             ApiResponse<EmailStatPostcardSummaryResponse> localVarResponse = GetEmailCommseqPostcardStatsWithHttpInfo(storefrontOid, commseqUuid, statsRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get email communication sequence postcard stats 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="commseqUuid"></param>
        /// <param name="statsRequest">StatsRequest</param>
        /// <returns>ApiResponse of EmailStatPostcardSummaryResponse</returns>
        public ApiResponse< EmailStatPostcardSummaryResponse > GetEmailCommseqPostcardStatsWithHttpInfo (int? storefrontOid, string commseqUuid, EmailStatPostcardSummaryRequest statsRequest)
        {
            // verify the required parameter 'storefrontOid' is set
            if (storefrontOid == null)
                throw new ApiException(400, "Missing required parameter 'storefrontOid' when calling StorefrontApi->GetEmailCommseqPostcardStats");
            // verify the required parameter 'commseqUuid' is set
            if (commseqUuid == null)
                throw new ApiException(400, "Missing required parameter 'commseqUuid' when calling StorefrontApi->GetEmailCommseqPostcardStats");
            // verify the required parameter 'statsRequest' is set
            if (statsRequest == null)
                throw new ApiException(400, "Missing required parameter 'statsRequest' when calling StorefrontApi->GetEmailCommseqPostcardStats");

            var localVarPath = "/storefront/{storefront_oid}/email/commseqs/{commseq_uuid}/postcardStats";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (storefrontOid != null) localVarPathParams.Add("storefront_oid", this.Configuration.ApiClient.ParameterToString(storefrontOid)); // path parameter
            if (commseqUuid != null) localVarPathParams.Add("commseq_uuid", this.Configuration.ApiClient.ParameterToString(commseqUuid)); // path parameter
            if (statsRequest != null && statsRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(statsRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = statsRequest; // byte array
            }

            // authentication (ultraCartBrowserApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key")))
            {
                localVarHeaderParams["x-ultracart-browser-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key");
            }
            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetEmailCommseqPostcardStats", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EmailStatPostcardSummaryResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (EmailStatPostcardSummaryResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EmailStatPostcardSummaryResponse)));
        }

        /// <summary>
        /// Get email communication sequence postcard stats 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="commseqUuid"></param>
        /// <param name="statsRequest">StatsRequest</param>
        /// <returns>Task of EmailStatPostcardSummaryResponse</returns>
        public async System.Threading.Tasks.Task<EmailStatPostcardSummaryResponse> GetEmailCommseqPostcardStatsAsync (int? storefrontOid, string commseqUuid, EmailStatPostcardSummaryRequest statsRequest)
        {
             ApiResponse<EmailStatPostcardSummaryResponse> localVarResponse = await GetEmailCommseqPostcardStatsAsyncWithHttpInfo(storefrontOid, commseqUuid, statsRequest);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get email communication sequence postcard stats 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="commseqUuid"></param>
        /// <param name="statsRequest">StatsRequest</param>
        /// <returns>Task of ApiResponse (EmailStatPostcardSummaryResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<EmailStatPostcardSummaryResponse>> GetEmailCommseqPostcardStatsAsyncWithHttpInfo (int? storefrontOid, string commseqUuid, EmailStatPostcardSummaryRequest statsRequest)
        {
            // verify the required parameter 'storefrontOid' is set
            if (storefrontOid == null)
                throw new ApiException(400, "Missing required parameter 'storefrontOid' when calling StorefrontApi->GetEmailCommseqPostcardStats");
            // verify the required parameter 'commseqUuid' is set
            if (commseqUuid == null)
                throw new ApiException(400, "Missing required parameter 'commseqUuid' when calling StorefrontApi->GetEmailCommseqPostcardStats");
            // verify the required parameter 'statsRequest' is set
            if (statsRequest == null)
                throw new ApiException(400, "Missing required parameter 'statsRequest' when calling StorefrontApi->GetEmailCommseqPostcardStats");

            var localVarPath = "/storefront/{storefront_oid}/email/commseqs/{commseq_uuid}/postcardStats";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (storefrontOid != null) localVarPathParams.Add("storefront_oid", this.Configuration.ApiClient.ParameterToString(storefrontOid)); // path parameter
            if (commseqUuid != null) localVarPathParams.Add("commseq_uuid", this.Configuration.ApiClient.ParameterToString(commseqUuid)); // path parameter
            if (statsRequest != null && statsRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(statsRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = statsRequest; // byte array
            }

            // authentication (ultraCartBrowserApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key")))
            {
                localVarHeaderParams["x-ultracart-browser-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key");
            }
            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetEmailCommseqPostcardStats", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EmailStatPostcardSummaryResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (EmailStatPostcardSummaryResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EmailStatPostcardSummaryResponse)));
        }

        /// <summary>
        /// Get communication sequence stats overall 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="commseqUuid"></param>
        /// <returns>EmailCommseqStatResponse</returns>
        public EmailCommseqStatResponse GetEmailCommseqStatOverall (int? storefrontOid, string commseqUuid)
        {
             ApiResponse<EmailCommseqStatResponse> localVarResponse = GetEmailCommseqStatOverallWithHttpInfo(storefrontOid, commseqUuid);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get communication sequence stats overall 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="commseqUuid"></param>
        /// <returns>ApiResponse of EmailCommseqStatResponse</returns>
        public ApiResponse< EmailCommseqStatResponse > GetEmailCommseqStatOverallWithHttpInfo (int? storefrontOid, string commseqUuid)
        {
            // verify the required parameter 'storefrontOid' is set
            if (storefrontOid == null)
                throw new ApiException(400, "Missing required parameter 'storefrontOid' when calling StorefrontApi->GetEmailCommseqStatOverall");
            // verify the required parameter 'commseqUuid' is set
            if (commseqUuid == null)
                throw new ApiException(400, "Missing required parameter 'commseqUuid' when calling StorefrontApi->GetEmailCommseqStatOverall");

            var localVarPath = "/storefront/{storefront_oid}/email/commseqs/{commseq_uuid}/stat";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (storefrontOid != null) localVarPathParams.Add("storefront_oid", this.Configuration.ApiClient.ParameterToString(storefrontOid)); // path parameter
            if (commseqUuid != null) localVarPathParams.Add("commseq_uuid", this.Configuration.ApiClient.ParameterToString(commseqUuid)); // path parameter

            // authentication (ultraCartBrowserApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key")))
            {
                localVarHeaderParams["x-ultracart-browser-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key");
            }
            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetEmailCommseqStatOverall", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EmailCommseqStatResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (EmailCommseqStatResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EmailCommseqStatResponse)));
        }

        /// <summary>
        /// Get communication sequence stats overall 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="commseqUuid"></param>
        /// <returns>Task of EmailCommseqStatResponse</returns>
        public async System.Threading.Tasks.Task<EmailCommseqStatResponse> GetEmailCommseqStatOverallAsync (int? storefrontOid, string commseqUuid)
        {
             ApiResponse<EmailCommseqStatResponse> localVarResponse = await GetEmailCommseqStatOverallAsyncWithHttpInfo(storefrontOid, commseqUuid);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get communication sequence stats overall 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="commseqUuid"></param>
        /// <returns>Task of ApiResponse (EmailCommseqStatResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<EmailCommseqStatResponse>> GetEmailCommseqStatOverallAsyncWithHttpInfo (int? storefrontOid, string commseqUuid)
        {
            // verify the required parameter 'storefrontOid' is set
            if (storefrontOid == null)
                throw new ApiException(400, "Missing required parameter 'storefrontOid' when calling StorefrontApi->GetEmailCommseqStatOverall");
            // verify the required parameter 'commseqUuid' is set
            if (commseqUuid == null)
                throw new ApiException(400, "Missing required parameter 'commseqUuid' when calling StorefrontApi->GetEmailCommseqStatOverall");

            var localVarPath = "/storefront/{storefront_oid}/email/commseqs/{commseq_uuid}/stat";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (storefrontOid != null) localVarPathParams.Add("storefront_oid", this.Configuration.ApiClient.ParameterToString(storefrontOid)); // path parameter
            if (commseqUuid != null) localVarPathParams.Add("commseq_uuid", this.Configuration.ApiClient.ParameterToString(commseqUuid)); // path parameter

            // authentication (ultraCartBrowserApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key")))
            {
                localVarHeaderParams["x-ultracart-browser-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key");
            }
            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetEmailCommseqStatOverall", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EmailCommseqStatResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (EmailCommseqStatResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EmailCommseqStatResponse)));
        }

        /// <summary>
        /// Get email communication sequence step stats 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="commseqUuid"></param>
        /// <param name="statsRequest">StatsRequest</param>
        /// <returns>EmailStepStatResponse</returns>
        public EmailStepStatResponse GetEmailCommseqStepStats (int? storefrontOid, string commseqUuid, EmailStepStatRequest statsRequest)
        {
             ApiResponse<EmailStepStatResponse> localVarResponse = GetEmailCommseqStepStatsWithHttpInfo(storefrontOid, commseqUuid, statsRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get email communication sequence step stats 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="commseqUuid"></param>
        /// <param name="statsRequest">StatsRequest</param>
        /// <returns>ApiResponse of EmailStepStatResponse</returns>
        public ApiResponse< EmailStepStatResponse > GetEmailCommseqStepStatsWithHttpInfo (int? storefrontOid, string commseqUuid, EmailStepStatRequest statsRequest)
        {
            // verify the required parameter 'storefrontOid' is set
            if (storefrontOid == null)
                throw new ApiException(400, "Missing required parameter 'storefrontOid' when calling StorefrontApi->GetEmailCommseqStepStats");
            // verify the required parameter 'commseqUuid' is set
            if (commseqUuid == null)
                throw new ApiException(400, "Missing required parameter 'commseqUuid' when calling StorefrontApi->GetEmailCommseqStepStats");
            // verify the required parameter 'statsRequest' is set
            if (statsRequest == null)
                throw new ApiException(400, "Missing required parameter 'statsRequest' when calling StorefrontApi->GetEmailCommseqStepStats");

            var localVarPath = "/storefront/{storefront_oid}/email/commseqs/{commseq_uuid}/stepStats";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (storefrontOid != null) localVarPathParams.Add("storefront_oid", this.Configuration.ApiClient.ParameterToString(storefrontOid)); // path parameter
            if (commseqUuid != null) localVarPathParams.Add("commseq_uuid", this.Configuration.ApiClient.ParameterToString(commseqUuid)); // path parameter
            if (statsRequest != null && statsRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(statsRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = statsRequest; // byte array
            }

            // authentication (ultraCartBrowserApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key")))
            {
                localVarHeaderParams["x-ultracart-browser-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key");
            }
            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetEmailCommseqStepStats", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EmailStepStatResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (EmailStepStatResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EmailStepStatResponse)));
        }

        /// <summary>
        /// Get email communication sequence step stats 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="commseqUuid"></param>
        /// <param name="statsRequest">StatsRequest</param>
        /// <returns>Task of EmailStepStatResponse</returns>
        public async System.Threading.Tasks.Task<EmailStepStatResponse> GetEmailCommseqStepStatsAsync (int? storefrontOid, string commseqUuid, EmailStepStatRequest statsRequest)
        {
             ApiResponse<EmailStepStatResponse> localVarResponse = await GetEmailCommseqStepStatsAsyncWithHttpInfo(storefrontOid, commseqUuid, statsRequest);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get email communication sequence step stats 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="commseqUuid"></param>
        /// <param name="statsRequest">StatsRequest</param>
        /// <returns>Task of ApiResponse (EmailStepStatResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<EmailStepStatResponse>> GetEmailCommseqStepStatsAsyncWithHttpInfo (int? storefrontOid, string commseqUuid, EmailStepStatRequest statsRequest)
        {
            // verify the required parameter 'storefrontOid' is set
            if (storefrontOid == null)
                throw new ApiException(400, "Missing required parameter 'storefrontOid' when calling StorefrontApi->GetEmailCommseqStepStats");
            // verify the required parameter 'commseqUuid' is set
            if (commseqUuid == null)
                throw new ApiException(400, "Missing required parameter 'commseqUuid' when calling StorefrontApi->GetEmailCommseqStepStats");
            // verify the required parameter 'statsRequest' is set
            if (statsRequest == null)
                throw new ApiException(400, "Missing required parameter 'statsRequest' when calling StorefrontApi->GetEmailCommseqStepStats");

            var localVarPath = "/storefront/{storefront_oid}/email/commseqs/{commseq_uuid}/stepStats";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (storefrontOid != null) localVarPathParams.Add("storefront_oid", this.Configuration.ApiClient.ParameterToString(storefrontOid)); // path parameter
            if (commseqUuid != null) localVarPathParams.Add("commseq_uuid", this.Configuration.ApiClient.ParameterToString(commseqUuid)); // path parameter
            if (statsRequest != null && statsRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(statsRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = statsRequest; // byte array
            }

            // authentication (ultraCartBrowserApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key")))
            {
                localVarHeaderParams["x-ultracart-browser-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key");
            }
            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetEmailCommseqStepStats", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EmailStepStatResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (EmailStepStatResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EmailStepStatResponse)));
        }

        /// <summary>
        /// Get email communication sequence customers waiting at each requested step 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="commseqUuid"></param>
        /// <param name="waitingRequest">WaitingRequest</param>
        /// <returns>EmailStepWaitingResponse</returns>
        public EmailStepWaitingResponse GetEmailCommseqStepWaiting (int? storefrontOid, string commseqUuid, EmailStepWaitingRequest waitingRequest)
        {
             ApiResponse<EmailStepWaitingResponse> localVarResponse = GetEmailCommseqStepWaitingWithHttpInfo(storefrontOid, commseqUuid, waitingRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get email communication sequence customers waiting at each requested step 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="commseqUuid"></param>
        /// <param name="waitingRequest">WaitingRequest</param>
        /// <returns>ApiResponse of EmailStepWaitingResponse</returns>
        public ApiResponse< EmailStepWaitingResponse > GetEmailCommseqStepWaitingWithHttpInfo (int? storefrontOid, string commseqUuid, EmailStepWaitingRequest waitingRequest)
        {
            // verify the required parameter 'storefrontOid' is set
            if (storefrontOid == null)
                throw new ApiException(400, "Missing required parameter 'storefrontOid' when calling StorefrontApi->GetEmailCommseqStepWaiting");
            // verify the required parameter 'commseqUuid' is set
            if (commseqUuid == null)
                throw new ApiException(400, "Missing required parameter 'commseqUuid' when calling StorefrontApi->GetEmailCommseqStepWaiting");
            // verify the required parameter 'waitingRequest' is set
            if (waitingRequest == null)
                throw new ApiException(400, "Missing required parameter 'waitingRequest' when calling StorefrontApi->GetEmailCommseqStepWaiting");

            var localVarPath = "/storefront/{storefront_oid}/email/commseqs/{commseq_uuid}/waiting";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (storefrontOid != null) localVarPathParams.Add("storefront_oid", this.Configuration.ApiClient.ParameterToString(storefrontOid)); // path parameter
            if (commseqUuid != null) localVarPathParams.Add("commseq_uuid", this.Configuration.ApiClient.ParameterToString(commseqUuid)); // path parameter
            if (waitingRequest != null && waitingRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(waitingRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = waitingRequest; // byte array
            }

            // authentication (ultraCartBrowserApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key")))
            {
                localVarHeaderParams["x-ultracart-browser-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key");
            }
            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetEmailCommseqStepWaiting", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EmailStepWaitingResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (EmailStepWaitingResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EmailStepWaitingResponse)));
        }

        /// <summary>
        /// Get email communication sequence customers waiting at each requested step 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="commseqUuid"></param>
        /// <param name="waitingRequest">WaitingRequest</param>
        /// <returns>Task of EmailStepWaitingResponse</returns>
        public async System.Threading.Tasks.Task<EmailStepWaitingResponse> GetEmailCommseqStepWaitingAsync (int? storefrontOid, string commseqUuid, EmailStepWaitingRequest waitingRequest)
        {
             ApiResponse<EmailStepWaitingResponse> localVarResponse = await GetEmailCommseqStepWaitingAsyncWithHttpInfo(storefrontOid, commseqUuid, waitingRequest);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get email communication sequence customers waiting at each requested step 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="commseqUuid"></param>
        /// <param name="waitingRequest">WaitingRequest</param>
        /// <returns>Task of ApiResponse (EmailStepWaitingResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<EmailStepWaitingResponse>> GetEmailCommseqStepWaitingAsyncWithHttpInfo (int? storefrontOid, string commseqUuid, EmailStepWaitingRequest waitingRequest)
        {
            // verify the required parameter 'storefrontOid' is set
            if (storefrontOid == null)
                throw new ApiException(400, "Missing required parameter 'storefrontOid' when calling StorefrontApi->GetEmailCommseqStepWaiting");
            // verify the required parameter 'commseqUuid' is set
            if (commseqUuid == null)
                throw new ApiException(400, "Missing required parameter 'commseqUuid' when calling StorefrontApi->GetEmailCommseqStepWaiting");
            // verify the required parameter 'waitingRequest' is set
            if (waitingRequest == null)
                throw new ApiException(400, "Missing required parameter 'waitingRequest' when calling StorefrontApi->GetEmailCommseqStepWaiting");

            var localVarPath = "/storefront/{storefront_oid}/email/commseqs/{commseq_uuid}/waiting";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (storefrontOid != null) localVarPathParams.Add("storefront_oid", this.Configuration.ApiClient.ParameterToString(storefrontOid)); // path parameter
            if (commseqUuid != null) localVarPathParams.Add("commseq_uuid", this.Configuration.ApiClient.ParameterToString(commseqUuid)); // path parameter
            if (waitingRequest != null && waitingRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(waitingRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = waitingRequest; // byte array
            }

            // authentication (ultraCartBrowserApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key")))
            {
                localVarHeaderParams["x-ultracart-browser-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key");
            }
            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetEmailCommseqStepWaiting", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EmailStepWaitingResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (EmailStepWaitingResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EmailStepWaitingResponse)));
        }

        /// <summary>
        /// Get email webhook editor values 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="commseqUuid"></param>
        /// <returns>EmailWebhookEditorValuesResponse</returns>
        public EmailWebhookEditorValuesResponse GetEmailCommseqWebhookEditorValues (int? storefrontOid, string commseqUuid)
        {
             ApiResponse<EmailWebhookEditorValuesResponse> localVarResponse = GetEmailCommseqWebhookEditorValuesWithHttpInfo(storefrontOid, commseqUuid);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get email webhook editor values 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="commseqUuid"></param>
        /// <returns>ApiResponse of EmailWebhookEditorValuesResponse</returns>
        public ApiResponse< EmailWebhookEditorValuesResponse > GetEmailCommseqWebhookEditorValuesWithHttpInfo (int? storefrontOid, string commseqUuid)
        {
            // verify the required parameter 'storefrontOid' is set
            if (storefrontOid == null)
                throw new ApiException(400, "Missing required parameter 'storefrontOid' when calling StorefrontApi->GetEmailCommseqWebhookEditorValues");
            // verify the required parameter 'commseqUuid' is set
            if (commseqUuid == null)
                throw new ApiException(400, "Missing required parameter 'commseqUuid' when calling StorefrontApi->GetEmailCommseqWebhookEditorValues");

            var localVarPath = "/storefront/{storefront_oid}/email/commseqs/{commseq_uuid}/webhookEditorValues";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (storefrontOid != null) localVarPathParams.Add("storefront_oid", this.Configuration.ApiClient.ParameterToString(storefrontOid)); // path parameter
            if (commseqUuid != null) localVarPathParams.Add("commseq_uuid", this.Configuration.ApiClient.ParameterToString(commseqUuid)); // path parameter

            // authentication (ultraCartBrowserApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key")))
            {
                localVarHeaderParams["x-ultracart-browser-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key");
            }
            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetEmailCommseqWebhookEditorValues", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EmailWebhookEditorValuesResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (EmailWebhookEditorValuesResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EmailWebhookEditorValuesResponse)));
        }

        /// <summary>
        /// Get email webhook editor values 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="commseqUuid"></param>
        /// <returns>Task of EmailWebhookEditorValuesResponse</returns>
        public async System.Threading.Tasks.Task<EmailWebhookEditorValuesResponse> GetEmailCommseqWebhookEditorValuesAsync (int? storefrontOid, string commseqUuid)
        {
             ApiResponse<EmailWebhookEditorValuesResponse> localVarResponse = await GetEmailCommseqWebhookEditorValuesAsyncWithHttpInfo(storefrontOid, commseqUuid);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get email webhook editor values 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="commseqUuid"></param>
        /// <returns>Task of ApiResponse (EmailWebhookEditorValuesResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<EmailWebhookEditorValuesResponse>> GetEmailCommseqWebhookEditorValuesAsyncWithHttpInfo (int? storefrontOid, string commseqUuid)
        {
            // verify the required parameter 'storefrontOid' is set
            if (storefrontOid == null)
                throw new ApiException(400, "Missing required parameter 'storefrontOid' when calling StorefrontApi->GetEmailCommseqWebhookEditorValues");
            // verify the required parameter 'commseqUuid' is set
            if (commseqUuid == null)
                throw new ApiException(400, "Missing required parameter 'commseqUuid' when calling StorefrontApi->GetEmailCommseqWebhookEditorValues");

            var localVarPath = "/storefront/{storefront_oid}/email/commseqs/{commseq_uuid}/webhookEditorValues";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (storefrontOid != null) localVarPathParams.Add("storefront_oid", this.Configuration.ApiClient.ParameterToString(storefrontOid)); // path parameter
            if (commseqUuid != null) localVarPathParams.Add("commseq_uuid", this.Configuration.ApiClient.ParameterToString(commseqUuid)); // path parameter

            // authentication (ultraCartBrowserApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key")))
            {
                localVarHeaderParams["x-ultracart-browser-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key");
            }
            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetEmailCommseqWebhookEditorValues", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EmailWebhookEditorValuesResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (EmailWebhookEditorValuesResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EmailWebhookEditorValuesResponse)));
        }

        /// <summary>
        /// Get email commseqs 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <returns>EmailCommseqsResponse</returns>
        public EmailCommseqsResponse GetEmailCommseqs (int? storefrontOid)
        {
             ApiResponse<EmailCommseqsResponse> localVarResponse = GetEmailCommseqsWithHttpInfo(storefrontOid);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get email commseqs 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <returns>ApiResponse of EmailCommseqsResponse</returns>
        public ApiResponse< EmailCommseqsResponse > GetEmailCommseqsWithHttpInfo (int? storefrontOid)
        {
            // verify the required parameter 'storefrontOid' is set
            if (storefrontOid == null)
                throw new ApiException(400, "Missing required parameter 'storefrontOid' when calling StorefrontApi->GetEmailCommseqs");

            var localVarPath = "/storefront/{storefront_oid}/email/commseqs";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (storefrontOid != null) localVarPathParams.Add("storefront_oid", this.Configuration.ApiClient.ParameterToString(storefrontOid)); // path parameter

            // authentication (ultraCartBrowserApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key")))
            {
                localVarHeaderParams["x-ultracart-browser-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key");
            }
            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetEmailCommseqs", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EmailCommseqsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (EmailCommseqsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EmailCommseqsResponse)));
        }

        /// <summary>
        /// Get email commseqs 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <returns>Task of EmailCommseqsResponse</returns>
        public async System.Threading.Tasks.Task<EmailCommseqsResponse> GetEmailCommseqsAsync (int? storefrontOid)
        {
             ApiResponse<EmailCommseqsResponse> localVarResponse = await GetEmailCommseqsAsyncWithHttpInfo(storefrontOid);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get email commseqs 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <returns>Task of ApiResponse (EmailCommseqsResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<EmailCommseqsResponse>> GetEmailCommseqsAsyncWithHttpInfo (int? storefrontOid)
        {
            // verify the required parameter 'storefrontOid' is set
            if (storefrontOid == null)
                throw new ApiException(400, "Missing required parameter 'storefrontOid' when calling StorefrontApi->GetEmailCommseqs");

            var localVarPath = "/storefront/{storefront_oid}/email/commseqs";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (storefrontOid != null) localVarPathParams.Add("storefront_oid", this.Configuration.ApiClient.ParameterToString(storefrontOid)); // path parameter

            // authentication (ultraCartBrowserApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key")))
            {
                localVarHeaderParams["x-ultracart-browser-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key");
            }
            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetEmailCommseqs", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EmailCommseqsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (EmailCommseqsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EmailCommseqsResponse)));
        }

        /// <summary>
        /// Get customers editor URL 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="emailCustomerUuid"></param>
        /// <returns>EmailCustomerEditorUrlResponse</returns>
        public EmailCustomerEditorUrlResponse GetEmailCustomerEditorUrl (int? storefrontOid, string emailCustomerUuid)
        {
             ApiResponse<EmailCustomerEditorUrlResponse> localVarResponse = GetEmailCustomerEditorUrlWithHttpInfo(storefrontOid, emailCustomerUuid);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get customers editor URL 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="emailCustomerUuid"></param>
        /// <returns>ApiResponse of EmailCustomerEditorUrlResponse</returns>
        public ApiResponse< EmailCustomerEditorUrlResponse > GetEmailCustomerEditorUrlWithHttpInfo (int? storefrontOid, string emailCustomerUuid)
        {
            // verify the required parameter 'storefrontOid' is set
            if (storefrontOid == null)
                throw new ApiException(400, "Missing required parameter 'storefrontOid' when calling StorefrontApi->GetEmailCustomerEditorUrl");
            // verify the required parameter 'emailCustomerUuid' is set
            if (emailCustomerUuid == null)
                throw new ApiException(400, "Missing required parameter 'emailCustomerUuid' when calling StorefrontApi->GetEmailCustomerEditorUrl");

            var localVarPath = "/storefront/{storefront_oid}/email/customers/{email_customer_uuid}/editor_url";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (storefrontOid != null) localVarPathParams.Add("storefront_oid", this.Configuration.ApiClient.ParameterToString(storefrontOid)); // path parameter
            if (emailCustomerUuid != null) localVarPathParams.Add("email_customer_uuid", this.Configuration.ApiClient.ParameterToString(emailCustomerUuid)); // path parameter

            // authentication (ultraCartBrowserApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key")))
            {
                localVarHeaderParams["x-ultracart-browser-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key");
            }
            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetEmailCustomerEditorUrl", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EmailCustomerEditorUrlResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (EmailCustomerEditorUrlResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EmailCustomerEditorUrlResponse)));
        }

        /// <summary>
        /// Get customers editor URL 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="emailCustomerUuid"></param>
        /// <returns>Task of EmailCustomerEditorUrlResponse</returns>
        public async System.Threading.Tasks.Task<EmailCustomerEditorUrlResponse> GetEmailCustomerEditorUrlAsync (int? storefrontOid, string emailCustomerUuid)
        {
             ApiResponse<EmailCustomerEditorUrlResponse> localVarResponse = await GetEmailCustomerEditorUrlAsyncWithHttpInfo(storefrontOid, emailCustomerUuid);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get customers editor URL 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="emailCustomerUuid"></param>
        /// <returns>Task of ApiResponse (EmailCustomerEditorUrlResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<EmailCustomerEditorUrlResponse>> GetEmailCustomerEditorUrlAsyncWithHttpInfo (int? storefrontOid, string emailCustomerUuid)
        {
            // verify the required parameter 'storefrontOid' is set
            if (storefrontOid == null)
                throw new ApiException(400, "Missing required parameter 'storefrontOid' when calling StorefrontApi->GetEmailCustomerEditorUrl");
            // verify the required parameter 'emailCustomerUuid' is set
            if (emailCustomerUuid == null)
                throw new ApiException(400, "Missing required parameter 'emailCustomerUuid' when calling StorefrontApi->GetEmailCustomerEditorUrl");

            var localVarPath = "/storefront/{storefront_oid}/email/customers/{email_customer_uuid}/editor_url";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (storefrontOid != null) localVarPathParams.Add("storefront_oid", this.Configuration.ApiClient.ParameterToString(storefrontOid)); // path parameter
            if (emailCustomerUuid != null) localVarPathParams.Add("email_customer_uuid", this.Configuration.ApiClient.ParameterToString(emailCustomerUuid)); // path parameter

            // authentication (ultraCartBrowserApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key")))
            {
                localVarHeaderParams["x-ultracart-browser-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key");
            }
            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetEmailCustomerEditorUrl", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EmailCustomerEditorUrlResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (EmailCustomerEditorUrlResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EmailCustomerEditorUrlResponse)));
        }

        /// <summary>
        /// Get email customers 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="pageNumber"> (optional)</param>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="searchEmailPrefix"> (optional)</param>
        /// <returns>EmailCustomersResponse</returns>
        public EmailCustomersResponse GetEmailCustomers (int? storefrontOid, int? pageNumber = null, int? pageSize = null, string searchEmailPrefix = null)
        {
             ApiResponse<EmailCustomersResponse> localVarResponse = GetEmailCustomersWithHttpInfo(storefrontOid, pageNumber, pageSize, searchEmailPrefix);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get email customers 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="pageNumber"> (optional)</param>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="searchEmailPrefix"> (optional)</param>
        /// <returns>ApiResponse of EmailCustomersResponse</returns>
        public ApiResponse< EmailCustomersResponse > GetEmailCustomersWithHttpInfo (int? storefrontOid, int? pageNumber = null, int? pageSize = null, string searchEmailPrefix = null)
        {
            // verify the required parameter 'storefrontOid' is set
            if (storefrontOid == null)
                throw new ApiException(400, "Missing required parameter 'storefrontOid' when calling StorefrontApi->GetEmailCustomers");

            var localVarPath = "/storefront/{storefront_oid}/email/customers";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (storefrontOid != null) localVarPathParams.Add("storefront_oid", this.Configuration.ApiClient.ParameterToString(storefrontOid)); // path parameter
            if (pageNumber != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageNumber", pageNumber)); // query parameter
            if (pageSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageSize", pageSize)); // query parameter
            if (searchEmailPrefix != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "searchEmailPrefix", searchEmailPrefix)); // query parameter

            // authentication (ultraCartBrowserApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key")))
            {
                localVarHeaderParams["x-ultracart-browser-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key");
            }
            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetEmailCustomers", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EmailCustomersResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (EmailCustomersResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EmailCustomersResponse)));
        }

        /// <summary>
        /// Get email customers 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="pageNumber"> (optional)</param>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="searchEmailPrefix"> (optional)</param>
        /// <returns>Task of EmailCustomersResponse</returns>
        public async System.Threading.Tasks.Task<EmailCustomersResponse> GetEmailCustomersAsync (int? storefrontOid, int? pageNumber = null, int? pageSize = null, string searchEmailPrefix = null)
        {
             ApiResponse<EmailCustomersResponse> localVarResponse = await GetEmailCustomersAsyncWithHttpInfo(storefrontOid, pageNumber, pageSize, searchEmailPrefix);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get email customers 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="pageNumber"> (optional)</param>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="searchEmailPrefix"> (optional)</param>
        /// <returns>Task of ApiResponse (EmailCustomersResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<EmailCustomersResponse>> GetEmailCustomersAsyncWithHttpInfo (int? storefrontOid, int? pageNumber = null, int? pageSize = null, string searchEmailPrefix = null)
        {
            // verify the required parameter 'storefrontOid' is set
            if (storefrontOid == null)
                throw new ApiException(400, "Missing required parameter 'storefrontOid' when calling StorefrontApi->GetEmailCustomers");

            var localVarPath = "/storefront/{storefront_oid}/email/customers";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (storefrontOid != null) localVarPathParams.Add("storefront_oid", this.Configuration.ApiClient.ParameterToString(storefrontOid)); // path parameter
            if (pageNumber != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageNumber", pageNumber)); // query parameter
            if (pageSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageSize", pageSize)); // query parameter
            if (searchEmailPrefix != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "searchEmailPrefix", searchEmailPrefix)); // query parameter

            // authentication (ultraCartBrowserApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key")))
            {
                localVarHeaderParams["x-ultracart-browser-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key");
            }
            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetEmailCustomers", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EmailCustomersResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (EmailCustomersResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EmailCustomersResponse)));
        }

        /// <summary>
        /// Get email dashboard activity 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="lastRecords"> (optional)</param>
        /// <returns>EmailDashboardActivityResponse</returns>
        public EmailDashboardActivityResponse GetEmailDashboardActivity (int? storefrontOid, int? lastRecords = null)
        {
             ApiResponse<EmailDashboardActivityResponse> localVarResponse = GetEmailDashboardActivityWithHttpInfo(storefrontOid, lastRecords);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get email dashboard activity 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="lastRecords"> (optional)</param>
        /// <returns>ApiResponse of EmailDashboardActivityResponse</returns>
        public ApiResponse< EmailDashboardActivityResponse > GetEmailDashboardActivityWithHttpInfo (int? storefrontOid, int? lastRecords = null)
        {
            // verify the required parameter 'storefrontOid' is set
            if (storefrontOid == null)
                throw new ApiException(400, "Missing required parameter 'storefrontOid' when calling StorefrontApi->GetEmailDashboardActivity");

            var localVarPath = "/storefront/{storefront_oid}/email/dashboard_activity";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (storefrontOid != null) localVarPathParams.Add("storefront_oid", this.Configuration.ApiClient.ParameterToString(storefrontOid)); // path parameter
            if (lastRecords != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "last_records", lastRecords)); // query parameter

            // authentication (ultraCartBrowserApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key")))
            {
                localVarHeaderParams["x-ultracart-browser-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key");
            }
            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetEmailDashboardActivity", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EmailDashboardActivityResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (EmailDashboardActivityResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EmailDashboardActivityResponse)));
        }

        /// <summary>
        /// Get email dashboard activity 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="lastRecords"> (optional)</param>
        /// <returns>Task of EmailDashboardActivityResponse</returns>
        public async System.Threading.Tasks.Task<EmailDashboardActivityResponse> GetEmailDashboardActivityAsync (int? storefrontOid, int? lastRecords = null)
        {
             ApiResponse<EmailDashboardActivityResponse> localVarResponse = await GetEmailDashboardActivityAsyncWithHttpInfo(storefrontOid, lastRecords);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get email dashboard activity 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="lastRecords"> (optional)</param>
        /// <returns>Task of ApiResponse (EmailDashboardActivityResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<EmailDashboardActivityResponse>> GetEmailDashboardActivityAsyncWithHttpInfo (int? storefrontOid, int? lastRecords = null)
        {
            // verify the required parameter 'storefrontOid' is set
            if (storefrontOid == null)
                throw new ApiException(400, "Missing required parameter 'storefrontOid' when calling StorefrontApi->GetEmailDashboardActivity");

            var localVarPath = "/storefront/{storefront_oid}/email/dashboard_activity";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (storefrontOid != null) localVarPathParams.Add("storefront_oid", this.Configuration.ApiClient.ParameterToString(storefrontOid)); // path parameter
            if (lastRecords != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "last_records", lastRecords)); // query parameter

            // authentication (ultraCartBrowserApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key")))
            {
                localVarHeaderParams["x-ultracart-browser-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key");
            }
            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetEmailDashboardActivity", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EmailDashboardActivityResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (EmailDashboardActivityResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EmailDashboardActivityResponse)));
        }

        /// <summary>
        /// Get dashboard stats 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="days"> (optional)</param>
        /// <returns>EmailDashboardStatsResponse</returns>
        public EmailDashboardStatsResponse GetEmailDashboardStats (int? storefrontOid, int? days = null)
        {
             ApiResponse<EmailDashboardStatsResponse> localVarResponse = GetEmailDashboardStatsWithHttpInfo(storefrontOid, days);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get dashboard stats 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="days"> (optional)</param>
        /// <returns>ApiResponse of EmailDashboardStatsResponse</returns>
        public ApiResponse< EmailDashboardStatsResponse > GetEmailDashboardStatsWithHttpInfo (int? storefrontOid, int? days = null)
        {
            // verify the required parameter 'storefrontOid' is set
            if (storefrontOid == null)
                throw new ApiException(400, "Missing required parameter 'storefrontOid' when calling StorefrontApi->GetEmailDashboardStats");

            var localVarPath = "/storefront/{storefront_oid}/email/dashboard_stats";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (storefrontOid != null) localVarPathParams.Add("storefront_oid", this.Configuration.ApiClient.ParameterToString(storefrontOid)); // path parameter
            if (days != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "days", days)); // query parameter

            // authentication (ultraCartBrowserApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key")))
            {
                localVarHeaderParams["x-ultracart-browser-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key");
            }
            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetEmailDashboardStats", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EmailDashboardStatsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (EmailDashboardStatsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EmailDashboardStatsResponse)));
        }

        /// <summary>
        /// Get dashboard stats 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="days"> (optional)</param>
        /// <returns>Task of EmailDashboardStatsResponse</returns>
        public async System.Threading.Tasks.Task<EmailDashboardStatsResponse> GetEmailDashboardStatsAsync (int? storefrontOid, int? days = null)
        {
             ApiResponse<EmailDashboardStatsResponse> localVarResponse = await GetEmailDashboardStatsAsyncWithHttpInfo(storefrontOid, days);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get dashboard stats 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="days"> (optional)</param>
        /// <returns>Task of ApiResponse (EmailDashboardStatsResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<EmailDashboardStatsResponse>> GetEmailDashboardStatsAsyncWithHttpInfo (int? storefrontOid, int? days = null)
        {
            // verify the required parameter 'storefrontOid' is set
            if (storefrontOid == null)
                throw new ApiException(400, "Missing required parameter 'storefrontOid' when calling StorefrontApi->GetEmailDashboardStats");

            var localVarPath = "/storefront/{storefront_oid}/email/dashboard_stats";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (storefrontOid != null) localVarPathParams.Add("storefront_oid", this.Configuration.ApiClient.ParameterToString(storefrontOid)); // path parameter
            if (days != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "days", days)); // query parameter

            // authentication (ultraCartBrowserApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key")))
            {
                localVarHeaderParams["x-ultracart-browser-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key");
            }
            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetEmailDashboardStats", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EmailDashboardStatsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (EmailDashboardStatsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EmailDashboardStatsResponse)));
        }

        /// <summary>
        /// Get email dispatch logs 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="commseqUuid"></param>
        /// <param name="commseqStepUuid"></param>
        /// <returns>EmailCommseqStepLogsResponse</returns>
        public EmailCommseqStepLogsResponse GetEmailDispatchLogs (int? storefrontOid, string commseqUuid, string commseqStepUuid)
        {
             ApiResponse<EmailCommseqStepLogsResponse> localVarResponse = GetEmailDispatchLogsWithHttpInfo(storefrontOid, commseqUuid, commseqStepUuid);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get email dispatch logs 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="commseqUuid"></param>
        /// <param name="commseqStepUuid"></param>
        /// <returns>ApiResponse of EmailCommseqStepLogsResponse</returns>
        public ApiResponse< EmailCommseqStepLogsResponse > GetEmailDispatchLogsWithHttpInfo (int? storefrontOid, string commseqUuid, string commseqStepUuid)
        {
            // verify the required parameter 'storefrontOid' is set
            if (storefrontOid == null)
                throw new ApiException(400, "Missing required parameter 'storefrontOid' when calling StorefrontApi->GetEmailDispatchLogs");
            // verify the required parameter 'commseqUuid' is set
            if (commseqUuid == null)
                throw new ApiException(400, "Missing required parameter 'commseqUuid' when calling StorefrontApi->GetEmailDispatchLogs");
            // verify the required parameter 'commseqStepUuid' is set
            if (commseqStepUuid == null)
                throw new ApiException(400, "Missing required parameter 'commseqStepUuid' when calling StorefrontApi->GetEmailDispatchLogs");

            var localVarPath = "/storefront/{storefront_oid}/email/commseqs/{commseq_uuid}/steps/{commseq_step_uuid}/logs";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (storefrontOid != null) localVarPathParams.Add("storefront_oid", this.Configuration.ApiClient.ParameterToString(storefrontOid)); // path parameter
            if (commseqUuid != null) localVarPathParams.Add("commseq_uuid", this.Configuration.ApiClient.ParameterToString(commseqUuid)); // path parameter
            if (commseqStepUuid != null) localVarPathParams.Add("commseq_step_uuid", this.Configuration.ApiClient.ParameterToString(commseqStepUuid)); // path parameter

            // authentication (ultraCartBrowserApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key")))
            {
                localVarHeaderParams["x-ultracart-browser-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key");
            }
            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetEmailDispatchLogs", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EmailCommseqStepLogsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (EmailCommseqStepLogsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EmailCommseqStepLogsResponse)));
        }

        /// <summary>
        /// Get email dispatch logs 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="commseqUuid"></param>
        /// <param name="commseqStepUuid"></param>
        /// <returns>Task of EmailCommseqStepLogsResponse</returns>
        public async System.Threading.Tasks.Task<EmailCommseqStepLogsResponse> GetEmailDispatchLogsAsync (int? storefrontOid, string commseqUuid, string commseqStepUuid)
        {
             ApiResponse<EmailCommseqStepLogsResponse> localVarResponse = await GetEmailDispatchLogsAsyncWithHttpInfo(storefrontOid, commseqUuid, commseqStepUuid);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get email dispatch logs 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="commseqUuid"></param>
        /// <param name="commseqStepUuid"></param>
        /// <returns>Task of ApiResponse (EmailCommseqStepLogsResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<EmailCommseqStepLogsResponse>> GetEmailDispatchLogsAsyncWithHttpInfo (int? storefrontOid, string commseqUuid, string commseqStepUuid)
        {
            // verify the required parameter 'storefrontOid' is set
            if (storefrontOid == null)
                throw new ApiException(400, "Missing required parameter 'storefrontOid' when calling StorefrontApi->GetEmailDispatchLogs");
            // verify the required parameter 'commseqUuid' is set
            if (commseqUuid == null)
                throw new ApiException(400, "Missing required parameter 'commseqUuid' when calling StorefrontApi->GetEmailDispatchLogs");
            // verify the required parameter 'commseqStepUuid' is set
            if (commseqStepUuid == null)
                throw new ApiException(400, "Missing required parameter 'commseqStepUuid' when calling StorefrontApi->GetEmailDispatchLogs");

            var localVarPath = "/storefront/{storefront_oid}/email/commseqs/{commseq_uuid}/steps/{commseq_step_uuid}/logs";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (storefrontOid != null) localVarPathParams.Add("storefront_oid", this.Configuration.ApiClient.ParameterToString(storefrontOid)); // path parameter
            if (commseqUuid != null) localVarPathParams.Add("commseq_uuid", this.Configuration.ApiClient.ParameterToString(commseqUuid)); // path parameter
            if (commseqStepUuid != null) localVarPathParams.Add("commseq_step_uuid", this.Configuration.ApiClient.ParameterToString(commseqStepUuid)); // path parameter

            // authentication (ultraCartBrowserApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key")))
            {
                localVarHeaderParams["x-ultracart-browser-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key");
            }
            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetEmailDispatchLogs", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EmailCommseqStepLogsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (EmailCommseqStepLogsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EmailCommseqStepLogsResponse)));
        }

        /// <summary>
        /// Get email email 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="commseqEmailUuid"></param>
        /// <returns>EmailCommseqEmailResponse</returns>
        public EmailCommseqEmailResponse GetEmailEmail (int? storefrontOid, string commseqEmailUuid)
        {
             ApiResponse<EmailCommseqEmailResponse> localVarResponse = GetEmailEmailWithHttpInfo(storefrontOid, commseqEmailUuid);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get email email 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="commseqEmailUuid"></param>
        /// <returns>ApiResponse of EmailCommseqEmailResponse</returns>
        public ApiResponse< EmailCommseqEmailResponse > GetEmailEmailWithHttpInfo (int? storefrontOid, string commseqEmailUuid)
        {
            // verify the required parameter 'storefrontOid' is set
            if (storefrontOid == null)
                throw new ApiException(400, "Missing required parameter 'storefrontOid' when calling StorefrontApi->GetEmailEmail");
            // verify the required parameter 'commseqEmailUuid' is set
            if (commseqEmailUuid == null)
                throw new ApiException(400, "Missing required parameter 'commseqEmailUuid' when calling StorefrontApi->GetEmailEmail");

            var localVarPath = "/storefront/{storefront_oid}/email/emails/{commseq_email_uuid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (storefrontOid != null) localVarPathParams.Add("storefront_oid", this.Configuration.ApiClient.ParameterToString(storefrontOid)); // path parameter
            if (commseqEmailUuid != null) localVarPathParams.Add("commseq_email_uuid", this.Configuration.ApiClient.ParameterToString(commseqEmailUuid)); // path parameter

            // authentication (ultraCartBrowserApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key")))
            {
                localVarHeaderParams["x-ultracart-browser-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key");
            }
            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetEmailEmail", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EmailCommseqEmailResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (EmailCommseqEmailResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EmailCommseqEmailResponse)));
        }

        /// <summary>
        /// Get email email 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="commseqEmailUuid"></param>
        /// <returns>Task of EmailCommseqEmailResponse</returns>
        public async System.Threading.Tasks.Task<EmailCommseqEmailResponse> GetEmailEmailAsync (int? storefrontOid, string commseqEmailUuid)
        {
             ApiResponse<EmailCommseqEmailResponse> localVarResponse = await GetEmailEmailAsyncWithHttpInfo(storefrontOid, commseqEmailUuid);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get email email 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="commseqEmailUuid"></param>
        /// <returns>Task of ApiResponse (EmailCommseqEmailResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<EmailCommseqEmailResponse>> GetEmailEmailAsyncWithHttpInfo (int? storefrontOid, string commseqEmailUuid)
        {
            // verify the required parameter 'storefrontOid' is set
            if (storefrontOid == null)
                throw new ApiException(400, "Missing required parameter 'storefrontOid' when calling StorefrontApi->GetEmailEmail");
            // verify the required parameter 'commseqEmailUuid' is set
            if (commseqEmailUuid == null)
                throw new ApiException(400, "Missing required parameter 'commseqEmailUuid' when calling StorefrontApi->GetEmailEmail");

            var localVarPath = "/storefront/{storefront_oid}/email/emails/{commseq_email_uuid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (storefrontOid != null) localVarPathParams.Add("storefront_oid", this.Configuration.ApiClient.ParameterToString(storefrontOid)); // path parameter
            if (commseqEmailUuid != null) localVarPathParams.Add("commseq_email_uuid", this.Configuration.ApiClient.ParameterToString(commseqEmailUuid)); // path parameter

            // authentication (ultraCartBrowserApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key")))
            {
                localVarHeaderParams["x-ultracart-browser-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key");
            }
            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetEmailEmail", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EmailCommseqEmailResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (EmailCommseqEmailResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EmailCommseqEmailResponse)));
        }

        /// <summary>
        /// Get email email clicks 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="commseqUuid"></param>
        /// <param name="commseqStepUuid"></param>
        /// <param name="commseqEmailUuid"></param>
        /// <param name="days"> (optional)</param>
        /// <returns>EmailClicksResponse</returns>
        public EmailClicksResponse GetEmailEmailClicks (int? storefrontOid, string commseqUuid, string commseqStepUuid, string commseqEmailUuid, int? days = null)
        {
             ApiResponse<EmailClicksResponse> localVarResponse = GetEmailEmailClicksWithHttpInfo(storefrontOid, commseqUuid, commseqStepUuid, commseqEmailUuid, days);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get email email clicks 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="commseqUuid"></param>
        /// <param name="commseqStepUuid"></param>
        /// <param name="commseqEmailUuid"></param>
        /// <param name="days"> (optional)</param>
        /// <returns>ApiResponse of EmailClicksResponse</returns>
        public ApiResponse< EmailClicksResponse > GetEmailEmailClicksWithHttpInfo (int? storefrontOid, string commseqUuid, string commseqStepUuid, string commseqEmailUuid, int? days = null)
        {
            // verify the required parameter 'storefrontOid' is set
            if (storefrontOid == null)
                throw new ApiException(400, "Missing required parameter 'storefrontOid' when calling StorefrontApi->GetEmailEmailClicks");
            // verify the required parameter 'commseqUuid' is set
            if (commseqUuid == null)
                throw new ApiException(400, "Missing required parameter 'commseqUuid' when calling StorefrontApi->GetEmailEmailClicks");
            // verify the required parameter 'commseqStepUuid' is set
            if (commseqStepUuid == null)
                throw new ApiException(400, "Missing required parameter 'commseqStepUuid' when calling StorefrontApi->GetEmailEmailClicks");
            // verify the required parameter 'commseqEmailUuid' is set
            if (commseqEmailUuid == null)
                throw new ApiException(400, "Missing required parameter 'commseqEmailUuid' when calling StorefrontApi->GetEmailEmailClicks");

            var localVarPath = "/storefront/{storefront_oid}/email/commseqs/{commseq_uuid}/steps/{commseq_step_uuid}/emails/{commseq_email_uuid}/clicks";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (storefrontOid != null) localVarPathParams.Add("storefront_oid", this.Configuration.ApiClient.ParameterToString(storefrontOid)); // path parameter
            if (commseqUuid != null) localVarPathParams.Add("commseq_uuid", this.Configuration.ApiClient.ParameterToString(commseqUuid)); // path parameter
            if (commseqStepUuid != null) localVarPathParams.Add("commseq_step_uuid", this.Configuration.ApiClient.ParameterToString(commseqStepUuid)); // path parameter
            if (commseqEmailUuid != null) localVarPathParams.Add("commseq_email_uuid", this.Configuration.ApiClient.ParameterToString(commseqEmailUuid)); // path parameter
            if (days != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "days", days)); // query parameter

            // authentication (ultraCartBrowserApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key")))
            {
                localVarHeaderParams["x-ultracart-browser-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key");
            }
            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetEmailEmailClicks", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EmailClicksResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (EmailClicksResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EmailClicksResponse)));
        }

        /// <summary>
        /// Get email email clicks 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="commseqUuid"></param>
        /// <param name="commseqStepUuid"></param>
        /// <param name="commseqEmailUuid"></param>
        /// <param name="days"> (optional)</param>
        /// <returns>Task of EmailClicksResponse</returns>
        public async System.Threading.Tasks.Task<EmailClicksResponse> GetEmailEmailClicksAsync (int? storefrontOid, string commseqUuid, string commseqStepUuid, string commseqEmailUuid, int? days = null)
        {
             ApiResponse<EmailClicksResponse> localVarResponse = await GetEmailEmailClicksAsyncWithHttpInfo(storefrontOid, commseqUuid, commseqStepUuid, commseqEmailUuid, days);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get email email clicks 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="commseqUuid"></param>
        /// <param name="commseqStepUuid"></param>
        /// <param name="commseqEmailUuid"></param>
        /// <param name="days"> (optional)</param>
        /// <returns>Task of ApiResponse (EmailClicksResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<EmailClicksResponse>> GetEmailEmailClicksAsyncWithHttpInfo (int? storefrontOid, string commseqUuid, string commseqStepUuid, string commseqEmailUuid, int? days = null)
        {
            // verify the required parameter 'storefrontOid' is set
            if (storefrontOid == null)
                throw new ApiException(400, "Missing required parameter 'storefrontOid' when calling StorefrontApi->GetEmailEmailClicks");
            // verify the required parameter 'commseqUuid' is set
            if (commseqUuid == null)
                throw new ApiException(400, "Missing required parameter 'commseqUuid' when calling StorefrontApi->GetEmailEmailClicks");
            // verify the required parameter 'commseqStepUuid' is set
            if (commseqStepUuid == null)
                throw new ApiException(400, "Missing required parameter 'commseqStepUuid' when calling StorefrontApi->GetEmailEmailClicks");
            // verify the required parameter 'commseqEmailUuid' is set
            if (commseqEmailUuid == null)
                throw new ApiException(400, "Missing required parameter 'commseqEmailUuid' when calling StorefrontApi->GetEmailEmailClicks");

            var localVarPath = "/storefront/{storefront_oid}/email/commseqs/{commseq_uuid}/steps/{commseq_step_uuid}/emails/{commseq_email_uuid}/clicks";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (storefrontOid != null) localVarPathParams.Add("storefront_oid", this.Configuration.ApiClient.ParameterToString(storefrontOid)); // path parameter
            if (commseqUuid != null) localVarPathParams.Add("commseq_uuid", this.Configuration.ApiClient.ParameterToString(commseqUuid)); // path parameter
            if (commseqStepUuid != null) localVarPathParams.Add("commseq_step_uuid", this.Configuration.ApiClient.ParameterToString(commseqStepUuid)); // path parameter
            if (commseqEmailUuid != null) localVarPathParams.Add("commseq_email_uuid", this.Configuration.ApiClient.ParameterToString(commseqEmailUuid)); // path parameter
            if (days != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "days", days)); // query parameter

            // authentication (ultraCartBrowserApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key")))
            {
                localVarHeaderParams["x-ultracart-browser-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key");
            }
            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetEmailEmailClicks", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EmailClicksResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (EmailClicksResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EmailClicksResponse)));
        }

        /// <summary>
        /// Get email order customer editor url 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="commseqEmailUuid"></param>
        /// <param name="orderId"></param>
        /// <returns>EmailCustomerEditorUrlResponse</returns>
        public EmailCustomerEditorUrlResponse GetEmailEmailCustomerEditorUrl (int? storefrontOid, string commseqEmailUuid, string orderId)
        {
             ApiResponse<EmailCustomerEditorUrlResponse> localVarResponse = GetEmailEmailCustomerEditorUrlWithHttpInfo(storefrontOid, commseqEmailUuid, orderId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get email order customer editor url 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="commseqEmailUuid"></param>
        /// <param name="orderId"></param>
        /// <returns>ApiResponse of EmailCustomerEditorUrlResponse</returns>
        public ApiResponse< EmailCustomerEditorUrlResponse > GetEmailEmailCustomerEditorUrlWithHttpInfo (int? storefrontOid, string commseqEmailUuid, string orderId)
        {
            // verify the required parameter 'storefrontOid' is set
            if (storefrontOid == null)
                throw new ApiException(400, "Missing required parameter 'storefrontOid' when calling StorefrontApi->GetEmailEmailCustomerEditorUrl");
            // verify the required parameter 'commseqEmailUuid' is set
            if (commseqEmailUuid == null)
                throw new ApiException(400, "Missing required parameter 'commseqEmailUuid' when calling StorefrontApi->GetEmailEmailCustomerEditorUrl");
            // verify the required parameter 'orderId' is set
            if (orderId == null)
                throw new ApiException(400, "Missing required parameter 'orderId' when calling StorefrontApi->GetEmailEmailCustomerEditorUrl");

            var localVarPath = "/storefront/{storefront_oid}/email/emails/{commseq_email_uuid}/orders/{order_id}/editor_url";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (storefrontOid != null) localVarPathParams.Add("storefront_oid", this.Configuration.ApiClient.ParameterToString(storefrontOid)); // path parameter
            if (commseqEmailUuid != null) localVarPathParams.Add("commseq_email_uuid", this.Configuration.ApiClient.ParameterToString(commseqEmailUuid)); // path parameter
            if (orderId != null) localVarPathParams.Add("order_id", this.Configuration.ApiClient.ParameterToString(orderId)); // path parameter

            // authentication (ultraCartBrowserApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key")))
            {
                localVarHeaderParams["x-ultracart-browser-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key");
            }
            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetEmailEmailCustomerEditorUrl", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EmailCustomerEditorUrlResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (EmailCustomerEditorUrlResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EmailCustomerEditorUrlResponse)));
        }

        /// <summary>
        /// Get email order customer editor url 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="commseqEmailUuid"></param>
        /// <param name="orderId"></param>
        /// <returns>Task of EmailCustomerEditorUrlResponse</returns>
        public async System.Threading.Tasks.Task<EmailCustomerEditorUrlResponse> GetEmailEmailCustomerEditorUrlAsync (int? storefrontOid, string commseqEmailUuid, string orderId)
        {
             ApiResponse<EmailCustomerEditorUrlResponse> localVarResponse = await GetEmailEmailCustomerEditorUrlAsyncWithHttpInfo(storefrontOid, commseqEmailUuid, orderId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get email order customer editor url 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="commseqEmailUuid"></param>
        /// <param name="orderId"></param>
        /// <returns>Task of ApiResponse (EmailCustomerEditorUrlResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<EmailCustomerEditorUrlResponse>> GetEmailEmailCustomerEditorUrlAsyncWithHttpInfo (int? storefrontOid, string commseqEmailUuid, string orderId)
        {
            // verify the required parameter 'storefrontOid' is set
            if (storefrontOid == null)
                throw new ApiException(400, "Missing required parameter 'storefrontOid' when calling StorefrontApi->GetEmailEmailCustomerEditorUrl");
            // verify the required parameter 'commseqEmailUuid' is set
            if (commseqEmailUuid == null)
                throw new ApiException(400, "Missing required parameter 'commseqEmailUuid' when calling StorefrontApi->GetEmailEmailCustomerEditorUrl");
            // verify the required parameter 'orderId' is set
            if (orderId == null)
                throw new ApiException(400, "Missing required parameter 'orderId' when calling StorefrontApi->GetEmailEmailCustomerEditorUrl");

            var localVarPath = "/storefront/{storefront_oid}/email/emails/{commseq_email_uuid}/orders/{order_id}/editor_url";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (storefrontOid != null) localVarPathParams.Add("storefront_oid", this.Configuration.ApiClient.ParameterToString(storefrontOid)); // path parameter
            if (commseqEmailUuid != null) localVarPathParams.Add("commseq_email_uuid", this.Configuration.ApiClient.ParameterToString(commseqEmailUuid)); // path parameter
            if (orderId != null) localVarPathParams.Add("order_id", this.Configuration.ApiClient.ParameterToString(orderId)); // path parameter

            // authentication (ultraCartBrowserApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key")))
            {
                localVarHeaderParams["x-ultracart-browser-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key");
            }
            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetEmailEmailCustomerEditorUrl", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EmailCustomerEditorUrlResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (EmailCustomerEditorUrlResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EmailCustomerEditorUrlResponse)));
        }

        /// <summary>
        /// Get email email orders 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="commseqUuid"></param>
        /// <param name="commseqStepUuid"></param>
        /// <param name="commseqEmailUuid"></param>
        /// <param name="days"> (optional)</param>
        /// <returns>EmailOrdersResponse</returns>
        public EmailOrdersResponse GetEmailEmailOrders (int? storefrontOid, string commseqUuid, string commseqStepUuid, string commseqEmailUuid, int? days = null)
        {
             ApiResponse<EmailOrdersResponse> localVarResponse = GetEmailEmailOrdersWithHttpInfo(storefrontOid, commseqUuid, commseqStepUuid, commseqEmailUuid, days);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get email email orders 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="commseqUuid"></param>
        /// <param name="commseqStepUuid"></param>
        /// <param name="commseqEmailUuid"></param>
        /// <param name="days"> (optional)</param>
        /// <returns>ApiResponse of EmailOrdersResponse</returns>
        public ApiResponse< EmailOrdersResponse > GetEmailEmailOrdersWithHttpInfo (int? storefrontOid, string commseqUuid, string commseqStepUuid, string commseqEmailUuid, int? days = null)
        {
            // verify the required parameter 'storefrontOid' is set
            if (storefrontOid == null)
                throw new ApiException(400, "Missing required parameter 'storefrontOid' when calling StorefrontApi->GetEmailEmailOrders");
            // verify the required parameter 'commseqUuid' is set
            if (commseqUuid == null)
                throw new ApiException(400, "Missing required parameter 'commseqUuid' when calling StorefrontApi->GetEmailEmailOrders");
            // verify the required parameter 'commseqStepUuid' is set
            if (commseqStepUuid == null)
                throw new ApiException(400, "Missing required parameter 'commseqStepUuid' when calling StorefrontApi->GetEmailEmailOrders");
            // verify the required parameter 'commseqEmailUuid' is set
            if (commseqEmailUuid == null)
                throw new ApiException(400, "Missing required parameter 'commseqEmailUuid' when calling StorefrontApi->GetEmailEmailOrders");

            var localVarPath = "/storefront/{storefront_oid}/email/commseqs/{commseq_uuid}/steps/{commseq_step_uuid}/emails/{commseq_email_uuid}/orders";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (storefrontOid != null) localVarPathParams.Add("storefront_oid", this.Configuration.ApiClient.ParameterToString(storefrontOid)); // path parameter
            if (commseqUuid != null) localVarPathParams.Add("commseq_uuid", this.Configuration.ApiClient.ParameterToString(commseqUuid)); // path parameter
            if (commseqStepUuid != null) localVarPathParams.Add("commseq_step_uuid", this.Configuration.ApiClient.ParameterToString(commseqStepUuid)); // path parameter
            if (commseqEmailUuid != null) localVarPathParams.Add("commseq_email_uuid", this.Configuration.ApiClient.ParameterToString(commseqEmailUuid)); // path parameter
            if (days != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "days", days)); // query parameter

            // authentication (ultraCartBrowserApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key")))
            {
                localVarHeaderParams["x-ultracart-browser-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key");
            }
            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetEmailEmailOrders", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EmailOrdersResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (EmailOrdersResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EmailOrdersResponse)));
        }

        /// <summary>
        /// Get email email orders 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="commseqUuid"></param>
        /// <param name="commseqStepUuid"></param>
        /// <param name="commseqEmailUuid"></param>
        /// <param name="days"> (optional)</param>
        /// <returns>Task of EmailOrdersResponse</returns>
        public async System.Threading.Tasks.Task<EmailOrdersResponse> GetEmailEmailOrdersAsync (int? storefrontOid, string commseqUuid, string commseqStepUuid, string commseqEmailUuid, int? days = null)
        {
             ApiResponse<EmailOrdersResponse> localVarResponse = await GetEmailEmailOrdersAsyncWithHttpInfo(storefrontOid, commseqUuid, commseqStepUuid, commseqEmailUuid, days);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get email email orders 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="commseqUuid"></param>
        /// <param name="commseqStepUuid"></param>
        /// <param name="commseqEmailUuid"></param>
        /// <param name="days"> (optional)</param>
        /// <returns>Task of ApiResponse (EmailOrdersResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<EmailOrdersResponse>> GetEmailEmailOrdersAsyncWithHttpInfo (int? storefrontOid, string commseqUuid, string commseqStepUuid, string commseqEmailUuid, int? days = null)
        {
            // verify the required parameter 'storefrontOid' is set
            if (storefrontOid == null)
                throw new ApiException(400, "Missing required parameter 'storefrontOid' when calling StorefrontApi->GetEmailEmailOrders");
            // verify the required parameter 'commseqUuid' is set
            if (commseqUuid == null)
                throw new ApiException(400, "Missing required parameter 'commseqUuid' when calling StorefrontApi->GetEmailEmailOrders");
            // verify the required parameter 'commseqStepUuid' is set
            if (commseqStepUuid == null)
                throw new ApiException(400, "Missing required parameter 'commseqStepUuid' when calling StorefrontApi->GetEmailEmailOrders");
            // verify the required parameter 'commseqEmailUuid' is set
            if (commseqEmailUuid == null)
                throw new ApiException(400, "Missing required parameter 'commseqEmailUuid' when calling StorefrontApi->GetEmailEmailOrders");

            var localVarPath = "/storefront/{storefront_oid}/email/commseqs/{commseq_uuid}/steps/{commseq_step_uuid}/emails/{commseq_email_uuid}/orders";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (storefrontOid != null) localVarPathParams.Add("storefront_oid", this.Configuration.ApiClient.ParameterToString(storefrontOid)); // path parameter
            if (commseqUuid != null) localVarPathParams.Add("commseq_uuid", this.Configuration.ApiClient.ParameterToString(commseqUuid)); // path parameter
            if (commseqStepUuid != null) localVarPathParams.Add("commseq_step_uuid", this.Configuration.ApiClient.ParameterToString(commseqStepUuid)); // path parameter
            if (commseqEmailUuid != null) localVarPathParams.Add("commseq_email_uuid", this.Configuration.ApiClient.ParameterToString(commseqEmailUuid)); // path parameter
            if (days != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "days", days)); // query parameter

            // authentication (ultraCartBrowserApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key")))
            {
                localVarHeaderParams["x-ultracart-browser-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key");
            }
            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetEmailEmailOrders", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EmailOrdersResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (EmailOrdersResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EmailOrdersResponse)));
        }

        /// <summary>
        /// Get email emails 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <returns>EmailCommseqEmailsResponse</returns>
        public EmailCommseqEmailsResponse GetEmailEmails (int? storefrontOid)
        {
             ApiResponse<EmailCommseqEmailsResponse> localVarResponse = GetEmailEmailsWithHttpInfo(storefrontOid);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get email emails 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <returns>ApiResponse of EmailCommseqEmailsResponse</returns>
        public ApiResponse< EmailCommseqEmailsResponse > GetEmailEmailsWithHttpInfo (int? storefrontOid)
        {
            // verify the required parameter 'storefrontOid' is set
            if (storefrontOid == null)
                throw new ApiException(400, "Missing required parameter 'storefrontOid' when calling StorefrontApi->GetEmailEmails");

            var localVarPath = "/storefront/{storefront_oid}/email/emails";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (storefrontOid != null) localVarPathParams.Add("storefront_oid", this.Configuration.ApiClient.ParameterToString(storefrontOid)); // path parameter

            // authentication (ultraCartBrowserApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key")))
            {
                localVarHeaderParams["x-ultracart-browser-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key");
            }
            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetEmailEmails", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EmailCommseqEmailsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (EmailCommseqEmailsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EmailCommseqEmailsResponse)));
        }

        /// <summary>
        /// Get email emails 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <returns>Task of EmailCommseqEmailsResponse</returns>
        public async System.Threading.Tasks.Task<EmailCommseqEmailsResponse> GetEmailEmailsAsync (int? storefrontOid)
        {
             ApiResponse<EmailCommseqEmailsResponse> localVarResponse = await GetEmailEmailsAsyncWithHttpInfo(storefrontOid);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get email emails 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <returns>Task of ApiResponse (EmailCommseqEmailsResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<EmailCommseqEmailsResponse>> GetEmailEmailsAsyncWithHttpInfo (int? storefrontOid)
        {
            // verify the required parameter 'storefrontOid' is set
            if (storefrontOid == null)
                throw new ApiException(400, "Missing required parameter 'storefrontOid' when calling StorefrontApi->GetEmailEmails");

            var localVarPath = "/storefront/{storefront_oid}/email/emails";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (storefrontOid != null) localVarPathParams.Add("storefront_oid", this.Configuration.ApiClient.ParameterToString(storefrontOid)); // path parameter

            // authentication (ultraCartBrowserApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key")))
            {
                localVarHeaderParams["x-ultracart-browser-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key");
            }
            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetEmailEmails", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EmailCommseqEmailsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (EmailCommseqEmailsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EmailCommseqEmailsResponse)));
        }

        /// <summary>
        /// Get email emails multiple 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="emailCommseqEmailsRequest">Request of email uuids</param>
        /// <returns>EmailCommseqEmailsResponse</returns>
        public EmailCommseqEmailsResponse GetEmailEmailsMultiple (int? storefrontOid, EmailCommseqEmailsRequest emailCommseqEmailsRequest)
        {
             ApiResponse<EmailCommseqEmailsResponse> localVarResponse = GetEmailEmailsMultipleWithHttpInfo(storefrontOid, emailCommseqEmailsRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get email emails multiple 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="emailCommseqEmailsRequest">Request of email uuids</param>
        /// <returns>ApiResponse of EmailCommseqEmailsResponse</returns>
        public ApiResponse< EmailCommseqEmailsResponse > GetEmailEmailsMultipleWithHttpInfo (int? storefrontOid, EmailCommseqEmailsRequest emailCommseqEmailsRequest)
        {
            // verify the required parameter 'storefrontOid' is set
            if (storefrontOid == null)
                throw new ApiException(400, "Missing required parameter 'storefrontOid' when calling StorefrontApi->GetEmailEmailsMultiple");
            // verify the required parameter 'emailCommseqEmailsRequest' is set
            if (emailCommseqEmailsRequest == null)
                throw new ApiException(400, "Missing required parameter 'emailCommseqEmailsRequest' when calling StorefrontApi->GetEmailEmailsMultiple");

            var localVarPath = "/storefront/{storefront_oid}/email/emails/multiple";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (storefrontOid != null) localVarPathParams.Add("storefront_oid", this.Configuration.ApiClient.ParameterToString(storefrontOid)); // path parameter
            if (emailCommseqEmailsRequest != null && emailCommseqEmailsRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(emailCommseqEmailsRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = emailCommseqEmailsRequest; // byte array
            }

            // authentication (ultraCartBrowserApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key")))
            {
                localVarHeaderParams["x-ultracart-browser-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key");
            }
            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetEmailEmailsMultiple", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EmailCommseqEmailsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (EmailCommseqEmailsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EmailCommseqEmailsResponse)));
        }

        /// <summary>
        /// Get email emails multiple 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="emailCommseqEmailsRequest">Request of email uuids</param>
        /// <returns>Task of EmailCommseqEmailsResponse</returns>
        public async System.Threading.Tasks.Task<EmailCommseqEmailsResponse> GetEmailEmailsMultipleAsync (int? storefrontOid, EmailCommseqEmailsRequest emailCommseqEmailsRequest)
        {
             ApiResponse<EmailCommseqEmailsResponse> localVarResponse = await GetEmailEmailsMultipleAsyncWithHttpInfo(storefrontOid, emailCommseqEmailsRequest);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get email emails multiple 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="emailCommseqEmailsRequest">Request of email uuids</param>
        /// <returns>Task of ApiResponse (EmailCommseqEmailsResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<EmailCommseqEmailsResponse>> GetEmailEmailsMultipleAsyncWithHttpInfo (int? storefrontOid, EmailCommseqEmailsRequest emailCommseqEmailsRequest)
        {
            // verify the required parameter 'storefrontOid' is set
            if (storefrontOid == null)
                throw new ApiException(400, "Missing required parameter 'storefrontOid' when calling StorefrontApi->GetEmailEmailsMultiple");
            // verify the required parameter 'emailCommseqEmailsRequest' is set
            if (emailCommseqEmailsRequest == null)
                throw new ApiException(400, "Missing required parameter 'emailCommseqEmailsRequest' when calling StorefrontApi->GetEmailEmailsMultiple");

            var localVarPath = "/storefront/{storefront_oid}/email/emails/multiple";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (storefrontOid != null) localVarPathParams.Add("storefront_oid", this.Configuration.ApiClient.ParameterToString(storefrontOid)); // path parameter
            if (emailCommseqEmailsRequest != null && emailCommseqEmailsRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(emailCommseqEmailsRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = emailCommseqEmailsRequest; // byte array
            }

            // authentication (ultraCartBrowserApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key")))
            {
                localVarHeaderParams["x-ultracart-browser-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key");
            }
            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetEmailEmailsMultiple", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EmailCommseqEmailsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (EmailCommseqEmailsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EmailCommseqEmailsResponse)));
        }

        /// <summary>
        /// Get email flow 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="emailFlowUuid"></param>
        /// <returns>EmailFlowResponse</returns>
        public EmailFlowResponse GetEmailFlow (int? storefrontOid, string emailFlowUuid)
        {
             ApiResponse<EmailFlowResponse> localVarResponse = GetEmailFlowWithHttpInfo(storefrontOid, emailFlowUuid);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get email flow 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="emailFlowUuid"></param>
        /// <returns>ApiResponse of EmailFlowResponse</returns>
        public ApiResponse< EmailFlowResponse > GetEmailFlowWithHttpInfo (int? storefrontOid, string emailFlowUuid)
        {
            // verify the required parameter 'storefrontOid' is set
            if (storefrontOid == null)
                throw new ApiException(400, "Missing required parameter 'storefrontOid' when calling StorefrontApi->GetEmailFlow");
            // verify the required parameter 'emailFlowUuid' is set
            if (emailFlowUuid == null)
                throw new ApiException(400, "Missing required parameter 'emailFlowUuid' when calling StorefrontApi->GetEmailFlow");

            var localVarPath = "/storefront/{storefront_oid}/email/flows/{email_flow_uuid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (storefrontOid != null) localVarPathParams.Add("storefront_oid", this.Configuration.ApiClient.ParameterToString(storefrontOid)); // path parameter
            if (emailFlowUuid != null) localVarPathParams.Add("email_flow_uuid", this.Configuration.ApiClient.ParameterToString(emailFlowUuid)); // path parameter

            // authentication (ultraCartBrowserApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key")))
            {
                localVarHeaderParams["x-ultracart-browser-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key");
            }
            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetEmailFlow", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EmailFlowResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (EmailFlowResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EmailFlowResponse)));
        }

        /// <summary>
        /// Get email flow 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="emailFlowUuid"></param>
        /// <returns>Task of EmailFlowResponse</returns>
        public async System.Threading.Tasks.Task<EmailFlowResponse> GetEmailFlowAsync (int? storefrontOid, string emailFlowUuid)
        {
             ApiResponse<EmailFlowResponse> localVarResponse = await GetEmailFlowAsyncWithHttpInfo(storefrontOid, emailFlowUuid);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get email flow 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="emailFlowUuid"></param>
        /// <returns>Task of ApiResponse (EmailFlowResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<EmailFlowResponse>> GetEmailFlowAsyncWithHttpInfo (int? storefrontOid, string emailFlowUuid)
        {
            // verify the required parameter 'storefrontOid' is set
            if (storefrontOid == null)
                throw new ApiException(400, "Missing required parameter 'storefrontOid' when calling StorefrontApi->GetEmailFlow");
            // verify the required parameter 'emailFlowUuid' is set
            if (emailFlowUuid == null)
                throw new ApiException(400, "Missing required parameter 'emailFlowUuid' when calling StorefrontApi->GetEmailFlow");

            var localVarPath = "/storefront/{storefront_oid}/email/flows/{email_flow_uuid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (storefrontOid != null) localVarPathParams.Add("storefront_oid", this.Configuration.ApiClient.ParameterToString(storefrontOid)); // path parameter
            if (emailFlowUuid != null) localVarPathParams.Add("email_flow_uuid", this.Configuration.ApiClient.ParameterToString(emailFlowUuid)); // path parameter

            // authentication (ultraCartBrowserApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key")))
            {
                localVarHeaderParams["x-ultracart-browser-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key");
            }
            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetEmailFlow", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EmailFlowResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (EmailFlowResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EmailFlowResponse)));
        }

        /// <summary>
        /// Get email flow folder 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="emailFlowFolderUuid"></param>
        /// <returns>EmailFlowFolderResponse</returns>
        public EmailFlowFolderResponse GetEmailFlowFolder (int? storefrontOid, string emailFlowFolderUuid)
        {
             ApiResponse<EmailFlowFolderResponse> localVarResponse = GetEmailFlowFolderWithHttpInfo(storefrontOid, emailFlowFolderUuid);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get email flow folder 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="emailFlowFolderUuid"></param>
        /// <returns>ApiResponse of EmailFlowFolderResponse</returns>
        public ApiResponse< EmailFlowFolderResponse > GetEmailFlowFolderWithHttpInfo (int? storefrontOid, string emailFlowFolderUuid)
        {
            // verify the required parameter 'storefrontOid' is set
            if (storefrontOid == null)
                throw new ApiException(400, "Missing required parameter 'storefrontOid' when calling StorefrontApi->GetEmailFlowFolder");
            // verify the required parameter 'emailFlowFolderUuid' is set
            if (emailFlowFolderUuid == null)
                throw new ApiException(400, "Missing required parameter 'emailFlowFolderUuid' when calling StorefrontApi->GetEmailFlowFolder");

            var localVarPath = "/storefront/{storefront_oid}/email/flow_folders/{email_flow_folder_uuid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (storefrontOid != null) localVarPathParams.Add("storefront_oid", this.Configuration.ApiClient.ParameterToString(storefrontOid)); // path parameter
            if (emailFlowFolderUuid != null) localVarPathParams.Add("email_flow_folder_uuid", this.Configuration.ApiClient.ParameterToString(emailFlowFolderUuid)); // path parameter

            // authentication (ultraCartBrowserApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key")))
            {
                localVarHeaderParams["x-ultracart-browser-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key");
            }
            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetEmailFlowFolder", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EmailFlowFolderResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (EmailFlowFolderResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EmailFlowFolderResponse)));
        }

        /// <summary>
        /// Get email flow folder 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="emailFlowFolderUuid"></param>
        /// <returns>Task of EmailFlowFolderResponse</returns>
        public async System.Threading.Tasks.Task<EmailFlowFolderResponse> GetEmailFlowFolderAsync (int? storefrontOid, string emailFlowFolderUuid)
        {
             ApiResponse<EmailFlowFolderResponse> localVarResponse = await GetEmailFlowFolderAsyncWithHttpInfo(storefrontOid, emailFlowFolderUuid);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get email flow folder 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="emailFlowFolderUuid"></param>
        /// <returns>Task of ApiResponse (EmailFlowFolderResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<EmailFlowFolderResponse>> GetEmailFlowFolderAsyncWithHttpInfo (int? storefrontOid, string emailFlowFolderUuid)
        {
            // verify the required parameter 'storefrontOid' is set
            if (storefrontOid == null)
                throw new ApiException(400, "Missing required parameter 'storefrontOid' when calling StorefrontApi->GetEmailFlowFolder");
            // verify the required parameter 'emailFlowFolderUuid' is set
            if (emailFlowFolderUuid == null)
                throw new ApiException(400, "Missing required parameter 'emailFlowFolderUuid' when calling StorefrontApi->GetEmailFlowFolder");

            var localVarPath = "/storefront/{storefront_oid}/email/flow_folders/{email_flow_folder_uuid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (storefrontOid != null) localVarPathParams.Add("storefront_oid", this.Configuration.ApiClient.ParameterToString(storefrontOid)); // path parameter
            if (emailFlowFolderUuid != null) localVarPathParams.Add("email_flow_folder_uuid", this.Configuration.ApiClient.ParameterToString(emailFlowFolderUuid)); // path parameter

            // authentication (ultraCartBrowserApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key")))
            {
                localVarHeaderParams["x-ultracart-browser-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key");
            }
            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetEmailFlowFolder", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EmailFlowFolderResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (EmailFlowFolderResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EmailFlowFolderResponse)));
        }

        /// <summary>
        /// Get email flow folders 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <returns>EmailFlowFoldersResponse</returns>
        public EmailFlowFoldersResponse GetEmailFlowFolders (int? storefrontOid)
        {
             ApiResponse<EmailFlowFoldersResponse> localVarResponse = GetEmailFlowFoldersWithHttpInfo(storefrontOid);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get email flow folders 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <returns>ApiResponse of EmailFlowFoldersResponse</returns>
        public ApiResponse< EmailFlowFoldersResponse > GetEmailFlowFoldersWithHttpInfo (int? storefrontOid)
        {
            // verify the required parameter 'storefrontOid' is set
            if (storefrontOid == null)
                throw new ApiException(400, "Missing required parameter 'storefrontOid' when calling StorefrontApi->GetEmailFlowFolders");

            var localVarPath = "/storefront/{storefront_oid}/email/flow_folders";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (storefrontOid != null) localVarPathParams.Add("storefront_oid", this.Configuration.ApiClient.ParameterToString(storefrontOid)); // path parameter

            // authentication (ultraCartBrowserApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key")))
            {
                localVarHeaderParams["x-ultracart-browser-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key");
            }
            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetEmailFlowFolders", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EmailFlowFoldersResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (EmailFlowFoldersResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EmailFlowFoldersResponse)));
        }

        /// <summary>
        /// Get email flow folders 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <returns>Task of EmailFlowFoldersResponse</returns>
        public async System.Threading.Tasks.Task<EmailFlowFoldersResponse> GetEmailFlowFoldersAsync (int? storefrontOid)
        {
             ApiResponse<EmailFlowFoldersResponse> localVarResponse = await GetEmailFlowFoldersAsyncWithHttpInfo(storefrontOid);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get email flow folders 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <returns>Task of ApiResponse (EmailFlowFoldersResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<EmailFlowFoldersResponse>> GetEmailFlowFoldersAsyncWithHttpInfo (int? storefrontOid)
        {
            // verify the required parameter 'storefrontOid' is set
            if (storefrontOid == null)
                throw new ApiException(400, "Missing required parameter 'storefrontOid' when calling StorefrontApi->GetEmailFlowFolders");

            var localVarPath = "/storefront/{storefront_oid}/email/flow_folders";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (storefrontOid != null) localVarPathParams.Add("storefront_oid", this.Configuration.ApiClient.ParameterToString(storefrontOid)); // path parameter

            // authentication (ultraCartBrowserApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key")))
            {
                localVarHeaderParams["x-ultracart-browser-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key");
            }
            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetEmailFlowFolders", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EmailFlowFoldersResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (EmailFlowFoldersResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EmailFlowFoldersResponse)));
        }

        /// <summary>
        /// Get email flow screenshots 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="emailFlowUuid"></param>
        /// <returns>ScreenshotsResponse</returns>
        public ScreenshotsResponse GetEmailFlowScreenshots (int? storefrontOid, string emailFlowUuid)
        {
             ApiResponse<ScreenshotsResponse> localVarResponse = GetEmailFlowScreenshotsWithHttpInfo(storefrontOid, emailFlowUuid);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get email flow screenshots 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="emailFlowUuid"></param>
        /// <returns>ApiResponse of ScreenshotsResponse</returns>
        public ApiResponse< ScreenshotsResponse > GetEmailFlowScreenshotsWithHttpInfo (int? storefrontOid, string emailFlowUuid)
        {
            // verify the required parameter 'storefrontOid' is set
            if (storefrontOid == null)
                throw new ApiException(400, "Missing required parameter 'storefrontOid' when calling StorefrontApi->GetEmailFlowScreenshots");
            // verify the required parameter 'emailFlowUuid' is set
            if (emailFlowUuid == null)
                throw new ApiException(400, "Missing required parameter 'emailFlowUuid' when calling StorefrontApi->GetEmailFlowScreenshots");

            var localVarPath = "/storefront/{storefront_oid}/email/flows/{email_flow_uuid}/screenshots";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (storefrontOid != null) localVarPathParams.Add("storefront_oid", this.Configuration.ApiClient.ParameterToString(storefrontOid)); // path parameter
            if (emailFlowUuid != null) localVarPathParams.Add("email_flow_uuid", this.Configuration.ApiClient.ParameterToString(emailFlowUuid)); // path parameter

            // authentication (ultraCartBrowserApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key")))
            {
                localVarHeaderParams["x-ultracart-browser-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key");
            }
            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetEmailFlowScreenshots", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ScreenshotsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ScreenshotsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ScreenshotsResponse)));
        }

        /// <summary>
        /// Get email flow screenshots 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="emailFlowUuid"></param>
        /// <returns>Task of ScreenshotsResponse</returns>
        public async System.Threading.Tasks.Task<ScreenshotsResponse> GetEmailFlowScreenshotsAsync (int? storefrontOid, string emailFlowUuid)
        {
             ApiResponse<ScreenshotsResponse> localVarResponse = await GetEmailFlowScreenshotsAsyncWithHttpInfo(storefrontOid, emailFlowUuid);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get email flow screenshots 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="emailFlowUuid"></param>
        /// <returns>Task of ApiResponse (ScreenshotsResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ScreenshotsResponse>> GetEmailFlowScreenshotsAsyncWithHttpInfo (int? storefrontOid, string emailFlowUuid)
        {
            // verify the required parameter 'storefrontOid' is set
            if (storefrontOid == null)
                throw new ApiException(400, "Missing required parameter 'storefrontOid' when calling StorefrontApi->GetEmailFlowScreenshots");
            // verify the required parameter 'emailFlowUuid' is set
            if (emailFlowUuid == null)
                throw new ApiException(400, "Missing required parameter 'emailFlowUuid' when calling StorefrontApi->GetEmailFlowScreenshots");

            var localVarPath = "/storefront/{storefront_oid}/email/flows/{email_flow_uuid}/screenshots";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (storefrontOid != null) localVarPathParams.Add("storefront_oid", this.Configuration.ApiClient.ParameterToString(storefrontOid)); // path parameter
            if (emailFlowUuid != null) localVarPathParams.Add("email_flow_uuid", this.Configuration.ApiClient.ParameterToString(emailFlowUuid)); // path parameter

            // authentication (ultraCartBrowserApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key")))
            {
                localVarHeaderParams["x-ultracart-browser-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key");
            }
            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetEmailFlowScreenshots", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ScreenshotsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ScreenshotsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ScreenshotsResponse)));
        }

        /// <summary>
        /// Get email flows 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <returns>EmailFlowsResponse</returns>
        public EmailFlowsResponse GetEmailFlows (int? storefrontOid)
        {
             ApiResponse<EmailFlowsResponse> localVarResponse = GetEmailFlowsWithHttpInfo(storefrontOid);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get email flows 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <returns>ApiResponse of EmailFlowsResponse</returns>
        public ApiResponse< EmailFlowsResponse > GetEmailFlowsWithHttpInfo (int? storefrontOid)
        {
            // verify the required parameter 'storefrontOid' is set
            if (storefrontOid == null)
                throw new ApiException(400, "Missing required parameter 'storefrontOid' when calling StorefrontApi->GetEmailFlows");

            var localVarPath = "/storefront/{storefront_oid}/email/flows";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (storefrontOid != null) localVarPathParams.Add("storefront_oid", this.Configuration.ApiClient.ParameterToString(storefrontOid)); // path parameter

            // authentication (ultraCartBrowserApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key")))
            {
                localVarHeaderParams["x-ultracart-browser-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key");
            }
            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetEmailFlows", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EmailFlowsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (EmailFlowsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EmailFlowsResponse)));
        }

        /// <summary>
        /// Get email flows 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <returns>Task of EmailFlowsResponse</returns>
        public async System.Threading.Tasks.Task<EmailFlowsResponse> GetEmailFlowsAsync (int? storefrontOid)
        {
             ApiResponse<EmailFlowsResponse> localVarResponse = await GetEmailFlowsAsyncWithHttpInfo(storefrontOid);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get email flows 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <returns>Task of ApiResponse (EmailFlowsResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<EmailFlowsResponse>> GetEmailFlowsAsyncWithHttpInfo (int? storefrontOid)
        {
            // verify the required parameter 'storefrontOid' is set
            if (storefrontOid == null)
                throw new ApiException(400, "Missing required parameter 'storefrontOid' when calling StorefrontApi->GetEmailFlows");

            var localVarPath = "/storefront/{storefront_oid}/email/flows";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (storefrontOid != null) localVarPathParams.Add("storefront_oid", this.Configuration.ApiClient.ParameterToString(storefrontOid)); // path parameter

            // authentication (ultraCartBrowserApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key")))
            {
                localVarHeaderParams["x-ultracart-browser-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key");
            }
            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetEmailFlows", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EmailFlowsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (EmailFlowsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EmailFlowsResponse)));
        }

        /// <summary>
        /// Get email globalsettings 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>EmailGlobalSettingsResponse</returns>
        public EmailGlobalSettingsResponse GetEmailGlobalSettings ()
        {
             ApiResponse<EmailGlobalSettingsResponse> localVarResponse = GetEmailGlobalSettingsWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get email globalsettings 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of EmailGlobalSettingsResponse</returns>
        public ApiResponse< EmailGlobalSettingsResponse > GetEmailGlobalSettingsWithHttpInfo ()
        {

            var localVarPath = "/storefront/email/global_settings";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (ultraCartBrowserApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key")))
            {
                localVarHeaderParams["x-ultracart-browser-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key");
            }
            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetEmailGlobalSettings", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EmailGlobalSettingsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (EmailGlobalSettingsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EmailGlobalSettingsResponse)));
        }

        /// <summary>
        /// Get email globalsettings 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of EmailGlobalSettingsResponse</returns>
        public async System.Threading.Tasks.Task<EmailGlobalSettingsResponse> GetEmailGlobalSettingsAsync ()
        {
             ApiResponse<EmailGlobalSettingsResponse> localVarResponse = await GetEmailGlobalSettingsAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get email globalsettings 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (EmailGlobalSettingsResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<EmailGlobalSettingsResponse>> GetEmailGlobalSettingsAsyncWithHttpInfo ()
        {

            var localVarPath = "/storefront/email/global_settings";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (ultraCartBrowserApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key")))
            {
                localVarHeaderParams["x-ultracart-browser-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key");
            }
            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetEmailGlobalSettings", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EmailGlobalSettingsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (EmailGlobalSettingsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EmailGlobalSettingsResponse)));
        }

        /// <summary>
        /// Get email list 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="emailListUuid"></param>
        /// <returns>EmailListResponse</returns>
        public EmailListResponse GetEmailList (int? storefrontOid, string emailListUuid)
        {
             ApiResponse<EmailListResponse> localVarResponse = GetEmailListWithHttpInfo(storefrontOid, emailListUuid);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get email list 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="emailListUuid"></param>
        /// <returns>ApiResponse of EmailListResponse</returns>
        public ApiResponse< EmailListResponse > GetEmailListWithHttpInfo (int? storefrontOid, string emailListUuid)
        {
            // verify the required parameter 'storefrontOid' is set
            if (storefrontOid == null)
                throw new ApiException(400, "Missing required parameter 'storefrontOid' when calling StorefrontApi->GetEmailList");
            // verify the required parameter 'emailListUuid' is set
            if (emailListUuid == null)
                throw new ApiException(400, "Missing required parameter 'emailListUuid' when calling StorefrontApi->GetEmailList");

            var localVarPath = "/storefront/{storefront_oid}/email/lists/{email_list_uuid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (storefrontOid != null) localVarPathParams.Add("storefront_oid", this.Configuration.ApiClient.ParameterToString(storefrontOid)); // path parameter
            if (emailListUuid != null) localVarPathParams.Add("email_list_uuid", this.Configuration.ApiClient.ParameterToString(emailListUuid)); // path parameter

            // authentication (ultraCartBrowserApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key")))
            {
                localVarHeaderParams["x-ultracart-browser-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key");
            }
            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetEmailList", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EmailListResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (EmailListResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EmailListResponse)));
        }

        /// <summary>
        /// Get email list 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="emailListUuid"></param>
        /// <returns>Task of EmailListResponse</returns>
        public async System.Threading.Tasks.Task<EmailListResponse> GetEmailListAsync (int? storefrontOid, string emailListUuid)
        {
             ApiResponse<EmailListResponse> localVarResponse = await GetEmailListAsyncWithHttpInfo(storefrontOid, emailListUuid);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get email list 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="emailListUuid"></param>
        /// <returns>Task of ApiResponse (EmailListResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<EmailListResponse>> GetEmailListAsyncWithHttpInfo (int? storefrontOid, string emailListUuid)
        {
            // verify the required parameter 'storefrontOid' is set
            if (storefrontOid == null)
                throw new ApiException(400, "Missing required parameter 'storefrontOid' when calling StorefrontApi->GetEmailList");
            // verify the required parameter 'emailListUuid' is set
            if (emailListUuid == null)
                throw new ApiException(400, "Missing required parameter 'emailListUuid' when calling StorefrontApi->GetEmailList");

            var localVarPath = "/storefront/{storefront_oid}/email/lists/{email_list_uuid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (storefrontOid != null) localVarPathParams.Add("storefront_oid", this.Configuration.ApiClient.ParameterToString(storefrontOid)); // path parameter
            if (emailListUuid != null) localVarPathParams.Add("email_list_uuid", this.Configuration.ApiClient.ParameterToString(emailListUuid)); // path parameter

            // authentication (ultraCartBrowserApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key")))
            {
                localVarHeaderParams["x-ultracart-browser-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key");
            }
            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetEmailList", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EmailListResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (EmailListResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EmailListResponse)));
        }

        /// <summary>
        /// Get email list customer editor url 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="emailListUuid"></param>
        /// <param name="emailCustomerUuid"></param>
        /// <returns>EmailCustomerEditorUrlResponse</returns>
        public EmailCustomerEditorUrlResponse GetEmailListCustomerEditorUrl (int? storefrontOid, string emailListUuid, string emailCustomerUuid)
        {
             ApiResponse<EmailCustomerEditorUrlResponse> localVarResponse = GetEmailListCustomerEditorUrlWithHttpInfo(storefrontOid, emailListUuid, emailCustomerUuid);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get email list customer editor url 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="emailListUuid"></param>
        /// <param name="emailCustomerUuid"></param>
        /// <returns>ApiResponse of EmailCustomerEditorUrlResponse</returns>
        public ApiResponse< EmailCustomerEditorUrlResponse > GetEmailListCustomerEditorUrlWithHttpInfo (int? storefrontOid, string emailListUuid, string emailCustomerUuid)
        {
            // verify the required parameter 'storefrontOid' is set
            if (storefrontOid == null)
                throw new ApiException(400, "Missing required parameter 'storefrontOid' when calling StorefrontApi->GetEmailListCustomerEditorUrl");
            // verify the required parameter 'emailListUuid' is set
            if (emailListUuid == null)
                throw new ApiException(400, "Missing required parameter 'emailListUuid' when calling StorefrontApi->GetEmailListCustomerEditorUrl");
            // verify the required parameter 'emailCustomerUuid' is set
            if (emailCustomerUuid == null)
                throw new ApiException(400, "Missing required parameter 'emailCustomerUuid' when calling StorefrontApi->GetEmailListCustomerEditorUrl");

            var localVarPath = "/storefront/{storefront_oid}/email/lists/{email_list_uuid}/customers/{email_customer_uuid}/editor_url";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (storefrontOid != null) localVarPathParams.Add("storefront_oid", this.Configuration.ApiClient.ParameterToString(storefrontOid)); // path parameter
            if (emailListUuid != null) localVarPathParams.Add("email_list_uuid", this.Configuration.ApiClient.ParameterToString(emailListUuid)); // path parameter
            if (emailCustomerUuid != null) localVarPathParams.Add("email_customer_uuid", this.Configuration.ApiClient.ParameterToString(emailCustomerUuid)); // path parameter

            // authentication (ultraCartBrowserApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key")))
            {
                localVarHeaderParams["x-ultracart-browser-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key");
            }
            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetEmailListCustomerEditorUrl", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EmailCustomerEditorUrlResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (EmailCustomerEditorUrlResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EmailCustomerEditorUrlResponse)));
        }

        /// <summary>
        /// Get email list customer editor url 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="emailListUuid"></param>
        /// <param name="emailCustomerUuid"></param>
        /// <returns>Task of EmailCustomerEditorUrlResponse</returns>
        public async System.Threading.Tasks.Task<EmailCustomerEditorUrlResponse> GetEmailListCustomerEditorUrlAsync (int? storefrontOid, string emailListUuid, string emailCustomerUuid)
        {
             ApiResponse<EmailCustomerEditorUrlResponse> localVarResponse = await GetEmailListCustomerEditorUrlAsyncWithHttpInfo(storefrontOid, emailListUuid, emailCustomerUuid);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get email list customer editor url 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="emailListUuid"></param>
        /// <param name="emailCustomerUuid"></param>
        /// <returns>Task of ApiResponse (EmailCustomerEditorUrlResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<EmailCustomerEditorUrlResponse>> GetEmailListCustomerEditorUrlAsyncWithHttpInfo (int? storefrontOid, string emailListUuid, string emailCustomerUuid)
        {
            // verify the required parameter 'storefrontOid' is set
            if (storefrontOid == null)
                throw new ApiException(400, "Missing required parameter 'storefrontOid' when calling StorefrontApi->GetEmailListCustomerEditorUrl");
            // verify the required parameter 'emailListUuid' is set
            if (emailListUuid == null)
                throw new ApiException(400, "Missing required parameter 'emailListUuid' when calling StorefrontApi->GetEmailListCustomerEditorUrl");
            // verify the required parameter 'emailCustomerUuid' is set
            if (emailCustomerUuid == null)
                throw new ApiException(400, "Missing required parameter 'emailCustomerUuid' when calling StorefrontApi->GetEmailListCustomerEditorUrl");

            var localVarPath = "/storefront/{storefront_oid}/email/lists/{email_list_uuid}/customers/{email_customer_uuid}/editor_url";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (storefrontOid != null) localVarPathParams.Add("storefront_oid", this.Configuration.ApiClient.ParameterToString(storefrontOid)); // path parameter
            if (emailListUuid != null) localVarPathParams.Add("email_list_uuid", this.Configuration.ApiClient.ParameterToString(emailListUuid)); // path parameter
            if (emailCustomerUuid != null) localVarPathParams.Add("email_customer_uuid", this.Configuration.ApiClient.ParameterToString(emailCustomerUuid)); // path parameter

            // authentication (ultraCartBrowserApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key")))
            {
                localVarHeaderParams["x-ultracart-browser-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key");
            }
            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetEmailListCustomerEditorUrl", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EmailCustomerEditorUrlResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (EmailCustomerEditorUrlResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EmailCustomerEditorUrlResponse)));
        }

        /// <summary>
        /// Get email list customers 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="emailListUuid"></param>
        /// <param name="pageNumber"> (optional)</param>
        /// <param name="pageSize"> (optional)</param>
        /// <returns>EmailListCustomersResponse</returns>
        public EmailListCustomersResponse GetEmailListCustomers (int? storefrontOid, string emailListUuid, int? pageNumber = null, int? pageSize = null)
        {
             ApiResponse<EmailListCustomersResponse> localVarResponse = GetEmailListCustomersWithHttpInfo(storefrontOid, emailListUuid, pageNumber, pageSize);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get email list customers 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="emailListUuid"></param>
        /// <param name="pageNumber"> (optional)</param>
        /// <param name="pageSize"> (optional)</param>
        /// <returns>ApiResponse of EmailListCustomersResponse</returns>
        public ApiResponse< EmailListCustomersResponse > GetEmailListCustomersWithHttpInfo (int? storefrontOid, string emailListUuid, int? pageNumber = null, int? pageSize = null)
        {
            // verify the required parameter 'storefrontOid' is set
            if (storefrontOid == null)
                throw new ApiException(400, "Missing required parameter 'storefrontOid' when calling StorefrontApi->GetEmailListCustomers");
            // verify the required parameter 'emailListUuid' is set
            if (emailListUuid == null)
                throw new ApiException(400, "Missing required parameter 'emailListUuid' when calling StorefrontApi->GetEmailListCustomers");

            var localVarPath = "/storefront/{storefront_oid}/email/lists/{email_list_uuid}/customers";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (storefrontOid != null) localVarPathParams.Add("storefront_oid", this.Configuration.ApiClient.ParameterToString(storefrontOid)); // path parameter
            if (emailListUuid != null) localVarPathParams.Add("email_list_uuid", this.Configuration.ApiClient.ParameterToString(emailListUuid)); // path parameter
            if (pageNumber != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageNumber", pageNumber)); // query parameter
            if (pageSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageSize", pageSize)); // query parameter

            // authentication (ultraCartBrowserApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key")))
            {
                localVarHeaderParams["x-ultracart-browser-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key");
            }
            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetEmailListCustomers", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EmailListCustomersResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (EmailListCustomersResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EmailListCustomersResponse)));
        }

        /// <summary>
        /// Get email list customers 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="emailListUuid"></param>
        /// <param name="pageNumber"> (optional)</param>
        /// <param name="pageSize"> (optional)</param>
        /// <returns>Task of EmailListCustomersResponse</returns>
        public async System.Threading.Tasks.Task<EmailListCustomersResponse> GetEmailListCustomersAsync (int? storefrontOid, string emailListUuid, int? pageNumber = null, int? pageSize = null)
        {
             ApiResponse<EmailListCustomersResponse> localVarResponse = await GetEmailListCustomersAsyncWithHttpInfo(storefrontOid, emailListUuid, pageNumber, pageSize);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get email list customers 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="emailListUuid"></param>
        /// <param name="pageNumber"> (optional)</param>
        /// <param name="pageSize"> (optional)</param>
        /// <returns>Task of ApiResponse (EmailListCustomersResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<EmailListCustomersResponse>> GetEmailListCustomersAsyncWithHttpInfo (int? storefrontOid, string emailListUuid, int? pageNumber = null, int? pageSize = null)
        {
            // verify the required parameter 'storefrontOid' is set
            if (storefrontOid == null)
                throw new ApiException(400, "Missing required parameter 'storefrontOid' when calling StorefrontApi->GetEmailListCustomers");
            // verify the required parameter 'emailListUuid' is set
            if (emailListUuid == null)
                throw new ApiException(400, "Missing required parameter 'emailListUuid' when calling StorefrontApi->GetEmailListCustomers");

            var localVarPath = "/storefront/{storefront_oid}/email/lists/{email_list_uuid}/customers";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (storefrontOid != null) localVarPathParams.Add("storefront_oid", this.Configuration.ApiClient.ParameterToString(storefrontOid)); // path parameter
            if (emailListUuid != null) localVarPathParams.Add("email_list_uuid", this.Configuration.ApiClient.ParameterToString(emailListUuid)); // path parameter
            if (pageNumber != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageNumber", pageNumber)); // query parameter
            if (pageSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageSize", pageSize)); // query parameter

            // authentication (ultraCartBrowserApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key")))
            {
                localVarHeaderParams["x-ultracart-browser-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key");
            }
            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetEmailListCustomers", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EmailListCustomersResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (EmailListCustomersResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EmailListCustomersResponse)));
        }

        /// <summary>
        /// Get email campaign folder 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="emailListSegmentFolderUuid"></param>
        /// <returns>EmailListSegmentFolderResponse</returns>
        public EmailListSegmentFolderResponse GetEmailListSegmentFolder (int? storefrontOid, string emailListSegmentFolderUuid)
        {
             ApiResponse<EmailListSegmentFolderResponse> localVarResponse = GetEmailListSegmentFolderWithHttpInfo(storefrontOid, emailListSegmentFolderUuid);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get email campaign folder 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="emailListSegmentFolderUuid"></param>
        /// <returns>ApiResponse of EmailListSegmentFolderResponse</returns>
        public ApiResponse< EmailListSegmentFolderResponse > GetEmailListSegmentFolderWithHttpInfo (int? storefrontOid, string emailListSegmentFolderUuid)
        {
            // verify the required parameter 'storefrontOid' is set
            if (storefrontOid == null)
                throw new ApiException(400, "Missing required parameter 'storefrontOid' when calling StorefrontApi->GetEmailListSegmentFolder");
            // verify the required parameter 'emailListSegmentFolderUuid' is set
            if (emailListSegmentFolderUuid == null)
                throw new ApiException(400, "Missing required parameter 'emailListSegmentFolderUuid' when calling StorefrontApi->GetEmailListSegmentFolder");

            var localVarPath = "/storefront/{storefront_oid}/email/list_segment_folders/{email_list_segment_folder_uuid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (storefrontOid != null) localVarPathParams.Add("storefront_oid", this.Configuration.ApiClient.ParameterToString(storefrontOid)); // path parameter
            if (emailListSegmentFolderUuid != null) localVarPathParams.Add("email_list_segment_folder_uuid", this.Configuration.ApiClient.ParameterToString(emailListSegmentFolderUuid)); // path parameter

            // authentication (ultraCartBrowserApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key")))
            {
                localVarHeaderParams["x-ultracart-browser-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key");
            }
            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetEmailListSegmentFolder", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EmailListSegmentFolderResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (EmailListSegmentFolderResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EmailListSegmentFolderResponse)));
        }

        /// <summary>
        /// Get email campaign folder 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="emailListSegmentFolderUuid"></param>
        /// <returns>Task of EmailListSegmentFolderResponse</returns>
        public async System.Threading.Tasks.Task<EmailListSegmentFolderResponse> GetEmailListSegmentFolderAsync (int? storefrontOid, string emailListSegmentFolderUuid)
        {
             ApiResponse<EmailListSegmentFolderResponse> localVarResponse = await GetEmailListSegmentFolderAsyncWithHttpInfo(storefrontOid, emailListSegmentFolderUuid);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get email campaign folder 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="emailListSegmentFolderUuid"></param>
        /// <returns>Task of ApiResponse (EmailListSegmentFolderResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<EmailListSegmentFolderResponse>> GetEmailListSegmentFolderAsyncWithHttpInfo (int? storefrontOid, string emailListSegmentFolderUuid)
        {
            // verify the required parameter 'storefrontOid' is set
            if (storefrontOid == null)
                throw new ApiException(400, "Missing required parameter 'storefrontOid' when calling StorefrontApi->GetEmailListSegmentFolder");
            // verify the required parameter 'emailListSegmentFolderUuid' is set
            if (emailListSegmentFolderUuid == null)
                throw new ApiException(400, "Missing required parameter 'emailListSegmentFolderUuid' when calling StorefrontApi->GetEmailListSegmentFolder");

            var localVarPath = "/storefront/{storefront_oid}/email/list_segment_folders/{email_list_segment_folder_uuid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (storefrontOid != null) localVarPathParams.Add("storefront_oid", this.Configuration.ApiClient.ParameterToString(storefrontOid)); // path parameter
            if (emailListSegmentFolderUuid != null) localVarPathParams.Add("email_list_segment_folder_uuid", this.Configuration.ApiClient.ParameterToString(emailListSegmentFolderUuid)); // path parameter

            // authentication (ultraCartBrowserApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key")))
            {
                localVarHeaderParams["x-ultracart-browser-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key");
            }
            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetEmailListSegmentFolder", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EmailListSegmentFolderResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (EmailListSegmentFolderResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EmailListSegmentFolderResponse)));
        }

        /// <summary>
        /// Get email campaign folders 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <returns>EmailListSegmentFoldersResponse</returns>
        public EmailListSegmentFoldersResponse GetEmailListSegmentFolders (int? storefrontOid)
        {
             ApiResponse<EmailListSegmentFoldersResponse> localVarResponse = GetEmailListSegmentFoldersWithHttpInfo(storefrontOid);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get email campaign folders 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <returns>ApiResponse of EmailListSegmentFoldersResponse</returns>
        public ApiResponse< EmailListSegmentFoldersResponse > GetEmailListSegmentFoldersWithHttpInfo (int? storefrontOid)
        {
            // verify the required parameter 'storefrontOid' is set
            if (storefrontOid == null)
                throw new ApiException(400, "Missing required parameter 'storefrontOid' when calling StorefrontApi->GetEmailListSegmentFolders");

            var localVarPath = "/storefront/{storefront_oid}/email/list_segment_folders";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (storefrontOid != null) localVarPathParams.Add("storefront_oid", this.Configuration.ApiClient.ParameterToString(storefrontOid)); // path parameter

            // authentication (ultraCartBrowserApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key")))
            {
                localVarHeaderParams["x-ultracart-browser-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key");
            }
            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetEmailListSegmentFolders", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EmailListSegmentFoldersResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (EmailListSegmentFoldersResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EmailListSegmentFoldersResponse)));
        }

        /// <summary>
        /// Get email campaign folders 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <returns>Task of EmailListSegmentFoldersResponse</returns>
        public async System.Threading.Tasks.Task<EmailListSegmentFoldersResponse> GetEmailListSegmentFoldersAsync (int? storefrontOid)
        {
             ApiResponse<EmailListSegmentFoldersResponse> localVarResponse = await GetEmailListSegmentFoldersAsyncWithHttpInfo(storefrontOid);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get email campaign folders 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <returns>Task of ApiResponse (EmailListSegmentFoldersResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<EmailListSegmentFoldersResponse>> GetEmailListSegmentFoldersAsyncWithHttpInfo (int? storefrontOid)
        {
            // verify the required parameter 'storefrontOid' is set
            if (storefrontOid == null)
                throw new ApiException(400, "Missing required parameter 'storefrontOid' when calling StorefrontApi->GetEmailListSegmentFolders");

            var localVarPath = "/storefront/{storefront_oid}/email/list_segment_folders";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (storefrontOid != null) localVarPathParams.Add("storefront_oid", this.Configuration.ApiClient.ParameterToString(storefrontOid)); // path parameter

            // authentication (ultraCartBrowserApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key")))
            {
                localVarHeaderParams["x-ultracart-browser-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key");
            }
            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetEmailListSegmentFolders", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EmailListSegmentFoldersResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (EmailListSegmentFoldersResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EmailListSegmentFoldersResponse)));
        }

        /// <summary>
        /// Get email lists 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <returns>EmailListsResponse</returns>
        public EmailListsResponse GetEmailLists (int? storefrontOid)
        {
             ApiResponse<EmailListsResponse> localVarResponse = GetEmailListsWithHttpInfo(storefrontOid);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get email lists 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <returns>ApiResponse of EmailListsResponse</returns>
        public ApiResponse< EmailListsResponse > GetEmailListsWithHttpInfo (int? storefrontOid)
        {
            // verify the required parameter 'storefrontOid' is set
            if (storefrontOid == null)
                throw new ApiException(400, "Missing required parameter 'storefrontOid' when calling StorefrontApi->GetEmailLists");

            var localVarPath = "/storefront/{storefront_oid}/email/lists";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (storefrontOid != null) localVarPathParams.Add("storefront_oid", this.Configuration.ApiClient.ParameterToString(storefrontOid)); // path parameter

            // authentication (ultraCartBrowserApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key")))
            {
                localVarHeaderParams["x-ultracart-browser-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key");
            }
            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetEmailLists", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EmailListsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (EmailListsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EmailListsResponse)));
        }

        /// <summary>
        /// Get email lists 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <returns>Task of EmailListsResponse</returns>
        public async System.Threading.Tasks.Task<EmailListsResponse> GetEmailListsAsync (int? storefrontOid)
        {
             ApiResponse<EmailListsResponse> localVarResponse = await GetEmailListsAsyncWithHttpInfo(storefrontOid);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get email lists 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <returns>Task of ApiResponse (EmailListsResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<EmailListsResponse>> GetEmailListsAsyncWithHttpInfo (int? storefrontOid)
        {
            // verify the required parameter 'storefrontOid' is set
            if (storefrontOid == null)
                throw new ApiException(400, "Missing required parameter 'storefrontOid' when calling StorefrontApi->GetEmailLists");

            var localVarPath = "/storefront/{storefront_oid}/email/lists";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (storefrontOid != null) localVarPathParams.Add("storefront_oid", this.Configuration.ApiClient.ParameterToString(storefrontOid)); // path parameter

            // authentication (ultraCartBrowserApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key")))
            {
                localVarHeaderParams["x-ultracart-browser-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key");
            }
            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetEmailLists", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EmailListsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (EmailListsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EmailListsResponse)));
        }

        /// <summary>
        /// Get email performance 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <returns>EmailPerformanceResponse</returns>
        public EmailPerformanceResponse GetEmailPerformance (int? storefrontOid)
        {
             ApiResponse<EmailPerformanceResponse> localVarResponse = GetEmailPerformanceWithHttpInfo(storefrontOid);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get email performance 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <returns>ApiResponse of EmailPerformanceResponse</returns>
        public ApiResponse< EmailPerformanceResponse > GetEmailPerformanceWithHttpInfo (int? storefrontOid)
        {
            // verify the required parameter 'storefrontOid' is set
            if (storefrontOid == null)
                throw new ApiException(400, "Missing required parameter 'storefrontOid' when calling StorefrontApi->GetEmailPerformance");

            var localVarPath = "/storefront/{storefront_oid}/email/performance";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (storefrontOid != null) localVarPathParams.Add("storefront_oid", this.Configuration.ApiClient.ParameterToString(storefrontOid)); // path parameter

            // authentication (ultraCartBrowserApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key")))
            {
                localVarHeaderParams["x-ultracart-browser-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key");
            }
            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetEmailPerformance", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EmailPerformanceResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (EmailPerformanceResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EmailPerformanceResponse)));
        }

        /// <summary>
        /// Get email performance 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <returns>Task of EmailPerformanceResponse</returns>
        public async System.Threading.Tasks.Task<EmailPerformanceResponse> GetEmailPerformanceAsync (int? storefrontOid)
        {
             ApiResponse<EmailPerformanceResponse> localVarResponse = await GetEmailPerformanceAsyncWithHttpInfo(storefrontOid);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get email performance 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <returns>Task of ApiResponse (EmailPerformanceResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<EmailPerformanceResponse>> GetEmailPerformanceAsyncWithHttpInfo (int? storefrontOid)
        {
            // verify the required parameter 'storefrontOid' is set
            if (storefrontOid == null)
                throw new ApiException(400, "Missing required parameter 'storefrontOid' when calling StorefrontApi->GetEmailPerformance");

            var localVarPath = "/storefront/{storefront_oid}/email/performance";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (storefrontOid != null) localVarPathParams.Add("storefront_oid", this.Configuration.ApiClient.ParameterToString(storefrontOid)); // path parameter

            // authentication (ultraCartBrowserApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key")))
            {
                localVarHeaderParams["x-ultracart-browser-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key");
            }
            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetEmailPerformance", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EmailPerformanceResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (EmailPerformanceResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EmailPerformanceResponse)));
        }

        /// <summary>
        /// Get email plan 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <returns>EmailPlanResponse</returns>
        public EmailPlanResponse GetEmailPlan (int? storefrontOid)
        {
             ApiResponse<EmailPlanResponse> localVarResponse = GetEmailPlanWithHttpInfo(storefrontOid);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get email plan 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <returns>ApiResponse of EmailPlanResponse</returns>
        public ApiResponse< EmailPlanResponse > GetEmailPlanWithHttpInfo (int? storefrontOid)
        {
            // verify the required parameter 'storefrontOid' is set
            if (storefrontOid == null)
                throw new ApiException(400, "Missing required parameter 'storefrontOid' when calling StorefrontApi->GetEmailPlan");

            var localVarPath = "/storefront/{storefront_oid}/email/plan";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (storefrontOid != null) localVarPathParams.Add("storefront_oid", this.Configuration.ApiClient.ParameterToString(storefrontOid)); // path parameter

            // authentication (ultraCartBrowserApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key")))
            {
                localVarHeaderParams["x-ultracart-browser-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key");
            }
            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetEmailPlan", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EmailPlanResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (EmailPlanResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EmailPlanResponse)));
        }

        /// <summary>
        /// Get email plan 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <returns>Task of EmailPlanResponse</returns>
        public async System.Threading.Tasks.Task<EmailPlanResponse> GetEmailPlanAsync (int? storefrontOid)
        {
             ApiResponse<EmailPlanResponse> localVarResponse = await GetEmailPlanAsyncWithHttpInfo(storefrontOid);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get email plan 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <returns>Task of ApiResponse (EmailPlanResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<EmailPlanResponse>> GetEmailPlanAsyncWithHttpInfo (int? storefrontOid)
        {
            // verify the required parameter 'storefrontOid' is set
            if (storefrontOid == null)
                throw new ApiException(400, "Missing required parameter 'storefrontOid' when calling StorefrontApi->GetEmailPlan");

            var localVarPath = "/storefront/{storefront_oid}/email/plan";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (storefrontOid != null) localVarPathParams.Add("storefront_oid", this.Configuration.ApiClient.ParameterToString(storefrontOid)); // path parameter

            // authentication (ultraCartBrowserApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key")))
            {
                localVarHeaderParams["x-ultracart-browser-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key");
            }
            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetEmailPlan", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EmailPlanResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (EmailPlanResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EmailPlanResponse)));
        }

        /// <summary>
        /// Get email postcard 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="commseqPostcardUuid"></param>
        /// <returns>EmailCommseqPostcardResponse</returns>
        public EmailCommseqPostcardResponse GetEmailPostcard (int? storefrontOid, string commseqPostcardUuid)
        {
             ApiResponse<EmailCommseqPostcardResponse> localVarResponse = GetEmailPostcardWithHttpInfo(storefrontOid, commseqPostcardUuid);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get email postcard 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="commseqPostcardUuid"></param>
        /// <returns>ApiResponse of EmailCommseqPostcardResponse</returns>
        public ApiResponse< EmailCommseqPostcardResponse > GetEmailPostcardWithHttpInfo (int? storefrontOid, string commseqPostcardUuid)
        {
            // verify the required parameter 'storefrontOid' is set
            if (storefrontOid == null)
                throw new ApiException(400, "Missing required parameter 'storefrontOid' when calling StorefrontApi->GetEmailPostcard");
            // verify the required parameter 'commseqPostcardUuid' is set
            if (commseqPostcardUuid == null)
                throw new ApiException(400, "Missing required parameter 'commseqPostcardUuid' when calling StorefrontApi->GetEmailPostcard");

            var localVarPath = "/storefront/{storefront_oid}/email/postcards/{commseq_postcard_uuid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (storefrontOid != null) localVarPathParams.Add("storefront_oid", this.Configuration.ApiClient.ParameterToString(storefrontOid)); // path parameter
            if (commseqPostcardUuid != null) localVarPathParams.Add("commseq_postcard_uuid", this.Configuration.ApiClient.ParameterToString(commseqPostcardUuid)); // path parameter

            // authentication (ultraCartBrowserApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key")))
            {
                localVarHeaderParams["x-ultracart-browser-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key");
            }
            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetEmailPostcard", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EmailCommseqPostcardResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (EmailCommseqPostcardResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EmailCommseqPostcardResponse)));
        }

        /// <summary>
        /// Get email postcard 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="commseqPostcardUuid"></param>
        /// <returns>Task of EmailCommseqPostcardResponse</returns>
        public async System.Threading.Tasks.Task<EmailCommseqPostcardResponse> GetEmailPostcardAsync (int? storefrontOid, string commseqPostcardUuid)
        {
             ApiResponse<EmailCommseqPostcardResponse> localVarResponse = await GetEmailPostcardAsyncWithHttpInfo(storefrontOid, commseqPostcardUuid);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get email postcard 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="commseqPostcardUuid"></param>
        /// <returns>Task of ApiResponse (EmailCommseqPostcardResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<EmailCommseqPostcardResponse>> GetEmailPostcardAsyncWithHttpInfo (int? storefrontOid, string commseqPostcardUuid)
        {
            // verify the required parameter 'storefrontOid' is set
            if (storefrontOid == null)
                throw new ApiException(400, "Missing required parameter 'storefrontOid' when calling StorefrontApi->GetEmailPostcard");
            // verify the required parameter 'commseqPostcardUuid' is set
            if (commseqPostcardUuid == null)
                throw new ApiException(400, "Missing required parameter 'commseqPostcardUuid' when calling StorefrontApi->GetEmailPostcard");

            var localVarPath = "/storefront/{storefront_oid}/email/postcards/{commseq_postcard_uuid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (storefrontOid != null) localVarPathParams.Add("storefront_oid", this.Configuration.ApiClient.ParameterToString(storefrontOid)); // path parameter
            if (commseqPostcardUuid != null) localVarPathParams.Add("commseq_postcard_uuid", this.Configuration.ApiClient.ParameterToString(commseqPostcardUuid)); // path parameter

            // authentication (ultraCartBrowserApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key")))
            {
                localVarHeaderParams["x-ultracart-browser-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key");
            }
            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetEmailPostcard", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EmailCommseqPostcardResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (EmailCommseqPostcardResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EmailCommseqPostcardResponse)));
        }

        /// <summary>
        /// Get email postcards 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <returns>EmailCommseqPostcardsResponse</returns>
        public EmailCommseqPostcardsResponse GetEmailPostcards (int? storefrontOid)
        {
             ApiResponse<EmailCommseqPostcardsResponse> localVarResponse = GetEmailPostcardsWithHttpInfo(storefrontOid);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get email postcards 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <returns>ApiResponse of EmailCommseqPostcardsResponse</returns>
        public ApiResponse< EmailCommseqPostcardsResponse > GetEmailPostcardsWithHttpInfo (int? storefrontOid)
        {
            // verify the required parameter 'storefrontOid' is set
            if (storefrontOid == null)
                throw new ApiException(400, "Missing required parameter 'storefrontOid' when calling StorefrontApi->GetEmailPostcards");

            var localVarPath = "/storefront/{storefront_oid}/email/postcards";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (storefrontOid != null) localVarPathParams.Add("storefront_oid", this.Configuration.ApiClient.ParameterToString(storefrontOid)); // path parameter

            // authentication (ultraCartBrowserApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key")))
            {
                localVarHeaderParams["x-ultracart-browser-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key");
            }
            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetEmailPostcards", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EmailCommseqPostcardsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (EmailCommseqPostcardsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EmailCommseqPostcardsResponse)));
        }

        /// <summary>
        /// Get email postcards 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <returns>Task of EmailCommseqPostcardsResponse</returns>
        public async System.Threading.Tasks.Task<EmailCommseqPostcardsResponse> GetEmailPostcardsAsync (int? storefrontOid)
        {
             ApiResponse<EmailCommseqPostcardsResponse> localVarResponse = await GetEmailPostcardsAsyncWithHttpInfo(storefrontOid);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get email postcards 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <returns>Task of ApiResponse (EmailCommseqPostcardsResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<EmailCommseqPostcardsResponse>> GetEmailPostcardsAsyncWithHttpInfo (int? storefrontOid)
        {
            // verify the required parameter 'storefrontOid' is set
            if (storefrontOid == null)
                throw new ApiException(400, "Missing required parameter 'storefrontOid' when calling StorefrontApi->GetEmailPostcards");

            var localVarPath = "/storefront/{storefront_oid}/email/postcards";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (storefrontOid != null) localVarPathParams.Add("storefront_oid", this.Configuration.ApiClient.ParameterToString(storefrontOid)); // path parameter

            // authentication (ultraCartBrowserApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key")))
            {
                localVarHeaderParams["x-ultracart-browser-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key");
            }
            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetEmailPostcards", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EmailCommseqPostcardsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (EmailCommseqPostcardsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EmailCommseqPostcardsResponse)));
        }

        /// <summary>
        /// Get email postcards multiple 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="emailCommseqPostcardsRequest">Request of postcard uuids</param>
        /// <returns>EmailCommseqPostcardsResponse</returns>
        public EmailCommseqPostcardsResponse GetEmailPostcardsMultiple (int? storefrontOid, EmailCommseqPostcardsRequest emailCommseqPostcardsRequest)
        {
             ApiResponse<EmailCommseqPostcardsResponse> localVarResponse = GetEmailPostcardsMultipleWithHttpInfo(storefrontOid, emailCommseqPostcardsRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get email postcards multiple 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="emailCommseqPostcardsRequest">Request of postcard uuids</param>
        /// <returns>ApiResponse of EmailCommseqPostcardsResponse</returns>
        public ApiResponse< EmailCommseqPostcardsResponse > GetEmailPostcardsMultipleWithHttpInfo (int? storefrontOid, EmailCommseqPostcardsRequest emailCommseqPostcardsRequest)
        {
            // verify the required parameter 'storefrontOid' is set
            if (storefrontOid == null)
                throw new ApiException(400, "Missing required parameter 'storefrontOid' when calling StorefrontApi->GetEmailPostcardsMultiple");
            // verify the required parameter 'emailCommseqPostcardsRequest' is set
            if (emailCommseqPostcardsRequest == null)
                throw new ApiException(400, "Missing required parameter 'emailCommseqPostcardsRequest' when calling StorefrontApi->GetEmailPostcardsMultiple");

            var localVarPath = "/storefront/{storefront_oid}/email/postcards/multiple";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (storefrontOid != null) localVarPathParams.Add("storefront_oid", this.Configuration.ApiClient.ParameterToString(storefrontOid)); // path parameter
            if (emailCommseqPostcardsRequest != null && emailCommseqPostcardsRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(emailCommseqPostcardsRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = emailCommseqPostcardsRequest; // byte array
            }

            // authentication (ultraCartBrowserApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key")))
            {
                localVarHeaderParams["x-ultracart-browser-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key");
            }
            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetEmailPostcardsMultiple", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EmailCommseqPostcardsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (EmailCommseqPostcardsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EmailCommseqPostcardsResponse)));
        }

        /// <summary>
        /// Get email postcards multiple 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="emailCommseqPostcardsRequest">Request of postcard uuids</param>
        /// <returns>Task of EmailCommseqPostcardsResponse</returns>
        public async System.Threading.Tasks.Task<EmailCommseqPostcardsResponse> GetEmailPostcardsMultipleAsync (int? storefrontOid, EmailCommseqPostcardsRequest emailCommseqPostcardsRequest)
        {
             ApiResponse<EmailCommseqPostcardsResponse> localVarResponse = await GetEmailPostcardsMultipleAsyncWithHttpInfo(storefrontOid, emailCommseqPostcardsRequest);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get email postcards multiple 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="emailCommseqPostcardsRequest">Request of postcard uuids</param>
        /// <returns>Task of ApiResponse (EmailCommseqPostcardsResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<EmailCommseqPostcardsResponse>> GetEmailPostcardsMultipleAsyncWithHttpInfo (int? storefrontOid, EmailCommseqPostcardsRequest emailCommseqPostcardsRequest)
        {
            // verify the required parameter 'storefrontOid' is set
            if (storefrontOid == null)
                throw new ApiException(400, "Missing required parameter 'storefrontOid' when calling StorefrontApi->GetEmailPostcardsMultiple");
            // verify the required parameter 'emailCommseqPostcardsRequest' is set
            if (emailCommseqPostcardsRequest == null)
                throw new ApiException(400, "Missing required parameter 'emailCommseqPostcardsRequest' when calling StorefrontApi->GetEmailPostcardsMultiple");

            var localVarPath = "/storefront/{storefront_oid}/email/postcards/multiple";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (storefrontOid != null) localVarPathParams.Add("storefront_oid", this.Configuration.ApiClient.ParameterToString(storefrontOid)); // path parameter
            if (emailCommseqPostcardsRequest != null && emailCommseqPostcardsRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(emailCommseqPostcardsRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = emailCommseqPostcardsRequest; // byte array
            }

            // authentication (ultraCartBrowserApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key")))
            {
                localVarHeaderParams["x-ultracart-browser-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key");
            }
            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetEmailPostcardsMultiple", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EmailCommseqPostcardsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (EmailCommseqPostcardsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EmailCommseqPostcardsResponse)));
        }

        /// <summary>
        /// Get email segment 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="emailSegmentUuid"></param>
        /// <returns>EmailSegmentResponse</returns>
        public EmailSegmentResponse GetEmailSegment (int? storefrontOid, string emailSegmentUuid)
        {
             ApiResponse<EmailSegmentResponse> localVarResponse = GetEmailSegmentWithHttpInfo(storefrontOid, emailSegmentUuid);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get email segment 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="emailSegmentUuid"></param>
        /// <returns>ApiResponse of EmailSegmentResponse</returns>
        public ApiResponse< EmailSegmentResponse > GetEmailSegmentWithHttpInfo (int? storefrontOid, string emailSegmentUuid)
        {
            // verify the required parameter 'storefrontOid' is set
            if (storefrontOid == null)
                throw new ApiException(400, "Missing required parameter 'storefrontOid' when calling StorefrontApi->GetEmailSegment");
            // verify the required parameter 'emailSegmentUuid' is set
            if (emailSegmentUuid == null)
                throw new ApiException(400, "Missing required parameter 'emailSegmentUuid' when calling StorefrontApi->GetEmailSegment");

            var localVarPath = "/storefront/{storefront_oid}/email/segments/{email_segment_uuid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (storefrontOid != null) localVarPathParams.Add("storefront_oid", this.Configuration.ApiClient.ParameterToString(storefrontOid)); // path parameter
            if (emailSegmentUuid != null) localVarPathParams.Add("email_segment_uuid", this.Configuration.ApiClient.ParameterToString(emailSegmentUuid)); // path parameter

            // authentication (ultraCartBrowserApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key")))
            {
                localVarHeaderParams["x-ultracart-browser-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key");
            }
            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetEmailSegment", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EmailSegmentResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (EmailSegmentResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EmailSegmentResponse)));
        }

        /// <summary>
        /// Get email segment 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="emailSegmentUuid"></param>
        /// <returns>Task of EmailSegmentResponse</returns>
        public async System.Threading.Tasks.Task<EmailSegmentResponse> GetEmailSegmentAsync (int? storefrontOid, string emailSegmentUuid)
        {
             ApiResponse<EmailSegmentResponse> localVarResponse = await GetEmailSegmentAsyncWithHttpInfo(storefrontOid, emailSegmentUuid);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get email segment 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="emailSegmentUuid"></param>
        /// <returns>Task of ApiResponse (EmailSegmentResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<EmailSegmentResponse>> GetEmailSegmentAsyncWithHttpInfo (int? storefrontOid, string emailSegmentUuid)
        {
            // verify the required parameter 'storefrontOid' is set
            if (storefrontOid == null)
                throw new ApiException(400, "Missing required parameter 'storefrontOid' when calling StorefrontApi->GetEmailSegment");
            // verify the required parameter 'emailSegmentUuid' is set
            if (emailSegmentUuid == null)
                throw new ApiException(400, "Missing required parameter 'emailSegmentUuid' when calling StorefrontApi->GetEmailSegment");

            var localVarPath = "/storefront/{storefront_oid}/email/segments/{email_segment_uuid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (storefrontOid != null) localVarPathParams.Add("storefront_oid", this.Configuration.ApiClient.ParameterToString(storefrontOid)); // path parameter
            if (emailSegmentUuid != null) localVarPathParams.Add("email_segment_uuid", this.Configuration.ApiClient.ParameterToString(emailSegmentUuid)); // path parameter

            // authentication (ultraCartBrowserApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key")))
            {
                localVarHeaderParams["x-ultracart-browser-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key");
            }
            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetEmailSegment", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EmailSegmentResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (EmailSegmentResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EmailSegmentResponse)));
        }

        /// <summary>
        /// Get email segment customers editor URL 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="emailSegmentUuid"></param>
        /// <param name="emailCustomerUuid"></param>
        /// <returns>EmailCustomerEditorUrlResponse</returns>
        public EmailCustomerEditorUrlResponse GetEmailSegmentCustomerEditorUrl (int? storefrontOid, string emailSegmentUuid, string emailCustomerUuid)
        {
             ApiResponse<EmailCustomerEditorUrlResponse> localVarResponse = GetEmailSegmentCustomerEditorUrlWithHttpInfo(storefrontOid, emailSegmentUuid, emailCustomerUuid);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get email segment customers editor URL 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="emailSegmentUuid"></param>
        /// <param name="emailCustomerUuid"></param>
        /// <returns>ApiResponse of EmailCustomerEditorUrlResponse</returns>
        public ApiResponse< EmailCustomerEditorUrlResponse > GetEmailSegmentCustomerEditorUrlWithHttpInfo (int? storefrontOid, string emailSegmentUuid, string emailCustomerUuid)
        {
            // verify the required parameter 'storefrontOid' is set
            if (storefrontOid == null)
                throw new ApiException(400, "Missing required parameter 'storefrontOid' when calling StorefrontApi->GetEmailSegmentCustomerEditorUrl");
            // verify the required parameter 'emailSegmentUuid' is set
            if (emailSegmentUuid == null)
                throw new ApiException(400, "Missing required parameter 'emailSegmentUuid' when calling StorefrontApi->GetEmailSegmentCustomerEditorUrl");
            // verify the required parameter 'emailCustomerUuid' is set
            if (emailCustomerUuid == null)
                throw new ApiException(400, "Missing required parameter 'emailCustomerUuid' when calling StorefrontApi->GetEmailSegmentCustomerEditorUrl");

            var localVarPath = "/storefront/{storefront_oid}/email/segments/{email_segment_uuid}/customers/{email_customer_uuid}/editor_url";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (storefrontOid != null) localVarPathParams.Add("storefront_oid", this.Configuration.ApiClient.ParameterToString(storefrontOid)); // path parameter
            if (emailSegmentUuid != null) localVarPathParams.Add("email_segment_uuid", this.Configuration.ApiClient.ParameterToString(emailSegmentUuid)); // path parameter
            if (emailCustomerUuid != null) localVarPathParams.Add("email_customer_uuid", this.Configuration.ApiClient.ParameterToString(emailCustomerUuid)); // path parameter

            // authentication (ultraCartBrowserApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key")))
            {
                localVarHeaderParams["x-ultracart-browser-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key");
            }
            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetEmailSegmentCustomerEditorUrl", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EmailCustomerEditorUrlResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (EmailCustomerEditorUrlResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EmailCustomerEditorUrlResponse)));
        }

        /// <summary>
        /// Get email segment customers editor URL 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="emailSegmentUuid"></param>
        /// <param name="emailCustomerUuid"></param>
        /// <returns>Task of EmailCustomerEditorUrlResponse</returns>
        public async System.Threading.Tasks.Task<EmailCustomerEditorUrlResponse> GetEmailSegmentCustomerEditorUrlAsync (int? storefrontOid, string emailSegmentUuid, string emailCustomerUuid)
        {
             ApiResponse<EmailCustomerEditorUrlResponse> localVarResponse = await GetEmailSegmentCustomerEditorUrlAsyncWithHttpInfo(storefrontOid, emailSegmentUuid, emailCustomerUuid);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get email segment customers editor URL 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="emailSegmentUuid"></param>
        /// <param name="emailCustomerUuid"></param>
        /// <returns>Task of ApiResponse (EmailCustomerEditorUrlResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<EmailCustomerEditorUrlResponse>> GetEmailSegmentCustomerEditorUrlAsyncWithHttpInfo (int? storefrontOid, string emailSegmentUuid, string emailCustomerUuid)
        {
            // verify the required parameter 'storefrontOid' is set
            if (storefrontOid == null)
                throw new ApiException(400, "Missing required parameter 'storefrontOid' when calling StorefrontApi->GetEmailSegmentCustomerEditorUrl");
            // verify the required parameter 'emailSegmentUuid' is set
            if (emailSegmentUuid == null)
                throw new ApiException(400, "Missing required parameter 'emailSegmentUuid' when calling StorefrontApi->GetEmailSegmentCustomerEditorUrl");
            // verify the required parameter 'emailCustomerUuid' is set
            if (emailCustomerUuid == null)
                throw new ApiException(400, "Missing required parameter 'emailCustomerUuid' when calling StorefrontApi->GetEmailSegmentCustomerEditorUrl");

            var localVarPath = "/storefront/{storefront_oid}/email/segments/{email_segment_uuid}/customers/{email_customer_uuid}/editor_url";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (storefrontOid != null) localVarPathParams.Add("storefront_oid", this.Configuration.ApiClient.ParameterToString(storefrontOid)); // path parameter
            if (emailSegmentUuid != null) localVarPathParams.Add("email_segment_uuid", this.Configuration.ApiClient.ParameterToString(emailSegmentUuid)); // path parameter
            if (emailCustomerUuid != null) localVarPathParams.Add("email_customer_uuid", this.Configuration.ApiClient.ParameterToString(emailCustomerUuid)); // path parameter

            // authentication (ultraCartBrowserApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key")))
            {
                localVarHeaderParams["x-ultracart-browser-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key");
            }
            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetEmailSegmentCustomerEditorUrl", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EmailCustomerEditorUrlResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (EmailCustomerEditorUrlResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EmailCustomerEditorUrlResponse)));
        }

        /// <summary>
        /// Get email segment customers 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="emailSegmentUuid"></param>
        /// <param name="pageNumber"> (optional)</param>
        /// <param name="pageSize"> (optional)</param>
        /// <returns>EmailSegmentCustomersResponse</returns>
        public EmailSegmentCustomersResponse GetEmailSegmentCustomers (int? storefrontOid, string emailSegmentUuid, int? pageNumber = null, int? pageSize = null)
        {
             ApiResponse<EmailSegmentCustomersResponse> localVarResponse = GetEmailSegmentCustomersWithHttpInfo(storefrontOid, emailSegmentUuid, pageNumber, pageSize);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get email segment customers 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="emailSegmentUuid"></param>
        /// <param name="pageNumber"> (optional)</param>
        /// <param name="pageSize"> (optional)</param>
        /// <returns>ApiResponse of EmailSegmentCustomersResponse</returns>
        public ApiResponse< EmailSegmentCustomersResponse > GetEmailSegmentCustomersWithHttpInfo (int? storefrontOid, string emailSegmentUuid, int? pageNumber = null, int? pageSize = null)
        {
            // verify the required parameter 'storefrontOid' is set
            if (storefrontOid == null)
                throw new ApiException(400, "Missing required parameter 'storefrontOid' when calling StorefrontApi->GetEmailSegmentCustomers");
            // verify the required parameter 'emailSegmentUuid' is set
            if (emailSegmentUuid == null)
                throw new ApiException(400, "Missing required parameter 'emailSegmentUuid' when calling StorefrontApi->GetEmailSegmentCustomers");

            var localVarPath = "/storefront/{storefront_oid}/email/segments/{email_segment_uuid}/customers";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (storefrontOid != null) localVarPathParams.Add("storefront_oid", this.Configuration.ApiClient.ParameterToString(storefrontOid)); // path parameter
            if (emailSegmentUuid != null) localVarPathParams.Add("email_segment_uuid", this.Configuration.ApiClient.ParameterToString(emailSegmentUuid)); // path parameter
            if (pageNumber != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageNumber", pageNumber)); // query parameter
            if (pageSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageSize", pageSize)); // query parameter

            // authentication (ultraCartBrowserApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key")))
            {
                localVarHeaderParams["x-ultracart-browser-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key");
            }
            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetEmailSegmentCustomers", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EmailSegmentCustomersResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (EmailSegmentCustomersResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EmailSegmentCustomersResponse)));
        }

        /// <summary>
        /// Get email segment customers 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="emailSegmentUuid"></param>
        /// <param name="pageNumber"> (optional)</param>
        /// <param name="pageSize"> (optional)</param>
        /// <returns>Task of EmailSegmentCustomersResponse</returns>
        public async System.Threading.Tasks.Task<EmailSegmentCustomersResponse> GetEmailSegmentCustomersAsync (int? storefrontOid, string emailSegmentUuid, int? pageNumber = null, int? pageSize = null)
        {
             ApiResponse<EmailSegmentCustomersResponse> localVarResponse = await GetEmailSegmentCustomersAsyncWithHttpInfo(storefrontOid, emailSegmentUuid, pageNumber, pageSize);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get email segment customers 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="emailSegmentUuid"></param>
        /// <param name="pageNumber"> (optional)</param>
        /// <param name="pageSize"> (optional)</param>
        /// <returns>Task of ApiResponse (EmailSegmentCustomersResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<EmailSegmentCustomersResponse>> GetEmailSegmentCustomersAsyncWithHttpInfo (int? storefrontOid, string emailSegmentUuid, int? pageNumber = null, int? pageSize = null)
        {
            // verify the required parameter 'storefrontOid' is set
            if (storefrontOid == null)
                throw new ApiException(400, "Missing required parameter 'storefrontOid' when calling StorefrontApi->GetEmailSegmentCustomers");
            // verify the required parameter 'emailSegmentUuid' is set
            if (emailSegmentUuid == null)
                throw new ApiException(400, "Missing required parameter 'emailSegmentUuid' when calling StorefrontApi->GetEmailSegmentCustomers");

            var localVarPath = "/storefront/{storefront_oid}/email/segments/{email_segment_uuid}/customers";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (storefrontOid != null) localVarPathParams.Add("storefront_oid", this.Configuration.ApiClient.ParameterToString(storefrontOid)); // path parameter
            if (emailSegmentUuid != null) localVarPathParams.Add("email_segment_uuid", this.Configuration.ApiClient.ParameterToString(emailSegmentUuid)); // path parameter
            if (pageNumber != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageNumber", pageNumber)); // query parameter
            if (pageSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageSize", pageSize)); // query parameter

            // authentication (ultraCartBrowserApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key")))
            {
                localVarHeaderParams["x-ultracart-browser-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key");
            }
            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetEmailSegmentCustomers", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EmailSegmentCustomersResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (EmailSegmentCustomersResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EmailSegmentCustomersResponse)));
        }

        /// <summary>
        /// Get email segments 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <returns>EmailSegmentsResponse</returns>
        public EmailSegmentsResponse GetEmailSegments (int? storefrontOid)
        {
             ApiResponse<EmailSegmentsResponse> localVarResponse = GetEmailSegmentsWithHttpInfo(storefrontOid);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get email segments 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <returns>ApiResponse of EmailSegmentsResponse</returns>
        public ApiResponse< EmailSegmentsResponse > GetEmailSegmentsWithHttpInfo (int? storefrontOid)
        {
            // verify the required parameter 'storefrontOid' is set
            if (storefrontOid == null)
                throw new ApiException(400, "Missing required parameter 'storefrontOid' when calling StorefrontApi->GetEmailSegments");

            var localVarPath = "/storefront/{storefront_oid}/email/segments";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (storefrontOid != null) localVarPathParams.Add("storefront_oid", this.Configuration.ApiClient.ParameterToString(storefrontOid)); // path parameter

            // authentication (ultraCartBrowserApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key")))
            {
                localVarHeaderParams["x-ultracart-browser-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key");
            }
            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetEmailSegments", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EmailSegmentsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (EmailSegmentsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EmailSegmentsResponse)));
        }

        /// <summary>
        /// Get email segments 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <returns>Task of EmailSegmentsResponse</returns>
        public async System.Threading.Tasks.Task<EmailSegmentsResponse> GetEmailSegmentsAsync (int? storefrontOid)
        {
             ApiResponse<EmailSegmentsResponse> localVarResponse = await GetEmailSegmentsAsyncWithHttpInfo(storefrontOid);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get email segments 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <returns>Task of ApiResponse (EmailSegmentsResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<EmailSegmentsResponse>> GetEmailSegmentsAsyncWithHttpInfo (int? storefrontOid)
        {
            // verify the required parameter 'storefrontOid' is set
            if (storefrontOid == null)
                throw new ApiException(400, "Missing required parameter 'storefrontOid' when calling StorefrontApi->GetEmailSegments");

            var localVarPath = "/storefront/{storefront_oid}/email/segments";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (storefrontOid != null) localVarPathParams.Add("storefront_oid", this.Configuration.ApiClient.ParameterToString(storefrontOid)); // path parameter

            // authentication (ultraCartBrowserApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key")))
            {
                localVarHeaderParams["x-ultracart-browser-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key");
            }
            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetEmailSegments", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EmailSegmentsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (EmailSegmentsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EmailSegmentsResponse)));
        }

        /// <summary>
        /// Get email sending domain 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="domain"></param>
        /// <returns>EmailSendingDomainResponse</returns>
        public EmailSendingDomainResponse GetEmailSendingDomain (string domain)
        {
             ApiResponse<EmailSendingDomainResponse> localVarResponse = GetEmailSendingDomainWithHttpInfo(domain);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get email sending domain 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="domain"></param>
        /// <returns>ApiResponse of EmailSendingDomainResponse</returns>
        public ApiResponse< EmailSendingDomainResponse > GetEmailSendingDomainWithHttpInfo (string domain)
        {
            // verify the required parameter 'domain' is set
            if (domain == null)
                throw new ApiException(400, "Missing required parameter 'domain' when calling StorefrontApi->GetEmailSendingDomain");

            var localVarPath = "/storefront/email/sending_domain/{domain}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (domain != null) localVarPathParams.Add("domain", this.Configuration.ApiClient.ParameterToString(domain)); // path parameter

            // authentication (ultraCartBrowserApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key")))
            {
                localVarHeaderParams["x-ultracart-browser-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key");
            }
            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetEmailSendingDomain", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EmailSendingDomainResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (EmailSendingDomainResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EmailSendingDomainResponse)));
        }

        /// <summary>
        /// Get email sending domain 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="domain"></param>
        /// <returns>Task of EmailSendingDomainResponse</returns>
        public async System.Threading.Tasks.Task<EmailSendingDomainResponse> GetEmailSendingDomainAsync (string domain)
        {
             ApiResponse<EmailSendingDomainResponse> localVarResponse = await GetEmailSendingDomainAsyncWithHttpInfo(domain);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get email sending domain 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="domain"></param>
        /// <returns>Task of ApiResponse (EmailSendingDomainResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<EmailSendingDomainResponse>> GetEmailSendingDomainAsyncWithHttpInfo (string domain)
        {
            // verify the required parameter 'domain' is set
            if (domain == null)
                throw new ApiException(400, "Missing required parameter 'domain' when calling StorefrontApi->GetEmailSendingDomain");

            var localVarPath = "/storefront/email/sending_domain/{domain}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (domain != null) localVarPathParams.Add("domain", this.Configuration.ApiClient.ParameterToString(domain)); // path parameter

            // authentication (ultraCartBrowserApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key")))
            {
                localVarHeaderParams["x-ultracart-browser-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key");
            }
            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetEmailSendingDomain", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EmailSendingDomainResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (EmailSendingDomainResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EmailSendingDomainResponse)));
        }

        /// <summary>
        /// Get email sending domain status 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="domain"></param>
        /// <returns>EmailSendingDomainResponse</returns>
        public EmailSendingDomainResponse GetEmailSendingDomainStatus (string domain)
        {
             ApiResponse<EmailSendingDomainResponse> localVarResponse = GetEmailSendingDomainStatusWithHttpInfo(domain);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get email sending domain status 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="domain"></param>
        /// <returns>ApiResponse of EmailSendingDomainResponse</returns>
        public ApiResponse< EmailSendingDomainResponse > GetEmailSendingDomainStatusWithHttpInfo (string domain)
        {
            // verify the required parameter 'domain' is set
            if (domain == null)
                throw new ApiException(400, "Missing required parameter 'domain' when calling StorefrontApi->GetEmailSendingDomainStatus");

            var localVarPath = "/storefront/email/sending_domains/{domain}/status";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (domain != null) localVarPathParams.Add("domain", this.Configuration.ApiClient.ParameterToString(domain)); // path parameter

            // authentication (ultraCartBrowserApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key")))
            {
                localVarHeaderParams["x-ultracart-browser-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key");
            }
            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetEmailSendingDomainStatus", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EmailSendingDomainResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (EmailSendingDomainResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EmailSendingDomainResponse)));
        }

        /// <summary>
        /// Get email sending domain status 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="domain"></param>
        /// <returns>Task of EmailSendingDomainResponse</returns>
        public async System.Threading.Tasks.Task<EmailSendingDomainResponse> GetEmailSendingDomainStatusAsync (string domain)
        {
             ApiResponse<EmailSendingDomainResponse> localVarResponse = await GetEmailSendingDomainStatusAsyncWithHttpInfo(domain);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get email sending domain status 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="domain"></param>
        /// <returns>Task of ApiResponse (EmailSendingDomainResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<EmailSendingDomainResponse>> GetEmailSendingDomainStatusAsyncWithHttpInfo (string domain)
        {
            // verify the required parameter 'domain' is set
            if (domain == null)
                throw new ApiException(400, "Missing required parameter 'domain' when calling StorefrontApi->GetEmailSendingDomainStatus");

            var localVarPath = "/storefront/email/sending_domains/{domain}/status";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (domain != null) localVarPathParams.Add("domain", this.Configuration.ApiClient.ParameterToString(domain)); // path parameter

            // authentication (ultraCartBrowserApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key")))
            {
                localVarHeaderParams["x-ultracart-browser-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key");
            }
            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetEmailSendingDomainStatus", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EmailSendingDomainResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (EmailSendingDomainResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EmailSendingDomainResponse)));
        }

        /// <summary>
        /// Get email sending domains 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>EmailSendingDomainsResponse</returns>
        public EmailSendingDomainsResponse GetEmailSendingDomains ()
        {
             ApiResponse<EmailSendingDomainsResponse> localVarResponse = GetEmailSendingDomainsWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get email sending domains 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of EmailSendingDomainsResponse</returns>
        public ApiResponse< EmailSendingDomainsResponse > GetEmailSendingDomainsWithHttpInfo ()
        {

            var localVarPath = "/storefront/email/sending_domains";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (ultraCartBrowserApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key")))
            {
                localVarHeaderParams["x-ultracart-browser-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key");
            }
            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetEmailSendingDomains", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EmailSendingDomainsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (EmailSendingDomainsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EmailSendingDomainsResponse)));
        }

        /// <summary>
        /// Get email sending domains 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of EmailSendingDomainsResponse</returns>
        public async System.Threading.Tasks.Task<EmailSendingDomainsResponse> GetEmailSendingDomainsAsync ()
        {
             ApiResponse<EmailSendingDomainsResponse> localVarResponse = await GetEmailSendingDomainsAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get email sending domains 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (EmailSendingDomainsResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<EmailSendingDomainsResponse>> GetEmailSendingDomainsAsyncWithHttpInfo ()
        {

            var localVarPath = "/storefront/email/sending_domains";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (ultraCartBrowserApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key")))
            {
                localVarHeaderParams["x-ultracart-browser-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key");
            }
            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetEmailSendingDomains", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EmailSendingDomainsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (EmailSendingDomainsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EmailSendingDomainsResponse)));
        }

        /// <summary>
        /// Get email settings 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <returns>EmailSettingsResponse</returns>
        public EmailSettingsResponse GetEmailSettings (int? storefrontOid)
        {
             ApiResponse<EmailSettingsResponse> localVarResponse = GetEmailSettingsWithHttpInfo(storefrontOid);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get email settings 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <returns>ApiResponse of EmailSettingsResponse</returns>
        public ApiResponse< EmailSettingsResponse > GetEmailSettingsWithHttpInfo (int? storefrontOid)
        {
            // verify the required parameter 'storefrontOid' is set
            if (storefrontOid == null)
                throw new ApiException(400, "Missing required parameter 'storefrontOid' when calling StorefrontApi->GetEmailSettings");

            var localVarPath = "/storefront/{storefront_oid}/email/settings";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (storefrontOid != null) localVarPathParams.Add("storefront_oid", this.Configuration.ApiClient.ParameterToString(storefrontOid)); // path parameter

            // authentication (ultraCartBrowserApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key")))
            {
                localVarHeaderParams["x-ultracart-browser-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key");
            }
            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetEmailSettings", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EmailSettingsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (EmailSettingsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EmailSettingsResponse)));
        }

        /// <summary>
        /// Get email settings 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <returns>Task of EmailSettingsResponse</returns>
        public async System.Threading.Tasks.Task<EmailSettingsResponse> GetEmailSettingsAsync (int? storefrontOid)
        {
             ApiResponse<EmailSettingsResponse> localVarResponse = await GetEmailSettingsAsyncWithHttpInfo(storefrontOid);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get email settings 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <returns>Task of ApiResponse (EmailSettingsResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<EmailSettingsResponse>> GetEmailSettingsAsyncWithHttpInfo (int? storefrontOid)
        {
            // verify the required parameter 'storefrontOid' is set
            if (storefrontOid == null)
                throw new ApiException(400, "Missing required parameter 'storefrontOid' when calling StorefrontApi->GetEmailSettings");

            var localVarPath = "/storefront/{storefront_oid}/email/settings";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (storefrontOid != null) localVarPathParams.Add("storefront_oid", this.Configuration.ApiClient.ParameterToString(storefrontOid)); // path parameter

            // authentication (ultraCartBrowserApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key")))
            {
                localVarHeaderParams["x-ultracart-browser-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key");
            }
            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetEmailSettings", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EmailSettingsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (EmailSettingsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EmailSettingsResponse)));
        }

        /// <summary>
        /// Get email template 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="emailTemplateOid"></param>
        /// <returns>EmailTemplate</returns>
        public EmailTemplate GetEmailTemplate (int? storefrontOid, int? emailTemplateOid)
        {
             ApiResponse<EmailTemplate> localVarResponse = GetEmailTemplateWithHttpInfo(storefrontOid, emailTemplateOid);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get email template 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="emailTemplateOid"></param>
        /// <returns>ApiResponse of EmailTemplate</returns>
        public ApiResponse< EmailTemplate > GetEmailTemplateWithHttpInfo (int? storefrontOid, int? emailTemplateOid)
        {
            // verify the required parameter 'storefrontOid' is set
            if (storefrontOid == null)
                throw new ApiException(400, "Missing required parameter 'storefrontOid' when calling StorefrontApi->GetEmailTemplate");
            // verify the required parameter 'emailTemplateOid' is set
            if (emailTemplateOid == null)
                throw new ApiException(400, "Missing required parameter 'emailTemplateOid' when calling StorefrontApi->GetEmailTemplate");

            var localVarPath = "/storefront/{storefront_oid}/email/templates/{email_template_oid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (storefrontOid != null) localVarPathParams.Add("storefront_oid", this.Configuration.ApiClient.ParameterToString(storefrontOid)); // path parameter
            if (emailTemplateOid != null) localVarPathParams.Add("email_template_oid", this.Configuration.ApiClient.ParameterToString(emailTemplateOid)); // path parameter

            // authentication (ultraCartBrowserApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key")))
            {
                localVarHeaderParams["x-ultracart-browser-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key");
            }
            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetEmailTemplate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EmailTemplate>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (EmailTemplate) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EmailTemplate)));
        }

        /// <summary>
        /// Get email template 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="emailTemplateOid"></param>
        /// <returns>Task of EmailTemplate</returns>
        public async System.Threading.Tasks.Task<EmailTemplate> GetEmailTemplateAsync (int? storefrontOid, int? emailTemplateOid)
        {
             ApiResponse<EmailTemplate> localVarResponse = await GetEmailTemplateAsyncWithHttpInfo(storefrontOid, emailTemplateOid);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get email template 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="emailTemplateOid"></param>
        /// <returns>Task of ApiResponse (EmailTemplate)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<EmailTemplate>> GetEmailTemplateAsyncWithHttpInfo (int? storefrontOid, int? emailTemplateOid)
        {
            // verify the required parameter 'storefrontOid' is set
            if (storefrontOid == null)
                throw new ApiException(400, "Missing required parameter 'storefrontOid' when calling StorefrontApi->GetEmailTemplate");
            // verify the required parameter 'emailTemplateOid' is set
            if (emailTemplateOid == null)
                throw new ApiException(400, "Missing required parameter 'emailTemplateOid' when calling StorefrontApi->GetEmailTemplate");

            var localVarPath = "/storefront/{storefront_oid}/email/templates/{email_template_oid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (storefrontOid != null) localVarPathParams.Add("storefront_oid", this.Configuration.ApiClient.ParameterToString(storefrontOid)); // path parameter
            if (emailTemplateOid != null) localVarPathParams.Add("email_template_oid", this.Configuration.ApiClient.ParameterToString(emailTemplateOid)); // path parameter

            // authentication (ultraCartBrowserApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key")))
            {
                localVarHeaderParams["x-ultracart-browser-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key");
            }
            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetEmailTemplate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EmailTemplate>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (EmailTemplate) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EmailTemplate)));
        }

        /// <summary>
        /// Get email templates 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="triggerType"> (optional)</param>
        /// <returns>EmailTemplatesResponse</returns>
        public EmailTemplatesResponse GetEmailTemplates (int? storefrontOid, string triggerType = null)
        {
             ApiResponse<EmailTemplatesResponse> localVarResponse = GetEmailTemplatesWithHttpInfo(storefrontOid, triggerType);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get email templates 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="triggerType"> (optional)</param>
        /// <returns>ApiResponse of EmailTemplatesResponse</returns>
        public ApiResponse< EmailTemplatesResponse > GetEmailTemplatesWithHttpInfo (int? storefrontOid, string triggerType = null)
        {
            // verify the required parameter 'storefrontOid' is set
            if (storefrontOid == null)
                throw new ApiException(400, "Missing required parameter 'storefrontOid' when calling StorefrontApi->GetEmailTemplates");

            var localVarPath = "/storefront/{storefront_oid}/email/templates";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (storefrontOid != null) localVarPathParams.Add("storefront_oid", this.Configuration.ApiClient.ParameterToString(storefrontOid)); // path parameter
            if (triggerType != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "trigger_type", triggerType)); // query parameter

            // authentication (ultraCartBrowserApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key")))
            {
                localVarHeaderParams["x-ultracart-browser-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key");
            }
            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetEmailTemplates", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EmailTemplatesResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (EmailTemplatesResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EmailTemplatesResponse)));
        }

        /// <summary>
        /// Get email templates 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="triggerType"> (optional)</param>
        /// <returns>Task of EmailTemplatesResponse</returns>
        public async System.Threading.Tasks.Task<EmailTemplatesResponse> GetEmailTemplatesAsync (int? storefrontOid, string triggerType = null)
        {
             ApiResponse<EmailTemplatesResponse> localVarResponse = await GetEmailTemplatesAsyncWithHttpInfo(storefrontOid, triggerType);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get email templates 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="triggerType"> (optional)</param>
        /// <returns>Task of ApiResponse (EmailTemplatesResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<EmailTemplatesResponse>> GetEmailTemplatesAsyncWithHttpInfo (int? storefrontOid, string triggerType = null)
        {
            // verify the required parameter 'storefrontOid' is set
            if (storefrontOid == null)
                throw new ApiException(400, "Missing required parameter 'storefrontOid' when calling StorefrontApi->GetEmailTemplates");

            var localVarPath = "/storefront/{storefront_oid}/email/templates";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (storefrontOid != null) localVarPathParams.Add("storefront_oid", this.Configuration.ApiClient.ParameterToString(storefrontOid)); // path parameter
            if (triggerType != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "trigger_type", triggerType)); // query parameter

            // authentication (ultraCartBrowserApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key")))
            {
                localVarHeaderParams["x-ultracart-browser-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key");
            }
            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetEmailTemplates", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EmailTemplatesResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (EmailTemplatesResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EmailTemplatesResponse)));
        }

        /// <summary>
        /// Get a list of third party email providers 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <returns>EmailThirdPartyProvidersResponse</returns>
        public EmailThirdPartyProvidersResponse GetEmailThirdPartyProviders (int? storefrontOid)
        {
             ApiResponse<EmailThirdPartyProvidersResponse> localVarResponse = GetEmailThirdPartyProvidersWithHttpInfo(storefrontOid);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a list of third party email providers 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <returns>ApiResponse of EmailThirdPartyProvidersResponse</returns>
        public ApiResponse< EmailThirdPartyProvidersResponse > GetEmailThirdPartyProvidersWithHttpInfo (int? storefrontOid)
        {
            // verify the required parameter 'storefrontOid' is set
            if (storefrontOid == null)
                throw new ApiException(400, "Missing required parameter 'storefrontOid' when calling StorefrontApi->GetEmailThirdPartyProviders");

            var localVarPath = "/storefront/{storefront_oid}/email/third_party_providers";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (storefrontOid != null) localVarPathParams.Add("storefront_oid", this.Configuration.ApiClient.ParameterToString(storefrontOid)); // path parameter

            // authentication (ultraCartBrowserApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key")))
            {
                localVarHeaderParams["x-ultracart-browser-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key");
            }
            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetEmailThirdPartyProviders", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EmailThirdPartyProvidersResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (EmailThirdPartyProvidersResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EmailThirdPartyProvidersResponse)));
        }

        /// <summary>
        /// Get a list of third party email providers 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <returns>Task of EmailThirdPartyProvidersResponse</returns>
        public async System.Threading.Tasks.Task<EmailThirdPartyProvidersResponse> GetEmailThirdPartyProvidersAsync (int? storefrontOid)
        {
             ApiResponse<EmailThirdPartyProvidersResponse> localVarResponse = await GetEmailThirdPartyProvidersAsyncWithHttpInfo(storefrontOid);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a list of third party email providers 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <returns>Task of ApiResponse (EmailThirdPartyProvidersResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<EmailThirdPartyProvidersResponse>> GetEmailThirdPartyProvidersAsyncWithHttpInfo (int? storefrontOid)
        {
            // verify the required parameter 'storefrontOid' is set
            if (storefrontOid == null)
                throw new ApiException(400, "Missing required parameter 'storefrontOid' when calling StorefrontApi->GetEmailThirdPartyProviders");

            var localVarPath = "/storefront/{storefront_oid}/email/third_party_providers";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (storefrontOid != null) localVarPathParams.Add("storefront_oid", this.Configuration.ApiClient.ParameterToString(storefrontOid)); // path parameter

            // authentication (ultraCartBrowserApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key")))
            {
                localVarHeaderParams["x-ultracart-browser-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key");
            }
            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetEmailThirdPartyProviders", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EmailThirdPartyProvidersResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (EmailThirdPartyProvidersResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EmailThirdPartyProvidersResponse)));
        }

        /// <summary>
        /// Get experiments 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <returns>ExperimentsResponse</returns>
        public ExperimentsResponse GetExperiments (int? storefrontOid)
        {
             ApiResponse<ExperimentsResponse> localVarResponse = GetExperimentsWithHttpInfo(storefrontOid);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get experiments 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <returns>ApiResponse of ExperimentsResponse</returns>
        public ApiResponse< ExperimentsResponse > GetExperimentsWithHttpInfo (int? storefrontOid)
        {
            // verify the required parameter 'storefrontOid' is set
            if (storefrontOid == null)
                throw new ApiException(400, "Missing required parameter 'storefrontOid' when calling StorefrontApi->GetExperiments");

            var localVarPath = "/storefront/{storefront_oid}/experiments";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (storefrontOid != null) localVarPathParams.Add("storefront_oid", this.Configuration.ApiClient.ParameterToString(storefrontOid)); // path parameter

            // authentication (ultraCartBrowserApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key")))
            {
                localVarHeaderParams["x-ultracart-browser-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key");
            }
            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetExperiments", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ExperimentsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ExperimentsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ExperimentsResponse)));
        }

        /// <summary>
        /// Get experiments 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <returns>Task of ExperimentsResponse</returns>
        public async System.Threading.Tasks.Task<ExperimentsResponse> GetExperimentsAsync (int? storefrontOid)
        {
             ApiResponse<ExperimentsResponse> localVarResponse = await GetExperimentsAsyncWithHttpInfo(storefrontOid);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get experiments 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <returns>Task of ApiResponse (ExperimentsResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ExperimentsResponse>> GetExperimentsAsyncWithHttpInfo (int? storefrontOid)
        {
            // verify the required parameter 'storefrontOid' is set
            if (storefrontOid == null)
                throw new ApiException(400, "Missing required parameter 'storefrontOid' when calling StorefrontApi->GetExperiments");

            var localVarPath = "/storefront/{storefront_oid}/experiments";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (storefrontOid != null) localVarPathParams.Add("storefront_oid", this.Configuration.ApiClient.ParameterToString(storefrontOid)); // path parameter

            // authentication (ultraCartBrowserApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key")))
            {
                localVarHeaderParams["x-ultracart-browser-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key");
            }
            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetExperiments", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ExperimentsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ExperimentsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ExperimentsResponse)));
        }

        /// <summary>
        /// Get screen recording heatmap Get screen recording heatmap 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="query">Query</param>
        /// <returns>ScreenRecordingHeatmapResponse</returns>
        public ScreenRecordingHeatmapResponse GetHeatmap (int? storefrontOid, ScreenRecordingHeatmapRequest query)
        {
             ApiResponse<ScreenRecordingHeatmapResponse> localVarResponse = GetHeatmapWithHttpInfo(storefrontOid, query);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get screen recording heatmap Get screen recording heatmap 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="query">Query</param>
        /// <returns>ApiResponse of ScreenRecordingHeatmapResponse</returns>
        public ApiResponse< ScreenRecordingHeatmapResponse > GetHeatmapWithHttpInfo (int? storefrontOid, ScreenRecordingHeatmapRequest query)
        {
            // verify the required parameter 'storefrontOid' is set
            if (storefrontOid == null)
                throw new ApiException(400, "Missing required parameter 'storefrontOid' when calling StorefrontApi->GetHeatmap");
            // verify the required parameter 'query' is set
            if (query == null)
                throw new ApiException(400, "Missing required parameter 'query' when calling StorefrontApi->GetHeatmap");

            var localVarPath = "/storefront/{storefront_oid}/screen_recordings/heatmap";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (storefrontOid != null) localVarPathParams.Add("storefront_oid", this.Configuration.ApiClient.ParameterToString(storefrontOid)); // path parameter
            if (query != null && query.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(query); // http body (model) parameter
            }
            else
            {
                localVarPostBody = query; // byte array
            }

            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetHeatmap", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ScreenRecordingHeatmapResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ScreenRecordingHeatmapResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ScreenRecordingHeatmapResponse)));
        }

        /// <summary>
        /// Get screen recording heatmap Get screen recording heatmap 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="query">Query</param>
        /// <returns>Task of ScreenRecordingHeatmapResponse</returns>
        public async System.Threading.Tasks.Task<ScreenRecordingHeatmapResponse> GetHeatmapAsync (int? storefrontOid, ScreenRecordingHeatmapRequest query)
        {
             ApiResponse<ScreenRecordingHeatmapResponse> localVarResponse = await GetHeatmapAsyncWithHttpInfo(storefrontOid, query);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get screen recording heatmap Get screen recording heatmap 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="query">Query</param>
        /// <returns>Task of ApiResponse (ScreenRecordingHeatmapResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ScreenRecordingHeatmapResponse>> GetHeatmapAsyncWithHttpInfo (int? storefrontOid, ScreenRecordingHeatmapRequest query)
        {
            // verify the required parameter 'storefrontOid' is set
            if (storefrontOid == null)
                throw new ApiException(400, "Missing required parameter 'storefrontOid' when calling StorefrontApi->GetHeatmap");
            // verify the required parameter 'query' is set
            if (query == null)
                throw new ApiException(400, "Missing required parameter 'query' when calling StorefrontApi->GetHeatmap");

            var localVarPath = "/storefront/{storefront_oid}/screen_recordings/heatmap";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (storefrontOid != null) localVarPathParams.Add("storefront_oid", this.Configuration.ApiClient.ParameterToString(storefrontOid)); // path parameter
            if (query != null && query.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(query); // http body (model) parameter
            }
            else
            {
                localVarPostBody = query; // byte array
            }

            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetHeatmap", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ScreenRecordingHeatmapResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ScreenRecordingHeatmapResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ScreenRecordingHeatmapResponse)));
        }

        /// <summary>
        /// Get screen recording heatmap index Get screen recording heatmap index 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="query">Query</param>
        /// <param name="limit">The maximum number of records to return on this one API call. (Default 100, Max 500) (optional, default to 100)</param>
        /// <param name="offset">Pagination of the record set.  Offset is a zero based index. (optional, default to 0)</param>
        /// <param name="sort">The sort order of the items.  See Sorting documentation for examples of using multiple values and sorting by ascending and descending. (optional)</param>
        /// <returns>ScreenRecordingHeatmapIndexResponse</returns>
        public ScreenRecordingHeatmapIndexResponse GetHeatmapIndex (int? storefrontOid, ScreenRecordingHeatmapIndexRequest query, int? limit = null, int? offset = null, string sort = null)
        {
             ApiResponse<ScreenRecordingHeatmapIndexResponse> localVarResponse = GetHeatmapIndexWithHttpInfo(storefrontOid, query, limit, offset, sort);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get screen recording heatmap index Get screen recording heatmap index 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="query">Query</param>
        /// <param name="limit">The maximum number of records to return on this one API call. (Default 100, Max 500) (optional, default to 100)</param>
        /// <param name="offset">Pagination of the record set.  Offset is a zero based index. (optional, default to 0)</param>
        /// <param name="sort">The sort order of the items.  See Sorting documentation for examples of using multiple values and sorting by ascending and descending. (optional)</param>
        /// <returns>ApiResponse of ScreenRecordingHeatmapIndexResponse</returns>
        public ApiResponse< ScreenRecordingHeatmapIndexResponse > GetHeatmapIndexWithHttpInfo (int? storefrontOid, ScreenRecordingHeatmapIndexRequest query, int? limit = null, int? offset = null, string sort = null)
        {
            // verify the required parameter 'storefrontOid' is set
            if (storefrontOid == null)
                throw new ApiException(400, "Missing required parameter 'storefrontOid' when calling StorefrontApi->GetHeatmapIndex");
            // verify the required parameter 'query' is set
            if (query == null)
                throw new ApiException(400, "Missing required parameter 'query' when calling StorefrontApi->GetHeatmapIndex");

            var localVarPath = "/storefront/{storefront_oid}/screen_recordings/heatmap/index";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (storefrontOid != null) localVarPathParams.Add("storefront_oid", this.Configuration.ApiClient.ParameterToString(storefrontOid)); // path parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "_limit", limit)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "_offset", offset)); // query parameter
            if (sort != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "_sort", sort)); // query parameter
            if (query != null && query.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(query); // http body (model) parameter
            }
            else
            {
                localVarPostBody = query; // byte array
            }

            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetHeatmapIndex", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ScreenRecordingHeatmapIndexResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ScreenRecordingHeatmapIndexResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ScreenRecordingHeatmapIndexResponse)));
        }

        /// <summary>
        /// Get screen recording heatmap index Get screen recording heatmap index 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="query">Query</param>
        /// <param name="limit">The maximum number of records to return on this one API call. (Default 100, Max 500) (optional, default to 100)</param>
        /// <param name="offset">Pagination of the record set.  Offset is a zero based index. (optional, default to 0)</param>
        /// <param name="sort">The sort order of the items.  See Sorting documentation for examples of using multiple values and sorting by ascending and descending. (optional)</param>
        /// <returns>Task of ScreenRecordingHeatmapIndexResponse</returns>
        public async System.Threading.Tasks.Task<ScreenRecordingHeatmapIndexResponse> GetHeatmapIndexAsync (int? storefrontOid, ScreenRecordingHeatmapIndexRequest query, int? limit = null, int? offset = null, string sort = null)
        {
             ApiResponse<ScreenRecordingHeatmapIndexResponse> localVarResponse = await GetHeatmapIndexAsyncWithHttpInfo(storefrontOid, query, limit, offset, sort);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get screen recording heatmap index Get screen recording heatmap index 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="query">Query</param>
        /// <param name="limit">The maximum number of records to return on this one API call. (Default 100, Max 500) (optional, default to 100)</param>
        /// <param name="offset">Pagination of the record set.  Offset is a zero based index. (optional, default to 0)</param>
        /// <param name="sort">The sort order of the items.  See Sorting documentation for examples of using multiple values and sorting by ascending and descending. (optional)</param>
        /// <returns>Task of ApiResponse (ScreenRecordingHeatmapIndexResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ScreenRecordingHeatmapIndexResponse>> GetHeatmapIndexAsyncWithHttpInfo (int? storefrontOid, ScreenRecordingHeatmapIndexRequest query, int? limit = null, int? offset = null, string sort = null)
        {
            // verify the required parameter 'storefrontOid' is set
            if (storefrontOid == null)
                throw new ApiException(400, "Missing required parameter 'storefrontOid' when calling StorefrontApi->GetHeatmapIndex");
            // verify the required parameter 'query' is set
            if (query == null)
                throw new ApiException(400, "Missing required parameter 'query' when calling StorefrontApi->GetHeatmapIndex");

            var localVarPath = "/storefront/{storefront_oid}/screen_recordings/heatmap/index";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (storefrontOid != null) localVarPathParams.Add("storefront_oid", this.Configuration.ApiClient.ParameterToString(storefrontOid)); // path parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "_limit", limit)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "_offset", offset)); // query parameter
            if (sort != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "_sort", sort)); // query parameter
            if (query != null && query.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(query); // http body (model) parameter
            }
            else
            {
                localVarPostBody = query; // byte array
            }

            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetHeatmapIndex", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ScreenRecordingHeatmapIndexResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ScreenRecordingHeatmapIndexResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ScreenRecordingHeatmapIndexResponse)));
        }

        /// <summary>
        /// Get histogram property names Obtain a list of property names for a given property type 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="propertyType"> (optional)</param>
        /// <returns>EmailHistogramPropertyNamesResponse</returns>
        public EmailHistogramPropertyNamesResponse GetHistogramPropertyNames (int? storefrontOid, string propertyType = null)
        {
             ApiResponse<EmailHistogramPropertyNamesResponse> localVarResponse = GetHistogramPropertyNamesWithHttpInfo(storefrontOid, propertyType);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get histogram property names Obtain a list of property names for a given property type 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="propertyType"> (optional)</param>
        /// <returns>ApiResponse of EmailHistogramPropertyNamesResponse</returns>
        public ApiResponse< EmailHistogramPropertyNamesResponse > GetHistogramPropertyNamesWithHttpInfo (int? storefrontOid, string propertyType = null)
        {
            // verify the required parameter 'storefrontOid' is set
            if (storefrontOid == null)
                throw new ApiException(400, "Missing required parameter 'storefrontOid' when calling StorefrontApi->GetHistogramPropertyNames");

            var localVarPath = "/storefront/{storefront_oid}/email/histogram/property_names";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (storefrontOid != null) localVarPathParams.Add("storefront_oid", this.Configuration.ApiClient.ParameterToString(storefrontOid)); // path parameter
            if (propertyType != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "property_type", propertyType)); // query parameter

            // authentication (ultraCartBrowserApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key")))
            {
                localVarHeaderParams["x-ultracart-browser-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key");
            }
            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetHistogramPropertyNames", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EmailHistogramPropertyNamesResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (EmailHistogramPropertyNamesResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EmailHistogramPropertyNamesResponse)));
        }

        /// <summary>
        /// Get histogram property names Obtain a list of property names for a given property type 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="propertyType"> (optional)</param>
        /// <returns>Task of EmailHistogramPropertyNamesResponse</returns>
        public async System.Threading.Tasks.Task<EmailHistogramPropertyNamesResponse> GetHistogramPropertyNamesAsync (int? storefrontOid, string propertyType = null)
        {
             ApiResponse<EmailHistogramPropertyNamesResponse> localVarResponse = await GetHistogramPropertyNamesAsyncWithHttpInfo(storefrontOid, propertyType);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get histogram property names Obtain a list of property names for a given property type 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="propertyType"> (optional)</param>
        /// <returns>Task of ApiResponse (EmailHistogramPropertyNamesResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<EmailHistogramPropertyNamesResponse>> GetHistogramPropertyNamesAsyncWithHttpInfo (int? storefrontOid, string propertyType = null)
        {
            // verify the required parameter 'storefrontOid' is set
            if (storefrontOid == null)
                throw new ApiException(400, "Missing required parameter 'storefrontOid' when calling StorefrontApi->GetHistogramPropertyNames");

            var localVarPath = "/storefront/{storefront_oid}/email/histogram/property_names";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (storefrontOid != null) localVarPathParams.Add("storefront_oid", this.Configuration.ApiClient.ParameterToString(storefrontOid)); // path parameter
            if (propertyType != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "property_type", propertyType)); // query parameter

            // authentication (ultraCartBrowserApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key")))
            {
                localVarHeaderParams["x-ultracart-browser-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key");
            }
            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetHistogramPropertyNames", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EmailHistogramPropertyNamesResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (EmailHistogramPropertyNamesResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EmailHistogramPropertyNamesResponse)));
        }

        /// <summary>
        /// Get histogram property values Obtain a list of property values for a given property name and type 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="propertyName"> (optional)</param>
        /// <param name="propertyType"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <returns>EmailHistogramPropertyValuesResponse</returns>
        public EmailHistogramPropertyValuesResponse GetHistogramPropertyValues (int? storefrontOid, string propertyName = null, string propertyType = null, int? limit = null)
        {
             ApiResponse<EmailHistogramPropertyValuesResponse> localVarResponse = GetHistogramPropertyValuesWithHttpInfo(storefrontOid, propertyName, propertyType, limit);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get histogram property values Obtain a list of property values for a given property name and type 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="propertyName"> (optional)</param>
        /// <param name="propertyType"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <returns>ApiResponse of EmailHistogramPropertyValuesResponse</returns>
        public ApiResponse< EmailHistogramPropertyValuesResponse > GetHistogramPropertyValuesWithHttpInfo (int? storefrontOid, string propertyName = null, string propertyType = null, int? limit = null)
        {
            // verify the required parameter 'storefrontOid' is set
            if (storefrontOid == null)
                throw new ApiException(400, "Missing required parameter 'storefrontOid' when calling StorefrontApi->GetHistogramPropertyValues");

            var localVarPath = "/storefront/{storefront_oid}/email/histogram/property_values";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (storefrontOid != null) localVarPathParams.Add("storefront_oid", this.Configuration.ApiClient.ParameterToString(storefrontOid)); // path parameter
            if (propertyName != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "property_name", propertyName)); // query parameter
            if (propertyType != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "property_type", propertyType)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter

            // authentication (ultraCartBrowserApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key")))
            {
                localVarHeaderParams["x-ultracart-browser-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key");
            }
            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetHistogramPropertyValues", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EmailHistogramPropertyValuesResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (EmailHistogramPropertyValuesResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EmailHistogramPropertyValuesResponse)));
        }

        /// <summary>
        /// Get histogram property values Obtain a list of property values for a given property name and type 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="propertyName"> (optional)</param>
        /// <param name="propertyType"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <returns>Task of EmailHistogramPropertyValuesResponse</returns>
        public async System.Threading.Tasks.Task<EmailHistogramPropertyValuesResponse> GetHistogramPropertyValuesAsync (int? storefrontOid, string propertyName = null, string propertyType = null, int? limit = null)
        {
             ApiResponse<EmailHistogramPropertyValuesResponse> localVarResponse = await GetHistogramPropertyValuesAsyncWithHttpInfo(storefrontOid, propertyName, propertyType, limit);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get histogram property values Obtain a list of property values for a given property name and type 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="propertyName"> (optional)</param>
        /// <param name="propertyType"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <returns>Task of ApiResponse (EmailHistogramPropertyValuesResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<EmailHistogramPropertyValuesResponse>> GetHistogramPropertyValuesAsyncWithHttpInfo (int? storefrontOid, string propertyName = null, string propertyType = null, int? limit = null)
        {
            // verify the required parameter 'storefrontOid' is set
            if (storefrontOid == null)
                throw new ApiException(400, "Missing required parameter 'storefrontOid' when calling StorefrontApi->GetHistogramPropertyValues");

            var localVarPath = "/storefront/{storefront_oid}/email/histogram/property_values";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (storefrontOid != null) localVarPathParams.Add("storefront_oid", this.Configuration.ApiClient.ParameterToString(storefrontOid)); // path parameter
            if (propertyName != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "property_name", propertyName)); // query parameter
            if (propertyType != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "property_type", propertyType)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter

            // authentication (ultraCartBrowserApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key")))
            {
                localVarHeaderParams["x-ultracart-browser-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key");
            }
            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetHistogramPropertyValues", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EmailHistogramPropertyValuesResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (EmailHistogramPropertyValuesResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EmailHistogramPropertyValuesResponse)));
        }

        /// <summary>
        /// Get library values used to populate drop down boxes for filtering. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>LibraryFilterValuesResponse</returns>
        public LibraryFilterValuesResponse GetLibraryFilterValues ()
        {
             ApiResponse<LibraryFilterValuesResponse> localVarResponse = GetLibraryFilterValuesWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get library values used to populate drop down boxes for filtering. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of LibraryFilterValuesResponse</returns>
        public ApiResponse< LibraryFilterValuesResponse > GetLibraryFilterValuesWithHttpInfo ()
        {

            var localVarPath = "/storefront/code_library/filter_values";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (ultraCartBrowserApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key")))
            {
                localVarHeaderParams["x-ultracart-browser-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key");
            }
            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetLibraryFilterValues", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<LibraryFilterValuesResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (LibraryFilterValuesResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(LibraryFilterValuesResponse)));
        }

        /// <summary>
        /// Get library values used to populate drop down boxes for filtering. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of LibraryFilterValuesResponse</returns>
        public async System.Threading.Tasks.Task<LibraryFilterValuesResponse> GetLibraryFilterValuesAsync ()
        {
             ApiResponse<LibraryFilterValuesResponse> localVarResponse = await GetLibraryFilterValuesAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get library values used to populate drop down boxes for filtering. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (LibraryFilterValuesResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<LibraryFilterValuesResponse>> GetLibraryFilterValuesAsyncWithHttpInfo ()
        {

            var localVarPath = "/storefront/code_library/filter_values";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (ultraCartBrowserApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key")))
            {
                localVarHeaderParams["x-ultracart-browser-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key");
            }
            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetLibraryFilterValues", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<LibraryFilterValuesResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (LibraryFilterValuesResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(LibraryFilterValuesResponse)));
        }

        /// <summary>
        /// Get library item. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="libraryItemOid"></param>
        /// <returns>LibraryItemResponse</returns>
        public LibraryItemResponse GetLibraryItem (int? libraryItemOid)
        {
             ApiResponse<LibraryItemResponse> localVarResponse = GetLibraryItemWithHttpInfo(libraryItemOid);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get library item. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="libraryItemOid"></param>
        /// <returns>ApiResponse of LibraryItemResponse</returns>
        public ApiResponse< LibraryItemResponse > GetLibraryItemWithHttpInfo (int? libraryItemOid)
        {
            // verify the required parameter 'libraryItemOid' is set
            if (libraryItemOid == null)
                throw new ApiException(400, "Missing required parameter 'libraryItemOid' when calling StorefrontApi->GetLibraryItem");

            var localVarPath = "/storefront/code_library/{library_item_oid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (libraryItemOid != null) localVarPathParams.Add("library_item_oid", this.Configuration.ApiClient.ParameterToString(libraryItemOid)); // path parameter

            // authentication (ultraCartBrowserApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key")))
            {
                localVarHeaderParams["x-ultracart-browser-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key");
            }
            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetLibraryItem", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<LibraryItemResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (LibraryItemResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(LibraryItemResponse)));
        }

        /// <summary>
        /// Get library item. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="libraryItemOid"></param>
        /// <returns>Task of LibraryItemResponse</returns>
        public async System.Threading.Tasks.Task<LibraryItemResponse> GetLibraryItemAsync (int? libraryItemOid)
        {
             ApiResponse<LibraryItemResponse> localVarResponse = await GetLibraryItemAsyncWithHttpInfo(libraryItemOid);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get library item. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="libraryItemOid"></param>
        /// <returns>Task of ApiResponse (LibraryItemResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<LibraryItemResponse>> GetLibraryItemAsyncWithHttpInfo (int? libraryItemOid)
        {
            // verify the required parameter 'libraryItemOid' is set
            if (libraryItemOid == null)
                throw new ApiException(400, "Missing required parameter 'libraryItemOid' when calling StorefrontApi->GetLibraryItem");

            var localVarPath = "/storefront/code_library/{library_item_oid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (libraryItemOid != null) localVarPathParams.Add("library_item_oid", this.Configuration.ApiClient.ParameterToString(libraryItemOid)); // path parameter

            // authentication (ultraCartBrowserApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key")))
            {
                localVarHeaderParams["x-ultracart-browser-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key");
            }
            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetLibraryItem", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<LibraryItemResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (LibraryItemResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(LibraryItemResponse)));
        }

        /// <summary>
        /// Get all published versions for a library item. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="libraryItemOid"></param>
        /// <returns>LibraryItemsResponse</returns>
        public LibraryItemsResponse GetLibraryItemPublishedVersions (int? libraryItemOid)
        {
             ApiResponse<LibraryItemsResponse> localVarResponse = GetLibraryItemPublishedVersionsWithHttpInfo(libraryItemOid);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get all published versions for a library item. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="libraryItemOid"></param>
        /// <returns>ApiResponse of LibraryItemsResponse</returns>
        public ApiResponse< LibraryItemsResponse > GetLibraryItemPublishedVersionsWithHttpInfo (int? libraryItemOid)
        {
            // verify the required parameter 'libraryItemOid' is set
            if (libraryItemOid == null)
                throw new ApiException(400, "Missing required parameter 'libraryItemOid' when calling StorefrontApi->GetLibraryItemPublishedVersions");

            var localVarPath = "/storefront/code_library/{library_item_oid}/published_versions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (libraryItemOid != null) localVarPathParams.Add("library_item_oid", this.Configuration.ApiClient.ParameterToString(libraryItemOid)); // path parameter

            // authentication (ultraCartBrowserApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key")))
            {
                localVarHeaderParams["x-ultracart-browser-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key");
            }
            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetLibraryItemPublishedVersions", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<LibraryItemsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (LibraryItemsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(LibraryItemsResponse)));
        }

        /// <summary>
        /// Get all published versions for a library item. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="libraryItemOid"></param>
        /// <returns>Task of LibraryItemsResponse</returns>
        public async System.Threading.Tasks.Task<LibraryItemsResponse> GetLibraryItemPublishedVersionsAsync (int? libraryItemOid)
        {
             ApiResponse<LibraryItemsResponse> localVarResponse = await GetLibraryItemPublishedVersionsAsyncWithHttpInfo(libraryItemOid);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get all published versions for a library item. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="libraryItemOid"></param>
        /// <returns>Task of ApiResponse (LibraryItemsResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<LibraryItemsResponse>> GetLibraryItemPublishedVersionsAsyncWithHttpInfo (int? libraryItemOid)
        {
            // verify the required parameter 'libraryItemOid' is set
            if (libraryItemOid == null)
                throw new ApiException(400, "Missing required parameter 'libraryItemOid' when calling StorefrontApi->GetLibraryItemPublishedVersions");

            var localVarPath = "/storefront/code_library/{library_item_oid}/published_versions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (libraryItemOid != null) localVarPathParams.Add("library_item_oid", this.Configuration.ApiClient.ParameterToString(libraryItemOid)); // path parameter

            // authentication (ultraCartBrowserApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key")))
            {
                localVarHeaderParams["x-ultracart-browser-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key");
            }
            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetLibraryItemPublishedVersions", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<LibraryItemsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (LibraryItemsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(LibraryItemsResponse)));
        }

        /// <summary>
        /// Get screen recording Get screen recording 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="screenRecordingUuid"></param>
        /// <returns>ScreenRecordingResponse</returns>
        public ScreenRecordingResponse GetScreenRecording (int? storefrontOid, string screenRecordingUuid)
        {
             ApiResponse<ScreenRecordingResponse> localVarResponse = GetScreenRecordingWithHttpInfo(storefrontOid, screenRecordingUuid);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get screen recording Get screen recording 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="screenRecordingUuid"></param>
        /// <returns>ApiResponse of ScreenRecordingResponse</returns>
        public ApiResponse< ScreenRecordingResponse > GetScreenRecordingWithHttpInfo (int? storefrontOid, string screenRecordingUuid)
        {
            // verify the required parameter 'storefrontOid' is set
            if (storefrontOid == null)
                throw new ApiException(400, "Missing required parameter 'storefrontOid' when calling StorefrontApi->GetScreenRecording");
            // verify the required parameter 'screenRecordingUuid' is set
            if (screenRecordingUuid == null)
                throw new ApiException(400, "Missing required parameter 'screenRecordingUuid' when calling StorefrontApi->GetScreenRecording");

            var localVarPath = "/storefront/{storefront_oid}/screen_recordings/{screen_recording_uuid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (storefrontOid != null) localVarPathParams.Add("storefront_oid", this.Configuration.ApiClient.ParameterToString(storefrontOid)); // path parameter
            if (screenRecordingUuid != null) localVarPathParams.Add("screen_recording_uuid", this.Configuration.ApiClient.ParameterToString(screenRecordingUuid)); // path parameter

            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetScreenRecording", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ScreenRecordingResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ScreenRecordingResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ScreenRecordingResponse)));
        }

        /// <summary>
        /// Get screen recording Get screen recording 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="screenRecordingUuid"></param>
        /// <returns>Task of ScreenRecordingResponse</returns>
        public async System.Threading.Tasks.Task<ScreenRecordingResponse> GetScreenRecordingAsync (int? storefrontOid, string screenRecordingUuid)
        {
             ApiResponse<ScreenRecordingResponse> localVarResponse = await GetScreenRecordingAsyncWithHttpInfo(storefrontOid, screenRecordingUuid);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get screen recording Get screen recording 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="screenRecordingUuid"></param>
        /// <returns>Task of ApiResponse (ScreenRecordingResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ScreenRecordingResponse>> GetScreenRecordingAsyncWithHttpInfo (int? storefrontOid, string screenRecordingUuid)
        {
            // verify the required parameter 'storefrontOid' is set
            if (storefrontOid == null)
                throw new ApiException(400, "Missing required parameter 'storefrontOid' when calling StorefrontApi->GetScreenRecording");
            // verify the required parameter 'screenRecordingUuid' is set
            if (screenRecordingUuid == null)
                throw new ApiException(400, "Missing required parameter 'screenRecordingUuid' when calling StorefrontApi->GetScreenRecording");

            var localVarPath = "/storefront/{storefront_oid}/screen_recordings/{screen_recording_uuid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (storefrontOid != null) localVarPathParams.Add("storefront_oid", this.Configuration.ApiClient.ParameterToString(storefrontOid)); // path parameter
            if (screenRecordingUuid != null) localVarPathParams.Add("screen_recording_uuid", this.Configuration.ApiClient.ParameterToString(screenRecordingUuid)); // path parameter

            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetScreenRecording", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ScreenRecordingResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ScreenRecordingResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ScreenRecordingResponse)));
        }

        /// <summary>
        /// Get screen recording page view data Get screen recording page view data 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="screenRecordingUuid"></param>
        /// <param name="screenRecordingPageViewUuid"></param>
        /// <returns>ScreenRecordingPageViewDataResponse</returns>
        public ScreenRecordingPageViewDataResponse GetScreenRecordingPageViewData (int? storefrontOid, string screenRecordingUuid, string screenRecordingPageViewUuid)
        {
             ApiResponse<ScreenRecordingPageViewDataResponse> localVarResponse = GetScreenRecordingPageViewDataWithHttpInfo(storefrontOid, screenRecordingUuid, screenRecordingPageViewUuid);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get screen recording page view data Get screen recording page view data 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="screenRecordingUuid"></param>
        /// <param name="screenRecordingPageViewUuid"></param>
        /// <returns>ApiResponse of ScreenRecordingPageViewDataResponse</returns>
        public ApiResponse< ScreenRecordingPageViewDataResponse > GetScreenRecordingPageViewDataWithHttpInfo (int? storefrontOid, string screenRecordingUuid, string screenRecordingPageViewUuid)
        {
            // verify the required parameter 'storefrontOid' is set
            if (storefrontOid == null)
                throw new ApiException(400, "Missing required parameter 'storefrontOid' when calling StorefrontApi->GetScreenRecordingPageViewData");
            // verify the required parameter 'screenRecordingUuid' is set
            if (screenRecordingUuid == null)
                throw new ApiException(400, "Missing required parameter 'screenRecordingUuid' when calling StorefrontApi->GetScreenRecordingPageViewData");
            // verify the required parameter 'screenRecordingPageViewUuid' is set
            if (screenRecordingPageViewUuid == null)
                throw new ApiException(400, "Missing required parameter 'screenRecordingPageViewUuid' when calling StorefrontApi->GetScreenRecordingPageViewData");

            var localVarPath = "/storefront/{storefront_oid}/screen_recordings/{screen_recording_uuid}/page_view_data/{screen_recording_page_view_uuid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (storefrontOid != null) localVarPathParams.Add("storefront_oid", this.Configuration.ApiClient.ParameterToString(storefrontOid)); // path parameter
            if (screenRecordingUuid != null) localVarPathParams.Add("screen_recording_uuid", this.Configuration.ApiClient.ParameterToString(screenRecordingUuid)); // path parameter
            if (screenRecordingPageViewUuid != null) localVarPathParams.Add("screen_recording_page_view_uuid", this.Configuration.ApiClient.ParameterToString(screenRecordingPageViewUuid)); // path parameter

            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetScreenRecordingPageViewData", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ScreenRecordingPageViewDataResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ScreenRecordingPageViewDataResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ScreenRecordingPageViewDataResponse)));
        }

        /// <summary>
        /// Get screen recording page view data Get screen recording page view data 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="screenRecordingUuid"></param>
        /// <param name="screenRecordingPageViewUuid"></param>
        /// <returns>Task of ScreenRecordingPageViewDataResponse</returns>
        public async System.Threading.Tasks.Task<ScreenRecordingPageViewDataResponse> GetScreenRecordingPageViewDataAsync (int? storefrontOid, string screenRecordingUuid, string screenRecordingPageViewUuid)
        {
             ApiResponse<ScreenRecordingPageViewDataResponse> localVarResponse = await GetScreenRecordingPageViewDataAsyncWithHttpInfo(storefrontOid, screenRecordingUuid, screenRecordingPageViewUuid);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get screen recording page view data Get screen recording page view data 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="screenRecordingUuid"></param>
        /// <param name="screenRecordingPageViewUuid"></param>
        /// <returns>Task of ApiResponse (ScreenRecordingPageViewDataResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ScreenRecordingPageViewDataResponse>> GetScreenRecordingPageViewDataAsyncWithHttpInfo (int? storefrontOid, string screenRecordingUuid, string screenRecordingPageViewUuid)
        {
            // verify the required parameter 'storefrontOid' is set
            if (storefrontOid == null)
                throw new ApiException(400, "Missing required parameter 'storefrontOid' when calling StorefrontApi->GetScreenRecordingPageViewData");
            // verify the required parameter 'screenRecordingUuid' is set
            if (screenRecordingUuid == null)
                throw new ApiException(400, "Missing required parameter 'screenRecordingUuid' when calling StorefrontApi->GetScreenRecordingPageViewData");
            // verify the required parameter 'screenRecordingPageViewUuid' is set
            if (screenRecordingPageViewUuid == null)
                throw new ApiException(400, "Missing required parameter 'screenRecordingPageViewUuid' when calling StorefrontApi->GetScreenRecordingPageViewData");

            var localVarPath = "/storefront/{storefront_oid}/screen_recordings/{screen_recording_uuid}/page_view_data/{screen_recording_page_view_uuid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (storefrontOid != null) localVarPathParams.Add("storefront_oid", this.Configuration.ApiClient.ParameterToString(storefrontOid)); // path parameter
            if (screenRecordingUuid != null) localVarPathParams.Add("screen_recording_uuid", this.Configuration.ApiClient.ParameterToString(screenRecordingUuid)); // path parameter
            if (screenRecordingPageViewUuid != null) localVarPathParams.Add("screen_recording_page_view_uuid", this.Configuration.ApiClient.ParameterToString(screenRecordingPageViewUuid)); // path parameter

            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetScreenRecordingPageViewData", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ScreenRecordingPageViewDataResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ScreenRecordingPageViewDataResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ScreenRecordingPageViewDataResponse)));
        }

        /// <summary>
        /// Get screen recording segment 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="screenRecordingSegmentOid"></param>
        /// <returns>ScreenRecordingSegmentResponse</returns>
        public ScreenRecordingSegmentResponse GetScreenRecordingSegment (int? storefrontOid, int? screenRecordingSegmentOid)
        {
             ApiResponse<ScreenRecordingSegmentResponse> localVarResponse = GetScreenRecordingSegmentWithHttpInfo(storefrontOid, screenRecordingSegmentOid);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get screen recording segment 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="screenRecordingSegmentOid"></param>
        /// <returns>ApiResponse of ScreenRecordingSegmentResponse</returns>
        public ApiResponse< ScreenRecordingSegmentResponse > GetScreenRecordingSegmentWithHttpInfo (int? storefrontOid, int? screenRecordingSegmentOid)
        {
            // verify the required parameter 'storefrontOid' is set
            if (storefrontOid == null)
                throw new ApiException(400, "Missing required parameter 'storefrontOid' when calling StorefrontApi->GetScreenRecordingSegment");
            // verify the required parameter 'screenRecordingSegmentOid' is set
            if (screenRecordingSegmentOid == null)
                throw new ApiException(400, "Missing required parameter 'screenRecordingSegmentOid' when calling StorefrontApi->GetScreenRecordingSegment");

            var localVarPath = "/storefront/{storefront_oid}/screen_recordings/segments/{screen_recording_segment_oid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (storefrontOid != null) localVarPathParams.Add("storefront_oid", this.Configuration.ApiClient.ParameterToString(storefrontOid)); // path parameter
            if (screenRecordingSegmentOid != null) localVarPathParams.Add("screen_recording_segment_oid", this.Configuration.ApiClient.ParameterToString(screenRecordingSegmentOid)); // path parameter

            // authentication (ultraCartBrowserApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key")))
            {
                localVarHeaderParams["x-ultracart-browser-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key");
            }
            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetScreenRecordingSegment", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ScreenRecordingSegmentResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ScreenRecordingSegmentResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ScreenRecordingSegmentResponse)));
        }

        /// <summary>
        /// Get screen recording segment 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="screenRecordingSegmentOid"></param>
        /// <returns>Task of ScreenRecordingSegmentResponse</returns>
        public async System.Threading.Tasks.Task<ScreenRecordingSegmentResponse> GetScreenRecordingSegmentAsync (int? storefrontOid, int? screenRecordingSegmentOid)
        {
             ApiResponse<ScreenRecordingSegmentResponse> localVarResponse = await GetScreenRecordingSegmentAsyncWithHttpInfo(storefrontOid, screenRecordingSegmentOid);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get screen recording segment 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="screenRecordingSegmentOid"></param>
        /// <returns>Task of ApiResponse (ScreenRecordingSegmentResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ScreenRecordingSegmentResponse>> GetScreenRecordingSegmentAsyncWithHttpInfo (int? storefrontOid, int? screenRecordingSegmentOid)
        {
            // verify the required parameter 'storefrontOid' is set
            if (storefrontOid == null)
                throw new ApiException(400, "Missing required parameter 'storefrontOid' when calling StorefrontApi->GetScreenRecordingSegment");
            // verify the required parameter 'screenRecordingSegmentOid' is set
            if (screenRecordingSegmentOid == null)
                throw new ApiException(400, "Missing required parameter 'screenRecordingSegmentOid' when calling StorefrontApi->GetScreenRecordingSegment");

            var localVarPath = "/storefront/{storefront_oid}/screen_recordings/segments/{screen_recording_segment_oid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (storefrontOid != null) localVarPathParams.Add("storefront_oid", this.Configuration.ApiClient.ParameterToString(storefrontOid)); // path parameter
            if (screenRecordingSegmentOid != null) localVarPathParams.Add("screen_recording_segment_oid", this.Configuration.ApiClient.ParameterToString(screenRecordingSegmentOid)); // path parameter

            // authentication (ultraCartBrowserApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key")))
            {
                localVarHeaderParams["x-ultracart-browser-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key");
            }
            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetScreenRecordingSegment", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ScreenRecordingSegmentResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ScreenRecordingSegmentResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ScreenRecordingSegmentResponse)));
        }

        /// <summary>
        /// Get screen recording segments 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <returns>ScreenRecordingSegmentsResponse</returns>
        public ScreenRecordingSegmentsResponse GetScreenRecordingSegments (int? storefrontOid)
        {
             ApiResponse<ScreenRecordingSegmentsResponse> localVarResponse = GetScreenRecordingSegmentsWithHttpInfo(storefrontOid);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get screen recording segments 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <returns>ApiResponse of ScreenRecordingSegmentsResponse</returns>
        public ApiResponse< ScreenRecordingSegmentsResponse > GetScreenRecordingSegmentsWithHttpInfo (int? storefrontOid)
        {
            // verify the required parameter 'storefrontOid' is set
            if (storefrontOid == null)
                throw new ApiException(400, "Missing required parameter 'storefrontOid' when calling StorefrontApi->GetScreenRecordingSegments");

            var localVarPath = "/storefront/{storefront_oid}/screen_recordings/segments";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (storefrontOid != null) localVarPathParams.Add("storefront_oid", this.Configuration.ApiClient.ParameterToString(storefrontOid)); // path parameter

            // authentication (ultraCartBrowserApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key")))
            {
                localVarHeaderParams["x-ultracart-browser-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key");
            }
            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetScreenRecordingSegments", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ScreenRecordingSegmentsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ScreenRecordingSegmentsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ScreenRecordingSegmentsResponse)));
        }

        /// <summary>
        /// Get screen recording segments 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <returns>Task of ScreenRecordingSegmentsResponse</returns>
        public async System.Threading.Tasks.Task<ScreenRecordingSegmentsResponse> GetScreenRecordingSegmentsAsync (int? storefrontOid)
        {
             ApiResponse<ScreenRecordingSegmentsResponse> localVarResponse = await GetScreenRecordingSegmentsAsyncWithHttpInfo(storefrontOid);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get screen recording segments 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <returns>Task of ApiResponse (ScreenRecordingSegmentsResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ScreenRecordingSegmentsResponse>> GetScreenRecordingSegmentsAsyncWithHttpInfo (int? storefrontOid)
        {
            // verify the required parameter 'storefrontOid' is set
            if (storefrontOid == null)
                throw new ApiException(400, "Missing required parameter 'storefrontOid' when calling StorefrontApi->GetScreenRecordingSegments");

            var localVarPath = "/storefront/{storefront_oid}/screen_recordings/segments";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (storefrontOid != null) localVarPathParams.Add("storefront_oid", this.Configuration.ApiClient.ParameterToString(storefrontOid)); // path parameter

            // authentication (ultraCartBrowserApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key")))
            {
                localVarHeaderParams["x-ultracart-browser-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key");
            }
            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetScreenRecordingSegments", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ScreenRecordingSegmentsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ScreenRecordingSegmentsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ScreenRecordingSegmentsResponse)));
        }

        /// <summary>
        /// Get screen recording settings 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <returns>ScreenRecordingSettingsResponse</returns>
        public ScreenRecordingSettingsResponse GetScreenRecordingSettings (int? storefrontOid)
        {
             ApiResponse<ScreenRecordingSettingsResponse> localVarResponse = GetScreenRecordingSettingsWithHttpInfo(storefrontOid);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get screen recording settings 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <returns>ApiResponse of ScreenRecordingSettingsResponse</returns>
        public ApiResponse< ScreenRecordingSettingsResponse > GetScreenRecordingSettingsWithHttpInfo (int? storefrontOid)
        {
            // verify the required parameter 'storefrontOid' is set
            if (storefrontOid == null)
                throw new ApiException(400, "Missing required parameter 'storefrontOid' when calling StorefrontApi->GetScreenRecordingSettings");

            var localVarPath = "/storefront/{storefront_oid}/screen_recordings/settings";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (storefrontOid != null) localVarPathParams.Add("storefront_oid", this.Configuration.ApiClient.ParameterToString(storefrontOid)); // path parameter

            // authentication (ultraCartBrowserApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key")))
            {
                localVarHeaderParams["x-ultracart-browser-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key");
            }
            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetScreenRecordingSettings", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ScreenRecordingSettingsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ScreenRecordingSettingsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ScreenRecordingSettingsResponse)));
        }

        /// <summary>
        /// Get screen recording settings 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <returns>Task of ScreenRecordingSettingsResponse</returns>
        public async System.Threading.Tasks.Task<ScreenRecordingSettingsResponse> GetScreenRecordingSettingsAsync (int? storefrontOid)
        {
             ApiResponse<ScreenRecordingSettingsResponse> localVarResponse = await GetScreenRecordingSettingsAsyncWithHttpInfo(storefrontOid);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get screen recording settings 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <returns>Task of ApiResponse (ScreenRecordingSettingsResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ScreenRecordingSettingsResponse>> GetScreenRecordingSettingsAsyncWithHttpInfo (int? storefrontOid)
        {
            // verify the required parameter 'storefrontOid' is set
            if (storefrontOid == null)
                throw new ApiException(400, "Missing required parameter 'storefrontOid' when calling StorefrontApi->GetScreenRecordingSettings");

            var localVarPath = "/storefront/{storefront_oid}/screen_recordings/settings";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (storefrontOid != null) localVarPathParams.Add("storefront_oid", this.Configuration.ApiClient.ParameterToString(storefrontOid)); // path parameter

            // authentication (ultraCartBrowserApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key")))
            {
                localVarHeaderParams["x-ultracart-browser-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key");
            }
            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetScreenRecordingSettings", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ScreenRecordingSettingsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ScreenRecordingSettingsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ScreenRecordingSettingsResponse)));
        }

        /// <summary>
        /// Get tags used by screen recording Get tags used by screen recording 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <returns>ScreenRecordingTagsResponse</returns>
        public ScreenRecordingTagsResponse GetScreenRecordingTags (int? storefrontOid)
        {
             ApiResponse<ScreenRecordingTagsResponse> localVarResponse = GetScreenRecordingTagsWithHttpInfo(storefrontOid);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get tags used by screen recording Get tags used by screen recording 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <returns>ApiResponse of ScreenRecordingTagsResponse</returns>
        public ApiResponse< ScreenRecordingTagsResponse > GetScreenRecordingTagsWithHttpInfo (int? storefrontOid)
        {
            // verify the required parameter 'storefrontOid' is set
            if (storefrontOid == null)
                throw new ApiException(400, "Missing required parameter 'storefrontOid' when calling StorefrontApi->GetScreenRecordingTags");

            var localVarPath = "/storefront/{storefront_oid}/screen_recordings/tags";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (storefrontOid != null) localVarPathParams.Add("storefront_oid", this.Configuration.ApiClient.ParameterToString(storefrontOid)); // path parameter

            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetScreenRecordingTags", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ScreenRecordingTagsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ScreenRecordingTagsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ScreenRecordingTagsResponse)));
        }

        /// <summary>
        /// Get tags used by screen recording Get tags used by screen recording 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <returns>Task of ScreenRecordingTagsResponse</returns>
        public async System.Threading.Tasks.Task<ScreenRecordingTagsResponse> GetScreenRecordingTagsAsync (int? storefrontOid)
        {
             ApiResponse<ScreenRecordingTagsResponse> localVarResponse = await GetScreenRecordingTagsAsyncWithHttpInfo(storefrontOid);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get tags used by screen recording Get tags used by screen recording 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <returns>Task of ApiResponse (ScreenRecordingTagsResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ScreenRecordingTagsResponse>> GetScreenRecordingTagsAsyncWithHttpInfo (int? storefrontOid)
        {
            // verify the required parameter 'storefrontOid' is set
            if (storefrontOid == null)
                throw new ApiException(400, "Missing required parameter 'storefrontOid' when calling StorefrontApi->GetScreenRecordingTags");

            var localVarPath = "/storefront/{storefront_oid}/screen_recordings/tags";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (storefrontOid != null) localVarPathParams.Add("storefront_oid", this.Configuration.ApiClient.ParameterToString(storefrontOid)); // path parameter

            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetScreenRecordingTags", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ScreenRecordingTagsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ScreenRecordingTagsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ScreenRecordingTagsResponse)));
        }

        /// <summary>
        /// Query screen recordings Query screen recordings 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="query">Query</param>
        /// <param name="limit">The maximum number of records to return on this one API call. (Default 100, Max 500) (optional, default to 100)</param>
        /// <param name="offset">Pagination of the record set.  Offset is a zero based index. (optional, default to 0)</param>
        /// <param name="sort">The sort order of the items.  See Sorting documentation for examples of using multiple values and sorting by ascending and descending. (optional)</param>
        /// <returns>ScreenRecordingQueryResponse</returns>
        public ScreenRecordingQueryResponse GetScreenRecordingsByQuery (int? storefrontOid, ScreenRecordingQueryRequest query, int? limit = null, int? offset = null, string sort = null)
        {
             ApiResponse<ScreenRecordingQueryResponse> localVarResponse = GetScreenRecordingsByQueryWithHttpInfo(storefrontOid, query, limit, offset, sort);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Query screen recordings Query screen recordings 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="query">Query</param>
        /// <param name="limit">The maximum number of records to return on this one API call. (Default 100, Max 500) (optional, default to 100)</param>
        /// <param name="offset">Pagination of the record set.  Offset is a zero based index. (optional, default to 0)</param>
        /// <param name="sort">The sort order of the items.  See Sorting documentation for examples of using multiple values and sorting by ascending and descending. (optional)</param>
        /// <returns>ApiResponse of ScreenRecordingQueryResponse</returns>
        public ApiResponse< ScreenRecordingQueryResponse > GetScreenRecordingsByQueryWithHttpInfo (int? storefrontOid, ScreenRecordingQueryRequest query, int? limit = null, int? offset = null, string sort = null)
        {
            // verify the required parameter 'storefrontOid' is set
            if (storefrontOid == null)
                throw new ApiException(400, "Missing required parameter 'storefrontOid' when calling StorefrontApi->GetScreenRecordingsByQuery");
            // verify the required parameter 'query' is set
            if (query == null)
                throw new ApiException(400, "Missing required parameter 'query' when calling StorefrontApi->GetScreenRecordingsByQuery");

            var localVarPath = "/storefront/{storefront_oid}/screen_recordings/query";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (storefrontOid != null) localVarPathParams.Add("storefront_oid", this.Configuration.ApiClient.ParameterToString(storefrontOid)); // path parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "_limit", limit)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "_offset", offset)); // query parameter
            if (sort != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "_sort", sort)); // query parameter
            if (query != null && query.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(query); // http body (model) parameter
            }
            else
            {
                localVarPostBody = query; // byte array
            }

            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetScreenRecordingsByQuery", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ScreenRecordingQueryResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ScreenRecordingQueryResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ScreenRecordingQueryResponse)));
        }

        /// <summary>
        /// Query screen recordings Query screen recordings 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="query">Query</param>
        /// <param name="limit">The maximum number of records to return on this one API call. (Default 100, Max 500) (optional, default to 100)</param>
        /// <param name="offset">Pagination of the record set.  Offset is a zero based index. (optional, default to 0)</param>
        /// <param name="sort">The sort order of the items.  See Sorting documentation for examples of using multiple values and sorting by ascending and descending. (optional)</param>
        /// <returns>Task of ScreenRecordingQueryResponse</returns>
        public async System.Threading.Tasks.Task<ScreenRecordingQueryResponse> GetScreenRecordingsByQueryAsync (int? storefrontOid, ScreenRecordingQueryRequest query, int? limit = null, int? offset = null, string sort = null)
        {
             ApiResponse<ScreenRecordingQueryResponse> localVarResponse = await GetScreenRecordingsByQueryAsyncWithHttpInfo(storefrontOid, query, limit, offset, sort);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Query screen recordings Query screen recordings 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="query">Query</param>
        /// <param name="limit">The maximum number of records to return on this one API call. (Default 100, Max 500) (optional, default to 100)</param>
        /// <param name="offset">Pagination of the record set.  Offset is a zero based index. (optional, default to 0)</param>
        /// <param name="sort">The sort order of the items.  See Sorting documentation for examples of using multiple values and sorting by ascending and descending. (optional)</param>
        /// <returns>Task of ApiResponse (ScreenRecordingQueryResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ScreenRecordingQueryResponse>> GetScreenRecordingsByQueryAsyncWithHttpInfo (int? storefrontOid, ScreenRecordingQueryRequest query, int? limit = null, int? offset = null, string sort = null)
        {
            // verify the required parameter 'storefrontOid' is set
            if (storefrontOid == null)
                throw new ApiException(400, "Missing required parameter 'storefrontOid' when calling StorefrontApi->GetScreenRecordingsByQuery");
            // verify the required parameter 'query' is set
            if (query == null)
                throw new ApiException(400, "Missing required parameter 'query' when calling StorefrontApi->GetScreenRecordingsByQuery");

            var localVarPath = "/storefront/{storefront_oid}/screen_recordings/query";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (storefrontOid != null) localVarPathParams.Add("storefront_oid", this.Configuration.ApiClient.ParameterToString(storefrontOid)); // path parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "_limit", limit)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "_offset", offset)); // query parameter
            if (sort != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "_sort", sort)); // query parameter
            if (query != null && query.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(query); // http body (model) parameter
            }
            else
            {
                localVarPostBody = query; // byte array
            }

            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetScreenRecordingsByQuery", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ScreenRecordingQueryResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ScreenRecordingQueryResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ScreenRecordingQueryResponse)));
        }

        /// <summary>
        /// Get screen recordings by segment Get screen recordings by segment 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="screenRecordingSegmentOid"></param>
        /// <param name="limit">The maximum number of records to return on this one API call. (Default 100, Max 500) (optional, default to 100)</param>
        /// <param name="offset">Pagination of the record set.  Offset is a zero based index. (optional, default to 0)</param>
        /// <param name="sort">The sort order of the items.  See Sorting documentation for examples of using multiple values and sorting by ascending and descending. (optional)</param>
        /// <returns>ScreenRecordingQueryResponse</returns>
        public ScreenRecordingQueryResponse GetScreenRecordingsBySegment (int? storefrontOid, int? screenRecordingSegmentOid, int? limit = null, int? offset = null, string sort = null)
        {
             ApiResponse<ScreenRecordingQueryResponse> localVarResponse = GetScreenRecordingsBySegmentWithHttpInfo(storefrontOid, screenRecordingSegmentOid, limit, offset, sort);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get screen recordings by segment Get screen recordings by segment 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="screenRecordingSegmentOid"></param>
        /// <param name="limit">The maximum number of records to return on this one API call. (Default 100, Max 500) (optional, default to 100)</param>
        /// <param name="offset">Pagination of the record set.  Offset is a zero based index. (optional, default to 0)</param>
        /// <param name="sort">The sort order of the items.  See Sorting documentation for examples of using multiple values and sorting by ascending and descending. (optional)</param>
        /// <returns>ApiResponse of ScreenRecordingQueryResponse</returns>
        public ApiResponse< ScreenRecordingQueryResponse > GetScreenRecordingsBySegmentWithHttpInfo (int? storefrontOid, int? screenRecordingSegmentOid, int? limit = null, int? offset = null, string sort = null)
        {
            // verify the required parameter 'storefrontOid' is set
            if (storefrontOid == null)
                throw new ApiException(400, "Missing required parameter 'storefrontOid' when calling StorefrontApi->GetScreenRecordingsBySegment");
            // verify the required parameter 'screenRecordingSegmentOid' is set
            if (screenRecordingSegmentOid == null)
                throw new ApiException(400, "Missing required parameter 'screenRecordingSegmentOid' when calling StorefrontApi->GetScreenRecordingsBySegment");

            var localVarPath = "/storefront/{storefront_oid}/screen_recordings/segments/{screen_recording_segment_oid}/query";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (storefrontOid != null) localVarPathParams.Add("storefront_oid", this.Configuration.ApiClient.ParameterToString(storefrontOid)); // path parameter
            if (screenRecordingSegmentOid != null) localVarPathParams.Add("screen_recording_segment_oid", this.Configuration.ApiClient.ParameterToString(screenRecordingSegmentOid)); // path parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "_limit", limit)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "_offset", offset)); // query parameter
            if (sort != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "_sort", sort)); // query parameter

            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetScreenRecordingsBySegment", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ScreenRecordingQueryResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ScreenRecordingQueryResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ScreenRecordingQueryResponse)));
        }

        /// <summary>
        /// Get screen recordings by segment Get screen recordings by segment 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="screenRecordingSegmentOid"></param>
        /// <param name="limit">The maximum number of records to return on this one API call. (Default 100, Max 500) (optional, default to 100)</param>
        /// <param name="offset">Pagination of the record set.  Offset is a zero based index. (optional, default to 0)</param>
        /// <param name="sort">The sort order of the items.  See Sorting documentation for examples of using multiple values and sorting by ascending and descending. (optional)</param>
        /// <returns>Task of ScreenRecordingQueryResponse</returns>
        public async System.Threading.Tasks.Task<ScreenRecordingQueryResponse> GetScreenRecordingsBySegmentAsync (int? storefrontOid, int? screenRecordingSegmentOid, int? limit = null, int? offset = null, string sort = null)
        {
             ApiResponse<ScreenRecordingQueryResponse> localVarResponse = await GetScreenRecordingsBySegmentAsyncWithHttpInfo(storefrontOid, screenRecordingSegmentOid, limit, offset, sort);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get screen recordings by segment Get screen recordings by segment 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="screenRecordingSegmentOid"></param>
        /// <param name="limit">The maximum number of records to return on this one API call. (Default 100, Max 500) (optional, default to 100)</param>
        /// <param name="offset">Pagination of the record set.  Offset is a zero based index. (optional, default to 0)</param>
        /// <param name="sort">The sort order of the items.  See Sorting documentation for examples of using multiple values and sorting by ascending and descending. (optional)</param>
        /// <returns>Task of ApiResponse (ScreenRecordingQueryResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ScreenRecordingQueryResponse>> GetScreenRecordingsBySegmentAsyncWithHttpInfo (int? storefrontOid, int? screenRecordingSegmentOid, int? limit = null, int? offset = null, string sort = null)
        {
            // verify the required parameter 'storefrontOid' is set
            if (storefrontOid == null)
                throw new ApiException(400, "Missing required parameter 'storefrontOid' when calling StorefrontApi->GetScreenRecordingsBySegment");
            // verify the required parameter 'screenRecordingSegmentOid' is set
            if (screenRecordingSegmentOid == null)
                throw new ApiException(400, "Missing required parameter 'screenRecordingSegmentOid' when calling StorefrontApi->GetScreenRecordingsBySegment");

            var localVarPath = "/storefront/{storefront_oid}/screen_recordings/segments/{screen_recording_segment_oid}/query";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (storefrontOid != null) localVarPathParams.Add("storefront_oid", this.Configuration.ApiClient.ParameterToString(storefrontOid)); // path parameter
            if (screenRecordingSegmentOid != null) localVarPathParams.Add("screen_recording_segment_oid", this.Configuration.ApiClient.ParameterToString(screenRecordingSegmentOid)); // path parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "_limit", limit)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "_offset", offset)); // query parameter
            if (sort != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "_sort", sort)); // query parameter

            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetScreenRecordingsBySegment", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ScreenRecordingQueryResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ScreenRecordingQueryResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ScreenRecordingQueryResponse)));
        }

        /// <summary>
        /// Retrieve pricing tiers Retrieves the pricing tiers 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="expand">The object expansion to perform on the result.  See documentation for examples (optional)</param>
        /// <returns>PricingTiersResponse</returns>
        public PricingTiersResponse GetStoreFrontPricingTiers (string expand = null)
        {
             ApiResponse<PricingTiersResponse> localVarResponse = GetStoreFrontPricingTiersWithHttpInfo(expand);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve pricing tiers Retrieves the pricing tiers 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="expand">The object expansion to perform on the result.  See documentation for examples (optional)</param>
        /// <returns>ApiResponse of PricingTiersResponse</returns>
        public ApiResponse< PricingTiersResponse > GetStoreFrontPricingTiersWithHttpInfo (string expand = null)
        {

            var localVarPath = "/storefront/pricing_tiers";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (expand != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "_expand", expand)); // query parameter

            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetStoreFrontPricingTiers", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PricingTiersResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PricingTiersResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PricingTiersResponse)));
        }

        /// <summary>
        /// Retrieve pricing tiers Retrieves the pricing tiers 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="expand">The object expansion to perform on the result.  See documentation for examples (optional)</param>
        /// <returns>Task of PricingTiersResponse</returns>
        public async System.Threading.Tasks.Task<PricingTiersResponse> GetStoreFrontPricingTiersAsync (string expand = null)
        {
             ApiResponse<PricingTiersResponse> localVarResponse = await GetStoreFrontPricingTiersAsyncWithHttpInfo(expand);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieve pricing tiers Retrieves the pricing tiers 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="expand">The object expansion to perform on the result.  See documentation for examples (optional)</param>
        /// <returns>Task of ApiResponse (PricingTiersResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PricingTiersResponse>> GetStoreFrontPricingTiersAsyncWithHttpInfo (string expand = null)
        {

            var localVarPath = "/storefront/pricing_tiers";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (expand != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "_expand", expand)); // query parameter

            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetStoreFrontPricingTiers", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PricingTiersResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PricingTiersResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PricingTiersResponse)));
        }

        /// <summary>
        /// Get thumbnail parameters 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="thumbnailParameters">Thumbnail Parameters</param>
        /// <returns>ThumbnailParametersResponse</returns>
        public ThumbnailParametersResponse GetThumbnailParameters (ThumbnailParametersRequest thumbnailParameters)
        {
             ApiResponse<ThumbnailParametersResponse> localVarResponse = GetThumbnailParametersWithHttpInfo(thumbnailParameters);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get thumbnail parameters 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="thumbnailParameters">Thumbnail Parameters</param>
        /// <returns>ApiResponse of ThumbnailParametersResponse</returns>
        public ApiResponse< ThumbnailParametersResponse > GetThumbnailParametersWithHttpInfo (ThumbnailParametersRequest thumbnailParameters)
        {
            // verify the required parameter 'thumbnailParameters' is set
            if (thumbnailParameters == null)
                throw new ApiException(400, "Missing required parameter 'thumbnailParameters' when calling StorefrontApi->GetThumbnailParameters");

            var localVarPath = "/storefront/thumbnailParameters";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (thumbnailParameters != null && thumbnailParameters.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(thumbnailParameters); // http body (model) parameter
            }
            else
            {
                localVarPostBody = thumbnailParameters; // byte array
            }

            // authentication (ultraCartBrowserApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key")))
            {
                localVarHeaderParams["x-ultracart-browser-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key");
            }
            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetThumbnailParameters", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ThumbnailParametersResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ThumbnailParametersResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ThumbnailParametersResponse)));
        }

        /// <summary>
        /// Get thumbnail parameters 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="thumbnailParameters">Thumbnail Parameters</param>
        /// <returns>Task of ThumbnailParametersResponse</returns>
        public async System.Threading.Tasks.Task<ThumbnailParametersResponse> GetThumbnailParametersAsync (ThumbnailParametersRequest thumbnailParameters)
        {
             ApiResponse<ThumbnailParametersResponse> localVarResponse = await GetThumbnailParametersAsyncWithHttpInfo(thumbnailParameters);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get thumbnail parameters 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="thumbnailParameters">Thumbnail Parameters</param>
        /// <returns>Task of ApiResponse (ThumbnailParametersResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ThumbnailParametersResponse>> GetThumbnailParametersAsyncWithHttpInfo (ThumbnailParametersRequest thumbnailParameters)
        {
            // verify the required parameter 'thumbnailParameters' is set
            if (thumbnailParameters == null)
                throw new ApiException(400, "Missing required parameter 'thumbnailParameters' when calling StorefrontApi->GetThumbnailParameters");

            var localVarPath = "/storefront/thumbnailParameters";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (thumbnailParameters != null && thumbnailParameters.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(thumbnailParameters); // http body (model) parameter
            }
            else
            {
                localVarPostBody = thumbnailParameters; // byte array
            }

            // authentication (ultraCartBrowserApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key")))
            {
                localVarHeaderParams["x-ultracart-browser-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key");
            }
            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetThumbnailParameters", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ThumbnailParametersResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ThumbnailParametersResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ThumbnailParametersResponse)));
        }

        /// <summary>
        /// Gets a transaction email object Fetch a transactional email 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="emailId"></param>
        /// <returns>TransactionEmailResponse</returns>
        public TransactionEmailResponse GetTransactionEmail (int? storefrontOid, string emailId)
        {
             ApiResponse<TransactionEmailResponse> localVarResponse = GetTransactionEmailWithHttpInfo(storefrontOid, emailId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets a transaction email object Fetch a transactional email 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="emailId"></param>
        /// <returns>ApiResponse of TransactionEmailResponse</returns>
        public ApiResponse< TransactionEmailResponse > GetTransactionEmailWithHttpInfo (int? storefrontOid, string emailId)
        {
            // verify the required parameter 'storefrontOid' is set
            if (storefrontOid == null)
                throw new ApiException(400, "Missing required parameter 'storefrontOid' when calling StorefrontApi->GetTransactionEmail");
            // verify the required parameter 'emailId' is set
            if (emailId == null)
                throw new ApiException(400, "Missing required parameter 'emailId' when calling StorefrontApi->GetTransactionEmail");

            var localVarPath = "/storefront/{storefront_oid}/transaction_email/list/{email_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (storefrontOid != null) localVarPathParams.Add("storefront_oid", this.Configuration.ApiClient.ParameterToString(storefrontOid)); // path parameter
            if (emailId != null) localVarPathParams.Add("email_id", this.Configuration.ApiClient.ParameterToString(emailId)); // path parameter

            // authentication (ultraCartBrowserApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key")))
            {
                localVarHeaderParams["x-ultracart-browser-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key");
            }
            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTransactionEmail", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TransactionEmailResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TransactionEmailResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TransactionEmailResponse)));
        }

        /// <summary>
        /// Gets a transaction email object Fetch a transactional email 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="emailId"></param>
        /// <returns>Task of TransactionEmailResponse</returns>
        public async System.Threading.Tasks.Task<TransactionEmailResponse> GetTransactionEmailAsync (int? storefrontOid, string emailId)
        {
             ApiResponse<TransactionEmailResponse> localVarResponse = await GetTransactionEmailAsyncWithHttpInfo(storefrontOid, emailId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets a transaction email object Fetch a transactional email 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="emailId"></param>
        /// <returns>Task of ApiResponse (TransactionEmailResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TransactionEmailResponse>> GetTransactionEmailAsyncWithHttpInfo (int? storefrontOid, string emailId)
        {
            // verify the required parameter 'storefrontOid' is set
            if (storefrontOid == null)
                throw new ApiException(400, "Missing required parameter 'storefrontOid' when calling StorefrontApi->GetTransactionEmail");
            // verify the required parameter 'emailId' is set
            if (emailId == null)
                throw new ApiException(400, "Missing required parameter 'emailId' when calling StorefrontApi->GetTransactionEmail");

            var localVarPath = "/storefront/{storefront_oid}/transaction_email/list/{email_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (storefrontOid != null) localVarPathParams.Add("storefront_oid", this.Configuration.ApiClient.ParameterToString(storefrontOid)); // path parameter
            if (emailId != null) localVarPathParams.Add("email_id", this.Configuration.ApiClient.ParameterToString(emailId)); // path parameter

            // authentication (ultraCartBrowserApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key")))
            {
                localVarHeaderParams["x-ultracart-browser-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key");
            }
            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTransactionEmail", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TransactionEmailResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TransactionEmailResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TransactionEmailResponse)));
        }

        /// <summary>
        /// Gets a list of transaction email names Obtain a list of all transactional emails and return back just their names 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <returns>TransactionEmailListResponse</returns>
        public TransactionEmailListResponse GetTransactionEmailList (int? storefrontOid)
        {
             ApiResponse<TransactionEmailListResponse> localVarResponse = GetTransactionEmailListWithHttpInfo(storefrontOid);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets a list of transaction email names Obtain a list of all transactional emails and return back just their names 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <returns>ApiResponse of TransactionEmailListResponse</returns>
        public ApiResponse< TransactionEmailListResponse > GetTransactionEmailListWithHttpInfo (int? storefrontOid)
        {
            // verify the required parameter 'storefrontOid' is set
            if (storefrontOid == null)
                throw new ApiException(400, "Missing required parameter 'storefrontOid' when calling StorefrontApi->GetTransactionEmailList");

            var localVarPath = "/storefront/{storefront_oid}/transaction_email/list";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (storefrontOid != null) localVarPathParams.Add("storefront_oid", this.Configuration.ApiClient.ParameterToString(storefrontOid)); // path parameter

            // authentication (ultraCartBrowserApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key")))
            {
                localVarHeaderParams["x-ultracart-browser-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key");
            }
            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTransactionEmailList", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TransactionEmailListResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TransactionEmailListResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TransactionEmailListResponse)));
        }

        /// <summary>
        /// Gets a list of transaction email names Obtain a list of all transactional emails and return back just their names 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <returns>Task of TransactionEmailListResponse</returns>
        public async System.Threading.Tasks.Task<TransactionEmailListResponse> GetTransactionEmailListAsync (int? storefrontOid)
        {
             ApiResponse<TransactionEmailListResponse> localVarResponse = await GetTransactionEmailListAsyncWithHttpInfo(storefrontOid);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets a list of transaction email names Obtain a list of all transactional emails and return back just their names 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <returns>Task of ApiResponse (TransactionEmailListResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TransactionEmailListResponse>> GetTransactionEmailListAsyncWithHttpInfo (int? storefrontOid)
        {
            // verify the required parameter 'storefrontOid' is set
            if (storefrontOid == null)
                throw new ApiException(400, "Missing required parameter 'storefrontOid' when calling StorefrontApi->GetTransactionEmailList");

            var localVarPath = "/storefront/{storefront_oid}/transaction_email/list";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (storefrontOid != null) localVarPathParams.Add("storefront_oid", this.Configuration.ApiClient.ParameterToString(storefrontOid)); // path parameter

            // authentication (ultraCartBrowserApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key")))
            {
                localVarHeaderParams["x-ultracart-browser-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key");
            }
            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTransactionEmailList", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TransactionEmailListResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TransactionEmailListResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TransactionEmailListResponse)));
        }

        /// <summary>
        /// Get transactional email screenshots 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="emailId"></param>
        /// <returns>ScreenshotsResponse</returns>
        public ScreenshotsResponse GetTransactionEmailScreenshots (int? storefrontOid, string emailId)
        {
             ApiResponse<ScreenshotsResponse> localVarResponse = GetTransactionEmailScreenshotsWithHttpInfo(storefrontOid, emailId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get transactional email screenshots 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="emailId"></param>
        /// <returns>ApiResponse of ScreenshotsResponse</returns>
        public ApiResponse< ScreenshotsResponse > GetTransactionEmailScreenshotsWithHttpInfo (int? storefrontOid, string emailId)
        {
            // verify the required parameter 'storefrontOid' is set
            if (storefrontOid == null)
                throw new ApiException(400, "Missing required parameter 'storefrontOid' when calling StorefrontApi->GetTransactionEmailScreenshots");
            // verify the required parameter 'emailId' is set
            if (emailId == null)
                throw new ApiException(400, "Missing required parameter 'emailId' when calling StorefrontApi->GetTransactionEmailScreenshots");

            var localVarPath = "/storefront/{storefront_oid}/transaction_email/list/{email_id}/screenshots";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (storefrontOid != null) localVarPathParams.Add("storefront_oid", this.Configuration.ApiClient.ParameterToString(storefrontOid)); // path parameter
            if (emailId != null) localVarPathParams.Add("email_id", this.Configuration.ApiClient.ParameterToString(emailId)); // path parameter

            // authentication (ultraCartBrowserApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key")))
            {
                localVarHeaderParams["x-ultracart-browser-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key");
            }
            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTransactionEmailScreenshots", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ScreenshotsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ScreenshotsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ScreenshotsResponse)));
        }

        /// <summary>
        /// Get transactional email screenshots 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="emailId"></param>
        /// <returns>Task of ScreenshotsResponse</returns>
        public async System.Threading.Tasks.Task<ScreenshotsResponse> GetTransactionEmailScreenshotsAsync (int? storefrontOid, string emailId)
        {
             ApiResponse<ScreenshotsResponse> localVarResponse = await GetTransactionEmailScreenshotsAsyncWithHttpInfo(storefrontOid, emailId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get transactional email screenshots 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="emailId"></param>
        /// <returns>Task of ApiResponse (ScreenshotsResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ScreenshotsResponse>> GetTransactionEmailScreenshotsAsyncWithHttpInfo (int? storefrontOid, string emailId)
        {
            // verify the required parameter 'storefrontOid' is set
            if (storefrontOid == null)
                throw new ApiException(400, "Missing required parameter 'storefrontOid' when calling StorefrontApi->GetTransactionEmailScreenshots");
            // verify the required parameter 'emailId' is set
            if (emailId == null)
                throw new ApiException(400, "Missing required parameter 'emailId' when calling StorefrontApi->GetTransactionEmailScreenshots");

            var localVarPath = "/storefront/{storefront_oid}/transaction_email/list/{email_id}/screenshots";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (storefrontOid != null) localVarPathParams.Add("storefront_oid", this.Configuration.ApiClient.ParameterToString(storefrontOid)); // path parameter
            if (emailId != null) localVarPathParams.Add("email_id", this.Configuration.ApiClient.ParameterToString(emailId)); // path parameter

            // authentication (ultraCartBrowserApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key")))
            {
                localVarHeaderParams["x-ultracart-browser-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key");
            }
            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTransactionEmailScreenshots", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ScreenshotsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ScreenshotsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ScreenshotsResponse)));
        }

        /// <summary>
        /// Get Twilio account 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="espTwilioUuid"></param>
        /// <returns>TwilioResponse</returns>
        public TwilioResponse GetTwilioAccount (string espTwilioUuid)
        {
             ApiResponse<TwilioResponse> localVarResponse = GetTwilioAccountWithHttpInfo(espTwilioUuid);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Twilio account 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="espTwilioUuid"></param>
        /// <returns>ApiResponse of TwilioResponse</returns>
        public ApiResponse< TwilioResponse > GetTwilioAccountWithHttpInfo (string espTwilioUuid)
        {
            // verify the required parameter 'espTwilioUuid' is set
            if (espTwilioUuid == null)
                throw new ApiException(400, "Missing required parameter 'espTwilioUuid' when calling StorefrontApi->GetTwilioAccount");

            var localVarPath = "/storefront/twilio/accounts/{esp_twilio_uuid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (espTwilioUuid != null) localVarPathParams.Add("esp_twilio_uuid", this.Configuration.ApiClient.ParameterToString(espTwilioUuid)); // path parameter

            // authentication (ultraCartBrowserApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key")))
            {
                localVarHeaderParams["x-ultracart-browser-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key");
            }
            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTwilioAccount", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TwilioResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TwilioResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TwilioResponse)));
        }

        /// <summary>
        /// Get Twilio account 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="espTwilioUuid"></param>
        /// <returns>Task of TwilioResponse</returns>
        public async System.Threading.Tasks.Task<TwilioResponse> GetTwilioAccountAsync (string espTwilioUuid)
        {
             ApiResponse<TwilioResponse> localVarResponse = await GetTwilioAccountAsyncWithHttpInfo(espTwilioUuid);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Twilio account 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="espTwilioUuid"></param>
        /// <returns>Task of ApiResponse (TwilioResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TwilioResponse>> GetTwilioAccountAsyncWithHttpInfo (string espTwilioUuid)
        {
            // verify the required parameter 'espTwilioUuid' is set
            if (espTwilioUuid == null)
                throw new ApiException(400, "Missing required parameter 'espTwilioUuid' when calling StorefrontApi->GetTwilioAccount");

            var localVarPath = "/storefront/twilio/accounts/{esp_twilio_uuid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (espTwilioUuid != null) localVarPathParams.Add("esp_twilio_uuid", this.Configuration.ApiClient.ParameterToString(espTwilioUuid)); // path parameter

            // authentication (ultraCartBrowserApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key")))
            {
                localVarHeaderParams["x-ultracart-browser-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key");
            }
            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTwilioAccount", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TwilioResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TwilioResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TwilioResponse)));
        }

        /// <summary>
        /// Get all Twilio accounts 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>TwiliosResponse</returns>
        public TwiliosResponse GetTwilioAccounts ()
        {
             ApiResponse<TwiliosResponse> localVarResponse = GetTwilioAccountsWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get all Twilio accounts 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of TwiliosResponse</returns>
        public ApiResponse< TwiliosResponse > GetTwilioAccountsWithHttpInfo ()
        {

            var localVarPath = "/storefront/twilio/accounts";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (ultraCartBrowserApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key")))
            {
                localVarHeaderParams["x-ultracart-browser-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key");
            }
            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTwilioAccounts", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TwiliosResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TwiliosResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TwiliosResponse)));
        }

        /// <summary>
        /// Get all Twilio accounts 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of TwiliosResponse</returns>
        public async System.Threading.Tasks.Task<TwiliosResponse> GetTwilioAccountsAsync ()
        {
             ApiResponse<TwiliosResponse> localVarResponse = await GetTwilioAccountsAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get all Twilio accounts 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (TwiliosResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TwiliosResponse>> GetTwilioAccountsAsyncWithHttpInfo ()
        {

            var localVarPath = "/storefront/twilio/accounts";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (ultraCartBrowserApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key")))
            {
                localVarHeaderParams["x-ultracart-browser-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key");
            }
            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTwilioAccounts", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TwiliosResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TwiliosResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TwiliosResponse)));
        }

        /// <summary>
        /// Globally unsubscribe a customer 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="unsubscribe">Unsubscribe</param>
        /// <returns>EmailGlobalUnsubscribeResponse</returns>
        public EmailGlobalUnsubscribeResponse GlobalUnsubscribe (int? storefrontOid, EmailGlobalUnsubscribeRequest unsubscribe)
        {
             ApiResponse<EmailGlobalUnsubscribeResponse> localVarResponse = GlobalUnsubscribeWithHttpInfo(storefrontOid, unsubscribe);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Globally unsubscribe a customer 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="unsubscribe">Unsubscribe</param>
        /// <returns>ApiResponse of EmailGlobalUnsubscribeResponse</returns>
        public ApiResponse< EmailGlobalUnsubscribeResponse > GlobalUnsubscribeWithHttpInfo (int? storefrontOid, EmailGlobalUnsubscribeRequest unsubscribe)
        {
            // verify the required parameter 'storefrontOid' is set
            if (storefrontOid == null)
                throw new ApiException(400, "Missing required parameter 'storefrontOid' when calling StorefrontApi->GlobalUnsubscribe");
            // verify the required parameter 'unsubscribe' is set
            if (unsubscribe == null)
                throw new ApiException(400, "Missing required parameter 'unsubscribe' when calling StorefrontApi->GlobalUnsubscribe");

            var localVarPath = "/storefront/{storefront_oid}/email/globalUnsubscribe";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (storefrontOid != null) localVarPathParams.Add("storefront_oid", this.Configuration.ApiClient.ParameterToString(storefrontOid)); // path parameter
            if (unsubscribe != null && unsubscribe.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(unsubscribe); // http body (model) parameter
            }
            else
            {
                localVarPostBody = unsubscribe; // byte array
            }

            // authentication (ultraCartBrowserApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key")))
            {
                localVarHeaderParams["x-ultracart-browser-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key");
            }
            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GlobalUnsubscribe", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EmailGlobalUnsubscribeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (EmailGlobalUnsubscribeResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EmailGlobalUnsubscribeResponse)));
        }

        /// <summary>
        /// Globally unsubscribe a customer 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="unsubscribe">Unsubscribe</param>
        /// <returns>Task of EmailGlobalUnsubscribeResponse</returns>
        public async System.Threading.Tasks.Task<EmailGlobalUnsubscribeResponse> GlobalUnsubscribeAsync (int? storefrontOid, EmailGlobalUnsubscribeRequest unsubscribe)
        {
             ApiResponse<EmailGlobalUnsubscribeResponse> localVarResponse = await GlobalUnsubscribeAsyncWithHttpInfo(storefrontOid, unsubscribe);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Globally unsubscribe a customer 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="unsubscribe">Unsubscribe</param>
        /// <returns>Task of ApiResponse (EmailGlobalUnsubscribeResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<EmailGlobalUnsubscribeResponse>> GlobalUnsubscribeAsyncWithHttpInfo (int? storefrontOid, EmailGlobalUnsubscribeRequest unsubscribe)
        {
            // verify the required parameter 'storefrontOid' is set
            if (storefrontOid == null)
                throw new ApiException(400, "Missing required parameter 'storefrontOid' when calling StorefrontApi->GlobalUnsubscribe");
            // verify the required parameter 'unsubscribe' is set
            if (unsubscribe == null)
                throw new ApiException(400, "Missing required parameter 'unsubscribe' when calling StorefrontApi->GlobalUnsubscribe");

            var localVarPath = "/storefront/{storefront_oid}/email/globalUnsubscribe";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (storefrontOid != null) localVarPathParams.Add("storefront_oid", this.Configuration.ApiClient.ParameterToString(storefrontOid)); // path parameter
            if (unsubscribe != null && unsubscribe.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(unsubscribe); // http body (model) parameter
            }
            else
            {
                localVarPostBody = unsubscribe; // byte array
            }

            // authentication (ultraCartBrowserApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key")))
            {
                localVarHeaderParams["x-ultracart-browser-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key");
            }
            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GlobalUnsubscribe", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EmailGlobalUnsubscribeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (EmailGlobalUnsubscribeResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EmailGlobalUnsubscribeResponse)));
        }

        /// <summary>
        /// Import a third party provider list 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="importRequest">lists to import</param>
        /// <returns></returns>
        public void ImportEmailThirdPartyProviderList (int? storefrontOid, EmailThirdPartyListImportRequest importRequest)
        {
             ImportEmailThirdPartyProviderListWithHttpInfo(storefrontOid, importRequest);
        }

        /// <summary>
        /// Import a third party provider list 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="importRequest">lists to import</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> ImportEmailThirdPartyProviderListWithHttpInfo (int? storefrontOid, EmailThirdPartyListImportRequest importRequest)
        {
            // verify the required parameter 'storefrontOid' is set
            if (storefrontOid == null)
                throw new ApiException(400, "Missing required parameter 'storefrontOid' when calling StorefrontApi->ImportEmailThirdPartyProviderList");
            // verify the required parameter 'importRequest' is set
            if (importRequest == null)
                throw new ApiException(400, "Missing required parameter 'importRequest' when calling StorefrontApi->ImportEmailThirdPartyProviderList");

            var localVarPath = "/storefront/{storefront_oid}/email/third_party_providers/import";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (storefrontOid != null) localVarPathParams.Add("storefront_oid", this.Configuration.ApiClient.ParameterToString(storefrontOid)); // path parameter
            if (importRequest != null && importRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(importRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = importRequest; // byte array
            }

            // authentication (ultraCartBrowserApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key")))
            {
                localVarHeaderParams["x-ultracart-browser-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key");
            }
            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ImportEmailThirdPartyProviderList", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Import a third party provider list 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="importRequest">lists to import</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ImportEmailThirdPartyProviderListAsync (int? storefrontOid, EmailThirdPartyListImportRequest importRequest)
        {
             await ImportEmailThirdPartyProviderListAsyncWithHttpInfo(storefrontOid, importRequest);

        }

        /// <summary>
        /// Import a third party provider list 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="importRequest">lists to import</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> ImportEmailThirdPartyProviderListAsyncWithHttpInfo (int? storefrontOid, EmailThirdPartyListImportRequest importRequest)
        {
            // verify the required parameter 'storefrontOid' is set
            if (storefrontOid == null)
                throw new ApiException(400, "Missing required parameter 'storefrontOid' when calling StorefrontApi->ImportEmailThirdPartyProviderList");
            // verify the required parameter 'importRequest' is set
            if (importRequest == null)
                throw new ApiException(400, "Missing required parameter 'importRequest' when calling StorefrontApi->ImportEmailThirdPartyProviderList");

            var localVarPath = "/storefront/{storefront_oid}/email/third_party_providers/import";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (storefrontOid != null) localVarPathParams.Add("storefront_oid", this.Configuration.ApiClient.ParameterToString(storefrontOid)); // path parameter
            if (importRequest != null && importRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(importRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = importRequest; // byte array
            }

            // authentication (ultraCartBrowserApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key")))
            {
                localVarHeaderParams["x-ultracart-browser-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key");
            }
            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ImportEmailThirdPartyProviderList", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Insert email campaign 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="emailCampaign">Email campaign</param>
        /// <returns>EmailCampaignResponse</returns>
        public EmailCampaignResponse InsertEmailCampaign (int? storefrontOid, EmailCampaign emailCampaign)
        {
             ApiResponse<EmailCampaignResponse> localVarResponse = InsertEmailCampaignWithHttpInfo(storefrontOid, emailCampaign);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Insert email campaign 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="emailCampaign">Email campaign</param>
        /// <returns>ApiResponse of EmailCampaignResponse</returns>
        public ApiResponse< EmailCampaignResponse > InsertEmailCampaignWithHttpInfo (int? storefrontOid, EmailCampaign emailCampaign)
        {
            // verify the required parameter 'storefrontOid' is set
            if (storefrontOid == null)
                throw new ApiException(400, "Missing required parameter 'storefrontOid' when calling StorefrontApi->InsertEmailCampaign");
            // verify the required parameter 'emailCampaign' is set
            if (emailCampaign == null)
                throw new ApiException(400, "Missing required parameter 'emailCampaign' when calling StorefrontApi->InsertEmailCampaign");

            var localVarPath = "/storefront/{storefront_oid}/email/campaigns";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (storefrontOid != null) localVarPathParams.Add("storefront_oid", this.Configuration.ApiClient.ParameterToString(storefrontOid)); // path parameter
            if (emailCampaign != null && emailCampaign.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(emailCampaign); // http body (model) parameter
            }
            else
            {
                localVarPostBody = emailCampaign; // byte array
            }

            // authentication (ultraCartBrowserApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key")))
            {
                localVarHeaderParams["x-ultracart-browser-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key");
            }
            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("InsertEmailCampaign", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EmailCampaignResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (EmailCampaignResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EmailCampaignResponse)));
        }

        /// <summary>
        /// Insert email campaign 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="emailCampaign">Email campaign</param>
        /// <returns>Task of EmailCampaignResponse</returns>
        public async System.Threading.Tasks.Task<EmailCampaignResponse> InsertEmailCampaignAsync (int? storefrontOid, EmailCampaign emailCampaign)
        {
             ApiResponse<EmailCampaignResponse> localVarResponse = await InsertEmailCampaignAsyncWithHttpInfo(storefrontOid, emailCampaign);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Insert email campaign 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="emailCampaign">Email campaign</param>
        /// <returns>Task of ApiResponse (EmailCampaignResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<EmailCampaignResponse>> InsertEmailCampaignAsyncWithHttpInfo (int? storefrontOid, EmailCampaign emailCampaign)
        {
            // verify the required parameter 'storefrontOid' is set
            if (storefrontOid == null)
                throw new ApiException(400, "Missing required parameter 'storefrontOid' when calling StorefrontApi->InsertEmailCampaign");
            // verify the required parameter 'emailCampaign' is set
            if (emailCampaign == null)
                throw new ApiException(400, "Missing required parameter 'emailCampaign' when calling StorefrontApi->InsertEmailCampaign");

            var localVarPath = "/storefront/{storefront_oid}/email/campaigns";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (storefrontOid != null) localVarPathParams.Add("storefront_oid", this.Configuration.ApiClient.ParameterToString(storefrontOid)); // path parameter
            if (emailCampaign != null && emailCampaign.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(emailCampaign); // http body (model) parameter
            }
            else
            {
                localVarPostBody = emailCampaign; // byte array
            }

            // authentication (ultraCartBrowserApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key")))
            {
                localVarHeaderParams["x-ultracart-browser-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key");
            }
            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("InsertEmailCampaign", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EmailCampaignResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (EmailCampaignResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EmailCampaignResponse)));
        }

        /// <summary>
        /// Insert email campaign folder 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="emailCampaignFolder">Email campaign folder</param>
        /// <returns>EmailCampaignFolderResponse</returns>
        public EmailCampaignFolderResponse InsertEmailCampaignFolder (int? storefrontOid, EmailCampaignFolder emailCampaignFolder)
        {
             ApiResponse<EmailCampaignFolderResponse> localVarResponse = InsertEmailCampaignFolderWithHttpInfo(storefrontOid, emailCampaignFolder);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Insert email campaign folder 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="emailCampaignFolder">Email campaign folder</param>
        /// <returns>ApiResponse of EmailCampaignFolderResponse</returns>
        public ApiResponse< EmailCampaignFolderResponse > InsertEmailCampaignFolderWithHttpInfo (int? storefrontOid, EmailCampaignFolder emailCampaignFolder)
        {
            // verify the required parameter 'storefrontOid' is set
            if (storefrontOid == null)
                throw new ApiException(400, "Missing required parameter 'storefrontOid' when calling StorefrontApi->InsertEmailCampaignFolder");
            // verify the required parameter 'emailCampaignFolder' is set
            if (emailCampaignFolder == null)
                throw new ApiException(400, "Missing required parameter 'emailCampaignFolder' when calling StorefrontApi->InsertEmailCampaignFolder");

            var localVarPath = "/storefront/{storefront_oid}/email/campaign_folders";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (storefrontOid != null) localVarPathParams.Add("storefront_oid", this.Configuration.ApiClient.ParameterToString(storefrontOid)); // path parameter
            if (emailCampaignFolder != null && emailCampaignFolder.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(emailCampaignFolder); // http body (model) parameter
            }
            else
            {
                localVarPostBody = emailCampaignFolder; // byte array
            }

            // authentication (ultraCartBrowserApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key")))
            {
                localVarHeaderParams["x-ultracart-browser-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key");
            }
            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("InsertEmailCampaignFolder", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EmailCampaignFolderResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (EmailCampaignFolderResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EmailCampaignFolderResponse)));
        }

        /// <summary>
        /// Insert email campaign folder 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="emailCampaignFolder">Email campaign folder</param>
        /// <returns>Task of EmailCampaignFolderResponse</returns>
        public async System.Threading.Tasks.Task<EmailCampaignFolderResponse> InsertEmailCampaignFolderAsync (int? storefrontOid, EmailCampaignFolder emailCampaignFolder)
        {
             ApiResponse<EmailCampaignFolderResponse> localVarResponse = await InsertEmailCampaignFolderAsyncWithHttpInfo(storefrontOid, emailCampaignFolder);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Insert email campaign folder 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="emailCampaignFolder">Email campaign folder</param>
        /// <returns>Task of ApiResponse (EmailCampaignFolderResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<EmailCampaignFolderResponse>> InsertEmailCampaignFolderAsyncWithHttpInfo (int? storefrontOid, EmailCampaignFolder emailCampaignFolder)
        {
            // verify the required parameter 'storefrontOid' is set
            if (storefrontOid == null)
                throw new ApiException(400, "Missing required parameter 'storefrontOid' when calling StorefrontApi->InsertEmailCampaignFolder");
            // verify the required parameter 'emailCampaignFolder' is set
            if (emailCampaignFolder == null)
                throw new ApiException(400, "Missing required parameter 'emailCampaignFolder' when calling StorefrontApi->InsertEmailCampaignFolder");

            var localVarPath = "/storefront/{storefront_oid}/email/campaign_folders";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (storefrontOid != null) localVarPathParams.Add("storefront_oid", this.Configuration.ApiClient.ParameterToString(storefrontOid)); // path parameter
            if (emailCampaignFolder != null && emailCampaignFolder.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(emailCampaignFolder); // http body (model) parameter
            }
            else
            {
                localVarPostBody = emailCampaignFolder; // byte array
            }

            // authentication (ultraCartBrowserApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key")))
            {
                localVarHeaderParams["x-ultracart-browser-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key");
            }
            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("InsertEmailCampaignFolder", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EmailCampaignFolderResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (EmailCampaignFolderResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EmailCampaignFolderResponse)));
        }

        /// <summary>
        /// Insert email commseq 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="emailCommseq">Email commseq</param>
        /// <returns>EmailCommseqResponse</returns>
        public EmailCommseqResponse InsertEmailCommseq (int? storefrontOid, EmailCommseq emailCommseq)
        {
             ApiResponse<EmailCommseqResponse> localVarResponse = InsertEmailCommseqWithHttpInfo(storefrontOid, emailCommseq);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Insert email commseq 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="emailCommseq">Email commseq</param>
        /// <returns>ApiResponse of EmailCommseqResponse</returns>
        public ApiResponse< EmailCommseqResponse > InsertEmailCommseqWithHttpInfo (int? storefrontOid, EmailCommseq emailCommseq)
        {
            // verify the required parameter 'storefrontOid' is set
            if (storefrontOid == null)
                throw new ApiException(400, "Missing required parameter 'storefrontOid' when calling StorefrontApi->InsertEmailCommseq");
            // verify the required parameter 'emailCommseq' is set
            if (emailCommseq == null)
                throw new ApiException(400, "Missing required parameter 'emailCommseq' when calling StorefrontApi->InsertEmailCommseq");

            var localVarPath = "/storefront/{storefront_oid}/email/commseqs";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (storefrontOid != null) localVarPathParams.Add("storefront_oid", this.Configuration.ApiClient.ParameterToString(storefrontOid)); // path parameter
            if (emailCommseq != null && emailCommseq.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(emailCommseq); // http body (model) parameter
            }
            else
            {
                localVarPostBody = emailCommseq; // byte array
            }

            // authentication (ultraCartBrowserApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key")))
            {
                localVarHeaderParams["x-ultracart-browser-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key");
            }
            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("InsertEmailCommseq", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EmailCommseqResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (EmailCommseqResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EmailCommseqResponse)));
        }

        /// <summary>
        /// Insert email commseq 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="emailCommseq">Email commseq</param>
        /// <returns>Task of EmailCommseqResponse</returns>
        public async System.Threading.Tasks.Task<EmailCommseqResponse> InsertEmailCommseqAsync (int? storefrontOid, EmailCommseq emailCommseq)
        {
             ApiResponse<EmailCommseqResponse> localVarResponse = await InsertEmailCommseqAsyncWithHttpInfo(storefrontOid, emailCommseq);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Insert email commseq 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="emailCommseq">Email commseq</param>
        /// <returns>Task of ApiResponse (EmailCommseqResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<EmailCommseqResponse>> InsertEmailCommseqAsyncWithHttpInfo (int? storefrontOid, EmailCommseq emailCommseq)
        {
            // verify the required parameter 'storefrontOid' is set
            if (storefrontOid == null)
                throw new ApiException(400, "Missing required parameter 'storefrontOid' when calling StorefrontApi->InsertEmailCommseq");
            // verify the required parameter 'emailCommseq' is set
            if (emailCommseq == null)
                throw new ApiException(400, "Missing required parameter 'emailCommseq' when calling StorefrontApi->InsertEmailCommseq");

            var localVarPath = "/storefront/{storefront_oid}/email/commseqs";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (storefrontOid != null) localVarPathParams.Add("storefront_oid", this.Configuration.ApiClient.ParameterToString(storefrontOid)); // path parameter
            if (emailCommseq != null && emailCommseq.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(emailCommseq); // http body (model) parameter
            }
            else
            {
                localVarPostBody = emailCommseq; // byte array
            }

            // authentication (ultraCartBrowserApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key")))
            {
                localVarHeaderParams["x-ultracart-browser-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key");
            }
            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("InsertEmailCommseq", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EmailCommseqResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (EmailCommseqResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EmailCommseqResponse)));
        }

        /// <summary>
        /// Insert email email 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="emailCommseqEmail">Email email</param>
        /// <returns>EmailCommseqEmailResponse</returns>
        public EmailCommseqEmailResponse InsertEmailEmail (int? storefrontOid, EmailCommseqEmail emailCommseqEmail)
        {
             ApiResponse<EmailCommseqEmailResponse> localVarResponse = InsertEmailEmailWithHttpInfo(storefrontOid, emailCommseqEmail);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Insert email email 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="emailCommseqEmail">Email email</param>
        /// <returns>ApiResponse of EmailCommseqEmailResponse</returns>
        public ApiResponse< EmailCommseqEmailResponse > InsertEmailEmailWithHttpInfo (int? storefrontOid, EmailCommseqEmail emailCommseqEmail)
        {
            // verify the required parameter 'storefrontOid' is set
            if (storefrontOid == null)
                throw new ApiException(400, "Missing required parameter 'storefrontOid' when calling StorefrontApi->InsertEmailEmail");
            // verify the required parameter 'emailCommseqEmail' is set
            if (emailCommseqEmail == null)
                throw new ApiException(400, "Missing required parameter 'emailCommseqEmail' when calling StorefrontApi->InsertEmailEmail");

            var localVarPath = "/storefront/{storefront_oid}/email/emails";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (storefrontOid != null) localVarPathParams.Add("storefront_oid", this.Configuration.ApiClient.ParameterToString(storefrontOid)); // path parameter
            if (emailCommseqEmail != null && emailCommseqEmail.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(emailCommseqEmail); // http body (model) parameter
            }
            else
            {
                localVarPostBody = emailCommseqEmail; // byte array
            }

            // authentication (ultraCartBrowserApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key")))
            {
                localVarHeaderParams["x-ultracart-browser-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key");
            }
            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("InsertEmailEmail", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EmailCommseqEmailResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (EmailCommseqEmailResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EmailCommseqEmailResponse)));
        }

        /// <summary>
        /// Insert email email 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="emailCommseqEmail">Email email</param>
        /// <returns>Task of EmailCommseqEmailResponse</returns>
        public async System.Threading.Tasks.Task<EmailCommseqEmailResponse> InsertEmailEmailAsync (int? storefrontOid, EmailCommseqEmail emailCommseqEmail)
        {
             ApiResponse<EmailCommseqEmailResponse> localVarResponse = await InsertEmailEmailAsyncWithHttpInfo(storefrontOid, emailCommseqEmail);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Insert email email 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="emailCommseqEmail">Email email</param>
        /// <returns>Task of ApiResponse (EmailCommseqEmailResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<EmailCommseqEmailResponse>> InsertEmailEmailAsyncWithHttpInfo (int? storefrontOid, EmailCommseqEmail emailCommseqEmail)
        {
            // verify the required parameter 'storefrontOid' is set
            if (storefrontOid == null)
                throw new ApiException(400, "Missing required parameter 'storefrontOid' when calling StorefrontApi->InsertEmailEmail");
            // verify the required parameter 'emailCommseqEmail' is set
            if (emailCommseqEmail == null)
                throw new ApiException(400, "Missing required parameter 'emailCommseqEmail' when calling StorefrontApi->InsertEmailEmail");

            var localVarPath = "/storefront/{storefront_oid}/email/emails";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (storefrontOid != null) localVarPathParams.Add("storefront_oid", this.Configuration.ApiClient.ParameterToString(storefrontOid)); // path parameter
            if (emailCommseqEmail != null && emailCommseqEmail.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(emailCommseqEmail); // http body (model) parameter
            }
            else
            {
                localVarPostBody = emailCommseqEmail; // byte array
            }

            // authentication (ultraCartBrowserApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key")))
            {
                localVarHeaderParams["x-ultracart-browser-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key");
            }
            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("InsertEmailEmail", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EmailCommseqEmailResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (EmailCommseqEmailResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EmailCommseqEmailResponse)));
        }

        /// <summary>
        /// Insert email flow 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="emailFlow">Email flow</param>
        /// <returns>EmailFlowResponse</returns>
        public EmailFlowResponse InsertEmailFlow (int? storefrontOid, EmailFlow emailFlow)
        {
             ApiResponse<EmailFlowResponse> localVarResponse = InsertEmailFlowWithHttpInfo(storefrontOid, emailFlow);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Insert email flow 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="emailFlow">Email flow</param>
        /// <returns>ApiResponse of EmailFlowResponse</returns>
        public ApiResponse< EmailFlowResponse > InsertEmailFlowWithHttpInfo (int? storefrontOid, EmailFlow emailFlow)
        {
            // verify the required parameter 'storefrontOid' is set
            if (storefrontOid == null)
                throw new ApiException(400, "Missing required parameter 'storefrontOid' when calling StorefrontApi->InsertEmailFlow");
            // verify the required parameter 'emailFlow' is set
            if (emailFlow == null)
                throw new ApiException(400, "Missing required parameter 'emailFlow' when calling StorefrontApi->InsertEmailFlow");

            var localVarPath = "/storefront/{storefront_oid}/email/flows";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (storefrontOid != null) localVarPathParams.Add("storefront_oid", this.Configuration.ApiClient.ParameterToString(storefrontOid)); // path parameter
            if (emailFlow != null && emailFlow.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(emailFlow); // http body (model) parameter
            }
            else
            {
                localVarPostBody = emailFlow; // byte array
            }

            // authentication (ultraCartBrowserApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key")))
            {
                localVarHeaderParams["x-ultracart-browser-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key");
            }
            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("InsertEmailFlow", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EmailFlowResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (EmailFlowResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EmailFlowResponse)));
        }

        /// <summary>
        /// Insert email flow 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="emailFlow">Email flow</param>
        /// <returns>Task of EmailFlowResponse</returns>
        public async System.Threading.Tasks.Task<EmailFlowResponse> InsertEmailFlowAsync (int? storefrontOid, EmailFlow emailFlow)
        {
             ApiResponse<EmailFlowResponse> localVarResponse = await InsertEmailFlowAsyncWithHttpInfo(storefrontOid, emailFlow);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Insert email flow 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="emailFlow">Email flow</param>
        /// <returns>Task of ApiResponse (EmailFlowResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<EmailFlowResponse>> InsertEmailFlowAsyncWithHttpInfo (int? storefrontOid, EmailFlow emailFlow)
        {
            // verify the required parameter 'storefrontOid' is set
            if (storefrontOid == null)
                throw new ApiException(400, "Missing required parameter 'storefrontOid' when calling StorefrontApi->InsertEmailFlow");
            // verify the required parameter 'emailFlow' is set
            if (emailFlow == null)
                throw new ApiException(400, "Missing required parameter 'emailFlow' when calling StorefrontApi->InsertEmailFlow");

            var localVarPath = "/storefront/{storefront_oid}/email/flows";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (storefrontOid != null) localVarPathParams.Add("storefront_oid", this.Configuration.ApiClient.ParameterToString(storefrontOid)); // path parameter
            if (emailFlow != null && emailFlow.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(emailFlow); // http body (model) parameter
            }
            else
            {
                localVarPostBody = emailFlow; // byte array
            }

            // authentication (ultraCartBrowserApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key")))
            {
                localVarHeaderParams["x-ultracart-browser-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key");
            }
            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("InsertEmailFlow", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EmailFlowResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (EmailFlowResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EmailFlowResponse)));
        }

        /// <summary>
        /// Insert email flow folder 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="emailFlowFolder">Email flow folder</param>
        /// <returns>EmailFlowFolderResponse</returns>
        public EmailFlowFolderResponse InsertEmailFlowFolder (int? storefrontOid, EmailFlowFolder emailFlowFolder)
        {
             ApiResponse<EmailFlowFolderResponse> localVarResponse = InsertEmailFlowFolderWithHttpInfo(storefrontOid, emailFlowFolder);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Insert email flow folder 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="emailFlowFolder">Email flow folder</param>
        /// <returns>ApiResponse of EmailFlowFolderResponse</returns>
        public ApiResponse< EmailFlowFolderResponse > InsertEmailFlowFolderWithHttpInfo (int? storefrontOid, EmailFlowFolder emailFlowFolder)
        {
            // verify the required parameter 'storefrontOid' is set
            if (storefrontOid == null)
                throw new ApiException(400, "Missing required parameter 'storefrontOid' when calling StorefrontApi->InsertEmailFlowFolder");
            // verify the required parameter 'emailFlowFolder' is set
            if (emailFlowFolder == null)
                throw new ApiException(400, "Missing required parameter 'emailFlowFolder' when calling StorefrontApi->InsertEmailFlowFolder");

            var localVarPath = "/storefront/{storefront_oid}/email/flow_folders";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (storefrontOid != null) localVarPathParams.Add("storefront_oid", this.Configuration.ApiClient.ParameterToString(storefrontOid)); // path parameter
            if (emailFlowFolder != null && emailFlowFolder.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(emailFlowFolder); // http body (model) parameter
            }
            else
            {
                localVarPostBody = emailFlowFolder; // byte array
            }

            // authentication (ultraCartBrowserApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key")))
            {
                localVarHeaderParams["x-ultracart-browser-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key");
            }
            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("InsertEmailFlowFolder", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EmailFlowFolderResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (EmailFlowFolderResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EmailFlowFolderResponse)));
        }

        /// <summary>
        /// Insert email flow folder 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="emailFlowFolder">Email flow folder</param>
        /// <returns>Task of EmailFlowFolderResponse</returns>
        public async System.Threading.Tasks.Task<EmailFlowFolderResponse> InsertEmailFlowFolderAsync (int? storefrontOid, EmailFlowFolder emailFlowFolder)
        {
             ApiResponse<EmailFlowFolderResponse> localVarResponse = await InsertEmailFlowFolderAsyncWithHttpInfo(storefrontOid, emailFlowFolder);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Insert email flow folder 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="emailFlowFolder">Email flow folder</param>
        /// <returns>Task of ApiResponse (EmailFlowFolderResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<EmailFlowFolderResponse>> InsertEmailFlowFolderAsyncWithHttpInfo (int? storefrontOid, EmailFlowFolder emailFlowFolder)
        {
            // verify the required parameter 'storefrontOid' is set
            if (storefrontOid == null)
                throw new ApiException(400, "Missing required parameter 'storefrontOid' when calling StorefrontApi->InsertEmailFlowFolder");
            // verify the required parameter 'emailFlowFolder' is set
            if (emailFlowFolder == null)
                throw new ApiException(400, "Missing required parameter 'emailFlowFolder' when calling StorefrontApi->InsertEmailFlowFolder");

            var localVarPath = "/storefront/{storefront_oid}/email/flow_folders";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (storefrontOid != null) localVarPathParams.Add("storefront_oid", this.Configuration.ApiClient.ParameterToString(storefrontOid)); // path parameter
            if (emailFlowFolder != null && emailFlowFolder.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(emailFlowFolder); // http body (model) parameter
            }
            else
            {
                localVarPostBody = emailFlowFolder; // byte array
            }

            // authentication (ultraCartBrowserApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key")))
            {
                localVarHeaderParams["x-ultracart-browser-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key");
            }
            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("InsertEmailFlowFolder", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EmailFlowFolderResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (EmailFlowFolderResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EmailFlowFolderResponse)));
        }

        /// <summary>
        /// Insert email list 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="emailList">Email list</param>
        /// <returns>EmailListResponse</returns>
        public EmailListResponse InsertEmailList (int? storefrontOid, EmailList emailList)
        {
             ApiResponse<EmailListResponse> localVarResponse = InsertEmailListWithHttpInfo(storefrontOid, emailList);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Insert email list 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="emailList">Email list</param>
        /// <returns>ApiResponse of EmailListResponse</returns>
        public ApiResponse< EmailListResponse > InsertEmailListWithHttpInfo (int? storefrontOid, EmailList emailList)
        {
            // verify the required parameter 'storefrontOid' is set
            if (storefrontOid == null)
                throw new ApiException(400, "Missing required parameter 'storefrontOid' when calling StorefrontApi->InsertEmailList");
            // verify the required parameter 'emailList' is set
            if (emailList == null)
                throw new ApiException(400, "Missing required parameter 'emailList' when calling StorefrontApi->InsertEmailList");

            var localVarPath = "/storefront/{storefront_oid}/email/lists";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (storefrontOid != null) localVarPathParams.Add("storefront_oid", this.Configuration.ApiClient.ParameterToString(storefrontOid)); // path parameter
            if (emailList != null && emailList.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(emailList); // http body (model) parameter
            }
            else
            {
                localVarPostBody = emailList; // byte array
            }

            // authentication (ultraCartBrowserApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key")))
            {
                localVarHeaderParams["x-ultracart-browser-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key");
            }
            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("InsertEmailList", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EmailListResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (EmailListResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EmailListResponse)));
        }

        /// <summary>
        /// Insert email list 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="emailList">Email list</param>
        /// <returns>Task of EmailListResponse</returns>
        public async System.Threading.Tasks.Task<EmailListResponse> InsertEmailListAsync (int? storefrontOid, EmailList emailList)
        {
             ApiResponse<EmailListResponse> localVarResponse = await InsertEmailListAsyncWithHttpInfo(storefrontOid, emailList);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Insert email list 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="emailList">Email list</param>
        /// <returns>Task of ApiResponse (EmailListResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<EmailListResponse>> InsertEmailListAsyncWithHttpInfo (int? storefrontOid, EmailList emailList)
        {
            // verify the required parameter 'storefrontOid' is set
            if (storefrontOid == null)
                throw new ApiException(400, "Missing required parameter 'storefrontOid' when calling StorefrontApi->InsertEmailList");
            // verify the required parameter 'emailList' is set
            if (emailList == null)
                throw new ApiException(400, "Missing required parameter 'emailList' when calling StorefrontApi->InsertEmailList");

            var localVarPath = "/storefront/{storefront_oid}/email/lists";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (storefrontOid != null) localVarPathParams.Add("storefront_oid", this.Configuration.ApiClient.ParameterToString(storefrontOid)); // path parameter
            if (emailList != null && emailList.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(emailList); // http body (model) parameter
            }
            else
            {
                localVarPostBody = emailList; // byte array
            }

            // authentication (ultraCartBrowserApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key")))
            {
                localVarHeaderParams["x-ultracart-browser-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key");
            }
            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("InsertEmailList", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EmailListResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (EmailListResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EmailListResponse)));
        }

        /// <summary>
        /// Insert email campaign folder 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="emailListSegmentFolder">Email campaign folder</param>
        /// <returns>EmailListSegmentFolderResponse</returns>
        public EmailListSegmentFolderResponse InsertEmailListSegmentFolder (int? storefrontOid, EmailListSegmentFolder emailListSegmentFolder)
        {
             ApiResponse<EmailListSegmentFolderResponse> localVarResponse = InsertEmailListSegmentFolderWithHttpInfo(storefrontOid, emailListSegmentFolder);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Insert email campaign folder 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="emailListSegmentFolder">Email campaign folder</param>
        /// <returns>ApiResponse of EmailListSegmentFolderResponse</returns>
        public ApiResponse< EmailListSegmentFolderResponse > InsertEmailListSegmentFolderWithHttpInfo (int? storefrontOid, EmailListSegmentFolder emailListSegmentFolder)
        {
            // verify the required parameter 'storefrontOid' is set
            if (storefrontOid == null)
                throw new ApiException(400, "Missing required parameter 'storefrontOid' when calling StorefrontApi->InsertEmailListSegmentFolder");
            // verify the required parameter 'emailListSegmentFolder' is set
            if (emailListSegmentFolder == null)
                throw new ApiException(400, "Missing required parameter 'emailListSegmentFolder' when calling StorefrontApi->InsertEmailListSegmentFolder");

            var localVarPath = "/storefront/{storefront_oid}/email/list_segment_folders";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (storefrontOid != null) localVarPathParams.Add("storefront_oid", this.Configuration.ApiClient.ParameterToString(storefrontOid)); // path parameter
            if (emailListSegmentFolder != null && emailListSegmentFolder.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(emailListSegmentFolder); // http body (model) parameter
            }
            else
            {
                localVarPostBody = emailListSegmentFolder; // byte array
            }

            // authentication (ultraCartBrowserApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key")))
            {
                localVarHeaderParams["x-ultracart-browser-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key");
            }
            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("InsertEmailListSegmentFolder", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EmailListSegmentFolderResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (EmailListSegmentFolderResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EmailListSegmentFolderResponse)));
        }

        /// <summary>
        /// Insert email campaign folder 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="emailListSegmentFolder">Email campaign folder</param>
        /// <returns>Task of EmailListSegmentFolderResponse</returns>
        public async System.Threading.Tasks.Task<EmailListSegmentFolderResponse> InsertEmailListSegmentFolderAsync (int? storefrontOid, EmailListSegmentFolder emailListSegmentFolder)
        {
             ApiResponse<EmailListSegmentFolderResponse> localVarResponse = await InsertEmailListSegmentFolderAsyncWithHttpInfo(storefrontOid, emailListSegmentFolder);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Insert email campaign folder 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="emailListSegmentFolder">Email campaign folder</param>
        /// <returns>Task of ApiResponse (EmailListSegmentFolderResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<EmailListSegmentFolderResponse>> InsertEmailListSegmentFolderAsyncWithHttpInfo (int? storefrontOid, EmailListSegmentFolder emailListSegmentFolder)
        {
            // verify the required parameter 'storefrontOid' is set
            if (storefrontOid == null)
                throw new ApiException(400, "Missing required parameter 'storefrontOid' when calling StorefrontApi->InsertEmailListSegmentFolder");
            // verify the required parameter 'emailListSegmentFolder' is set
            if (emailListSegmentFolder == null)
                throw new ApiException(400, "Missing required parameter 'emailListSegmentFolder' when calling StorefrontApi->InsertEmailListSegmentFolder");

            var localVarPath = "/storefront/{storefront_oid}/email/list_segment_folders";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (storefrontOid != null) localVarPathParams.Add("storefront_oid", this.Configuration.ApiClient.ParameterToString(storefrontOid)); // path parameter
            if (emailListSegmentFolder != null && emailListSegmentFolder.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(emailListSegmentFolder); // http body (model) parameter
            }
            else
            {
                localVarPostBody = emailListSegmentFolder; // byte array
            }

            // authentication (ultraCartBrowserApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key")))
            {
                localVarHeaderParams["x-ultracart-browser-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key");
            }
            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("InsertEmailListSegmentFolder", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EmailListSegmentFolderResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (EmailListSegmentFolderResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EmailListSegmentFolderResponse)));
        }

        /// <summary>
        /// Insert email postcard 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="emailCommseqPostcard">Email postcard</param>
        /// <returns>EmailCommseqPostcardResponse</returns>
        public EmailCommseqPostcardResponse InsertEmailPostcard (int? storefrontOid, EmailCommseqPostcard emailCommseqPostcard)
        {
             ApiResponse<EmailCommseqPostcardResponse> localVarResponse = InsertEmailPostcardWithHttpInfo(storefrontOid, emailCommseqPostcard);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Insert email postcard 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="emailCommseqPostcard">Email postcard</param>
        /// <returns>ApiResponse of EmailCommseqPostcardResponse</returns>
        public ApiResponse< EmailCommseqPostcardResponse > InsertEmailPostcardWithHttpInfo (int? storefrontOid, EmailCommseqPostcard emailCommseqPostcard)
        {
            // verify the required parameter 'storefrontOid' is set
            if (storefrontOid == null)
                throw new ApiException(400, "Missing required parameter 'storefrontOid' when calling StorefrontApi->InsertEmailPostcard");
            // verify the required parameter 'emailCommseqPostcard' is set
            if (emailCommseqPostcard == null)
                throw new ApiException(400, "Missing required parameter 'emailCommseqPostcard' when calling StorefrontApi->InsertEmailPostcard");

            var localVarPath = "/storefront/{storefront_oid}/email/postcards";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (storefrontOid != null) localVarPathParams.Add("storefront_oid", this.Configuration.ApiClient.ParameterToString(storefrontOid)); // path parameter
            if (emailCommseqPostcard != null && emailCommseqPostcard.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(emailCommseqPostcard); // http body (model) parameter
            }
            else
            {
                localVarPostBody = emailCommseqPostcard; // byte array
            }

            // authentication (ultraCartBrowserApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key")))
            {
                localVarHeaderParams["x-ultracart-browser-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key");
            }
            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("InsertEmailPostcard", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EmailCommseqPostcardResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (EmailCommseqPostcardResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EmailCommseqPostcardResponse)));
        }

        /// <summary>
        /// Insert email postcard 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="emailCommseqPostcard">Email postcard</param>
        /// <returns>Task of EmailCommseqPostcardResponse</returns>
        public async System.Threading.Tasks.Task<EmailCommseqPostcardResponse> InsertEmailPostcardAsync (int? storefrontOid, EmailCommseqPostcard emailCommseqPostcard)
        {
             ApiResponse<EmailCommseqPostcardResponse> localVarResponse = await InsertEmailPostcardAsyncWithHttpInfo(storefrontOid, emailCommseqPostcard);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Insert email postcard 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="emailCommseqPostcard">Email postcard</param>
        /// <returns>Task of ApiResponse (EmailCommseqPostcardResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<EmailCommseqPostcardResponse>> InsertEmailPostcardAsyncWithHttpInfo (int? storefrontOid, EmailCommseqPostcard emailCommseqPostcard)
        {
            // verify the required parameter 'storefrontOid' is set
            if (storefrontOid == null)
                throw new ApiException(400, "Missing required parameter 'storefrontOid' when calling StorefrontApi->InsertEmailPostcard");
            // verify the required parameter 'emailCommseqPostcard' is set
            if (emailCommseqPostcard == null)
                throw new ApiException(400, "Missing required parameter 'emailCommseqPostcard' when calling StorefrontApi->InsertEmailPostcard");

            var localVarPath = "/storefront/{storefront_oid}/email/postcards";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (storefrontOid != null) localVarPathParams.Add("storefront_oid", this.Configuration.ApiClient.ParameterToString(storefrontOid)); // path parameter
            if (emailCommseqPostcard != null && emailCommseqPostcard.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(emailCommseqPostcard); // http body (model) parameter
            }
            else
            {
                localVarPostBody = emailCommseqPostcard; // byte array
            }

            // authentication (ultraCartBrowserApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key")))
            {
                localVarHeaderParams["x-ultracart-browser-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key");
            }
            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("InsertEmailPostcard", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EmailCommseqPostcardResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (EmailCommseqPostcardResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EmailCommseqPostcardResponse)));
        }

        /// <summary>
        /// Insert email segment 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="emailSegment">Email segment</param>
        /// <returns>EmailSegmentResponse</returns>
        public EmailSegmentResponse InsertEmailSegment (int? storefrontOid, EmailSegment emailSegment)
        {
             ApiResponse<EmailSegmentResponse> localVarResponse = InsertEmailSegmentWithHttpInfo(storefrontOid, emailSegment);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Insert email segment 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="emailSegment">Email segment</param>
        /// <returns>ApiResponse of EmailSegmentResponse</returns>
        public ApiResponse< EmailSegmentResponse > InsertEmailSegmentWithHttpInfo (int? storefrontOid, EmailSegment emailSegment)
        {
            // verify the required parameter 'storefrontOid' is set
            if (storefrontOid == null)
                throw new ApiException(400, "Missing required parameter 'storefrontOid' when calling StorefrontApi->InsertEmailSegment");
            // verify the required parameter 'emailSegment' is set
            if (emailSegment == null)
                throw new ApiException(400, "Missing required parameter 'emailSegment' when calling StorefrontApi->InsertEmailSegment");

            var localVarPath = "/storefront/{storefront_oid}/email/segments";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (storefrontOid != null) localVarPathParams.Add("storefront_oid", this.Configuration.ApiClient.ParameterToString(storefrontOid)); // path parameter
            if (emailSegment != null && emailSegment.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(emailSegment); // http body (model) parameter
            }
            else
            {
                localVarPostBody = emailSegment; // byte array
            }

            // authentication (ultraCartBrowserApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key")))
            {
                localVarHeaderParams["x-ultracart-browser-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key");
            }
            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("InsertEmailSegment", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EmailSegmentResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (EmailSegmentResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EmailSegmentResponse)));
        }

        /// <summary>
        /// Insert email segment 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="emailSegment">Email segment</param>
        /// <returns>Task of EmailSegmentResponse</returns>
        public async System.Threading.Tasks.Task<EmailSegmentResponse> InsertEmailSegmentAsync (int? storefrontOid, EmailSegment emailSegment)
        {
             ApiResponse<EmailSegmentResponse> localVarResponse = await InsertEmailSegmentAsyncWithHttpInfo(storefrontOid, emailSegment);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Insert email segment 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="emailSegment">Email segment</param>
        /// <returns>Task of ApiResponse (EmailSegmentResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<EmailSegmentResponse>> InsertEmailSegmentAsyncWithHttpInfo (int? storefrontOid, EmailSegment emailSegment)
        {
            // verify the required parameter 'storefrontOid' is set
            if (storefrontOid == null)
                throw new ApiException(400, "Missing required parameter 'storefrontOid' when calling StorefrontApi->InsertEmailSegment");
            // verify the required parameter 'emailSegment' is set
            if (emailSegment == null)
                throw new ApiException(400, "Missing required parameter 'emailSegment' when calling StorefrontApi->InsertEmailSegment");

            var localVarPath = "/storefront/{storefront_oid}/email/segments";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (storefrontOid != null) localVarPathParams.Add("storefront_oid", this.Configuration.ApiClient.ParameterToString(storefrontOid)); // path parameter
            if (emailSegment != null && emailSegment.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(emailSegment); // http body (model) parameter
            }
            else
            {
                localVarPostBody = emailSegment; // byte array
            }

            // authentication (ultraCartBrowserApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key")))
            {
                localVarHeaderParams["x-ultracart-browser-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key");
            }
            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("InsertEmailSegment", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EmailSegmentResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (EmailSegmentResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EmailSegmentResponse)));
        }

        /// <summary>
        /// Insert screen recording segment 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="segment">Segment</param>
        /// <returns>ScreenRecordingSegmentResponse</returns>
        public ScreenRecordingSegmentResponse InsertScreenRecordingSegment (int? storefrontOid, ScreenRecordingSegment segment)
        {
             ApiResponse<ScreenRecordingSegmentResponse> localVarResponse = InsertScreenRecordingSegmentWithHttpInfo(storefrontOid, segment);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Insert screen recording segment 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="segment">Segment</param>
        /// <returns>ApiResponse of ScreenRecordingSegmentResponse</returns>
        public ApiResponse< ScreenRecordingSegmentResponse > InsertScreenRecordingSegmentWithHttpInfo (int? storefrontOid, ScreenRecordingSegment segment)
        {
            // verify the required parameter 'storefrontOid' is set
            if (storefrontOid == null)
                throw new ApiException(400, "Missing required parameter 'storefrontOid' when calling StorefrontApi->InsertScreenRecordingSegment");
            // verify the required parameter 'segment' is set
            if (segment == null)
                throw new ApiException(400, "Missing required parameter 'segment' when calling StorefrontApi->InsertScreenRecordingSegment");

            var localVarPath = "/storefront/{storefront_oid}/screen_recordings/segments";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (storefrontOid != null) localVarPathParams.Add("storefront_oid", this.Configuration.ApiClient.ParameterToString(storefrontOid)); // path parameter
            if (segment != null && segment.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(segment); // http body (model) parameter
            }
            else
            {
                localVarPostBody = segment; // byte array
            }

            // authentication (ultraCartBrowserApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key")))
            {
                localVarHeaderParams["x-ultracart-browser-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key");
            }
            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("InsertScreenRecordingSegment", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ScreenRecordingSegmentResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ScreenRecordingSegmentResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ScreenRecordingSegmentResponse)));
        }

        /// <summary>
        /// Insert screen recording segment 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="segment">Segment</param>
        /// <returns>Task of ScreenRecordingSegmentResponse</returns>
        public async System.Threading.Tasks.Task<ScreenRecordingSegmentResponse> InsertScreenRecordingSegmentAsync (int? storefrontOid, ScreenRecordingSegment segment)
        {
             ApiResponse<ScreenRecordingSegmentResponse> localVarResponse = await InsertScreenRecordingSegmentAsyncWithHttpInfo(storefrontOid, segment);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Insert screen recording segment 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="segment">Segment</param>
        /// <returns>Task of ApiResponse (ScreenRecordingSegmentResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ScreenRecordingSegmentResponse>> InsertScreenRecordingSegmentAsyncWithHttpInfo (int? storefrontOid, ScreenRecordingSegment segment)
        {
            // verify the required parameter 'storefrontOid' is set
            if (storefrontOid == null)
                throw new ApiException(400, "Missing required parameter 'storefrontOid' when calling StorefrontApi->InsertScreenRecordingSegment");
            // verify the required parameter 'segment' is set
            if (segment == null)
                throw new ApiException(400, "Missing required parameter 'segment' when calling StorefrontApi->InsertScreenRecordingSegment");

            var localVarPath = "/storefront/{storefront_oid}/screen_recordings/segments";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (storefrontOid != null) localVarPathParams.Add("storefront_oid", this.Configuration.ApiClient.ParameterToString(storefrontOid)); // path parameter
            if (segment != null && segment.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(segment); // http body (model) parameter
            }
            else
            {
                localVarPostBody = segment; // byte array
            }

            // authentication (ultraCartBrowserApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key")))
            {
                localVarHeaderParams["x-ultracart-browser-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key");
            }
            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("InsertScreenRecordingSegment", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ScreenRecordingSegmentResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ScreenRecordingSegmentResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ScreenRecordingSegmentResponse)));
        }

        /// <summary>
        /// Prepare download of email segment 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="emailSegmentUuid"></param>
        /// <returns>EmailSegmentDownloadPrepareResponse</returns>
        public EmailSegmentDownloadPrepareResponse PrepareDownloadEmailSegment (int? storefrontOid, string emailSegmentUuid)
        {
             ApiResponse<EmailSegmentDownloadPrepareResponse> localVarResponse = PrepareDownloadEmailSegmentWithHttpInfo(storefrontOid, emailSegmentUuid);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Prepare download of email segment 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="emailSegmentUuid"></param>
        /// <returns>ApiResponse of EmailSegmentDownloadPrepareResponse</returns>
        public ApiResponse< EmailSegmentDownloadPrepareResponse > PrepareDownloadEmailSegmentWithHttpInfo (int? storefrontOid, string emailSegmentUuid)
        {
            // verify the required parameter 'storefrontOid' is set
            if (storefrontOid == null)
                throw new ApiException(400, "Missing required parameter 'storefrontOid' when calling StorefrontApi->PrepareDownloadEmailSegment");
            // verify the required parameter 'emailSegmentUuid' is set
            if (emailSegmentUuid == null)
                throw new ApiException(400, "Missing required parameter 'emailSegmentUuid' when calling StorefrontApi->PrepareDownloadEmailSegment");

            var localVarPath = "/storefront/{storefront_oid}/email/segments/{email_segment_uuid}/downloadPrepare";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (storefrontOid != null) localVarPathParams.Add("storefront_oid", this.Configuration.ApiClient.ParameterToString(storefrontOid)); // path parameter
            if (emailSegmentUuid != null) localVarPathParams.Add("email_segment_uuid", this.Configuration.ApiClient.ParameterToString(emailSegmentUuid)); // path parameter

            // authentication (ultraCartBrowserApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key")))
            {
                localVarHeaderParams["x-ultracart-browser-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key");
            }
            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PrepareDownloadEmailSegment", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EmailSegmentDownloadPrepareResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (EmailSegmentDownloadPrepareResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EmailSegmentDownloadPrepareResponse)));
        }

        /// <summary>
        /// Prepare download of email segment 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="emailSegmentUuid"></param>
        /// <returns>Task of EmailSegmentDownloadPrepareResponse</returns>
        public async System.Threading.Tasks.Task<EmailSegmentDownloadPrepareResponse> PrepareDownloadEmailSegmentAsync (int? storefrontOid, string emailSegmentUuid)
        {
             ApiResponse<EmailSegmentDownloadPrepareResponse> localVarResponse = await PrepareDownloadEmailSegmentAsyncWithHttpInfo(storefrontOid, emailSegmentUuid);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Prepare download of email segment 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="emailSegmentUuid"></param>
        /// <returns>Task of ApiResponse (EmailSegmentDownloadPrepareResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<EmailSegmentDownloadPrepareResponse>> PrepareDownloadEmailSegmentAsyncWithHttpInfo (int? storefrontOid, string emailSegmentUuid)
        {
            // verify the required parameter 'storefrontOid' is set
            if (storefrontOid == null)
                throw new ApiException(400, "Missing required parameter 'storefrontOid' when calling StorefrontApi->PrepareDownloadEmailSegment");
            // verify the required parameter 'emailSegmentUuid' is set
            if (emailSegmentUuid == null)
                throw new ApiException(400, "Missing required parameter 'emailSegmentUuid' when calling StorefrontApi->PrepareDownloadEmailSegment");

            var localVarPath = "/storefront/{storefront_oid}/email/segments/{email_segment_uuid}/downloadPrepare";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (storefrontOid != null) localVarPathParams.Add("storefront_oid", this.Configuration.ApiClient.ParameterToString(storefrontOid)); // path parameter
            if (emailSegmentUuid != null) localVarPathParams.Add("email_segment_uuid", this.Configuration.ApiClient.ParameterToString(emailSegmentUuid)); // path parameter

            // authentication (ultraCartBrowserApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key")))
            {
                localVarHeaderParams["x-ultracart-browser-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key");
            }
            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PrepareDownloadEmailSegment", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EmailSegmentDownloadPrepareResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (EmailSegmentDownloadPrepareResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EmailSegmentDownloadPrepareResponse)));
        }

        /// <summary>
        /// Publish library item. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="libraryItemOid"></param>
        /// <param name="publishLibraryRequest">Publish library item request</param>
        /// <returns>LibraryItemResponse</returns>
        public LibraryItemResponse PublishLibraryItem (int? libraryItemOid, PublishLibraryItemRequest publishLibraryRequest)
        {
             ApiResponse<LibraryItemResponse> localVarResponse = PublishLibraryItemWithHttpInfo(libraryItemOid, publishLibraryRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Publish library item. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="libraryItemOid"></param>
        /// <param name="publishLibraryRequest">Publish library item request</param>
        /// <returns>ApiResponse of LibraryItemResponse</returns>
        public ApiResponse< LibraryItemResponse > PublishLibraryItemWithHttpInfo (int? libraryItemOid, PublishLibraryItemRequest publishLibraryRequest)
        {
            // verify the required parameter 'libraryItemOid' is set
            if (libraryItemOid == null)
                throw new ApiException(400, "Missing required parameter 'libraryItemOid' when calling StorefrontApi->PublishLibraryItem");
            // verify the required parameter 'publishLibraryRequest' is set
            if (publishLibraryRequest == null)
                throw new ApiException(400, "Missing required parameter 'publishLibraryRequest' when calling StorefrontApi->PublishLibraryItem");

            var localVarPath = "/storefront/code_library/{library_item_oid}/publish";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (libraryItemOid != null) localVarPathParams.Add("library_item_oid", this.Configuration.ApiClient.ParameterToString(libraryItemOid)); // path parameter
            if (publishLibraryRequest != null && publishLibraryRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(publishLibraryRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = publishLibraryRequest; // byte array
            }

            // authentication (ultraCartBrowserApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key")))
            {
                localVarHeaderParams["x-ultracart-browser-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key");
            }
            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PublishLibraryItem", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<LibraryItemResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (LibraryItemResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(LibraryItemResponse)));
        }

        /// <summary>
        /// Publish library item. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="libraryItemOid"></param>
        /// <param name="publishLibraryRequest">Publish library item request</param>
        /// <returns>Task of LibraryItemResponse</returns>
        public async System.Threading.Tasks.Task<LibraryItemResponse> PublishLibraryItemAsync (int? libraryItemOid, PublishLibraryItemRequest publishLibraryRequest)
        {
             ApiResponse<LibraryItemResponse> localVarResponse = await PublishLibraryItemAsyncWithHttpInfo(libraryItemOid, publishLibraryRequest);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Publish library item. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="libraryItemOid"></param>
        /// <param name="publishLibraryRequest">Publish library item request</param>
        /// <returns>Task of ApiResponse (LibraryItemResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<LibraryItemResponse>> PublishLibraryItemAsyncWithHttpInfo (int? libraryItemOid, PublishLibraryItemRequest publishLibraryRequest)
        {
            // verify the required parameter 'libraryItemOid' is set
            if (libraryItemOid == null)
                throw new ApiException(400, "Missing required parameter 'libraryItemOid' when calling StorefrontApi->PublishLibraryItem");
            // verify the required parameter 'publishLibraryRequest' is set
            if (publishLibraryRequest == null)
                throw new ApiException(400, "Missing required parameter 'publishLibraryRequest' when calling StorefrontApi->PublishLibraryItem");

            var localVarPath = "/storefront/code_library/{library_item_oid}/publish";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (libraryItemOid != null) localVarPathParams.Add("library_item_oid", this.Configuration.ApiClient.ParameterToString(libraryItemOid)); // path parameter
            if (publishLibraryRequest != null && publishLibraryRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(publishLibraryRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = publishLibraryRequest; // byte array
            }

            // authentication (ultraCartBrowserApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key")))
            {
                localVarHeaderParams["x-ultracart-browser-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key");
            }
            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PublishLibraryItem", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<LibraryItemResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (LibraryItemResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(LibraryItemResponse)));
        }

        /// <summary>
        /// Purchase public library item, which creates a copy of the item in your personal code library 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="libraryItemOid"></param>
        /// <param name="storefrontOid"> (optional)</param>
        /// <returns>LibraryItemResponse</returns>
        public LibraryItemResponse PurchaseLibraryItem (int? libraryItemOid, int? storefrontOid = null)
        {
             ApiResponse<LibraryItemResponse> localVarResponse = PurchaseLibraryItemWithHttpInfo(libraryItemOid, storefrontOid);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Purchase public library item, which creates a copy of the item in your personal code library 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="libraryItemOid"></param>
        /// <param name="storefrontOid"> (optional)</param>
        /// <returns>ApiResponse of LibraryItemResponse</returns>
        public ApiResponse< LibraryItemResponse > PurchaseLibraryItemWithHttpInfo (int? libraryItemOid, int? storefrontOid = null)
        {
            // verify the required parameter 'libraryItemOid' is set
            if (libraryItemOid == null)
                throw new ApiException(400, "Missing required parameter 'libraryItemOid' when calling StorefrontApi->PurchaseLibraryItem");

            var localVarPath = "/storefront/code_library/{library_item_oid}/purchase";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (libraryItemOid != null) localVarPathParams.Add("library_item_oid", this.Configuration.ApiClient.ParameterToString(libraryItemOid)); // path parameter
            if (storefrontOid != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "storefront_oid", storefrontOid)); // query parameter

            // authentication (ultraCartBrowserApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key")))
            {
                localVarHeaderParams["x-ultracart-browser-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key");
            }
            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PurchaseLibraryItem", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<LibraryItemResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (LibraryItemResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(LibraryItemResponse)));
        }

        /// <summary>
        /// Purchase public library item, which creates a copy of the item in your personal code library 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="libraryItemOid"></param>
        /// <param name="storefrontOid"> (optional)</param>
        /// <returns>Task of LibraryItemResponse</returns>
        public async System.Threading.Tasks.Task<LibraryItemResponse> PurchaseLibraryItemAsync (int? libraryItemOid, int? storefrontOid = null)
        {
             ApiResponse<LibraryItemResponse> localVarResponse = await PurchaseLibraryItemAsyncWithHttpInfo(libraryItemOid, storefrontOid);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Purchase public library item, which creates a copy of the item in your personal code library 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="libraryItemOid"></param>
        /// <param name="storefrontOid"> (optional)</param>
        /// <returns>Task of ApiResponse (LibraryItemResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<LibraryItemResponse>> PurchaseLibraryItemAsyncWithHttpInfo (int? libraryItemOid, int? storefrontOid = null)
        {
            // verify the required parameter 'libraryItemOid' is set
            if (libraryItemOid == null)
                throw new ApiException(400, "Missing required parameter 'libraryItemOid' when calling StorefrontApi->PurchaseLibraryItem");

            var localVarPath = "/storefront/code_library/{library_item_oid}/purchase";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (libraryItemOid != null) localVarPathParams.Add("library_item_oid", this.Configuration.ApiClient.ParameterToString(libraryItemOid)); // path parameter
            if (storefrontOid != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "storefront_oid", storefrontOid)); // query parameter

            // authentication (ultraCartBrowserApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key")))
            {
                localVarHeaderParams["x-ultracart-browser-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key");
            }
            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PurchaseLibraryItem", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<LibraryItemResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (LibraryItemResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(LibraryItemResponse)));
        }

        /// <summary>
        /// Release email communication sequence customers waiting at the specified step 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="commseqUuid"></param>
        /// <param name="commseqStepUuid"></param>
        /// <returns></returns>
        public void ReleaseEmailCommseqStepWaiting (int? storefrontOid, string commseqUuid, string commseqStepUuid)
        {
             ReleaseEmailCommseqStepWaitingWithHttpInfo(storefrontOid, commseqUuid, commseqStepUuid);
        }

        /// <summary>
        /// Release email communication sequence customers waiting at the specified step 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="commseqUuid"></param>
        /// <param name="commseqStepUuid"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> ReleaseEmailCommseqStepWaitingWithHttpInfo (int? storefrontOid, string commseqUuid, string commseqStepUuid)
        {
            // verify the required parameter 'storefrontOid' is set
            if (storefrontOid == null)
                throw new ApiException(400, "Missing required parameter 'storefrontOid' when calling StorefrontApi->ReleaseEmailCommseqStepWaiting");
            // verify the required parameter 'commseqUuid' is set
            if (commseqUuid == null)
                throw new ApiException(400, "Missing required parameter 'commseqUuid' when calling StorefrontApi->ReleaseEmailCommseqStepWaiting");
            // verify the required parameter 'commseqStepUuid' is set
            if (commseqStepUuid == null)
                throw new ApiException(400, "Missing required parameter 'commseqStepUuid' when calling StorefrontApi->ReleaseEmailCommseqStepWaiting");

            var localVarPath = "/storefront/{storefront_oid}/email/commseqs/{commseq_uuid}/waiting/{commseq_step_uuid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (storefrontOid != null) localVarPathParams.Add("storefront_oid", this.Configuration.ApiClient.ParameterToString(storefrontOid)); // path parameter
            if (commseqUuid != null) localVarPathParams.Add("commseq_uuid", this.Configuration.ApiClient.ParameterToString(commseqUuid)); // path parameter
            if (commseqStepUuid != null) localVarPathParams.Add("commseq_step_uuid", this.Configuration.ApiClient.ParameterToString(commseqStepUuid)); // path parameter

            // authentication (ultraCartBrowserApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key")))
            {
                localVarHeaderParams["x-ultracart-browser-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key");
            }
            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReleaseEmailCommseqStepWaiting", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Release email communication sequence customers waiting at the specified step 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="commseqUuid"></param>
        /// <param name="commseqStepUuid"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ReleaseEmailCommseqStepWaitingAsync (int? storefrontOid, string commseqUuid, string commseqStepUuid)
        {
             await ReleaseEmailCommseqStepWaitingAsyncWithHttpInfo(storefrontOid, commseqUuid, commseqStepUuid);

        }

        /// <summary>
        /// Release email communication sequence customers waiting at the specified step 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="commseqUuid"></param>
        /// <param name="commseqStepUuid"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> ReleaseEmailCommseqStepWaitingAsyncWithHttpInfo (int? storefrontOid, string commseqUuid, string commseqStepUuid)
        {
            // verify the required parameter 'storefrontOid' is set
            if (storefrontOid == null)
                throw new ApiException(400, "Missing required parameter 'storefrontOid' when calling StorefrontApi->ReleaseEmailCommseqStepWaiting");
            // verify the required parameter 'commseqUuid' is set
            if (commseqUuid == null)
                throw new ApiException(400, "Missing required parameter 'commseqUuid' when calling StorefrontApi->ReleaseEmailCommseqStepWaiting");
            // verify the required parameter 'commseqStepUuid' is set
            if (commseqStepUuid == null)
                throw new ApiException(400, "Missing required parameter 'commseqStepUuid' when calling StorefrontApi->ReleaseEmailCommseqStepWaiting");

            var localVarPath = "/storefront/{storefront_oid}/email/commseqs/{commseq_uuid}/waiting/{commseq_step_uuid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (storefrontOid != null) localVarPathParams.Add("storefront_oid", this.Configuration.ApiClient.ParameterToString(storefrontOid)); // path parameter
            if (commseqUuid != null) localVarPathParams.Add("commseq_uuid", this.Configuration.ApiClient.ParameterToString(commseqUuid)); // path parameter
            if (commseqStepUuid != null) localVarPathParams.Add("commseq_step_uuid", this.Configuration.ApiClient.ParameterToString(commseqStepUuid)); // path parameter

            // authentication (ultraCartBrowserApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key")))
            {
                localVarHeaderParams["x-ultracart-browser-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key");
            }
            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReleaseEmailCommseqStepWaiting", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Request a review of an email 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="commseqEmailUuid"></param>
        /// <param name="emailCommseqEmailReviewRequest">Email commseq email review request</param>
        /// <returns>EmailCommseqEmailSendTestResponse</returns>
        public EmailCommseqEmailSendTestResponse Review (int? storefrontOid, string commseqEmailUuid, EmailCommseqEmailSendTestRequest emailCommseqEmailReviewRequest)
        {
             ApiResponse<EmailCommseqEmailSendTestResponse> localVarResponse = ReviewWithHttpInfo(storefrontOid, commseqEmailUuid, emailCommseqEmailReviewRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Request a review of an email 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="commseqEmailUuid"></param>
        /// <param name="emailCommseqEmailReviewRequest">Email commseq email review request</param>
        /// <returns>ApiResponse of EmailCommseqEmailSendTestResponse</returns>
        public ApiResponse< EmailCommseqEmailSendTestResponse > ReviewWithHttpInfo (int? storefrontOid, string commseqEmailUuid, EmailCommseqEmailSendTestRequest emailCommseqEmailReviewRequest)
        {
            // verify the required parameter 'storefrontOid' is set
            if (storefrontOid == null)
                throw new ApiException(400, "Missing required parameter 'storefrontOid' when calling StorefrontApi->Review");
            // verify the required parameter 'commseqEmailUuid' is set
            if (commseqEmailUuid == null)
                throw new ApiException(400, "Missing required parameter 'commseqEmailUuid' when calling StorefrontApi->Review");
            // verify the required parameter 'emailCommseqEmailReviewRequest' is set
            if (emailCommseqEmailReviewRequest == null)
                throw new ApiException(400, "Missing required parameter 'emailCommseqEmailReviewRequest' when calling StorefrontApi->Review");

            var localVarPath = "/storefront/{storefront_oid}/email/emails/{commseq_email_uuid}/review";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (storefrontOid != null) localVarPathParams.Add("storefront_oid", this.Configuration.ApiClient.ParameterToString(storefrontOid)); // path parameter
            if (commseqEmailUuid != null) localVarPathParams.Add("commseq_email_uuid", this.Configuration.ApiClient.ParameterToString(commseqEmailUuid)); // path parameter
            if (emailCommseqEmailReviewRequest != null && emailCommseqEmailReviewRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(emailCommseqEmailReviewRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = emailCommseqEmailReviewRequest; // byte array
            }

            // authentication (ultraCartBrowserApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key")))
            {
                localVarHeaderParams["x-ultracart-browser-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key");
            }
            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Review", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EmailCommseqEmailSendTestResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (EmailCommseqEmailSendTestResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EmailCommseqEmailSendTestResponse)));
        }

        /// <summary>
        /// Request a review of an email 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="commseqEmailUuid"></param>
        /// <param name="emailCommseqEmailReviewRequest">Email commseq email review request</param>
        /// <returns>Task of EmailCommseqEmailSendTestResponse</returns>
        public async System.Threading.Tasks.Task<EmailCommseqEmailSendTestResponse> ReviewAsync (int? storefrontOid, string commseqEmailUuid, EmailCommseqEmailSendTestRequest emailCommseqEmailReviewRequest)
        {
             ApiResponse<EmailCommseqEmailSendTestResponse> localVarResponse = await ReviewAsyncWithHttpInfo(storefrontOid, commseqEmailUuid, emailCommseqEmailReviewRequest);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Request a review of an email 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="commseqEmailUuid"></param>
        /// <param name="emailCommseqEmailReviewRequest">Email commseq email review request</param>
        /// <returns>Task of ApiResponse (EmailCommseqEmailSendTestResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<EmailCommseqEmailSendTestResponse>> ReviewAsyncWithHttpInfo (int? storefrontOid, string commseqEmailUuid, EmailCommseqEmailSendTestRequest emailCommseqEmailReviewRequest)
        {
            // verify the required parameter 'storefrontOid' is set
            if (storefrontOid == null)
                throw new ApiException(400, "Missing required parameter 'storefrontOid' when calling StorefrontApi->Review");
            // verify the required parameter 'commseqEmailUuid' is set
            if (commseqEmailUuid == null)
                throw new ApiException(400, "Missing required parameter 'commseqEmailUuid' when calling StorefrontApi->Review");
            // verify the required parameter 'emailCommseqEmailReviewRequest' is set
            if (emailCommseqEmailReviewRequest == null)
                throw new ApiException(400, "Missing required parameter 'emailCommseqEmailReviewRequest' when calling StorefrontApi->Review");

            var localVarPath = "/storefront/{storefront_oid}/email/emails/{commseq_email_uuid}/review";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (storefrontOid != null) localVarPathParams.Add("storefront_oid", this.Configuration.ApiClient.ParameterToString(storefrontOid)); // path parameter
            if (commseqEmailUuid != null) localVarPathParams.Add("commseq_email_uuid", this.Configuration.ApiClient.ParameterToString(commseqEmailUuid)); // path parameter
            if (emailCommseqEmailReviewRequest != null && emailCommseqEmailReviewRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(emailCommseqEmailReviewRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = emailCommseqEmailReviewRequest; // byte array
            }

            // authentication (ultraCartBrowserApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key")))
            {
                localVarHeaderParams["x-ultracart-browser-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key");
            }
            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Review", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EmailCommseqEmailSendTestResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (EmailCommseqEmailSendTestResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EmailCommseqEmailSendTestResponse)));
        }

        /// <summary>
        /// Searches for all matching values 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="category"> (optional)</param>
        /// <param name="matches"> (optional)</param>
        /// <param name="storefrontOid"> (optional)</param>
        /// <param name="maxHits"> (optional)</param>
        /// <param name="subcategory"> (optional)</param>
        /// <returns>LookupResponse</returns>
        public LookupResponse Search (string category = null, string matches = null, string storefrontOid = null, int? maxHits = null, string subcategory = null)
        {
             ApiResponse<LookupResponse> localVarResponse = SearchWithHttpInfo(category, matches, storefrontOid, maxHits, subcategory);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Searches for all matching values 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="category"> (optional)</param>
        /// <param name="matches"> (optional)</param>
        /// <param name="storefrontOid"> (optional)</param>
        /// <param name="maxHits"> (optional)</param>
        /// <param name="subcategory"> (optional)</param>
        /// <returns>ApiResponse of LookupResponse</returns>
        public ApiResponse< LookupResponse > SearchWithHttpInfo (string category = null, string matches = null, string storefrontOid = null, int? maxHits = null, string subcategory = null)
        {

            var localVarPath = "/storefront/search";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (category != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "category", category)); // query parameter
            if (matches != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "matches", matches)); // query parameter
            if (storefrontOid != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "storefront_oid", storefrontOid)); // query parameter
            if (maxHits != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "max_hits", maxHits)); // query parameter
            if (subcategory != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "subcategory", subcategory)); // query parameter

            // authentication (ultraCartBrowserApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key")))
            {
                localVarHeaderParams["x-ultracart-browser-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key");
            }
            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Search", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<LookupResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (LookupResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(LookupResponse)));
        }

        /// <summary>
        /// Searches for all matching values 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="category"> (optional)</param>
        /// <param name="matches"> (optional)</param>
        /// <param name="storefrontOid"> (optional)</param>
        /// <param name="maxHits"> (optional)</param>
        /// <param name="subcategory"> (optional)</param>
        /// <returns>Task of LookupResponse</returns>
        public async System.Threading.Tasks.Task<LookupResponse> SearchAsync (string category = null, string matches = null, string storefrontOid = null, int? maxHits = null, string subcategory = null)
        {
             ApiResponse<LookupResponse> localVarResponse = await SearchAsyncWithHttpInfo(category, matches, storefrontOid, maxHits, subcategory);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Searches for all matching values 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="category"> (optional)</param>
        /// <param name="matches"> (optional)</param>
        /// <param name="storefrontOid"> (optional)</param>
        /// <param name="maxHits"> (optional)</param>
        /// <param name="subcategory"> (optional)</param>
        /// <returns>Task of ApiResponse (LookupResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<LookupResponse>> SearchAsyncWithHttpInfo (string category = null, string matches = null, string storefrontOid = null, int? maxHits = null, string subcategory = null)
        {

            var localVarPath = "/storefront/search";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (category != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "category", category)); // query parameter
            if (matches != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "matches", matches)); // query parameter
            if (storefrontOid != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "storefront_oid", storefrontOid)); // query parameter
            if (maxHits != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "max_hits", maxHits)); // query parameter
            if (subcategory != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "subcategory", subcategory)); // query parameter

            // authentication (ultraCartBrowserApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key")))
            {
                localVarHeaderParams["x-ultracart-browser-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key");
            }
            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Search", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<LookupResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (LookupResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(LookupResponse)));
        }

        /// <summary>
        /// Searches for all matching values (using POST) 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="lookupRequest">LookupRequest</param>
        /// <returns>LookupResponse</returns>
        public LookupResponse Search2 (LookupRequest lookupRequest)
        {
             ApiResponse<LookupResponse> localVarResponse = Search2WithHttpInfo(lookupRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Searches for all matching values (using POST) 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="lookupRequest">LookupRequest</param>
        /// <returns>ApiResponse of LookupResponse</returns>
        public ApiResponse< LookupResponse > Search2WithHttpInfo (LookupRequest lookupRequest)
        {
            // verify the required parameter 'lookupRequest' is set
            if (lookupRequest == null)
                throw new ApiException(400, "Missing required parameter 'lookupRequest' when calling StorefrontApi->Search2");

            var localVarPath = "/storefront/search";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (lookupRequest != null && lookupRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(lookupRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = lookupRequest; // byte array
            }

            // authentication (ultraCartBrowserApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key")))
            {
                localVarHeaderParams["x-ultracart-browser-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key");
            }
            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Search2", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<LookupResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (LookupResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(LookupResponse)));
        }

        /// <summary>
        /// Searches for all matching values (using POST) 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="lookupRequest">LookupRequest</param>
        /// <returns>Task of LookupResponse</returns>
        public async System.Threading.Tasks.Task<LookupResponse> Search2Async (LookupRequest lookupRequest)
        {
             ApiResponse<LookupResponse> localVarResponse = await Search2AsyncWithHttpInfo(lookupRequest);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Searches for all matching values (using POST) 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="lookupRequest">LookupRequest</param>
        /// <returns>Task of ApiResponse (LookupResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<LookupResponse>> Search2AsyncWithHttpInfo (LookupRequest lookupRequest)
        {
            // verify the required parameter 'lookupRequest' is set
            if (lookupRequest == null)
                throw new ApiException(400, "Missing required parameter 'lookupRequest' when calling StorefrontApi->Search2");

            var localVarPath = "/storefront/search";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (lookupRequest != null && lookupRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(lookupRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = lookupRequest; // byte array
            }

            // authentication (ultraCartBrowserApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key")))
            {
                localVarHeaderParams["x-ultracart-browser-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key");
            }
            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Search2", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<LookupResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (LookupResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(LookupResponse)));
        }

        /// <summary>
        /// Search email list customers 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="emailListUuid"></param>
        /// <param name="startsWith"> (optional)</param>
        /// <returns>EmailListCustomersResponse</returns>
        public EmailListCustomersResponse SearchEmailListCustomers (int? storefrontOid, string emailListUuid, string startsWith = null)
        {
             ApiResponse<EmailListCustomersResponse> localVarResponse = SearchEmailListCustomersWithHttpInfo(storefrontOid, emailListUuid, startsWith);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Search email list customers 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="emailListUuid"></param>
        /// <param name="startsWith"> (optional)</param>
        /// <returns>ApiResponse of EmailListCustomersResponse</returns>
        public ApiResponse< EmailListCustomersResponse > SearchEmailListCustomersWithHttpInfo (int? storefrontOid, string emailListUuid, string startsWith = null)
        {
            // verify the required parameter 'storefrontOid' is set
            if (storefrontOid == null)
                throw new ApiException(400, "Missing required parameter 'storefrontOid' when calling StorefrontApi->SearchEmailListCustomers");
            // verify the required parameter 'emailListUuid' is set
            if (emailListUuid == null)
                throw new ApiException(400, "Missing required parameter 'emailListUuid' when calling StorefrontApi->SearchEmailListCustomers");

            var localVarPath = "/storefront/{storefront_oid}/email/lists/{email_list_uuid}/search";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (storefrontOid != null) localVarPathParams.Add("storefront_oid", this.Configuration.ApiClient.ParameterToString(storefrontOid)); // path parameter
            if (emailListUuid != null) localVarPathParams.Add("email_list_uuid", this.Configuration.ApiClient.ParameterToString(emailListUuid)); // path parameter
            if (startsWith != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "startsWith", startsWith)); // query parameter

            // authentication (ultraCartBrowserApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key")))
            {
                localVarHeaderParams["x-ultracart-browser-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key");
            }
            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SearchEmailListCustomers", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EmailListCustomersResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (EmailListCustomersResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EmailListCustomersResponse)));
        }

        /// <summary>
        /// Search email list customers 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="emailListUuid"></param>
        /// <param name="startsWith"> (optional)</param>
        /// <returns>Task of EmailListCustomersResponse</returns>
        public async System.Threading.Tasks.Task<EmailListCustomersResponse> SearchEmailListCustomersAsync (int? storefrontOid, string emailListUuid, string startsWith = null)
        {
             ApiResponse<EmailListCustomersResponse> localVarResponse = await SearchEmailListCustomersAsyncWithHttpInfo(storefrontOid, emailListUuid, startsWith);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Search email list customers 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="emailListUuid"></param>
        /// <param name="startsWith"> (optional)</param>
        /// <returns>Task of ApiResponse (EmailListCustomersResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<EmailListCustomersResponse>> SearchEmailListCustomersAsyncWithHttpInfo (int? storefrontOid, string emailListUuid, string startsWith = null)
        {
            // verify the required parameter 'storefrontOid' is set
            if (storefrontOid == null)
                throw new ApiException(400, "Missing required parameter 'storefrontOid' when calling StorefrontApi->SearchEmailListCustomers");
            // verify the required parameter 'emailListUuid' is set
            if (emailListUuid == null)
                throw new ApiException(400, "Missing required parameter 'emailListUuid' when calling StorefrontApi->SearchEmailListCustomers");

            var localVarPath = "/storefront/{storefront_oid}/email/lists/{email_list_uuid}/search";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (storefrontOid != null) localVarPathParams.Add("storefront_oid", this.Configuration.ApiClient.ParameterToString(storefrontOid)); // path parameter
            if (emailListUuid != null) localVarPathParams.Add("email_list_uuid", this.Configuration.ApiClient.ParameterToString(emailListUuid)); // path parameter
            if (startsWith != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "startsWith", startsWith)); // query parameter

            // authentication (ultraCartBrowserApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key")))
            {
                localVarHeaderParams["x-ultracart-browser-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key");
            }
            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SearchEmailListCustomers", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EmailListCustomersResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (EmailListCustomersResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EmailListCustomersResponse)));
        }

        /// <summary>
        /// Search email segment customers 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="emailSegmentUuid"></param>
        /// <param name="startsWith"> (optional)</param>
        /// <returns>EmailSegmentCustomersResponse</returns>
        public EmailSegmentCustomersResponse SearchEmailSegmentCustomers (int? storefrontOid, string emailSegmentUuid, string startsWith = null)
        {
             ApiResponse<EmailSegmentCustomersResponse> localVarResponse = SearchEmailSegmentCustomersWithHttpInfo(storefrontOid, emailSegmentUuid, startsWith);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Search email segment customers 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="emailSegmentUuid"></param>
        /// <param name="startsWith"> (optional)</param>
        /// <returns>ApiResponse of EmailSegmentCustomersResponse</returns>
        public ApiResponse< EmailSegmentCustomersResponse > SearchEmailSegmentCustomersWithHttpInfo (int? storefrontOid, string emailSegmentUuid, string startsWith = null)
        {
            // verify the required parameter 'storefrontOid' is set
            if (storefrontOid == null)
                throw new ApiException(400, "Missing required parameter 'storefrontOid' when calling StorefrontApi->SearchEmailSegmentCustomers");
            // verify the required parameter 'emailSegmentUuid' is set
            if (emailSegmentUuid == null)
                throw new ApiException(400, "Missing required parameter 'emailSegmentUuid' when calling StorefrontApi->SearchEmailSegmentCustomers");

            var localVarPath = "/storefront/{storefront_oid}/email/segments/{email_segment_uuid}/search";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (storefrontOid != null) localVarPathParams.Add("storefront_oid", this.Configuration.ApiClient.ParameterToString(storefrontOid)); // path parameter
            if (emailSegmentUuid != null) localVarPathParams.Add("email_segment_uuid", this.Configuration.ApiClient.ParameterToString(emailSegmentUuid)); // path parameter
            if (startsWith != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "startsWith", startsWith)); // query parameter

            // authentication (ultraCartBrowserApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key")))
            {
                localVarHeaderParams["x-ultracart-browser-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key");
            }
            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SearchEmailSegmentCustomers", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EmailSegmentCustomersResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (EmailSegmentCustomersResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EmailSegmentCustomersResponse)));
        }

        /// <summary>
        /// Search email segment customers 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="emailSegmentUuid"></param>
        /// <param name="startsWith"> (optional)</param>
        /// <returns>Task of EmailSegmentCustomersResponse</returns>
        public async System.Threading.Tasks.Task<EmailSegmentCustomersResponse> SearchEmailSegmentCustomersAsync (int? storefrontOid, string emailSegmentUuid, string startsWith = null)
        {
             ApiResponse<EmailSegmentCustomersResponse> localVarResponse = await SearchEmailSegmentCustomersAsyncWithHttpInfo(storefrontOid, emailSegmentUuid, startsWith);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Search email segment customers 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="emailSegmentUuid"></param>
        /// <param name="startsWith"> (optional)</param>
        /// <returns>Task of ApiResponse (EmailSegmentCustomersResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<EmailSegmentCustomersResponse>> SearchEmailSegmentCustomersAsyncWithHttpInfo (int? storefrontOid, string emailSegmentUuid, string startsWith = null)
        {
            // verify the required parameter 'storefrontOid' is set
            if (storefrontOid == null)
                throw new ApiException(400, "Missing required parameter 'storefrontOid' when calling StorefrontApi->SearchEmailSegmentCustomers");
            // verify the required parameter 'emailSegmentUuid' is set
            if (emailSegmentUuid == null)
                throw new ApiException(400, "Missing required parameter 'emailSegmentUuid' when calling StorefrontApi->SearchEmailSegmentCustomers");

            var localVarPath = "/storefront/{storefront_oid}/email/segments/{email_segment_uuid}/search";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (storefrontOid != null) localVarPathParams.Add("storefront_oid", this.Configuration.ApiClient.ParameterToString(storefrontOid)); // path parameter
            if (emailSegmentUuid != null) localVarPathParams.Add("email_segment_uuid", this.Configuration.ApiClient.ParameterToString(emailSegmentUuid)); // path parameter
            if (startsWith != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "startsWith", startsWith)); // query parameter

            // authentication (ultraCartBrowserApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key")))
            {
                localVarHeaderParams["x-ultracart-browser-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key");
            }
            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SearchEmailSegmentCustomers", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EmailSegmentCustomersResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (EmailSegmentCustomersResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EmailSegmentCustomersResponse)));
        }

        /// <summary>
        /// Retrieve library items Retrieves a library items based on a query object.  If no parameters are specified, the API call will default to the merchant id only.  You will need to make multiple API calls in order to retrieve the entire result set since this API performs result set pagination. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemQuery">Item query</param>
        /// <param name="limit">The maximum number of records to return on this one API call. (Maximum 10000) (optional, default to 10000)</param>
        /// <param name="offset">Pagination of the record set.  Offset is a zero based index. (optional, default to 0)</param>
        /// <param name="sort">The sort order of the library items.  See Sorting documentation for examples of using multiple values and sorting by ascending and descending. (optional)</param>
        /// <returns>LibraryItemsResponse</returns>
        public LibraryItemsResponse SearchLibraryItems (LibraryItemQuery itemQuery, int? limit = null, int? offset = null, string sort = null)
        {
             ApiResponse<LibraryItemsResponse> localVarResponse = SearchLibraryItemsWithHttpInfo(itemQuery, limit, offset, sort);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve library items Retrieves a library items based on a query object.  If no parameters are specified, the API call will default to the merchant id only.  You will need to make multiple API calls in order to retrieve the entire result set since this API performs result set pagination. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemQuery">Item query</param>
        /// <param name="limit">The maximum number of records to return on this one API call. (Maximum 10000) (optional, default to 10000)</param>
        /// <param name="offset">Pagination of the record set.  Offset is a zero based index. (optional, default to 0)</param>
        /// <param name="sort">The sort order of the library items.  See Sorting documentation for examples of using multiple values and sorting by ascending and descending. (optional)</param>
        /// <returns>ApiResponse of LibraryItemsResponse</returns>
        public ApiResponse< LibraryItemsResponse > SearchLibraryItemsWithHttpInfo (LibraryItemQuery itemQuery, int? limit = null, int? offset = null, string sort = null)
        {
            // verify the required parameter 'itemQuery' is set
            if (itemQuery == null)
                throw new ApiException(400, "Missing required parameter 'itemQuery' when calling StorefrontApi->SearchLibraryItems");

            var localVarPath = "/storefront/code_library/search";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "_limit", limit)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "_offset", offset)); // query parameter
            if (sort != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "_sort", sort)); // query parameter
            if (itemQuery != null && itemQuery.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(itemQuery); // http body (model) parameter
            }
            else
            {
                localVarPostBody = itemQuery; // byte array
            }

            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SearchLibraryItems", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<LibraryItemsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (LibraryItemsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(LibraryItemsResponse)));
        }

        /// <summary>
        /// Retrieve library items Retrieves a library items based on a query object.  If no parameters are specified, the API call will default to the merchant id only.  You will need to make multiple API calls in order to retrieve the entire result set since this API performs result set pagination. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemQuery">Item query</param>
        /// <param name="limit">The maximum number of records to return on this one API call. (Maximum 10000) (optional, default to 10000)</param>
        /// <param name="offset">Pagination of the record set.  Offset is a zero based index. (optional, default to 0)</param>
        /// <param name="sort">The sort order of the library items.  See Sorting documentation for examples of using multiple values and sorting by ascending and descending. (optional)</param>
        /// <returns>Task of LibraryItemsResponse</returns>
        public async System.Threading.Tasks.Task<LibraryItemsResponse> SearchLibraryItemsAsync (LibraryItemQuery itemQuery, int? limit = null, int? offset = null, string sort = null)
        {
             ApiResponse<LibraryItemsResponse> localVarResponse = await SearchLibraryItemsAsyncWithHttpInfo(itemQuery, limit, offset, sort);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieve library items Retrieves a library items based on a query object.  If no parameters are specified, the API call will default to the merchant id only.  You will need to make multiple API calls in order to retrieve the entire result set since this API performs result set pagination. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemQuery">Item query</param>
        /// <param name="limit">The maximum number of records to return on this one API call. (Maximum 10000) (optional, default to 10000)</param>
        /// <param name="offset">Pagination of the record set.  Offset is a zero based index. (optional, default to 0)</param>
        /// <param name="sort">The sort order of the library items.  See Sorting documentation for examples of using multiple values and sorting by ascending and descending. (optional)</param>
        /// <returns>Task of ApiResponse (LibraryItemsResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<LibraryItemsResponse>> SearchLibraryItemsAsyncWithHttpInfo (LibraryItemQuery itemQuery, int? limit = null, int? offset = null, string sort = null)
        {
            // verify the required parameter 'itemQuery' is set
            if (itemQuery == null)
                throw new ApiException(400, "Missing required parameter 'itemQuery' when calling StorefrontApi->SearchLibraryItems");

            var localVarPath = "/storefront/code_library/search";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "_limit", limit)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "_offset", offset)); // query parameter
            if (sort != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "_sort", sort)); // query parameter
            if (itemQuery != null && itemQuery.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(itemQuery); // http body (model) parameter
            }
            else
            {
                localVarPostBody = itemQuery; // byte array
            }

            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SearchLibraryItems", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<LibraryItemsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (LibraryItemsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(LibraryItemsResponse)));
        }

        /// <summary>
        /// Retrieve library items Retrieves a library items based on a query object.  If no parameters are specified, the API call will default to the merchant id only.  You will need to make multiple API calls in order to retrieve the entire result set since this API performs result set pagination. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemQuery">Item query</param>
        /// <param name="limit">The maximum number of records to return on this one API call. (Maximum 10000) (optional, default to 10000)</param>
        /// <param name="offset">Pagination of the record set.  Offset is a zero based index. (optional, default to 0)</param>
        /// <param name="sort">The sort order of the library items.  See Sorting documentation for examples of using multiple values and sorting by ascending and descending. (optional)</param>
        /// <returns>LibraryItemsResponse</returns>
        public LibraryItemsResponse SearchPublishedItems (LibraryItemQuery itemQuery, int? limit = null, int? offset = null, string sort = null)
        {
             ApiResponse<LibraryItemsResponse> localVarResponse = SearchPublishedItemsWithHttpInfo(itemQuery, limit, offset, sort);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve library items Retrieves a library items based on a query object.  If no parameters are specified, the API call will default to the merchant id only.  You will need to make multiple API calls in order to retrieve the entire result set since this API performs result set pagination. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemQuery">Item query</param>
        /// <param name="limit">The maximum number of records to return on this one API call. (Maximum 10000) (optional, default to 10000)</param>
        /// <param name="offset">Pagination of the record set.  Offset is a zero based index. (optional, default to 0)</param>
        /// <param name="sort">The sort order of the library items.  See Sorting documentation for examples of using multiple values and sorting by ascending and descending. (optional)</param>
        /// <returns>ApiResponse of LibraryItemsResponse</returns>
        public ApiResponse< LibraryItemsResponse > SearchPublishedItemsWithHttpInfo (LibraryItemQuery itemQuery, int? limit = null, int? offset = null, string sort = null)
        {
            // verify the required parameter 'itemQuery' is set
            if (itemQuery == null)
                throw new ApiException(400, "Missing required parameter 'itemQuery' when calling StorefrontApi->SearchPublishedItems");

            var localVarPath = "/storefront/code_library/search_published";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "_limit", limit)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "_offset", offset)); // query parameter
            if (sort != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "_sort", sort)); // query parameter
            if (itemQuery != null && itemQuery.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(itemQuery); // http body (model) parameter
            }
            else
            {
                localVarPostBody = itemQuery; // byte array
            }

            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SearchPublishedItems", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<LibraryItemsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (LibraryItemsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(LibraryItemsResponse)));
        }

        /// <summary>
        /// Retrieve library items Retrieves a library items based on a query object.  If no parameters are specified, the API call will default to the merchant id only.  You will need to make multiple API calls in order to retrieve the entire result set since this API performs result set pagination. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemQuery">Item query</param>
        /// <param name="limit">The maximum number of records to return on this one API call. (Maximum 10000) (optional, default to 10000)</param>
        /// <param name="offset">Pagination of the record set.  Offset is a zero based index. (optional, default to 0)</param>
        /// <param name="sort">The sort order of the library items.  See Sorting documentation for examples of using multiple values and sorting by ascending and descending. (optional)</param>
        /// <returns>Task of LibraryItemsResponse</returns>
        public async System.Threading.Tasks.Task<LibraryItemsResponse> SearchPublishedItemsAsync (LibraryItemQuery itemQuery, int? limit = null, int? offset = null, string sort = null)
        {
             ApiResponse<LibraryItemsResponse> localVarResponse = await SearchPublishedItemsAsyncWithHttpInfo(itemQuery, limit, offset, sort);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieve library items Retrieves a library items based on a query object.  If no parameters are specified, the API call will default to the merchant id only.  You will need to make multiple API calls in order to retrieve the entire result set since this API performs result set pagination. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemQuery">Item query</param>
        /// <param name="limit">The maximum number of records to return on this one API call. (Maximum 10000) (optional, default to 10000)</param>
        /// <param name="offset">Pagination of the record set.  Offset is a zero based index. (optional, default to 0)</param>
        /// <param name="sort">The sort order of the library items.  See Sorting documentation for examples of using multiple values and sorting by ascending and descending. (optional)</param>
        /// <returns>Task of ApiResponse (LibraryItemsResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<LibraryItemsResponse>> SearchPublishedItemsAsyncWithHttpInfo (LibraryItemQuery itemQuery, int? limit = null, int? offset = null, string sort = null)
        {
            // verify the required parameter 'itemQuery' is set
            if (itemQuery == null)
                throw new ApiException(400, "Missing required parameter 'itemQuery' when calling StorefrontApi->SearchPublishedItems");

            var localVarPath = "/storefront/code_library/search_published";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "_limit", limit)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "_offset", offset)); // query parameter
            if (sort != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "_sort", sort)); // query parameter
            if (itemQuery != null && itemQuery.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(itemQuery); // http body (model) parameter
            }
            else
            {
                localVarPostBody = itemQuery; // byte array
            }

            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SearchPublishedItems", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<LibraryItemsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (LibraryItemsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(LibraryItemsResponse)));
        }

        /// <summary>
        /// Retrieve library items needing review or rejected Retrieves a library items based on a query object.  If no parameters are specified, the API call will default to the merchant id only.  You will need to make multiple API calls in order to retrieve the entire result set since this API performs result set pagination. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemQuery">Item query</param>
        /// <param name="limit">The maximum number of records to return on this one API call. (Maximum 10000) (optional, default to 10000)</param>
        /// <param name="offset">Pagination of the record set.  Offset is a zero based index. (optional, default to 0)</param>
        /// <param name="sort">The sort order of the library items.  See Sorting documentation for examples of using multiple values and sorting by ascending and descending. (optional)</param>
        /// <returns>LibraryItemsResponse</returns>
        public LibraryItemsResponse SearchReviewItems (LibraryItemQuery itemQuery, int? limit = null, int? offset = null, string sort = null)
        {
             ApiResponse<LibraryItemsResponse> localVarResponse = SearchReviewItemsWithHttpInfo(itemQuery, limit, offset, sort);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve library items needing review or rejected Retrieves a library items based on a query object.  If no parameters are specified, the API call will default to the merchant id only.  You will need to make multiple API calls in order to retrieve the entire result set since this API performs result set pagination. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemQuery">Item query</param>
        /// <param name="limit">The maximum number of records to return on this one API call. (Maximum 10000) (optional, default to 10000)</param>
        /// <param name="offset">Pagination of the record set.  Offset is a zero based index. (optional, default to 0)</param>
        /// <param name="sort">The sort order of the library items.  See Sorting documentation for examples of using multiple values and sorting by ascending and descending. (optional)</param>
        /// <returns>ApiResponse of LibraryItemsResponse</returns>
        public ApiResponse< LibraryItemsResponse > SearchReviewItemsWithHttpInfo (LibraryItemQuery itemQuery, int? limit = null, int? offset = null, string sort = null)
        {
            // verify the required parameter 'itemQuery' is set
            if (itemQuery == null)
                throw new ApiException(400, "Missing required parameter 'itemQuery' when calling StorefrontApi->SearchReviewItems");

            var localVarPath = "/storefront/code_library/search_review";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "_limit", limit)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "_offset", offset)); // query parameter
            if (sort != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "_sort", sort)); // query parameter
            if (itemQuery != null && itemQuery.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(itemQuery); // http body (model) parameter
            }
            else
            {
                localVarPostBody = itemQuery; // byte array
            }

            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SearchReviewItems", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<LibraryItemsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (LibraryItemsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(LibraryItemsResponse)));
        }

        /// <summary>
        /// Retrieve library items needing review or rejected Retrieves a library items based on a query object.  If no parameters are specified, the API call will default to the merchant id only.  You will need to make multiple API calls in order to retrieve the entire result set since this API performs result set pagination. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemQuery">Item query</param>
        /// <param name="limit">The maximum number of records to return on this one API call. (Maximum 10000) (optional, default to 10000)</param>
        /// <param name="offset">Pagination of the record set.  Offset is a zero based index. (optional, default to 0)</param>
        /// <param name="sort">The sort order of the library items.  See Sorting documentation for examples of using multiple values and sorting by ascending and descending. (optional)</param>
        /// <returns>Task of LibraryItemsResponse</returns>
        public async System.Threading.Tasks.Task<LibraryItemsResponse> SearchReviewItemsAsync (LibraryItemQuery itemQuery, int? limit = null, int? offset = null, string sort = null)
        {
             ApiResponse<LibraryItemsResponse> localVarResponse = await SearchReviewItemsAsyncWithHttpInfo(itemQuery, limit, offset, sort);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieve library items needing review or rejected Retrieves a library items based on a query object.  If no parameters are specified, the API call will default to the merchant id only.  You will need to make multiple API calls in order to retrieve the entire result set since this API performs result set pagination. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemQuery">Item query</param>
        /// <param name="limit">The maximum number of records to return on this one API call. (Maximum 10000) (optional, default to 10000)</param>
        /// <param name="offset">Pagination of the record set.  Offset is a zero based index. (optional, default to 0)</param>
        /// <param name="sort">The sort order of the library items.  See Sorting documentation for examples of using multiple values and sorting by ascending and descending. (optional)</param>
        /// <returns>Task of ApiResponse (LibraryItemsResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<LibraryItemsResponse>> SearchReviewItemsAsyncWithHttpInfo (LibraryItemQuery itemQuery, int? limit = null, int? offset = null, string sort = null)
        {
            // verify the required parameter 'itemQuery' is set
            if (itemQuery == null)
                throw new ApiException(400, "Missing required parameter 'itemQuery' when calling StorefrontApi->SearchReviewItems");

            var localVarPath = "/storefront/code_library/search_review";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "_limit", limit)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "_offset", offset)); // query parameter
            if (sort != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "_sort", sort)); // query parameter
            if (itemQuery != null && itemQuery.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(itemQuery); // http body (model) parameter
            }
            else
            {
                localVarPostBody = itemQuery; // byte array
            }

            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SearchReviewItems", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<LibraryItemsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (LibraryItemsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(LibraryItemsResponse)));
        }

        /// <summary>
        /// Retrieve library items Retrieves a library items based on a query object.  If no parameters are specified, the API call will default to the merchant id only.  You will need to make multiple API calls in order to retrieve the entire result set since this API performs result set pagination. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemQuery">Item query</param>
        /// <param name="limit">The maximum number of records to return on this one API call. (Maximum 10000) (optional, default to 10000)</param>
        /// <param name="offset">Pagination of the record set.  Offset is a zero based index. (optional, default to 0)</param>
        /// <param name="sort">The sort order of the library items.  See Sorting documentation for examples of using multiple values and sorting by ascending and descending. (optional)</param>
        /// <returns>LibraryItemsResponse</returns>
        public LibraryItemsResponse SearchSharedItems (LibraryItemQuery itemQuery, int? limit = null, int? offset = null, string sort = null)
        {
             ApiResponse<LibraryItemsResponse> localVarResponse = SearchSharedItemsWithHttpInfo(itemQuery, limit, offset, sort);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve library items Retrieves a library items based on a query object.  If no parameters are specified, the API call will default to the merchant id only.  You will need to make multiple API calls in order to retrieve the entire result set since this API performs result set pagination. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemQuery">Item query</param>
        /// <param name="limit">The maximum number of records to return on this one API call. (Maximum 10000) (optional, default to 10000)</param>
        /// <param name="offset">Pagination of the record set.  Offset is a zero based index. (optional, default to 0)</param>
        /// <param name="sort">The sort order of the library items.  See Sorting documentation for examples of using multiple values and sorting by ascending and descending. (optional)</param>
        /// <returns>ApiResponse of LibraryItemsResponse</returns>
        public ApiResponse< LibraryItemsResponse > SearchSharedItemsWithHttpInfo (LibraryItemQuery itemQuery, int? limit = null, int? offset = null, string sort = null)
        {
            // verify the required parameter 'itemQuery' is set
            if (itemQuery == null)
                throw new ApiException(400, "Missing required parameter 'itemQuery' when calling StorefrontApi->SearchSharedItems");

            var localVarPath = "/storefront/code_library/search_shared";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "_limit", limit)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "_offset", offset)); // query parameter
            if (sort != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "_sort", sort)); // query parameter
            if (itemQuery != null && itemQuery.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(itemQuery); // http body (model) parameter
            }
            else
            {
                localVarPostBody = itemQuery; // byte array
            }

            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SearchSharedItems", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<LibraryItemsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (LibraryItemsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(LibraryItemsResponse)));
        }

        /// <summary>
        /// Retrieve library items Retrieves a library items based on a query object.  If no parameters are specified, the API call will default to the merchant id only.  You will need to make multiple API calls in order to retrieve the entire result set since this API performs result set pagination. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemQuery">Item query</param>
        /// <param name="limit">The maximum number of records to return on this one API call. (Maximum 10000) (optional, default to 10000)</param>
        /// <param name="offset">Pagination of the record set.  Offset is a zero based index. (optional, default to 0)</param>
        /// <param name="sort">The sort order of the library items.  See Sorting documentation for examples of using multiple values and sorting by ascending and descending. (optional)</param>
        /// <returns>Task of LibraryItemsResponse</returns>
        public async System.Threading.Tasks.Task<LibraryItemsResponse> SearchSharedItemsAsync (LibraryItemQuery itemQuery, int? limit = null, int? offset = null, string sort = null)
        {
             ApiResponse<LibraryItemsResponse> localVarResponse = await SearchSharedItemsAsyncWithHttpInfo(itemQuery, limit, offset, sort);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieve library items Retrieves a library items based on a query object.  If no parameters are specified, the API call will default to the merchant id only.  You will need to make multiple API calls in order to retrieve the entire result set since this API performs result set pagination. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemQuery">Item query</param>
        /// <param name="limit">The maximum number of records to return on this one API call. (Maximum 10000) (optional, default to 10000)</param>
        /// <param name="offset">Pagination of the record set.  Offset is a zero based index. (optional, default to 0)</param>
        /// <param name="sort">The sort order of the library items.  See Sorting documentation for examples of using multiple values and sorting by ascending and descending. (optional)</param>
        /// <returns>Task of ApiResponse (LibraryItemsResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<LibraryItemsResponse>> SearchSharedItemsAsyncWithHttpInfo (LibraryItemQuery itemQuery, int? limit = null, int? offset = null, string sort = null)
        {
            // verify the required parameter 'itemQuery' is set
            if (itemQuery == null)
                throw new ApiException(400, "Missing required parameter 'itemQuery' when calling StorefrontApi->SearchSharedItems");

            var localVarPath = "/storefront/code_library/search_shared";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "_limit", limit)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "_offset", offset)); // query parameter
            if (sort != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "_sort", sort)); // query parameter
            if (itemQuery != null && itemQuery.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(itemQuery); // http body (model) parameter
            }
            else
            {
                localVarPostBody = itemQuery; // byte array
            }

            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SearchSharedItems", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<LibraryItemsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (LibraryItemsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(LibraryItemsResponse)));
        }

        /// <summary>
        /// Send email test 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="commseqEmailUuid"></param>
        /// <param name="emailCommseqEmailTestRequest">Email commseq email test request</param>
        /// <returns>EmailCommseqEmailSendTestResponse</returns>
        public EmailCommseqEmailSendTestResponse SendEmailTest (int? storefrontOid, string commseqEmailUuid, EmailCommseqEmailSendTestRequest emailCommseqEmailTestRequest)
        {
             ApiResponse<EmailCommseqEmailSendTestResponse> localVarResponse = SendEmailTestWithHttpInfo(storefrontOid, commseqEmailUuid, emailCommseqEmailTestRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Send email test 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="commseqEmailUuid"></param>
        /// <param name="emailCommseqEmailTestRequest">Email commseq email test request</param>
        /// <returns>ApiResponse of EmailCommseqEmailSendTestResponse</returns>
        public ApiResponse< EmailCommseqEmailSendTestResponse > SendEmailTestWithHttpInfo (int? storefrontOid, string commseqEmailUuid, EmailCommseqEmailSendTestRequest emailCommseqEmailTestRequest)
        {
            // verify the required parameter 'storefrontOid' is set
            if (storefrontOid == null)
                throw new ApiException(400, "Missing required parameter 'storefrontOid' when calling StorefrontApi->SendEmailTest");
            // verify the required parameter 'commseqEmailUuid' is set
            if (commseqEmailUuid == null)
                throw new ApiException(400, "Missing required parameter 'commseqEmailUuid' when calling StorefrontApi->SendEmailTest");
            // verify the required parameter 'emailCommseqEmailTestRequest' is set
            if (emailCommseqEmailTestRequest == null)
                throw new ApiException(400, "Missing required parameter 'emailCommseqEmailTestRequest' when calling StorefrontApi->SendEmailTest");

            var localVarPath = "/storefront/{storefront_oid}/email/emails/{commseq_email_uuid}/test";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (storefrontOid != null) localVarPathParams.Add("storefront_oid", this.Configuration.ApiClient.ParameterToString(storefrontOid)); // path parameter
            if (commseqEmailUuid != null) localVarPathParams.Add("commseq_email_uuid", this.Configuration.ApiClient.ParameterToString(commseqEmailUuid)); // path parameter
            if (emailCommseqEmailTestRequest != null && emailCommseqEmailTestRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(emailCommseqEmailTestRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = emailCommseqEmailTestRequest; // byte array
            }

            // authentication (ultraCartBrowserApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key")))
            {
                localVarHeaderParams["x-ultracart-browser-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key");
            }
            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SendEmailTest", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EmailCommseqEmailSendTestResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (EmailCommseqEmailSendTestResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EmailCommseqEmailSendTestResponse)));
        }

        /// <summary>
        /// Send email test 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="commseqEmailUuid"></param>
        /// <param name="emailCommseqEmailTestRequest">Email commseq email test request</param>
        /// <returns>Task of EmailCommseqEmailSendTestResponse</returns>
        public async System.Threading.Tasks.Task<EmailCommseqEmailSendTestResponse> SendEmailTestAsync (int? storefrontOid, string commseqEmailUuid, EmailCommseqEmailSendTestRequest emailCommseqEmailTestRequest)
        {
             ApiResponse<EmailCommseqEmailSendTestResponse> localVarResponse = await SendEmailTestAsyncWithHttpInfo(storefrontOid, commseqEmailUuid, emailCommseqEmailTestRequest);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Send email test 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="commseqEmailUuid"></param>
        /// <param name="emailCommseqEmailTestRequest">Email commseq email test request</param>
        /// <returns>Task of ApiResponse (EmailCommseqEmailSendTestResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<EmailCommseqEmailSendTestResponse>> SendEmailTestAsyncWithHttpInfo (int? storefrontOid, string commseqEmailUuid, EmailCommseqEmailSendTestRequest emailCommseqEmailTestRequest)
        {
            // verify the required parameter 'storefrontOid' is set
            if (storefrontOid == null)
                throw new ApiException(400, "Missing required parameter 'storefrontOid' when calling StorefrontApi->SendEmailTest");
            // verify the required parameter 'commseqEmailUuid' is set
            if (commseqEmailUuid == null)
                throw new ApiException(400, "Missing required parameter 'commseqEmailUuid' when calling StorefrontApi->SendEmailTest");
            // verify the required parameter 'emailCommseqEmailTestRequest' is set
            if (emailCommseqEmailTestRequest == null)
                throw new ApiException(400, "Missing required parameter 'emailCommseqEmailTestRequest' when calling StorefrontApi->SendEmailTest");

            var localVarPath = "/storefront/{storefront_oid}/email/emails/{commseq_email_uuid}/test";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (storefrontOid != null) localVarPathParams.Add("storefront_oid", this.Configuration.ApiClient.ParameterToString(storefrontOid)); // path parameter
            if (commseqEmailUuid != null) localVarPathParams.Add("commseq_email_uuid", this.Configuration.ApiClient.ParameterToString(commseqEmailUuid)); // path parameter
            if (emailCommseqEmailTestRequest != null && emailCommseqEmailTestRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(emailCommseqEmailTestRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = emailCommseqEmailTestRequest; // byte array
            }

            // authentication (ultraCartBrowserApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key")))
            {
                localVarHeaderParams["x-ultracart-browser-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key");
            }
            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SendEmailTest", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EmailCommseqEmailSendTestResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (EmailCommseqEmailSendTestResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EmailCommseqEmailSendTestResponse)));
        }

        /// <summary>
        /// Send postcard test 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="commseqPostcardUuid"></param>
        /// <param name="emailCommseqPostcardTestRequest">Email commseq email test request</param>
        /// <returns>EmailCommseqPostcardSendTestResponse</returns>
        public EmailCommseqPostcardSendTestResponse SendPostcardTest (int? storefrontOid, string commseqPostcardUuid, EmailCommseqPostcardSendTestRequest emailCommseqPostcardTestRequest)
        {
             ApiResponse<EmailCommseqPostcardSendTestResponse> localVarResponse = SendPostcardTestWithHttpInfo(storefrontOid, commseqPostcardUuid, emailCommseqPostcardTestRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Send postcard test 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="commseqPostcardUuid"></param>
        /// <param name="emailCommseqPostcardTestRequest">Email commseq email test request</param>
        /// <returns>ApiResponse of EmailCommseqPostcardSendTestResponse</returns>
        public ApiResponse< EmailCommseqPostcardSendTestResponse > SendPostcardTestWithHttpInfo (int? storefrontOid, string commseqPostcardUuid, EmailCommseqPostcardSendTestRequest emailCommseqPostcardTestRequest)
        {
            // verify the required parameter 'storefrontOid' is set
            if (storefrontOid == null)
                throw new ApiException(400, "Missing required parameter 'storefrontOid' when calling StorefrontApi->SendPostcardTest");
            // verify the required parameter 'commseqPostcardUuid' is set
            if (commseqPostcardUuid == null)
                throw new ApiException(400, "Missing required parameter 'commseqPostcardUuid' when calling StorefrontApi->SendPostcardTest");
            // verify the required parameter 'emailCommseqPostcardTestRequest' is set
            if (emailCommseqPostcardTestRequest == null)
                throw new ApiException(400, "Missing required parameter 'emailCommseqPostcardTestRequest' when calling StorefrontApi->SendPostcardTest");

            var localVarPath = "/storefront/{storefront_oid}/email/postcards/{commseq_postcard_uuid}/test";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (storefrontOid != null) localVarPathParams.Add("storefront_oid", this.Configuration.ApiClient.ParameterToString(storefrontOid)); // path parameter
            if (commseqPostcardUuid != null) localVarPathParams.Add("commseq_postcard_uuid", this.Configuration.ApiClient.ParameterToString(commseqPostcardUuid)); // path parameter
            if (emailCommseqPostcardTestRequest != null && emailCommseqPostcardTestRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(emailCommseqPostcardTestRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = emailCommseqPostcardTestRequest; // byte array
            }

            // authentication (ultraCartBrowserApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key")))
            {
                localVarHeaderParams["x-ultracart-browser-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key");
            }
            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SendPostcardTest", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EmailCommseqPostcardSendTestResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (EmailCommseqPostcardSendTestResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EmailCommseqPostcardSendTestResponse)));
        }

        /// <summary>
        /// Send postcard test 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="commseqPostcardUuid"></param>
        /// <param name="emailCommseqPostcardTestRequest">Email commseq email test request</param>
        /// <returns>Task of EmailCommseqPostcardSendTestResponse</returns>
        public async System.Threading.Tasks.Task<EmailCommseqPostcardSendTestResponse> SendPostcardTestAsync (int? storefrontOid, string commseqPostcardUuid, EmailCommseqPostcardSendTestRequest emailCommseqPostcardTestRequest)
        {
             ApiResponse<EmailCommseqPostcardSendTestResponse> localVarResponse = await SendPostcardTestAsyncWithHttpInfo(storefrontOid, commseqPostcardUuid, emailCommseqPostcardTestRequest);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Send postcard test 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="commseqPostcardUuid"></param>
        /// <param name="emailCommseqPostcardTestRequest">Email commseq email test request</param>
        /// <returns>Task of ApiResponse (EmailCommseqPostcardSendTestResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<EmailCommseqPostcardSendTestResponse>> SendPostcardTestAsyncWithHttpInfo (int? storefrontOid, string commseqPostcardUuid, EmailCommseqPostcardSendTestRequest emailCommseqPostcardTestRequest)
        {
            // verify the required parameter 'storefrontOid' is set
            if (storefrontOid == null)
                throw new ApiException(400, "Missing required parameter 'storefrontOid' when calling StorefrontApi->SendPostcardTest");
            // verify the required parameter 'commseqPostcardUuid' is set
            if (commseqPostcardUuid == null)
                throw new ApiException(400, "Missing required parameter 'commseqPostcardUuid' when calling StorefrontApi->SendPostcardTest");
            // verify the required parameter 'emailCommseqPostcardTestRequest' is set
            if (emailCommseqPostcardTestRequest == null)
                throw new ApiException(400, "Missing required parameter 'emailCommseqPostcardTestRequest' when calling StorefrontApi->SendPostcardTest");

            var localVarPath = "/storefront/{storefront_oid}/email/postcards/{commseq_postcard_uuid}/test";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (storefrontOid != null) localVarPathParams.Add("storefront_oid", this.Configuration.ApiClient.ParameterToString(storefrontOid)); // path parameter
            if (commseqPostcardUuid != null) localVarPathParams.Add("commseq_postcard_uuid", this.Configuration.ApiClient.ParameterToString(commseqPostcardUuid)); // path parameter
            if (emailCommseqPostcardTestRequest != null && emailCommseqPostcardTestRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(emailCommseqPostcardTestRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = emailCommseqPostcardTestRequest; // byte array
            }

            // authentication (ultraCartBrowserApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key")))
            {
                localVarHeaderParams["x-ultracart-browser-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key");
            }
            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SendPostcardTest", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EmailCommseqPostcardSendTestResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (EmailCommseqPostcardSendTestResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EmailCommseqPostcardSendTestResponse)));
        }

        /// <summary>
        /// Send webhook test 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="emailCommseqWebhookTestRequest">Email commseq webhook test request</param>
        /// <returns>EmailCommseqWebhookSendTestResponse</returns>
        public EmailCommseqWebhookSendTestResponse SendWebhookTest (int? storefrontOid, EmailCommseqWebhookSendTestRequest emailCommseqWebhookTestRequest)
        {
             ApiResponse<EmailCommseqWebhookSendTestResponse> localVarResponse = SendWebhookTestWithHttpInfo(storefrontOid, emailCommseqWebhookTestRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Send webhook test 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="emailCommseqWebhookTestRequest">Email commseq webhook test request</param>
        /// <returns>ApiResponse of EmailCommseqWebhookSendTestResponse</returns>
        public ApiResponse< EmailCommseqWebhookSendTestResponse > SendWebhookTestWithHttpInfo (int? storefrontOid, EmailCommseqWebhookSendTestRequest emailCommseqWebhookTestRequest)
        {
            // verify the required parameter 'storefrontOid' is set
            if (storefrontOid == null)
                throw new ApiException(400, "Missing required parameter 'storefrontOid' when calling StorefrontApi->SendWebhookTest");
            // verify the required parameter 'emailCommseqWebhookTestRequest' is set
            if (emailCommseqWebhookTestRequest == null)
                throw new ApiException(400, "Missing required parameter 'emailCommseqWebhookTestRequest' when calling StorefrontApi->SendWebhookTest");

            var localVarPath = "/storefront/{storefront_oid}/email/webhooks/test";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (storefrontOid != null) localVarPathParams.Add("storefront_oid", this.Configuration.ApiClient.ParameterToString(storefrontOid)); // path parameter
            if (emailCommseqWebhookTestRequest != null && emailCommseqWebhookTestRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(emailCommseqWebhookTestRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = emailCommseqWebhookTestRequest; // byte array
            }

            // authentication (ultraCartBrowserApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key")))
            {
                localVarHeaderParams["x-ultracart-browser-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key");
            }
            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SendWebhookTest", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EmailCommseqWebhookSendTestResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (EmailCommseqWebhookSendTestResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EmailCommseqWebhookSendTestResponse)));
        }

        /// <summary>
        /// Send webhook test 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="emailCommseqWebhookTestRequest">Email commseq webhook test request</param>
        /// <returns>Task of EmailCommseqWebhookSendTestResponse</returns>
        public async System.Threading.Tasks.Task<EmailCommseqWebhookSendTestResponse> SendWebhookTestAsync (int? storefrontOid, EmailCommseqWebhookSendTestRequest emailCommseqWebhookTestRequest)
        {
             ApiResponse<EmailCommseqWebhookSendTestResponse> localVarResponse = await SendWebhookTestAsyncWithHttpInfo(storefrontOid, emailCommseqWebhookTestRequest);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Send webhook test 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="emailCommseqWebhookTestRequest">Email commseq webhook test request</param>
        /// <returns>Task of ApiResponse (EmailCommseqWebhookSendTestResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<EmailCommseqWebhookSendTestResponse>> SendWebhookTestAsyncWithHttpInfo (int? storefrontOid, EmailCommseqWebhookSendTestRequest emailCommseqWebhookTestRequest)
        {
            // verify the required parameter 'storefrontOid' is set
            if (storefrontOid == null)
                throw new ApiException(400, "Missing required parameter 'storefrontOid' when calling StorefrontApi->SendWebhookTest");
            // verify the required parameter 'emailCommseqWebhookTestRequest' is set
            if (emailCommseqWebhookTestRequest == null)
                throw new ApiException(400, "Missing required parameter 'emailCommseqWebhookTestRequest' when calling StorefrontApi->SendWebhookTest");

            var localVarPath = "/storefront/{storefront_oid}/email/webhooks/test";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (storefrontOid != null) localVarPathParams.Add("storefront_oid", this.Configuration.ApiClient.ParameterToString(storefrontOid)); // path parameter
            if (emailCommseqWebhookTestRequest != null && emailCommseqWebhookTestRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(emailCommseqWebhookTestRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = emailCommseqWebhookTestRequest; // byte array
            }

            // authentication (ultraCartBrowserApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key")))
            {
                localVarHeaderParams["x-ultracart-browser-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key");
            }
            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SendWebhookTest", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EmailCommseqWebhookSendTestResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (EmailCommseqWebhookSendTestResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EmailCommseqWebhookSendTestResponse)));
        }

        /// <summary>
        /// Start email campaign 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="emailCampaignUuid"></param>
        /// <returns>BaseResponse</returns>
        public BaseResponse StartEmailCampaign (int? storefrontOid, string emailCampaignUuid)
        {
             ApiResponse<BaseResponse> localVarResponse = StartEmailCampaignWithHttpInfo(storefrontOid, emailCampaignUuid);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Start email campaign 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="emailCampaignUuid"></param>
        /// <returns>ApiResponse of BaseResponse</returns>
        public ApiResponse< BaseResponse > StartEmailCampaignWithHttpInfo (int? storefrontOid, string emailCampaignUuid)
        {
            // verify the required parameter 'storefrontOid' is set
            if (storefrontOid == null)
                throw new ApiException(400, "Missing required parameter 'storefrontOid' when calling StorefrontApi->StartEmailCampaign");
            // verify the required parameter 'emailCampaignUuid' is set
            if (emailCampaignUuid == null)
                throw new ApiException(400, "Missing required parameter 'emailCampaignUuid' when calling StorefrontApi->StartEmailCampaign");

            var localVarPath = "/storefront/{storefront_oid}/email/campaigns/{email_campaign_uuid}/start";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (storefrontOid != null) localVarPathParams.Add("storefront_oid", this.Configuration.ApiClient.ParameterToString(storefrontOid)); // path parameter
            if (emailCampaignUuid != null) localVarPathParams.Add("email_campaign_uuid", this.Configuration.ApiClient.ParameterToString(emailCampaignUuid)); // path parameter

            // authentication (ultraCartBrowserApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key")))
            {
                localVarHeaderParams["x-ultracart-browser-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key");
            }
            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("StartEmailCampaign", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BaseResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (BaseResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BaseResponse)));
        }

        /// <summary>
        /// Start email campaign 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="emailCampaignUuid"></param>
        /// <returns>Task of BaseResponse</returns>
        public async System.Threading.Tasks.Task<BaseResponse> StartEmailCampaignAsync (int? storefrontOid, string emailCampaignUuid)
        {
             ApiResponse<BaseResponse> localVarResponse = await StartEmailCampaignAsyncWithHttpInfo(storefrontOid, emailCampaignUuid);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Start email campaign 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="emailCampaignUuid"></param>
        /// <returns>Task of ApiResponse (BaseResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<BaseResponse>> StartEmailCampaignAsyncWithHttpInfo (int? storefrontOid, string emailCampaignUuid)
        {
            // verify the required parameter 'storefrontOid' is set
            if (storefrontOid == null)
                throw new ApiException(400, "Missing required parameter 'storefrontOid' when calling StorefrontApi->StartEmailCampaign");
            // verify the required parameter 'emailCampaignUuid' is set
            if (emailCampaignUuid == null)
                throw new ApiException(400, "Missing required parameter 'emailCampaignUuid' when calling StorefrontApi->StartEmailCampaign");

            var localVarPath = "/storefront/{storefront_oid}/email/campaigns/{email_campaign_uuid}/start";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (storefrontOid != null) localVarPathParams.Add("storefront_oid", this.Configuration.ApiClient.ParameterToString(storefrontOid)); // path parameter
            if (emailCampaignUuid != null) localVarPathParams.Add("email_campaign_uuid", this.Configuration.ApiClient.ParameterToString(emailCampaignUuid)); // path parameter

            // authentication (ultraCartBrowserApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key")))
            {
                localVarHeaderParams["x-ultracart-browser-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key");
            }
            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("StartEmailCampaign", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BaseResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (BaseResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BaseResponse)));
        }

        /// <summary>
        /// Subscribe customers to email list 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="emailListUuid"></param>
        /// <param name="customers">Customers</param>
        /// <returns>EmailListSubscribeResponse</returns>
        public EmailListSubscribeResponse SubscribeToEmailList (int? storefrontOid, string emailListUuid, List<EmailCustomer> customers)
        {
             ApiResponse<EmailListSubscribeResponse> localVarResponse = SubscribeToEmailListWithHttpInfo(storefrontOid, emailListUuid, customers);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Subscribe customers to email list 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="emailListUuid"></param>
        /// <param name="customers">Customers</param>
        /// <returns>ApiResponse of EmailListSubscribeResponse</returns>
        public ApiResponse< EmailListSubscribeResponse > SubscribeToEmailListWithHttpInfo (int? storefrontOid, string emailListUuid, List<EmailCustomer> customers)
        {
            // verify the required parameter 'storefrontOid' is set
            if (storefrontOid == null)
                throw new ApiException(400, "Missing required parameter 'storefrontOid' when calling StorefrontApi->SubscribeToEmailList");
            // verify the required parameter 'emailListUuid' is set
            if (emailListUuid == null)
                throw new ApiException(400, "Missing required parameter 'emailListUuid' when calling StorefrontApi->SubscribeToEmailList");
            // verify the required parameter 'customers' is set
            if (customers == null)
                throw new ApiException(400, "Missing required parameter 'customers' when calling StorefrontApi->SubscribeToEmailList");

            var localVarPath = "/storefront/{storefront_oid}/email/lists/{email_list_uuid}/subscribe";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (storefrontOid != null) localVarPathParams.Add("storefront_oid", this.Configuration.ApiClient.ParameterToString(storefrontOid)); // path parameter
            if (emailListUuid != null) localVarPathParams.Add("email_list_uuid", this.Configuration.ApiClient.ParameterToString(emailListUuid)); // path parameter
            if (customers != null && customers.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(customers); // http body (model) parameter
            }
            else
            {
                localVarPostBody = customers; // byte array
            }

            // authentication (ultraCartBrowserApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key")))
            {
                localVarHeaderParams["x-ultracart-browser-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key");
            }
            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SubscribeToEmailList", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EmailListSubscribeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (EmailListSubscribeResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EmailListSubscribeResponse)));
        }

        /// <summary>
        /// Subscribe customers to email list 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="emailListUuid"></param>
        /// <param name="customers">Customers</param>
        /// <returns>Task of EmailListSubscribeResponse</returns>
        public async System.Threading.Tasks.Task<EmailListSubscribeResponse> SubscribeToEmailListAsync (int? storefrontOid, string emailListUuid, List<EmailCustomer> customers)
        {
             ApiResponse<EmailListSubscribeResponse> localVarResponse = await SubscribeToEmailListAsyncWithHttpInfo(storefrontOid, emailListUuid, customers);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Subscribe customers to email list 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="emailListUuid"></param>
        /// <param name="customers">Customers</param>
        /// <returns>Task of ApiResponse (EmailListSubscribeResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<EmailListSubscribeResponse>> SubscribeToEmailListAsyncWithHttpInfo (int? storefrontOid, string emailListUuid, List<EmailCustomer> customers)
        {
            // verify the required parameter 'storefrontOid' is set
            if (storefrontOid == null)
                throw new ApiException(400, "Missing required parameter 'storefrontOid' when calling StorefrontApi->SubscribeToEmailList");
            // verify the required parameter 'emailListUuid' is set
            if (emailListUuid == null)
                throw new ApiException(400, "Missing required parameter 'emailListUuid' when calling StorefrontApi->SubscribeToEmailList");
            // verify the required parameter 'customers' is set
            if (customers == null)
                throw new ApiException(400, "Missing required parameter 'customers' when calling StorefrontApi->SubscribeToEmailList");

            var localVarPath = "/storefront/{storefront_oid}/email/lists/{email_list_uuid}/subscribe";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (storefrontOid != null) localVarPathParams.Add("storefront_oid", this.Configuration.ApiClient.ParameterToString(storefrontOid)); // path parameter
            if (emailListUuid != null) localVarPathParams.Add("email_list_uuid", this.Configuration.ApiClient.ParameterToString(emailListUuid)); // path parameter
            if (customers != null && customers.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(customers); // http body (model) parameter
            }
            else
            {
                localVarPostBody = customers; // byte array
            }

            // authentication (ultraCartBrowserApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key")))
            {
                localVarHeaderParams["x-ultracart-browser-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key");
            }
            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SubscribeToEmailList", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EmailListSubscribeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (EmailListSubscribeResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EmailListSubscribeResponse)));
        }

        /// <summary>
        /// Remove favorite flag on screen recording Remove favorite flag on screen recording 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="screenRecordingUuid"></param>
        /// <returns></returns>
        public void UnfavoriteScreenRecording (int? storefrontOid, string screenRecordingUuid)
        {
             UnfavoriteScreenRecordingWithHttpInfo(storefrontOid, screenRecordingUuid);
        }

        /// <summary>
        /// Remove favorite flag on screen recording Remove favorite flag on screen recording 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="screenRecordingUuid"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> UnfavoriteScreenRecordingWithHttpInfo (int? storefrontOid, string screenRecordingUuid)
        {
            // verify the required parameter 'storefrontOid' is set
            if (storefrontOid == null)
                throw new ApiException(400, "Missing required parameter 'storefrontOid' when calling StorefrontApi->UnfavoriteScreenRecording");
            // verify the required parameter 'screenRecordingUuid' is set
            if (screenRecordingUuid == null)
                throw new ApiException(400, "Missing required parameter 'screenRecordingUuid' when calling StorefrontApi->UnfavoriteScreenRecording");

            var localVarPath = "/storefront/{storefront_oid}/screen_recordings/{screen_recording_uuid}/favorite";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (storefrontOid != null) localVarPathParams.Add("storefront_oid", this.Configuration.ApiClient.ParameterToString(storefrontOid)); // path parameter
            if (screenRecordingUuid != null) localVarPathParams.Add("screen_recording_uuid", this.Configuration.ApiClient.ParameterToString(screenRecordingUuid)); // path parameter

            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UnfavoriteScreenRecording", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Remove favorite flag on screen recording Remove favorite flag on screen recording 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="screenRecordingUuid"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UnfavoriteScreenRecordingAsync (int? storefrontOid, string screenRecordingUuid)
        {
             await UnfavoriteScreenRecordingAsyncWithHttpInfo(storefrontOid, screenRecordingUuid);

        }

        /// <summary>
        /// Remove favorite flag on screen recording Remove favorite flag on screen recording 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="screenRecordingUuid"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> UnfavoriteScreenRecordingAsyncWithHttpInfo (int? storefrontOid, string screenRecordingUuid)
        {
            // verify the required parameter 'storefrontOid' is set
            if (storefrontOid == null)
                throw new ApiException(400, "Missing required parameter 'storefrontOid' when calling StorefrontApi->UnfavoriteScreenRecording");
            // verify the required parameter 'screenRecordingUuid' is set
            if (screenRecordingUuid == null)
                throw new ApiException(400, "Missing required parameter 'screenRecordingUuid' when calling StorefrontApi->UnfavoriteScreenRecording");

            var localVarPath = "/storefront/{storefront_oid}/screen_recordings/{screen_recording_uuid}/favorite";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (storefrontOid != null) localVarPathParams.Add("storefront_oid", this.Configuration.ApiClient.ParameterToString(storefrontOid)); // path parameter
            if (screenRecordingUuid != null) localVarPathParams.Add("screen_recording_uuid", this.Configuration.ApiClient.ParameterToString(screenRecordingUuid)); // path parameter

            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UnfavoriteScreenRecording", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Update email campaign 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="emailCampaignUuid"></param>
        /// <param name="emailCampaign">Email campaign</param>
        /// <returns>EmailCampaignResponse</returns>
        public EmailCampaignResponse UpdateEmailCampaign (int? storefrontOid, string emailCampaignUuid, EmailCampaign emailCampaign)
        {
             ApiResponse<EmailCampaignResponse> localVarResponse = UpdateEmailCampaignWithHttpInfo(storefrontOid, emailCampaignUuid, emailCampaign);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update email campaign 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="emailCampaignUuid"></param>
        /// <param name="emailCampaign">Email campaign</param>
        /// <returns>ApiResponse of EmailCampaignResponse</returns>
        public ApiResponse< EmailCampaignResponse > UpdateEmailCampaignWithHttpInfo (int? storefrontOid, string emailCampaignUuid, EmailCampaign emailCampaign)
        {
            // verify the required parameter 'storefrontOid' is set
            if (storefrontOid == null)
                throw new ApiException(400, "Missing required parameter 'storefrontOid' when calling StorefrontApi->UpdateEmailCampaign");
            // verify the required parameter 'emailCampaignUuid' is set
            if (emailCampaignUuid == null)
                throw new ApiException(400, "Missing required parameter 'emailCampaignUuid' when calling StorefrontApi->UpdateEmailCampaign");
            // verify the required parameter 'emailCampaign' is set
            if (emailCampaign == null)
                throw new ApiException(400, "Missing required parameter 'emailCampaign' when calling StorefrontApi->UpdateEmailCampaign");

            var localVarPath = "/storefront/{storefront_oid}/email/campaigns/{email_campaign_uuid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (storefrontOid != null) localVarPathParams.Add("storefront_oid", this.Configuration.ApiClient.ParameterToString(storefrontOid)); // path parameter
            if (emailCampaignUuid != null) localVarPathParams.Add("email_campaign_uuid", this.Configuration.ApiClient.ParameterToString(emailCampaignUuid)); // path parameter
            if (emailCampaign != null && emailCampaign.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(emailCampaign); // http body (model) parameter
            }
            else
            {
                localVarPostBody = emailCampaign; // byte array
            }

            // authentication (ultraCartBrowserApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key")))
            {
                localVarHeaderParams["x-ultracart-browser-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key");
            }
            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateEmailCampaign", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EmailCampaignResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (EmailCampaignResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EmailCampaignResponse)));
        }

        /// <summary>
        /// Update email campaign 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="emailCampaignUuid"></param>
        /// <param name="emailCampaign">Email campaign</param>
        /// <returns>Task of EmailCampaignResponse</returns>
        public async System.Threading.Tasks.Task<EmailCampaignResponse> UpdateEmailCampaignAsync (int? storefrontOid, string emailCampaignUuid, EmailCampaign emailCampaign)
        {
             ApiResponse<EmailCampaignResponse> localVarResponse = await UpdateEmailCampaignAsyncWithHttpInfo(storefrontOid, emailCampaignUuid, emailCampaign);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update email campaign 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="emailCampaignUuid"></param>
        /// <param name="emailCampaign">Email campaign</param>
        /// <returns>Task of ApiResponse (EmailCampaignResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<EmailCampaignResponse>> UpdateEmailCampaignAsyncWithHttpInfo (int? storefrontOid, string emailCampaignUuid, EmailCampaign emailCampaign)
        {
            // verify the required parameter 'storefrontOid' is set
            if (storefrontOid == null)
                throw new ApiException(400, "Missing required parameter 'storefrontOid' when calling StorefrontApi->UpdateEmailCampaign");
            // verify the required parameter 'emailCampaignUuid' is set
            if (emailCampaignUuid == null)
                throw new ApiException(400, "Missing required parameter 'emailCampaignUuid' when calling StorefrontApi->UpdateEmailCampaign");
            // verify the required parameter 'emailCampaign' is set
            if (emailCampaign == null)
                throw new ApiException(400, "Missing required parameter 'emailCampaign' when calling StorefrontApi->UpdateEmailCampaign");

            var localVarPath = "/storefront/{storefront_oid}/email/campaigns/{email_campaign_uuid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (storefrontOid != null) localVarPathParams.Add("storefront_oid", this.Configuration.ApiClient.ParameterToString(storefrontOid)); // path parameter
            if (emailCampaignUuid != null) localVarPathParams.Add("email_campaign_uuid", this.Configuration.ApiClient.ParameterToString(emailCampaignUuid)); // path parameter
            if (emailCampaign != null && emailCampaign.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(emailCampaign); // http body (model) parameter
            }
            else
            {
                localVarPostBody = emailCampaign; // byte array
            }

            // authentication (ultraCartBrowserApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key")))
            {
                localVarHeaderParams["x-ultracart-browser-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key");
            }
            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateEmailCampaign", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EmailCampaignResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (EmailCampaignResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EmailCampaignResponse)));
        }

        /// <summary>
        /// Update email campaign folder 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="emailCampaignFolderUuid"></param>
        /// <param name="emailCampaignFolder">Email campaign folder</param>
        /// <returns>EmailCampaignFolderResponse</returns>
        public EmailCampaignFolderResponse UpdateEmailCampaignFolder (int? storefrontOid, string emailCampaignFolderUuid, EmailCampaignFolder emailCampaignFolder)
        {
             ApiResponse<EmailCampaignFolderResponse> localVarResponse = UpdateEmailCampaignFolderWithHttpInfo(storefrontOid, emailCampaignFolderUuid, emailCampaignFolder);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update email campaign folder 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="emailCampaignFolderUuid"></param>
        /// <param name="emailCampaignFolder">Email campaign folder</param>
        /// <returns>ApiResponse of EmailCampaignFolderResponse</returns>
        public ApiResponse< EmailCampaignFolderResponse > UpdateEmailCampaignFolderWithHttpInfo (int? storefrontOid, string emailCampaignFolderUuid, EmailCampaignFolder emailCampaignFolder)
        {
            // verify the required parameter 'storefrontOid' is set
            if (storefrontOid == null)
                throw new ApiException(400, "Missing required parameter 'storefrontOid' when calling StorefrontApi->UpdateEmailCampaignFolder");
            // verify the required parameter 'emailCampaignFolderUuid' is set
            if (emailCampaignFolderUuid == null)
                throw new ApiException(400, "Missing required parameter 'emailCampaignFolderUuid' when calling StorefrontApi->UpdateEmailCampaignFolder");
            // verify the required parameter 'emailCampaignFolder' is set
            if (emailCampaignFolder == null)
                throw new ApiException(400, "Missing required parameter 'emailCampaignFolder' when calling StorefrontApi->UpdateEmailCampaignFolder");

            var localVarPath = "/storefront/{storefront_oid}/email/campaign_folders/{email_campaign_folder_uuid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (storefrontOid != null) localVarPathParams.Add("storefront_oid", this.Configuration.ApiClient.ParameterToString(storefrontOid)); // path parameter
            if (emailCampaignFolderUuid != null) localVarPathParams.Add("email_campaign_folder_uuid", this.Configuration.ApiClient.ParameterToString(emailCampaignFolderUuid)); // path parameter
            if (emailCampaignFolder != null && emailCampaignFolder.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(emailCampaignFolder); // http body (model) parameter
            }
            else
            {
                localVarPostBody = emailCampaignFolder; // byte array
            }

            // authentication (ultraCartBrowserApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key")))
            {
                localVarHeaderParams["x-ultracart-browser-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key");
            }
            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateEmailCampaignFolder", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EmailCampaignFolderResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (EmailCampaignFolderResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EmailCampaignFolderResponse)));
        }

        /// <summary>
        /// Update email campaign folder 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="emailCampaignFolderUuid"></param>
        /// <param name="emailCampaignFolder">Email campaign folder</param>
        /// <returns>Task of EmailCampaignFolderResponse</returns>
        public async System.Threading.Tasks.Task<EmailCampaignFolderResponse> UpdateEmailCampaignFolderAsync (int? storefrontOid, string emailCampaignFolderUuid, EmailCampaignFolder emailCampaignFolder)
        {
             ApiResponse<EmailCampaignFolderResponse> localVarResponse = await UpdateEmailCampaignFolderAsyncWithHttpInfo(storefrontOid, emailCampaignFolderUuid, emailCampaignFolder);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update email campaign folder 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="emailCampaignFolderUuid"></param>
        /// <param name="emailCampaignFolder">Email campaign folder</param>
        /// <returns>Task of ApiResponse (EmailCampaignFolderResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<EmailCampaignFolderResponse>> UpdateEmailCampaignFolderAsyncWithHttpInfo (int? storefrontOid, string emailCampaignFolderUuid, EmailCampaignFolder emailCampaignFolder)
        {
            // verify the required parameter 'storefrontOid' is set
            if (storefrontOid == null)
                throw new ApiException(400, "Missing required parameter 'storefrontOid' when calling StorefrontApi->UpdateEmailCampaignFolder");
            // verify the required parameter 'emailCampaignFolderUuid' is set
            if (emailCampaignFolderUuid == null)
                throw new ApiException(400, "Missing required parameter 'emailCampaignFolderUuid' when calling StorefrontApi->UpdateEmailCampaignFolder");
            // verify the required parameter 'emailCampaignFolder' is set
            if (emailCampaignFolder == null)
                throw new ApiException(400, "Missing required parameter 'emailCampaignFolder' when calling StorefrontApi->UpdateEmailCampaignFolder");

            var localVarPath = "/storefront/{storefront_oid}/email/campaign_folders/{email_campaign_folder_uuid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (storefrontOid != null) localVarPathParams.Add("storefront_oid", this.Configuration.ApiClient.ParameterToString(storefrontOid)); // path parameter
            if (emailCampaignFolderUuid != null) localVarPathParams.Add("email_campaign_folder_uuid", this.Configuration.ApiClient.ParameterToString(emailCampaignFolderUuid)); // path parameter
            if (emailCampaignFolder != null && emailCampaignFolder.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(emailCampaignFolder); // http body (model) parameter
            }
            else
            {
                localVarPostBody = emailCampaignFolder; // byte array
            }

            // authentication (ultraCartBrowserApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key")))
            {
                localVarHeaderParams["x-ultracart-browser-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key");
            }
            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateEmailCampaignFolder", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EmailCampaignFolderResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (EmailCampaignFolderResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EmailCampaignFolderResponse)));
        }

        /// <summary>
        /// Update email commseq 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="commseqUuid"></param>
        /// <param name="emailCommseq">Email commseq</param>
        /// <returns>EmailCommseqResponse</returns>
        public EmailCommseqResponse UpdateEmailCommseq (int? storefrontOid, string commseqUuid, EmailCommseq emailCommseq)
        {
             ApiResponse<EmailCommseqResponse> localVarResponse = UpdateEmailCommseqWithHttpInfo(storefrontOid, commseqUuid, emailCommseq);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update email commseq 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="commseqUuid"></param>
        /// <param name="emailCommseq">Email commseq</param>
        /// <returns>ApiResponse of EmailCommseqResponse</returns>
        public ApiResponse< EmailCommseqResponse > UpdateEmailCommseqWithHttpInfo (int? storefrontOid, string commseqUuid, EmailCommseq emailCommseq)
        {
            // verify the required parameter 'storefrontOid' is set
            if (storefrontOid == null)
                throw new ApiException(400, "Missing required parameter 'storefrontOid' when calling StorefrontApi->UpdateEmailCommseq");
            // verify the required parameter 'commseqUuid' is set
            if (commseqUuid == null)
                throw new ApiException(400, "Missing required parameter 'commseqUuid' when calling StorefrontApi->UpdateEmailCommseq");
            // verify the required parameter 'emailCommseq' is set
            if (emailCommseq == null)
                throw new ApiException(400, "Missing required parameter 'emailCommseq' when calling StorefrontApi->UpdateEmailCommseq");

            var localVarPath = "/storefront/{storefront_oid}/email/commseqs/{commseq_uuid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (storefrontOid != null) localVarPathParams.Add("storefront_oid", this.Configuration.ApiClient.ParameterToString(storefrontOid)); // path parameter
            if (commseqUuid != null) localVarPathParams.Add("commseq_uuid", this.Configuration.ApiClient.ParameterToString(commseqUuid)); // path parameter
            if (emailCommseq != null && emailCommseq.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(emailCommseq); // http body (model) parameter
            }
            else
            {
                localVarPostBody = emailCommseq; // byte array
            }

            // authentication (ultraCartBrowserApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key")))
            {
                localVarHeaderParams["x-ultracart-browser-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key");
            }
            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateEmailCommseq", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EmailCommseqResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (EmailCommseqResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EmailCommseqResponse)));
        }

        /// <summary>
        /// Update email commseq 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="commseqUuid"></param>
        /// <param name="emailCommseq">Email commseq</param>
        /// <returns>Task of EmailCommseqResponse</returns>
        public async System.Threading.Tasks.Task<EmailCommseqResponse> UpdateEmailCommseqAsync (int? storefrontOid, string commseqUuid, EmailCommseq emailCommseq)
        {
             ApiResponse<EmailCommseqResponse> localVarResponse = await UpdateEmailCommseqAsyncWithHttpInfo(storefrontOid, commseqUuid, emailCommseq);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update email commseq 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="commseqUuid"></param>
        /// <param name="emailCommseq">Email commseq</param>
        /// <returns>Task of ApiResponse (EmailCommseqResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<EmailCommseqResponse>> UpdateEmailCommseqAsyncWithHttpInfo (int? storefrontOid, string commseqUuid, EmailCommseq emailCommseq)
        {
            // verify the required parameter 'storefrontOid' is set
            if (storefrontOid == null)
                throw new ApiException(400, "Missing required parameter 'storefrontOid' when calling StorefrontApi->UpdateEmailCommseq");
            // verify the required parameter 'commseqUuid' is set
            if (commseqUuid == null)
                throw new ApiException(400, "Missing required parameter 'commseqUuid' when calling StorefrontApi->UpdateEmailCommseq");
            // verify the required parameter 'emailCommseq' is set
            if (emailCommseq == null)
                throw new ApiException(400, "Missing required parameter 'emailCommseq' when calling StorefrontApi->UpdateEmailCommseq");

            var localVarPath = "/storefront/{storefront_oid}/email/commseqs/{commseq_uuid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (storefrontOid != null) localVarPathParams.Add("storefront_oid", this.Configuration.ApiClient.ParameterToString(storefrontOid)); // path parameter
            if (commseqUuid != null) localVarPathParams.Add("commseq_uuid", this.Configuration.ApiClient.ParameterToString(commseqUuid)); // path parameter
            if (emailCommseq != null && emailCommseq.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(emailCommseq); // http body (model) parameter
            }
            else
            {
                localVarPostBody = emailCommseq; // byte array
            }

            // authentication (ultraCartBrowserApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key")))
            {
                localVarHeaderParams["x-ultracart-browser-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key");
            }
            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateEmailCommseq", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EmailCommseqResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (EmailCommseqResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EmailCommseqResponse)));
        }

        /// <summary>
        /// Update email customer 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="emailCustomerUuid"></param>
        /// <param name="emailCustomer">Email customer</param>
        /// <returns></returns>
        public void UpdateEmailCustomer (int? storefrontOid, string emailCustomerUuid, EmailCustomer emailCustomer)
        {
             UpdateEmailCustomerWithHttpInfo(storefrontOid, emailCustomerUuid, emailCustomer);
        }

        /// <summary>
        /// Update email customer 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="emailCustomerUuid"></param>
        /// <param name="emailCustomer">Email customer</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> UpdateEmailCustomerWithHttpInfo (int? storefrontOid, string emailCustomerUuid, EmailCustomer emailCustomer)
        {
            // verify the required parameter 'storefrontOid' is set
            if (storefrontOid == null)
                throw new ApiException(400, "Missing required parameter 'storefrontOid' when calling StorefrontApi->UpdateEmailCustomer");
            // verify the required parameter 'emailCustomerUuid' is set
            if (emailCustomerUuid == null)
                throw new ApiException(400, "Missing required parameter 'emailCustomerUuid' when calling StorefrontApi->UpdateEmailCustomer");
            // verify the required parameter 'emailCustomer' is set
            if (emailCustomer == null)
                throw new ApiException(400, "Missing required parameter 'emailCustomer' when calling StorefrontApi->UpdateEmailCustomer");

            var localVarPath = "/storefront/{storefront_oid}/email/customers/{email_customer_uuid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (storefrontOid != null) localVarPathParams.Add("storefront_oid", this.Configuration.ApiClient.ParameterToString(storefrontOid)); // path parameter
            if (emailCustomerUuid != null) localVarPathParams.Add("email_customer_uuid", this.Configuration.ApiClient.ParameterToString(emailCustomerUuid)); // path parameter
            if (emailCustomer != null && emailCustomer.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(emailCustomer); // http body (model) parameter
            }
            else
            {
                localVarPostBody = emailCustomer; // byte array
            }

            // authentication (ultraCartBrowserApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key")))
            {
                localVarHeaderParams["x-ultracart-browser-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key");
            }
            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateEmailCustomer", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Update email customer 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="emailCustomerUuid"></param>
        /// <param name="emailCustomer">Email customer</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UpdateEmailCustomerAsync (int? storefrontOid, string emailCustomerUuid, EmailCustomer emailCustomer)
        {
             await UpdateEmailCustomerAsyncWithHttpInfo(storefrontOid, emailCustomerUuid, emailCustomer);

        }

        /// <summary>
        /// Update email customer 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="emailCustomerUuid"></param>
        /// <param name="emailCustomer">Email customer</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> UpdateEmailCustomerAsyncWithHttpInfo (int? storefrontOid, string emailCustomerUuid, EmailCustomer emailCustomer)
        {
            // verify the required parameter 'storefrontOid' is set
            if (storefrontOid == null)
                throw new ApiException(400, "Missing required parameter 'storefrontOid' when calling StorefrontApi->UpdateEmailCustomer");
            // verify the required parameter 'emailCustomerUuid' is set
            if (emailCustomerUuid == null)
                throw new ApiException(400, "Missing required parameter 'emailCustomerUuid' when calling StorefrontApi->UpdateEmailCustomer");
            // verify the required parameter 'emailCustomer' is set
            if (emailCustomer == null)
                throw new ApiException(400, "Missing required parameter 'emailCustomer' when calling StorefrontApi->UpdateEmailCustomer");

            var localVarPath = "/storefront/{storefront_oid}/email/customers/{email_customer_uuid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (storefrontOid != null) localVarPathParams.Add("storefront_oid", this.Configuration.ApiClient.ParameterToString(storefrontOid)); // path parameter
            if (emailCustomerUuid != null) localVarPathParams.Add("email_customer_uuid", this.Configuration.ApiClient.ParameterToString(emailCustomerUuid)); // path parameter
            if (emailCustomer != null && emailCustomer.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(emailCustomer); // http body (model) parameter
            }
            else
            {
                localVarPostBody = emailCustomer; // byte array
            }

            // authentication (ultraCartBrowserApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key")))
            {
                localVarHeaderParams["x-ultracart-browser-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key");
            }
            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateEmailCustomer", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Update email email 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="commseqEmailUuid"></param>
        /// <param name="emailCommseqEmail">Email commseq email</param>
        /// <returns>EmailCommseqEmailResponse</returns>
        public EmailCommseqEmailResponse UpdateEmailEmail (int? storefrontOid, string commseqEmailUuid, EmailCommseqEmail emailCommseqEmail)
        {
             ApiResponse<EmailCommseqEmailResponse> localVarResponse = UpdateEmailEmailWithHttpInfo(storefrontOid, commseqEmailUuid, emailCommseqEmail);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update email email 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="commseqEmailUuid"></param>
        /// <param name="emailCommseqEmail">Email commseq email</param>
        /// <returns>ApiResponse of EmailCommseqEmailResponse</returns>
        public ApiResponse< EmailCommseqEmailResponse > UpdateEmailEmailWithHttpInfo (int? storefrontOid, string commseqEmailUuid, EmailCommseqEmail emailCommseqEmail)
        {
            // verify the required parameter 'storefrontOid' is set
            if (storefrontOid == null)
                throw new ApiException(400, "Missing required parameter 'storefrontOid' when calling StorefrontApi->UpdateEmailEmail");
            // verify the required parameter 'commseqEmailUuid' is set
            if (commseqEmailUuid == null)
                throw new ApiException(400, "Missing required parameter 'commseqEmailUuid' when calling StorefrontApi->UpdateEmailEmail");
            // verify the required parameter 'emailCommseqEmail' is set
            if (emailCommseqEmail == null)
                throw new ApiException(400, "Missing required parameter 'emailCommseqEmail' when calling StorefrontApi->UpdateEmailEmail");

            var localVarPath = "/storefront/{storefront_oid}/email/emails/{commseq_email_uuid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (storefrontOid != null) localVarPathParams.Add("storefront_oid", this.Configuration.ApiClient.ParameterToString(storefrontOid)); // path parameter
            if (commseqEmailUuid != null) localVarPathParams.Add("commseq_email_uuid", this.Configuration.ApiClient.ParameterToString(commseqEmailUuid)); // path parameter
            if (emailCommseqEmail != null && emailCommseqEmail.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(emailCommseqEmail); // http body (model) parameter
            }
            else
            {
                localVarPostBody = emailCommseqEmail; // byte array
            }

            // authentication (ultraCartBrowserApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key")))
            {
                localVarHeaderParams["x-ultracart-browser-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key");
            }
            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateEmailEmail", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EmailCommseqEmailResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (EmailCommseqEmailResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EmailCommseqEmailResponse)));
        }

        /// <summary>
        /// Update email email 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="commseqEmailUuid"></param>
        /// <param name="emailCommseqEmail">Email commseq email</param>
        /// <returns>Task of EmailCommseqEmailResponse</returns>
        public async System.Threading.Tasks.Task<EmailCommseqEmailResponse> UpdateEmailEmailAsync (int? storefrontOid, string commseqEmailUuid, EmailCommseqEmail emailCommseqEmail)
        {
             ApiResponse<EmailCommseqEmailResponse> localVarResponse = await UpdateEmailEmailAsyncWithHttpInfo(storefrontOid, commseqEmailUuid, emailCommseqEmail);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update email email 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="commseqEmailUuid"></param>
        /// <param name="emailCommseqEmail">Email commseq email</param>
        /// <returns>Task of ApiResponse (EmailCommseqEmailResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<EmailCommseqEmailResponse>> UpdateEmailEmailAsyncWithHttpInfo (int? storefrontOid, string commseqEmailUuid, EmailCommseqEmail emailCommseqEmail)
        {
            // verify the required parameter 'storefrontOid' is set
            if (storefrontOid == null)
                throw new ApiException(400, "Missing required parameter 'storefrontOid' when calling StorefrontApi->UpdateEmailEmail");
            // verify the required parameter 'commseqEmailUuid' is set
            if (commseqEmailUuid == null)
                throw new ApiException(400, "Missing required parameter 'commseqEmailUuid' when calling StorefrontApi->UpdateEmailEmail");
            // verify the required parameter 'emailCommseqEmail' is set
            if (emailCommseqEmail == null)
                throw new ApiException(400, "Missing required parameter 'emailCommseqEmail' when calling StorefrontApi->UpdateEmailEmail");

            var localVarPath = "/storefront/{storefront_oid}/email/emails/{commseq_email_uuid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (storefrontOid != null) localVarPathParams.Add("storefront_oid", this.Configuration.ApiClient.ParameterToString(storefrontOid)); // path parameter
            if (commseqEmailUuid != null) localVarPathParams.Add("commseq_email_uuid", this.Configuration.ApiClient.ParameterToString(commseqEmailUuid)); // path parameter
            if (emailCommseqEmail != null && emailCommseqEmail.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(emailCommseqEmail); // http body (model) parameter
            }
            else
            {
                localVarPostBody = emailCommseqEmail; // byte array
            }

            // authentication (ultraCartBrowserApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key")))
            {
                localVarHeaderParams["x-ultracart-browser-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key");
            }
            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateEmailEmail", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EmailCommseqEmailResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (EmailCommseqEmailResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EmailCommseqEmailResponse)));
        }

        /// <summary>
        /// Update email flow 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="emailFlowUuid"></param>
        /// <param name="emailFlow">Email flow</param>
        /// <returns>EmailFlowResponse</returns>
        public EmailFlowResponse UpdateEmailFlow (int? storefrontOid, string emailFlowUuid, EmailFlow emailFlow)
        {
             ApiResponse<EmailFlowResponse> localVarResponse = UpdateEmailFlowWithHttpInfo(storefrontOid, emailFlowUuid, emailFlow);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update email flow 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="emailFlowUuid"></param>
        /// <param name="emailFlow">Email flow</param>
        /// <returns>ApiResponse of EmailFlowResponse</returns>
        public ApiResponse< EmailFlowResponse > UpdateEmailFlowWithHttpInfo (int? storefrontOid, string emailFlowUuid, EmailFlow emailFlow)
        {
            // verify the required parameter 'storefrontOid' is set
            if (storefrontOid == null)
                throw new ApiException(400, "Missing required parameter 'storefrontOid' when calling StorefrontApi->UpdateEmailFlow");
            // verify the required parameter 'emailFlowUuid' is set
            if (emailFlowUuid == null)
                throw new ApiException(400, "Missing required parameter 'emailFlowUuid' when calling StorefrontApi->UpdateEmailFlow");
            // verify the required parameter 'emailFlow' is set
            if (emailFlow == null)
                throw new ApiException(400, "Missing required parameter 'emailFlow' when calling StorefrontApi->UpdateEmailFlow");

            var localVarPath = "/storefront/{storefront_oid}/email/flows/{email_flow_uuid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (storefrontOid != null) localVarPathParams.Add("storefront_oid", this.Configuration.ApiClient.ParameterToString(storefrontOid)); // path parameter
            if (emailFlowUuid != null) localVarPathParams.Add("email_flow_uuid", this.Configuration.ApiClient.ParameterToString(emailFlowUuid)); // path parameter
            if (emailFlow != null && emailFlow.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(emailFlow); // http body (model) parameter
            }
            else
            {
                localVarPostBody = emailFlow; // byte array
            }

            // authentication (ultraCartBrowserApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key")))
            {
                localVarHeaderParams["x-ultracart-browser-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key");
            }
            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateEmailFlow", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EmailFlowResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (EmailFlowResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EmailFlowResponse)));
        }

        /// <summary>
        /// Update email flow 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="emailFlowUuid"></param>
        /// <param name="emailFlow">Email flow</param>
        /// <returns>Task of EmailFlowResponse</returns>
        public async System.Threading.Tasks.Task<EmailFlowResponse> UpdateEmailFlowAsync (int? storefrontOid, string emailFlowUuid, EmailFlow emailFlow)
        {
             ApiResponse<EmailFlowResponse> localVarResponse = await UpdateEmailFlowAsyncWithHttpInfo(storefrontOid, emailFlowUuid, emailFlow);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update email flow 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="emailFlowUuid"></param>
        /// <param name="emailFlow">Email flow</param>
        /// <returns>Task of ApiResponse (EmailFlowResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<EmailFlowResponse>> UpdateEmailFlowAsyncWithHttpInfo (int? storefrontOid, string emailFlowUuid, EmailFlow emailFlow)
        {
            // verify the required parameter 'storefrontOid' is set
            if (storefrontOid == null)
                throw new ApiException(400, "Missing required parameter 'storefrontOid' when calling StorefrontApi->UpdateEmailFlow");
            // verify the required parameter 'emailFlowUuid' is set
            if (emailFlowUuid == null)
                throw new ApiException(400, "Missing required parameter 'emailFlowUuid' when calling StorefrontApi->UpdateEmailFlow");
            // verify the required parameter 'emailFlow' is set
            if (emailFlow == null)
                throw new ApiException(400, "Missing required parameter 'emailFlow' when calling StorefrontApi->UpdateEmailFlow");

            var localVarPath = "/storefront/{storefront_oid}/email/flows/{email_flow_uuid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (storefrontOid != null) localVarPathParams.Add("storefront_oid", this.Configuration.ApiClient.ParameterToString(storefrontOid)); // path parameter
            if (emailFlowUuid != null) localVarPathParams.Add("email_flow_uuid", this.Configuration.ApiClient.ParameterToString(emailFlowUuid)); // path parameter
            if (emailFlow != null && emailFlow.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(emailFlow); // http body (model) parameter
            }
            else
            {
                localVarPostBody = emailFlow; // byte array
            }

            // authentication (ultraCartBrowserApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key")))
            {
                localVarHeaderParams["x-ultracart-browser-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key");
            }
            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateEmailFlow", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EmailFlowResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (EmailFlowResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EmailFlowResponse)));
        }

        /// <summary>
        /// Update email flow folder 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="emailFlowFolderUuid"></param>
        /// <param name="emailFlowFolder">Email flow folder</param>
        /// <returns>EmailFlowFolderResponse</returns>
        public EmailFlowFolderResponse UpdateEmailFlowFolder (int? storefrontOid, string emailFlowFolderUuid, EmailFlowFolder emailFlowFolder)
        {
             ApiResponse<EmailFlowFolderResponse> localVarResponse = UpdateEmailFlowFolderWithHttpInfo(storefrontOid, emailFlowFolderUuid, emailFlowFolder);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update email flow folder 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="emailFlowFolderUuid"></param>
        /// <param name="emailFlowFolder">Email flow folder</param>
        /// <returns>ApiResponse of EmailFlowFolderResponse</returns>
        public ApiResponse< EmailFlowFolderResponse > UpdateEmailFlowFolderWithHttpInfo (int? storefrontOid, string emailFlowFolderUuid, EmailFlowFolder emailFlowFolder)
        {
            // verify the required parameter 'storefrontOid' is set
            if (storefrontOid == null)
                throw new ApiException(400, "Missing required parameter 'storefrontOid' when calling StorefrontApi->UpdateEmailFlowFolder");
            // verify the required parameter 'emailFlowFolderUuid' is set
            if (emailFlowFolderUuid == null)
                throw new ApiException(400, "Missing required parameter 'emailFlowFolderUuid' when calling StorefrontApi->UpdateEmailFlowFolder");
            // verify the required parameter 'emailFlowFolder' is set
            if (emailFlowFolder == null)
                throw new ApiException(400, "Missing required parameter 'emailFlowFolder' when calling StorefrontApi->UpdateEmailFlowFolder");

            var localVarPath = "/storefront/{storefront_oid}/email/flow_folders/{email_flow_folder_uuid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (storefrontOid != null) localVarPathParams.Add("storefront_oid", this.Configuration.ApiClient.ParameterToString(storefrontOid)); // path parameter
            if (emailFlowFolderUuid != null) localVarPathParams.Add("email_flow_folder_uuid", this.Configuration.ApiClient.ParameterToString(emailFlowFolderUuid)); // path parameter
            if (emailFlowFolder != null && emailFlowFolder.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(emailFlowFolder); // http body (model) parameter
            }
            else
            {
                localVarPostBody = emailFlowFolder; // byte array
            }

            // authentication (ultraCartBrowserApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key")))
            {
                localVarHeaderParams["x-ultracart-browser-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key");
            }
            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateEmailFlowFolder", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EmailFlowFolderResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (EmailFlowFolderResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EmailFlowFolderResponse)));
        }

        /// <summary>
        /// Update email flow folder 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="emailFlowFolderUuid"></param>
        /// <param name="emailFlowFolder">Email flow folder</param>
        /// <returns>Task of EmailFlowFolderResponse</returns>
        public async System.Threading.Tasks.Task<EmailFlowFolderResponse> UpdateEmailFlowFolderAsync (int? storefrontOid, string emailFlowFolderUuid, EmailFlowFolder emailFlowFolder)
        {
             ApiResponse<EmailFlowFolderResponse> localVarResponse = await UpdateEmailFlowFolderAsyncWithHttpInfo(storefrontOid, emailFlowFolderUuid, emailFlowFolder);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update email flow folder 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="emailFlowFolderUuid"></param>
        /// <param name="emailFlowFolder">Email flow folder</param>
        /// <returns>Task of ApiResponse (EmailFlowFolderResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<EmailFlowFolderResponse>> UpdateEmailFlowFolderAsyncWithHttpInfo (int? storefrontOid, string emailFlowFolderUuid, EmailFlowFolder emailFlowFolder)
        {
            // verify the required parameter 'storefrontOid' is set
            if (storefrontOid == null)
                throw new ApiException(400, "Missing required parameter 'storefrontOid' when calling StorefrontApi->UpdateEmailFlowFolder");
            // verify the required parameter 'emailFlowFolderUuid' is set
            if (emailFlowFolderUuid == null)
                throw new ApiException(400, "Missing required parameter 'emailFlowFolderUuid' when calling StorefrontApi->UpdateEmailFlowFolder");
            // verify the required parameter 'emailFlowFolder' is set
            if (emailFlowFolder == null)
                throw new ApiException(400, "Missing required parameter 'emailFlowFolder' when calling StorefrontApi->UpdateEmailFlowFolder");

            var localVarPath = "/storefront/{storefront_oid}/email/flow_folders/{email_flow_folder_uuid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (storefrontOid != null) localVarPathParams.Add("storefront_oid", this.Configuration.ApiClient.ParameterToString(storefrontOid)); // path parameter
            if (emailFlowFolderUuid != null) localVarPathParams.Add("email_flow_folder_uuid", this.Configuration.ApiClient.ParameterToString(emailFlowFolderUuid)); // path parameter
            if (emailFlowFolder != null && emailFlowFolder.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(emailFlowFolder); // http body (model) parameter
            }
            else
            {
                localVarPostBody = emailFlowFolder; // byte array
            }

            // authentication (ultraCartBrowserApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key")))
            {
                localVarHeaderParams["x-ultracart-browser-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key");
            }
            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateEmailFlowFolder", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EmailFlowFolderResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (EmailFlowFolderResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EmailFlowFolderResponse)));
        }

        /// <summary>
        /// Update email global settings 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="globalSettings">global settings request</param>
        /// <returns>EmailGlobalSettingsResponse</returns>
        public EmailGlobalSettingsResponse UpdateEmailGlobalSettings (EmailGlobalSettings globalSettings)
        {
             ApiResponse<EmailGlobalSettingsResponse> localVarResponse = UpdateEmailGlobalSettingsWithHttpInfo(globalSettings);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update email global settings 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="globalSettings">global settings request</param>
        /// <returns>ApiResponse of EmailGlobalSettingsResponse</returns>
        public ApiResponse< EmailGlobalSettingsResponse > UpdateEmailGlobalSettingsWithHttpInfo (EmailGlobalSettings globalSettings)
        {
            // verify the required parameter 'globalSettings' is set
            if (globalSettings == null)
                throw new ApiException(400, "Missing required parameter 'globalSettings' when calling StorefrontApi->UpdateEmailGlobalSettings");

            var localVarPath = "/storefront/email/global_settings";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (globalSettings != null && globalSettings.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(globalSettings); // http body (model) parameter
            }
            else
            {
                localVarPostBody = globalSettings; // byte array
            }

            // authentication (ultraCartBrowserApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key")))
            {
                localVarHeaderParams["x-ultracart-browser-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key");
            }
            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateEmailGlobalSettings", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EmailGlobalSettingsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (EmailGlobalSettingsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EmailGlobalSettingsResponse)));
        }

        /// <summary>
        /// Update email global settings 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="globalSettings">global settings request</param>
        /// <returns>Task of EmailGlobalSettingsResponse</returns>
        public async System.Threading.Tasks.Task<EmailGlobalSettingsResponse> UpdateEmailGlobalSettingsAsync (EmailGlobalSettings globalSettings)
        {
             ApiResponse<EmailGlobalSettingsResponse> localVarResponse = await UpdateEmailGlobalSettingsAsyncWithHttpInfo(globalSettings);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update email global settings 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="globalSettings">global settings request</param>
        /// <returns>Task of ApiResponse (EmailGlobalSettingsResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<EmailGlobalSettingsResponse>> UpdateEmailGlobalSettingsAsyncWithHttpInfo (EmailGlobalSettings globalSettings)
        {
            // verify the required parameter 'globalSettings' is set
            if (globalSettings == null)
                throw new ApiException(400, "Missing required parameter 'globalSettings' when calling StorefrontApi->UpdateEmailGlobalSettings");

            var localVarPath = "/storefront/email/global_settings";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (globalSettings != null && globalSettings.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(globalSettings); // http body (model) parameter
            }
            else
            {
                localVarPostBody = globalSettings; // byte array
            }

            // authentication (ultraCartBrowserApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key")))
            {
                localVarHeaderParams["x-ultracart-browser-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key");
            }
            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateEmailGlobalSettings", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EmailGlobalSettingsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (EmailGlobalSettingsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EmailGlobalSettingsResponse)));
        }

        /// <summary>
        /// Update email list 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="emailListUuid"></param>
        /// <param name="emailList">Email list</param>
        /// <returns>EmailListResponse</returns>
        public EmailListResponse UpdateEmailList (int? storefrontOid, string emailListUuid, EmailList emailList)
        {
             ApiResponse<EmailListResponse> localVarResponse = UpdateEmailListWithHttpInfo(storefrontOid, emailListUuid, emailList);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update email list 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="emailListUuid"></param>
        /// <param name="emailList">Email list</param>
        /// <returns>ApiResponse of EmailListResponse</returns>
        public ApiResponse< EmailListResponse > UpdateEmailListWithHttpInfo (int? storefrontOid, string emailListUuid, EmailList emailList)
        {
            // verify the required parameter 'storefrontOid' is set
            if (storefrontOid == null)
                throw new ApiException(400, "Missing required parameter 'storefrontOid' when calling StorefrontApi->UpdateEmailList");
            // verify the required parameter 'emailListUuid' is set
            if (emailListUuid == null)
                throw new ApiException(400, "Missing required parameter 'emailListUuid' when calling StorefrontApi->UpdateEmailList");
            // verify the required parameter 'emailList' is set
            if (emailList == null)
                throw new ApiException(400, "Missing required parameter 'emailList' when calling StorefrontApi->UpdateEmailList");

            var localVarPath = "/storefront/{storefront_oid}/email/lists/{email_list_uuid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (storefrontOid != null) localVarPathParams.Add("storefront_oid", this.Configuration.ApiClient.ParameterToString(storefrontOid)); // path parameter
            if (emailListUuid != null) localVarPathParams.Add("email_list_uuid", this.Configuration.ApiClient.ParameterToString(emailListUuid)); // path parameter
            if (emailList != null && emailList.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(emailList); // http body (model) parameter
            }
            else
            {
                localVarPostBody = emailList; // byte array
            }

            // authentication (ultraCartBrowserApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key")))
            {
                localVarHeaderParams["x-ultracart-browser-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key");
            }
            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateEmailList", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EmailListResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (EmailListResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EmailListResponse)));
        }

        /// <summary>
        /// Update email list 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="emailListUuid"></param>
        /// <param name="emailList">Email list</param>
        /// <returns>Task of EmailListResponse</returns>
        public async System.Threading.Tasks.Task<EmailListResponse> UpdateEmailListAsync (int? storefrontOid, string emailListUuid, EmailList emailList)
        {
             ApiResponse<EmailListResponse> localVarResponse = await UpdateEmailListAsyncWithHttpInfo(storefrontOid, emailListUuid, emailList);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update email list 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="emailListUuid"></param>
        /// <param name="emailList">Email list</param>
        /// <returns>Task of ApiResponse (EmailListResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<EmailListResponse>> UpdateEmailListAsyncWithHttpInfo (int? storefrontOid, string emailListUuid, EmailList emailList)
        {
            // verify the required parameter 'storefrontOid' is set
            if (storefrontOid == null)
                throw new ApiException(400, "Missing required parameter 'storefrontOid' when calling StorefrontApi->UpdateEmailList");
            // verify the required parameter 'emailListUuid' is set
            if (emailListUuid == null)
                throw new ApiException(400, "Missing required parameter 'emailListUuid' when calling StorefrontApi->UpdateEmailList");
            // verify the required parameter 'emailList' is set
            if (emailList == null)
                throw new ApiException(400, "Missing required parameter 'emailList' when calling StorefrontApi->UpdateEmailList");

            var localVarPath = "/storefront/{storefront_oid}/email/lists/{email_list_uuid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (storefrontOid != null) localVarPathParams.Add("storefront_oid", this.Configuration.ApiClient.ParameterToString(storefrontOid)); // path parameter
            if (emailListUuid != null) localVarPathParams.Add("email_list_uuid", this.Configuration.ApiClient.ParameterToString(emailListUuid)); // path parameter
            if (emailList != null && emailList.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(emailList); // http body (model) parameter
            }
            else
            {
                localVarPostBody = emailList; // byte array
            }

            // authentication (ultraCartBrowserApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key")))
            {
                localVarHeaderParams["x-ultracart-browser-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key");
            }
            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateEmailList", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EmailListResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (EmailListResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EmailListResponse)));
        }

        /// <summary>
        /// Update email campaign folder 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="emailListSegmentFolderUuid"></param>
        /// <param name="emailListSegmentFolder">Email campaign folder</param>
        /// <returns>EmailListSegmentFolderResponse</returns>
        public EmailListSegmentFolderResponse UpdateEmailListSegmentFolder (int? storefrontOid, string emailListSegmentFolderUuid, EmailListSegmentFolder emailListSegmentFolder)
        {
             ApiResponse<EmailListSegmentFolderResponse> localVarResponse = UpdateEmailListSegmentFolderWithHttpInfo(storefrontOid, emailListSegmentFolderUuid, emailListSegmentFolder);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update email campaign folder 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="emailListSegmentFolderUuid"></param>
        /// <param name="emailListSegmentFolder">Email campaign folder</param>
        /// <returns>ApiResponse of EmailListSegmentFolderResponse</returns>
        public ApiResponse< EmailListSegmentFolderResponse > UpdateEmailListSegmentFolderWithHttpInfo (int? storefrontOid, string emailListSegmentFolderUuid, EmailListSegmentFolder emailListSegmentFolder)
        {
            // verify the required parameter 'storefrontOid' is set
            if (storefrontOid == null)
                throw new ApiException(400, "Missing required parameter 'storefrontOid' when calling StorefrontApi->UpdateEmailListSegmentFolder");
            // verify the required parameter 'emailListSegmentFolderUuid' is set
            if (emailListSegmentFolderUuid == null)
                throw new ApiException(400, "Missing required parameter 'emailListSegmentFolderUuid' when calling StorefrontApi->UpdateEmailListSegmentFolder");
            // verify the required parameter 'emailListSegmentFolder' is set
            if (emailListSegmentFolder == null)
                throw new ApiException(400, "Missing required parameter 'emailListSegmentFolder' when calling StorefrontApi->UpdateEmailListSegmentFolder");

            var localVarPath = "/storefront/{storefront_oid}/email/list_segment_folders/{email_list_segment_folder_uuid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (storefrontOid != null) localVarPathParams.Add("storefront_oid", this.Configuration.ApiClient.ParameterToString(storefrontOid)); // path parameter
            if (emailListSegmentFolderUuid != null) localVarPathParams.Add("email_list_segment_folder_uuid", this.Configuration.ApiClient.ParameterToString(emailListSegmentFolderUuid)); // path parameter
            if (emailListSegmentFolder != null && emailListSegmentFolder.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(emailListSegmentFolder); // http body (model) parameter
            }
            else
            {
                localVarPostBody = emailListSegmentFolder; // byte array
            }

            // authentication (ultraCartBrowserApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key")))
            {
                localVarHeaderParams["x-ultracart-browser-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key");
            }
            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateEmailListSegmentFolder", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EmailListSegmentFolderResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (EmailListSegmentFolderResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EmailListSegmentFolderResponse)));
        }

        /// <summary>
        /// Update email campaign folder 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="emailListSegmentFolderUuid"></param>
        /// <param name="emailListSegmentFolder">Email campaign folder</param>
        /// <returns>Task of EmailListSegmentFolderResponse</returns>
        public async System.Threading.Tasks.Task<EmailListSegmentFolderResponse> UpdateEmailListSegmentFolderAsync (int? storefrontOid, string emailListSegmentFolderUuid, EmailListSegmentFolder emailListSegmentFolder)
        {
             ApiResponse<EmailListSegmentFolderResponse> localVarResponse = await UpdateEmailListSegmentFolderAsyncWithHttpInfo(storefrontOid, emailListSegmentFolderUuid, emailListSegmentFolder);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update email campaign folder 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="emailListSegmentFolderUuid"></param>
        /// <param name="emailListSegmentFolder">Email campaign folder</param>
        /// <returns>Task of ApiResponse (EmailListSegmentFolderResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<EmailListSegmentFolderResponse>> UpdateEmailListSegmentFolderAsyncWithHttpInfo (int? storefrontOid, string emailListSegmentFolderUuid, EmailListSegmentFolder emailListSegmentFolder)
        {
            // verify the required parameter 'storefrontOid' is set
            if (storefrontOid == null)
                throw new ApiException(400, "Missing required parameter 'storefrontOid' when calling StorefrontApi->UpdateEmailListSegmentFolder");
            // verify the required parameter 'emailListSegmentFolderUuid' is set
            if (emailListSegmentFolderUuid == null)
                throw new ApiException(400, "Missing required parameter 'emailListSegmentFolderUuid' when calling StorefrontApi->UpdateEmailListSegmentFolder");
            // verify the required parameter 'emailListSegmentFolder' is set
            if (emailListSegmentFolder == null)
                throw new ApiException(400, "Missing required parameter 'emailListSegmentFolder' when calling StorefrontApi->UpdateEmailListSegmentFolder");

            var localVarPath = "/storefront/{storefront_oid}/email/list_segment_folders/{email_list_segment_folder_uuid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (storefrontOid != null) localVarPathParams.Add("storefront_oid", this.Configuration.ApiClient.ParameterToString(storefrontOid)); // path parameter
            if (emailListSegmentFolderUuid != null) localVarPathParams.Add("email_list_segment_folder_uuid", this.Configuration.ApiClient.ParameterToString(emailListSegmentFolderUuid)); // path parameter
            if (emailListSegmentFolder != null && emailListSegmentFolder.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(emailListSegmentFolder); // http body (model) parameter
            }
            else
            {
                localVarPostBody = emailListSegmentFolder; // byte array
            }

            // authentication (ultraCartBrowserApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key")))
            {
                localVarHeaderParams["x-ultracart-browser-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key");
            }
            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateEmailListSegmentFolder", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EmailListSegmentFolderResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (EmailListSegmentFolderResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EmailListSegmentFolderResponse)));
        }

        /// <summary>
        /// Update email plan 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="settings">plan request</param>
        /// <returns>EmailPlanResponse</returns>
        public EmailPlanResponse UpdateEmailPlan (int? storefrontOid, EmailPlan settings)
        {
             ApiResponse<EmailPlanResponse> localVarResponse = UpdateEmailPlanWithHttpInfo(storefrontOid, settings);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update email plan 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="settings">plan request</param>
        /// <returns>ApiResponse of EmailPlanResponse</returns>
        public ApiResponse< EmailPlanResponse > UpdateEmailPlanWithHttpInfo (int? storefrontOid, EmailPlan settings)
        {
            // verify the required parameter 'storefrontOid' is set
            if (storefrontOid == null)
                throw new ApiException(400, "Missing required parameter 'storefrontOid' when calling StorefrontApi->UpdateEmailPlan");
            // verify the required parameter 'settings' is set
            if (settings == null)
                throw new ApiException(400, "Missing required parameter 'settings' when calling StorefrontApi->UpdateEmailPlan");

            var localVarPath = "/storefront/{storefront_oid}/email/plan";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (storefrontOid != null) localVarPathParams.Add("storefront_oid", this.Configuration.ApiClient.ParameterToString(storefrontOid)); // path parameter
            if (settings != null && settings.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(settings); // http body (model) parameter
            }
            else
            {
                localVarPostBody = settings; // byte array
            }

            // authentication (ultraCartBrowserApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key")))
            {
                localVarHeaderParams["x-ultracart-browser-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key");
            }
            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateEmailPlan", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EmailPlanResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (EmailPlanResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EmailPlanResponse)));
        }

        /// <summary>
        /// Update email plan 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="settings">plan request</param>
        /// <returns>Task of EmailPlanResponse</returns>
        public async System.Threading.Tasks.Task<EmailPlanResponse> UpdateEmailPlanAsync (int? storefrontOid, EmailPlan settings)
        {
             ApiResponse<EmailPlanResponse> localVarResponse = await UpdateEmailPlanAsyncWithHttpInfo(storefrontOid, settings);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update email plan 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="settings">plan request</param>
        /// <returns>Task of ApiResponse (EmailPlanResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<EmailPlanResponse>> UpdateEmailPlanAsyncWithHttpInfo (int? storefrontOid, EmailPlan settings)
        {
            // verify the required parameter 'storefrontOid' is set
            if (storefrontOid == null)
                throw new ApiException(400, "Missing required parameter 'storefrontOid' when calling StorefrontApi->UpdateEmailPlan");
            // verify the required parameter 'settings' is set
            if (settings == null)
                throw new ApiException(400, "Missing required parameter 'settings' when calling StorefrontApi->UpdateEmailPlan");

            var localVarPath = "/storefront/{storefront_oid}/email/plan";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (storefrontOid != null) localVarPathParams.Add("storefront_oid", this.Configuration.ApiClient.ParameterToString(storefrontOid)); // path parameter
            if (settings != null && settings.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(settings); // http body (model) parameter
            }
            else
            {
                localVarPostBody = settings; // byte array
            }

            // authentication (ultraCartBrowserApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key")))
            {
                localVarHeaderParams["x-ultracart-browser-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key");
            }
            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateEmailPlan", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EmailPlanResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (EmailPlanResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EmailPlanResponse)));
        }

        /// <summary>
        /// Update email postcard 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="commseqPostcardUuid"></param>
        /// <param name="emailCommseqPostcard">Email commseq postcard</param>
        /// <returns>EmailCommseqPostcardResponse</returns>
        public EmailCommseqPostcardResponse UpdateEmailPostcard (int? storefrontOid, string commseqPostcardUuid, EmailCommseqPostcard emailCommseqPostcard)
        {
             ApiResponse<EmailCommseqPostcardResponse> localVarResponse = UpdateEmailPostcardWithHttpInfo(storefrontOid, commseqPostcardUuid, emailCommseqPostcard);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update email postcard 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="commseqPostcardUuid"></param>
        /// <param name="emailCommseqPostcard">Email commseq postcard</param>
        /// <returns>ApiResponse of EmailCommseqPostcardResponse</returns>
        public ApiResponse< EmailCommseqPostcardResponse > UpdateEmailPostcardWithHttpInfo (int? storefrontOid, string commseqPostcardUuid, EmailCommseqPostcard emailCommseqPostcard)
        {
            // verify the required parameter 'storefrontOid' is set
            if (storefrontOid == null)
                throw new ApiException(400, "Missing required parameter 'storefrontOid' when calling StorefrontApi->UpdateEmailPostcard");
            // verify the required parameter 'commseqPostcardUuid' is set
            if (commseqPostcardUuid == null)
                throw new ApiException(400, "Missing required parameter 'commseqPostcardUuid' when calling StorefrontApi->UpdateEmailPostcard");
            // verify the required parameter 'emailCommseqPostcard' is set
            if (emailCommseqPostcard == null)
                throw new ApiException(400, "Missing required parameter 'emailCommseqPostcard' when calling StorefrontApi->UpdateEmailPostcard");

            var localVarPath = "/storefront/{storefront_oid}/email/postcards/{commseq_postcard_uuid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (storefrontOid != null) localVarPathParams.Add("storefront_oid", this.Configuration.ApiClient.ParameterToString(storefrontOid)); // path parameter
            if (commseqPostcardUuid != null) localVarPathParams.Add("commseq_postcard_uuid", this.Configuration.ApiClient.ParameterToString(commseqPostcardUuid)); // path parameter
            if (emailCommseqPostcard != null && emailCommseqPostcard.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(emailCommseqPostcard); // http body (model) parameter
            }
            else
            {
                localVarPostBody = emailCommseqPostcard; // byte array
            }

            // authentication (ultraCartBrowserApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key")))
            {
                localVarHeaderParams["x-ultracart-browser-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key");
            }
            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateEmailPostcard", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EmailCommseqPostcardResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (EmailCommseqPostcardResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EmailCommseqPostcardResponse)));
        }

        /// <summary>
        /// Update email postcard 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="commseqPostcardUuid"></param>
        /// <param name="emailCommseqPostcard">Email commseq postcard</param>
        /// <returns>Task of EmailCommseqPostcardResponse</returns>
        public async System.Threading.Tasks.Task<EmailCommseqPostcardResponse> UpdateEmailPostcardAsync (int? storefrontOid, string commseqPostcardUuid, EmailCommseqPostcard emailCommseqPostcard)
        {
             ApiResponse<EmailCommseqPostcardResponse> localVarResponse = await UpdateEmailPostcardAsyncWithHttpInfo(storefrontOid, commseqPostcardUuid, emailCommseqPostcard);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update email postcard 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="commseqPostcardUuid"></param>
        /// <param name="emailCommseqPostcard">Email commseq postcard</param>
        /// <returns>Task of ApiResponse (EmailCommseqPostcardResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<EmailCommseqPostcardResponse>> UpdateEmailPostcardAsyncWithHttpInfo (int? storefrontOid, string commseqPostcardUuid, EmailCommseqPostcard emailCommseqPostcard)
        {
            // verify the required parameter 'storefrontOid' is set
            if (storefrontOid == null)
                throw new ApiException(400, "Missing required parameter 'storefrontOid' when calling StorefrontApi->UpdateEmailPostcard");
            // verify the required parameter 'commseqPostcardUuid' is set
            if (commseqPostcardUuid == null)
                throw new ApiException(400, "Missing required parameter 'commseqPostcardUuid' when calling StorefrontApi->UpdateEmailPostcard");
            // verify the required parameter 'emailCommseqPostcard' is set
            if (emailCommseqPostcard == null)
                throw new ApiException(400, "Missing required parameter 'emailCommseqPostcard' when calling StorefrontApi->UpdateEmailPostcard");

            var localVarPath = "/storefront/{storefront_oid}/email/postcards/{commseq_postcard_uuid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (storefrontOid != null) localVarPathParams.Add("storefront_oid", this.Configuration.ApiClient.ParameterToString(storefrontOid)); // path parameter
            if (commseqPostcardUuid != null) localVarPathParams.Add("commseq_postcard_uuid", this.Configuration.ApiClient.ParameterToString(commseqPostcardUuid)); // path parameter
            if (emailCommseqPostcard != null && emailCommseqPostcard.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(emailCommseqPostcard); // http body (model) parameter
            }
            else
            {
                localVarPostBody = emailCommseqPostcard; // byte array
            }

            // authentication (ultraCartBrowserApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key")))
            {
                localVarHeaderParams["x-ultracart-browser-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key");
            }
            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateEmailPostcard", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EmailCommseqPostcardResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (EmailCommseqPostcardResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EmailCommseqPostcardResponse)));
        }

        /// <summary>
        /// Update email segment 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="emailSegmentUuid"></param>
        /// <param name="emailSegment">Email segment</param>
        /// <returns>EmailSegmentResponse</returns>
        public EmailSegmentResponse UpdateEmailSegment (int? storefrontOid, string emailSegmentUuid, EmailSegment emailSegment)
        {
             ApiResponse<EmailSegmentResponse> localVarResponse = UpdateEmailSegmentWithHttpInfo(storefrontOid, emailSegmentUuid, emailSegment);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update email segment 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="emailSegmentUuid"></param>
        /// <param name="emailSegment">Email segment</param>
        /// <returns>ApiResponse of EmailSegmentResponse</returns>
        public ApiResponse< EmailSegmentResponse > UpdateEmailSegmentWithHttpInfo (int? storefrontOid, string emailSegmentUuid, EmailSegment emailSegment)
        {
            // verify the required parameter 'storefrontOid' is set
            if (storefrontOid == null)
                throw new ApiException(400, "Missing required parameter 'storefrontOid' when calling StorefrontApi->UpdateEmailSegment");
            // verify the required parameter 'emailSegmentUuid' is set
            if (emailSegmentUuid == null)
                throw new ApiException(400, "Missing required parameter 'emailSegmentUuid' when calling StorefrontApi->UpdateEmailSegment");
            // verify the required parameter 'emailSegment' is set
            if (emailSegment == null)
                throw new ApiException(400, "Missing required parameter 'emailSegment' when calling StorefrontApi->UpdateEmailSegment");

            var localVarPath = "/storefront/{storefront_oid}/email/segments/{email_segment_uuid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (storefrontOid != null) localVarPathParams.Add("storefront_oid", this.Configuration.ApiClient.ParameterToString(storefrontOid)); // path parameter
            if (emailSegmentUuid != null) localVarPathParams.Add("email_segment_uuid", this.Configuration.ApiClient.ParameterToString(emailSegmentUuid)); // path parameter
            if (emailSegment != null && emailSegment.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(emailSegment); // http body (model) parameter
            }
            else
            {
                localVarPostBody = emailSegment; // byte array
            }

            // authentication (ultraCartBrowserApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key")))
            {
                localVarHeaderParams["x-ultracart-browser-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key");
            }
            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateEmailSegment", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EmailSegmentResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (EmailSegmentResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EmailSegmentResponse)));
        }

        /// <summary>
        /// Update email segment 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="emailSegmentUuid"></param>
        /// <param name="emailSegment">Email segment</param>
        /// <returns>Task of EmailSegmentResponse</returns>
        public async System.Threading.Tasks.Task<EmailSegmentResponse> UpdateEmailSegmentAsync (int? storefrontOid, string emailSegmentUuid, EmailSegment emailSegment)
        {
             ApiResponse<EmailSegmentResponse> localVarResponse = await UpdateEmailSegmentAsyncWithHttpInfo(storefrontOid, emailSegmentUuid, emailSegment);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update email segment 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="emailSegmentUuid"></param>
        /// <param name="emailSegment">Email segment</param>
        /// <returns>Task of ApiResponse (EmailSegmentResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<EmailSegmentResponse>> UpdateEmailSegmentAsyncWithHttpInfo (int? storefrontOid, string emailSegmentUuid, EmailSegment emailSegment)
        {
            // verify the required parameter 'storefrontOid' is set
            if (storefrontOid == null)
                throw new ApiException(400, "Missing required parameter 'storefrontOid' when calling StorefrontApi->UpdateEmailSegment");
            // verify the required parameter 'emailSegmentUuid' is set
            if (emailSegmentUuid == null)
                throw new ApiException(400, "Missing required parameter 'emailSegmentUuid' when calling StorefrontApi->UpdateEmailSegment");
            // verify the required parameter 'emailSegment' is set
            if (emailSegment == null)
                throw new ApiException(400, "Missing required parameter 'emailSegment' when calling StorefrontApi->UpdateEmailSegment");

            var localVarPath = "/storefront/{storefront_oid}/email/segments/{email_segment_uuid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (storefrontOid != null) localVarPathParams.Add("storefront_oid", this.Configuration.ApiClient.ParameterToString(storefrontOid)); // path parameter
            if (emailSegmentUuid != null) localVarPathParams.Add("email_segment_uuid", this.Configuration.ApiClient.ParameterToString(emailSegmentUuid)); // path parameter
            if (emailSegment != null && emailSegment.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(emailSegment); // http body (model) parameter
            }
            else
            {
                localVarPostBody = emailSegment; // byte array
            }

            // authentication (ultraCartBrowserApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key")))
            {
                localVarHeaderParams["x-ultracart-browser-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key");
            }
            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateEmailSegment", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EmailSegmentResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (EmailSegmentResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EmailSegmentResponse)));
        }

        /// <summary>
        /// Update email sending domain 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="domain"></param>
        /// <param name="emailDomain">EmailDomain</param>
        /// <returns>EmailSendingDomainResponse</returns>
        public EmailSendingDomainResponse UpdateEmailSendingDomain (string domain, EmailDomain emailDomain)
        {
             ApiResponse<EmailSendingDomainResponse> localVarResponse = UpdateEmailSendingDomainWithHttpInfo(domain, emailDomain);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update email sending domain 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="domain"></param>
        /// <param name="emailDomain">EmailDomain</param>
        /// <returns>ApiResponse of EmailSendingDomainResponse</returns>
        public ApiResponse< EmailSendingDomainResponse > UpdateEmailSendingDomainWithHttpInfo (string domain, EmailDomain emailDomain)
        {
            // verify the required parameter 'domain' is set
            if (domain == null)
                throw new ApiException(400, "Missing required parameter 'domain' when calling StorefrontApi->UpdateEmailSendingDomain");
            // verify the required parameter 'emailDomain' is set
            if (emailDomain == null)
                throw new ApiException(400, "Missing required parameter 'emailDomain' when calling StorefrontApi->UpdateEmailSendingDomain");

            var localVarPath = "/storefront/email/sending_domains/{domain}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (domain != null) localVarPathParams.Add("domain", this.Configuration.ApiClient.ParameterToString(domain)); // path parameter
            if (emailDomain != null && emailDomain.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(emailDomain); // http body (model) parameter
            }
            else
            {
                localVarPostBody = emailDomain; // byte array
            }

            // authentication (ultraCartBrowserApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key")))
            {
                localVarHeaderParams["x-ultracart-browser-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key");
            }
            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateEmailSendingDomain", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EmailSendingDomainResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (EmailSendingDomainResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EmailSendingDomainResponse)));
        }

        /// <summary>
        /// Update email sending domain 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="domain"></param>
        /// <param name="emailDomain">EmailDomain</param>
        /// <returns>Task of EmailSendingDomainResponse</returns>
        public async System.Threading.Tasks.Task<EmailSendingDomainResponse> UpdateEmailSendingDomainAsync (string domain, EmailDomain emailDomain)
        {
             ApiResponse<EmailSendingDomainResponse> localVarResponse = await UpdateEmailSendingDomainAsyncWithHttpInfo(domain, emailDomain);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update email sending domain 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="domain"></param>
        /// <param name="emailDomain">EmailDomain</param>
        /// <returns>Task of ApiResponse (EmailSendingDomainResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<EmailSendingDomainResponse>> UpdateEmailSendingDomainAsyncWithHttpInfo (string domain, EmailDomain emailDomain)
        {
            // verify the required parameter 'domain' is set
            if (domain == null)
                throw new ApiException(400, "Missing required parameter 'domain' when calling StorefrontApi->UpdateEmailSendingDomain");
            // verify the required parameter 'emailDomain' is set
            if (emailDomain == null)
                throw new ApiException(400, "Missing required parameter 'emailDomain' when calling StorefrontApi->UpdateEmailSendingDomain");

            var localVarPath = "/storefront/email/sending_domains/{domain}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (domain != null) localVarPathParams.Add("domain", this.Configuration.ApiClient.ParameterToString(domain)); // path parameter
            if (emailDomain != null && emailDomain.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(emailDomain); // http body (model) parameter
            }
            else
            {
                localVarPostBody = emailDomain; // byte array
            }

            // authentication (ultraCartBrowserApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key")))
            {
                localVarHeaderParams["x-ultracart-browser-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key");
            }
            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateEmailSendingDomain", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EmailSendingDomainResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (EmailSendingDomainResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EmailSendingDomainResponse)));
        }

        /// <summary>
        /// Update email settings 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="settings">settings request</param>
        /// <returns>EmailSettingsResponse</returns>
        public EmailSettingsResponse UpdateEmailSettings (int? storefrontOid, EmailSettings settings)
        {
             ApiResponse<EmailSettingsResponse> localVarResponse = UpdateEmailSettingsWithHttpInfo(storefrontOid, settings);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update email settings 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="settings">settings request</param>
        /// <returns>ApiResponse of EmailSettingsResponse</returns>
        public ApiResponse< EmailSettingsResponse > UpdateEmailSettingsWithHttpInfo (int? storefrontOid, EmailSettings settings)
        {
            // verify the required parameter 'storefrontOid' is set
            if (storefrontOid == null)
                throw new ApiException(400, "Missing required parameter 'storefrontOid' when calling StorefrontApi->UpdateEmailSettings");
            // verify the required parameter 'settings' is set
            if (settings == null)
                throw new ApiException(400, "Missing required parameter 'settings' when calling StorefrontApi->UpdateEmailSettings");

            var localVarPath = "/storefront/{storefront_oid}/email/settings";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (storefrontOid != null) localVarPathParams.Add("storefront_oid", this.Configuration.ApiClient.ParameterToString(storefrontOid)); // path parameter
            if (settings != null && settings.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(settings); // http body (model) parameter
            }
            else
            {
                localVarPostBody = settings; // byte array
            }

            // authentication (ultraCartBrowserApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key")))
            {
                localVarHeaderParams["x-ultracart-browser-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key");
            }
            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateEmailSettings", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EmailSettingsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (EmailSettingsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EmailSettingsResponse)));
        }

        /// <summary>
        /// Update email settings 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="settings">settings request</param>
        /// <returns>Task of EmailSettingsResponse</returns>
        public async System.Threading.Tasks.Task<EmailSettingsResponse> UpdateEmailSettingsAsync (int? storefrontOid, EmailSettings settings)
        {
             ApiResponse<EmailSettingsResponse> localVarResponse = await UpdateEmailSettingsAsyncWithHttpInfo(storefrontOid, settings);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update email settings 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="settings">settings request</param>
        /// <returns>Task of ApiResponse (EmailSettingsResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<EmailSettingsResponse>> UpdateEmailSettingsAsyncWithHttpInfo (int? storefrontOid, EmailSettings settings)
        {
            // verify the required parameter 'storefrontOid' is set
            if (storefrontOid == null)
                throw new ApiException(400, "Missing required parameter 'storefrontOid' when calling StorefrontApi->UpdateEmailSettings");
            // verify the required parameter 'settings' is set
            if (settings == null)
                throw new ApiException(400, "Missing required parameter 'settings' when calling StorefrontApi->UpdateEmailSettings");

            var localVarPath = "/storefront/{storefront_oid}/email/settings";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (storefrontOid != null) localVarPathParams.Add("storefront_oid", this.Configuration.ApiClient.ParameterToString(storefrontOid)); // path parameter
            if (settings != null && settings.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(settings); // http body (model) parameter
            }
            else
            {
                localVarPostBody = settings; // byte array
            }

            // authentication (ultraCartBrowserApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key")))
            {
                localVarHeaderParams["x-ultracart-browser-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key");
            }
            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateEmailSettings", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EmailSettingsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (EmailSettingsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EmailSettingsResponse)));
        }

        /// <summary>
        /// Update experiment 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="storefrontExperimentOid"></param>
        /// <param name="experiment">Experiment</param>
        /// <returns>ExperimentResponse</returns>
        public ExperimentResponse UpdateExperiment (int? storefrontOid, int? storefrontExperimentOid, Experiment experiment)
        {
             ApiResponse<ExperimentResponse> localVarResponse = UpdateExperimentWithHttpInfo(storefrontOid, storefrontExperimentOid, experiment);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update experiment 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="storefrontExperimentOid"></param>
        /// <param name="experiment">Experiment</param>
        /// <returns>ApiResponse of ExperimentResponse</returns>
        public ApiResponse< ExperimentResponse > UpdateExperimentWithHttpInfo (int? storefrontOid, int? storefrontExperimentOid, Experiment experiment)
        {
            // verify the required parameter 'storefrontOid' is set
            if (storefrontOid == null)
                throw new ApiException(400, "Missing required parameter 'storefrontOid' when calling StorefrontApi->UpdateExperiment");
            // verify the required parameter 'storefrontExperimentOid' is set
            if (storefrontExperimentOid == null)
                throw new ApiException(400, "Missing required parameter 'storefrontExperimentOid' when calling StorefrontApi->UpdateExperiment");
            // verify the required parameter 'experiment' is set
            if (experiment == null)
                throw new ApiException(400, "Missing required parameter 'experiment' when calling StorefrontApi->UpdateExperiment");

            var localVarPath = "/storefront/{storefront_oid}/experiments/{storefront_experiment_oid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (storefrontOid != null) localVarPathParams.Add("storefront_oid", this.Configuration.ApiClient.ParameterToString(storefrontOid)); // path parameter
            if (storefrontExperimentOid != null) localVarPathParams.Add("storefront_experiment_oid", this.Configuration.ApiClient.ParameterToString(storefrontExperimentOid)); // path parameter
            if (experiment != null && experiment.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(experiment); // http body (model) parameter
            }
            else
            {
                localVarPostBody = experiment; // byte array
            }

            // authentication (ultraCartBrowserApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key")))
            {
                localVarHeaderParams["x-ultracart-browser-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key");
            }
            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateExperiment", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ExperimentResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ExperimentResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ExperimentResponse)));
        }

        /// <summary>
        /// Update experiment 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="storefrontExperimentOid"></param>
        /// <param name="experiment">Experiment</param>
        /// <returns>Task of ExperimentResponse</returns>
        public async System.Threading.Tasks.Task<ExperimentResponse> UpdateExperimentAsync (int? storefrontOid, int? storefrontExperimentOid, Experiment experiment)
        {
             ApiResponse<ExperimentResponse> localVarResponse = await UpdateExperimentAsyncWithHttpInfo(storefrontOid, storefrontExperimentOid, experiment);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update experiment 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="storefrontExperimentOid"></param>
        /// <param name="experiment">Experiment</param>
        /// <returns>Task of ApiResponse (ExperimentResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ExperimentResponse>> UpdateExperimentAsyncWithHttpInfo (int? storefrontOid, int? storefrontExperimentOid, Experiment experiment)
        {
            // verify the required parameter 'storefrontOid' is set
            if (storefrontOid == null)
                throw new ApiException(400, "Missing required parameter 'storefrontOid' when calling StorefrontApi->UpdateExperiment");
            // verify the required parameter 'storefrontExperimentOid' is set
            if (storefrontExperimentOid == null)
                throw new ApiException(400, "Missing required parameter 'storefrontExperimentOid' when calling StorefrontApi->UpdateExperiment");
            // verify the required parameter 'experiment' is set
            if (experiment == null)
                throw new ApiException(400, "Missing required parameter 'experiment' when calling StorefrontApi->UpdateExperiment");

            var localVarPath = "/storefront/{storefront_oid}/experiments/{storefront_experiment_oid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (storefrontOid != null) localVarPathParams.Add("storefront_oid", this.Configuration.ApiClient.ParameterToString(storefrontOid)); // path parameter
            if (storefrontExperimentOid != null) localVarPathParams.Add("storefront_experiment_oid", this.Configuration.ApiClient.ParameterToString(storefrontExperimentOid)); // path parameter
            if (experiment != null && experiment.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(experiment); // http body (model) parameter
            }
            else
            {
                localVarPostBody = experiment; // byte array
            }

            // authentication (ultraCartBrowserApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key")))
            {
                localVarHeaderParams["x-ultracart-browser-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key");
            }
            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateExperiment", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ExperimentResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ExperimentResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ExperimentResponse)));
        }

        /// <summary>
        /// Update library item. Note that only certain fields may be updated via this method. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="libraryItemOid"></param>
        /// <param name="libraryItem">Library item</param>
        /// <returns>LibraryItemResponse</returns>
        public LibraryItemResponse UpdateLibraryItem (int? libraryItemOid, LibraryItem libraryItem)
        {
             ApiResponse<LibraryItemResponse> localVarResponse = UpdateLibraryItemWithHttpInfo(libraryItemOid, libraryItem);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update library item. Note that only certain fields may be updated via this method. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="libraryItemOid"></param>
        /// <param name="libraryItem">Library item</param>
        /// <returns>ApiResponse of LibraryItemResponse</returns>
        public ApiResponse< LibraryItemResponse > UpdateLibraryItemWithHttpInfo (int? libraryItemOid, LibraryItem libraryItem)
        {
            // verify the required parameter 'libraryItemOid' is set
            if (libraryItemOid == null)
                throw new ApiException(400, "Missing required parameter 'libraryItemOid' when calling StorefrontApi->UpdateLibraryItem");
            // verify the required parameter 'libraryItem' is set
            if (libraryItem == null)
                throw new ApiException(400, "Missing required parameter 'libraryItem' when calling StorefrontApi->UpdateLibraryItem");

            var localVarPath = "/storefront/code_library/{library_item_oid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (libraryItemOid != null) localVarPathParams.Add("library_item_oid", this.Configuration.ApiClient.ParameterToString(libraryItemOid)); // path parameter
            if (libraryItem != null && libraryItem.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(libraryItem); // http body (model) parameter
            }
            else
            {
                localVarPostBody = libraryItem; // byte array
            }

            // authentication (ultraCartBrowserApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key")))
            {
                localVarHeaderParams["x-ultracart-browser-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key");
            }
            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateLibraryItem", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<LibraryItemResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (LibraryItemResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(LibraryItemResponse)));
        }

        /// <summary>
        /// Update library item. Note that only certain fields may be updated via this method. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="libraryItemOid"></param>
        /// <param name="libraryItem">Library item</param>
        /// <returns>Task of LibraryItemResponse</returns>
        public async System.Threading.Tasks.Task<LibraryItemResponse> UpdateLibraryItemAsync (int? libraryItemOid, LibraryItem libraryItem)
        {
             ApiResponse<LibraryItemResponse> localVarResponse = await UpdateLibraryItemAsyncWithHttpInfo(libraryItemOid, libraryItem);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update library item. Note that only certain fields may be updated via this method. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="libraryItemOid"></param>
        /// <param name="libraryItem">Library item</param>
        /// <returns>Task of ApiResponse (LibraryItemResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<LibraryItemResponse>> UpdateLibraryItemAsyncWithHttpInfo (int? libraryItemOid, LibraryItem libraryItem)
        {
            // verify the required parameter 'libraryItemOid' is set
            if (libraryItemOid == null)
                throw new ApiException(400, "Missing required parameter 'libraryItemOid' when calling StorefrontApi->UpdateLibraryItem");
            // verify the required parameter 'libraryItem' is set
            if (libraryItem == null)
                throw new ApiException(400, "Missing required parameter 'libraryItem' when calling StorefrontApi->UpdateLibraryItem");

            var localVarPath = "/storefront/code_library/{library_item_oid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (libraryItemOid != null) localVarPathParams.Add("library_item_oid", this.Configuration.ApiClient.ParameterToString(libraryItemOid)); // path parameter
            if (libraryItem != null && libraryItem.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(libraryItem); // http body (model) parameter
            }
            else
            {
                localVarPostBody = libraryItem; // byte array
            }

            // authentication (ultraCartBrowserApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key")))
            {
                localVarHeaderParams["x-ultracart-browser-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key");
            }
            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateLibraryItem", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<LibraryItemResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (LibraryItemResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(LibraryItemResponse)));
        }

        /// <summary>
        /// Update merchant notes on a screen recording Update merchant notes on a screen recording 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="screenRecordingUuid"></param>
        /// <param name="merchantNotesRequest">Merchant Notes</param>
        /// <returns></returns>
        public void UpdateScreenRecordingMerchantNotes (int? storefrontOid, string screenRecordingUuid, ScreenRecordingMerchantNotesRequest merchantNotesRequest)
        {
             UpdateScreenRecordingMerchantNotesWithHttpInfo(storefrontOid, screenRecordingUuid, merchantNotesRequest);
        }

        /// <summary>
        /// Update merchant notes on a screen recording Update merchant notes on a screen recording 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="screenRecordingUuid"></param>
        /// <param name="merchantNotesRequest">Merchant Notes</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> UpdateScreenRecordingMerchantNotesWithHttpInfo (int? storefrontOid, string screenRecordingUuid, ScreenRecordingMerchantNotesRequest merchantNotesRequest)
        {
            // verify the required parameter 'storefrontOid' is set
            if (storefrontOid == null)
                throw new ApiException(400, "Missing required parameter 'storefrontOid' when calling StorefrontApi->UpdateScreenRecordingMerchantNotes");
            // verify the required parameter 'screenRecordingUuid' is set
            if (screenRecordingUuid == null)
                throw new ApiException(400, "Missing required parameter 'screenRecordingUuid' when calling StorefrontApi->UpdateScreenRecordingMerchantNotes");
            // verify the required parameter 'merchantNotesRequest' is set
            if (merchantNotesRequest == null)
                throw new ApiException(400, "Missing required parameter 'merchantNotesRequest' when calling StorefrontApi->UpdateScreenRecordingMerchantNotes");

            var localVarPath = "/storefront/{storefront_oid}/screen_recordings/{screen_recording_uuid}/merchant_notes";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (storefrontOid != null) localVarPathParams.Add("storefront_oid", this.Configuration.ApiClient.ParameterToString(storefrontOid)); // path parameter
            if (screenRecordingUuid != null) localVarPathParams.Add("screen_recording_uuid", this.Configuration.ApiClient.ParameterToString(screenRecordingUuid)); // path parameter
            if (merchantNotesRequest != null && merchantNotesRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(merchantNotesRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = merchantNotesRequest; // byte array
            }

            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateScreenRecordingMerchantNotes", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Update merchant notes on a screen recording Update merchant notes on a screen recording 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="screenRecordingUuid"></param>
        /// <param name="merchantNotesRequest">Merchant Notes</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UpdateScreenRecordingMerchantNotesAsync (int? storefrontOid, string screenRecordingUuid, ScreenRecordingMerchantNotesRequest merchantNotesRequest)
        {
             await UpdateScreenRecordingMerchantNotesAsyncWithHttpInfo(storefrontOid, screenRecordingUuid, merchantNotesRequest);

        }

        /// <summary>
        /// Update merchant notes on a screen recording Update merchant notes on a screen recording 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="screenRecordingUuid"></param>
        /// <param name="merchantNotesRequest">Merchant Notes</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> UpdateScreenRecordingMerchantNotesAsyncWithHttpInfo (int? storefrontOid, string screenRecordingUuid, ScreenRecordingMerchantNotesRequest merchantNotesRequest)
        {
            // verify the required parameter 'storefrontOid' is set
            if (storefrontOid == null)
                throw new ApiException(400, "Missing required parameter 'storefrontOid' when calling StorefrontApi->UpdateScreenRecordingMerchantNotes");
            // verify the required parameter 'screenRecordingUuid' is set
            if (screenRecordingUuid == null)
                throw new ApiException(400, "Missing required parameter 'screenRecordingUuid' when calling StorefrontApi->UpdateScreenRecordingMerchantNotes");
            // verify the required parameter 'merchantNotesRequest' is set
            if (merchantNotesRequest == null)
                throw new ApiException(400, "Missing required parameter 'merchantNotesRequest' when calling StorefrontApi->UpdateScreenRecordingMerchantNotes");

            var localVarPath = "/storefront/{storefront_oid}/screen_recordings/{screen_recording_uuid}/merchant_notes";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (storefrontOid != null) localVarPathParams.Add("storefront_oid", this.Configuration.ApiClient.ParameterToString(storefrontOid)); // path parameter
            if (screenRecordingUuid != null) localVarPathParams.Add("screen_recording_uuid", this.Configuration.ApiClient.ParameterToString(screenRecordingUuid)); // path parameter
            if (merchantNotesRequest != null && merchantNotesRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(merchantNotesRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = merchantNotesRequest; // byte array
            }

            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateScreenRecordingMerchantNotes", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Update screen recording segment 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="screenRecordingSegmentOid"></param>
        /// <param name="segment">Segment</param>
        /// <returns>ScreenRecordingSegmentResponse</returns>
        public ScreenRecordingSegmentResponse UpdateScreenRecordingSegment (int? storefrontOid, int? screenRecordingSegmentOid, ScreenRecordingSegment segment)
        {
             ApiResponse<ScreenRecordingSegmentResponse> localVarResponse = UpdateScreenRecordingSegmentWithHttpInfo(storefrontOid, screenRecordingSegmentOid, segment);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update screen recording segment 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="screenRecordingSegmentOid"></param>
        /// <param name="segment">Segment</param>
        /// <returns>ApiResponse of ScreenRecordingSegmentResponse</returns>
        public ApiResponse< ScreenRecordingSegmentResponse > UpdateScreenRecordingSegmentWithHttpInfo (int? storefrontOid, int? screenRecordingSegmentOid, ScreenRecordingSegment segment)
        {
            // verify the required parameter 'storefrontOid' is set
            if (storefrontOid == null)
                throw new ApiException(400, "Missing required parameter 'storefrontOid' when calling StorefrontApi->UpdateScreenRecordingSegment");
            // verify the required parameter 'screenRecordingSegmentOid' is set
            if (screenRecordingSegmentOid == null)
                throw new ApiException(400, "Missing required parameter 'screenRecordingSegmentOid' when calling StorefrontApi->UpdateScreenRecordingSegment");
            // verify the required parameter 'segment' is set
            if (segment == null)
                throw new ApiException(400, "Missing required parameter 'segment' when calling StorefrontApi->UpdateScreenRecordingSegment");

            var localVarPath = "/storefront/{storefront_oid}/screen_recordings/segments/{screen_recording_segment_oid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (storefrontOid != null) localVarPathParams.Add("storefront_oid", this.Configuration.ApiClient.ParameterToString(storefrontOid)); // path parameter
            if (screenRecordingSegmentOid != null) localVarPathParams.Add("screen_recording_segment_oid", this.Configuration.ApiClient.ParameterToString(screenRecordingSegmentOid)); // path parameter
            if (segment != null && segment.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(segment); // http body (model) parameter
            }
            else
            {
                localVarPostBody = segment; // byte array
            }

            // authentication (ultraCartBrowserApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key")))
            {
                localVarHeaderParams["x-ultracart-browser-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key");
            }
            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateScreenRecordingSegment", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ScreenRecordingSegmentResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ScreenRecordingSegmentResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ScreenRecordingSegmentResponse)));
        }

        /// <summary>
        /// Update screen recording segment 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="screenRecordingSegmentOid"></param>
        /// <param name="segment">Segment</param>
        /// <returns>Task of ScreenRecordingSegmentResponse</returns>
        public async System.Threading.Tasks.Task<ScreenRecordingSegmentResponse> UpdateScreenRecordingSegmentAsync (int? storefrontOid, int? screenRecordingSegmentOid, ScreenRecordingSegment segment)
        {
             ApiResponse<ScreenRecordingSegmentResponse> localVarResponse = await UpdateScreenRecordingSegmentAsyncWithHttpInfo(storefrontOid, screenRecordingSegmentOid, segment);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update screen recording segment 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="screenRecordingSegmentOid"></param>
        /// <param name="segment">Segment</param>
        /// <returns>Task of ApiResponse (ScreenRecordingSegmentResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ScreenRecordingSegmentResponse>> UpdateScreenRecordingSegmentAsyncWithHttpInfo (int? storefrontOid, int? screenRecordingSegmentOid, ScreenRecordingSegment segment)
        {
            // verify the required parameter 'storefrontOid' is set
            if (storefrontOid == null)
                throw new ApiException(400, "Missing required parameter 'storefrontOid' when calling StorefrontApi->UpdateScreenRecordingSegment");
            // verify the required parameter 'screenRecordingSegmentOid' is set
            if (screenRecordingSegmentOid == null)
                throw new ApiException(400, "Missing required parameter 'screenRecordingSegmentOid' when calling StorefrontApi->UpdateScreenRecordingSegment");
            // verify the required parameter 'segment' is set
            if (segment == null)
                throw new ApiException(400, "Missing required parameter 'segment' when calling StorefrontApi->UpdateScreenRecordingSegment");

            var localVarPath = "/storefront/{storefront_oid}/screen_recordings/segments/{screen_recording_segment_oid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (storefrontOid != null) localVarPathParams.Add("storefront_oid", this.Configuration.ApiClient.ParameterToString(storefrontOid)); // path parameter
            if (screenRecordingSegmentOid != null) localVarPathParams.Add("screen_recording_segment_oid", this.Configuration.ApiClient.ParameterToString(screenRecordingSegmentOid)); // path parameter
            if (segment != null && segment.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(segment); // http body (model) parameter
            }
            else
            {
                localVarPostBody = segment; // byte array
            }

            // authentication (ultraCartBrowserApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key")))
            {
                localVarHeaderParams["x-ultracart-browser-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key");
            }
            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateScreenRecordingSegment", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ScreenRecordingSegmentResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ScreenRecordingSegmentResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ScreenRecordingSegmentResponse)));
        }

        /// <summary>
        /// Update screen recording settings 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="settings">Settings</param>
        /// <returns>ScreenRecordingSettingsResponse</returns>
        public ScreenRecordingSettingsResponse UpdateScreenRecordingSettings (int? storefrontOid, ScreenRecordingSettings settings)
        {
             ApiResponse<ScreenRecordingSettingsResponse> localVarResponse = UpdateScreenRecordingSettingsWithHttpInfo(storefrontOid, settings);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update screen recording settings 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="settings">Settings</param>
        /// <returns>ApiResponse of ScreenRecordingSettingsResponse</returns>
        public ApiResponse< ScreenRecordingSettingsResponse > UpdateScreenRecordingSettingsWithHttpInfo (int? storefrontOid, ScreenRecordingSettings settings)
        {
            // verify the required parameter 'storefrontOid' is set
            if (storefrontOid == null)
                throw new ApiException(400, "Missing required parameter 'storefrontOid' when calling StorefrontApi->UpdateScreenRecordingSettings");
            // verify the required parameter 'settings' is set
            if (settings == null)
                throw new ApiException(400, "Missing required parameter 'settings' when calling StorefrontApi->UpdateScreenRecordingSettings");

            var localVarPath = "/storefront/{storefront_oid}/screen_recordings/settings";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (storefrontOid != null) localVarPathParams.Add("storefront_oid", this.Configuration.ApiClient.ParameterToString(storefrontOid)); // path parameter
            if (settings != null && settings.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(settings); // http body (model) parameter
            }
            else
            {
                localVarPostBody = settings; // byte array
            }

            // authentication (ultraCartBrowserApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key")))
            {
                localVarHeaderParams["x-ultracart-browser-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key");
            }
            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateScreenRecordingSettings", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ScreenRecordingSettingsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ScreenRecordingSettingsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ScreenRecordingSettingsResponse)));
        }

        /// <summary>
        /// Update screen recording settings 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="settings">Settings</param>
        /// <returns>Task of ScreenRecordingSettingsResponse</returns>
        public async System.Threading.Tasks.Task<ScreenRecordingSettingsResponse> UpdateScreenRecordingSettingsAsync (int? storefrontOid, ScreenRecordingSettings settings)
        {
             ApiResponse<ScreenRecordingSettingsResponse> localVarResponse = await UpdateScreenRecordingSettingsAsyncWithHttpInfo(storefrontOid, settings);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update screen recording settings 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="settings">Settings</param>
        /// <returns>Task of ApiResponse (ScreenRecordingSettingsResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ScreenRecordingSettingsResponse>> UpdateScreenRecordingSettingsAsyncWithHttpInfo (int? storefrontOid, ScreenRecordingSettings settings)
        {
            // verify the required parameter 'storefrontOid' is set
            if (storefrontOid == null)
                throw new ApiException(400, "Missing required parameter 'storefrontOid' when calling StorefrontApi->UpdateScreenRecordingSettings");
            // verify the required parameter 'settings' is set
            if (settings == null)
                throw new ApiException(400, "Missing required parameter 'settings' when calling StorefrontApi->UpdateScreenRecordingSettings");

            var localVarPath = "/storefront/{storefront_oid}/screen_recordings/settings";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (storefrontOid != null) localVarPathParams.Add("storefront_oid", this.Configuration.ApiClient.ParameterToString(storefrontOid)); // path parameter
            if (settings != null && settings.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(settings); // http body (model) parameter
            }
            else
            {
                localVarPostBody = settings; // byte array
            }

            // authentication (ultraCartBrowserApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key")))
            {
                localVarHeaderParams["x-ultracart-browser-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key");
            }
            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateScreenRecordingSettings", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ScreenRecordingSettingsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ScreenRecordingSettingsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ScreenRecordingSettingsResponse)));
        }

        /// <summary>
        /// Update tags on a screen recording Update tags on a screen recording 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="screenRecordingUuid"></param>
        /// <param name="tags">Tags</param>
        /// <returns></returns>
        public void UpdateScreenRecordingTags (int? storefrontOid, string screenRecordingUuid, ScreenRecordingTagsRequest tags)
        {
             UpdateScreenRecordingTagsWithHttpInfo(storefrontOid, screenRecordingUuid, tags);
        }

        /// <summary>
        /// Update tags on a screen recording Update tags on a screen recording 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="screenRecordingUuid"></param>
        /// <param name="tags">Tags</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> UpdateScreenRecordingTagsWithHttpInfo (int? storefrontOid, string screenRecordingUuid, ScreenRecordingTagsRequest tags)
        {
            // verify the required parameter 'storefrontOid' is set
            if (storefrontOid == null)
                throw new ApiException(400, "Missing required parameter 'storefrontOid' when calling StorefrontApi->UpdateScreenRecordingTags");
            // verify the required parameter 'screenRecordingUuid' is set
            if (screenRecordingUuid == null)
                throw new ApiException(400, "Missing required parameter 'screenRecordingUuid' when calling StorefrontApi->UpdateScreenRecordingTags");
            // verify the required parameter 'tags' is set
            if (tags == null)
                throw new ApiException(400, "Missing required parameter 'tags' when calling StorefrontApi->UpdateScreenRecordingTags");

            var localVarPath = "/storefront/{storefront_oid}/screen_recordings/{screen_recording_uuid}/tags";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (storefrontOid != null) localVarPathParams.Add("storefront_oid", this.Configuration.ApiClient.ParameterToString(storefrontOid)); // path parameter
            if (screenRecordingUuid != null) localVarPathParams.Add("screen_recording_uuid", this.Configuration.ApiClient.ParameterToString(screenRecordingUuid)); // path parameter
            if (tags != null && tags.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(tags); // http body (model) parameter
            }
            else
            {
                localVarPostBody = tags; // byte array
            }

            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateScreenRecordingTags", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Update tags on a screen recording Update tags on a screen recording 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="screenRecordingUuid"></param>
        /// <param name="tags">Tags</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UpdateScreenRecordingTagsAsync (int? storefrontOid, string screenRecordingUuid, ScreenRecordingTagsRequest tags)
        {
             await UpdateScreenRecordingTagsAsyncWithHttpInfo(storefrontOid, screenRecordingUuid, tags);

        }

        /// <summary>
        /// Update tags on a screen recording Update tags on a screen recording 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="screenRecordingUuid"></param>
        /// <param name="tags">Tags</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> UpdateScreenRecordingTagsAsyncWithHttpInfo (int? storefrontOid, string screenRecordingUuid, ScreenRecordingTagsRequest tags)
        {
            // verify the required parameter 'storefrontOid' is set
            if (storefrontOid == null)
                throw new ApiException(400, "Missing required parameter 'storefrontOid' when calling StorefrontApi->UpdateScreenRecordingTags");
            // verify the required parameter 'screenRecordingUuid' is set
            if (screenRecordingUuid == null)
                throw new ApiException(400, "Missing required parameter 'screenRecordingUuid' when calling StorefrontApi->UpdateScreenRecordingTags");
            // verify the required parameter 'tags' is set
            if (tags == null)
                throw new ApiException(400, "Missing required parameter 'tags' when calling StorefrontApi->UpdateScreenRecordingTags");

            var localVarPath = "/storefront/{storefront_oid}/screen_recordings/{screen_recording_uuid}/tags";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (storefrontOid != null) localVarPathParams.Add("storefront_oid", this.Configuration.ApiClient.ParameterToString(storefrontOid)); // path parameter
            if (screenRecordingUuid != null) localVarPathParams.Add("screen_recording_uuid", this.Configuration.ApiClient.ParameterToString(screenRecordingUuid)); // path parameter
            if (tags != null && tags.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(tags); // http body (model) parameter
            }
            else
            {
                localVarPostBody = tags; // byte array
            }

            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateScreenRecordingTags", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Updates a transaction email object Updates a transactional email 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="emailId"></param>
        /// <param name="transactionEmail">TransactionEmail</param>
        /// <returns>TransactionEmailResponse</returns>
        public TransactionEmailResponse UpdateTransactionEmail (int? storefrontOid, string emailId, TransactionEmail transactionEmail)
        {
             ApiResponse<TransactionEmailResponse> localVarResponse = UpdateTransactionEmailWithHttpInfo(storefrontOid, emailId, transactionEmail);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Updates a transaction email object Updates a transactional email 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="emailId"></param>
        /// <param name="transactionEmail">TransactionEmail</param>
        /// <returns>ApiResponse of TransactionEmailResponse</returns>
        public ApiResponse< TransactionEmailResponse > UpdateTransactionEmailWithHttpInfo (int? storefrontOid, string emailId, TransactionEmail transactionEmail)
        {
            // verify the required parameter 'storefrontOid' is set
            if (storefrontOid == null)
                throw new ApiException(400, "Missing required parameter 'storefrontOid' when calling StorefrontApi->UpdateTransactionEmail");
            // verify the required parameter 'emailId' is set
            if (emailId == null)
                throw new ApiException(400, "Missing required parameter 'emailId' when calling StorefrontApi->UpdateTransactionEmail");
            // verify the required parameter 'transactionEmail' is set
            if (transactionEmail == null)
                throw new ApiException(400, "Missing required parameter 'transactionEmail' when calling StorefrontApi->UpdateTransactionEmail");

            var localVarPath = "/storefront/{storefront_oid}/transaction_email/list/{email_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (storefrontOid != null) localVarPathParams.Add("storefront_oid", this.Configuration.ApiClient.ParameterToString(storefrontOid)); // path parameter
            if (emailId != null) localVarPathParams.Add("email_id", this.Configuration.ApiClient.ParameterToString(emailId)); // path parameter
            if (transactionEmail != null && transactionEmail.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(transactionEmail); // http body (model) parameter
            }
            else
            {
                localVarPostBody = transactionEmail; // byte array
            }

            // authentication (ultraCartBrowserApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key")))
            {
                localVarHeaderParams["x-ultracart-browser-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key");
            }
            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateTransactionEmail", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TransactionEmailResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TransactionEmailResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TransactionEmailResponse)));
        }

        /// <summary>
        /// Updates a transaction email object Updates a transactional email 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="emailId"></param>
        /// <param name="transactionEmail">TransactionEmail</param>
        /// <returns>Task of TransactionEmailResponse</returns>
        public async System.Threading.Tasks.Task<TransactionEmailResponse> UpdateTransactionEmailAsync (int? storefrontOid, string emailId, TransactionEmail transactionEmail)
        {
             ApiResponse<TransactionEmailResponse> localVarResponse = await UpdateTransactionEmailAsyncWithHttpInfo(storefrontOid, emailId, transactionEmail);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Updates a transaction email object Updates a transactional email 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid"></param>
        /// <param name="emailId"></param>
        /// <param name="transactionEmail">TransactionEmail</param>
        /// <returns>Task of ApiResponse (TransactionEmailResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TransactionEmailResponse>> UpdateTransactionEmailAsyncWithHttpInfo (int? storefrontOid, string emailId, TransactionEmail transactionEmail)
        {
            // verify the required parameter 'storefrontOid' is set
            if (storefrontOid == null)
                throw new ApiException(400, "Missing required parameter 'storefrontOid' when calling StorefrontApi->UpdateTransactionEmail");
            // verify the required parameter 'emailId' is set
            if (emailId == null)
                throw new ApiException(400, "Missing required parameter 'emailId' when calling StorefrontApi->UpdateTransactionEmail");
            // verify the required parameter 'transactionEmail' is set
            if (transactionEmail == null)
                throw new ApiException(400, "Missing required parameter 'transactionEmail' when calling StorefrontApi->UpdateTransactionEmail");

            var localVarPath = "/storefront/{storefront_oid}/transaction_email/list/{email_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (storefrontOid != null) localVarPathParams.Add("storefront_oid", this.Configuration.ApiClient.ParameterToString(storefrontOid)); // path parameter
            if (emailId != null) localVarPathParams.Add("email_id", this.Configuration.ApiClient.ParameterToString(emailId)); // path parameter
            if (transactionEmail != null && transactionEmail.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(transactionEmail); // http body (model) parameter
            }
            else
            {
                localVarPostBody = transactionEmail; // byte array
            }

            // authentication (ultraCartBrowserApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key")))
            {
                localVarHeaderParams["x-ultracart-browser-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key");
            }
            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateTransactionEmail", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TransactionEmailResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TransactionEmailResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TransactionEmailResponse)));
        }

        /// <summary>
        /// Update Twilio account 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="espTwilioUuid"></param>
        /// <param name="twilio">Twilio</param>
        /// <returns>TwilioResponse</returns>
        public TwilioResponse UpdateTwilioAccount (string espTwilioUuid, Twilio twilio)
        {
             ApiResponse<TwilioResponse> localVarResponse = UpdateTwilioAccountWithHttpInfo(espTwilioUuid, twilio);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update Twilio account 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="espTwilioUuid"></param>
        /// <param name="twilio">Twilio</param>
        /// <returns>ApiResponse of TwilioResponse</returns>
        public ApiResponse< TwilioResponse > UpdateTwilioAccountWithHttpInfo (string espTwilioUuid, Twilio twilio)
        {
            // verify the required parameter 'espTwilioUuid' is set
            if (espTwilioUuid == null)
                throw new ApiException(400, "Missing required parameter 'espTwilioUuid' when calling StorefrontApi->UpdateTwilioAccount");
            // verify the required parameter 'twilio' is set
            if (twilio == null)
                throw new ApiException(400, "Missing required parameter 'twilio' when calling StorefrontApi->UpdateTwilioAccount");

            var localVarPath = "/storefront/twilio/accounts/{esp_twilio_uuid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (espTwilioUuid != null) localVarPathParams.Add("esp_twilio_uuid", this.Configuration.ApiClient.ParameterToString(espTwilioUuid)); // path parameter
            if (twilio != null && twilio.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(twilio); // http body (model) parameter
            }
            else
            {
                localVarPostBody = twilio; // byte array
            }

            // authentication (ultraCartBrowserApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key")))
            {
                localVarHeaderParams["x-ultracart-browser-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key");
            }
            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateTwilioAccount", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TwilioResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TwilioResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TwilioResponse)));
        }

        /// <summary>
        /// Update Twilio account 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="espTwilioUuid"></param>
        /// <param name="twilio">Twilio</param>
        /// <returns>Task of TwilioResponse</returns>
        public async System.Threading.Tasks.Task<TwilioResponse> UpdateTwilioAccountAsync (string espTwilioUuid, Twilio twilio)
        {
             ApiResponse<TwilioResponse> localVarResponse = await UpdateTwilioAccountAsyncWithHttpInfo(espTwilioUuid, twilio);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update Twilio account 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="espTwilioUuid"></param>
        /// <param name="twilio">Twilio</param>
        /// <returns>Task of ApiResponse (TwilioResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TwilioResponse>> UpdateTwilioAccountAsyncWithHttpInfo (string espTwilioUuid, Twilio twilio)
        {
            // verify the required parameter 'espTwilioUuid' is set
            if (espTwilioUuid == null)
                throw new ApiException(400, "Missing required parameter 'espTwilioUuid' when calling StorefrontApi->UpdateTwilioAccount");
            // verify the required parameter 'twilio' is set
            if (twilio == null)
                throw new ApiException(400, "Missing required parameter 'twilio' when calling StorefrontApi->UpdateTwilioAccount");

            var localVarPath = "/storefront/twilio/accounts/{esp_twilio_uuid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (espTwilioUuid != null) localVarPathParams.Add("esp_twilio_uuid", this.Configuration.ApiClient.ParameterToString(espTwilioUuid)); // path parameter
            if (twilio != null && twilio.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(twilio); // http body (model) parameter
            }
            else
            {
                localVarPostBody = twilio; // byte array
            }

            // authentication (ultraCartBrowserApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key")))
            {
                localVarHeaderParams["x-ultracart-browser-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key");
            }
            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateTwilioAccount", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TwilioResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TwilioResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TwilioResponse)));
        }

    }
}
