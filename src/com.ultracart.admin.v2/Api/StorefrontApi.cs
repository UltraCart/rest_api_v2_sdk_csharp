/* 
 * UltraCart Rest API V2
 *
 * UltraCart REST API Version 2
 *
 * OpenAPI spec version: 2.0.0
 * Contact: support@ultracart.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using com.ultracart.admin.v2.Client;
using com.ultracart.admin.v2.Model;

namespace com.ultracart.admin.v2.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IStorefrontApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Archive email list
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid">null</param>
        /// <param name="emailListUuid">null</param>
        /// <returns>EmailListArchiveResponse</returns>
        EmailListArchiveResponse ArchiveEmailList (string storefrontOid, string emailListUuid);

        /// <summary>
        /// Archive email list
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid">null</param>
        /// <param name="emailListUuid">null</param>
        /// <returns>ApiResponse of EmailListArchiveResponse</returns>
        ApiResponse<EmailListArchiveResponse> ArchiveEmailListWithHttpInfo (string storefrontOid, string emailListUuid);
        /// <summary>
        /// Archive email segment
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid">null</param>
        /// <param name="emailSegmentUuid">null</param>
        /// <returns>EmailSegmentArchiveResponse</returns>
        EmailSegmentArchiveResponse ArchiveEmailSegment (string storefrontOid, string emailSegmentUuid);

        /// <summary>
        /// Archive email segment
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid">null</param>
        /// <param name="emailSegmentUuid">null</param>
        /// <returns>ApiResponse of EmailSegmentArchiveResponse</returns>
        ApiResponse<EmailSegmentArchiveResponse> ArchiveEmailSegmentWithHttpInfo (string storefrontOid, string emailSegmentUuid);
        /// <summary>
        /// Check download of email segment
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid">null</param>
        /// <param name="emailSegmentUuid">null</param>
        /// <param name="emailSegmentRebuildUuid">null</param>
        /// <returns>EmailSegmentDownloadPrepareResponse</returns>
        EmailSegmentDownloadPrepareResponse CheckDownloadEmailSegment (string storefrontOid, string emailSegmentUuid, string emailSegmentRebuildUuid);

        /// <summary>
        /// Check download of email segment
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid">null</param>
        /// <param name="emailSegmentUuid">null</param>
        /// <param name="emailSegmentRebuildUuid">null</param>
        /// <returns>ApiResponse of EmailSegmentDownloadPrepareResponse</returns>
        ApiResponse<EmailSegmentDownloadPrepareResponse> CheckDownloadEmailSegmentWithHttpInfo (string storefrontOid, string emailSegmentUuid, string emailSegmentRebuildUuid);
        /// <summary>
        /// Clone email campaign
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid">null</param>
        /// <param name="emailCampaignUuid">null</param>
        /// <returns>EmailCampaignResponse</returns>
        EmailCampaignResponse CloneEmailCampaign (string storefrontOid, string emailCampaignUuid);

        /// <summary>
        /// Clone email campaign
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid">null</param>
        /// <param name="emailCampaignUuid">null</param>
        /// <returns>ApiResponse of EmailCampaignResponse</returns>
        ApiResponse<EmailCampaignResponse> CloneEmailCampaignWithHttpInfo (string storefrontOid, string emailCampaignUuid);
        /// <summary>
        /// Clone email flow
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid">null</param>
        /// <param name="emailFlowUuid">null</param>
        /// <returns>EmailFlowResponse</returns>
        EmailFlowResponse CloneEmailFlow (string storefrontOid, string emailFlowUuid);

        /// <summary>
        /// Clone email flow
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid">null</param>
        /// <param name="emailFlowUuid">null</param>
        /// <returns>ApiResponse of EmailFlowResponse</returns>
        ApiResponse<EmailFlowResponse> CloneEmailFlowWithHttpInfo (string storefrontOid, string emailFlowUuid);
        /// <summary>
        /// Create email campaign
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="domain">null</param>
        /// <returns>EmailSendingDomainResponse</returns>
        EmailSendingDomainResponse CreateEmailSendingDomain (string domain);

        /// <summary>
        /// Create email campaign
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="domain">null</param>
        /// <returns>ApiResponse of EmailSendingDomainResponse</returns>
        ApiResponse<EmailSendingDomainResponse> CreateEmailSendingDomainWithHttpInfo (string domain);
        /// <summary>
        /// Delete email email
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid">null</param>
        /// <param name="commseqEmailUuid">null</param>
        /// <returns>BaseResponse</returns>
        BaseResponse DeleteEmailEmail (string storefrontOid, string commseqEmailUuid);

        /// <summary>
        /// Delete email email
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid">null</param>
        /// <param name="commseqEmailUuid">null</param>
        /// <returns>ApiResponse of BaseResponse</returns>
        ApiResponse<BaseResponse> DeleteEmailEmailWithHttpInfo (string storefrontOid, string commseqEmailUuid);
        /// <summary>
        /// Delete email list customer
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid">null</param>
        /// <param name="emailListUuid">null</param>
        /// <param name="emailCustomerUuid">null</param>
        /// <returns>BaseResponse</returns>
        BaseResponse DeleteEmailListCustomer (string storefrontOid, string emailListUuid, string emailCustomerUuid);

        /// <summary>
        /// Delete email list customer
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid">null</param>
        /// <param name="emailListUuid">null</param>
        /// <param name="emailCustomerUuid">null</param>
        /// <returns>ApiResponse of BaseResponse</returns>
        ApiResponse<BaseResponse> DeleteEmailListCustomerWithHttpInfo (string storefrontOid, string emailListUuid, string emailCustomerUuid);
        /// <summary>
        /// delete email campaign
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="domain">null</param>
        /// <returns>BaseResponse</returns>
        BaseResponse DeleteEmailSendingDomain (string domain);

        /// <summary>
        /// delete email campaign
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="domain">null</param>
        /// <returns>ApiResponse of BaseResponse</returns>
        ApiResponse<BaseResponse> DeleteEmailSendingDomainWithHttpInfo (string domain);
        /// <summary>
        /// Delete experiment
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid">null</param>
        /// <param name="storefrontExperimentOid">null</param>
        /// <returns></returns>
        void DeleteExperiment (string storefrontOid, int? storefrontExperimentOid);

        /// <summary>
        /// Delete experiment
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid">null</param>
        /// <param name="storefrontExperimentOid">null</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteExperimentWithHttpInfo (string storefrontOid, int? storefrontExperimentOid);
        /// <summary>
        /// Obtain lat/long for an address
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid">null</param>
        /// <param name="geocodeRequest">geocode request</param>
        /// <returns>GeocodeResponse</returns>
        GeocodeResponse GeocodeAddress (string storefrontOid, GeocodeRequest geocodeRequest);

        /// <summary>
        /// Obtain lat/long for an address
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid">null</param>
        /// <param name="geocodeRequest">geocode request</param>
        /// <returns>ApiResponse of GeocodeResponse</returns>
        ApiResponse<GeocodeResponse> GeocodeAddressWithHttpInfo (string storefrontOid, GeocodeRequest geocodeRequest);
        /// <summary>
        /// Get countries
        /// </summary>
        /// <remarks>
        /// Obtain a list of all the countries 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid">null</param>
        /// <returns>CountriesResponse</returns>
        CountriesResponse GetCountries (string storefrontOid);

        /// <summary>
        /// Get countries
        /// </summary>
        /// <remarks>
        /// Obtain a list of all the countries 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid">null</param>
        /// <returns>ApiResponse of CountriesResponse</returns>
        ApiResponse<CountriesResponse> GetCountriesWithHttpInfo (string storefrontOid);
        /// <summary>
        /// Get email communication base templates
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid">null</param>
        /// <returns>EmailBaseTemplateListResponse</returns>
        EmailBaseTemplateListResponse GetEmailBaseTemplates (string storefrontOid);

        /// <summary>
        /// Get email communication base templates
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid">null</param>
        /// <returns>ApiResponse of EmailBaseTemplateListResponse</returns>
        ApiResponse<EmailBaseTemplateListResponse> GetEmailBaseTemplatesWithHttpInfo (string storefrontOid);
        /// <summary>
        /// Get email campaign
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid">null</param>
        /// <param name="emailCampaignUuid">null</param>
        /// <returns>EmailCampaignResponse</returns>
        EmailCampaignResponse GetEmailCampaign (string storefrontOid, string emailCampaignUuid);

        /// <summary>
        /// Get email campaign
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid">null</param>
        /// <param name="emailCampaignUuid">null</param>
        /// <returns>ApiResponse of EmailCampaignResponse</returns>
        ApiResponse<EmailCampaignResponse> GetEmailCampaignWithHttpInfo (string storefrontOid, string emailCampaignUuid);
        /// <summary>
        /// Get email campaigns
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid">null</param>
        /// <returns>EmailCampaignsResponse</returns>
        EmailCampaignsResponse GetEmailCampaigns (string storefrontOid);

        /// <summary>
        /// Get email campaigns
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid">null</param>
        /// <returns>ApiResponse of EmailCampaignsResponse</returns>
        ApiResponse<EmailCampaignsResponse> GetEmailCampaignsWithHttpInfo (string storefrontOid);
        /// <summary>
        /// Get email campaigns with stats
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid">null</param>
        /// <param name="statDays">null</param>
        /// <returns>EmailCampaignsResponse</returns>
        EmailCampaignsResponse GetEmailCampaignsWithStats (string storefrontOid, string statDays);

        /// <summary>
        /// Get email campaigns with stats
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid">null</param>
        /// <param name="statDays">null</param>
        /// <returns>ApiResponse of EmailCampaignsResponse</returns>
        ApiResponse<EmailCampaignsResponse> GetEmailCampaignsWithStatsWithHttpInfo (string storefrontOid, string statDays);
        /// <summary>
        /// Get email commseq
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid">null</param>
        /// <param name="commseqUuid">null</param>
        /// <returns>EmailCommseqResponse</returns>
        EmailCommseqResponse GetEmailCommseq (string storefrontOid, string commseqUuid);

        /// <summary>
        /// Get email commseq
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid">null</param>
        /// <param name="commseqUuid">null</param>
        /// <returns>ApiResponse of EmailCommseqResponse</returns>
        ApiResponse<EmailCommseqResponse> GetEmailCommseqWithHttpInfo (string storefrontOid, string commseqUuid);
        /// <summary>
        /// Get email communication sequence emails stats
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid">null</param>
        /// <param name="commseqUuid">null</param>
        /// <param name="statsRequest">StatsRequest</param>
        /// <returns>EmailStatSummaryResponse</returns>
        EmailStatSummaryResponse GetEmailCommseqEmailStats (string storefrontOid, string commseqUuid, EmailStatSummaryRequest statsRequest);

        /// <summary>
        /// Get email communication sequence emails stats
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid">null</param>
        /// <param name="commseqUuid">null</param>
        /// <param name="statsRequest">StatsRequest</param>
        /// <returns>ApiResponse of EmailStatSummaryResponse</returns>
        ApiResponse<EmailStatSummaryResponse> GetEmailCommseqEmailStatsWithHttpInfo (string storefrontOid, string commseqUuid, EmailStatSummaryRequest statsRequest);
        /// <summary>
        /// Get communication sequence stats overall
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid">null</param>
        /// <param name="commseqUuid">null</param>
        /// <returns>EmailCommseqStatResponse</returns>
        EmailCommseqStatResponse GetEmailCommseqStatOverall (string storefrontOid, string commseqUuid);

        /// <summary>
        /// Get communication sequence stats overall
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid">null</param>
        /// <param name="commseqUuid">null</param>
        /// <returns>ApiResponse of EmailCommseqStatResponse</returns>
        ApiResponse<EmailCommseqStatResponse> GetEmailCommseqStatOverallWithHttpInfo (string storefrontOid, string commseqUuid);
        /// <summary>
        /// Get email communication sequence customers waiting at each requested step
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid">null</param>
        /// <param name="commseqUuid">null</param>
        /// <param name="waitingRequest">WaitingRequest</param>
        /// <returns>EmailStepWaitingResponse</returns>
        EmailStepWaitingResponse GetEmailCommseqStepWaiting (string storefrontOid, string commseqUuid, EmailStepWaitingRequest waitingRequest);

        /// <summary>
        /// Get email communication sequence customers waiting at each requested step
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid">null</param>
        /// <param name="commseqUuid">null</param>
        /// <param name="waitingRequest">WaitingRequest</param>
        /// <returns>ApiResponse of EmailStepWaitingResponse</returns>
        ApiResponse<EmailStepWaitingResponse> GetEmailCommseqStepWaitingWithHttpInfo (string storefrontOid, string commseqUuid, EmailStepWaitingRequest waitingRequest);
        /// <summary>
        /// Get email commseqs
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid">null</param>
        /// <returns>EmailCommseqsResponse</returns>
        EmailCommseqsResponse GetEmailCommseqs (string storefrontOid);

        /// <summary>
        /// Get email commseqs
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid">null</param>
        /// <returns>ApiResponse of EmailCommseqsResponse</returns>
        ApiResponse<EmailCommseqsResponse> GetEmailCommseqsWithHttpInfo (string storefrontOid);
        /// <summary>
        /// Get email dashboard activity
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid">null</param>
        /// <param name="lastRecords">null (optional)</param>
        /// <returns>EmailDashboardActivityResponse</returns>
        EmailDashboardActivityResponse GetEmailDashboardActivity (string storefrontOid, int? lastRecords = null);

        /// <summary>
        /// Get email dashboard activity
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid">null</param>
        /// <param name="lastRecords">null (optional)</param>
        /// <returns>ApiResponse of EmailDashboardActivityResponse</returns>
        ApiResponse<EmailDashboardActivityResponse> GetEmailDashboardActivityWithHttpInfo (string storefrontOid, int? lastRecords = null);
        /// <summary>
        /// Get dashboard stats
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid">null</param>
        /// <param name="days">null (optional)</param>
        /// <returns>EmailDashboardStatsResponse</returns>
        EmailDashboardStatsResponse GetEmailDashboardStats (string storefrontOid, int? days = null);

        /// <summary>
        /// Get dashboard stats
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid">null</param>
        /// <param name="days">null (optional)</param>
        /// <returns>ApiResponse of EmailDashboardStatsResponse</returns>
        ApiResponse<EmailDashboardStatsResponse> GetEmailDashboardStatsWithHttpInfo (string storefrontOid, int? days = null);
        /// <summary>
        /// Get email email
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid">null</param>
        /// <param name="commseqEmailUuid">null</param>
        /// <returns>EmailCommseqEmailResponse</returns>
        EmailCommseqEmailResponse GetEmailEmail (string storefrontOid, string commseqEmailUuid);

        /// <summary>
        /// Get email email
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid">null</param>
        /// <param name="commseqEmailUuid">null</param>
        /// <returns>ApiResponse of EmailCommseqEmailResponse</returns>
        ApiResponse<EmailCommseqEmailResponse> GetEmailEmailWithHttpInfo (string storefrontOid, string commseqEmailUuid);
        /// <summary>
        /// Get email emails
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid">null</param>
        /// <returns>EmailCommseqEmailsResponse</returns>
        EmailCommseqEmailsResponse GetEmailEmails (string storefrontOid);

        /// <summary>
        /// Get email emails
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid">null</param>
        /// <returns>ApiResponse of EmailCommseqEmailsResponse</returns>
        ApiResponse<EmailCommseqEmailsResponse> GetEmailEmailsWithHttpInfo (string storefrontOid);
        /// <summary>
        /// Get email emails multiple
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid">null</param>
        /// <param name="emailCommseqEmailsRequest">Request of email uuids</param>
        /// <returns>EmailCommseqEmailsResponse</returns>
        EmailCommseqEmailsResponse GetEmailEmailsMultiple (string storefrontOid, EmailCommseqEmailsRequest emailCommseqEmailsRequest);

        /// <summary>
        /// Get email emails multiple
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid">null</param>
        /// <param name="emailCommseqEmailsRequest">Request of email uuids</param>
        /// <returns>ApiResponse of EmailCommseqEmailsResponse</returns>
        ApiResponse<EmailCommseqEmailsResponse> GetEmailEmailsMultipleWithHttpInfo (string storefrontOid, EmailCommseqEmailsRequest emailCommseqEmailsRequest);
        /// <summary>
        /// Get email flow
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid">null</param>
        /// <param name="emailFlowUuid">null</param>
        /// <returns>EmailFlowResponse</returns>
        EmailFlowResponse GetEmailFlow (string storefrontOid, string emailFlowUuid);

        /// <summary>
        /// Get email flow
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid">null</param>
        /// <param name="emailFlowUuid">null</param>
        /// <returns>ApiResponse of EmailFlowResponse</returns>
        ApiResponse<EmailFlowResponse> GetEmailFlowWithHttpInfo (string storefrontOid, string emailFlowUuid);
        /// <summary>
        /// Get email flows
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid">null</param>
        /// <returns>EmailFlowsResponse</returns>
        EmailFlowsResponse GetEmailFlows (string storefrontOid);

        /// <summary>
        /// Get email flows
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid">null</param>
        /// <returns>ApiResponse of EmailFlowsResponse</returns>
        ApiResponse<EmailFlowsResponse> GetEmailFlowsWithHttpInfo (string storefrontOid);
        /// <summary>
        /// Get email list
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid">null</param>
        /// <param name="emailListUuid">null</param>
        /// <returns>EmailListResponse</returns>
        EmailListResponse GetEmailList (string storefrontOid, string emailListUuid);

        /// <summary>
        /// Get email list
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid">null</param>
        /// <param name="emailListUuid">null</param>
        /// <returns>ApiResponse of EmailListResponse</returns>
        ApiResponse<EmailListResponse> GetEmailListWithHttpInfo (string storefrontOid, string emailListUuid);
        /// <summary>
        /// Get email list customers
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid">null</param>
        /// <param name="emailListUuid">null</param>
        /// <param name="emailCustomerUuid">null</param>
        /// <returns>EmailCustomerEditorUrlResponse</returns>
        EmailCustomerEditorUrlResponse GetEmailListCustomerEditorUrl (string storefrontOid, string emailListUuid, string emailCustomerUuid);

        /// <summary>
        /// Get email list customers
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid">null</param>
        /// <param name="emailListUuid">null</param>
        /// <param name="emailCustomerUuid">null</param>
        /// <returns>ApiResponse of EmailCustomerEditorUrlResponse</returns>
        ApiResponse<EmailCustomerEditorUrlResponse> GetEmailListCustomerEditorUrlWithHttpInfo (string storefrontOid, string emailListUuid, string emailCustomerUuid);
        /// <summary>
        /// Get email list customers
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid">null</param>
        /// <param name="emailListUuid">null</param>
        /// <param name="pageNumber">null (optional)</param>
        /// <param name="pageSize">null (optional)</param>
        /// <returns>EmailListCustomersResponse</returns>
        EmailListCustomersResponse GetEmailListCustomers (string storefrontOid, string emailListUuid, int? pageNumber = null, int? pageSize = null);

        /// <summary>
        /// Get email list customers
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid">null</param>
        /// <param name="emailListUuid">null</param>
        /// <param name="pageNumber">null (optional)</param>
        /// <param name="pageSize">null (optional)</param>
        /// <returns>ApiResponse of EmailListCustomersResponse</returns>
        ApiResponse<EmailListCustomersResponse> GetEmailListCustomersWithHttpInfo (string storefrontOid, string emailListUuid, int? pageNumber = null, int? pageSize = null);
        /// <summary>
        /// Get email lists
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid">null</param>
        /// <returns>EmailListsResponse</returns>
        EmailListsResponse GetEmailLists (string storefrontOid);

        /// <summary>
        /// Get email lists
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid">null</param>
        /// <returns>ApiResponse of EmailListsResponse</returns>
        ApiResponse<EmailListsResponse> GetEmailListsWithHttpInfo (string storefrontOid);
        /// <summary>
        /// Get email segment
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid">null</param>
        /// <param name="emailSegmentUuid">null</param>
        /// <returns>EmailSegmentResponse</returns>
        EmailSegmentResponse GetEmailSegment (string storefrontOid, string emailSegmentUuid);

        /// <summary>
        /// Get email segment
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid">null</param>
        /// <param name="emailSegmentUuid">null</param>
        /// <returns>ApiResponse of EmailSegmentResponse</returns>
        ApiResponse<EmailSegmentResponse> GetEmailSegmentWithHttpInfo (string storefrontOid, string emailSegmentUuid);
        /// <summary>
        /// Get email segment customers editor URL
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid">null</param>
        /// <param name="emailSegmentUuid">null</param>
        /// <param name="emailCustomerUuid">null</param>
        /// <returns>EmailCustomerEditorUrlResponse</returns>
        EmailCustomerEditorUrlResponse GetEmailSegmentCustomerEditorUrl (string storefrontOid, string emailSegmentUuid, string emailCustomerUuid);

        /// <summary>
        /// Get email segment customers editor URL
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid">null</param>
        /// <param name="emailSegmentUuid">null</param>
        /// <param name="emailCustomerUuid">null</param>
        /// <returns>ApiResponse of EmailCustomerEditorUrlResponse</returns>
        ApiResponse<EmailCustomerEditorUrlResponse> GetEmailSegmentCustomerEditorUrlWithHttpInfo (string storefrontOid, string emailSegmentUuid, string emailCustomerUuid);
        /// <summary>
        /// Get email segment customers
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid">null</param>
        /// <param name="emailSegmentUuid">null</param>
        /// <param name="pageNumber">null (optional)</param>
        /// <param name="pageSize">null (optional)</param>
        /// <returns>EmailSegmentCustomersResponse</returns>
        EmailSegmentCustomersResponse GetEmailSegmentCustomers (string storefrontOid, string emailSegmentUuid, int? pageNumber = null, int? pageSize = null);

        /// <summary>
        /// Get email segment customers
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid">null</param>
        /// <param name="emailSegmentUuid">null</param>
        /// <param name="pageNumber">null (optional)</param>
        /// <param name="pageSize">null (optional)</param>
        /// <returns>ApiResponse of EmailSegmentCustomersResponse</returns>
        ApiResponse<EmailSegmentCustomersResponse> GetEmailSegmentCustomersWithHttpInfo (string storefrontOid, string emailSegmentUuid, int? pageNumber = null, int? pageSize = null);
        /// <summary>
        /// Get email segments
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid">null</param>
        /// <returns>EmailSegmentsResponse</returns>
        EmailSegmentsResponse GetEmailSegments (string storefrontOid);

        /// <summary>
        /// Get email segments
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid">null</param>
        /// <returns>ApiResponse of EmailSegmentsResponse</returns>
        ApiResponse<EmailSegmentsResponse> GetEmailSegmentsWithHttpInfo (string storefrontOid);
        /// <summary>
        /// Get email sending domain
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="domain">null</param>
        /// <returns>EmailSendingDomainResponse</returns>
        EmailSendingDomainResponse GetEmailSendingDomain (string domain);

        /// <summary>
        /// Get email sending domain
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="domain">null</param>
        /// <returns>ApiResponse of EmailSendingDomainResponse</returns>
        ApiResponse<EmailSendingDomainResponse> GetEmailSendingDomainWithHttpInfo (string domain);
        /// <summary>
        /// Get email sending domain status
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="domain">null</param>
        /// <returns>EmailSendingDomainResponse</returns>
        EmailSendingDomainResponse GetEmailSendingDomainStatus (string domain);

        /// <summary>
        /// Get email sending domain status
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="domain">null</param>
        /// <returns>ApiResponse of EmailSendingDomainResponse</returns>
        ApiResponse<EmailSendingDomainResponse> GetEmailSendingDomainStatusWithHttpInfo (string domain);
        /// <summary>
        /// Get email sending domains
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>EmailSendingDomainsResponse</returns>
        EmailSendingDomainsResponse GetEmailSendingDomains ();

        /// <summary>
        /// Get email sending domains
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of EmailSendingDomainsResponse</returns>
        ApiResponse<EmailSendingDomainsResponse> GetEmailSendingDomainsWithHttpInfo ();
        /// <summary>
        /// Get email template
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid">null</param>
        /// <param name="emailTemplateOid">null</param>
        /// <returns>EmailTemplate</returns>
        EmailTemplate GetEmailTemplate (string storefrontOid, int? emailTemplateOid);

        /// <summary>
        /// Get email template
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid">null</param>
        /// <param name="emailTemplateOid">null</param>
        /// <returns>ApiResponse of EmailTemplate</returns>
        ApiResponse<EmailTemplate> GetEmailTemplateWithHttpInfo (string storefrontOid, int? emailTemplateOid);
        /// <summary>
        /// Get email templates
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid">null</param>
        /// <param name="triggerType">null (optional)</param>
        /// <returns>EmailTemplatesResponse</returns>
        EmailTemplatesResponse GetEmailTemplates (string storefrontOid, string triggerType = null);

        /// <summary>
        /// Get email templates
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid">null</param>
        /// <param name="triggerType">null (optional)</param>
        /// <returns>ApiResponse of EmailTemplatesResponse</returns>
        ApiResponse<EmailTemplatesResponse> GetEmailTemplatesWithHttpInfo (string storefrontOid, string triggerType = null);
        /// <summary>
        /// Get a list of third party email providers
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid">null</param>
        /// <returns>EmailThirdPartyProvidersResponse</returns>
        EmailThirdPartyProvidersResponse GetEmailThirdPartyProviders (string storefrontOid);

        /// <summary>
        /// Get a list of third party email providers
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid">null</param>
        /// <returns>ApiResponse of EmailThirdPartyProvidersResponse</returns>
        ApiResponse<EmailThirdPartyProvidersResponse> GetEmailThirdPartyProvidersWithHttpInfo (string storefrontOid);
        /// <summary>
        /// Get experiments
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid">null</param>
        /// <returns>ExperimentsResponse</returns>
        ExperimentsResponse GetExperiments (string storefrontOid);

        /// <summary>
        /// Get experiments
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid">null</param>
        /// <returns>ApiResponse of ExperimentsResponse</returns>
        ApiResponse<ExperimentsResponse> GetExperimentsWithHttpInfo (string storefrontOid);
        /// <summary>
        /// Get histogram property names
        /// </summary>
        /// <remarks>
        /// Obtain a list of property names for a given property type 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid">null</param>
        /// <param name="propertyType">null (optional)</param>
        /// <returns>EmailHistogramPropertyNamesResponse</returns>
        EmailHistogramPropertyNamesResponse GetHistogramPropertyNames (string storefrontOid, string propertyType = null);

        /// <summary>
        /// Get histogram property names
        /// </summary>
        /// <remarks>
        /// Obtain a list of property names for a given property type 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid">null</param>
        /// <param name="propertyType">null (optional)</param>
        /// <returns>ApiResponse of EmailHistogramPropertyNamesResponse</returns>
        ApiResponse<EmailHistogramPropertyNamesResponse> GetHistogramPropertyNamesWithHttpInfo (string storefrontOid, string propertyType = null);
        /// <summary>
        /// Get histogram property values
        /// </summary>
        /// <remarks>
        /// Obtain a list of property values for a given property name and type 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid">null</param>
        /// <param name="propertyName">null (optional)</param>
        /// <param name="propertyType">null (optional)</param>
        /// <param name="limit">null (optional)</param>
        /// <returns>EmailHistogramPropertyValuesResponse</returns>
        EmailHistogramPropertyValuesResponse GetHistogramPropertyValues (string storefrontOid, string propertyName = null, string propertyType = null, int? limit = null);

        /// <summary>
        /// Get histogram property values
        /// </summary>
        /// <remarks>
        /// Obtain a list of property values for a given property name and type 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid">null</param>
        /// <param name="propertyName">null (optional)</param>
        /// <param name="propertyType">null (optional)</param>
        /// <param name="limit">null (optional)</param>
        /// <returns>ApiResponse of EmailHistogramPropertyValuesResponse</returns>
        ApiResponse<EmailHistogramPropertyValuesResponse> GetHistogramPropertyValuesWithHttpInfo (string storefrontOid, string propertyName = null, string propertyType = null, int? limit = null);
        /// <summary>
        /// Import a third party provider list
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid">null</param>
        /// <param name="importRequest">lists to import</param>
        /// <returns></returns>
        void ImportEmailThirdPartyProviderList (string storefrontOid, EmailThirdPartyListImportRequest importRequest);

        /// <summary>
        /// Import a third party provider list
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid">null</param>
        /// <param name="importRequest">lists to import</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ImportEmailThirdPartyProviderListWithHttpInfo (string storefrontOid, EmailThirdPartyListImportRequest importRequest);
        /// <summary>
        /// Insert email campaign
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid">null</param>
        /// <param name="emailCampaign">Email campaign</param>
        /// <returns>EmailCampaignResponse</returns>
        EmailCampaignResponse InsertEmailCampaign (string storefrontOid, EmailCampaign emailCampaign);

        /// <summary>
        /// Insert email campaign
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid">null</param>
        /// <param name="emailCampaign">Email campaign</param>
        /// <returns>ApiResponse of EmailCampaignResponse</returns>
        ApiResponse<EmailCampaignResponse> InsertEmailCampaignWithHttpInfo (string storefrontOid, EmailCampaign emailCampaign);
        /// <summary>
        /// Insert email commseq
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid">null</param>
        /// <param name="emailCommseq">Email commseq</param>
        /// <returns>EmailCommseqResponse</returns>
        EmailCommseqResponse InsertEmailCommseq (string storefrontOid, EmailCommseq emailCommseq);

        /// <summary>
        /// Insert email commseq
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid">null</param>
        /// <param name="emailCommseq">Email commseq</param>
        /// <returns>ApiResponse of EmailCommseqResponse</returns>
        ApiResponse<EmailCommseqResponse> InsertEmailCommseqWithHttpInfo (string storefrontOid, EmailCommseq emailCommseq);
        /// <summary>
        /// Insert email email
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid">null</param>
        /// <param name="emailCommseqEmail">Email email</param>
        /// <returns>EmailCommseqEmailResponse</returns>
        EmailCommseqEmailResponse InsertEmailEmail (string storefrontOid, EmailCommseqEmail emailCommseqEmail);

        /// <summary>
        /// Insert email email
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid">null</param>
        /// <param name="emailCommseqEmail">Email email</param>
        /// <returns>ApiResponse of EmailCommseqEmailResponse</returns>
        ApiResponse<EmailCommseqEmailResponse> InsertEmailEmailWithHttpInfo (string storefrontOid, EmailCommseqEmail emailCommseqEmail);
        /// <summary>
        /// Insert email flow
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid">null</param>
        /// <param name="emailFlow">Email flow</param>
        /// <returns>EmailFlowResponse</returns>
        EmailFlowResponse InsertEmailFlow (string storefrontOid, EmailFlow emailFlow);

        /// <summary>
        /// Insert email flow
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid">null</param>
        /// <param name="emailFlow">Email flow</param>
        /// <returns>ApiResponse of EmailFlowResponse</returns>
        ApiResponse<EmailFlowResponse> InsertEmailFlowWithHttpInfo (string storefrontOid, EmailFlow emailFlow);
        /// <summary>
        /// Insert email list
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid">null</param>
        /// <param name="emailList">Email list</param>
        /// <returns>EmailListResponse</returns>
        EmailListResponse InsertEmailList (string storefrontOid, EmailList emailList);

        /// <summary>
        /// Insert email list
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid">null</param>
        /// <param name="emailList">Email list</param>
        /// <returns>ApiResponse of EmailListResponse</returns>
        ApiResponse<EmailListResponse> InsertEmailListWithHttpInfo (string storefrontOid, EmailList emailList);
        /// <summary>
        /// Insert email segment
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid">null</param>
        /// <param name="emailSegment">Email segment</param>
        /// <returns>EmailSegmentResponse</returns>
        EmailSegmentResponse InsertEmailSegment (string storefrontOid, EmailSegment emailSegment);

        /// <summary>
        /// Insert email segment
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid">null</param>
        /// <param name="emailSegment">Email segment</param>
        /// <returns>ApiResponse of EmailSegmentResponse</returns>
        ApiResponse<EmailSegmentResponse> InsertEmailSegmentWithHttpInfo (string storefrontOid, EmailSegment emailSegment);
        /// <summary>
        /// Prepare download of email segment
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid">null</param>
        /// <param name="emailSegmentUuid">null</param>
        /// <returns>EmailSegmentDownloadPrepareResponse</returns>
        EmailSegmentDownloadPrepareResponse PrepareDownloadEmailSegment (string storefrontOid, string emailSegmentUuid);

        /// <summary>
        /// Prepare download of email segment
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid">null</param>
        /// <param name="emailSegmentUuid">null</param>
        /// <returns>ApiResponse of EmailSegmentDownloadPrepareResponse</returns>
        ApiResponse<EmailSegmentDownloadPrepareResponse> PrepareDownloadEmailSegmentWithHttpInfo (string storefrontOid, string emailSegmentUuid);
        /// <summary>
        /// Searches for all matching values
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="category">null (optional)</param>
        /// <param name="matches">null (optional)</param>
        /// <param name="maxHits">null (optional)</param>
        /// <returns>LookupResponse</returns>
        LookupResponse Search (string category = null, string matches = null, int? maxHits = null);

        /// <summary>
        /// Searches for all matching values
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="category">null (optional)</param>
        /// <param name="matches">null (optional)</param>
        /// <param name="maxHits">null (optional)</param>
        /// <returns>ApiResponse of LookupResponse</returns>
        ApiResponse<LookupResponse> SearchWithHttpInfo (string category = null, string matches = null, int? maxHits = null);
        /// <summary>
        /// Search email list customers
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid">null</param>
        /// <param name="emailListUuid">null</param>
        /// <param name="startsWith">null (optional)</param>
        /// <returns>EmailListCustomersResponse</returns>
        EmailListCustomersResponse SearchEmailListCustomers (string storefrontOid, string emailListUuid, string startsWith = null);

        /// <summary>
        /// Search email list customers
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid">null</param>
        /// <param name="emailListUuid">null</param>
        /// <param name="startsWith">null (optional)</param>
        /// <returns>ApiResponse of EmailListCustomersResponse</returns>
        ApiResponse<EmailListCustomersResponse> SearchEmailListCustomersWithHttpInfo (string storefrontOid, string emailListUuid, string startsWith = null);
        /// <summary>
        /// Search email segment customers
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid">null</param>
        /// <param name="emailSegmentUuid">null</param>
        /// <param name="startsWith">null (optional)</param>
        /// <returns>EmailSegmentCustomersResponse</returns>
        EmailSegmentCustomersResponse SearchEmailSegmentCustomers (string storefrontOid, string emailSegmentUuid, string startsWith = null);

        /// <summary>
        /// Search email segment customers
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid">null</param>
        /// <param name="emailSegmentUuid">null</param>
        /// <param name="startsWith">null (optional)</param>
        /// <returns>ApiResponse of EmailSegmentCustomersResponse</returns>
        ApiResponse<EmailSegmentCustomersResponse> SearchEmailSegmentCustomersWithHttpInfo (string storefrontOid, string emailSegmentUuid, string startsWith = null);
        /// <summary>
        /// Start email campaign
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid">null</param>
        /// <param name="emailCampaignUuid">null</param>
        /// <returns>BaseResponse</returns>
        BaseResponse StartEmailCampaign (string storefrontOid, string emailCampaignUuid);

        /// <summary>
        /// Start email campaign
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid">null</param>
        /// <param name="emailCampaignUuid">null</param>
        /// <returns>ApiResponse of BaseResponse</returns>
        ApiResponse<BaseResponse> StartEmailCampaignWithHttpInfo (string storefrontOid, string emailCampaignUuid);
        /// <summary>
        /// Subscribe customers to email list
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid">null</param>
        /// <param name="emailListUuid">null</param>
        /// <param name="customers">Customers</param>
        /// <returns>EmailListSubscribeResponse</returns>
        EmailListSubscribeResponse SubscribeToEmailList (string storefrontOid, string emailListUuid, List<EmailCustomer> customers);

        /// <summary>
        /// Subscribe customers to email list
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid">null</param>
        /// <param name="emailListUuid">null</param>
        /// <param name="customers">Customers</param>
        /// <returns>ApiResponse of EmailListSubscribeResponse</returns>
        ApiResponse<EmailListSubscribeResponse> SubscribeToEmailListWithHttpInfo (string storefrontOid, string emailListUuid, List<EmailCustomer> customers);
        /// <summary>
        /// Update email campaign
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid">null</param>
        /// <param name="emailCampaignUuid">null</param>
        /// <param name="emailCampaign">Email campaign</param>
        /// <returns>EmailCampaignResponse</returns>
        EmailCampaignResponse UpdateEmailCampaign (string storefrontOid, string emailCampaignUuid, EmailCampaign emailCampaign);

        /// <summary>
        /// Update email campaign
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid">null</param>
        /// <param name="emailCampaignUuid">null</param>
        /// <param name="emailCampaign">Email campaign</param>
        /// <returns>ApiResponse of EmailCampaignResponse</returns>
        ApiResponse<EmailCampaignResponse> UpdateEmailCampaignWithHttpInfo (string storefrontOid, string emailCampaignUuid, EmailCampaign emailCampaign);
        /// <summary>
        /// Update email commseq
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid">null</param>
        /// <param name="commseqUuid">null</param>
        /// <param name="emailCommseq">Email commseq</param>
        /// <returns>EmailCommseqResponse</returns>
        EmailCommseqResponse UpdateEmailCommseq (string storefrontOid, string commseqUuid, EmailCommseq emailCommseq);

        /// <summary>
        /// Update email commseq
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid">null</param>
        /// <param name="commseqUuid">null</param>
        /// <param name="emailCommseq">Email commseq</param>
        /// <returns>ApiResponse of EmailCommseqResponse</returns>
        ApiResponse<EmailCommseqResponse> UpdateEmailCommseqWithHttpInfo (string storefrontOid, string commseqUuid, EmailCommseq emailCommseq);
        /// <summary>
        /// Update email email
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid">null</param>
        /// <param name="commseqEmailUuid">null</param>
        /// <param name="emailCommseqEmail">Email commseq email</param>
        /// <returns>EmailCommseqEmailResponse</returns>
        EmailCommseqEmailResponse UpdateEmailEmail (string storefrontOid, string commseqEmailUuid, EmailCommseqEmail emailCommseqEmail);

        /// <summary>
        /// Update email email
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid">null</param>
        /// <param name="commseqEmailUuid">null</param>
        /// <param name="emailCommseqEmail">Email commseq email</param>
        /// <returns>ApiResponse of EmailCommseqEmailResponse</returns>
        ApiResponse<EmailCommseqEmailResponse> UpdateEmailEmailWithHttpInfo (string storefrontOid, string commseqEmailUuid, EmailCommseqEmail emailCommseqEmail);
        /// <summary>
        /// Update email flow
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid">null</param>
        /// <param name="emailFlowUuid">null</param>
        /// <param name="emailFlow">Email flow</param>
        /// <returns>EmailFlowResponse</returns>
        EmailFlowResponse UpdateEmailFlow (string storefrontOid, string emailFlowUuid, EmailFlow emailFlow);

        /// <summary>
        /// Update email flow
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid">null</param>
        /// <param name="emailFlowUuid">null</param>
        /// <param name="emailFlow">Email flow</param>
        /// <returns>ApiResponse of EmailFlowResponse</returns>
        ApiResponse<EmailFlowResponse> UpdateEmailFlowWithHttpInfo (string storefrontOid, string emailFlowUuid, EmailFlow emailFlow);
        /// <summary>
        /// Update email list
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid">null</param>
        /// <param name="emailListUuid">null</param>
        /// <param name="emailList">Email list</param>
        /// <returns>EmailListResponse</returns>
        EmailListResponse UpdateEmailList (string storefrontOid, string emailListUuid, EmailList emailList);

        /// <summary>
        /// Update email list
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid">null</param>
        /// <param name="emailListUuid">null</param>
        /// <param name="emailList">Email list</param>
        /// <returns>ApiResponse of EmailListResponse</returns>
        ApiResponse<EmailListResponse> UpdateEmailListWithHttpInfo (string storefrontOid, string emailListUuid, EmailList emailList);
        /// <summary>
        /// Update email segment
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid">null</param>
        /// <param name="emailSegmentUuid">null</param>
        /// <param name="emailSegment">Email segment</param>
        /// <returns>EmailSegmentResponse</returns>
        EmailSegmentResponse UpdateEmailSegment (string storefrontOid, string emailSegmentUuid, EmailSegment emailSegment);

        /// <summary>
        /// Update email segment
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid">null</param>
        /// <param name="emailSegmentUuid">null</param>
        /// <param name="emailSegment">Email segment</param>
        /// <returns>ApiResponse of EmailSegmentResponse</returns>
        ApiResponse<EmailSegmentResponse> UpdateEmailSegmentWithHttpInfo (string storefrontOid, string emailSegmentUuid, EmailSegment emailSegment);
        /// <summary>
        /// Update experiment
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid">null</param>
        /// <param name="storefrontExperimentOid">null</param>
        /// <param name="experiment">Experiment</param>
        /// <returns>ExperimentResponse</returns>
        ExperimentResponse UpdateExperiment (string storefrontOid, int? storefrontExperimentOid, Experiment experiment);

        /// <summary>
        /// Update experiment
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid">null</param>
        /// <param name="storefrontExperimentOid">null</param>
        /// <param name="experiment">Experiment</param>
        /// <returns>ApiResponse of ExperimentResponse</returns>
        ApiResponse<ExperimentResponse> UpdateExperimentWithHttpInfo (string storefrontOid, int? storefrontExperimentOid, Experiment experiment);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Archive email list
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid">null</param>
        /// <param name="emailListUuid">null</param>
        /// <returns>Task of EmailListArchiveResponse</returns>
        System.Threading.Tasks.Task<EmailListArchiveResponse> ArchiveEmailListAsync (string storefrontOid, string emailListUuid);

        /// <summary>
        /// Archive email list
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid">null</param>
        /// <param name="emailListUuid">null</param>
        /// <returns>Task of ApiResponse (EmailListArchiveResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<EmailListArchiveResponse>> ArchiveEmailListAsyncWithHttpInfo (string storefrontOid, string emailListUuid);
        /// <summary>
        /// Archive email segment
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid">null</param>
        /// <param name="emailSegmentUuid">null</param>
        /// <returns>Task of EmailSegmentArchiveResponse</returns>
        System.Threading.Tasks.Task<EmailSegmentArchiveResponse> ArchiveEmailSegmentAsync (string storefrontOid, string emailSegmentUuid);

        /// <summary>
        /// Archive email segment
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid">null</param>
        /// <param name="emailSegmentUuid">null</param>
        /// <returns>Task of ApiResponse (EmailSegmentArchiveResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<EmailSegmentArchiveResponse>> ArchiveEmailSegmentAsyncWithHttpInfo (string storefrontOid, string emailSegmentUuid);
        /// <summary>
        /// Check download of email segment
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid">null</param>
        /// <param name="emailSegmentUuid">null</param>
        /// <param name="emailSegmentRebuildUuid">null</param>
        /// <returns>Task of EmailSegmentDownloadPrepareResponse</returns>
        System.Threading.Tasks.Task<EmailSegmentDownloadPrepareResponse> CheckDownloadEmailSegmentAsync (string storefrontOid, string emailSegmentUuid, string emailSegmentRebuildUuid);

        /// <summary>
        /// Check download of email segment
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid">null</param>
        /// <param name="emailSegmentUuid">null</param>
        /// <param name="emailSegmentRebuildUuid">null</param>
        /// <returns>Task of ApiResponse (EmailSegmentDownloadPrepareResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<EmailSegmentDownloadPrepareResponse>> CheckDownloadEmailSegmentAsyncWithHttpInfo (string storefrontOid, string emailSegmentUuid, string emailSegmentRebuildUuid);
        /// <summary>
        /// Clone email campaign
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid">null</param>
        /// <param name="emailCampaignUuid">null</param>
        /// <returns>Task of EmailCampaignResponse</returns>
        System.Threading.Tasks.Task<EmailCampaignResponse> CloneEmailCampaignAsync (string storefrontOid, string emailCampaignUuid);

        /// <summary>
        /// Clone email campaign
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid">null</param>
        /// <param name="emailCampaignUuid">null</param>
        /// <returns>Task of ApiResponse (EmailCampaignResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<EmailCampaignResponse>> CloneEmailCampaignAsyncWithHttpInfo (string storefrontOid, string emailCampaignUuid);
        /// <summary>
        /// Clone email flow
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid">null</param>
        /// <param name="emailFlowUuid">null</param>
        /// <returns>Task of EmailFlowResponse</returns>
        System.Threading.Tasks.Task<EmailFlowResponse> CloneEmailFlowAsync (string storefrontOid, string emailFlowUuid);

        /// <summary>
        /// Clone email flow
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid">null</param>
        /// <param name="emailFlowUuid">null</param>
        /// <returns>Task of ApiResponse (EmailFlowResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<EmailFlowResponse>> CloneEmailFlowAsyncWithHttpInfo (string storefrontOid, string emailFlowUuid);
        /// <summary>
        /// Create email campaign
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="domain">null</param>
        /// <returns>Task of EmailSendingDomainResponse</returns>
        System.Threading.Tasks.Task<EmailSendingDomainResponse> CreateEmailSendingDomainAsync (string domain);

        /// <summary>
        /// Create email campaign
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="domain">null</param>
        /// <returns>Task of ApiResponse (EmailSendingDomainResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<EmailSendingDomainResponse>> CreateEmailSendingDomainAsyncWithHttpInfo (string domain);
        /// <summary>
        /// Delete email email
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid">null</param>
        /// <param name="commseqEmailUuid">null</param>
        /// <returns>Task of BaseResponse</returns>
        System.Threading.Tasks.Task<BaseResponse> DeleteEmailEmailAsync (string storefrontOid, string commseqEmailUuid);

        /// <summary>
        /// Delete email email
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid">null</param>
        /// <param name="commseqEmailUuid">null</param>
        /// <returns>Task of ApiResponse (BaseResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<BaseResponse>> DeleteEmailEmailAsyncWithHttpInfo (string storefrontOid, string commseqEmailUuid);
        /// <summary>
        /// Delete email list customer
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid">null</param>
        /// <param name="emailListUuid">null</param>
        /// <param name="emailCustomerUuid">null</param>
        /// <returns>Task of BaseResponse</returns>
        System.Threading.Tasks.Task<BaseResponse> DeleteEmailListCustomerAsync (string storefrontOid, string emailListUuid, string emailCustomerUuid);

        /// <summary>
        /// Delete email list customer
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid">null</param>
        /// <param name="emailListUuid">null</param>
        /// <param name="emailCustomerUuid">null</param>
        /// <returns>Task of ApiResponse (BaseResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<BaseResponse>> DeleteEmailListCustomerAsyncWithHttpInfo (string storefrontOid, string emailListUuid, string emailCustomerUuid);
        /// <summary>
        /// delete email campaign
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="domain">null</param>
        /// <returns>Task of BaseResponse</returns>
        System.Threading.Tasks.Task<BaseResponse> DeleteEmailSendingDomainAsync (string domain);

        /// <summary>
        /// delete email campaign
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="domain">null</param>
        /// <returns>Task of ApiResponse (BaseResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<BaseResponse>> DeleteEmailSendingDomainAsyncWithHttpInfo (string domain);
        /// <summary>
        /// Delete experiment
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid">null</param>
        /// <param name="storefrontExperimentOid">null</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteExperimentAsync (string storefrontOid, int? storefrontExperimentOid);

        /// <summary>
        /// Delete experiment
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid">null</param>
        /// <param name="storefrontExperimentOid">null</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteExperimentAsyncWithHttpInfo (string storefrontOid, int? storefrontExperimentOid);
        /// <summary>
        /// Obtain lat/long for an address
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid">null</param>
        /// <param name="geocodeRequest">geocode request</param>
        /// <returns>Task of GeocodeResponse</returns>
        System.Threading.Tasks.Task<GeocodeResponse> GeocodeAddressAsync (string storefrontOid, GeocodeRequest geocodeRequest);

        /// <summary>
        /// Obtain lat/long for an address
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid">null</param>
        /// <param name="geocodeRequest">geocode request</param>
        /// <returns>Task of ApiResponse (GeocodeResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GeocodeResponse>> GeocodeAddressAsyncWithHttpInfo (string storefrontOid, GeocodeRequest geocodeRequest);
        /// <summary>
        /// Get countries
        /// </summary>
        /// <remarks>
        /// Obtain a list of all the countries 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid">null</param>
        /// <returns>Task of CountriesResponse</returns>
        System.Threading.Tasks.Task<CountriesResponse> GetCountriesAsync (string storefrontOid);

        /// <summary>
        /// Get countries
        /// </summary>
        /// <remarks>
        /// Obtain a list of all the countries 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid">null</param>
        /// <returns>Task of ApiResponse (CountriesResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CountriesResponse>> GetCountriesAsyncWithHttpInfo (string storefrontOid);
        /// <summary>
        /// Get email communication base templates
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid">null</param>
        /// <returns>Task of EmailBaseTemplateListResponse</returns>
        System.Threading.Tasks.Task<EmailBaseTemplateListResponse> GetEmailBaseTemplatesAsync (string storefrontOid);

        /// <summary>
        /// Get email communication base templates
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid">null</param>
        /// <returns>Task of ApiResponse (EmailBaseTemplateListResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<EmailBaseTemplateListResponse>> GetEmailBaseTemplatesAsyncWithHttpInfo (string storefrontOid);
        /// <summary>
        /// Get email campaign
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid">null</param>
        /// <param name="emailCampaignUuid">null</param>
        /// <returns>Task of EmailCampaignResponse</returns>
        System.Threading.Tasks.Task<EmailCampaignResponse> GetEmailCampaignAsync (string storefrontOid, string emailCampaignUuid);

        /// <summary>
        /// Get email campaign
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid">null</param>
        /// <param name="emailCampaignUuid">null</param>
        /// <returns>Task of ApiResponse (EmailCampaignResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<EmailCampaignResponse>> GetEmailCampaignAsyncWithHttpInfo (string storefrontOid, string emailCampaignUuid);
        /// <summary>
        /// Get email campaigns
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid">null</param>
        /// <returns>Task of EmailCampaignsResponse</returns>
        System.Threading.Tasks.Task<EmailCampaignsResponse> GetEmailCampaignsAsync (string storefrontOid);

        /// <summary>
        /// Get email campaigns
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid">null</param>
        /// <returns>Task of ApiResponse (EmailCampaignsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<EmailCampaignsResponse>> GetEmailCampaignsAsyncWithHttpInfo (string storefrontOid);
        /// <summary>
        /// Get email campaigns with stats
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid">null</param>
        /// <param name="statDays">null</param>
        /// <returns>Task of EmailCampaignsResponse</returns>
        System.Threading.Tasks.Task<EmailCampaignsResponse> GetEmailCampaignsWithStatsAsync (string storefrontOid, string statDays);

        /// <summary>
        /// Get email campaigns with stats
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid">null</param>
        /// <param name="statDays">null</param>
        /// <returns>Task of ApiResponse (EmailCampaignsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<EmailCampaignsResponse>> GetEmailCampaignsWithStatsAsyncWithHttpInfo (string storefrontOid, string statDays);
        /// <summary>
        /// Get email commseq
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid">null</param>
        /// <param name="commseqUuid">null</param>
        /// <returns>Task of EmailCommseqResponse</returns>
        System.Threading.Tasks.Task<EmailCommseqResponse> GetEmailCommseqAsync (string storefrontOid, string commseqUuid);

        /// <summary>
        /// Get email commseq
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid">null</param>
        /// <param name="commseqUuid">null</param>
        /// <returns>Task of ApiResponse (EmailCommseqResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<EmailCommseqResponse>> GetEmailCommseqAsyncWithHttpInfo (string storefrontOid, string commseqUuid);
        /// <summary>
        /// Get email communication sequence emails stats
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid">null</param>
        /// <param name="commseqUuid">null</param>
        /// <param name="statsRequest">StatsRequest</param>
        /// <returns>Task of EmailStatSummaryResponse</returns>
        System.Threading.Tasks.Task<EmailStatSummaryResponse> GetEmailCommseqEmailStatsAsync (string storefrontOid, string commseqUuid, EmailStatSummaryRequest statsRequest);

        /// <summary>
        /// Get email communication sequence emails stats
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid">null</param>
        /// <param name="commseqUuid">null</param>
        /// <param name="statsRequest">StatsRequest</param>
        /// <returns>Task of ApiResponse (EmailStatSummaryResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<EmailStatSummaryResponse>> GetEmailCommseqEmailStatsAsyncWithHttpInfo (string storefrontOid, string commseqUuid, EmailStatSummaryRequest statsRequest);
        /// <summary>
        /// Get communication sequence stats overall
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid">null</param>
        /// <param name="commseqUuid">null</param>
        /// <returns>Task of EmailCommseqStatResponse</returns>
        System.Threading.Tasks.Task<EmailCommseqStatResponse> GetEmailCommseqStatOverallAsync (string storefrontOid, string commseqUuid);

        /// <summary>
        /// Get communication sequence stats overall
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid">null</param>
        /// <param name="commseqUuid">null</param>
        /// <returns>Task of ApiResponse (EmailCommseqStatResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<EmailCommseqStatResponse>> GetEmailCommseqStatOverallAsyncWithHttpInfo (string storefrontOid, string commseqUuid);
        /// <summary>
        /// Get email communication sequence customers waiting at each requested step
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid">null</param>
        /// <param name="commseqUuid">null</param>
        /// <param name="waitingRequest">WaitingRequest</param>
        /// <returns>Task of EmailStepWaitingResponse</returns>
        System.Threading.Tasks.Task<EmailStepWaitingResponse> GetEmailCommseqStepWaitingAsync (string storefrontOid, string commseqUuid, EmailStepWaitingRequest waitingRequest);

        /// <summary>
        /// Get email communication sequence customers waiting at each requested step
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid">null</param>
        /// <param name="commseqUuid">null</param>
        /// <param name="waitingRequest">WaitingRequest</param>
        /// <returns>Task of ApiResponse (EmailStepWaitingResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<EmailStepWaitingResponse>> GetEmailCommseqStepWaitingAsyncWithHttpInfo (string storefrontOid, string commseqUuid, EmailStepWaitingRequest waitingRequest);
        /// <summary>
        /// Get email commseqs
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid">null</param>
        /// <returns>Task of EmailCommseqsResponse</returns>
        System.Threading.Tasks.Task<EmailCommseqsResponse> GetEmailCommseqsAsync (string storefrontOid);

        /// <summary>
        /// Get email commseqs
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid">null</param>
        /// <returns>Task of ApiResponse (EmailCommseqsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<EmailCommseqsResponse>> GetEmailCommseqsAsyncWithHttpInfo (string storefrontOid);
        /// <summary>
        /// Get email dashboard activity
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid">null</param>
        /// <param name="lastRecords">null (optional)</param>
        /// <returns>Task of EmailDashboardActivityResponse</returns>
        System.Threading.Tasks.Task<EmailDashboardActivityResponse> GetEmailDashboardActivityAsync (string storefrontOid, int? lastRecords = null);

        /// <summary>
        /// Get email dashboard activity
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid">null</param>
        /// <param name="lastRecords">null (optional)</param>
        /// <returns>Task of ApiResponse (EmailDashboardActivityResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<EmailDashboardActivityResponse>> GetEmailDashboardActivityAsyncWithHttpInfo (string storefrontOid, int? lastRecords = null);
        /// <summary>
        /// Get dashboard stats
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid">null</param>
        /// <param name="days">null (optional)</param>
        /// <returns>Task of EmailDashboardStatsResponse</returns>
        System.Threading.Tasks.Task<EmailDashboardStatsResponse> GetEmailDashboardStatsAsync (string storefrontOid, int? days = null);

        /// <summary>
        /// Get dashboard stats
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid">null</param>
        /// <param name="days">null (optional)</param>
        /// <returns>Task of ApiResponse (EmailDashboardStatsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<EmailDashboardStatsResponse>> GetEmailDashboardStatsAsyncWithHttpInfo (string storefrontOid, int? days = null);
        /// <summary>
        /// Get email email
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid">null</param>
        /// <param name="commseqEmailUuid">null</param>
        /// <returns>Task of EmailCommseqEmailResponse</returns>
        System.Threading.Tasks.Task<EmailCommseqEmailResponse> GetEmailEmailAsync (string storefrontOid, string commseqEmailUuid);

        /// <summary>
        /// Get email email
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid">null</param>
        /// <param name="commseqEmailUuid">null</param>
        /// <returns>Task of ApiResponse (EmailCommseqEmailResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<EmailCommseqEmailResponse>> GetEmailEmailAsyncWithHttpInfo (string storefrontOid, string commseqEmailUuid);
        /// <summary>
        /// Get email emails
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid">null</param>
        /// <returns>Task of EmailCommseqEmailsResponse</returns>
        System.Threading.Tasks.Task<EmailCommseqEmailsResponse> GetEmailEmailsAsync (string storefrontOid);

        /// <summary>
        /// Get email emails
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid">null</param>
        /// <returns>Task of ApiResponse (EmailCommseqEmailsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<EmailCommseqEmailsResponse>> GetEmailEmailsAsyncWithHttpInfo (string storefrontOid);
        /// <summary>
        /// Get email emails multiple
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid">null</param>
        /// <param name="emailCommseqEmailsRequest">Request of email uuids</param>
        /// <returns>Task of EmailCommseqEmailsResponse</returns>
        System.Threading.Tasks.Task<EmailCommseqEmailsResponse> GetEmailEmailsMultipleAsync (string storefrontOid, EmailCommseqEmailsRequest emailCommseqEmailsRequest);

        /// <summary>
        /// Get email emails multiple
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid">null</param>
        /// <param name="emailCommseqEmailsRequest">Request of email uuids</param>
        /// <returns>Task of ApiResponse (EmailCommseqEmailsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<EmailCommseqEmailsResponse>> GetEmailEmailsMultipleAsyncWithHttpInfo (string storefrontOid, EmailCommseqEmailsRequest emailCommseqEmailsRequest);
        /// <summary>
        /// Get email flow
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid">null</param>
        /// <param name="emailFlowUuid">null</param>
        /// <returns>Task of EmailFlowResponse</returns>
        System.Threading.Tasks.Task<EmailFlowResponse> GetEmailFlowAsync (string storefrontOid, string emailFlowUuid);

        /// <summary>
        /// Get email flow
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid">null</param>
        /// <param name="emailFlowUuid">null</param>
        /// <returns>Task of ApiResponse (EmailFlowResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<EmailFlowResponse>> GetEmailFlowAsyncWithHttpInfo (string storefrontOid, string emailFlowUuid);
        /// <summary>
        /// Get email flows
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid">null</param>
        /// <returns>Task of EmailFlowsResponse</returns>
        System.Threading.Tasks.Task<EmailFlowsResponse> GetEmailFlowsAsync (string storefrontOid);

        /// <summary>
        /// Get email flows
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid">null</param>
        /// <returns>Task of ApiResponse (EmailFlowsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<EmailFlowsResponse>> GetEmailFlowsAsyncWithHttpInfo (string storefrontOid);
        /// <summary>
        /// Get email list
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid">null</param>
        /// <param name="emailListUuid">null</param>
        /// <returns>Task of EmailListResponse</returns>
        System.Threading.Tasks.Task<EmailListResponse> GetEmailListAsync (string storefrontOid, string emailListUuid);

        /// <summary>
        /// Get email list
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid">null</param>
        /// <param name="emailListUuid">null</param>
        /// <returns>Task of ApiResponse (EmailListResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<EmailListResponse>> GetEmailListAsyncWithHttpInfo (string storefrontOid, string emailListUuid);
        /// <summary>
        /// Get email list customers
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid">null</param>
        /// <param name="emailListUuid">null</param>
        /// <param name="emailCustomerUuid">null</param>
        /// <returns>Task of EmailCustomerEditorUrlResponse</returns>
        System.Threading.Tasks.Task<EmailCustomerEditorUrlResponse> GetEmailListCustomerEditorUrlAsync (string storefrontOid, string emailListUuid, string emailCustomerUuid);

        /// <summary>
        /// Get email list customers
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid">null</param>
        /// <param name="emailListUuid">null</param>
        /// <param name="emailCustomerUuid">null</param>
        /// <returns>Task of ApiResponse (EmailCustomerEditorUrlResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<EmailCustomerEditorUrlResponse>> GetEmailListCustomerEditorUrlAsyncWithHttpInfo (string storefrontOid, string emailListUuid, string emailCustomerUuid);
        /// <summary>
        /// Get email list customers
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid">null</param>
        /// <param name="emailListUuid">null</param>
        /// <param name="pageNumber">null (optional)</param>
        /// <param name="pageSize">null (optional)</param>
        /// <returns>Task of EmailListCustomersResponse</returns>
        System.Threading.Tasks.Task<EmailListCustomersResponse> GetEmailListCustomersAsync (string storefrontOid, string emailListUuid, int? pageNumber = null, int? pageSize = null);

        /// <summary>
        /// Get email list customers
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid">null</param>
        /// <param name="emailListUuid">null</param>
        /// <param name="pageNumber">null (optional)</param>
        /// <param name="pageSize">null (optional)</param>
        /// <returns>Task of ApiResponse (EmailListCustomersResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<EmailListCustomersResponse>> GetEmailListCustomersAsyncWithHttpInfo (string storefrontOid, string emailListUuid, int? pageNumber = null, int? pageSize = null);
        /// <summary>
        /// Get email lists
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid">null</param>
        /// <returns>Task of EmailListsResponse</returns>
        System.Threading.Tasks.Task<EmailListsResponse> GetEmailListsAsync (string storefrontOid);

        /// <summary>
        /// Get email lists
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid">null</param>
        /// <returns>Task of ApiResponse (EmailListsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<EmailListsResponse>> GetEmailListsAsyncWithHttpInfo (string storefrontOid);
        /// <summary>
        /// Get email segment
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid">null</param>
        /// <param name="emailSegmentUuid">null</param>
        /// <returns>Task of EmailSegmentResponse</returns>
        System.Threading.Tasks.Task<EmailSegmentResponse> GetEmailSegmentAsync (string storefrontOid, string emailSegmentUuid);

        /// <summary>
        /// Get email segment
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid">null</param>
        /// <param name="emailSegmentUuid">null</param>
        /// <returns>Task of ApiResponse (EmailSegmentResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<EmailSegmentResponse>> GetEmailSegmentAsyncWithHttpInfo (string storefrontOid, string emailSegmentUuid);
        /// <summary>
        /// Get email segment customers editor URL
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid">null</param>
        /// <param name="emailSegmentUuid">null</param>
        /// <param name="emailCustomerUuid">null</param>
        /// <returns>Task of EmailCustomerEditorUrlResponse</returns>
        System.Threading.Tasks.Task<EmailCustomerEditorUrlResponse> GetEmailSegmentCustomerEditorUrlAsync (string storefrontOid, string emailSegmentUuid, string emailCustomerUuid);

        /// <summary>
        /// Get email segment customers editor URL
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid">null</param>
        /// <param name="emailSegmentUuid">null</param>
        /// <param name="emailCustomerUuid">null</param>
        /// <returns>Task of ApiResponse (EmailCustomerEditorUrlResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<EmailCustomerEditorUrlResponse>> GetEmailSegmentCustomerEditorUrlAsyncWithHttpInfo (string storefrontOid, string emailSegmentUuid, string emailCustomerUuid);
        /// <summary>
        /// Get email segment customers
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid">null</param>
        /// <param name="emailSegmentUuid">null</param>
        /// <param name="pageNumber">null (optional)</param>
        /// <param name="pageSize">null (optional)</param>
        /// <returns>Task of EmailSegmentCustomersResponse</returns>
        System.Threading.Tasks.Task<EmailSegmentCustomersResponse> GetEmailSegmentCustomersAsync (string storefrontOid, string emailSegmentUuid, int? pageNumber = null, int? pageSize = null);

        /// <summary>
        /// Get email segment customers
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid">null</param>
        /// <param name="emailSegmentUuid">null</param>
        /// <param name="pageNumber">null (optional)</param>
        /// <param name="pageSize">null (optional)</param>
        /// <returns>Task of ApiResponse (EmailSegmentCustomersResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<EmailSegmentCustomersResponse>> GetEmailSegmentCustomersAsyncWithHttpInfo (string storefrontOid, string emailSegmentUuid, int? pageNumber = null, int? pageSize = null);
        /// <summary>
        /// Get email segments
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid">null</param>
        /// <returns>Task of EmailSegmentsResponse</returns>
        System.Threading.Tasks.Task<EmailSegmentsResponse> GetEmailSegmentsAsync (string storefrontOid);

        /// <summary>
        /// Get email segments
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid">null</param>
        /// <returns>Task of ApiResponse (EmailSegmentsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<EmailSegmentsResponse>> GetEmailSegmentsAsyncWithHttpInfo (string storefrontOid);
        /// <summary>
        /// Get email sending domain
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="domain">null</param>
        /// <returns>Task of EmailSendingDomainResponse</returns>
        System.Threading.Tasks.Task<EmailSendingDomainResponse> GetEmailSendingDomainAsync (string domain);

        /// <summary>
        /// Get email sending domain
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="domain">null</param>
        /// <returns>Task of ApiResponse (EmailSendingDomainResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<EmailSendingDomainResponse>> GetEmailSendingDomainAsyncWithHttpInfo (string domain);
        /// <summary>
        /// Get email sending domain status
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="domain">null</param>
        /// <returns>Task of EmailSendingDomainResponse</returns>
        System.Threading.Tasks.Task<EmailSendingDomainResponse> GetEmailSendingDomainStatusAsync (string domain);

        /// <summary>
        /// Get email sending domain status
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="domain">null</param>
        /// <returns>Task of ApiResponse (EmailSendingDomainResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<EmailSendingDomainResponse>> GetEmailSendingDomainStatusAsyncWithHttpInfo (string domain);
        /// <summary>
        /// Get email sending domains
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of EmailSendingDomainsResponse</returns>
        System.Threading.Tasks.Task<EmailSendingDomainsResponse> GetEmailSendingDomainsAsync ();

        /// <summary>
        /// Get email sending domains
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (EmailSendingDomainsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<EmailSendingDomainsResponse>> GetEmailSendingDomainsAsyncWithHttpInfo ();
        /// <summary>
        /// Get email template
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid">null</param>
        /// <param name="emailTemplateOid">null</param>
        /// <returns>Task of EmailTemplate</returns>
        System.Threading.Tasks.Task<EmailTemplate> GetEmailTemplateAsync (string storefrontOid, int? emailTemplateOid);

        /// <summary>
        /// Get email template
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid">null</param>
        /// <param name="emailTemplateOid">null</param>
        /// <returns>Task of ApiResponse (EmailTemplate)</returns>
        System.Threading.Tasks.Task<ApiResponse<EmailTemplate>> GetEmailTemplateAsyncWithHttpInfo (string storefrontOid, int? emailTemplateOid);
        /// <summary>
        /// Get email templates
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid">null</param>
        /// <param name="triggerType">null (optional)</param>
        /// <returns>Task of EmailTemplatesResponse</returns>
        System.Threading.Tasks.Task<EmailTemplatesResponse> GetEmailTemplatesAsync (string storefrontOid, string triggerType = null);

        /// <summary>
        /// Get email templates
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid">null</param>
        /// <param name="triggerType">null (optional)</param>
        /// <returns>Task of ApiResponse (EmailTemplatesResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<EmailTemplatesResponse>> GetEmailTemplatesAsyncWithHttpInfo (string storefrontOid, string triggerType = null);
        /// <summary>
        /// Get a list of third party email providers
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid">null</param>
        /// <returns>Task of EmailThirdPartyProvidersResponse</returns>
        System.Threading.Tasks.Task<EmailThirdPartyProvidersResponse> GetEmailThirdPartyProvidersAsync (string storefrontOid);

        /// <summary>
        /// Get a list of third party email providers
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid">null</param>
        /// <returns>Task of ApiResponse (EmailThirdPartyProvidersResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<EmailThirdPartyProvidersResponse>> GetEmailThirdPartyProvidersAsyncWithHttpInfo (string storefrontOid);
        /// <summary>
        /// Get experiments
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid">null</param>
        /// <returns>Task of ExperimentsResponse</returns>
        System.Threading.Tasks.Task<ExperimentsResponse> GetExperimentsAsync (string storefrontOid);

        /// <summary>
        /// Get experiments
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid">null</param>
        /// <returns>Task of ApiResponse (ExperimentsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ExperimentsResponse>> GetExperimentsAsyncWithHttpInfo (string storefrontOid);
        /// <summary>
        /// Get histogram property names
        /// </summary>
        /// <remarks>
        /// Obtain a list of property names for a given property type 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid">null</param>
        /// <param name="propertyType">null (optional)</param>
        /// <returns>Task of EmailHistogramPropertyNamesResponse</returns>
        System.Threading.Tasks.Task<EmailHistogramPropertyNamesResponse> GetHistogramPropertyNamesAsync (string storefrontOid, string propertyType = null);

        /// <summary>
        /// Get histogram property names
        /// </summary>
        /// <remarks>
        /// Obtain a list of property names for a given property type 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid">null</param>
        /// <param name="propertyType">null (optional)</param>
        /// <returns>Task of ApiResponse (EmailHistogramPropertyNamesResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<EmailHistogramPropertyNamesResponse>> GetHistogramPropertyNamesAsyncWithHttpInfo (string storefrontOid, string propertyType = null);
        /// <summary>
        /// Get histogram property values
        /// </summary>
        /// <remarks>
        /// Obtain a list of property values for a given property name and type 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid">null</param>
        /// <param name="propertyName">null (optional)</param>
        /// <param name="propertyType">null (optional)</param>
        /// <param name="limit">null (optional)</param>
        /// <returns>Task of EmailHistogramPropertyValuesResponse</returns>
        System.Threading.Tasks.Task<EmailHistogramPropertyValuesResponse> GetHistogramPropertyValuesAsync (string storefrontOid, string propertyName = null, string propertyType = null, int? limit = null);

        /// <summary>
        /// Get histogram property values
        /// </summary>
        /// <remarks>
        /// Obtain a list of property values for a given property name and type 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid">null</param>
        /// <param name="propertyName">null (optional)</param>
        /// <param name="propertyType">null (optional)</param>
        /// <param name="limit">null (optional)</param>
        /// <returns>Task of ApiResponse (EmailHistogramPropertyValuesResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<EmailHistogramPropertyValuesResponse>> GetHistogramPropertyValuesAsyncWithHttpInfo (string storefrontOid, string propertyName = null, string propertyType = null, int? limit = null);
        /// <summary>
        /// Import a third party provider list
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid">null</param>
        /// <param name="importRequest">lists to import</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ImportEmailThirdPartyProviderListAsync (string storefrontOid, EmailThirdPartyListImportRequest importRequest);

        /// <summary>
        /// Import a third party provider list
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid">null</param>
        /// <param name="importRequest">lists to import</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ImportEmailThirdPartyProviderListAsyncWithHttpInfo (string storefrontOid, EmailThirdPartyListImportRequest importRequest);
        /// <summary>
        /// Insert email campaign
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid">null</param>
        /// <param name="emailCampaign">Email campaign</param>
        /// <returns>Task of EmailCampaignResponse</returns>
        System.Threading.Tasks.Task<EmailCampaignResponse> InsertEmailCampaignAsync (string storefrontOid, EmailCampaign emailCampaign);

        /// <summary>
        /// Insert email campaign
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid">null</param>
        /// <param name="emailCampaign">Email campaign</param>
        /// <returns>Task of ApiResponse (EmailCampaignResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<EmailCampaignResponse>> InsertEmailCampaignAsyncWithHttpInfo (string storefrontOid, EmailCampaign emailCampaign);
        /// <summary>
        /// Insert email commseq
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid">null</param>
        /// <param name="emailCommseq">Email commseq</param>
        /// <returns>Task of EmailCommseqResponse</returns>
        System.Threading.Tasks.Task<EmailCommseqResponse> InsertEmailCommseqAsync (string storefrontOid, EmailCommseq emailCommseq);

        /// <summary>
        /// Insert email commseq
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid">null</param>
        /// <param name="emailCommseq">Email commseq</param>
        /// <returns>Task of ApiResponse (EmailCommseqResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<EmailCommseqResponse>> InsertEmailCommseqAsyncWithHttpInfo (string storefrontOid, EmailCommseq emailCommseq);
        /// <summary>
        /// Insert email email
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid">null</param>
        /// <param name="emailCommseqEmail">Email email</param>
        /// <returns>Task of EmailCommseqEmailResponse</returns>
        System.Threading.Tasks.Task<EmailCommseqEmailResponse> InsertEmailEmailAsync (string storefrontOid, EmailCommseqEmail emailCommseqEmail);

        /// <summary>
        /// Insert email email
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid">null</param>
        /// <param name="emailCommseqEmail">Email email</param>
        /// <returns>Task of ApiResponse (EmailCommseqEmailResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<EmailCommseqEmailResponse>> InsertEmailEmailAsyncWithHttpInfo (string storefrontOid, EmailCommseqEmail emailCommseqEmail);
        /// <summary>
        /// Insert email flow
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid">null</param>
        /// <param name="emailFlow">Email flow</param>
        /// <returns>Task of EmailFlowResponse</returns>
        System.Threading.Tasks.Task<EmailFlowResponse> InsertEmailFlowAsync (string storefrontOid, EmailFlow emailFlow);

        /// <summary>
        /// Insert email flow
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid">null</param>
        /// <param name="emailFlow">Email flow</param>
        /// <returns>Task of ApiResponse (EmailFlowResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<EmailFlowResponse>> InsertEmailFlowAsyncWithHttpInfo (string storefrontOid, EmailFlow emailFlow);
        /// <summary>
        /// Insert email list
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid">null</param>
        /// <param name="emailList">Email list</param>
        /// <returns>Task of EmailListResponse</returns>
        System.Threading.Tasks.Task<EmailListResponse> InsertEmailListAsync (string storefrontOid, EmailList emailList);

        /// <summary>
        /// Insert email list
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid">null</param>
        /// <param name="emailList">Email list</param>
        /// <returns>Task of ApiResponse (EmailListResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<EmailListResponse>> InsertEmailListAsyncWithHttpInfo (string storefrontOid, EmailList emailList);
        /// <summary>
        /// Insert email segment
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid">null</param>
        /// <param name="emailSegment">Email segment</param>
        /// <returns>Task of EmailSegmentResponse</returns>
        System.Threading.Tasks.Task<EmailSegmentResponse> InsertEmailSegmentAsync (string storefrontOid, EmailSegment emailSegment);

        /// <summary>
        /// Insert email segment
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid">null</param>
        /// <param name="emailSegment">Email segment</param>
        /// <returns>Task of ApiResponse (EmailSegmentResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<EmailSegmentResponse>> InsertEmailSegmentAsyncWithHttpInfo (string storefrontOid, EmailSegment emailSegment);
        /// <summary>
        /// Prepare download of email segment
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid">null</param>
        /// <param name="emailSegmentUuid">null</param>
        /// <returns>Task of EmailSegmentDownloadPrepareResponse</returns>
        System.Threading.Tasks.Task<EmailSegmentDownloadPrepareResponse> PrepareDownloadEmailSegmentAsync (string storefrontOid, string emailSegmentUuid);

        /// <summary>
        /// Prepare download of email segment
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid">null</param>
        /// <param name="emailSegmentUuid">null</param>
        /// <returns>Task of ApiResponse (EmailSegmentDownloadPrepareResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<EmailSegmentDownloadPrepareResponse>> PrepareDownloadEmailSegmentAsyncWithHttpInfo (string storefrontOid, string emailSegmentUuid);
        /// <summary>
        /// Searches for all matching values
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="category">null (optional)</param>
        /// <param name="matches">null (optional)</param>
        /// <param name="maxHits">null (optional)</param>
        /// <returns>Task of LookupResponse</returns>
        System.Threading.Tasks.Task<LookupResponse> SearchAsync (string category = null, string matches = null, int? maxHits = null);

        /// <summary>
        /// Searches for all matching values
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="category">null (optional)</param>
        /// <param name="matches">null (optional)</param>
        /// <param name="maxHits">null (optional)</param>
        /// <returns>Task of ApiResponse (LookupResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<LookupResponse>> SearchAsyncWithHttpInfo (string category = null, string matches = null, int? maxHits = null);
        /// <summary>
        /// Search email list customers
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid">null</param>
        /// <param name="emailListUuid">null</param>
        /// <param name="startsWith">null (optional)</param>
        /// <returns>Task of EmailListCustomersResponse</returns>
        System.Threading.Tasks.Task<EmailListCustomersResponse> SearchEmailListCustomersAsync (string storefrontOid, string emailListUuid, string startsWith = null);

        /// <summary>
        /// Search email list customers
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid">null</param>
        /// <param name="emailListUuid">null</param>
        /// <param name="startsWith">null (optional)</param>
        /// <returns>Task of ApiResponse (EmailListCustomersResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<EmailListCustomersResponse>> SearchEmailListCustomersAsyncWithHttpInfo (string storefrontOid, string emailListUuid, string startsWith = null);
        /// <summary>
        /// Search email segment customers
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid">null</param>
        /// <param name="emailSegmentUuid">null</param>
        /// <param name="startsWith">null (optional)</param>
        /// <returns>Task of EmailSegmentCustomersResponse</returns>
        System.Threading.Tasks.Task<EmailSegmentCustomersResponse> SearchEmailSegmentCustomersAsync (string storefrontOid, string emailSegmentUuid, string startsWith = null);

        /// <summary>
        /// Search email segment customers
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid">null</param>
        /// <param name="emailSegmentUuid">null</param>
        /// <param name="startsWith">null (optional)</param>
        /// <returns>Task of ApiResponse (EmailSegmentCustomersResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<EmailSegmentCustomersResponse>> SearchEmailSegmentCustomersAsyncWithHttpInfo (string storefrontOid, string emailSegmentUuid, string startsWith = null);
        /// <summary>
        /// Start email campaign
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid">null</param>
        /// <param name="emailCampaignUuid">null</param>
        /// <returns>Task of BaseResponse</returns>
        System.Threading.Tasks.Task<BaseResponse> StartEmailCampaignAsync (string storefrontOid, string emailCampaignUuid);

        /// <summary>
        /// Start email campaign
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid">null</param>
        /// <param name="emailCampaignUuid">null</param>
        /// <returns>Task of ApiResponse (BaseResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<BaseResponse>> StartEmailCampaignAsyncWithHttpInfo (string storefrontOid, string emailCampaignUuid);
        /// <summary>
        /// Subscribe customers to email list
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid">null</param>
        /// <param name="emailListUuid">null</param>
        /// <param name="customers">Customers</param>
        /// <returns>Task of EmailListSubscribeResponse</returns>
        System.Threading.Tasks.Task<EmailListSubscribeResponse> SubscribeToEmailListAsync (string storefrontOid, string emailListUuid, List<EmailCustomer> customers);

        /// <summary>
        /// Subscribe customers to email list
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid">null</param>
        /// <param name="emailListUuid">null</param>
        /// <param name="customers">Customers</param>
        /// <returns>Task of ApiResponse (EmailListSubscribeResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<EmailListSubscribeResponse>> SubscribeToEmailListAsyncWithHttpInfo (string storefrontOid, string emailListUuid, List<EmailCustomer> customers);
        /// <summary>
        /// Update email campaign
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid">null</param>
        /// <param name="emailCampaignUuid">null</param>
        /// <param name="emailCampaign">Email campaign</param>
        /// <returns>Task of EmailCampaignResponse</returns>
        System.Threading.Tasks.Task<EmailCampaignResponse> UpdateEmailCampaignAsync (string storefrontOid, string emailCampaignUuid, EmailCampaign emailCampaign);

        /// <summary>
        /// Update email campaign
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid">null</param>
        /// <param name="emailCampaignUuid">null</param>
        /// <param name="emailCampaign">Email campaign</param>
        /// <returns>Task of ApiResponse (EmailCampaignResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<EmailCampaignResponse>> UpdateEmailCampaignAsyncWithHttpInfo (string storefrontOid, string emailCampaignUuid, EmailCampaign emailCampaign);
        /// <summary>
        /// Update email commseq
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid">null</param>
        /// <param name="commseqUuid">null</param>
        /// <param name="emailCommseq">Email commseq</param>
        /// <returns>Task of EmailCommseqResponse</returns>
        System.Threading.Tasks.Task<EmailCommseqResponse> UpdateEmailCommseqAsync (string storefrontOid, string commseqUuid, EmailCommseq emailCommseq);

        /// <summary>
        /// Update email commseq
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid">null</param>
        /// <param name="commseqUuid">null</param>
        /// <param name="emailCommseq">Email commseq</param>
        /// <returns>Task of ApiResponse (EmailCommseqResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<EmailCommseqResponse>> UpdateEmailCommseqAsyncWithHttpInfo (string storefrontOid, string commseqUuid, EmailCommseq emailCommseq);
        /// <summary>
        /// Update email email
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid">null</param>
        /// <param name="commseqEmailUuid">null</param>
        /// <param name="emailCommseqEmail">Email commseq email</param>
        /// <returns>Task of EmailCommseqEmailResponse</returns>
        System.Threading.Tasks.Task<EmailCommseqEmailResponse> UpdateEmailEmailAsync (string storefrontOid, string commseqEmailUuid, EmailCommseqEmail emailCommseqEmail);

        /// <summary>
        /// Update email email
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid">null</param>
        /// <param name="commseqEmailUuid">null</param>
        /// <param name="emailCommseqEmail">Email commseq email</param>
        /// <returns>Task of ApiResponse (EmailCommseqEmailResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<EmailCommseqEmailResponse>> UpdateEmailEmailAsyncWithHttpInfo (string storefrontOid, string commseqEmailUuid, EmailCommseqEmail emailCommseqEmail);
        /// <summary>
        /// Update email flow
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid">null</param>
        /// <param name="emailFlowUuid">null</param>
        /// <param name="emailFlow">Email flow</param>
        /// <returns>Task of EmailFlowResponse</returns>
        System.Threading.Tasks.Task<EmailFlowResponse> UpdateEmailFlowAsync (string storefrontOid, string emailFlowUuid, EmailFlow emailFlow);

        /// <summary>
        /// Update email flow
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid">null</param>
        /// <param name="emailFlowUuid">null</param>
        /// <param name="emailFlow">Email flow</param>
        /// <returns>Task of ApiResponse (EmailFlowResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<EmailFlowResponse>> UpdateEmailFlowAsyncWithHttpInfo (string storefrontOid, string emailFlowUuid, EmailFlow emailFlow);
        /// <summary>
        /// Update email list
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid">null</param>
        /// <param name="emailListUuid">null</param>
        /// <param name="emailList">Email list</param>
        /// <returns>Task of EmailListResponse</returns>
        System.Threading.Tasks.Task<EmailListResponse> UpdateEmailListAsync (string storefrontOid, string emailListUuid, EmailList emailList);

        /// <summary>
        /// Update email list
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid">null</param>
        /// <param name="emailListUuid">null</param>
        /// <param name="emailList">Email list</param>
        /// <returns>Task of ApiResponse (EmailListResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<EmailListResponse>> UpdateEmailListAsyncWithHttpInfo (string storefrontOid, string emailListUuid, EmailList emailList);
        /// <summary>
        /// Update email segment
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid">null</param>
        /// <param name="emailSegmentUuid">null</param>
        /// <param name="emailSegment">Email segment</param>
        /// <returns>Task of EmailSegmentResponse</returns>
        System.Threading.Tasks.Task<EmailSegmentResponse> UpdateEmailSegmentAsync (string storefrontOid, string emailSegmentUuid, EmailSegment emailSegment);

        /// <summary>
        /// Update email segment
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid">null</param>
        /// <param name="emailSegmentUuid">null</param>
        /// <param name="emailSegment">Email segment</param>
        /// <returns>Task of ApiResponse (EmailSegmentResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<EmailSegmentResponse>> UpdateEmailSegmentAsyncWithHttpInfo (string storefrontOid, string emailSegmentUuid, EmailSegment emailSegment);
        /// <summary>
        /// Update experiment
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid">null</param>
        /// <param name="storefrontExperimentOid">null</param>
        /// <param name="experiment">Experiment</param>
        /// <returns>Task of ExperimentResponse</returns>
        System.Threading.Tasks.Task<ExperimentResponse> UpdateExperimentAsync (string storefrontOid, int? storefrontExperimentOid, Experiment experiment);

        /// <summary>
        /// Update experiment
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid">null</param>
        /// <param name="storefrontExperimentOid">null</param>
        /// <param name="experiment">Experiment</param>
        /// <returns>Task of ApiResponse (ExperimentResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ExperimentResponse>> UpdateExperimentAsyncWithHttpInfo (string storefrontOid, int? storefrontExperimentOid, Experiment experiment);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class StorefrontApi : IStorefrontApi
    {
        private com.ultracart.admin.v2.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="StorefrontApi"/> class.
        /// </summary>
        /// <returns></returns>
        public StorefrontApi(String basePath)
        {
            this.Configuration = new Configuration { BasePath = basePath };

            ExceptionFactory = com.ultracart.admin.v2.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="StorefrontApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public StorefrontApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = com.ultracart.admin.v2.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public com.ultracart.admin.v2.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Archive email list 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid">null</param>
        /// <param name="emailListUuid">null</param>
        /// <returns>EmailListArchiveResponse</returns>
        public EmailListArchiveResponse ArchiveEmailList (string storefrontOid, string emailListUuid)
        {
             ApiResponse<EmailListArchiveResponse> localVarResponse = ArchiveEmailListWithHttpInfo(storefrontOid, emailListUuid);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Archive email list 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid">null</param>
        /// <param name="emailListUuid">null</param>
        /// <returns>ApiResponse of EmailListArchiveResponse</returns>
        public ApiResponse< EmailListArchiveResponse > ArchiveEmailListWithHttpInfo (string storefrontOid, string emailListUuid)
        {
            // verify the required parameter 'storefrontOid' is set
            if (storefrontOid == null)
                throw new ApiException(400, "Missing required parameter 'storefrontOid' when calling StorefrontApi->ArchiveEmailList");
            // verify the required parameter 'emailListUuid' is set
            if (emailListUuid == null)
                throw new ApiException(400, "Missing required parameter 'emailListUuid' when calling StorefrontApi->ArchiveEmailList");

            var localVarPath = "/storefront/{storefront_oid}/email/lists/{email_list_uuid}/archive";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (storefrontOid != null) localVarPathParams.Add("storefront_oid", Configuration.ApiClient.ParameterToString(storefrontOid)); // path parameter
            if (emailListUuid != null) localVarPathParams.Add("email_list_uuid", Configuration.ApiClient.ParameterToString(emailListUuid)); // path parameter

            // authentication (ultraCartBrowserApiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key")))
            {
                localVarHeaderParams["x-ultracart-browser-key"] = Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key");
            }
            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ArchiveEmailList", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EmailListArchiveResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (EmailListArchiveResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(EmailListArchiveResponse)));
        }

        /// <summary>
        /// Archive email list 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid">null</param>
        /// <param name="emailListUuid">null</param>
        /// <returns>Task of EmailListArchiveResponse</returns>
        public async System.Threading.Tasks.Task<EmailListArchiveResponse> ArchiveEmailListAsync (string storefrontOid, string emailListUuid)
        {
             ApiResponse<EmailListArchiveResponse> localVarResponse = await ArchiveEmailListAsyncWithHttpInfo(storefrontOid, emailListUuid);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Archive email list 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid">null</param>
        /// <param name="emailListUuid">null</param>
        /// <returns>Task of ApiResponse (EmailListArchiveResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<EmailListArchiveResponse>> ArchiveEmailListAsyncWithHttpInfo (string storefrontOid, string emailListUuid)
        {
            // verify the required parameter 'storefrontOid' is set
            if (storefrontOid == null)
                throw new ApiException(400, "Missing required parameter 'storefrontOid' when calling StorefrontApi->ArchiveEmailList");
            // verify the required parameter 'emailListUuid' is set
            if (emailListUuid == null)
                throw new ApiException(400, "Missing required parameter 'emailListUuid' when calling StorefrontApi->ArchiveEmailList");

            var localVarPath = "/storefront/{storefront_oid}/email/lists/{email_list_uuid}/archive";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (storefrontOid != null) localVarPathParams.Add("storefront_oid", Configuration.ApiClient.ParameterToString(storefrontOid)); // path parameter
            if (emailListUuid != null) localVarPathParams.Add("email_list_uuid", Configuration.ApiClient.ParameterToString(emailListUuid)); // path parameter

            // authentication (ultraCartBrowserApiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key")))
            {
                localVarHeaderParams["x-ultracart-browser-key"] = Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key");
            }
            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ArchiveEmailList", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EmailListArchiveResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (EmailListArchiveResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(EmailListArchiveResponse)));
        }

        /// <summary>
        /// Archive email segment 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid">null</param>
        /// <param name="emailSegmentUuid">null</param>
        /// <returns>EmailSegmentArchiveResponse</returns>
        public EmailSegmentArchiveResponse ArchiveEmailSegment (string storefrontOid, string emailSegmentUuid)
        {
             ApiResponse<EmailSegmentArchiveResponse> localVarResponse = ArchiveEmailSegmentWithHttpInfo(storefrontOid, emailSegmentUuid);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Archive email segment 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid">null</param>
        /// <param name="emailSegmentUuid">null</param>
        /// <returns>ApiResponse of EmailSegmentArchiveResponse</returns>
        public ApiResponse< EmailSegmentArchiveResponse > ArchiveEmailSegmentWithHttpInfo (string storefrontOid, string emailSegmentUuid)
        {
            // verify the required parameter 'storefrontOid' is set
            if (storefrontOid == null)
                throw new ApiException(400, "Missing required parameter 'storefrontOid' when calling StorefrontApi->ArchiveEmailSegment");
            // verify the required parameter 'emailSegmentUuid' is set
            if (emailSegmentUuid == null)
                throw new ApiException(400, "Missing required parameter 'emailSegmentUuid' when calling StorefrontApi->ArchiveEmailSegment");

            var localVarPath = "/storefront/{storefront_oid}/email/segments/{email_segment_uuid}/archive";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (storefrontOid != null) localVarPathParams.Add("storefront_oid", Configuration.ApiClient.ParameterToString(storefrontOid)); // path parameter
            if (emailSegmentUuid != null) localVarPathParams.Add("email_segment_uuid", Configuration.ApiClient.ParameterToString(emailSegmentUuid)); // path parameter

            // authentication (ultraCartBrowserApiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key")))
            {
                localVarHeaderParams["x-ultracart-browser-key"] = Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key");
            }
            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ArchiveEmailSegment", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EmailSegmentArchiveResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (EmailSegmentArchiveResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(EmailSegmentArchiveResponse)));
        }

        /// <summary>
        /// Archive email segment 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid">null</param>
        /// <param name="emailSegmentUuid">null</param>
        /// <returns>Task of EmailSegmentArchiveResponse</returns>
        public async System.Threading.Tasks.Task<EmailSegmentArchiveResponse> ArchiveEmailSegmentAsync (string storefrontOid, string emailSegmentUuid)
        {
             ApiResponse<EmailSegmentArchiveResponse> localVarResponse = await ArchiveEmailSegmentAsyncWithHttpInfo(storefrontOid, emailSegmentUuid);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Archive email segment 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid">null</param>
        /// <param name="emailSegmentUuid">null</param>
        /// <returns>Task of ApiResponse (EmailSegmentArchiveResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<EmailSegmentArchiveResponse>> ArchiveEmailSegmentAsyncWithHttpInfo (string storefrontOid, string emailSegmentUuid)
        {
            // verify the required parameter 'storefrontOid' is set
            if (storefrontOid == null)
                throw new ApiException(400, "Missing required parameter 'storefrontOid' when calling StorefrontApi->ArchiveEmailSegment");
            // verify the required parameter 'emailSegmentUuid' is set
            if (emailSegmentUuid == null)
                throw new ApiException(400, "Missing required parameter 'emailSegmentUuid' when calling StorefrontApi->ArchiveEmailSegment");

            var localVarPath = "/storefront/{storefront_oid}/email/segments/{email_segment_uuid}/archive";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (storefrontOid != null) localVarPathParams.Add("storefront_oid", Configuration.ApiClient.ParameterToString(storefrontOid)); // path parameter
            if (emailSegmentUuid != null) localVarPathParams.Add("email_segment_uuid", Configuration.ApiClient.ParameterToString(emailSegmentUuid)); // path parameter

            // authentication (ultraCartBrowserApiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key")))
            {
                localVarHeaderParams["x-ultracart-browser-key"] = Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key");
            }
            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ArchiveEmailSegment", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EmailSegmentArchiveResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (EmailSegmentArchiveResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(EmailSegmentArchiveResponse)));
        }

        /// <summary>
        /// Check download of email segment 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid">null</param>
        /// <param name="emailSegmentUuid">null</param>
        /// <param name="emailSegmentRebuildUuid">null</param>
        /// <returns>EmailSegmentDownloadPrepareResponse</returns>
        public EmailSegmentDownloadPrepareResponse CheckDownloadEmailSegment (string storefrontOid, string emailSegmentUuid, string emailSegmentRebuildUuid)
        {
             ApiResponse<EmailSegmentDownloadPrepareResponse> localVarResponse = CheckDownloadEmailSegmentWithHttpInfo(storefrontOid, emailSegmentUuid, emailSegmentRebuildUuid);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Check download of email segment 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid">null</param>
        /// <param name="emailSegmentUuid">null</param>
        /// <param name="emailSegmentRebuildUuid">null</param>
        /// <returns>ApiResponse of EmailSegmentDownloadPrepareResponse</returns>
        public ApiResponse< EmailSegmentDownloadPrepareResponse > CheckDownloadEmailSegmentWithHttpInfo (string storefrontOid, string emailSegmentUuid, string emailSegmentRebuildUuid)
        {
            // verify the required parameter 'storefrontOid' is set
            if (storefrontOid == null)
                throw new ApiException(400, "Missing required parameter 'storefrontOid' when calling StorefrontApi->CheckDownloadEmailSegment");
            // verify the required parameter 'emailSegmentUuid' is set
            if (emailSegmentUuid == null)
                throw new ApiException(400, "Missing required parameter 'emailSegmentUuid' when calling StorefrontApi->CheckDownloadEmailSegment");
            // verify the required parameter 'emailSegmentRebuildUuid' is set
            if (emailSegmentRebuildUuid == null)
                throw new ApiException(400, "Missing required parameter 'emailSegmentRebuildUuid' when calling StorefrontApi->CheckDownloadEmailSegment");

            var localVarPath = "/storefront/{storefront_oid}/email/segments/{email_segment_uuid}/downloadPrepare/{email_segment_rebuild_uuid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (storefrontOid != null) localVarPathParams.Add("storefront_oid", Configuration.ApiClient.ParameterToString(storefrontOid)); // path parameter
            if (emailSegmentUuid != null) localVarPathParams.Add("email_segment_uuid", Configuration.ApiClient.ParameterToString(emailSegmentUuid)); // path parameter
            if (emailSegmentRebuildUuid != null) localVarPathParams.Add("email_segment_rebuild_uuid", Configuration.ApiClient.ParameterToString(emailSegmentRebuildUuid)); // path parameter

            // authentication (ultraCartBrowserApiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key")))
            {
                localVarHeaderParams["x-ultracart-browser-key"] = Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key");
            }
            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CheckDownloadEmailSegment", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EmailSegmentDownloadPrepareResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (EmailSegmentDownloadPrepareResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(EmailSegmentDownloadPrepareResponse)));
        }

        /// <summary>
        /// Check download of email segment 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid">null</param>
        /// <param name="emailSegmentUuid">null</param>
        /// <param name="emailSegmentRebuildUuid">null</param>
        /// <returns>Task of EmailSegmentDownloadPrepareResponse</returns>
        public async System.Threading.Tasks.Task<EmailSegmentDownloadPrepareResponse> CheckDownloadEmailSegmentAsync (string storefrontOid, string emailSegmentUuid, string emailSegmentRebuildUuid)
        {
             ApiResponse<EmailSegmentDownloadPrepareResponse> localVarResponse = await CheckDownloadEmailSegmentAsyncWithHttpInfo(storefrontOid, emailSegmentUuid, emailSegmentRebuildUuid);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Check download of email segment 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid">null</param>
        /// <param name="emailSegmentUuid">null</param>
        /// <param name="emailSegmentRebuildUuid">null</param>
        /// <returns>Task of ApiResponse (EmailSegmentDownloadPrepareResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<EmailSegmentDownloadPrepareResponse>> CheckDownloadEmailSegmentAsyncWithHttpInfo (string storefrontOid, string emailSegmentUuid, string emailSegmentRebuildUuid)
        {
            // verify the required parameter 'storefrontOid' is set
            if (storefrontOid == null)
                throw new ApiException(400, "Missing required parameter 'storefrontOid' when calling StorefrontApi->CheckDownloadEmailSegment");
            // verify the required parameter 'emailSegmentUuid' is set
            if (emailSegmentUuid == null)
                throw new ApiException(400, "Missing required parameter 'emailSegmentUuid' when calling StorefrontApi->CheckDownloadEmailSegment");
            // verify the required parameter 'emailSegmentRebuildUuid' is set
            if (emailSegmentRebuildUuid == null)
                throw new ApiException(400, "Missing required parameter 'emailSegmentRebuildUuid' when calling StorefrontApi->CheckDownloadEmailSegment");

            var localVarPath = "/storefront/{storefront_oid}/email/segments/{email_segment_uuid}/downloadPrepare/{email_segment_rebuild_uuid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (storefrontOid != null) localVarPathParams.Add("storefront_oid", Configuration.ApiClient.ParameterToString(storefrontOid)); // path parameter
            if (emailSegmentUuid != null) localVarPathParams.Add("email_segment_uuid", Configuration.ApiClient.ParameterToString(emailSegmentUuid)); // path parameter
            if (emailSegmentRebuildUuid != null) localVarPathParams.Add("email_segment_rebuild_uuid", Configuration.ApiClient.ParameterToString(emailSegmentRebuildUuid)); // path parameter

            // authentication (ultraCartBrowserApiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key")))
            {
                localVarHeaderParams["x-ultracart-browser-key"] = Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key");
            }
            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CheckDownloadEmailSegment", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EmailSegmentDownloadPrepareResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (EmailSegmentDownloadPrepareResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(EmailSegmentDownloadPrepareResponse)));
        }

        /// <summary>
        /// Clone email campaign 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid">null</param>
        /// <param name="emailCampaignUuid">null</param>
        /// <returns>EmailCampaignResponse</returns>
        public EmailCampaignResponse CloneEmailCampaign (string storefrontOid, string emailCampaignUuid)
        {
             ApiResponse<EmailCampaignResponse> localVarResponse = CloneEmailCampaignWithHttpInfo(storefrontOid, emailCampaignUuid);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Clone email campaign 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid">null</param>
        /// <param name="emailCampaignUuid">null</param>
        /// <returns>ApiResponse of EmailCampaignResponse</returns>
        public ApiResponse< EmailCampaignResponse > CloneEmailCampaignWithHttpInfo (string storefrontOid, string emailCampaignUuid)
        {
            // verify the required parameter 'storefrontOid' is set
            if (storefrontOid == null)
                throw new ApiException(400, "Missing required parameter 'storefrontOid' when calling StorefrontApi->CloneEmailCampaign");
            // verify the required parameter 'emailCampaignUuid' is set
            if (emailCampaignUuid == null)
                throw new ApiException(400, "Missing required parameter 'emailCampaignUuid' when calling StorefrontApi->CloneEmailCampaign");

            var localVarPath = "/storefront/{storefront_oid}/email/campaigns/{email_campaign_uuid}/clone";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (storefrontOid != null) localVarPathParams.Add("storefront_oid", Configuration.ApiClient.ParameterToString(storefrontOid)); // path parameter
            if (emailCampaignUuid != null) localVarPathParams.Add("email_campaign_uuid", Configuration.ApiClient.ParameterToString(emailCampaignUuid)); // path parameter

            // authentication (ultraCartBrowserApiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key")))
            {
                localVarHeaderParams["x-ultracart-browser-key"] = Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key");
            }
            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CloneEmailCampaign", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EmailCampaignResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (EmailCampaignResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(EmailCampaignResponse)));
        }

        /// <summary>
        /// Clone email campaign 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid">null</param>
        /// <param name="emailCampaignUuid">null</param>
        /// <returns>Task of EmailCampaignResponse</returns>
        public async System.Threading.Tasks.Task<EmailCampaignResponse> CloneEmailCampaignAsync (string storefrontOid, string emailCampaignUuid)
        {
             ApiResponse<EmailCampaignResponse> localVarResponse = await CloneEmailCampaignAsyncWithHttpInfo(storefrontOid, emailCampaignUuid);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Clone email campaign 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid">null</param>
        /// <param name="emailCampaignUuid">null</param>
        /// <returns>Task of ApiResponse (EmailCampaignResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<EmailCampaignResponse>> CloneEmailCampaignAsyncWithHttpInfo (string storefrontOid, string emailCampaignUuid)
        {
            // verify the required parameter 'storefrontOid' is set
            if (storefrontOid == null)
                throw new ApiException(400, "Missing required parameter 'storefrontOid' when calling StorefrontApi->CloneEmailCampaign");
            // verify the required parameter 'emailCampaignUuid' is set
            if (emailCampaignUuid == null)
                throw new ApiException(400, "Missing required parameter 'emailCampaignUuid' when calling StorefrontApi->CloneEmailCampaign");

            var localVarPath = "/storefront/{storefront_oid}/email/campaigns/{email_campaign_uuid}/clone";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (storefrontOid != null) localVarPathParams.Add("storefront_oid", Configuration.ApiClient.ParameterToString(storefrontOid)); // path parameter
            if (emailCampaignUuid != null) localVarPathParams.Add("email_campaign_uuid", Configuration.ApiClient.ParameterToString(emailCampaignUuid)); // path parameter

            // authentication (ultraCartBrowserApiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key")))
            {
                localVarHeaderParams["x-ultracart-browser-key"] = Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key");
            }
            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CloneEmailCampaign", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EmailCampaignResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (EmailCampaignResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(EmailCampaignResponse)));
        }

        /// <summary>
        /// Clone email flow 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid">null</param>
        /// <param name="emailFlowUuid">null</param>
        /// <returns>EmailFlowResponse</returns>
        public EmailFlowResponse CloneEmailFlow (string storefrontOid, string emailFlowUuid)
        {
             ApiResponse<EmailFlowResponse> localVarResponse = CloneEmailFlowWithHttpInfo(storefrontOid, emailFlowUuid);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Clone email flow 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid">null</param>
        /// <param name="emailFlowUuid">null</param>
        /// <returns>ApiResponse of EmailFlowResponse</returns>
        public ApiResponse< EmailFlowResponse > CloneEmailFlowWithHttpInfo (string storefrontOid, string emailFlowUuid)
        {
            // verify the required parameter 'storefrontOid' is set
            if (storefrontOid == null)
                throw new ApiException(400, "Missing required parameter 'storefrontOid' when calling StorefrontApi->CloneEmailFlow");
            // verify the required parameter 'emailFlowUuid' is set
            if (emailFlowUuid == null)
                throw new ApiException(400, "Missing required parameter 'emailFlowUuid' when calling StorefrontApi->CloneEmailFlow");

            var localVarPath = "/storefront/{storefront_oid}/email/flows/{email_flow_uuid}/clone";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (storefrontOid != null) localVarPathParams.Add("storefront_oid", Configuration.ApiClient.ParameterToString(storefrontOid)); // path parameter
            if (emailFlowUuid != null) localVarPathParams.Add("email_flow_uuid", Configuration.ApiClient.ParameterToString(emailFlowUuid)); // path parameter

            // authentication (ultraCartBrowserApiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key")))
            {
                localVarHeaderParams["x-ultracart-browser-key"] = Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key");
            }
            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CloneEmailFlow", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EmailFlowResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (EmailFlowResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(EmailFlowResponse)));
        }

        /// <summary>
        /// Clone email flow 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid">null</param>
        /// <param name="emailFlowUuid">null</param>
        /// <returns>Task of EmailFlowResponse</returns>
        public async System.Threading.Tasks.Task<EmailFlowResponse> CloneEmailFlowAsync (string storefrontOid, string emailFlowUuid)
        {
             ApiResponse<EmailFlowResponse> localVarResponse = await CloneEmailFlowAsyncWithHttpInfo(storefrontOid, emailFlowUuid);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Clone email flow 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid">null</param>
        /// <param name="emailFlowUuid">null</param>
        /// <returns>Task of ApiResponse (EmailFlowResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<EmailFlowResponse>> CloneEmailFlowAsyncWithHttpInfo (string storefrontOid, string emailFlowUuid)
        {
            // verify the required parameter 'storefrontOid' is set
            if (storefrontOid == null)
                throw new ApiException(400, "Missing required parameter 'storefrontOid' when calling StorefrontApi->CloneEmailFlow");
            // verify the required parameter 'emailFlowUuid' is set
            if (emailFlowUuid == null)
                throw new ApiException(400, "Missing required parameter 'emailFlowUuid' when calling StorefrontApi->CloneEmailFlow");

            var localVarPath = "/storefront/{storefront_oid}/email/flows/{email_flow_uuid}/clone";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (storefrontOid != null) localVarPathParams.Add("storefront_oid", Configuration.ApiClient.ParameterToString(storefrontOid)); // path parameter
            if (emailFlowUuid != null) localVarPathParams.Add("email_flow_uuid", Configuration.ApiClient.ParameterToString(emailFlowUuid)); // path parameter

            // authentication (ultraCartBrowserApiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key")))
            {
                localVarHeaderParams["x-ultracart-browser-key"] = Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key");
            }
            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CloneEmailFlow", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EmailFlowResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (EmailFlowResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(EmailFlowResponse)));
        }

        /// <summary>
        /// Create email campaign 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="domain">null</param>
        /// <returns>EmailSendingDomainResponse</returns>
        public EmailSendingDomainResponse CreateEmailSendingDomain (string domain)
        {
             ApiResponse<EmailSendingDomainResponse> localVarResponse = CreateEmailSendingDomainWithHttpInfo(domain);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create email campaign 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="domain">null</param>
        /// <returns>ApiResponse of EmailSendingDomainResponse</returns>
        public ApiResponse< EmailSendingDomainResponse > CreateEmailSendingDomainWithHttpInfo (string domain)
        {
            // verify the required parameter 'domain' is set
            if (domain == null)
                throw new ApiException(400, "Missing required parameter 'domain' when calling StorefrontApi->CreateEmailSendingDomain");

            var localVarPath = "/storefront/email/sending_domains/{domain}/create";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (domain != null) localVarPathParams.Add("domain", Configuration.ApiClient.ParameterToString(domain)); // path parameter

            // authentication (ultraCartBrowserApiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key")))
            {
                localVarHeaderParams["x-ultracart-browser-key"] = Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key");
            }
            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateEmailSendingDomain", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EmailSendingDomainResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (EmailSendingDomainResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(EmailSendingDomainResponse)));
        }

        /// <summary>
        /// Create email campaign 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="domain">null</param>
        /// <returns>Task of EmailSendingDomainResponse</returns>
        public async System.Threading.Tasks.Task<EmailSendingDomainResponse> CreateEmailSendingDomainAsync (string domain)
        {
             ApiResponse<EmailSendingDomainResponse> localVarResponse = await CreateEmailSendingDomainAsyncWithHttpInfo(domain);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create email campaign 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="domain">null</param>
        /// <returns>Task of ApiResponse (EmailSendingDomainResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<EmailSendingDomainResponse>> CreateEmailSendingDomainAsyncWithHttpInfo (string domain)
        {
            // verify the required parameter 'domain' is set
            if (domain == null)
                throw new ApiException(400, "Missing required parameter 'domain' when calling StorefrontApi->CreateEmailSendingDomain");

            var localVarPath = "/storefront/email/sending_domains/{domain}/create";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (domain != null) localVarPathParams.Add("domain", Configuration.ApiClient.ParameterToString(domain)); // path parameter

            // authentication (ultraCartBrowserApiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key")))
            {
                localVarHeaderParams["x-ultracart-browser-key"] = Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key");
            }
            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateEmailSendingDomain", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EmailSendingDomainResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (EmailSendingDomainResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(EmailSendingDomainResponse)));
        }

        /// <summary>
        /// Delete email email 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid">null</param>
        /// <param name="commseqEmailUuid">null</param>
        /// <returns>BaseResponse</returns>
        public BaseResponse DeleteEmailEmail (string storefrontOid, string commseqEmailUuid)
        {
             ApiResponse<BaseResponse> localVarResponse = DeleteEmailEmailWithHttpInfo(storefrontOid, commseqEmailUuid);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Delete email email 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid">null</param>
        /// <param name="commseqEmailUuid">null</param>
        /// <returns>ApiResponse of BaseResponse</returns>
        public ApiResponse< BaseResponse > DeleteEmailEmailWithHttpInfo (string storefrontOid, string commseqEmailUuid)
        {
            // verify the required parameter 'storefrontOid' is set
            if (storefrontOid == null)
                throw new ApiException(400, "Missing required parameter 'storefrontOid' when calling StorefrontApi->DeleteEmailEmail");
            // verify the required parameter 'commseqEmailUuid' is set
            if (commseqEmailUuid == null)
                throw new ApiException(400, "Missing required parameter 'commseqEmailUuid' when calling StorefrontApi->DeleteEmailEmail");

            var localVarPath = "/storefront/{storefront_oid}/email/emails/{commseq_email_uuid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (storefrontOid != null) localVarPathParams.Add("storefront_oid", Configuration.ApiClient.ParameterToString(storefrontOid)); // path parameter
            if (commseqEmailUuid != null) localVarPathParams.Add("commseq_email_uuid", Configuration.ApiClient.ParameterToString(commseqEmailUuid)); // path parameter

            // authentication (ultraCartBrowserApiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key")))
            {
                localVarHeaderParams["x-ultracart-browser-key"] = Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key");
            }
            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteEmailEmail", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BaseResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (BaseResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(BaseResponse)));
        }

        /// <summary>
        /// Delete email email 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid">null</param>
        /// <param name="commseqEmailUuid">null</param>
        /// <returns>Task of BaseResponse</returns>
        public async System.Threading.Tasks.Task<BaseResponse> DeleteEmailEmailAsync (string storefrontOid, string commseqEmailUuid)
        {
             ApiResponse<BaseResponse> localVarResponse = await DeleteEmailEmailAsyncWithHttpInfo(storefrontOid, commseqEmailUuid);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Delete email email 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid">null</param>
        /// <param name="commseqEmailUuid">null</param>
        /// <returns>Task of ApiResponse (BaseResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<BaseResponse>> DeleteEmailEmailAsyncWithHttpInfo (string storefrontOid, string commseqEmailUuid)
        {
            // verify the required parameter 'storefrontOid' is set
            if (storefrontOid == null)
                throw new ApiException(400, "Missing required parameter 'storefrontOid' when calling StorefrontApi->DeleteEmailEmail");
            // verify the required parameter 'commseqEmailUuid' is set
            if (commseqEmailUuid == null)
                throw new ApiException(400, "Missing required parameter 'commseqEmailUuid' when calling StorefrontApi->DeleteEmailEmail");

            var localVarPath = "/storefront/{storefront_oid}/email/emails/{commseq_email_uuid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (storefrontOid != null) localVarPathParams.Add("storefront_oid", Configuration.ApiClient.ParameterToString(storefrontOid)); // path parameter
            if (commseqEmailUuid != null) localVarPathParams.Add("commseq_email_uuid", Configuration.ApiClient.ParameterToString(commseqEmailUuid)); // path parameter

            // authentication (ultraCartBrowserApiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key")))
            {
                localVarHeaderParams["x-ultracart-browser-key"] = Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key");
            }
            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteEmailEmail", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BaseResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (BaseResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(BaseResponse)));
        }

        /// <summary>
        /// Delete email list customer 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid">null</param>
        /// <param name="emailListUuid">null</param>
        /// <param name="emailCustomerUuid">null</param>
        /// <returns>BaseResponse</returns>
        public BaseResponse DeleteEmailListCustomer (string storefrontOid, string emailListUuid, string emailCustomerUuid)
        {
             ApiResponse<BaseResponse> localVarResponse = DeleteEmailListCustomerWithHttpInfo(storefrontOid, emailListUuid, emailCustomerUuid);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Delete email list customer 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid">null</param>
        /// <param name="emailListUuid">null</param>
        /// <param name="emailCustomerUuid">null</param>
        /// <returns>ApiResponse of BaseResponse</returns>
        public ApiResponse< BaseResponse > DeleteEmailListCustomerWithHttpInfo (string storefrontOid, string emailListUuid, string emailCustomerUuid)
        {
            // verify the required parameter 'storefrontOid' is set
            if (storefrontOid == null)
                throw new ApiException(400, "Missing required parameter 'storefrontOid' when calling StorefrontApi->DeleteEmailListCustomer");
            // verify the required parameter 'emailListUuid' is set
            if (emailListUuid == null)
                throw new ApiException(400, "Missing required parameter 'emailListUuid' when calling StorefrontApi->DeleteEmailListCustomer");
            // verify the required parameter 'emailCustomerUuid' is set
            if (emailCustomerUuid == null)
                throw new ApiException(400, "Missing required parameter 'emailCustomerUuid' when calling StorefrontApi->DeleteEmailListCustomer");

            var localVarPath = "/storefront/{storefront_oid}/email/lists/{email_list_uuid}/customers/{email_customer_uuid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (storefrontOid != null) localVarPathParams.Add("storefront_oid", Configuration.ApiClient.ParameterToString(storefrontOid)); // path parameter
            if (emailListUuid != null) localVarPathParams.Add("email_list_uuid", Configuration.ApiClient.ParameterToString(emailListUuid)); // path parameter
            if (emailCustomerUuid != null) localVarPathParams.Add("email_customer_uuid", Configuration.ApiClient.ParameterToString(emailCustomerUuid)); // path parameter

            // authentication (ultraCartBrowserApiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key")))
            {
                localVarHeaderParams["x-ultracart-browser-key"] = Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key");
            }
            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteEmailListCustomer", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BaseResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (BaseResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(BaseResponse)));
        }

        /// <summary>
        /// Delete email list customer 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid">null</param>
        /// <param name="emailListUuid">null</param>
        /// <param name="emailCustomerUuid">null</param>
        /// <returns>Task of BaseResponse</returns>
        public async System.Threading.Tasks.Task<BaseResponse> DeleteEmailListCustomerAsync (string storefrontOid, string emailListUuid, string emailCustomerUuid)
        {
             ApiResponse<BaseResponse> localVarResponse = await DeleteEmailListCustomerAsyncWithHttpInfo(storefrontOid, emailListUuid, emailCustomerUuid);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Delete email list customer 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid">null</param>
        /// <param name="emailListUuid">null</param>
        /// <param name="emailCustomerUuid">null</param>
        /// <returns>Task of ApiResponse (BaseResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<BaseResponse>> DeleteEmailListCustomerAsyncWithHttpInfo (string storefrontOid, string emailListUuid, string emailCustomerUuid)
        {
            // verify the required parameter 'storefrontOid' is set
            if (storefrontOid == null)
                throw new ApiException(400, "Missing required parameter 'storefrontOid' when calling StorefrontApi->DeleteEmailListCustomer");
            // verify the required parameter 'emailListUuid' is set
            if (emailListUuid == null)
                throw new ApiException(400, "Missing required parameter 'emailListUuid' when calling StorefrontApi->DeleteEmailListCustomer");
            // verify the required parameter 'emailCustomerUuid' is set
            if (emailCustomerUuid == null)
                throw new ApiException(400, "Missing required parameter 'emailCustomerUuid' when calling StorefrontApi->DeleteEmailListCustomer");

            var localVarPath = "/storefront/{storefront_oid}/email/lists/{email_list_uuid}/customers/{email_customer_uuid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (storefrontOid != null) localVarPathParams.Add("storefront_oid", Configuration.ApiClient.ParameterToString(storefrontOid)); // path parameter
            if (emailListUuid != null) localVarPathParams.Add("email_list_uuid", Configuration.ApiClient.ParameterToString(emailListUuid)); // path parameter
            if (emailCustomerUuid != null) localVarPathParams.Add("email_customer_uuid", Configuration.ApiClient.ParameterToString(emailCustomerUuid)); // path parameter

            // authentication (ultraCartBrowserApiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key")))
            {
                localVarHeaderParams["x-ultracart-browser-key"] = Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key");
            }
            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteEmailListCustomer", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BaseResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (BaseResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(BaseResponse)));
        }

        /// <summary>
        /// delete email campaign 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="domain">null</param>
        /// <returns>BaseResponse</returns>
        public BaseResponse DeleteEmailSendingDomain (string domain)
        {
             ApiResponse<BaseResponse> localVarResponse = DeleteEmailSendingDomainWithHttpInfo(domain);
             return localVarResponse.Data;
        }

        /// <summary>
        /// delete email campaign 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="domain">null</param>
        /// <returns>ApiResponse of BaseResponse</returns>
        public ApiResponse< BaseResponse > DeleteEmailSendingDomainWithHttpInfo (string domain)
        {
            // verify the required parameter 'domain' is set
            if (domain == null)
                throw new ApiException(400, "Missing required parameter 'domain' when calling StorefrontApi->DeleteEmailSendingDomain");

            var localVarPath = "/storefront/email/sending_domains/{domain}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (domain != null) localVarPathParams.Add("domain", Configuration.ApiClient.ParameterToString(domain)); // path parameter

            // authentication (ultraCartBrowserApiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key")))
            {
                localVarHeaderParams["x-ultracart-browser-key"] = Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key");
            }
            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteEmailSendingDomain", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BaseResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (BaseResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(BaseResponse)));
        }

        /// <summary>
        /// delete email campaign 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="domain">null</param>
        /// <returns>Task of BaseResponse</returns>
        public async System.Threading.Tasks.Task<BaseResponse> DeleteEmailSendingDomainAsync (string domain)
        {
             ApiResponse<BaseResponse> localVarResponse = await DeleteEmailSendingDomainAsyncWithHttpInfo(domain);
             return localVarResponse.Data;

        }

        /// <summary>
        /// delete email campaign 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="domain">null</param>
        /// <returns>Task of ApiResponse (BaseResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<BaseResponse>> DeleteEmailSendingDomainAsyncWithHttpInfo (string domain)
        {
            // verify the required parameter 'domain' is set
            if (domain == null)
                throw new ApiException(400, "Missing required parameter 'domain' when calling StorefrontApi->DeleteEmailSendingDomain");

            var localVarPath = "/storefront/email/sending_domains/{domain}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (domain != null) localVarPathParams.Add("domain", Configuration.ApiClient.ParameterToString(domain)); // path parameter

            // authentication (ultraCartBrowserApiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key")))
            {
                localVarHeaderParams["x-ultracart-browser-key"] = Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key");
            }
            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteEmailSendingDomain", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BaseResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (BaseResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(BaseResponse)));
        }

        /// <summary>
        /// Delete experiment 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid">null</param>
        /// <param name="storefrontExperimentOid">null</param>
        /// <returns></returns>
        public void DeleteExperiment (string storefrontOid, int? storefrontExperimentOid)
        {
             DeleteExperimentWithHttpInfo(storefrontOid, storefrontExperimentOid);
        }

        /// <summary>
        /// Delete experiment 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid">null</param>
        /// <param name="storefrontExperimentOid">null</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteExperimentWithHttpInfo (string storefrontOid, int? storefrontExperimentOid)
        {
            // verify the required parameter 'storefrontOid' is set
            if (storefrontOid == null)
                throw new ApiException(400, "Missing required parameter 'storefrontOid' when calling StorefrontApi->DeleteExperiment");
            // verify the required parameter 'storefrontExperimentOid' is set
            if (storefrontExperimentOid == null)
                throw new ApiException(400, "Missing required parameter 'storefrontExperimentOid' when calling StorefrontApi->DeleteExperiment");

            var localVarPath = "/storefront/{storefront_oid}/experiments/{storefront_experiment_oid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (storefrontOid != null) localVarPathParams.Add("storefront_oid", Configuration.ApiClient.ParameterToString(storefrontOid)); // path parameter
            if (storefrontExperimentOid != null) localVarPathParams.Add("storefront_experiment_oid", Configuration.ApiClient.ParameterToString(storefrontExperimentOid)); // path parameter

            // authentication (ultraCartBrowserApiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key")))
            {
                localVarHeaderParams["x-ultracart-browser-key"] = Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key");
            }
            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteExperiment", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete experiment 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid">null</param>
        /// <param name="storefrontExperimentOid">null</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteExperimentAsync (string storefrontOid, int? storefrontExperimentOid)
        {
             await DeleteExperimentAsyncWithHttpInfo(storefrontOid, storefrontExperimentOid);

        }

        /// <summary>
        /// Delete experiment 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid">null</param>
        /// <param name="storefrontExperimentOid">null</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteExperimentAsyncWithHttpInfo (string storefrontOid, int? storefrontExperimentOid)
        {
            // verify the required parameter 'storefrontOid' is set
            if (storefrontOid == null)
                throw new ApiException(400, "Missing required parameter 'storefrontOid' when calling StorefrontApi->DeleteExperiment");
            // verify the required parameter 'storefrontExperimentOid' is set
            if (storefrontExperimentOid == null)
                throw new ApiException(400, "Missing required parameter 'storefrontExperimentOid' when calling StorefrontApi->DeleteExperiment");

            var localVarPath = "/storefront/{storefront_oid}/experiments/{storefront_experiment_oid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (storefrontOid != null) localVarPathParams.Add("storefront_oid", Configuration.ApiClient.ParameterToString(storefrontOid)); // path parameter
            if (storefrontExperimentOid != null) localVarPathParams.Add("storefront_experiment_oid", Configuration.ApiClient.ParameterToString(storefrontExperimentOid)); // path parameter

            // authentication (ultraCartBrowserApiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key")))
            {
                localVarHeaderParams["x-ultracart-browser-key"] = Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key");
            }
            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteExperiment", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Obtain lat/long for an address 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid">null</param>
        /// <param name="geocodeRequest">geocode request</param>
        /// <returns>GeocodeResponse</returns>
        public GeocodeResponse GeocodeAddress (string storefrontOid, GeocodeRequest geocodeRequest)
        {
             ApiResponse<GeocodeResponse> localVarResponse = GeocodeAddressWithHttpInfo(storefrontOid, geocodeRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Obtain lat/long for an address 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid">null</param>
        /// <param name="geocodeRequest">geocode request</param>
        /// <returns>ApiResponse of GeocodeResponse</returns>
        public ApiResponse< GeocodeResponse > GeocodeAddressWithHttpInfo (string storefrontOid, GeocodeRequest geocodeRequest)
        {
            // verify the required parameter 'storefrontOid' is set
            if (storefrontOid == null)
                throw new ApiException(400, "Missing required parameter 'storefrontOid' when calling StorefrontApi->GeocodeAddress");
            // verify the required parameter 'geocodeRequest' is set
            if (geocodeRequest == null)
                throw new ApiException(400, "Missing required parameter 'geocodeRequest' when calling StorefrontApi->GeocodeAddress");

            var localVarPath = "/storefront/{storefront_oid}/email/geocode";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (storefrontOid != null) localVarPathParams.Add("storefront_oid", Configuration.ApiClient.ParameterToString(storefrontOid)); // path parameter
            if (geocodeRequest != null && geocodeRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(geocodeRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = geocodeRequest; // byte array
            }

            // authentication (ultraCartBrowserApiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key")))
            {
                localVarHeaderParams["x-ultracart-browser-key"] = Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key");
            }
            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GeocodeAddress", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GeocodeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GeocodeResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(GeocodeResponse)));
        }

        /// <summary>
        /// Obtain lat/long for an address 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid">null</param>
        /// <param name="geocodeRequest">geocode request</param>
        /// <returns>Task of GeocodeResponse</returns>
        public async System.Threading.Tasks.Task<GeocodeResponse> GeocodeAddressAsync (string storefrontOid, GeocodeRequest geocodeRequest)
        {
             ApiResponse<GeocodeResponse> localVarResponse = await GeocodeAddressAsyncWithHttpInfo(storefrontOid, geocodeRequest);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Obtain lat/long for an address 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid">null</param>
        /// <param name="geocodeRequest">geocode request</param>
        /// <returns>Task of ApiResponse (GeocodeResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GeocodeResponse>> GeocodeAddressAsyncWithHttpInfo (string storefrontOid, GeocodeRequest geocodeRequest)
        {
            // verify the required parameter 'storefrontOid' is set
            if (storefrontOid == null)
                throw new ApiException(400, "Missing required parameter 'storefrontOid' when calling StorefrontApi->GeocodeAddress");
            // verify the required parameter 'geocodeRequest' is set
            if (geocodeRequest == null)
                throw new ApiException(400, "Missing required parameter 'geocodeRequest' when calling StorefrontApi->GeocodeAddress");

            var localVarPath = "/storefront/{storefront_oid}/email/geocode";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (storefrontOid != null) localVarPathParams.Add("storefront_oid", Configuration.ApiClient.ParameterToString(storefrontOid)); // path parameter
            if (geocodeRequest != null && geocodeRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(geocodeRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = geocodeRequest; // byte array
            }

            // authentication (ultraCartBrowserApiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key")))
            {
                localVarHeaderParams["x-ultracart-browser-key"] = Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key");
            }
            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GeocodeAddress", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GeocodeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GeocodeResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(GeocodeResponse)));
        }

        /// <summary>
        /// Get countries Obtain a list of all the countries 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid">null</param>
        /// <returns>CountriesResponse</returns>
        public CountriesResponse GetCountries (string storefrontOid)
        {
             ApiResponse<CountriesResponse> localVarResponse = GetCountriesWithHttpInfo(storefrontOid);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get countries Obtain a list of all the countries 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid">null</param>
        /// <returns>ApiResponse of CountriesResponse</returns>
        public ApiResponse< CountriesResponse > GetCountriesWithHttpInfo (string storefrontOid)
        {
            // verify the required parameter 'storefrontOid' is set
            if (storefrontOid == null)
                throw new ApiException(400, "Missing required parameter 'storefrontOid' when calling StorefrontApi->GetCountries");

            var localVarPath = "/storefront/{storefront_oid}/email/countries";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (storefrontOid != null) localVarPathParams.Add("storefront_oid", Configuration.ApiClient.ParameterToString(storefrontOid)); // path parameter

            // authentication (ultraCartBrowserApiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key")))
            {
                localVarHeaderParams["x-ultracart-browser-key"] = Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key");
            }
            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCountries", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CountriesResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CountriesResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CountriesResponse)));
        }

        /// <summary>
        /// Get countries Obtain a list of all the countries 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid">null</param>
        /// <returns>Task of CountriesResponse</returns>
        public async System.Threading.Tasks.Task<CountriesResponse> GetCountriesAsync (string storefrontOid)
        {
             ApiResponse<CountriesResponse> localVarResponse = await GetCountriesAsyncWithHttpInfo(storefrontOid);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get countries Obtain a list of all the countries 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid">null</param>
        /// <returns>Task of ApiResponse (CountriesResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CountriesResponse>> GetCountriesAsyncWithHttpInfo (string storefrontOid)
        {
            // verify the required parameter 'storefrontOid' is set
            if (storefrontOid == null)
                throw new ApiException(400, "Missing required parameter 'storefrontOid' when calling StorefrontApi->GetCountries");

            var localVarPath = "/storefront/{storefront_oid}/email/countries";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (storefrontOid != null) localVarPathParams.Add("storefront_oid", Configuration.ApiClient.ParameterToString(storefrontOid)); // path parameter

            // authentication (ultraCartBrowserApiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key")))
            {
                localVarHeaderParams["x-ultracart-browser-key"] = Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key");
            }
            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCountries", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CountriesResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CountriesResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CountriesResponse)));
        }

        /// <summary>
        /// Get email communication base templates 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid">null</param>
        /// <returns>EmailBaseTemplateListResponse</returns>
        public EmailBaseTemplateListResponse GetEmailBaseTemplates (string storefrontOid)
        {
             ApiResponse<EmailBaseTemplateListResponse> localVarResponse = GetEmailBaseTemplatesWithHttpInfo(storefrontOid);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get email communication base templates 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid">null</param>
        /// <returns>ApiResponse of EmailBaseTemplateListResponse</returns>
        public ApiResponse< EmailBaseTemplateListResponse > GetEmailBaseTemplatesWithHttpInfo (string storefrontOid)
        {
            // verify the required parameter 'storefrontOid' is set
            if (storefrontOid == null)
                throw new ApiException(400, "Missing required parameter 'storefrontOid' when calling StorefrontApi->GetEmailBaseTemplates");

            var localVarPath = "/storefront/{storefront_oid}/email/baseTemplates";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (storefrontOid != null) localVarPathParams.Add("storefront_oid", Configuration.ApiClient.ParameterToString(storefrontOid)); // path parameter

            // authentication (ultraCartBrowserApiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key")))
            {
                localVarHeaderParams["x-ultracart-browser-key"] = Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key");
            }
            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetEmailBaseTemplates", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EmailBaseTemplateListResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (EmailBaseTemplateListResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(EmailBaseTemplateListResponse)));
        }

        /// <summary>
        /// Get email communication base templates 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid">null</param>
        /// <returns>Task of EmailBaseTemplateListResponse</returns>
        public async System.Threading.Tasks.Task<EmailBaseTemplateListResponse> GetEmailBaseTemplatesAsync (string storefrontOid)
        {
             ApiResponse<EmailBaseTemplateListResponse> localVarResponse = await GetEmailBaseTemplatesAsyncWithHttpInfo(storefrontOid);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get email communication base templates 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid">null</param>
        /// <returns>Task of ApiResponse (EmailBaseTemplateListResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<EmailBaseTemplateListResponse>> GetEmailBaseTemplatesAsyncWithHttpInfo (string storefrontOid)
        {
            // verify the required parameter 'storefrontOid' is set
            if (storefrontOid == null)
                throw new ApiException(400, "Missing required parameter 'storefrontOid' when calling StorefrontApi->GetEmailBaseTemplates");

            var localVarPath = "/storefront/{storefront_oid}/email/baseTemplates";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (storefrontOid != null) localVarPathParams.Add("storefront_oid", Configuration.ApiClient.ParameterToString(storefrontOid)); // path parameter

            // authentication (ultraCartBrowserApiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key")))
            {
                localVarHeaderParams["x-ultracart-browser-key"] = Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key");
            }
            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetEmailBaseTemplates", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EmailBaseTemplateListResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (EmailBaseTemplateListResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(EmailBaseTemplateListResponse)));
        }

        /// <summary>
        /// Get email campaign 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid">null</param>
        /// <param name="emailCampaignUuid">null</param>
        /// <returns>EmailCampaignResponse</returns>
        public EmailCampaignResponse GetEmailCampaign (string storefrontOid, string emailCampaignUuid)
        {
             ApiResponse<EmailCampaignResponse> localVarResponse = GetEmailCampaignWithHttpInfo(storefrontOid, emailCampaignUuid);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get email campaign 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid">null</param>
        /// <param name="emailCampaignUuid">null</param>
        /// <returns>ApiResponse of EmailCampaignResponse</returns>
        public ApiResponse< EmailCampaignResponse > GetEmailCampaignWithHttpInfo (string storefrontOid, string emailCampaignUuid)
        {
            // verify the required parameter 'storefrontOid' is set
            if (storefrontOid == null)
                throw new ApiException(400, "Missing required parameter 'storefrontOid' when calling StorefrontApi->GetEmailCampaign");
            // verify the required parameter 'emailCampaignUuid' is set
            if (emailCampaignUuid == null)
                throw new ApiException(400, "Missing required parameter 'emailCampaignUuid' when calling StorefrontApi->GetEmailCampaign");

            var localVarPath = "/storefront/{storefront_oid}/email/campaigns/{email_campaign_uuid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (storefrontOid != null) localVarPathParams.Add("storefront_oid", Configuration.ApiClient.ParameterToString(storefrontOid)); // path parameter
            if (emailCampaignUuid != null) localVarPathParams.Add("email_campaign_uuid", Configuration.ApiClient.ParameterToString(emailCampaignUuid)); // path parameter

            // authentication (ultraCartBrowserApiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key")))
            {
                localVarHeaderParams["x-ultracart-browser-key"] = Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key");
            }
            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetEmailCampaign", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EmailCampaignResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (EmailCampaignResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(EmailCampaignResponse)));
        }

        /// <summary>
        /// Get email campaign 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid">null</param>
        /// <param name="emailCampaignUuid">null</param>
        /// <returns>Task of EmailCampaignResponse</returns>
        public async System.Threading.Tasks.Task<EmailCampaignResponse> GetEmailCampaignAsync (string storefrontOid, string emailCampaignUuid)
        {
             ApiResponse<EmailCampaignResponse> localVarResponse = await GetEmailCampaignAsyncWithHttpInfo(storefrontOid, emailCampaignUuid);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get email campaign 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid">null</param>
        /// <param name="emailCampaignUuid">null</param>
        /// <returns>Task of ApiResponse (EmailCampaignResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<EmailCampaignResponse>> GetEmailCampaignAsyncWithHttpInfo (string storefrontOid, string emailCampaignUuid)
        {
            // verify the required parameter 'storefrontOid' is set
            if (storefrontOid == null)
                throw new ApiException(400, "Missing required parameter 'storefrontOid' when calling StorefrontApi->GetEmailCampaign");
            // verify the required parameter 'emailCampaignUuid' is set
            if (emailCampaignUuid == null)
                throw new ApiException(400, "Missing required parameter 'emailCampaignUuid' when calling StorefrontApi->GetEmailCampaign");

            var localVarPath = "/storefront/{storefront_oid}/email/campaigns/{email_campaign_uuid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (storefrontOid != null) localVarPathParams.Add("storefront_oid", Configuration.ApiClient.ParameterToString(storefrontOid)); // path parameter
            if (emailCampaignUuid != null) localVarPathParams.Add("email_campaign_uuid", Configuration.ApiClient.ParameterToString(emailCampaignUuid)); // path parameter

            // authentication (ultraCartBrowserApiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key")))
            {
                localVarHeaderParams["x-ultracart-browser-key"] = Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key");
            }
            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetEmailCampaign", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EmailCampaignResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (EmailCampaignResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(EmailCampaignResponse)));
        }

        /// <summary>
        /// Get email campaigns 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid">null</param>
        /// <returns>EmailCampaignsResponse</returns>
        public EmailCampaignsResponse GetEmailCampaigns (string storefrontOid)
        {
             ApiResponse<EmailCampaignsResponse> localVarResponse = GetEmailCampaignsWithHttpInfo(storefrontOid);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get email campaigns 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid">null</param>
        /// <returns>ApiResponse of EmailCampaignsResponse</returns>
        public ApiResponse< EmailCampaignsResponse > GetEmailCampaignsWithHttpInfo (string storefrontOid)
        {
            // verify the required parameter 'storefrontOid' is set
            if (storefrontOid == null)
                throw new ApiException(400, "Missing required parameter 'storefrontOid' when calling StorefrontApi->GetEmailCampaigns");

            var localVarPath = "/storefront/{storefront_oid}/email/campaigns";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (storefrontOid != null) localVarPathParams.Add("storefront_oid", Configuration.ApiClient.ParameterToString(storefrontOid)); // path parameter

            // authentication (ultraCartBrowserApiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key")))
            {
                localVarHeaderParams["x-ultracart-browser-key"] = Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key");
            }
            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetEmailCampaigns", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EmailCampaignsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (EmailCampaignsResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(EmailCampaignsResponse)));
        }

        /// <summary>
        /// Get email campaigns 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid">null</param>
        /// <returns>Task of EmailCampaignsResponse</returns>
        public async System.Threading.Tasks.Task<EmailCampaignsResponse> GetEmailCampaignsAsync (string storefrontOid)
        {
             ApiResponse<EmailCampaignsResponse> localVarResponse = await GetEmailCampaignsAsyncWithHttpInfo(storefrontOid);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get email campaigns 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid">null</param>
        /// <returns>Task of ApiResponse (EmailCampaignsResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<EmailCampaignsResponse>> GetEmailCampaignsAsyncWithHttpInfo (string storefrontOid)
        {
            // verify the required parameter 'storefrontOid' is set
            if (storefrontOid == null)
                throw new ApiException(400, "Missing required parameter 'storefrontOid' when calling StorefrontApi->GetEmailCampaigns");

            var localVarPath = "/storefront/{storefront_oid}/email/campaigns";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (storefrontOid != null) localVarPathParams.Add("storefront_oid", Configuration.ApiClient.ParameterToString(storefrontOid)); // path parameter

            // authentication (ultraCartBrowserApiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key")))
            {
                localVarHeaderParams["x-ultracart-browser-key"] = Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key");
            }
            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetEmailCampaigns", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EmailCampaignsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (EmailCampaignsResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(EmailCampaignsResponse)));
        }

        /// <summary>
        /// Get email campaigns with stats 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid">null</param>
        /// <param name="statDays">null</param>
        /// <returns>EmailCampaignsResponse</returns>
        public EmailCampaignsResponse GetEmailCampaignsWithStats (string storefrontOid, string statDays)
        {
             ApiResponse<EmailCampaignsResponse> localVarResponse = GetEmailCampaignsWithStatsWithHttpInfo(storefrontOid, statDays);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get email campaigns with stats 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid">null</param>
        /// <param name="statDays">null</param>
        /// <returns>ApiResponse of EmailCampaignsResponse</returns>
        public ApiResponse< EmailCampaignsResponse > GetEmailCampaignsWithStatsWithHttpInfo (string storefrontOid, string statDays)
        {
            // verify the required parameter 'storefrontOid' is set
            if (storefrontOid == null)
                throw new ApiException(400, "Missing required parameter 'storefrontOid' when calling StorefrontApi->GetEmailCampaignsWithStats");
            // verify the required parameter 'statDays' is set
            if (statDays == null)
                throw new ApiException(400, "Missing required parameter 'statDays' when calling StorefrontApi->GetEmailCampaignsWithStats");

            var localVarPath = "/storefront/{storefront_oid}/email/campaignsWithStats/{stat_days}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (storefrontOid != null) localVarPathParams.Add("storefront_oid", Configuration.ApiClient.ParameterToString(storefrontOid)); // path parameter
            if (statDays != null) localVarPathParams.Add("stat_days", Configuration.ApiClient.ParameterToString(statDays)); // path parameter

            // authentication (ultraCartBrowserApiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key")))
            {
                localVarHeaderParams["x-ultracart-browser-key"] = Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key");
            }
            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetEmailCampaignsWithStats", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EmailCampaignsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (EmailCampaignsResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(EmailCampaignsResponse)));
        }

        /// <summary>
        /// Get email campaigns with stats 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid">null</param>
        /// <param name="statDays">null</param>
        /// <returns>Task of EmailCampaignsResponse</returns>
        public async System.Threading.Tasks.Task<EmailCampaignsResponse> GetEmailCampaignsWithStatsAsync (string storefrontOid, string statDays)
        {
             ApiResponse<EmailCampaignsResponse> localVarResponse = await GetEmailCampaignsWithStatsAsyncWithHttpInfo(storefrontOid, statDays);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get email campaigns with stats 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid">null</param>
        /// <param name="statDays">null</param>
        /// <returns>Task of ApiResponse (EmailCampaignsResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<EmailCampaignsResponse>> GetEmailCampaignsWithStatsAsyncWithHttpInfo (string storefrontOid, string statDays)
        {
            // verify the required parameter 'storefrontOid' is set
            if (storefrontOid == null)
                throw new ApiException(400, "Missing required parameter 'storefrontOid' when calling StorefrontApi->GetEmailCampaignsWithStats");
            // verify the required parameter 'statDays' is set
            if (statDays == null)
                throw new ApiException(400, "Missing required parameter 'statDays' when calling StorefrontApi->GetEmailCampaignsWithStats");

            var localVarPath = "/storefront/{storefront_oid}/email/campaignsWithStats/{stat_days}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (storefrontOid != null) localVarPathParams.Add("storefront_oid", Configuration.ApiClient.ParameterToString(storefrontOid)); // path parameter
            if (statDays != null) localVarPathParams.Add("stat_days", Configuration.ApiClient.ParameterToString(statDays)); // path parameter

            // authentication (ultraCartBrowserApiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key")))
            {
                localVarHeaderParams["x-ultracart-browser-key"] = Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key");
            }
            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetEmailCampaignsWithStats", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EmailCampaignsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (EmailCampaignsResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(EmailCampaignsResponse)));
        }

        /// <summary>
        /// Get email commseq 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid">null</param>
        /// <param name="commseqUuid">null</param>
        /// <returns>EmailCommseqResponse</returns>
        public EmailCommseqResponse GetEmailCommseq (string storefrontOid, string commseqUuid)
        {
             ApiResponse<EmailCommseqResponse> localVarResponse = GetEmailCommseqWithHttpInfo(storefrontOid, commseqUuid);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get email commseq 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid">null</param>
        /// <param name="commseqUuid">null</param>
        /// <returns>ApiResponse of EmailCommseqResponse</returns>
        public ApiResponse< EmailCommseqResponse > GetEmailCommseqWithHttpInfo (string storefrontOid, string commseqUuid)
        {
            // verify the required parameter 'storefrontOid' is set
            if (storefrontOid == null)
                throw new ApiException(400, "Missing required parameter 'storefrontOid' when calling StorefrontApi->GetEmailCommseq");
            // verify the required parameter 'commseqUuid' is set
            if (commseqUuid == null)
                throw new ApiException(400, "Missing required parameter 'commseqUuid' when calling StorefrontApi->GetEmailCommseq");

            var localVarPath = "/storefront/{storefront_oid}/email/commseqs/{commseq_uuid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (storefrontOid != null) localVarPathParams.Add("storefront_oid", Configuration.ApiClient.ParameterToString(storefrontOid)); // path parameter
            if (commseqUuid != null) localVarPathParams.Add("commseq_uuid", Configuration.ApiClient.ParameterToString(commseqUuid)); // path parameter

            // authentication (ultraCartBrowserApiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key")))
            {
                localVarHeaderParams["x-ultracart-browser-key"] = Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key");
            }
            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetEmailCommseq", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EmailCommseqResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (EmailCommseqResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(EmailCommseqResponse)));
        }

        /// <summary>
        /// Get email commseq 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid">null</param>
        /// <param name="commseqUuid">null</param>
        /// <returns>Task of EmailCommseqResponse</returns>
        public async System.Threading.Tasks.Task<EmailCommseqResponse> GetEmailCommseqAsync (string storefrontOid, string commseqUuid)
        {
             ApiResponse<EmailCommseqResponse> localVarResponse = await GetEmailCommseqAsyncWithHttpInfo(storefrontOid, commseqUuid);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get email commseq 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid">null</param>
        /// <param name="commseqUuid">null</param>
        /// <returns>Task of ApiResponse (EmailCommseqResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<EmailCommseqResponse>> GetEmailCommseqAsyncWithHttpInfo (string storefrontOid, string commseqUuid)
        {
            // verify the required parameter 'storefrontOid' is set
            if (storefrontOid == null)
                throw new ApiException(400, "Missing required parameter 'storefrontOid' when calling StorefrontApi->GetEmailCommseq");
            // verify the required parameter 'commseqUuid' is set
            if (commseqUuid == null)
                throw new ApiException(400, "Missing required parameter 'commseqUuid' when calling StorefrontApi->GetEmailCommseq");

            var localVarPath = "/storefront/{storefront_oid}/email/commseqs/{commseq_uuid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (storefrontOid != null) localVarPathParams.Add("storefront_oid", Configuration.ApiClient.ParameterToString(storefrontOid)); // path parameter
            if (commseqUuid != null) localVarPathParams.Add("commseq_uuid", Configuration.ApiClient.ParameterToString(commseqUuid)); // path parameter

            // authentication (ultraCartBrowserApiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key")))
            {
                localVarHeaderParams["x-ultracart-browser-key"] = Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key");
            }
            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetEmailCommseq", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EmailCommseqResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (EmailCommseqResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(EmailCommseqResponse)));
        }

        /// <summary>
        /// Get email communication sequence emails stats 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid">null</param>
        /// <param name="commseqUuid">null</param>
        /// <param name="statsRequest">StatsRequest</param>
        /// <returns>EmailStatSummaryResponse</returns>
        public EmailStatSummaryResponse GetEmailCommseqEmailStats (string storefrontOid, string commseqUuid, EmailStatSummaryRequest statsRequest)
        {
             ApiResponse<EmailStatSummaryResponse> localVarResponse = GetEmailCommseqEmailStatsWithHttpInfo(storefrontOid, commseqUuid, statsRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get email communication sequence emails stats 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid">null</param>
        /// <param name="commseqUuid">null</param>
        /// <param name="statsRequest">StatsRequest</param>
        /// <returns>ApiResponse of EmailStatSummaryResponse</returns>
        public ApiResponse< EmailStatSummaryResponse > GetEmailCommseqEmailStatsWithHttpInfo (string storefrontOid, string commseqUuid, EmailStatSummaryRequest statsRequest)
        {
            // verify the required parameter 'storefrontOid' is set
            if (storefrontOid == null)
                throw new ApiException(400, "Missing required parameter 'storefrontOid' when calling StorefrontApi->GetEmailCommseqEmailStats");
            // verify the required parameter 'commseqUuid' is set
            if (commseqUuid == null)
                throw new ApiException(400, "Missing required parameter 'commseqUuid' when calling StorefrontApi->GetEmailCommseqEmailStats");
            // verify the required parameter 'statsRequest' is set
            if (statsRequest == null)
                throw new ApiException(400, "Missing required parameter 'statsRequest' when calling StorefrontApi->GetEmailCommseqEmailStats");

            var localVarPath = "/storefront/{storefront_oid}/email/commseqs/{commseq_uuid}/emailStats";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (storefrontOid != null) localVarPathParams.Add("storefront_oid", Configuration.ApiClient.ParameterToString(storefrontOid)); // path parameter
            if (commseqUuid != null) localVarPathParams.Add("commseq_uuid", Configuration.ApiClient.ParameterToString(commseqUuid)); // path parameter
            if (statsRequest != null && statsRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(statsRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = statsRequest; // byte array
            }

            // authentication (ultraCartBrowserApiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key")))
            {
                localVarHeaderParams["x-ultracart-browser-key"] = Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key");
            }
            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetEmailCommseqEmailStats", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EmailStatSummaryResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (EmailStatSummaryResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(EmailStatSummaryResponse)));
        }

        /// <summary>
        /// Get email communication sequence emails stats 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid">null</param>
        /// <param name="commseqUuid">null</param>
        /// <param name="statsRequest">StatsRequest</param>
        /// <returns>Task of EmailStatSummaryResponse</returns>
        public async System.Threading.Tasks.Task<EmailStatSummaryResponse> GetEmailCommseqEmailStatsAsync (string storefrontOid, string commseqUuid, EmailStatSummaryRequest statsRequest)
        {
             ApiResponse<EmailStatSummaryResponse> localVarResponse = await GetEmailCommseqEmailStatsAsyncWithHttpInfo(storefrontOid, commseqUuid, statsRequest);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get email communication sequence emails stats 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid">null</param>
        /// <param name="commseqUuid">null</param>
        /// <param name="statsRequest">StatsRequest</param>
        /// <returns>Task of ApiResponse (EmailStatSummaryResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<EmailStatSummaryResponse>> GetEmailCommseqEmailStatsAsyncWithHttpInfo (string storefrontOid, string commseqUuid, EmailStatSummaryRequest statsRequest)
        {
            // verify the required parameter 'storefrontOid' is set
            if (storefrontOid == null)
                throw new ApiException(400, "Missing required parameter 'storefrontOid' when calling StorefrontApi->GetEmailCommseqEmailStats");
            // verify the required parameter 'commseqUuid' is set
            if (commseqUuid == null)
                throw new ApiException(400, "Missing required parameter 'commseqUuid' when calling StorefrontApi->GetEmailCommseqEmailStats");
            // verify the required parameter 'statsRequest' is set
            if (statsRequest == null)
                throw new ApiException(400, "Missing required parameter 'statsRequest' when calling StorefrontApi->GetEmailCommseqEmailStats");

            var localVarPath = "/storefront/{storefront_oid}/email/commseqs/{commseq_uuid}/emailStats";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (storefrontOid != null) localVarPathParams.Add("storefront_oid", Configuration.ApiClient.ParameterToString(storefrontOid)); // path parameter
            if (commseqUuid != null) localVarPathParams.Add("commseq_uuid", Configuration.ApiClient.ParameterToString(commseqUuid)); // path parameter
            if (statsRequest != null && statsRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(statsRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = statsRequest; // byte array
            }

            // authentication (ultraCartBrowserApiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key")))
            {
                localVarHeaderParams["x-ultracart-browser-key"] = Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key");
            }
            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetEmailCommseqEmailStats", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EmailStatSummaryResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (EmailStatSummaryResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(EmailStatSummaryResponse)));
        }

        /// <summary>
        /// Get communication sequence stats overall 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid">null</param>
        /// <param name="commseqUuid">null</param>
        /// <returns>EmailCommseqStatResponse</returns>
        public EmailCommseqStatResponse GetEmailCommseqStatOverall (string storefrontOid, string commseqUuid)
        {
             ApiResponse<EmailCommseqStatResponse> localVarResponse = GetEmailCommseqStatOverallWithHttpInfo(storefrontOid, commseqUuid);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get communication sequence stats overall 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid">null</param>
        /// <param name="commseqUuid">null</param>
        /// <returns>ApiResponse of EmailCommseqStatResponse</returns>
        public ApiResponse< EmailCommseqStatResponse > GetEmailCommseqStatOverallWithHttpInfo (string storefrontOid, string commseqUuid)
        {
            // verify the required parameter 'storefrontOid' is set
            if (storefrontOid == null)
                throw new ApiException(400, "Missing required parameter 'storefrontOid' when calling StorefrontApi->GetEmailCommseqStatOverall");
            // verify the required parameter 'commseqUuid' is set
            if (commseqUuid == null)
                throw new ApiException(400, "Missing required parameter 'commseqUuid' when calling StorefrontApi->GetEmailCommseqStatOverall");

            var localVarPath = "/storefront/{storefront_oid}/email/commseqs/{commseq_uuid}/stat";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (storefrontOid != null) localVarPathParams.Add("storefront_oid", Configuration.ApiClient.ParameterToString(storefrontOid)); // path parameter
            if (commseqUuid != null) localVarPathParams.Add("commseq_uuid", Configuration.ApiClient.ParameterToString(commseqUuid)); // path parameter

            // authentication (ultraCartBrowserApiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key")))
            {
                localVarHeaderParams["x-ultracart-browser-key"] = Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key");
            }
            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetEmailCommseqStatOverall", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EmailCommseqStatResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (EmailCommseqStatResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(EmailCommseqStatResponse)));
        }

        /// <summary>
        /// Get communication sequence stats overall 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid">null</param>
        /// <param name="commseqUuid">null</param>
        /// <returns>Task of EmailCommseqStatResponse</returns>
        public async System.Threading.Tasks.Task<EmailCommseqStatResponse> GetEmailCommseqStatOverallAsync (string storefrontOid, string commseqUuid)
        {
             ApiResponse<EmailCommseqStatResponse> localVarResponse = await GetEmailCommseqStatOverallAsyncWithHttpInfo(storefrontOid, commseqUuid);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get communication sequence stats overall 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid">null</param>
        /// <param name="commseqUuid">null</param>
        /// <returns>Task of ApiResponse (EmailCommseqStatResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<EmailCommseqStatResponse>> GetEmailCommseqStatOverallAsyncWithHttpInfo (string storefrontOid, string commseqUuid)
        {
            // verify the required parameter 'storefrontOid' is set
            if (storefrontOid == null)
                throw new ApiException(400, "Missing required parameter 'storefrontOid' when calling StorefrontApi->GetEmailCommseqStatOverall");
            // verify the required parameter 'commseqUuid' is set
            if (commseqUuid == null)
                throw new ApiException(400, "Missing required parameter 'commseqUuid' when calling StorefrontApi->GetEmailCommseqStatOverall");

            var localVarPath = "/storefront/{storefront_oid}/email/commseqs/{commseq_uuid}/stat";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (storefrontOid != null) localVarPathParams.Add("storefront_oid", Configuration.ApiClient.ParameterToString(storefrontOid)); // path parameter
            if (commseqUuid != null) localVarPathParams.Add("commseq_uuid", Configuration.ApiClient.ParameterToString(commseqUuid)); // path parameter

            // authentication (ultraCartBrowserApiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key")))
            {
                localVarHeaderParams["x-ultracart-browser-key"] = Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key");
            }
            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetEmailCommseqStatOverall", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EmailCommseqStatResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (EmailCommseqStatResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(EmailCommseqStatResponse)));
        }

        /// <summary>
        /// Get email communication sequence customers waiting at each requested step 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid">null</param>
        /// <param name="commseqUuid">null</param>
        /// <param name="waitingRequest">WaitingRequest</param>
        /// <returns>EmailStepWaitingResponse</returns>
        public EmailStepWaitingResponse GetEmailCommseqStepWaiting (string storefrontOid, string commseqUuid, EmailStepWaitingRequest waitingRequest)
        {
             ApiResponse<EmailStepWaitingResponse> localVarResponse = GetEmailCommseqStepWaitingWithHttpInfo(storefrontOid, commseqUuid, waitingRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get email communication sequence customers waiting at each requested step 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid">null</param>
        /// <param name="commseqUuid">null</param>
        /// <param name="waitingRequest">WaitingRequest</param>
        /// <returns>ApiResponse of EmailStepWaitingResponse</returns>
        public ApiResponse< EmailStepWaitingResponse > GetEmailCommseqStepWaitingWithHttpInfo (string storefrontOid, string commseqUuid, EmailStepWaitingRequest waitingRequest)
        {
            // verify the required parameter 'storefrontOid' is set
            if (storefrontOid == null)
                throw new ApiException(400, "Missing required parameter 'storefrontOid' when calling StorefrontApi->GetEmailCommseqStepWaiting");
            // verify the required parameter 'commseqUuid' is set
            if (commseqUuid == null)
                throw new ApiException(400, "Missing required parameter 'commseqUuid' when calling StorefrontApi->GetEmailCommseqStepWaiting");
            // verify the required parameter 'waitingRequest' is set
            if (waitingRequest == null)
                throw new ApiException(400, "Missing required parameter 'waitingRequest' when calling StorefrontApi->GetEmailCommseqStepWaiting");

            var localVarPath = "/storefront/{storefront_oid}/email/commseqs/{commseq_uuid}/waiting";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (storefrontOid != null) localVarPathParams.Add("storefront_oid", Configuration.ApiClient.ParameterToString(storefrontOid)); // path parameter
            if (commseqUuid != null) localVarPathParams.Add("commseq_uuid", Configuration.ApiClient.ParameterToString(commseqUuid)); // path parameter
            if (waitingRequest != null && waitingRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(waitingRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = waitingRequest; // byte array
            }

            // authentication (ultraCartBrowserApiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key")))
            {
                localVarHeaderParams["x-ultracart-browser-key"] = Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key");
            }
            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetEmailCommseqStepWaiting", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EmailStepWaitingResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (EmailStepWaitingResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(EmailStepWaitingResponse)));
        }

        /// <summary>
        /// Get email communication sequence customers waiting at each requested step 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid">null</param>
        /// <param name="commseqUuid">null</param>
        /// <param name="waitingRequest">WaitingRequest</param>
        /// <returns>Task of EmailStepWaitingResponse</returns>
        public async System.Threading.Tasks.Task<EmailStepWaitingResponse> GetEmailCommseqStepWaitingAsync (string storefrontOid, string commseqUuid, EmailStepWaitingRequest waitingRequest)
        {
             ApiResponse<EmailStepWaitingResponse> localVarResponse = await GetEmailCommseqStepWaitingAsyncWithHttpInfo(storefrontOid, commseqUuid, waitingRequest);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get email communication sequence customers waiting at each requested step 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid">null</param>
        /// <param name="commseqUuid">null</param>
        /// <param name="waitingRequest">WaitingRequest</param>
        /// <returns>Task of ApiResponse (EmailStepWaitingResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<EmailStepWaitingResponse>> GetEmailCommseqStepWaitingAsyncWithHttpInfo (string storefrontOid, string commseqUuid, EmailStepWaitingRequest waitingRequest)
        {
            // verify the required parameter 'storefrontOid' is set
            if (storefrontOid == null)
                throw new ApiException(400, "Missing required parameter 'storefrontOid' when calling StorefrontApi->GetEmailCommseqStepWaiting");
            // verify the required parameter 'commseqUuid' is set
            if (commseqUuid == null)
                throw new ApiException(400, "Missing required parameter 'commseqUuid' when calling StorefrontApi->GetEmailCommseqStepWaiting");
            // verify the required parameter 'waitingRequest' is set
            if (waitingRequest == null)
                throw new ApiException(400, "Missing required parameter 'waitingRequest' when calling StorefrontApi->GetEmailCommseqStepWaiting");

            var localVarPath = "/storefront/{storefront_oid}/email/commseqs/{commseq_uuid}/waiting";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (storefrontOid != null) localVarPathParams.Add("storefront_oid", Configuration.ApiClient.ParameterToString(storefrontOid)); // path parameter
            if (commseqUuid != null) localVarPathParams.Add("commseq_uuid", Configuration.ApiClient.ParameterToString(commseqUuid)); // path parameter
            if (waitingRequest != null && waitingRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(waitingRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = waitingRequest; // byte array
            }

            // authentication (ultraCartBrowserApiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key")))
            {
                localVarHeaderParams["x-ultracart-browser-key"] = Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key");
            }
            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetEmailCommseqStepWaiting", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EmailStepWaitingResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (EmailStepWaitingResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(EmailStepWaitingResponse)));
        }

        /// <summary>
        /// Get email commseqs 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid">null</param>
        /// <returns>EmailCommseqsResponse</returns>
        public EmailCommseqsResponse GetEmailCommseqs (string storefrontOid)
        {
             ApiResponse<EmailCommseqsResponse> localVarResponse = GetEmailCommseqsWithHttpInfo(storefrontOid);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get email commseqs 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid">null</param>
        /// <returns>ApiResponse of EmailCommseqsResponse</returns>
        public ApiResponse< EmailCommseqsResponse > GetEmailCommseqsWithHttpInfo (string storefrontOid)
        {
            // verify the required parameter 'storefrontOid' is set
            if (storefrontOid == null)
                throw new ApiException(400, "Missing required parameter 'storefrontOid' when calling StorefrontApi->GetEmailCommseqs");

            var localVarPath = "/storefront/{storefront_oid}/email/commseqs";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (storefrontOid != null) localVarPathParams.Add("storefront_oid", Configuration.ApiClient.ParameterToString(storefrontOid)); // path parameter

            // authentication (ultraCartBrowserApiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key")))
            {
                localVarHeaderParams["x-ultracart-browser-key"] = Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key");
            }
            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetEmailCommseqs", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EmailCommseqsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (EmailCommseqsResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(EmailCommseqsResponse)));
        }

        /// <summary>
        /// Get email commseqs 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid">null</param>
        /// <returns>Task of EmailCommseqsResponse</returns>
        public async System.Threading.Tasks.Task<EmailCommseqsResponse> GetEmailCommseqsAsync (string storefrontOid)
        {
             ApiResponse<EmailCommseqsResponse> localVarResponse = await GetEmailCommseqsAsyncWithHttpInfo(storefrontOid);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get email commseqs 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid">null</param>
        /// <returns>Task of ApiResponse (EmailCommseqsResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<EmailCommseqsResponse>> GetEmailCommseqsAsyncWithHttpInfo (string storefrontOid)
        {
            // verify the required parameter 'storefrontOid' is set
            if (storefrontOid == null)
                throw new ApiException(400, "Missing required parameter 'storefrontOid' when calling StorefrontApi->GetEmailCommseqs");

            var localVarPath = "/storefront/{storefront_oid}/email/commseqs";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (storefrontOid != null) localVarPathParams.Add("storefront_oid", Configuration.ApiClient.ParameterToString(storefrontOid)); // path parameter

            // authentication (ultraCartBrowserApiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key")))
            {
                localVarHeaderParams["x-ultracart-browser-key"] = Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key");
            }
            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetEmailCommseqs", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EmailCommseqsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (EmailCommseqsResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(EmailCommseqsResponse)));
        }

        /// <summary>
        /// Get email dashboard activity 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid">null</param>
        /// <param name="lastRecords">null (optional)</param>
        /// <returns>EmailDashboardActivityResponse</returns>
        public EmailDashboardActivityResponse GetEmailDashboardActivity (string storefrontOid, int? lastRecords = null)
        {
             ApiResponse<EmailDashboardActivityResponse> localVarResponse = GetEmailDashboardActivityWithHttpInfo(storefrontOid, lastRecords);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get email dashboard activity 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid">null</param>
        /// <param name="lastRecords">null (optional)</param>
        /// <returns>ApiResponse of EmailDashboardActivityResponse</returns>
        public ApiResponse< EmailDashboardActivityResponse > GetEmailDashboardActivityWithHttpInfo (string storefrontOid, int? lastRecords = null)
        {
            // verify the required parameter 'storefrontOid' is set
            if (storefrontOid == null)
                throw new ApiException(400, "Missing required parameter 'storefrontOid' when calling StorefrontApi->GetEmailDashboardActivity");

            var localVarPath = "/storefront/{storefront_oid}/email/dashboard_activity";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (storefrontOid != null) localVarPathParams.Add("storefront_oid", Configuration.ApiClient.ParameterToString(storefrontOid)); // path parameter
            if (lastRecords != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "last_records", lastRecords)); // query parameter

            // authentication (ultraCartBrowserApiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key")))
            {
                localVarHeaderParams["x-ultracart-browser-key"] = Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key");
            }
            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetEmailDashboardActivity", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EmailDashboardActivityResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (EmailDashboardActivityResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(EmailDashboardActivityResponse)));
        }

        /// <summary>
        /// Get email dashboard activity 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid">null</param>
        /// <param name="lastRecords">null (optional)</param>
        /// <returns>Task of EmailDashboardActivityResponse</returns>
        public async System.Threading.Tasks.Task<EmailDashboardActivityResponse> GetEmailDashboardActivityAsync (string storefrontOid, int? lastRecords = null)
        {
             ApiResponse<EmailDashboardActivityResponse> localVarResponse = await GetEmailDashboardActivityAsyncWithHttpInfo(storefrontOid, lastRecords);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get email dashboard activity 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid">null</param>
        /// <param name="lastRecords">null (optional)</param>
        /// <returns>Task of ApiResponse (EmailDashboardActivityResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<EmailDashboardActivityResponse>> GetEmailDashboardActivityAsyncWithHttpInfo (string storefrontOid, int? lastRecords = null)
        {
            // verify the required parameter 'storefrontOid' is set
            if (storefrontOid == null)
                throw new ApiException(400, "Missing required parameter 'storefrontOid' when calling StorefrontApi->GetEmailDashboardActivity");

            var localVarPath = "/storefront/{storefront_oid}/email/dashboard_activity";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (storefrontOid != null) localVarPathParams.Add("storefront_oid", Configuration.ApiClient.ParameterToString(storefrontOid)); // path parameter
            if (lastRecords != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "last_records", lastRecords)); // query parameter

            // authentication (ultraCartBrowserApiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key")))
            {
                localVarHeaderParams["x-ultracart-browser-key"] = Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key");
            }
            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetEmailDashboardActivity", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EmailDashboardActivityResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (EmailDashboardActivityResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(EmailDashboardActivityResponse)));
        }

        /// <summary>
        /// Get dashboard stats 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid">null</param>
        /// <param name="days">null (optional)</param>
        /// <returns>EmailDashboardStatsResponse</returns>
        public EmailDashboardStatsResponse GetEmailDashboardStats (string storefrontOid, int? days = null)
        {
             ApiResponse<EmailDashboardStatsResponse> localVarResponse = GetEmailDashboardStatsWithHttpInfo(storefrontOid, days);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get dashboard stats 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid">null</param>
        /// <param name="days">null (optional)</param>
        /// <returns>ApiResponse of EmailDashboardStatsResponse</returns>
        public ApiResponse< EmailDashboardStatsResponse > GetEmailDashboardStatsWithHttpInfo (string storefrontOid, int? days = null)
        {
            // verify the required parameter 'storefrontOid' is set
            if (storefrontOid == null)
                throw new ApiException(400, "Missing required parameter 'storefrontOid' when calling StorefrontApi->GetEmailDashboardStats");

            var localVarPath = "/storefront/{storefront_oid}/email/dashboard_stats";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (storefrontOid != null) localVarPathParams.Add("storefront_oid", Configuration.ApiClient.ParameterToString(storefrontOid)); // path parameter
            if (days != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "days", days)); // query parameter

            // authentication (ultraCartBrowserApiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key")))
            {
                localVarHeaderParams["x-ultracart-browser-key"] = Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key");
            }
            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetEmailDashboardStats", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EmailDashboardStatsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (EmailDashboardStatsResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(EmailDashboardStatsResponse)));
        }

        /// <summary>
        /// Get dashboard stats 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid">null</param>
        /// <param name="days">null (optional)</param>
        /// <returns>Task of EmailDashboardStatsResponse</returns>
        public async System.Threading.Tasks.Task<EmailDashboardStatsResponse> GetEmailDashboardStatsAsync (string storefrontOid, int? days = null)
        {
             ApiResponse<EmailDashboardStatsResponse> localVarResponse = await GetEmailDashboardStatsAsyncWithHttpInfo(storefrontOid, days);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get dashboard stats 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid">null</param>
        /// <param name="days">null (optional)</param>
        /// <returns>Task of ApiResponse (EmailDashboardStatsResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<EmailDashboardStatsResponse>> GetEmailDashboardStatsAsyncWithHttpInfo (string storefrontOid, int? days = null)
        {
            // verify the required parameter 'storefrontOid' is set
            if (storefrontOid == null)
                throw new ApiException(400, "Missing required parameter 'storefrontOid' when calling StorefrontApi->GetEmailDashboardStats");

            var localVarPath = "/storefront/{storefront_oid}/email/dashboard_stats";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (storefrontOid != null) localVarPathParams.Add("storefront_oid", Configuration.ApiClient.ParameterToString(storefrontOid)); // path parameter
            if (days != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "days", days)); // query parameter

            // authentication (ultraCartBrowserApiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key")))
            {
                localVarHeaderParams["x-ultracart-browser-key"] = Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key");
            }
            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetEmailDashboardStats", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EmailDashboardStatsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (EmailDashboardStatsResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(EmailDashboardStatsResponse)));
        }

        /// <summary>
        /// Get email email 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid">null</param>
        /// <param name="commseqEmailUuid">null</param>
        /// <returns>EmailCommseqEmailResponse</returns>
        public EmailCommseqEmailResponse GetEmailEmail (string storefrontOid, string commseqEmailUuid)
        {
             ApiResponse<EmailCommseqEmailResponse> localVarResponse = GetEmailEmailWithHttpInfo(storefrontOid, commseqEmailUuid);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get email email 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid">null</param>
        /// <param name="commseqEmailUuid">null</param>
        /// <returns>ApiResponse of EmailCommseqEmailResponse</returns>
        public ApiResponse< EmailCommseqEmailResponse > GetEmailEmailWithHttpInfo (string storefrontOid, string commseqEmailUuid)
        {
            // verify the required parameter 'storefrontOid' is set
            if (storefrontOid == null)
                throw new ApiException(400, "Missing required parameter 'storefrontOid' when calling StorefrontApi->GetEmailEmail");
            // verify the required parameter 'commseqEmailUuid' is set
            if (commseqEmailUuid == null)
                throw new ApiException(400, "Missing required parameter 'commseqEmailUuid' when calling StorefrontApi->GetEmailEmail");

            var localVarPath = "/storefront/{storefront_oid}/email/emails/{commseq_email_uuid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (storefrontOid != null) localVarPathParams.Add("storefront_oid", Configuration.ApiClient.ParameterToString(storefrontOid)); // path parameter
            if (commseqEmailUuid != null) localVarPathParams.Add("commseq_email_uuid", Configuration.ApiClient.ParameterToString(commseqEmailUuid)); // path parameter

            // authentication (ultraCartBrowserApiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key")))
            {
                localVarHeaderParams["x-ultracart-browser-key"] = Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key");
            }
            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetEmailEmail", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EmailCommseqEmailResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (EmailCommseqEmailResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(EmailCommseqEmailResponse)));
        }

        /// <summary>
        /// Get email email 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid">null</param>
        /// <param name="commseqEmailUuid">null</param>
        /// <returns>Task of EmailCommseqEmailResponse</returns>
        public async System.Threading.Tasks.Task<EmailCommseqEmailResponse> GetEmailEmailAsync (string storefrontOid, string commseqEmailUuid)
        {
             ApiResponse<EmailCommseqEmailResponse> localVarResponse = await GetEmailEmailAsyncWithHttpInfo(storefrontOid, commseqEmailUuid);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get email email 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid">null</param>
        /// <param name="commseqEmailUuid">null</param>
        /// <returns>Task of ApiResponse (EmailCommseqEmailResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<EmailCommseqEmailResponse>> GetEmailEmailAsyncWithHttpInfo (string storefrontOid, string commseqEmailUuid)
        {
            // verify the required parameter 'storefrontOid' is set
            if (storefrontOid == null)
                throw new ApiException(400, "Missing required parameter 'storefrontOid' when calling StorefrontApi->GetEmailEmail");
            // verify the required parameter 'commseqEmailUuid' is set
            if (commseqEmailUuid == null)
                throw new ApiException(400, "Missing required parameter 'commseqEmailUuid' when calling StorefrontApi->GetEmailEmail");

            var localVarPath = "/storefront/{storefront_oid}/email/emails/{commseq_email_uuid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (storefrontOid != null) localVarPathParams.Add("storefront_oid", Configuration.ApiClient.ParameterToString(storefrontOid)); // path parameter
            if (commseqEmailUuid != null) localVarPathParams.Add("commseq_email_uuid", Configuration.ApiClient.ParameterToString(commseqEmailUuid)); // path parameter

            // authentication (ultraCartBrowserApiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key")))
            {
                localVarHeaderParams["x-ultracart-browser-key"] = Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key");
            }
            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetEmailEmail", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EmailCommseqEmailResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (EmailCommseqEmailResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(EmailCommseqEmailResponse)));
        }

        /// <summary>
        /// Get email emails 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid">null</param>
        /// <returns>EmailCommseqEmailsResponse</returns>
        public EmailCommseqEmailsResponse GetEmailEmails (string storefrontOid)
        {
             ApiResponse<EmailCommseqEmailsResponse> localVarResponse = GetEmailEmailsWithHttpInfo(storefrontOid);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get email emails 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid">null</param>
        /// <returns>ApiResponse of EmailCommseqEmailsResponse</returns>
        public ApiResponse< EmailCommseqEmailsResponse > GetEmailEmailsWithHttpInfo (string storefrontOid)
        {
            // verify the required parameter 'storefrontOid' is set
            if (storefrontOid == null)
                throw new ApiException(400, "Missing required parameter 'storefrontOid' when calling StorefrontApi->GetEmailEmails");

            var localVarPath = "/storefront/{storefront_oid}/email/emails";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (storefrontOid != null) localVarPathParams.Add("storefront_oid", Configuration.ApiClient.ParameterToString(storefrontOid)); // path parameter

            // authentication (ultraCartBrowserApiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key")))
            {
                localVarHeaderParams["x-ultracart-browser-key"] = Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key");
            }
            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetEmailEmails", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EmailCommseqEmailsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (EmailCommseqEmailsResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(EmailCommseqEmailsResponse)));
        }

        /// <summary>
        /// Get email emails 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid">null</param>
        /// <returns>Task of EmailCommseqEmailsResponse</returns>
        public async System.Threading.Tasks.Task<EmailCommseqEmailsResponse> GetEmailEmailsAsync (string storefrontOid)
        {
             ApiResponse<EmailCommseqEmailsResponse> localVarResponse = await GetEmailEmailsAsyncWithHttpInfo(storefrontOid);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get email emails 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid">null</param>
        /// <returns>Task of ApiResponse (EmailCommseqEmailsResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<EmailCommseqEmailsResponse>> GetEmailEmailsAsyncWithHttpInfo (string storefrontOid)
        {
            // verify the required parameter 'storefrontOid' is set
            if (storefrontOid == null)
                throw new ApiException(400, "Missing required parameter 'storefrontOid' when calling StorefrontApi->GetEmailEmails");

            var localVarPath = "/storefront/{storefront_oid}/email/emails";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (storefrontOid != null) localVarPathParams.Add("storefront_oid", Configuration.ApiClient.ParameterToString(storefrontOid)); // path parameter

            // authentication (ultraCartBrowserApiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key")))
            {
                localVarHeaderParams["x-ultracart-browser-key"] = Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key");
            }
            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetEmailEmails", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EmailCommseqEmailsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (EmailCommseqEmailsResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(EmailCommseqEmailsResponse)));
        }

        /// <summary>
        /// Get email emails multiple 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid">null</param>
        /// <param name="emailCommseqEmailsRequest">Request of email uuids</param>
        /// <returns>EmailCommseqEmailsResponse</returns>
        public EmailCommseqEmailsResponse GetEmailEmailsMultiple (string storefrontOid, EmailCommseqEmailsRequest emailCommseqEmailsRequest)
        {
             ApiResponse<EmailCommseqEmailsResponse> localVarResponse = GetEmailEmailsMultipleWithHttpInfo(storefrontOid, emailCommseqEmailsRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get email emails multiple 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid">null</param>
        /// <param name="emailCommseqEmailsRequest">Request of email uuids</param>
        /// <returns>ApiResponse of EmailCommseqEmailsResponse</returns>
        public ApiResponse< EmailCommseqEmailsResponse > GetEmailEmailsMultipleWithHttpInfo (string storefrontOid, EmailCommseqEmailsRequest emailCommseqEmailsRequest)
        {
            // verify the required parameter 'storefrontOid' is set
            if (storefrontOid == null)
                throw new ApiException(400, "Missing required parameter 'storefrontOid' when calling StorefrontApi->GetEmailEmailsMultiple");
            // verify the required parameter 'emailCommseqEmailsRequest' is set
            if (emailCommseqEmailsRequest == null)
                throw new ApiException(400, "Missing required parameter 'emailCommseqEmailsRequest' when calling StorefrontApi->GetEmailEmailsMultiple");

            var localVarPath = "/storefront/{storefront_oid}/email/emails/multiple";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (storefrontOid != null) localVarPathParams.Add("storefront_oid", Configuration.ApiClient.ParameterToString(storefrontOid)); // path parameter
            if (emailCommseqEmailsRequest != null && emailCommseqEmailsRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(emailCommseqEmailsRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = emailCommseqEmailsRequest; // byte array
            }

            // authentication (ultraCartBrowserApiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key")))
            {
                localVarHeaderParams["x-ultracart-browser-key"] = Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key");
            }
            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetEmailEmailsMultiple", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EmailCommseqEmailsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (EmailCommseqEmailsResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(EmailCommseqEmailsResponse)));
        }

        /// <summary>
        /// Get email emails multiple 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid">null</param>
        /// <param name="emailCommseqEmailsRequest">Request of email uuids</param>
        /// <returns>Task of EmailCommseqEmailsResponse</returns>
        public async System.Threading.Tasks.Task<EmailCommseqEmailsResponse> GetEmailEmailsMultipleAsync (string storefrontOid, EmailCommseqEmailsRequest emailCommseqEmailsRequest)
        {
             ApiResponse<EmailCommseqEmailsResponse> localVarResponse = await GetEmailEmailsMultipleAsyncWithHttpInfo(storefrontOid, emailCommseqEmailsRequest);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get email emails multiple 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid">null</param>
        /// <param name="emailCommseqEmailsRequest">Request of email uuids</param>
        /// <returns>Task of ApiResponse (EmailCommseqEmailsResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<EmailCommseqEmailsResponse>> GetEmailEmailsMultipleAsyncWithHttpInfo (string storefrontOid, EmailCommseqEmailsRequest emailCommseqEmailsRequest)
        {
            // verify the required parameter 'storefrontOid' is set
            if (storefrontOid == null)
                throw new ApiException(400, "Missing required parameter 'storefrontOid' when calling StorefrontApi->GetEmailEmailsMultiple");
            // verify the required parameter 'emailCommseqEmailsRequest' is set
            if (emailCommseqEmailsRequest == null)
                throw new ApiException(400, "Missing required parameter 'emailCommseqEmailsRequest' when calling StorefrontApi->GetEmailEmailsMultiple");

            var localVarPath = "/storefront/{storefront_oid}/email/emails/multiple";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (storefrontOid != null) localVarPathParams.Add("storefront_oid", Configuration.ApiClient.ParameterToString(storefrontOid)); // path parameter
            if (emailCommseqEmailsRequest != null && emailCommseqEmailsRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(emailCommseqEmailsRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = emailCommseqEmailsRequest; // byte array
            }

            // authentication (ultraCartBrowserApiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key")))
            {
                localVarHeaderParams["x-ultracart-browser-key"] = Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key");
            }
            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetEmailEmailsMultiple", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EmailCommseqEmailsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (EmailCommseqEmailsResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(EmailCommseqEmailsResponse)));
        }

        /// <summary>
        /// Get email flow 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid">null</param>
        /// <param name="emailFlowUuid">null</param>
        /// <returns>EmailFlowResponse</returns>
        public EmailFlowResponse GetEmailFlow (string storefrontOid, string emailFlowUuid)
        {
             ApiResponse<EmailFlowResponse> localVarResponse = GetEmailFlowWithHttpInfo(storefrontOid, emailFlowUuid);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get email flow 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid">null</param>
        /// <param name="emailFlowUuid">null</param>
        /// <returns>ApiResponse of EmailFlowResponse</returns>
        public ApiResponse< EmailFlowResponse > GetEmailFlowWithHttpInfo (string storefrontOid, string emailFlowUuid)
        {
            // verify the required parameter 'storefrontOid' is set
            if (storefrontOid == null)
                throw new ApiException(400, "Missing required parameter 'storefrontOid' when calling StorefrontApi->GetEmailFlow");
            // verify the required parameter 'emailFlowUuid' is set
            if (emailFlowUuid == null)
                throw new ApiException(400, "Missing required parameter 'emailFlowUuid' when calling StorefrontApi->GetEmailFlow");

            var localVarPath = "/storefront/{storefront_oid}/email/flows/{email_flow_uuid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (storefrontOid != null) localVarPathParams.Add("storefront_oid", Configuration.ApiClient.ParameterToString(storefrontOid)); // path parameter
            if (emailFlowUuid != null) localVarPathParams.Add("email_flow_uuid", Configuration.ApiClient.ParameterToString(emailFlowUuid)); // path parameter

            // authentication (ultraCartBrowserApiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key")))
            {
                localVarHeaderParams["x-ultracart-browser-key"] = Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key");
            }
            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetEmailFlow", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EmailFlowResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (EmailFlowResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(EmailFlowResponse)));
        }

        /// <summary>
        /// Get email flow 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid">null</param>
        /// <param name="emailFlowUuid">null</param>
        /// <returns>Task of EmailFlowResponse</returns>
        public async System.Threading.Tasks.Task<EmailFlowResponse> GetEmailFlowAsync (string storefrontOid, string emailFlowUuid)
        {
             ApiResponse<EmailFlowResponse> localVarResponse = await GetEmailFlowAsyncWithHttpInfo(storefrontOid, emailFlowUuid);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get email flow 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid">null</param>
        /// <param name="emailFlowUuid">null</param>
        /// <returns>Task of ApiResponse (EmailFlowResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<EmailFlowResponse>> GetEmailFlowAsyncWithHttpInfo (string storefrontOid, string emailFlowUuid)
        {
            // verify the required parameter 'storefrontOid' is set
            if (storefrontOid == null)
                throw new ApiException(400, "Missing required parameter 'storefrontOid' when calling StorefrontApi->GetEmailFlow");
            // verify the required parameter 'emailFlowUuid' is set
            if (emailFlowUuid == null)
                throw new ApiException(400, "Missing required parameter 'emailFlowUuid' when calling StorefrontApi->GetEmailFlow");

            var localVarPath = "/storefront/{storefront_oid}/email/flows/{email_flow_uuid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (storefrontOid != null) localVarPathParams.Add("storefront_oid", Configuration.ApiClient.ParameterToString(storefrontOid)); // path parameter
            if (emailFlowUuid != null) localVarPathParams.Add("email_flow_uuid", Configuration.ApiClient.ParameterToString(emailFlowUuid)); // path parameter

            // authentication (ultraCartBrowserApiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key")))
            {
                localVarHeaderParams["x-ultracart-browser-key"] = Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key");
            }
            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetEmailFlow", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EmailFlowResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (EmailFlowResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(EmailFlowResponse)));
        }

        /// <summary>
        /// Get email flows 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid">null</param>
        /// <returns>EmailFlowsResponse</returns>
        public EmailFlowsResponse GetEmailFlows (string storefrontOid)
        {
             ApiResponse<EmailFlowsResponse> localVarResponse = GetEmailFlowsWithHttpInfo(storefrontOid);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get email flows 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid">null</param>
        /// <returns>ApiResponse of EmailFlowsResponse</returns>
        public ApiResponse< EmailFlowsResponse > GetEmailFlowsWithHttpInfo (string storefrontOid)
        {
            // verify the required parameter 'storefrontOid' is set
            if (storefrontOid == null)
                throw new ApiException(400, "Missing required parameter 'storefrontOid' when calling StorefrontApi->GetEmailFlows");

            var localVarPath = "/storefront/{storefront_oid}/email/flows";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (storefrontOid != null) localVarPathParams.Add("storefront_oid", Configuration.ApiClient.ParameterToString(storefrontOid)); // path parameter

            // authentication (ultraCartBrowserApiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key")))
            {
                localVarHeaderParams["x-ultracart-browser-key"] = Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key");
            }
            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetEmailFlows", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EmailFlowsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (EmailFlowsResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(EmailFlowsResponse)));
        }

        /// <summary>
        /// Get email flows 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid">null</param>
        /// <returns>Task of EmailFlowsResponse</returns>
        public async System.Threading.Tasks.Task<EmailFlowsResponse> GetEmailFlowsAsync (string storefrontOid)
        {
             ApiResponse<EmailFlowsResponse> localVarResponse = await GetEmailFlowsAsyncWithHttpInfo(storefrontOid);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get email flows 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid">null</param>
        /// <returns>Task of ApiResponse (EmailFlowsResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<EmailFlowsResponse>> GetEmailFlowsAsyncWithHttpInfo (string storefrontOid)
        {
            // verify the required parameter 'storefrontOid' is set
            if (storefrontOid == null)
                throw new ApiException(400, "Missing required parameter 'storefrontOid' when calling StorefrontApi->GetEmailFlows");

            var localVarPath = "/storefront/{storefront_oid}/email/flows";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (storefrontOid != null) localVarPathParams.Add("storefront_oid", Configuration.ApiClient.ParameterToString(storefrontOid)); // path parameter

            // authentication (ultraCartBrowserApiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key")))
            {
                localVarHeaderParams["x-ultracart-browser-key"] = Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key");
            }
            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetEmailFlows", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EmailFlowsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (EmailFlowsResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(EmailFlowsResponse)));
        }

        /// <summary>
        /// Get email list 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid">null</param>
        /// <param name="emailListUuid">null</param>
        /// <returns>EmailListResponse</returns>
        public EmailListResponse GetEmailList (string storefrontOid, string emailListUuid)
        {
             ApiResponse<EmailListResponse> localVarResponse = GetEmailListWithHttpInfo(storefrontOid, emailListUuid);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get email list 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid">null</param>
        /// <param name="emailListUuid">null</param>
        /// <returns>ApiResponse of EmailListResponse</returns>
        public ApiResponse< EmailListResponse > GetEmailListWithHttpInfo (string storefrontOid, string emailListUuid)
        {
            // verify the required parameter 'storefrontOid' is set
            if (storefrontOid == null)
                throw new ApiException(400, "Missing required parameter 'storefrontOid' when calling StorefrontApi->GetEmailList");
            // verify the required parameter 'emailListUuid' is set
            if (emailListUuid == null)
                throw new ApiException(400, "Missing required parameter 'emailListUuid' when calling StorefrontApi->GetEmailList");

            var localVarPath = "/storefront/{storefront_oid}/email/lists/{email_list_uuid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (storefrontOid != null) localVarPathParams.Add("storefront_oid", Configuration.ApiClient.ParameterToString(storefrontOid)); // path parameter
            if (emailListUuid != null) localVarPathParams.Add("email_list_uuid", Configuration.ApiClient.ParameterToString(emailListUuid)); // path parameter

            // authentication (ultraCartBrowserApiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key")))
            {
                localVarHeaderParams["x-ultracart-browser-key"] = Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key");
            }
            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetEmailList", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EmailListResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (EmailListResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(EmailListResponse)));
        }

        /// <summary>
        /// Get email list 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid">null</param>
        /// <param name="emailListUuid">null</param>
        /// <returns>Task of EmailListResponse</returns>
        public async System.Threading.Tasks.Task<EmailListResponse> GetEmailListAsync (string storefrontOid, string emailListUuid)
        {
             ApiResponse<EmailListResponse> localVarResponse = await GetEmailListAsyncWithHttpInfo(storefrontOid, emailListUuid);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get email list 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid">null</param>
        /// <param name="emailListUuid">null</param>
        /// <returns>Task of ApiResponse (EmailListResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<EmailListResponse>> GetEmailListAsyncWithHttpInfo (string storefrontOid, string emailListUuid)
        {
            // verify the required parameter 'storefrontOid' is set
            if (storefrontOid == null)
                throw new ApiException(400, "Missing required parameter 'storefrontOid' when calling StorefrontApi->GetEmailList");
            // verify the required parameter 'emailListUuid' is set
            if (emailListUuid == null)
                throw new ApiException(400, "Missing required parameter 'emailListUuid' when calling StorefrontApi->GetEmailList");

            var localVarPath = "/storefront/{storefront_oid}/email/lists/{email_list_uuid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (storefrontOid != null) localVarPathParams.Add("storefront_oid", Configuration.ApiClient.ParameterToString(storefrontOid)); // path parameter
            if (emailListUuid != null) localVarPathParams.Add("email_list_uuid", Configuration.ApiClient.ParameterToString(emailListUuid)); // path parameter

            // authentication (ultraCartBrowserApiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key")))
            {
                localVarHeaderParams["x-ultracart-browser-key"] = Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key");
            }
            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetEmailList", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EmailListResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (EmailListResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(EmailListResponse)));
        }

        /// <summary>
        /// Get email list customers 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid">null</param>
        /// <param name="emailListUuid">null</param>
        /// <param name="emailCustomerUuid">null</param>
        /// <returns>EmailCustomerEditorUrlResponse</returns>
        public EmailCustomerEditorUrlResponse GetEmailListCustomerEditorUrl (string storefrontOid, string emailListUuid, string emailCustomerUuid)
        {
             ApiResponse<EmailCustomerEditorUrlResponse> localVarResponse = GetEmailListCustomerEditorUrlWithHttpInfo(storefrontOid, emailListUuid, emailCustomerUuid);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get email list customers 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid">null</param>
        /// <param name="emailListUuid">null</param>
        /// <param name="emailCustomerUuid">null</param>
        /// <returns>ApiResponse of EmailCustomerEditorUrlResponse</returns>
        public ApiResponse< EmailCustomerEditorUrlResponse > GetEmailListCustomerEditorUrlWithHttpInfo (string storefrontOid, string emailListUuid, string emailCustomerUuid)
        {
            // verify the required parameter 'storefrontOid' is set
            if (storefrontOid == null)
                throw new ApiException(400, "Missing required parameter 'storefrontOid' when calling StorefrontApi->GetEmailListCustomerEditorUrl");
            // verify the required parameter 'emailListUuid' is set
            if (emailListUuid == null)
                throw new ApiException(400, "Missing required parameter 'emailListUuid' when calling StorefrontApi->GetEmailListCustomerEditorUrl");
            // verify the required parameter 'emailCustomerUuid' is set
            if (emailCustomerUuid == null)
                throw new ApiException(400, "Missing required parameter 'emailCustomerUuid' when calling StorefrontApi->GetEmailListCustomerEditorUrl");

            var localVarPath = "/storefront/{storefront_oid}/email/lists/{email_list_uuid}/customers/{email_customer_uuid}/editor_url";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (storefrontOid != null) localVarPathParams.Add("storefront_oid", Configuration.ApiClient.ParameterToString(storefrontOid)); // path parameter
            if (emailListUuid != null) localVarPathParams.Add("email_list_uuid", Configuration.ApiClient.ParameterToString(emailListUuid)); // path parameter
            if (emailCustomerUuid != null) localVarPathParams.Add("email_customer_uuid", Configuration.ApiClient.ParameterToString(emailCustomerUuid)); // path parameter

            // authentication (ultraCartBrowserApiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key")))
            {
                localVarHeaderParams["x-ultracart-browser-key"] = Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key");
            }
            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetEmailListCustomerEditorUrl", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EmailCustomerEditorUrlResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (EmailCustomerEditorUrlResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(EmailCustomerEditorUrlResponse)));
        }

        /// <summary>
        /// Get email list customers 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid">null</param>
        /// <param name="emailListUuid">null</param>
        /// <param name="emailCustomerUuid">null</param>
        /// <returns>Task of EmailCustomerEditorUrlResponse</returns>
        public async System.Threading.Tasks.Task<EmailCustomerEditorUrlResponse> GetEmailListCustomerEditorUrlAsync (string storefrontOid, string emailListUuid, string emailCustomerUuid)
        {
             ApiResponse<EmailCustomerEditorUrlResponse> localVarResponse = await GetEmailListCustomerEditorUrlAsyncWithHttpInfo(storefrontOid, emailListUuid, emailCustomerUuid);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get email list customers 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid">null</param>
        /// <param name="emailListUuid">null</param>
        /// <param name="emailCustomerUuid">null</param>
        /// <returns>Task of ApiResponse (EmailCustomerEditorUrlResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<EmailCustomerEditorUrlResponse>> GetEmailListCustomerEditorUrlAsyncWithHttpInfo (string storefrontOid, string emailListUuid, string emailCustomerUuid)
        {
            // verify the required parameter 'storefrontOid' is set
            if (storefrontOid == null)
                throw new ApiException(400, "Missing required parameter 'storefrontOid' when calling StorefrontApi->GetEmailListCustomerEditorUrl");
            // verify the required parameter 'emailListUuid' is set
            if (emailListUuid == null)
                throw new ApiException(400, "Missing required parameter 'emailListUuid' when calling StorefrontApi->GetEmailListCustomerEditorUrl");
            // verify the required parameter 'emailCustomerUuid' is set
            if (emailCustomerUuid == null)
                throw new ApiException(400, "Missing required parameter 'emailCustomerUuid' when calling StorefrontApi->GetEmailListCustomerEditorUrl");

            var localVarPath = "/storefront/{storefront_oid}/email/lists/{email_list_uuid}/customers/{email_customer_uuid}/editor_url";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (storefrontOid != null) localVarPathParams.Add("storefront_oid", Configuration.ApiClient.ParameterToString(storefrontOid)); // path parameter
            if (emailListUuid != null) localVarPathParams.Add("email_list_uuid", Configuration.ApiClient.ParameterToString(emailListUuid)); // path parameter
            if (emailCustomerUuid != null) localVarPathParams.Add("email_customer_uuid", Configuration.ApiClient.ParameterToString(emailCustomerUuid)); // path parameter

            // authentication (ultraCartBrowserApiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key")))
            {
                localVarHeaderParams["x-ultracart-browser-key"] = Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key");
            }
            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetEmailListCustomerEditorUrl", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EmailCustomerEditorUrlResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (EmailCustomerEditorUrlResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(EmailCustomerEditorUrlResponse)));
        }

        /// <summary>
        /// Get email list customers 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid">null</param>
        /// <param name="emailListUuid">null</param>
        /// <param name="pageNumber">null (optional)</param>
        /// <param name="pageSize">null (optional)</param>
        /// <returns>EmailListCustomersResponse</returns>
        public EmailListCustomersResponse GetEmailListCustomers (string storefrontOid, string emailListUuid, int? pageNumber = null, int? pageSize = null)
        {
             ApiResponse<EmailListCustomersResponse> localVarResponse = GetEmailListCustomersWithHttpInfo(storefrontOid, emailListUuid, pageNumber, pageSize);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get email list customers 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid">null</param>
        /// <param name="emailListUuid">null</param>
        /// <param name="pageNumber">null (optional)</param>
        /// <param name="pageSize">null (optional)</param>
        /// <returns>ApiResponse of EmailListCustomersResponse</returns>
        public ApiResponse< EmailListCustomersResponse > GetEmailListCustomersWithHttpInfo (string storefrontOid, string emailListUuid, int? pageNumber = null, int? pageSize = null)
        {
            // verify the required parameter 'storefrontOid' is set
            if (storefrontOid == null)
                throw new ApiException(400, "Missing required parameter 'storefrontOid' when calling StorefrontApi->GetEmailListCustomers");
            // verify the required parameter 'emailListUuid' is set
            if (emailListUuid == null)
                throw new ApiException(400, "Missing required parameter 'emailListUuid' when calling StorefrontApi->GetEmailListCustomers");

            var localVarPath = "/storefront/{storefront_oid}/email/lists/{email_list_uuid}/customers";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (storefrontOid != null) localVarPathParams.Add("storefront_oid", Configuration.ApiClient.ParameterToString(storefrontOid)); // path parameter
            if (emailListUuid != null) localVarPathParams.Add("email_list_uuid", Configuration.ApiClient.ParameterToString(emailListUuid)); // path parameter
            if (pageNumber != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "pageNumber", pageNumber)); // query parameter
            if (pageSize != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "pageSize", pageSize)); // query parameter

            // authentication (ultraCartBrowserApiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key")))
            {
                localVarHeaderParams["x-ultracart-browser-key"] = Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key");
            }
            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetEmailListCustomers", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EmailListCustomersResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (EmailListCustomersResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(EmailListCustomersResponse)));
        }

        /// <summary>
        /// Get email list customers 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid">null</param>
        /// <param name="emailListUuid">null</param>
        /// <param name="pageNumber">null (optional)</param>
        /// <param name="pageSize">null (optional)</param>
        /// <returns>Task of EmailListCustomersResponse</returns>
        public async System.Threading.Tasks.Task<EmailListCustomersResponse> GetEmailListCustomersAsync (string storefrontOid, string emailListUuid, int? pageNumber = null, int? pageSize = null)
        {
             ApiResponse<EmailListCustomersResponse> localVarResponse = await GetEmailListCustomersAsyncWithHttpInfo(storefrontOid, emailListUuid, pageNumber, pageSize);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get email list customers 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid">null</param>
        /// <param name="emailListUuid">null</param>
        /// <param name="pageNumber">null (optional)</param>
        /// <param name="pageSize">null (optional)</param>
        /// <returns>Task of ApiResponse (EmailListCustomersResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<EmailListCustomersResponse>> GetEmailListCustomersAsyncWithHttpInfo (string storefrontOid, string emailListUuid, int? pageNumber = null, int? pageSize = null)
        {
            // verify the required parameter 'storefrontOid' is set
            if (storefrontOid == null)
                throw new ApiException(400, "Missing required parameter 'storefrontOid' when calling StorefrontApi->GetEmailListCustomers");
            // verify the required parameter 'emailListUuid' is set
            if (emailListUuid == null)
                throw new ApiException(400, "Missing required parameter 'emailListUuid' when calling StorefrontApi->GetEmailListCustomers");

            var localVarPath = "/storefront/{storefront_oid}/email/lists/{email_list_uuid}/customers";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (storefrontOid != null) localVarPathParams.Add("storefront_oid", Configuration.ApiClient.ParameterToString(storefrontOid)); // path parameter
            if (emailListUuid != null) localVarPathParams.Add("email_list_uuid", Configuration.ApiClient.ParameterToString(emailListUuid)); // path parameter
            if (pageNumber != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "pageNumber", pageNumber)); // query parameter
            if (pageSize != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "pageSize", pageSize)); // query parameter

            // authentication (ultraCartBrowserApiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key")))
            {
                localVarHeaderParams["x-ultracart-browser-key"] = Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key");
            }
            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetEmailListCustomers", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EmailListCustomersResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (EmailListCustomersResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(EmailListCustomersResponse)));
        }

        /// <summary>
        /// Get email lists 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid">null</param>
        /// <returns>EmailListsResponse</returns>
        public EmailListsResponse GetEmailLists (string storefrontOid)
        {
             ApiResponse<EmailListsResponse> localVarResponse = GetEmailListsWithHttpInfo(storefrontOid);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get email lists 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid">null</param>
        /// <returns>ApiResponse of EmailListsResponse</returns>
        public ApiResponse< EmailListsResponse > GetEmailListsWithHttpInfo (string storefrontOid)
        {
            // verify the required parameter 'storefrontOid' is set
            if (storefrontOid == null)
                throw new ApiException(400, "Missing required parameter 'storefrontOid' when calling StorefrontApi->GetEmailLists");

            var localVarPath = "/storefront/{storefront_oid}/email/lists";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (storefrontOid != null) localVarPathParams.Add("storefront_oid", Configuration.ApiClient.ParameterToString(storefrontOid)); // path parameter

            // authentication (ultraCartBrowserApiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key")))
            {
                localVarHeaderParams["x-ultracart-browser-key"] = Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key");
            }
            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetEmailLists", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EmailListsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (EmailListsResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(EmailListsResponse)));
        }

        /// <summary>
        /// Get email lists 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid">null</param>
        /// <returns>Task of EmailListsResponse</returns>
        public async System.Threading.Tasks.Task<EmailListsResponse> GetEmailListsAsync (string storefrontOid)
        {
             ApiResponse<EmailListsResponse> localVarResponse = await GetEmailListsAsyncWithHttpInfo(storefrontOid);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get email lists 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid">null</param>
        /// <returns>Task of ApiResponse (EmailListsResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<EmailListsResponse>> GetEmailListsAsyncWithHttpInfo (string storefrontOid)
        {
            // verify the required parameter 'storefrontOid' is set
            if (storefrontOid == null)
                throw new ApiException(400, "Missing required parameter 'storefrontOid' when calling StorefrontApi->GetEmailLists");

            var localVarPath = "/storefront/{storefront_oid}/email/lists";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (storefrontOid != null) localVarPathParams.Add("storefront_oid", Configuration.ApiClient.ParameterToString(storefrontOid)); // path parameter

            // authentication (ultraCartBrowserApiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key")))
            {
                localVarHeaderParams["x-ultracart-browser-key"] = Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key");
            }
            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetEmailLists", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EmailListsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (EmailListsResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(EmailListsResponse)));
        }

        /// <summary>
        /// Get email segment 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid">null</param>
        /// <param name="emailSegmentUuid">null</param>
        /// <returns>EmailSegmentResponse</returns>
        public EmailSegmentResponse GetEmailSegment (string storefrontOid, string emailSegmentUuid)
        {
             ApiResponse<EmailSegmentResponse> localVarResponse = GetEmailSegmentWithHttpInfo(storefrontOid, emailSegmentUuid);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get email segment 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid">null</param>
        /// <param name="emailSegmentUuid">null</param>
        /// <returns>ApiResponse of EmailSegmentResponse</returns>
        public ApiResponse< EmailSegmentResponse > GetEmailSegmentWithHttpInfo (string storefrontOid, string emailSegmentUuid)
        {
            // verify the required parameter 'storefrontOid' is set
            if (storefrontOid == null)
                throw new ApiException(400, "Missing required parameter 'storefrontOid' when calling StorefrontApi->GetEmailSegment");
            // verify the required parameter 'emailSegmentUuid' is set
            if (emailSegmentUuid == null)
                throw new ApiException(400, "Missing required parameter 'emailSegmentUuid' when calling StorefrontApi->GetEmailSegment");

            var localVarPath = "/storefront/{storefront_oid}/email/segments/{email_segment_uuid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (storefrontOid != null) localVarPathParams.Add("storefront_oid", Configuration.ApiClient.ParameterToString(storefrontOid)); // path parameter
            if (emailSegmentUuid != null) localVarPathParams.Add("email_segment_uuid", Configuration.ApiClient.ParameterToString(emailSegmentUuid)); // path parameter

            // authentication (ultraCartBrowserApiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key")))
            {
                localVarHeaderParams["x-ultracart-browser-key"] = Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key");
            }
            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetEmailSegment", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EmailSegmentResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (EmailSegmentResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(EmailSegmentResponse)));
        }

        /// <summary>
        /// Get email segment 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid">null</param>
        /// <param name="emailSegmentUuid">null</param>
        /// <returns>Task of EmailSegmentResponse</returns>
        public async System.Threading.Tasks.Task<EmailSegmentResponse> GetEmailSegmentAsync (string storefrontOid, string emailSegmentUuid)
        {
             ApiResponse<EmailSegmentResponse> localVarResponse = await GetEmailSegmentAsyncWithHttpInfo(storefrontOid, emailSegmentUuid);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get email segment 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid">null</param>
        /// <param name="emailSegmentUuid">null</param>
        /// <returns>Task of ApiResponse (EmailSegmentResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<EmailSegmentResponse>> GetEmailSegmentAsyncWithHttpInfo (string storefrontOid, string emailSegmentUuid)
        {
            // verify the required parameter 'storefrontOid' is set
            if (storefrontOid == null)
                throw new ApiException(400, "Missing required parameter 'storefrontOid' when calling StorefrontApi->GetEmailSegment");
            // verify the required parameter 'emailSegmentUuid' is set
            if (emailSegmentUuid == null)
                throw new ApiException(400, "Missing required parameter 'emailSegmentUuid' when calling StorefrontApi->GetEmailSegment");

            var localVarPath = "/storefront/{storefront_oid}/email/segments/{email_segment_uuid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (storefrontOid != null) localVarPathParams.Add("storefront_oid", Configuration.ApiClient.ParameterToString(storefrontOid)); // path parameter
            if (emailSegmentUuid != null) localVarPathParams.Add("email_segment_uuid", Configuration.ApiClient.ParameterToString(emailSegmentUuid)); // path parameter

            // authentication (ultraCartBrowserApiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key")))
            {
                localVarHeaderParams["x-ultracart-browser-key"] = Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key");
            }
            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetEmailSegment", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EmailSegmentResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (EmailSegmentResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(EmailSegmentResponse)));
        }

        /// <summary>
        /// Get email segment customers editor URL 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid">null</param>
        /// <param name="emailSegmentUuid">null</param>
        /// <param name="emailCustomerUuid">null</param>
        /// <returns>EmailCustomerEditorUrlResponse</returns>
        public EmailCustomerEditorUrlResponse GetEmailSegmentCustomerEditorUrl (string storefrontOid, string emailSegmentUuid, string emailCustomerUuid)
        {
             ApiResponse<EmailCustomerEditorUrlResponse> localVarResponse = GetEmailSegmentCustomerEditorUrlWithHttpInfo(storefrontOid, emailSegmentUuid, emailCustomerUuid);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get email segment customers editor URL 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid">null</param>
        /// <param name="emailSegmentUuid">null</param>
        /// <param name="emailCustomerUuid">null</param>
        /// <returns>ApiResponse of EmailCustomerEditorUrlResponse</returns>
        public ApiResponse< EmailCustomerEditorUrlResponse > GetEmailSegmentCustomerEditorUrlWithHttpInfo (string storefrontOid, string emailSegmentUuid, string emailCustomerUuid)
        {
            // verify the required parameter 'storefrontOid' is set
            if (storefrontOid == null)
                throw new ApiException(400, "Missing required parameter 'storefrontOid' when calling StorefrontApi->GetEmailSegmentCustomerEditorUrl");
            // verify the required parameter 'emailSegmentUuid' is set
            if (emailSegmentUuid == null)
                throw new ApiException(400, "Missing required parameter 'emailSegmentUuid' when calling StorefrontApi->GetEmailSegmentCustomerEditorUrl");
            // verify the required parameter 'emailCustomerUuid' is set
            if (emailCustomerUuid == null)
                throw new ApiException(400, "Missing required parameter 'emailCustomerUuid' when calling StorefrontApi->GetEmailSegmentCustomerEditorUrl");

            var localVarPath = "/storefront/{storefront_oid}/email/segments/{email_segment_uuid}/customers/{email_customer_uuid}/editor_url";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (storefrontOid != null) localVarPathParams.Add("storefront_oid", Configuration.ApiClient.ParameterToString(storefrontOid)); // path parameter
            if (emailSegmentUuid != null) localVarPathParams.Add("email_segment_uuid", Configuration.ApiClient.ParameterToString(emailSegmentUuid)); // path parameter
            if (emailCustomerUuid != null) localVarPathParams.Add("email_customer_uuid", Configuration.ApiClient.ParameterToString(emailCustomerUuid)); // path parameter

            // authentication (ultraCartBrowserApiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key")))
            {
                localVarHeaderParams["x-ultracart-browser-key"] = Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key");
            }
            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetEmailSegmentCustomerEditorUrl", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EmailCustomerEditorUrlResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (EmailCustomerEditorUrlResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(EmailCustomerEditorUrlResponse)));
        }

        /// <summary>
        /// Get email segment customers editor URL 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid">null</param>
        /// <param name="emailSegmentUuid">null</param>
        /// <param name="emailCustomerUuid">null</param>
        /// <returns>Task of EmailCustomerEditorUrlResponse</returns>
        public async System.Threading.Tasks.Task<EmailCustomerEditorUrlResponse> GetEmailSegmentCustomerEditorUrlAsync (string storefrontOid, string emailSegmentUuid, string emailCustomerUuid)
        {
             ApiResponse<EmailCustomerEditorUrlResponse> localVarResponse = await GetEmailSegmentCustomerEditorUrlAsyncWithHttpInfo(storefrontOid, emailSegmentUuid, emailCustomerUuid);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get email segment customers editor URL 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid">null</param>
        /// <param name="emailSegmentUuid">null</param>
        /// <param name="emailCustomerUuid">null</param>
        /// <returns>Task of ApiResponse (EmailCustomerEditorUrlResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<EmailCustomerEditorUrlResponse>> GetEmailSegmentCustomerEditorUrlAsyncWithHttpInfo (string storefrontOid, string emailSegmentUuid, string emailCustomerUuid)
        {
            // verify the required parameter 'storefrontOid' is set
            if (storefrontOid == null)
                throw new ApiException(400, "Missing required parameter 'storefrontOid' when calling StorefrontApi->GetEmailSegmentCustomerEditorUrl");
            // verify the required parameter 'emailSegmentUuid' is set
            if (emailSegmentUuid == null)
                throw new ApiException(400, "Missing required parameter 'emailSegmentUuid' when calling StorefrontApi->GetEmailSegmentCustomerEditorUrl");
            // verify the required parameter 'emailCustomerUuid' is set
            if (emailCustomerUuid == null)
                throw new ApiException(400, "Missing required parameter 'emailCustomerUuid' when calling StorefrontApi->GetEmailSegmentCustomerEditorUrl");

            var localVarPath = "/storefront/{storefront_oid}/email/segments/{email_segment_uuid}/customers/{email_customer_uuid}/editor_url";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (storefrontOid != null) localVarPathParams.Add("storefront_oid", Configuration.ApiClient.ParameterToString(storefrontOid)); // path parameter
            if (emailSegmentUuid != null) localVarPathParams.Add("email_segment_uuid", Configuration.ApiClient.ParameterToString(emailSegmentUuid)); // path parameter
            if (emailCustomerUuid != null) localVarPathParams.Add("email_customer_uuid", Configuration.ApiClient.ParameterToString(emailCustomerUuid)); // path parameter

            // authentication (ultraCartBrowserApiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key")))
            {
                localVarHeaderParams["x-ultracart-browser-key"] = Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key");
            }
            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetEmailSegmentCustomerEditorUrl", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EmailCustomerEditorUrlResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (EmailCustomerEditorUrlResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(EmailCustomerEditorUrlResponse)));
        }

        /// <summary>
        /// Get email segment customers 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid">null</param>
        /// <param name="emailSegmentUuid">null</param>
        /// <param name="pageNumber">null (optional)</param>
        /// <param name="pageSize">null (optional)</param>
        /// <returns>EmailSegmentCustomersResponse</returns>
        public EmailSegmentCustomersResponse GetEmailSegmentCustomers (string storefrontOid, string emailSegmentUuid, int? pageNumber = null, int? pageSize = null)
        {
             ApiResponse<EmailSegmentCustomersResponse> localVarResponse = GetEmailSegmentCustomersWithHttpInfo(storefrontOid, emailSegmentUuid, pageNumber, pageSize);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get email segment customers 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid">null</param>
        /// <param name="emailSegmentUuid">null</param>
        /// <param name="pageNumber">null (optional)</param>
        /// <param name="pageSize">null (optional)</param>
        /// <returns>ApiResponse of EmailSegmentCustomersResponse</returns>
        public ApiResponse< EmailSegmentCustomersResponse > GetEmailSegmentCustomersWithHttpInfo (string storefrontOid, string emailSegmentUuid, int? pageNumber = null, int? pageSize = null)
        {
            // verify the required parameter 'storefrontOid' is set
            if (storefrontOid == null)
                throw new ApiException(400, "Missing required parameter 'storefrontOid' when calling StorefrontApi->GetEmailSegmentCustomers");
            // verify the required parameter 'emailSegmentUuid' is set
            if (emailSegmentUuid == null)
                throw new ApiException(400, "Missing required parameter 'emailSegmentUuid' when calling StorefrontApi->GetEmailSegmentCustomers");

            var localVarPath = "/storefront/{storefront_oid}/email/segments/{email_segment_uuid}/customers";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (storefrontOid != null) localVarPathParams.Add("storefront_oid", Configuration.ApiClient.ParameterToString(storefrontOid)); // path parameter
            if (emailSegmentUuid != null) localVarPathParams.Add("email_segment_uuid", Configuration.ApiClient.ParameterToString(emailSegmentUuid)); // path parameter
            if (pageNumber != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "pageNumber", pageNumber)); // query parameter
            if (pageSize != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "pageSize", pageSize)); // query parameter

            // authentication (ultraCartBrowserApiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key")))
            {
                localVarHeaderParams["x-ultracart-browser-key"] = Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key");
            }
            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetEmailSegmentCustomers", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EmailSegmentCustomersResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (EmailSegmentCustomersResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(EmailSegmentCustomersResponse)));
        }

        /// <summary>
        /// Get email segment customers 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid">null</param>
        /// <param name="emailSegmentUuid">null</param>
        /// <param name="pageNumber">null (optional)</param>
        /// <param name="pageSize">null (optional)</param>
        /// <returns>Task of EmailSegmentCustomersResponse</returns>
        public async System.Threading.Tasks.Task<EmailSegmentCustomersResponse> GetEmailSegmentCustomersAsync (string storefrontOid, string emailSegmentUuid, int? pageNumber = null, int? pageSize = null)
        {
             ApiResponse<EmailSegmentCustomersResponse> localVarResponse = await GetEmailSegmentCustomersAsyncWithHttpInfo(storefrontOid, emailSegmentUuid, pageNumber, pageSize);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get email segment customers 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid">null</param>
        /// <param name="emailSegmentUuid">null</param>
        /// <param name="pageNumber">null (optional)</param>
        /// <param name="pageSize">null (optional)</param>
        /// <returns>Task of ApiResponse (EmailSegmentCustomersResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<EmailSegmentCustomersResponse>> GetEmailSegmentCustomersAsyncWithHttpInfo (string storefrontOid, string emailSegmentUuid, int? pageNumber = null, int? pageSize = null)
        {
            // verify the required parameter 'storefrontOid' is set
            if (storefrontOid == null)
                throw new ApiException(400, "Missing required parameter 'storefrontOid' when calling StorefrontApi->GetEmailSegmentCustomers");
            // verify the required parameter 'emailSegmentUuid' is set
            if (emailSegmentUuid == null)
                throw new ApiException(400, "Missing required parameter 'emailSegmentUuid' when calling StorefrontApi->GetEmailSegmentCustomers");

            var localVarPath = "/storefront/{storefront_oid}/email/segments/{email_segment_uuid}/customers";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (storefrontOid != null) localVarPathParams.Add("storefront_oid", Configuration.ApiClient.ParameterToString(storefrontOid)); // path parameter
            if (emailSegmentUuid != null) localVarPathParams.Add("email_segment_uuid", Configuration.ApiClient.ParameterToString(emailSegmentUuid)); // path parameter
            if (pageNumber != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "pageNumber", pageNumber)); // query parameter
            if (pageSize != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "pageSize", pageSize)); // query parameter

            // authentication (ultraCartBrowserApiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key")))
            {
                localVarHeaderParams["x-ultracart-browser-key"] = Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key");
            }
            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetEmailSegmentCustomers", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EmailSegmentCustomersResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (EmailSegmentCustomersResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(EmailSegmentCustomersResponse)));
        }

        /// <summary>
        /// Get email segments 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid">null</param>
        /// <returns>EmailSegmentsResponse</returns>
        public EmailSegmentsResponse GetEmailSegments (string storefrontOid)
        {
             ApiResponse<EmailSegmentsResponse> localVarResponse = GetEmailSegmentsWithHttpInfo(storefrontOid);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get email segments 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid">null</param>
        /// <returns>ApiResponse of EmailSegmentsResponse</returns>
        public ApiResponse< EmailSegmentsResponse > GetEmailSegmentsWithHttpInfo (string storefrontOid)
        {
            // verify the required parameter 'storefrontOid' is set
            if (storefrontOid == null)
                throw new ApiException(400, "Missing required parameter 'storefrontOid' when calling StorefrontApi->GetEmailSegments");

            var localVarPath = "/storefront/{storefront_oid}/email/segments";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (storefrontOid != null) localVarPathParams.Add("storefront_oid", Configuration.ApiClient.ParameterToString(storefrontOid)); // path parameter

            // authentication (ultraCartBrowserApiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key")))
            {
                localVarHeaderParams["x-ultracart-browser-key"] = Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key");
            }
            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetEmailSegments", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EmailSegmentsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (EmailSegmentsResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(EmailSegmentsResponse)));
        }

        /// <summary>
        /// Get email segments 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid">null</param>
        /// <returns>Task of EmailSegmentsResponse</returns>
        public async System.Threading.Tasks.Task<EmailSegmentsResponse> GetEmailSegmentsAsync (string storefrontOid)
        {
             ApiResponse<EmailSegmentsResponse> localVarResponse = await GetEmailSegmentsAsyncWithHttpInfo(storefrontOid);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get email segments 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid">null</param>
        /// <returns>Task of ApiResponse (EmailSegmentsResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<EmailSegmentsResponse>> GetEmailSegmentsAsyncWithHttpInfo (string storefrontOid)
        {
            // verify the required parameter 'storefrontOid' is set
            if (storefrontOid == null)
                throw new ApiException(400, "Missing required parameter 'storefrontOid' when calling StorefrontApi->GetEmailSegments");

            var localVarPath = "/storefront/{storefront_oid}/email/segments";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (storefrontOid != null) localVarPathParams.Add("storefront_oid", Configuration.ApiClient.ParameterToString(storefrontOid)); // path parameter

            // authentication (ultraCartBrowserApiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key")))
            {
                localVarHeaderParams["x-ultracart-browser-key"] = Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key");
            }
            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetEmailSegments", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EmailSegmentsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (EmailSegmentsResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(EmailSegmentsResponse)));
        }

        /// <summary>
        /// Get email sending domain 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="domain">null</param>
        /// <returns>EmailSendingDomainResponse</returns>
        public EmailSendingDomainResponse GetEmailSendingDomain (string domain)
        {
             ApiResponse<EmailSendingDomainResponse> localVarResponse = GetEmailSendingDomainWithHttpInfo(domain);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get email sending domain 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="domain">null</param>
        /// <returns>ApiResponse of EmailSendingDomainResponse</returns>
        public ApiResponse< EmailSendingDomainResponse > GetEmailSendingDomainWithHttpInfo (string domain)
        {
            // verify the required parameter 'domain' is set
            if (domain == null)
                throw new ApiException(400, "Missing required parameter 'domain' when calling StorefrontApi->GetEmailSendingDomain");

            var localVarPath = "/storefront/email/sending_domain/{domain}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (domain != null) localVarPathParams.Add("domain", Configuration.ApiClient.ParameterToString(domain)); // path parameter

            // authentication (ultraCartBrowserApiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key")))
            {
                localVarHeaderParams["x-ultracart-browser-key"] = Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key");
            }
            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetEmailSendingDomain", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EmailSendingDomainResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (EmailSendingDomainResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(EmailSendingDomainResponse)));
        }

        /// <summary>
        /// Get email sending domain 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="domain">null</param>
        /// <returns>Task of EmailSendingDomainResponse</returns>
        public async System.Threading.Tasks.Task<EmailSendingDomainResponse> GetEmailSendingDomainAsync (string domain)
        {
             ApiResponse<EmailSendingDomainResponse> localVarResponse = await GetEmailSendingDomainAsyncWithHttpInfo(domain);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get email sending domain 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="domain">null</param>
        /// <returns>Task of ApiResponse (EmailSendingDomainResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<EmailSendingDomainResponse>> GetEmailSendingDomainAsyncWithHttpInfo (string domain)
        {
            // verify the required parameter 'domain' is set
            if (domain == null)
                throw new ApiException(400, "Missing required parameter 'domain' when calling StorefrontApi->GetEmailSendingDomain");

            var localVarPath = "/storefront/email/sending_domain/{domain}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (domain != null) localVarPathParams.Add("domain", Configuration.ApiClient.ParameterToString(domain)); // path parameter

            // authentication (ultraCartBrowserApiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key")))
            {
                localVarHeaderParams["x-ultracart-browser-key"] = Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key");
            }
            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetEmailSendingDomain", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EmailSendingDomainResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (EmailSendingDomainResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(EmailSendingDomainResponse)));
        }

        /// <summary>
        /// Get email sending domain status 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="domain">null</param>
        /// <returns>EmailSendingDomainResponse</returns>
        public EmailSendingDomainResponse GetEmailSendingDomainStatus (string domain)
        {
             ApiResponse<EmailSendingDomainResponse> localVarResponse = GetEmailSendingDomainStatusWithHttpInfo(domain);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get email sending domain status 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="domain">null</param>
        /// <returns>ApiResponse of EmailSendingDomainResponse</returns>
        public ApiResponse< EmailSendingDomainResponse > GetEmailSendingDomainStatusWithHttpInfo (string domain)
        {
            // verify the required parameter 'domain' is set
            if (domain == null)
                throw new ApiException(400, "Missing required parameter 'domain' when calling StorefrontApi->GetEmailSendingDomainStatus");

            var localVarPath = "/storefront/email/sending_domains/{domain}/status";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (domain != null) localVarPathParams.Add("domain", Configuration.ApiClient.ParameterToString(domain)); // path parameter

            // authentication (ultraCartBrowserApiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key")))
            {
                localVarHeaderParams["x-ultracart-browser-key"] = Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key");
            }
            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetEmailSendingDomainStatus", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EmailSendingDomainResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (EmailSendingDomainResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(EmailSendingDomainResponse)));
        }

        /// <summary>
        /// Get email sending domain status 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="domain">null</param>
        /// <returns>Task of EmailSendingDomainResponse</returns>
        public async System.Threading.Tasks.Task<EmailSendingDomainResponse> GetEmailSendingDomainStatusAsync (string domain)
        {
             ApiResponse<EmailSendingDomainResponse> localVarResponse = await GetEmailSendingDomainStatusAsyncWithHttpInfo(domain);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get email sending domain status 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="domain">null</param>
        /// <returns>Task of ApiResponse (EmailSendingDomainResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<EmailSendingDomainResponse>> GetEmailSendingDomainStatusAsyncWithHttpInfo (string domain)
        {
            // verify the required parameter 'domain' is set
            if (domain == null)
                throw new ApiException(400, "Missing required parameter 'domain' when calling StorefrontApi->GetEmailSendingDomainStatus");

            var localVarPath = "/storefront/email/sending_domains/{domain}/status";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (domain != null) localVarPathParams.Add("domain", Configuration.ApiClient.ParameterToString(domain)); // path parameter

            // authentication (ultraCartBrowserApiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key")))
            {
                localVarHeaderParams["x-ultracart-browser-key"] = Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key");
            }
            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetEmailSendingDomainStatus", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EmailSendingDomainResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (EmailSendingDomainResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(EmailSendingDomainResponse)));
        }

        /// <summary>
        /// Get email sending domains 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>EmailSendingDomainsResponse</returns>
        public EmailSendingDomainsResponse GetEmailSendingDomains ()
        {
             ApiResponse<EmailSendingDomainsResponse> localVarResponse = GetEmailSendingDomainsWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get email sending domains 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of EmailSendingDomainsResponse</returns>
        public ApiResponse< EmailSendingDomainsResponse > GetEmailSendingDomainsWithHttpInfo ()
        {

            var localVarPath = "/storefront/email/sending_domains";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (ultraCartBrowserApiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key")))
            {
                localVarHeaderParams["x-ultracart-browser-key"] = Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key");
            }
            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetEmailSendingDomains", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EmailSendingDomainsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (EmailSendingDomainsResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(EmailSendingDomainsResponse)));
        }

        /// <summary>
        /// Get email sending domains 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of EmailSendingDomainsResponse</returns>
        public async System.Threading.Tasks.Task<EmailSendingDomainsResponse> GetEmailSendingDomainsAsync ()
        {
             ApiResponse<EmailSendingDomainsResponse> localVarResponse = await GetEmailSendingDomainsAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get email sending domains 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (EmailSendingDomainsResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<EmailSendingDomainsResponse>> GetEmailSendingDomainsAsyncWithHttpInfo ()
        {

            var localVarPath = "/storefront/email/sending_domains";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (ultraCartBrowserApiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key")))
            {
                localVarHeaderParams["x-ultracart-browser-key"] = Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key");
            }
            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetEmailSendingDomains", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EmailSendingDomainsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (EmailSendingDomainsResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(EmailSendingDomainsResponse)));
        }

        /// <summary>
        /// Get email template 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid">null</param>
        /// <param name="emailTemplateOid">null</param>
        /// <returns>EmailTemplate</returns>
        public EmailTemplate GetEmailTemplate (string storefrontOid, int? emailTemplateOid)
        {
             ApiResponse<EmailTemplate> localVarResponse = GetEmailTemplateWithHttpInfo(storefrontOid, emailTemplateOid);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get email template 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid">null</param>
        /// <param name="emailTemplateOid">null</param>
        /// <returns>ApiResponse of EmailTemplate</returns>
        public ApiResponse< EmailTemplate > GetEmailTemplateWithHttpInfo (string storefrontOid, int? emailTemplateOid)
        {
            // verify the required parameter 'storefrontOid' is set
            if (storefrontOid == null)
                throw new ApiException(400, "Missing required parameter 'storefrontOid' when calling StorefrontApi->GetEmailTemplate");
            // verify the required parameter 'emailTemplateOid' is set
            if (emailTemplateOid == null)
                throw new ApiException(400, "Missing required parameter 'emailTemplateOid' when calling StorefrontApi->GetEmailTemplate");

            var localVarPath = "/storefront/{storefront_oid}/email/templates/{email_template_oid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (storefrontOid != null) localVarPathParams.Add("storefront_oid", Configuration.ApiClient.ParameterToString(storefrontOid)); // path parameter
            if (emailTemplateOid != null) localVarPathParams.Add("email_template_oid", Configuration.ApiClient.ParameterToString(emailTemplateOid)); // path parameter

            // authentication (ultraCartBrowserApiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key")))
            {
                localVarHeaderParams["x-ultracart-browser-key"] = Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key");
            }
            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetEmailTemplate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EmailTemplate>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (EmailTemplate) Configuration.ApiClient.Deserialize(localVarResponse, typeof(EmailTemplate)));
        }

        /// <summary>
        /// Get email template 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid">null</param>
        /// <param name="emailTemplateOid">null</param>
        /// <returns>Task of EmailTemplate</returns>
        public async System.Threading.Tasks.Task<EmailTemplate> GetEmailTemplateAsync (string storefrontOid, int? emailTemplateOid)
        {
             ApiResponse<EmailTemplate> localVarResponse = await GetEmailTemplateAsyncWithHttpInfo(storefrontOid, emailTemplateOid);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get email template 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid">null</param>
        /// <param name="emailTemplateOid">null</param>
        /// <returns>Task of ApiResponse (EmailTemplate)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<EmailTemplate>> GetEmailTemplateAsyncWithHttpInfo (string storefrontOid, int? emailTemplateOid)
        {
            // verify the required parameter 'storefrontOid' is set
            if (storefrontOid == null)
                throw new ApiException(400, "Missing required parameter 'storefrontOid' when calling StorefrontApi->GetEmailTemplate");
            // verify the required parameter 'emailTemplateOid' is set
            if (emailTemplateOid == null)
                throw new ApiException(400, "Missing required parameter 'emailTemplateOid' when calling StorefrontApi->GetEmailTemplate");

            var localVarPath = "/storefront/{storefront_oid}/email/templates/{email_template_oid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (storefrontOid != null) localVarPathParams.Add("storefront_oid", Configuration.ApiClient.ParameterToString(storefrontOid)); // path parameter
            if (emailTemplateOid != null) localVarPathParams.Add("email_template_oid", Configuration.ApiClient.ParameterToString(emailTemplateOid)); // path parameter

            // authentication (ultraCartBrowserApiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key")))
            {
                localVarHeaderParams["x-ultracart-browser-key"] = Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key");
            }
            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetEmailTemplate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EmailTemplate>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (EmailTemplate) Configuration.ApiClient.Deserialize(localVarResponse, typeof(EmailTemplate)));
        }

        /// <summary>
        /// Get email templates 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid">null</param>
        /// <param name="triggerType">null (optional)</param>
        /// <returns>EmailTemplatesResponse</returns>
        public EmailTemplatesResponse GetEmailTemplates (string storefrontOid, string triggerType = null)
        {
             ApiResponse<EmailTemplatesResponse> localVarResponse = GetEmailTemplatesWithHttpInfo(storefrontOid, triggerType);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get email templates 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid">null</param>
        /// <param name="triggerType">null (optional)</param>
        /// <returns>ApiResponse of EmailTemplatesResponse</returns>
        public ApiResponse< EmailTemplatesResponse > GetEmailTemplatesWithHttpInfo (string storefrontOid, string triggerType = null)
        {
            // verify the required parameter 'storefrontOid' is set
            if (storefrontOid == null)
                throw new ApiException(400, "Missing required parameter 'storefrontOid' when calling StorefrontApi->GetEmailTemplates");

            var localVarPath = "/storefront/{storefront_oid}/email/templates";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (storefrontOid != null) localVarPathParams.Add("storefront_oid", Configuration.ApiClient.ParameterToString(storefrontOid)); // path parameter
            if (triggerType != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "trigger_type", triggerType)); // query parameter

            // authentication (ultraCartBrowserApiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key")))
            {
                localVarHeaderParams["x-ultracart-browser-key"] = Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key");
            }
            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetEmailTemplates", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EmailTemplatesResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (EmailTemplatesResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(EmailTemplatesResponse)));
        }

        /// <summary>
        /// Get email templates 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid">null</param>
        /// <param name="triggerType">null (optional)</param>
        /// <returns>Task of EmailTemplatesResponse</returns>
        public async System.Threading.Tasks.Task<EmailTemplatesResponse> GetEmailTemplatesAsync (string storefrontOid, string triggerType = null)
        {
             ApiResponse<EmailTemplatesResponse> localVarResponse = await GetEmailTemplatesAsyncWithHttpInfo(storefrontOid, triggerType);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get email templates 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid">null</param>
        /// <param name="triggerType">null (optional)</param>
        /// <returns>Task of ApiResponse (EmailTemplatesResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<EmailTemplatesResponse>> GetEmailTemplatesAsyncWithHttpInfo (string storefrontOid, string triggerType = null)
        {
            // verify the required parameter 'storefrontOid' is set
            if (storefrontOid == null)
                throw new ApiException(400, "Missing required parameter 'storefrontOid' when calling StorefrontApi->GetEmailTemplates");

            var localVarPath = "/storefront/{storefront_oid}/email/templates";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (storefrontOid != null) localVarPathParams.Add("storefront_oid", Configuration.ApiClient.ParameterToString(storefrontOid)); // path parameter
            if (triggerType != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "trigger_type", triggerType)); // query parameter

            // authentication (ultraCartBrowserApiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key")))
            {
                localVarHeaderParams["x-ultracart-browser-key"] = Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key");
            }
            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetEmailTemplates", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EmailTemplatesResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (EmailTemplatesResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(EmailTemplatesResponse)));
        }

        /// <summary>
        /// Get a list of third party email providers 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid">null</param>
        /// <returns>EmailThirdPartyProvidersResponse</returns>
        public EmailThirdPartyProvidersResponse GetEmailThirdPartyProviders (string storefrontOid)
        {
             ApiResponse<EmailThirdPartyProvidersResponse> localVarResponse = GetEmailThirdPartyProvidersWithHttpInfo(storefrontOid);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a list of third party email providers 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid">null</param>
        /// <returns>ApiResponse of EmailThirdPartyProvidersResponse</returns>
        public ApiResponse< EmailThirdPartyProvidersResponse > GetEmailThirdPartyProvidersWithHttpInfo (string storefrontOid)
        {
            // verify the required parameter 'storefrontOid' is set
            if (storefrontOid == null)
                throw new ApiException(400, "Missing required parameter 'storefrontOid' when calling StorefrontApi->GetEmailThirdPartyProviders");

            var localVarPath = "/storefront/{storefront_oid}/email/third_party_providers";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (storefrontOid != null) localVarPathParams.Add("storefront_oid", Configuration.ApiClient.ParameterToString(storefrontOid)); // path parameter

            // authentication (ultraCartBrowserApiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key")))
            {
                localVarHeaderParams["x-ultracart-browser-key"] = Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key");
            }
            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetEmailThirdPartyProviders", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EmailThirdPartyProvidersResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (EmailThirdPartyProvidersResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(EmailThirdPartyProvidersResponse)));
        }

        /// <summary>
        /// Get a list of third party email providers 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid">null</param>
        /// <returns>Task of EmailThirdPartyProvidersResponse</returns>
        public async System.Threading.Tasks.Task<EmailThirdPartyProvidersResponse> GetEmailThirdPartyProvidersAsync (string storefrontOid)
        {
             ApiResponse<EmailThirdPartyProvidersResponse> localVarResponse = await GetEmailThirdPartyProvidersAsyncWithHttpInfo(storefrontOid);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a list of third party email providers 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid">null</param>
        /// <returns>Task of ApiResponse (EmailThirdPartyProvidersResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<EmailThirdPartyProvidersResponse>> GetEmailThirdPartyProvidersAsyncWithHttpInfo (string storefrontOid)
        {
            // verify the required parameter 'storefrontOid' is set
            if (storefrontOid == null)
                throw new ApiException(400, "Missing required parameter 'storefrontOid' when calling StorefrontApi->GetEmailThirdPartyProviders");

            var localVarPath = "/storefront/{storefront_oid}/email/third_party_providers";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (storefrontOid != null) localVarPathParams.Add("storefront_oid", Configuration.ApiClient.ParameterToString(storefrontOid)); // path parameter

            // authentication (ultraCartBrowserApiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key")))
            {
                localVarHeaderParams["x-ultracart-browser-key"] = Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key");
            }
            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetEmailThirdPartyProviders", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EmailThirdPartyProvidersResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (EmailThirdPartyProvidersResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(EmailThirdPartyProvidersResponse)));
        }

        /// <summary>
        /// Get experiments 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid">null</param>
        /// <returns>ExperimentsResponse</returns>
        public ExperimentsResponse GetExperiments (string storefrontOid)
        {
             ApiResponse<ExperimentsResponse> localVarResponse = GetExperimentsWithHttpInfo(storefrontOid);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get experiments 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid">null</param>
        /// <returns>ApiResponse of ExperimentsResponse</returns>
        public ApiResponse< ExperimentsResponse > GetExperimentsWithHttpInfo (string storefrontOid)
        {
            // verify the required parameter 'storefrontOid' is set
            if (storefrontOid == null)
                throw new ApiException(400, "Missing required parameter 'storefrontOid' when calling StorefrontApi->GetExperiments");

            var localVarPath = "/storefront/{storefront_oid}/experiments";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (storefrontOid != null) localVarPathParams.Add("storefront_oid", Configuration.ApiClient.ParameterToString(storefrontOid)); // path parameter

            // authentication (ultraCartBrowserApiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key")))
            {
                localVarHeaderParams["x-ultracart-browser-key"] = Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key");
            }
            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetExperiments", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ExperimentsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ExperimentsResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ExperimentsResponse)));
        }

        /// <summary>
        /// Get experiments 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid">null</param>
        /// <returns>Task of ExperimentsResponse</returns>
        public async System.Threading.Tasks.Task<ExperimentsResponse> GetExperimentsAsync (string storefrontOid)
        {
             ApiResponse<ExperimentsResponse> localVarResponse = await GetExperimentsAsyncWithHttpInfo(storefrontOid);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get experiments 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid">null</param>
        /// <returns>Task of ApiResponse (ExperimentsResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ExperimentsResponse>> GetExperimentsAsyncWithHttpInfo (string storefrontOid)
        {
            // verify the required parameter 'storefrontOid' is set
            if (storefrontOid == null)
                throw new ApiException(400, "Missing required parameter 'storefrontOid' when calling StorefrontApi->GetExperiments");

            var localVarPath = "/storefront/{storefront_oid}/experiments";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (storefrontOid != null) localVarPathParams.Add("storefront_oid", Configuration.ApiClient.ParameterToString(storefrontOid)); // path parameter

            // authentication (ultraCartBrowserApiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key")))
            {
                localVarHeaderParams["x-ultracart-browser-key"] = Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key");
            }
            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetExperiments", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ExperimentsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ExperimentsResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ExperimentsResponse)));
        }

        /// <summary>
        /// Get histogram property names Obtain a list of property names for a given property type 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid">null</param>
        /// <param name="propertyType">null (optional)</param>
        /// <returns>EmailHistogramPropertyNamesResponse</returns>
        public EmailHistogramPropertyNamesResponse GetHistogramPropertyNames (string storefrontOid, string propertyType = null)
        {
             ApiResponse<EmailHistogramPropertyNamesResponse> localVarResponse = GetHistogramPropertyNamesWithHttpInfo(storefrontOid, propertyType);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get histogram property names Obtain a list of property names for a given property type 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid">null</param>
        /// <param name="propertyType">null (optional)</param>
        /// <returns>ApiResponse of EmailHistogramPropertyNamesResponse</returns>
        public ApiResponse< EmailHistogramPropertyNamesResponse > GetHistogramPropertyNamesWithHttpInfo (string storefrontOid, string propertyType = null)
        {
            // verify the required parameter 'storefrontOid' is set
            if (storefrontOid == null)
                throw new ApiException(400, "Missing required parameter 'storefrontOid' when calling StorefrontApi->GetHistogramPropertyNames");

            var localVarPath = "/storefront/{storefront_oid}/email/histogram/property_names";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (storefrontOid != null) localVarPathParams.Add("storefront_oid", Configuration.ApiClient.ParameterToString(storefrontOid)); // path parameter
            if (propertyType != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "property_type", propertyType)); // query parameter

            // authentication (ultraCartBrowserApiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key")))
            {
                localVarHeaderParams["x-ultracart-browser-key"] = Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key");
            }
            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetHistogramPropertyNames", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EmailHistogramPropertyNamesResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (EmailHistogramPropertyNamesResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(EmailHistogramPropertyNamesResponse)));
        }

        /// <summary>
        /// Get histogram property names Obtain a list of property names for a given property type 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid">null</param>
        /// <param name="propertyType">null (optional)</param>
        /// <returns>Task of EmailHistogramPropertyNamesResponse</returns>
        public async System.Threading.Tasks.Task<EmailHistogramPropertyNamesResponse> GetHistogramPropertyNamesAsync (string storefrontOid, string propertyType = null)
        {
             ApiResponse<EmailHistogramPropertyNamesResponse> localVarResponse = await GetHistogramPropertyNamesAsyncWithHttpInfo(storefrontOid, propertyType);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get histogram property names Obtain a list of property names for a given property type 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid">null</param>
        /// <param name="propertyType">null (optional)</param>
        /// <returns>Task of ApiResponse (EmailHistogramPropertyNamesResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<EmailHistogramPropertyNamesResponse>> GetHistogramPropertyNamesAsyncWithHttpInfo (string storefrontOid, string propertyType = null)
        {
            // verify the required parameter 'storefrontOid' is set
            if (storefrontOid == null)
                throw new ApiException(400, "Missing required parameter 'storefrontOid' when calling StorefrontApi->GetHistogramPropertyNames");

            var localVarPath = "/storefront/{storefront_oid}/email/histogram/property_names";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (storefrontOid != null) localVarPathParams.Add("storefront_oid", Configuration.ApiClient.ParameterToString(storefrontOid)); // path parameter
            if (propertyType != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "property_type", propertyType)); // query parameter

            // authentication (ultraCartBrowserApiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key")))
            {
                localVarHeaderParams["x-ultracart-browser-key"] = Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key");
            }
            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetHistogramPropertyNames", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EmailHistogramPropertyNamesResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (EmailHistogramPropertyNamesResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(EmailHistogramPropertyNamesResponse)));
        }

        /// <summary>
        /// Get histogram property values Obtain a list of property values for a given property name and type 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid">null</param>
        /// <param name="propertyName">null (optional)</param>
        /// <param name="propertyType">null (optional)</param>
        /// <param name="limit">null (optional)</param>
        /// <returns>EmailHistogramPropertyValuesResponse</returns>
        public EmailHistogramPropertyValuesResponse GetHistogramPropertyValues (string storefrontOid, string propertyName = null, string propertyType = null, int? limit = null)
        {
             ApiResponse<EmailHistogramPropertyValuesResponse> localVarResponse = GetHistogramPropertyValuesWithHttpInfo(storefrontOid, propertyName, propertyType, limit);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get histogram property values Obtain a list of property values for a given property name and type 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid">null</param>
        /// <param name="propertyName">null (optional)</param>
        /// <param name="propertyType">null (optional)</param>
        /// <param name="limit">null (optional)</param>
        /// <returns>ApiResponse of EmailHistogramPropertyValuesResponse</returns>
        public ApiResponse< EmailHistogramPropertyValuesResponse > GetHistogramPropertyValuesWithHttpInfo (string storefrontOid, string propertyName = null, string propertyType = null, int? limit = null)
        {
            // verify the required parameter 'storefrontOid' is set
            if (storefrontOid == null)
                throw new ApiException(400, "Missing required parameter 'storefrontOid' when calling StorefrontApi->GetHistogramPropertyValues");

            var localVarPath = "/storefront/{storefront_oid}/email/histogram/property_values";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (storefrontOid != null) localVarPathParams.Add("storefront_oid", Configuration.ApiClient.ParameterToString(storefrontOid)); // path parameter
            if (propertyName != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "property_name", propertyName)); // query parameter
            if (propertyType != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "property_type", propertyType)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter

            // authentication (ultraCartBrowserApiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key")))
            {
                localVarHeaderParams["x-ultracart-browser-key"] = Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key");
            }
            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetHistogramPropertyValues", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EmailHistogramPropertyValuesResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (EmailHistogramPropertyValuesResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(EmailHistogramPropertyValuesResponse)));
        }

        /// <summary>
        /// Get histogram property values Obtain a list of property values for a given property name and type 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid">null</param>
        /// <param name="propertyName">null (optional)</param>
        /// <param name="propertyType">null (optional)</param>
        /// <param name="limit">null (optional)</param>
        /// <returns>Task of EmailHistogramPropertyValuesResponse</returns>
        public async System.Threading.Tasks.Task<EmailHistogramPropertyValuesResponse> GetHistogramPropertyValuesAsync (string storefrontOid, string propertyName = null, string propertyType = null, int? limit = null)
        {
             ApiResponse<EmailHistogramPropertyValuesResponse> localVarResponse = await GetHistogramPropertyValuesAsyncWithHttpInfo(storefrontOid, propertyName, propertyType, limit);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get histogram property values Obtain a list of property values for a given property name and type 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid">null</param>
        /// <param name="propertyName">null (optional)</param>
        /// <param name="propertyType">null (optional)</param>
        /// <param name="limit">null (optional)</param>
        /// <returns>Task of ApiResponse (EmailHistogramPropertyValuesResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<EmailHistogramPropertyValuesResponse>> GetHistogramPropertyValuesAsyncWithHttpInfo (string storefrontOid, string propertyName = null, string propertyType = null, int? limit = null)
        {
            // verify the required parameter 'storefrontOid' is set
            if (storefrontOid == null)
                throw new ApiException(400, "Missing required parameter 'storefrontOid' when calling StorefrontApi->GetHistogramPropertyValues");

            var localVarPath = "/storefront/{storefront_oid}/email/histogram/property_values";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (storefrontOid != null) localVarPathParams.Add("storefront_oid", Configuration.ApiClient.ParameterToString(storefrontOid)); // path parameter
            if (propertyName != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "property_name", propertyName)); // query parameter
            if (propertyType != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "property_type", propertyType)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter

            // authentication (ultraCartBrowserApiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key")))
            {
                localVarHeaderParams["x-ultracart-browser-key"] = Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key");
            }
            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetHistogramPropertyValues", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EmailHistogramPropertyValuesResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (EmailHistogramPropertyValuesResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(EmailHistogramPropertyValuesResponse)));
        }

        /// <summary>
        /// Import a third party provider list 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid">null</param>
        /// <param name="importRequest">lists to import</param>
        /// <returns></returns>
        public void ImportEmailThirdPartyProviderList (string storefrontOid, EmailThirdPartyListImportRequest importRequest)
        {
             ImportEmailThirdPartyProviderListWithHttpInfo(storefrontOid, importRequest);
        }

        /// <summary>
        /// Import a third party provider list 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid">null</param>
        /// <param name="importRequest">lists to import</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> ImportEmailThirdPartyProviderListWithHttpInfo (string storefrontOid, EmailThirdPartyListImportRequest importRequest)
        {
            // verify the required parameter 'storefrontOid' is set
            if (storefrontOid == null)
                throw new ApiException(400, "Missing required parameter 'storefrontOid' when calling StorefrontApi->ImportEmailThirdPartyProviderList");
            // verify the required parameter 'importRequest' is set
            if (importRequest == null)
                throw new ApiException(400, "Missing required parameter 'importRequest' when calling StorefrontApi->ImportEmailThirdPartyProviderList");

            var localVarPath = "/storefront/{storefront_oid}/email/third_party_providers/import";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (storefrontOid != null) localVarPathParams.Add("storefront_oid", Configuration.ApiClient.ParameterToString(storefrontOid)); // path parameter
            if (importRequest != null && importRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(importRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = importRequest; // byte array
            }

            // authentication (ultraCartBrowserApiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key")))
            {
                localVarHeaderParams["x-ultracart-browser-key"] = Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key");
            }
            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ImportEmailThirdPartyProviderList", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Import a third party provider list 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid">null</param>
        /// <param name="importRequest">lists to import</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ImportEmailThirdPartyProviderListAsync (string storefrontOid, EmailThirdPartyListImportRequest importRequest)
        {
             await ImportEmailThirdPartyProviderListAsyncWithHttpInfo(storefrontOid, importRequest);

        }

        /// <summary>
        /// Import a third party provider list 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid">null</param>
        /// <param name="importRequest">lists to import</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> ImportEmailThirdPartyProviderListAsyncWithHttpInfo (string storefrontOid, EmailThirdPartyListImportRequest importRequest)
        {
            // verify the required parameter 'storefrontOid' is set
            if (storefrontOid == null)
                throw new ApiException(400, "Missing required parameter 'storefrontOid' when calling StorefrontApi->ImportEmailThirdPartyProviderList");
            // verify the required parameter 'importRequest' is set
            if (importRequest == null)
                throw new ApiException(400, "Missing required parameter 'importRequest' when calling StorefrontApi->ImportEmailThirdPartyProviderList");

            var localVarPath = "/storefront/{storefront_oid}/email/third_party_providers/import";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (storefrontOid != null) localVarPathParams.Add("storefront_oid", Configuration.ApiClient.ParameterToString(storefrontOid)); // path parameter
            if (importRequest != null && importRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(importRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = importRequest; // byte array
            }

            // authentication (ultraCartBrowserApiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key")))
            {
                localVarHeaderParams["x-ultracart-browser-key"] = Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key");
            }
            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ImportEmailThirdPartyProviderList", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Insert email campaign 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid">null</param>
        /// <param name="emailCampaign">Email campaign</param>
        /// <returns>EmailCampaignResponse</returns>
        public EmailCampaignResponse InsertEmailCampaign (string storefrontOid, EmailCampaign emailCampaign)
        {
             ApiResponse<EmailCampaignResponse> localVarResponse = InsertEmailCampaignWithHttpInfo(storefrontOid, emailCampaign);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Insert email campaign 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid">null</param>
        /// <param name="emailCampaign">Email campaign</param>
        /// <returns>ApiResponse of EmailCampaignResponse</returns>
        public ApiResponse< EmailCampaignResponse > InsertEmailCampaignWithHttpInfo (string storefrontOid, EmailCampaign emailCampaign)
        {
            // verify the required parameter 'storefrontOid' is set
            if (storefrontOid == null)
                throw new ApiException(400, "Missing required parameter 'storefrontOid' when calling StorefrontApi->InsertEmailCampaign");
            // verify the required parameter 'emailCampaign' is set
            if (emailCampaign == null)
                throw new ApiException(400, "Missing required parameter 'emailCampaign' when calling StorefrontApi->InsertEmailCampaign");

            var localVarPath = "/storefront/{storefront_oid}/email/campaigns";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (storefrontOid != null) localVarPathParams.Add("storefront_oid", Configuration.ApiClient.ParameterToString(storefrontOid)); // path parameter
            if (emailCampaign != null && emailCampaign.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(emailCampaign); // http body (model) parameter
            }
            else
            {
                localVarPostBody = emailCampaign; // byte array
            }

            // authentication (ultraCartBrowserApiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key")))
            {
                localVarHeaderParams["x-ultracart-browser-key"] = Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key");
            }
            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("InsertEmailCampaign", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EmailCampaignResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (EmailCampaignResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(EmailCampaignResponse)));
        }

        /// <summary>
        /// Insert email campaign 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid">null</param>
        /// <param name="emailCampaign">Email campaign</param>
        /// <returns>Task of EmailCampaignResponse</returns>
        public async System.Threading.Tasks.Task<EmailCampaignResponse> InsertEmailCampaignAsync (string storefrontOid, EmailCampaign emailCampaign)
        {
             ApiResponse<EmailCampaignResponse> localVarResponse = await InsertEmailCampaignAsyncWithHttpInfo(storefrontOid, emailCampaign);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Insert email campaign 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid">null</param>
        /// <param name="emailCampaign">Email campaign</param>
        /// <returns>Task of ApiResponse (EmailCampaignResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<EmailCampaignResponse>> InsertEmailCampaignAsyncWithHttpInfo (string storefrontOid, EmailCampaign emailCampaign)
        {
            // verify the required parameter 'storefrontOid' is set
            if (storefrontOid == null)
                throw new ApiException(400, "Missing required parameter 'storefrontOid' when calling StorefrontApi->InsertEmailCampaign");
            // verify the required parameter 'emailCampaign' is set
            if (emailCampaign == null)
                throw new ApiException(400, "Missing required parameter 'emailCampaign' when calling StorefrontApi->InsertEmailCampaign");

            var localVarPath = "/storefront/{storefront_oid}/email/campaigns";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (storefrontOid != null) localVarPathParams.Add("storefront_oid", Configuration.ApiClient.ParameterToString(storefrontOid)); // path parameter
            if (emailCampaign != null && emailCampaign.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(emailCampaign); // http body (model) parameter
            }
            else
            {
                localVarPostBody = emailCampaign; // byte array
            }

            // authentication (ultraCartBrowserApiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key")))
            {
                localVarHeaderParams["x-ultracart-browser-key"] = Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key");
            }
            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("InsertEmailCampaign", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EmailCampaignResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (EmailCampaignResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(EmailCampaignResponse)));
        }

        /// <summary>
        /// Insert email commseq 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid">null</param>
        /// <param name="emailCommseq">Email commseq</param>
        /// <returns>EmailCommseqResponse</returns>
        public EmailCommseqResponse InsertEmailCommseq (string storefrontOid, EmailCommseq emailCommseq)
        {
             ApiResponse<EmailCommseqResponse> localVarResponse = InsertEmailCommseqWithHttpInfo(storefrontOid, emailCommseq);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Insert email commseq 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid">null</param>
        /// <param name="emailCommseq">Email commseq</param>
        /// <returns>ApiResponse of EmailCommseqResponse</returns>
        public ApiResponse< EmailCommseqResponse > InsertEmailCommseqWithHttpInfo (string storefrontOid, EmailCommseq emailCommseq)
        {
            // verify the required parameter 'storefrontOid' is set
            if (storefrontOid == null)
                throw new ApiException(400, "Missing required parameter 'storefrontOid' when calling StorefrontApi->InsertEmailCommseq");
            // verify the required parameter 'emailCommseq' is set
            if (emailCommseq == null)
                throw new ApiException(400, "Missing required parameter 'emailCommseq' when calling StorefrontApi->InsertEmailCommseq");

            var localVarPath = "/storefront/{storefront_oid}/email/commseqs";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (storefrontOid != null) localVarPathParams.Add("storefront_oid", Configuration.ApiClient.ParameterToString(storefrontOid)); // path parameter
            if (emailCommseq != null && emailCommseq.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(emailCommseq); // http body (model) parameter
            }
            else
            {
                localVarPostBody = emailCommseq; // byte array
            }

            // authentication (ultraCartBrowserApiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key")))
            {
                localVarHeaderParams["x-ultracart-browser-key"] = Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key");
            }
            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("InsertEmailCommseq", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EmailCommseqResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (EmailCommseqResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(EmailCommseqResponse)));
        }

        /// <summary>
        /// Insert email commseq 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid">null</param>
        /// <param name="emailCommseq">Email commseq</param>
        /// <returns>Task of EmailCommseqResponse</returns>
        public async System.Threading.Tasks.Task<EmailCommseqResponse> InsertEmailCommseqAsync (string storefrontOid, EmailCommseq emailCommseq)
        {
             ApiResponse<EmailCommseqResponse> localVarResponse = await InsertEmailCommseqAsyncWithHttpInfo(storefrontOid, emailCommseq);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Insert email commseq 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid">null</param>
        /// <param name="emailCommseq">Email commseq</param>
        /// <returns>Task of ApiResponse (EmailCommseqResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<EmailCommseqResponse>> InsertEmailCommseqAsyncWithHttpInfo (string storefrontOid, EmailCommseq emailCommseq)
        {
            // verify the required parameter 'storefrontOid' is set
            if (storefrontOid == null)
                throw new ApiException(400, "Missing required parameter 'storefrontOid' when calling StorefrontApi->InsertEmailCommseq");
            // verify the required parameter 'emailCommseq' is set
            if (emailCommseq == null)
                throw new ApiException(400, "Missing required parameter 'emailCommseq' when calling StorefrontApi->InsertEmailCommseq");

            var localVarPath = "/storefront/{storefront_oid}/email/commseqs";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (storefrontOid != null) localVarPathParams.Add("storefront_oid", Configuration.ApiClient.ParameterToString(storefrontOid)); // path parameter
            if (emailCommseq != null && emailCommseq.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(emailCommseq); // http body (model) parameter
            }
            else
            {
                localVarPostBody = emailCommseq; // byte array
            }

            // authentication (ultraCartBrowserApiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key")))
            {
                localVarHeaderParams["x-ultracart-browser-key"] = Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key");
            }
            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("InsertEmailCommseq", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EmailCommseqResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (EmailCommseqResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(EmailCommseqResponse)));
        }

        /// <summary>
        /// Insert email email 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid">null</param>
        /// <param name="emailCommseqEmail">Email email</param>
        /// <returns>EmailCommseqEmailResponse</returns>
        public EmailCommseqEmailResponse InsertEmailEmail (string storefrontOid, EmailCommseqEmail emailCommseqEmail)
        {
             ApiResponse<EmailCommseqEmailResponse> localVarResponse = InsertEmailEmailWithHttpInfo(storefrontOid, emailCommseqEmail);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Insert email email 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid">null</param>
        /// <param name="emailCommseqEmail">Email email</param>
        /// <returns>ApiResponse of EmailCommseqEmailResponse</returns>
        public ApiResponse< EmailCommseqEmailResponse > InsertEmailEmailWithHttpInfo (string storefrontOid, EmailCommseqEmail emailCommseqEmail)
        {
            // verify the required parameter 'storefrontOid' is set
            if (storefrontOid == null)
                throw new ApiException(400, "Missing required parameter 'storefrontOid' when calling StorefrontApi->InsertEmailEmail");
            // verify the required parameter 'emailCommseqEmail' is set
            if (emailCommseqEmail == null)
                throw new ApiException(400, "Missing required parameter 'emailCommseqEmail' when calling StorefrontApi->InsertEmailEmail");

            var localVarPath = "/storefront/{storefront_oid}/email/emails";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (storefrontOid != null) localVarPathParams.Add("storefront_oid", Configuration.ApiClient.ParameterToString(storefrontOid)); // path parameter
            if (emailCommseqEmail != null && emailCommseqEmail.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(emailCommseqEmail); // http body (model) parameter
            }
            else
            {
                localVarPostBody = emailCommseqEmail; // byte array
            }

            // authentication (ultraCartBrowserApiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key")))
            {
                localVarHeaderParams["x-ultracart-browser-key"] = Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key");
            }
            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("InsertEmailEmail", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EmailCommseqEmailResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (EmailCommseqEmailResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(EmailCommseqEmailResponse)));
        }

        /// <summary>
        /// Insert email email 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid">null</param>
        /// <param name="emailCommseqEmail">Email email</param>
        /// <returns>Task of EmailCommseqEmailResponse</returns>
        public async System.Threading.Tasks.Task<EmailCommseqEmailResponse> InsertEmailEmailAsync (string storefrontOid, EmailCommseqEmail emailCommseqEmail)
        {
             ApiResponse<EmailCommseqEmailResponse> localVarResponse = await InsertEmailEmailAsyncWithHttpInfo(storefrontOid, emailCommseqEmail);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Insert email email 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid">null</param>
        /// <param name="emailCommseqEmail">Email email</param>
        /// <returns>Task of ApiResponse (EmailCommseqEmailResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<EmailCommseqEmailResponse>> InsertEmailEmailAsyncWithHttpInfo (string storefrontOid, EmailCommseqEmail emailCommseqEmail)
        {
            // verify the required parameter 'storefrontOid' is set
            if (storefrontOid == null)
                throw new ApiException(400, "Missing required parameter 'storefrontOid' when calling StorefrontApi->InsertEmailEmail");
            // verify the required parameter 'emailCommseqEmail' is set
            if (emailCommseqEmail == null)
                throw new ApiException(400, "Missing required parameter 'emailCommseqEmail' when calling StorefrontApi->InsertEmailEmail");

            var localVarPath = "/storefront/{storefront_oid}/email/emails";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (storefrontOid != null) localVarPathParams.Add("storefront_oid", Configuration.ApiClient.ParameterToString(storefrontOid)); // path parameter
            if (emailCommseqEmail != null && emailCommseqEmail.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(emailCommseqEmail); // http body (model) parameter
            }
            else
            {
                localVarPostBody = emailCommseqEmail; // byte array
            }

            // authentication (ultraCartBrowserApiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key")))
            {
                localVarHeaderParams["x-ultracart-browser-key"] = Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key");
            }
            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("InsertEmailEmail", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EmailCommseqEmailResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (EmailCommseqEmailResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(EmailCommseqEmailResponse)));
        }

        /// <summary>
        /// Insert email flow 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid">null</param>
        /// <param name="emailFlow">Email flow</param>
        /// <returns>EmailFlowResponse</returns>
        public EmailFlowResponse InsertEmailFlow (string storefrontOid, EmailFlow emailFlow)
        {
             ApiResponse<EmailFlowResponse> localVarResponse = InsertEmailFlowWithHttpInfo(storefrontOid, emailFlow);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Insert email flow 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid">null</param>
        /// <param name="emailFlow">Email flow</param>
        /// <returns>ApiResponse of EmailFlowResponse</returns>
        public ApiResponse< EmailFlowResponse > InsertEmailFlowWithHttpInfo (string storefrontOid, EmailFlow emailFlow)
        {
            // verify the required parameter 'storefrontOid' is set
            if (storefrontOid == null)
                throw new ApiException(400, "Missing required parameter 'storefrontOid' when calling StorefrontApi->InsertEmailFlow");
            // verify the required parameter 'emailFlow' is set
            if (emailFlow == null)
                throw new ApiException(400, "Missing required parameter 'emailFlow' when calling StorefrontApi->InsertEmailFlow");

            var localVarPath = "/storefront/{storefront_oid}/email/flows";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (storefrontOid != null) localVarPathParams.Add("storefront_oid", Configuration.ApiClient.ParameterToString(storefrontOid)); // path parameter
            if (emailFlow != null && emailFlow.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(emailFlow); // http body (model) parameter
            }
            else
            {
                localVarPostBody = emailFlow; // byte array
            }

            // authentication (ultraCartBrowserApiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key")))
            {
                localVarHeaderParams["x-ultracart-browser-key"] = Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key");
            }
            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("InsertEmailFlow", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EmailFlowResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (EmailFlowResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(EmailFlowResponse)));
        }

        /// <summary>
        /// Insert email flow 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid">null</param>
        /// <param name="emailFlow">Email flow</param>
        /// <returns>Task of EmailFlowResponse</returns>
        public async System.Threading.Tasks.Task<EmailFlowResponse> InsertEmailFlowAsync (string storefrontOid, EmailFlow emailFlow)
        {
             ApiResponse<EmailFlowResponse> localVarResponse = await InsertEmailFlowAsyncWithHttpInfo(storefrontOid, emailFlow);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Insert email flow 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid">null</param>
        /// <param name="emailFlow">Email flow</param>
        /// <returns>Task of ApiResponse (EmailFlowResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<EmailFlowResponse>> InsertEmailFlowAsyncWithHttpInfo (string storefrontOid, EmailFlow emailFlow)
        {
            // verify the required parameter 'storefrontOid' is set
            if (storefrontOid == null)
                throw new ApiException(400, "Missing required parameter 'storefrontOid' when calling StorefrontApi->InsertEmailFlow");
            // verify the required parameter 'emailFlow' is set
            if (emailFlow == null)
                throw new ApiException(400, "Missing required parameter 'emailFlow' when calling StorefrontApi->InsertEmailFlow");

            var localVarPath = "/storefront/{storefront_oid}/email/flows";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (storefrontOid != null) localVarPathParams.Add("storefront_oid", Configuration.ApiClient.ParameterToString(storefrontOid)); // path parameter
            if (emailFlow != null && emailFlow.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(emailFlow); // http body (model) parameter
            }
            else
            {
                localVarPostBody = emailFlow; // byte array
            }

            // authentication (ultraCartBrowserApiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key")))
            {
                localVarHeaderParams["x-ultracart-browser-key"] = Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key");
            }
            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("InsertEmailFlow", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EmailFlowResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (EmailFlowResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(EmailFlowResponse)));
        }

        /// <summary>
        /// Insert email list 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid">null</param>
        /// <param name="emailList">Email list</param>
        /// <returns>EmailListResponse</returns>
        public EmailListResponse InsertEmailList (string storefrontOid, EmailList emailList)
        {
             ApiResponse<EmailListResponse> localVarResponse = InsertEmailListWithHttpInfo(storefrontOid, emailList);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Insert email list 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid">null</param>
        /// <param name="emailList">Email list</param>
        /// <returns>ApiResponse of EmailListResponse</returns>
        public ApiResponse< EmailListResponse > InsertEmailListWithHttpInfo (string storefrontOid, EmailList emailList)
        {
            // verify the required parameter 'storefrontOid' is set
            if (storefrontOid == null)
                throw new ApiException(400, "Missing required parameter 'storefrontOid' when calling StorefrontApi->InsertEmailList");
            // verify the required parameter 'emailList' is set
            if (emailList == null)
                throw new ApiException(400, "Missing required parameter 'emailList' when calling StorefrontApi->InsertEmailList");

            var localVarPath = "/storefront/{storefront_oid}/email/lists";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (storefrontOid != null) localVarPathParams.Add("storefront_oid", Configuration.ApiClient.ParameterToString(storefrontOid)); // path parameter
            if (emailList != null && emailList.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(emailList); // http body (model) parameter
            }
            else
            {
                localVarPostBody = emailList; // byte array
            }

            // authentication (ultraCartBrowserApiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key")))
            {
                localVarHeaderParams["x-ultracart-browser-key"] = Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key");
            }
            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("InsertEmailList", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EmailListResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (EmailListResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(EmailListResponse)));
        }

        /// <summary>
        /// Insert email list 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid">null</param>
        /// <param name="emailList">Email list</param>
        /// <returns>Task of EmailListResponse</returns>
        public async System.Threading.Tasks.Task<EmailListResponse> InsertEmailListAsync (string storefrontOid, EmailList emailList)
        {
             ApiResponse<EmailListResponse> localVarResponse = await InsertEmailListAsyncWithHttpInfo(storefrontOid, emailList);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Insert email list 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid">null</param>
        /// <param name="emailList">Email list</param>
        /// <returns>Task of ApiResponse (EmailListResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<EmailListResponse>> InsertEmailListAsyncWithHttpInfo (string storefrontOid, EmailList emailList)
        {
            // verify the required parameter 'storefrontOid' is set
            if (storefrontOid == null)
                throw new ApiException(400, "Missing required parameter 'storefrontOid' when calling StorefrontApi->InsertEmailList");
            // verify the required parameter 'emailList' is set
            if (emailList == null)
                throw new ApiException(400, "Missing required parameter 'emailList' when calling StorefrontApi->InsertEmailList");

            var localVarPath = "/storefront/{storefront_oid}/email/lists";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (storefrontOid != null) localVarPathParams.Add("storefront_oid", Configuration.ApiClient.ParameterToString(storefrontOid)); // path parameter
            if (emailList != null && emailList.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(emailList); // http body (model) parameter
            }
            else
            {
                localVarPostBody = emailList; // byte array
            }

            // authentication (ultraCartBrowserApiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key")))
            {
                localVarHeaderParams["x-ultracart-browser-key"] = Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key");
            }
            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("InsertEmailList", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EmailListResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (EmailListResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(EmailListResponse)));
        }

        /// <summary>
        /// Insert email segment 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid">null</param>
        /// <param name="emailSegment">Email segment</param>
        /// <returns>EmailSegmentResponse</returns>
        public EmailSegmentResponse InsertEmailSegment (string storefrontOid, EmailSegment emailSegment)
        {
             ApiResponse<EmailSegmentResponse> localVarResponse = InsertEmailSegmentWithHttpInfo(storefrontOid, emailSegment);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Insert email segment 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid">null</param>
        /// <param name="emailSegment">Email segment</param>
        /// <returns>ApiResponse of EmailSegmentResponse</returns>
        public ApiResponse< EmailSegmentResponse > InsertEmailSegmentWithHttpInfo (string storefrontOid, EmailSegment emailSegment)
        {
            // verify the required parameter 'storefrontOid' is set
            if (storefrontOid == null)
                throw new ApiException(400, "Missing required parameter 'storefrontOid' when calling StorefrontApi->InsertEmailSegment");
            // verify the required parameter 'emailSegment' is set
            if (emailSegment == null)
                throw new ApiException(400, "Missing required parameter 'emailSegment' when calling StorefrontApi->InsertEmailSegment");

            var localVarPath = "/storefront/{storefront_oid}/email/segments";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (storefrontOid != null) localVarPathParams.Add("storefront_oid", Configuration.ApiClient.ParameterToString(storefrontOid)); // path parameter
            if (emailSegment != null && emailSegment.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(emailSegment); // http body (model) parameter
            }
            else
            {
                localVarPostBody = emailSegment; // byte array
            }

            // authentication (ultraCartBrowserApiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key")))
            {
                localVarHeaderParams["x-ultracart-browser-key"] = Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key");
            }
            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("InsertEmailSegment", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EmailSegmentResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (EmailSegmentResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(EmailSegmentResponse)));
        }

        /// <summary>
        /// Insert email segment 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid">null</param>
        /// <param name="emailSegment">Email segment</param>
        /// <returns>Task of EmailSegmentResponse</returns>
        public async System.Threading.Tasks.Task<EmailSegmentResponse> InsertEmailSegmentAsync (string storefrontOid, EmailSegment emailSegment)
        {
             ApiResponse<EmailSegmentResponse> localVarResponse = await InsertEmailSegmentAsyncWithHttpInfo(storefrontOid, emailSegment);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Insert email segment 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid">null</param>
        /// <param name="emailSegment">Email segment</param>
        /// <returns>Task of ApiResponse (EmailSegmentResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<EmailSegmentResponse>> InsertEmailSegmentAsyncWithHttpInfo (string storefrontOid, EmailSegment emailSegment)
        {
            // verify the required parameter 'storefrontOid' is set
            if (storefrontOid == null)
                throw new ApiException(400, "Missing required parameter 'storefrontOid' when calling StorefrontApi->InsertEmailSegment");
            // verify the required parameter 'emailSegment' is set
            if (emailSegment == null)
                throw new ApiException(400, "Missing required parameter 'emailSegment' when calling StorefrontApi->InsertEmailSegment");

            var localVarPath = "/storefront/{storefront_oid}/email/segments";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (storefrontOid != null) localVarPathParams.Add("storefront_oid", Configuration.ApiClient.ParameterToString(storefrontOid)); // path parameter
            if (emailSegment != null && emailSegment.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(emailSegment); // http body (model) parameter
            }
            else
            {
                localVarPostBody = emailSegment; // byte array
            }

            // authentication (ultraCartBrowserApiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key")))
            {
                localVarHeaderParams["x-ultracart-browser-key"] = Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key");
            }
            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("InsertEmailSegment", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EmailSegmentResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (EmailSegmentResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(EmailSegmentResponse)));
        }

        /// <summary>
        /// Prepare download of email segment 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid">null</param>
        /// <param name="emailSegmentUuid">null</param>
        /// <returns>EmailSegmentDownloadPrepareResponse</returns>
        public EmailSegmentDownloadPrepareResponse PrepareDownloadEmailSegment (string storefrontOid, string emailSegmentUuid)
        {
             ApiResponse<EmailSegmentDownloadPrepareResponse> localVarResponse = PrepareDownloadEmailSegmentWithHttpInfo(storefrontOid, emailSegmentUuid);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Prepare download of email segment 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid">null</param>
        /// <param name="emailSegmentUuid">null</param>
        /// <returns>ApiResponse of EmailSegmentDownloadPrepareResponse</returns>
        public ApiResponse< EmailSegmentDownloadPrepareResponse > PrepareDownloadEmailSegmentWithHttpInfo (string storefrontOid, string emailSegmentUuid)
        {
            // verify the required parameter 'storefrontOid' is set
            if (storefrontOid == null)
                throw new ApiException(400, "Missing required parameter 'storefrontOid' when calling StorefrontApi->PrepareDownloadEmailSegment");
            // verify the required parameter 'emailSegmentUuid' is set
            if (emailSegmentUuid == null)
                throw new ApiException(400, "Missing required parameter 'emailSegmentUuid' when calling StorefrontApi->PrepareDownloadEmailSegment");

            var localVarPath = "/storefront/{storefront_oid}/email/segments/{email_segment_uuid}/downloadPrepare";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (storefrontOid != null) localVarPathParams.Add("storefront_oid", Configuration.ApiClient.ParameterToString(storefrontOid)); // path parameter
            if (emailSegmentUuid != null) localVarPathParams.Add("email_segment_uuid", Configuration.ApiClient.ParameterToString(emailSegmentUuid)); // path parameter

            // authentication (ultraCartBrowserApiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key")))
            {
                localVarHeaderParams["x-ultracart-browser-key"] = Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key");
            }
            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PrepareDownloadEmailSegment", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EmailSegmentDownloadPrepareResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (EmailSegmentDownloadPrepareResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(EmailSegmentDownloadPrepareResponse)));
        }

        /// <summary>
        /// Prepare download of email segment 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid">null</param>
        /// <param name="emailSegmentUuid">null</param>
        /// <returns>Task of EmailSegmentDownloadPrepareResponse</returns>
        public async System.Threading.Tasks.Task<EmailSegmentDownloadPrepareResponse> PrepareDownloadEmailSegmentAsync (string storefrontOid, string emailSegmentUuid)
        {
             ApiResponse<EmailSegmentDownloadPrepareResponse> localVarResponse = await PrepareDownloadEmailSegmentAsyncWithHttpInfo(storefrontOid, emailSegmentUuid);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Prepare download of email segment 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid">null</param>
        /// <param name="emailSegmentUuid">null</param>
        /// <returns>Task of ApiResponse (EmailSegmentDownloadPrepareResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<EmailSegmentDownloadPrepareResponse>> PrepareDownloadEmailSegmentAsyncWithHttpInfo (string storefrontOid, string emailSegmentUuid)
        {
            // verify the required parameter 'storefrontOid' is set
            if (storefrontOid == null)
                throw new ApiException(400, "Missing required parameter 'storefrontOid' when calling StorefrontApi->PrepareDownloadEmailSegment");
            // verify the required parameter 'emailSegmentUuid' is set
            if (emailSegmentUuid == null)
                throw new ApiException(400, "Missing required parameter 'emailSegmentUuid' when calling StorefrontApi->PrepareDownloadEmailSegment");

            var localVarPath = "/storefront/{storefront_oid}/email/segments/{email_segment_uuid}/downloadPrepare";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (storefrontOid != null) localVarPathParams.Add("storefront_oid", Configuration.ApiClient.ParameterToString(storefrontOid)); // path parameter
            if (emailSegmentUuid != null) localVarPathParams.Add("email_segment_uuid", Configuration.ApiClient.ParameterToString(emailSegmentUuid)); // path parameter

            // authentication (ultraCartBrowserApiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key")))
            {
                localVarHeaderParams["x-ultracart-browser-key"] = Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key");
            }
            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PrepareDownloadEmailSegment", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EmailSegmentDownloadPrepareResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (EmailSegmentDownloadPrepareResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(EmailSegmentDownloadPrepareResponse)));
        }

        /// <summary>
        /// Searches for all matching values 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="category">null (optional)</param>
        /// <param name="matches">null (optional)</param>
        /// <param name="maxHits">null (optional)</param>
        /// <returns>LookupResponse</returns>
        public LookupResponse Search (string category = null, string matches = null, int? maxHits = null)
        {
             ApiResponse<LookupResponse> localVarResponse = SearchWithHttpInfo(category, matches, maxHits);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Searches for all matching values 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="category">null (optional)</param>
        /// <param name="matches">null (optional)</param>
        /// <param name="maxHits">null (optional)</param>
        /// <returns>ApiResponse of LookupResponse</returns>
        public ApiResponse< LookupResponse > SearchWithHttpInfo (string category = null, string matches = null, int? maxHits = null)
        {

            var localVarPath = "/storefront/search";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (category != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "category", category)); // query parameter
            if (matches != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "matches", matches)); // query parameter
            if (maxHits != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "max_hits", maxHits)); // query parameter

            // authentication (ultraCartBrowserApiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key")))
            {
                localVarHeaderParams["x-ultracart-browser-key"] = Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key");
            }
            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Search", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<LookupResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (LookupResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(LookupResponse)));
        }

        /// <summary>
        /// Searches for all matching values 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="category">null (optional)</param>
        /// <param name="matches">null (optional)</param>
        /// <param name="maxHits">null (optional)</param>
        /// <returns>Task of LookupResponse</returns>
        public async System.Threading.Tasks.Task<LookupResponse> SearchAsync (string category = null, string matches = null, int? maxHits = null)
        {
             ApiResponse<LookupResponse> localVarResponse = await SearchAsyncWithHttpInfo(category, matches, maxHits);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Searches for all matching values 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="category">null (optional)</param>
        /// <param name="matches">null (optional)</param>
        /// <param name="maxHits">null (optional)</param>
        /// <returns>Task of ApiResponse (LookupResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<LookupResponse>> SearchAsyncWithHttpInfo (string category = null, string matches = null, int? maxHits = null)
        {

            var localVarPath = "/storefront/search";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (category != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "category", category)); // query parameter
            if (matches != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "matches", matches)); // query parameter
            if (maxHits != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "max_hits", maxHits)); // query parameter

            // authentication (ultraCartBrowserApiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key")))
            {
                localVarHeaderParams["x-ultracart-browser-key"] = Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key");
            }
            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Search", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<LookupResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (LookupResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(LookupResponse)));
        }

        /// <summary>
        /// Search email list customers 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid">null</param>
        /// <param name="emailListUuid">null</param>
        /// <param name="startsWith">null (optional)</param>
        /// <returns>EmailListCustomersResponse</returns>
        public EmailListCustomersResponse SearchEmailListCustomers (string storefrontOid, string emailListUuid, string startsWith = null)
        {
             ApiResponse<EmailListCustomersResponse> localVarResponse = SearchEmailListCustomersWithHttpInfo(storefrontOid, emailListUuid, startsWith);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Search email list customers 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid">null</param>
        /// <param name="emailListUuid">null</param>
        /// <param name="startsWith">null (optional)</param>
        /// <returns>ApiResponse of EmailListCustomersResponse</returns>
        public ApiResponse< EmailListCustomersResponse > SearchEmailListCustomersWithHttpInfo (string storefrontOid, string emailListUuid, string startsWith = null)
        {
            // verify the required parameter 'storefrontOid' is set
            if (storefrontOid == null)
                throw new ApiException(400, "Missing required parameter 'storefrontOid' when calling StorefrontApi->SearchEmailListCustomers");
            // verify the required parameter 'emailListUuid' is set
            if (emailListUuid == null)
                throw new ApiException(400, "Missing required parameter 'emailListUuid' when calling StorefrontApi->SearchEmailListCustomers");

            var localVarPath = "/storefront/{storefront_oid}/email/lists/{email_list_uuid}/search";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (storefrontOid != null) localVarPathParams.Add("storefront_oid", Configuration.ApiClient.ParameterToString(storefrontOid)); // path parameter
            if (emailListUuid != null) localVarPathParams.Add("email_list_uuid", Configuration.ApiClient.ParameterToString(emailListUuid)); // path parameter
            if (startsWith != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "startsWith", startsWith)); // query parameter

            // authentication (ultraCartBrowserApiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key")))
            {
                localVarHeaderParams["x-ultracart-browser-key"] = Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key");
            }
            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SearchEmailListCustomers", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EmailListCustomersResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (EmailListCustomersResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(EmailListCustomersResponse)));
        }

        /// <summary>
        /// Search email list customers 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid">null</param>
        /// <param name="emailListUuid">null</param>
        /// <param name="startsWith">null (optional)</param>
        /// <returns>Task of EmailListCustomersResponse</returns>
        public async System.Threading.Tasks.Task<EmailListCustomersResponse> SearchEmailListCustomersAsync (string storefrontOid, string emailListUuid, string startsWith = null)
        {
             ApiResponse<EmailListCustomersResponse> localVarResponse = await SearchEmailListCustomersAsyncWithHttpInfo(storefrontOid, emailListUuid, startsWith);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Search email list customers 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid">null</param>
        /// <param name="emailListUuid">null</param>
        /// <param name="startsWith">null (optional)</param>
        /// <returns>Task of ApiResponse (EmailListCustomersResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<EmailListCustomersResponse>> SearchEmailListCustomersAsyncWithHttpInfo (string storefrontOid, string emailListUuid, string startsWith = null)
        {
            // verify the required parameter 'storefrontOid' is set
            if (storefrontOid == null)
                throw new ApiException(400, "Missing required parameter 'storefrontOid' when calling StorefrontApi->SearchEmailListCustomers");
            // verify the required parameter 'emailListUuid' is set
            if (emailListUuid == null)
                throw new ApiException(400, "Missing required parameter 'emailListUuid' when calling StorefrontApi->SearchEmailListCustomers");

            var localVarPath = "/storefront/{storefront_oid}/email/lists/{email_list_uuid}/search";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (storefrontOid != null) localVarPathParams.Add("storefront_oid", Configuration.ApiClient.ParameterToString(storefrontOid)); // path parameter
            if (emailListUuid != null) localVarPathParams.Add("email_list_uuid", Configuration.ApiClient.ParameterToString(emailListUuid)); // path parameter
            if (startsWith != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "startsWith", startsWith)); // query parameter

            // authentication (ultraCartBrowserApiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key")))
            {
                localVarHeaderParams["x-ultracart-browser-key"] = Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key");
            }
            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SearchEmailListCustomers", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EmailListCustomersResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (EmailListCustomersResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(EmailListCustomersResponse)));
        }

        /// <summary>
        /// Search email segment customers 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid">null</param>
        /// <param name="emailSegmentUuid">null</param>
        /// <param name="startsWith">null (optional)</param>
        /// <returns>EmailSegmentCustomersResponse</returns>
        public EmailSegmentCustomersResponse SearchEmailSegmentCustomers (string storefrontOid, string emailSegmentUuid, string startsWith = null)
        {
             ApiResponse<EmailSegmentCustomersResponse> localVarResponse = SearchEmailSegmentCustomersWithHttpInfo(storefrontOid, emailSegmentUuid, startsWith);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Search email segment customers 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid">null</param>
        /// <param name="emailSegmentUuid">null</param>
        /// <param name="startsWith">null (optional)</param>
        /// <returns>ApiResponse of EmailSegmentCustomersResponse</returns>
        public ApiResponse< EmailSegmentCustomersResponse > SearchEmailSegmentCustomersWithHttpInfo (string storefrontOid, string emailSegmentUuid, string startsWith = null)
        {
            // verify the required parameter 'storefrontOid' is set
            if (storefrontOid == null)
                throw new ApiException(400, "Missing required parameter 'storefrontOid' when calling StorefrontApi->SearchEmailSegmentCustomers");
            // verify the required parameter 'emailSegmentUuid' is set
            if (emailSegmentUuid == null)
                throw new ApiException(400, "Missing required parameter 'emailSegmentUuid' when calling StorefrontApi->SearchEmailSegmentCustomers");

            var localVarPath = "/storefront/{storefront_oid}/email/segments/{email_segment_uuid}/search";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (storefrontOid != null) localVarPathParams.Add("storefront_oid", Configuration.ApiClient.ParameterToString(storefrontOid)); // path parameter
            if (emailSegmentUuid != null) localVarPathParams.Add("email_segment_uuid", Configuration.ApiClient.ParameterToString(emailSegmentUuid)); // path parameter
            if (startsWith != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "startsWith", startsWith)); // query parameter

            // authentication (ultraCartBrowserApiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key")))
            {
                localVarHeaderParams["x-ultracart-browser-key"] = Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key");
            }
            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SearchEmailSegmentCustomers", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EmailSegmentCustomersResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (EmailSegmentCustomersResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(EmailSegmentCustomersResponse)));
        }

        /// <summary>
        /// Search email segment customers 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid">null</param>
        /// <param name="emailSegmentUuid">null</param>
        /// <param name="startsWith">null (optional)</param>
        /// <returns>Task of EmailSegmentCustomersResponse</returns>
        public async System.Threading.Tasks.Task<EmailSegmentCustomersResponse> SearchEmailSegmentCustomersAsync (string storefrontOid, string emailSegmentUuid, string startsWith = null)
        {
             ApiResponse<EmailSegmentCustomersResponse> localVarResponse = await SearchEmailSegmentCustomersAsyncWithHttpInfo(storefrontOid, emailSegmentUuid, startsWith);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Search email segment customers 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid">null</param>
        /// <param name="emailSegmentUuid">null</param>
        /// <param name="startsWith">null (optional)</param>
        /// <returns>Task of ApiResponse (EmailSegmentCustomersResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<EmailSegmentCustomersResponse>> SearchEmailSegmentCustomersAsyncWithHttpInfo (string storefrontOid, string emailSegmentUuid, string startsWith = null)
        {
            // verify the required parameter 'storefrontOid' is set
            if (storefrontOid == null)
                throw new ApiException(400, "Missing required parameter 'storefrontOid' when calling StorefrontApi->SearchEmailSegmentCustomers");
            // verify the required parameter 'emailSegmentUuid' is set
            if (emailSegmentUuid == null)
                throw new ApiException(400, "Missing required parameter 'emailSegmentUuid' when calling StorefrontApi->SearchEmailSegmentCustomers");

            var localVarPath = "/storefront/{storefront_oid}/email/segments/{email_segment_uuid}/search";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (storefrontOid != null) localVarPathParams.Add("storefront_oid", Configuration.ApiClient.ParameterToString(storefrontOid)); // path parameter
            if (emailSegmentUuid != null) localVarPathParams.Add("email_segment_uuid", Configuration.ApiClient.ParameterToString(emailSegmentUuid)); // path parameter
            if (startsWith != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "startsWith", startsWith)); // query parameter

            // authentication (ultraCartBrowserApiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key")))
            {
                localVarHeaderParams["x-ultracart-browser-key"] = Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key");
            }
            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SearchEmailSegmentCustomers", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EmailSegmentCustomersResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (EmailSegmentCustomersResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(EmailSegmentCustomersResponse)));
        }

        /// <summary>
        /// Start email campaign 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid">null</param>
        /// <param name="emailCampaignUuid">null</param>
        /// <returns>BaseResponse</returns>
        public BaseResponse StartEmailCampaign (string storefrontOid, string emailCampaignUuid)
        {
             ApiResponse<BaseResponse> localVarResponse = StartEmailCampaignWithHttpInfo(storefrontOid, emailCampaignUuid);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Start email campaign 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid">null</param>
        /// <param name="emailCampaignUuid">null</param>
        /// <returns>ApiResponse of BaseResponse</returns>
        public ApiResponse< BaseResponse > StartEmailCampaignWithHttpInfo (string storefrontOid, string emailCampaignUuid)
        {
            // verify the required parameter 'storefrontOid' is set
            if (storefrontOid == null)
                throw new ApiException(400, "Missing required parameter 'storefrontOid' when calling StorefrontApi->StartEmailCampaign");
            // verify the required parameter 'emailCampaignUuid' is set
            if (emailCampaignUuid == null)
                throw new ApiException(400, "Missing required parameter 'emailCampaignUuid' when calling StorefrontApi->StartEmailCampaign");

            var localVarPath = "/storefront/{storefront_oid}/email/campaigns/{email_campaign_uuid}/start";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (storefrontOid != null) localVarPathParams.Add("storefront_oid", Configuration.ApiClient.ParameterToString(storefrontOid)); // path parameter
            if (emailCampaignUuid != null) localVarPathParams.Add("email_campaign_uuid", Configuration.ApiClient.ParameterToString(emailCampaignUuid)); // path parameter

            // authentication (ultraCartBrowserApiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key")))
            {
                localVarHeaderParams["x-ultracart-browser-key"] = Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key");
            }
            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("StartEmailCampaign", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BaseResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (BaseResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(BaseResponse)));
        }

        /// <summary>
        /// Start email campaign 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid">null</param>
        /// <param name="emailCampaignUuid">null</param>
        /// <returns>Task of BaseResponse</returns>
        public async System.Threading.Tasks.Task<BaseResponse> StartEmailCampaignAsync (string storefrontOid, string emailCampaignUuid)
        {
             ApiResponse<BaseResponse> localVarResponse = await StartEmailCampaignAsyncWithHttpInfo(storefrontOid, emailCampaignUuid);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Start email campaign 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid">null</param>
        /// <param name="emailCampaignUuid">null</param>
        /// <returns>Task of ApiResponse (BaseResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<BaseResponse>> StartEmailCampaignAsyncWithHttpInfo (string storefrontOid, string emailCampaignUuid)
        {
            // verify the required parameter 'storefrontOid' is set
            if (storefrontOid == null)
                throw new ApiException(400, "Missing required parameter 'storefrontOid' when calling StorefrontApi->StartEmailCampaign");
            // verify the required parameter 'emailCampaignUuid' is set
            if (emailCampaignUuid == null)
                throw new ApiException(400, "Missing required parameter 'emailCampaignUuid' when calling StorefrontApi->StartEmailCampaign");

            var localVarPath = "/storefront/{storefront_oid}/email/campaigns/{email_campaign_uuid}/start";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (storefrontOid != null) localVarPathParams.Add("storefront_oid", Configuration.ApiClient.ParameterToString(storefrontOid)); // path parameter
            if (emailCampaignUuid != null) localVarPathParams.Add("email_campaign_uuid", Configuration.ApiClient.ParameterToString(emailCampaignUuid)); // path parameter

            // authentication (ultraCartBrowserApiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key")))
            {
                localVarHeaderParams["x-ultracart-browser-key"] = Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key");
            }
            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("StartEmailCampaign", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BaseResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (BaseResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(BaseResponse)));
        }

        /// <summary>
        /// Subscribe customers to email list 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid">null</param>
        /// <param name="emailListUuid">null</param>
        /// <param name="customers">Customers</param>
        /// <returns>EmailListSubscribeResponse</returns>
        public EmailListSubscribeResponse SubscribeToEmailList (string storefrontOid, string emailListUuid, List<EmailCustomer> customers)
        {
             ApiResponse<EmailListSubscribeResponse> localVarResponse = SubscribeToEmailListWithHttpInfo(storefrontOid, emailListUuid, customers);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Subscribe customers to email list 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid">null</param>
        /// <param name="emailListUuid">null</param>
        /// <param name="customers">Customers</param>
        /// <returns>ApiResponse of EmailListSubscribeResponse</returns>
        public ApiResponse< EmailListSubscribeResponse > SubscribeToEmailListWithHttpInfo (string storefrontOid, string emailListUuid, List<EmailCustomer> customers)
        {
            // verify the required parameter 'storefrontOid' is set
            if (storefrontOid == null)
                throw new ApiException(400, "Missing required parameter 'storefrontOid' when calling StorefrontApi->SubscribeToEmailList");
            // verify the required parameter 'emailListUuid' is set
            if (emailListUuid == null)
                throw new ApiException(400, "Missing required parameter 'emailListUuid' when calling StorefrontApi->SubscribeToEmailList");
            // verify the required parameter 'customers' is set
            if (customers == null)
                throw new ApiException(400, "Missing required parameter 'customers' when calling StorefrontApi->SubscribeToEmailList");

            var localVarPath = "/storefront/{storefront_oid}/email/lists/{email_list_uuid}/subscribe";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (storefrontOid != null) localVarPathParams.Add("storefront_oid", Configuration.ApiClient.ParameterToString(storefrontOid)); // path parameter
            if (emailListUuid != null) localVarPathParams.Add("email_list_uuid", Configuration.ApiClient.ParameterToString(emailListUuid)); // path parameter
            if (customers != null && customers.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(customers); // http body (model) parameter
            }
            else
            {
                localVarPostBody = customers; // byte array
            }

            // authentication (ultraCartBrowserApiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key")))
            {
                localVarHeaderParams["x-ultracart-browser-key"] = Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key");
            }
            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SubscribeToEmailList", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EmailListSubscribeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (EmailListSubscribeResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(EmailListSubscribeResponse)));
        }

        /// <summary>
        /// Subscribe customers to email list 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid">null</param>
        /// <param name="emailListUuid">null</param>
        /// <param name="customers">Customers</param>
        /// <returns>Task of EmailListSubscribeResponse</returns>
        public async System.Threading.Tasks.Task<EmailListSubscribeResponse> SubscribeToEmailListAsync (string storefrontOid, string emailListUuid, List<EmailCustomer> customers)
        {
             ApiResponse<EmailListSubscribeResponse> localVarResponse = await SubscribeToEmailListAsyncWithHttpInfo(storefrontOid, emailListUuid, customers);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Subscribe customers to email list 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid">null</param>
        /// <param name="emailListUuid">null</param>
        /// <param name="customers">Customers</param>
        /// <returns>Task of ApiResponse (EmailListSubscribeResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<EmailListSubscribeResponse>> SubscribeToEmailListAsyncWithHttpInfo (string storefrontOid, string emailListUuid, List<EmailCustomer> customers)
        {
            // verify the required parameter 'storefrontOid' is set
            if (storefrontOid == null)
                throw new ApiException(400, "Missing required parameter 'storefrontOid' when calling StorefrontApi->SubscribeToEmailList");
            // verify the required parameter 'emailListUuid' is set
            if (emailListUuid == null)
                throw new ApiException(400, "Missing required parameter 'emailListUuid' when calling StorefrontApi->SubscribeToEmailList");
            // verify the required parameter 'customers' is set
            if (customers == null)
                throw new ApiException(400, "Missing required parameter 'customers' when calling StorefrontApi->SubscribeToEmailList");

            var localVarPath = "/storefront/{storefront_oid}/email/lists/{email_list_uuid}/subscribe";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (storefrontOid != null) localVarPathParams.Add("storefront_oid", Configuration.ApiClient.ParameterToString(storefrontOid)); // path parameter
            if (emailListUuid != null) localVarPathParams.Add("email_list_uuid", Configuration.ApiClient.ParameterToString(emailListUuid)); // path parameter
            if (customers != null && customers.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(customers); // http body (model) parameter
            }
            else
            {
                localVarPostBody = customers; // byte array
            }

            // authentication (ultraCartBrowserApiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key")))
            {
                localVarHeaderParams["x-ultracart-browser-key"] = Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key");
            }
            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SubscribeToEmailList", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EmailListSubscribeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (EmailListSubscribeResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(EmailListSubscribeResponse)));
        }

        /// <summary>
        /// Update email campaign 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid">null</param>
        /// <param name="emailCampaignUuid">null</param>
        /// <param name="emailCampaign">Email campaign</param>
        /// <returns>EmailCampaignResponse</returns>
        public EmailCampaignResponse UpdateEmailCampaign (string storefrontOid, string emailCampaignUuid, EmailCampaign emailCampaign)
        {
             ApiResponse<EmailCampaignResponse> localVarResponse = UpdateEmailCampaignWithHttpInfo(storefrontOid, emailCampaignUuid, emailCampaign);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update email campaign 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid">null</param>
        /// <param name="emailCampaignUuid">null</param>
        /// <param name="emailCampaign">Email campaign</param>
        /// <returns>ApiResponse of EmailCampaignResponse</returns>
        public ApiResponse< EmailCampaignResponse > UpdateEmailCampaignWithHttpInfo (string storefrontOid, string emailCampaignUuid, EmailCampaign emailCampaign)
        {
            // verify the required parameter 'storefrontOid' is set
            if (storefrontOid == null)
                throw new ApiException(400, "Missing required parameter 'storefrontOid' when calling StorefrontApi->UpdateEmailCampaign");
            // verify the required parameter 'emailCampaignUuid' is set
            if (emailCampaignUuid == null)
                throw new ApiException(400, "Missing required parameter 'emailCampaignUuid' when calling StorefrontApi->UpdateEmailCampaign");
            // verify the required parameter 'emailCampaign' is set
            if (emailCampaign == null)
                throw new ApiException(400, "Missing required parameter 'emailCampaign' when calling StorefrontApi->UpdateEmailCampaign");

            var localVarPath = "/storefront/{storefront_oid}/email/campaigns/{email_campaign_uuid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (storefrontOid != null) localVarPathParams.Add("storefront_oid", Configuration.ApiClient.ParameterToString(storefrontOid)); // path parameter
            if (emailCampaignUuid != null) localVarPathParams.Add("email_campaign_uuid", Configuration.ApiClient.ParameterToString(emailCampaignUuid)); // path parameter
            if (emailCampaign != null && emailCampaign.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(emailCampaign); // http body (model) parameter
            }
            else
            {
                localVarPostBody = emailCampaign; // byte array
            }

            // authentication (ultraCartBrowserApiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key")))
            {
                localVarHeaderParams["x-ultracart-browser-key"] = Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key");
            }
            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateEmailCampaign", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EmailCampaignResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (EmailCampaignResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(EmailCampaignResponse)));
        }

        /// <summary>
        /// Update email campaign 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid">null</param>
        /// <param name="emailCampaignUuid">null</param>
        /// <param name="emailCampaign">Email campaign</param>
        /// <returns>Task of EmailCampaignResponse</returns>
        public async System.Threading.Tasks.Task<EmailCampaignResponse> UpdateEmailCampaignAsync (string storefrontOid, string emailCampaignUuid, EmailCampaign emailCampaign)
        {
             ApiResponse<EmailCampaignResponse> localVarResponse = await UpdateEmailCampaignAsyncWithHttpInfo(storefrontOid, emailCampaignUuid, emailCampaign);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update email campaign 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid">null</param>
        /// <param name="emailCampaignUuid">null</param>
        /// <param name="emailCampaign">Email campaign</param>
        /// <returns>Task of ApiResponse (EmailCampaignResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<EmailCampaignResponse>> UpdateEmailCampaignAsyncWithHttpInfo (string storefrontOid, string emailCampaignUuid, EmailCampaign emailCampaign)
        {
            // verify the required parameter 'storefrontOid' is set
            if (storefrontOid == null)
                throw new ApiException(400, "Missing required parameter 'storefrontOid' when calling StorefrontApi->UpdateEmailCampaign");
            // verify the required parameter 'emailCampaignUuid' is set
            if (emailCampaignUuid == null)
                throw new ApiException(400, "Missing required parameter 'emailCampaignUuid' when calling StorefrontApi->UpdateEmailCampaign");
            // verify the required parameter 'emailCampaign' is set
            if (emailCampaign == null)
                throw new ApiException(400, "Missing required parameter 'emailCampaign' when calling StorefrontApi->UpdateEmailCampaign");

            var localVarPath = "/storefront/{storefront_oid}/email/campaigns/{email_campaign_uuid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (storefrontOid != null) localVarPathParams.Add("storefront_oid", Configuration.ApiClient.ParameterToString(storefrontOid)); // path parameter
            if (emailCampaignUuid != null) localVarPathParams.Add("email_campaign_uuid", Configuration.ApiClient.ParameterToString(emailCampaignUuid)); // path parameter
            if (emailCampaign != null && emailCampaign.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(emailCampaign); // http body (model) parameter
            }
            else
            {
                localVarPostBody = emailCampaign; // byte array
            }

            // authentication (ultraCartBrowserApiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key")))
            {
                localVarHeaderParams["x-ultracart-browser-key"] = Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key");
            }
            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateEmailCampaign", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EmailCampaignResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (EmailCampaignResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(EmailCampaignResponse)));
        }

        /// <summary>
        /// Update email commseq 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid">null</param>
        /// <param name="commseqUuid">null</param>
        /// <param name="emailCommseq">Email commseq</param>
        /// <returns>EmailCommseqResponse</returns>
        public EmailCommseqResponse UpdateEmailCommseq (string storefrontOid, string commseqUuid, EmailCommseq emailCommseq)
        {
             ApiResponse<EmailCommseqResponse> localVarResponse = UpdateEmailCommseqWithHttpInfo(storefrontOid, commseqUuid, emailCommseq);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update email commseq 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid">null</param>
        /// <param name="commseqUuid">null</param>
        /// <param name="emailCommseq">Email commseq</param>
        /// <returns>ApiResponse of EmailCommseqResponse</returns>
        public ApiResponse< EmailCommseqResponse > UpdateEmailCommseqWithHttpInfo (string storefrontOid, string commseqUuid, EmailCommseq emailCommseq)
        {
            // verify the required parameter 'storefrontOid' is set
            if (storefrontOid == null)
                throw new ApiException(400, "Missing required parameter 'storefrontOid' when calling StorefrontApi->UpdateEmailCommseq");
            // verify the required parameter 'commseqUuid' is set
            if (commseqUuid == null)
                throw new ApiException(400, "Missing required parameter 'commseqUuid' when calling StorefrontApi->UpdateEmailCommseq");
            // verify the required parameter 'emailCommseq' is set
            if (emailCommseq == null)
                throw new ApiException(400, "Missing required parameter 'emailCommseq' when calling StorefrontApi->UpdateEmailCommseq");

            var localVarPath = "/storefront/{storefront_oid}/email/commseqs/{commseq_uuid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (storefrontOid != null) localVarPathParams.Add("storefront_oid", Configuration.ApiClient.ParameterToString(storefrontOid)); // path parameter
            if (commseqUuid != null) localVarPathParams.Add("commseq_uuid", Configuration.ApiClient.ParameterToString(commseqUuid)); // path parameter
            if (emailCommseq != null && emailCommseq.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(emailCommseq); // http body (model) parameter
            }
            else
            {
                localVarPostBody = emailCommseq; // byte array
            }

            // authentication (ultraCartBrowserApiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key")))
            {
                localVarHeaderParams["x-ultracart-browser-key"] = Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key");
            }
            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateEmailCommseq", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EmailCommseqResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (EmailCommseqResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(EmailCommseqResponse)));
        }

        /// <summary>
        /// Update email commseq 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid">null</param>
        /// <param name="commseqUuid">null</param>
        /// <param name="emailCommseq">Email commseq</param>
        /// <returns>Task of EmailCommseqResponse</returns>
        public async System.Threading.Tasks.Task<EmailCommseqResponse> UpdateEmailCommseqAsync (string storefrontOid, string commseqUuid, EmailCommseq emailCommseq)
        {
             ApiResponse<EmailCommseqResponse> localVarResponse = await UpdateEmailCommseqAsyncWithHttpInfo(storefrontOid, commseqUuid, emailCommseq);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update email commseq 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid">null</param>
        /// <param name="commseqUuid">null</param>
        /// <param name="emailCommseq">Email commseq</param>
        /// <returns>Task of ApiResponse (EmailCommseqResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<EmailCommseqResponse>> UpdateEmailCommseqAsyncWithHttpInfo (string storefrontOid, string commseqUuid, EmailCommseq emailCommseq)
        {
            // verify the required parameter 'storefrontOid' is set
            if (storefrontOid == null)
                throw new ApiException(400, "Missing required parameter 'storefrontOid' when calling StorefrontApi->UpdateEmailCommseq");
            // verify the required parameter 'commseqUuid' is set
            if (commseqUuid == null)
                throw new ApiException(400, "Missing required parameter 'commseqUuid' when calling StorefrontApi->UpdateEmailCommseq");
            // verify the required parameter 'emailCommseq' is set
            if (emailCommseq == null)
                throw new ApiException(400, "Missing required parameter 'emailCommseq' when calling StorefrontApi->UpdateEmailCommseq");

            var localVarPath = "/storefront/{storefront_oid}/email/commseqs/{commseq_uuid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (storefrontOid != null) localVarPathParams.Add("storefront_oid", Configuration.ApiClient.ParameterToString(storefrontOid)); // path parameter
            if (commseqUuid != null) localVarPathParams.Add("commseq_uuid", Configuration.ApiClient.ParameterToString(commseqUuid)); // path parameter
            if (emailCommseq != null && emailCommseq.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(emailCommseq); // http body (model) parameter
            }
            else
            {
                localVarPostBody = emailCommseq; // byte array
            }

            // authentication (ultraCartBrowserApiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key")))
            {
                localVarHeaderParams["x-ultracart-browser-key"] = Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key");
            }
            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateEmailCommseq", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EmailCommseqResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (EmailCommseqResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(EmailCommseqResponse)));
        }

        /// <summary>
        /// Update email email 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid">null</param>
        /// <param name="commseqEmailUuid">null</param>
        /// <param name="emailCommseqEmail">Email commseq email</param>
        /// <returns>EmailCommseqEmailResponse</returns>
        public EmailCommseqEmailResponse UpdateEmailEmail (string storefrontOid, string commseqEmailUuid, EmailCommseqEmail emailCommseqEmail)
        {
             ApiResponse<EmailCommseqEmailResponse> localVarResponse = UpdateEmailEmailWithHttpInfo(storefrontOid, commseqEmailUuid, emailCommseqEmail);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update email email 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid">null</param>
        /// <param name="commseqEmailUuid">null</param>
        /// <param name="emailCommseqEmail">Email commseq email</param>
        /// <returns>ApiResponse of EmailCommseqEmailResponse</returns>
        public ApiResponse< EmailCommseqEmailResponse > UpdateEmailEmailWithHttpInfo (string storefrontOid, string commseqEmailUuid, EmailCommseqEmail emailCommseqEmail)
        {
            // verify the required parameter 'storefrontOid' is set
            if (storefrontOid == null)
                throw new ApiException(400, "Missing required parameter 'storefrontOid' when calling StorefrontApi->UpdateEmailEmail");
            // verify the required parameter 'commseqEmailUuid' is set
            if (commseqEmailUuid == null)
                throw new ApiException(400, "Missing required parameter 'commseqEmailUuid' when calling StorefrontApi->UpdateEmailEmail");
            // verify the required parameter 'emailCommseqEmail' is set
            if (emailCommseqEmail == null)
                throw new ApiException(400, "Missing required parameter 'emailCommseqEmail' when calling StorefrontApi->UpdateEmailEmail");

            var localVarPath = "/storefront/{storefront_oid}/email/emails/{commseq_email_uuid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (storefrontOid != null) localVarPathParams.Add("storefront_oid", Configuration.ApiClient.ParameterToString(storefrontOid)); // path parameter
            if (commseqEmailUuid != null) localVarPathParams.Add("commseq_email_uuid", Configuration.ApiClient.ParameterToString(commseqEmailUuid)); // path parameter
            if (emailCommseqEmail != null && emailCommseqEmail.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(emailCommseqEmail); // http body (model) parameter
            }
            else
            {
                localVarPostBody = emailCommseqEmail; // byte array
            }

            // authentication (ultraCartBrowserApiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key")))
            {
                localVarHeaderParams["x-ultracart-browser-key"] = Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key");
            }
            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateEmailEmail", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EmailCommseqEmailResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (EmailCommseqEmailResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(EmailCommseqEmailResponse)));
        }

        /// <summary>
        /// Update email email 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid">null</param>
        /// <param name="commseqEmailUuid">null</param>
        /// <param name="emailCommseqEmail">Email commseq email</param>
        /// <returns>Task of EmailCommseqEmailResponse</returns>
        public async System.Threading.Tasks.Task<EmailCommseqEmailResponse> UpdateEmailEmailAsync (string storefrontOid, string commseqEmailUuid, EmailCommseqEmail emailCommseqEmail)
        {
             ApiResponse<EmailCommseqEmailResponse> localVarResponse = await UpdateEmailEmailAsyncWithHttpInfo(storefrontOid, commseqEmailUuid, emailCommseqEmail);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update email email 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid">null</param>
        /// <param name="commseqEmailUuid">null</param>
        /// <param name="emailCommseqEmail">Email commseq email</param>
        /// <returns>Task of ApiResponse (EmailCommseqEmailResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<EmailCommseqEmailResponse>> UpdateEmailEmailAsyncWithHttpInfo (string storefrontOid, string commseqEmailUuid, EmailCommseqEmail emailCommseqEmail)
        {
            // verify the required parameter 'storefrontOid' is set
            if (storefrontOid == null)
                throw new ApiException(400, "Missing required parameter 'storefrontOid' when calling StorefrontApi->UpdateEmailEmail");
            // verify the required parameter 'commseqEmailUuid' is set
            if (commseqEmailUuid == null)
                throw new ApiException(400, "Missing required parameter 'commseqEmailUuid' when calling StorefrontApi->UpdateEmailEmail");
            // verify the required parameter 'emailCommseqEmail' is set
            if (emailCommseqEmail == null)
                throw new ApiException(400, "Missing required parameter 'emailCommseqEmail' when calling StorefrontApi->UpdateEmailEmail");

            var localVarPath = "/storefront/{storefront_oid}/email/emails/{commseq_email_uuid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (storefrontOid != null) localVarPathParams.Add("storefront_oid", Configuration.ApiClient.ParameterToString(storefrontOid)); // path parameter
            if (commseqEmailUuid != null) localVarPathParams.Add("commseq_email_uuid", Configuration.ApiClient.ParameterToString(commseqEmailUuid)); // path parameter
            if (emailCommseqEmail != null && emailCommseqEmail.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(emailCommseqEmail); // http body (model) parameter
            }
            else
            {
                localVarPostBody = emailCommseqEmail; // byte array
            }

            // authentication (ultraCartBrowserApiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key")))
            {
                localVarHeaderParams["x-ultracart-browser-key"] = Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key");
            }
            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateEmailEmail", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EmailCommseqEmailResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (EmailCommseqEmailResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(EmailCommseqEmailResponse)));
        }

        /// <summary>
        /// Update email flow 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid">null</param>
        /// <param name="emailFlowUuid">null</param>
        /// <param name="emailFlow">Email flow</param>
        /// <returns>EmailFlowResponse</returns>
        public EmailFlowResponse UpdateEmailFlow (string storefrontOid, string emailFlowUuid, EmailFlow emailFlow)
        {
             ApiResponse<EmailFlowResponse> localVarResponse = UpdateEmailFlowWithHttpInfo(storefrontOid, emailFlowUuid, emailFlow);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update email flow 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid">null</param>
        /// <param name="emailFlowUuid">null</param>
        /// <param name="emailFlow">Email flow</param>
        /// <returns>ApiResponse of EmailFlowResponse</returns>
        public ApiResponse< EmailFlowResponse > UpdateEmailFlowWithHttpInfo (string storefrontOid, string emailFlowUuid, EmailFlow emailFlow)
        {
            // verify the required parameter 'storefrontOid' is set
            if (storefrontOid == null)
                throw new ApiException(400, "Missing required parameter 'storefrontOid' when calling StorefrontApi->UpdateEmailFlow");
            // verify the required parameter 'emailFlowUuid' is set
            if (emailFlowUuid == null)
                throw new ApiException(400, "Missing required parameter 'emailFlowUuid' when calling StorefrontApi->UpdateEmailFlow");
            // verify the required parameter 'emailFlow' is set
            if (emailFlow == null)
                throw new ApiException(400, "Missing required parameter 'emailFlow' when calling StorefrontApi->UpdateEmailFlow");

            var localVarPath = "/storefront/{storefront_oid}/email/flows/{email_flow_uuid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (storefrontOid != null) localVarPathParams.Add("storefront_oid", Configuration.ApiClient.ParameterToString(storefrontOid)); // path parameter
            if (emailFlowUuid != null) localVarPathParams.Add("email_flow_uuid", Configuration.ApiClient.ParameterToString(emailFlowUuid)); // path parameter
            if (emailFlow != null && emailFlow.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(emailFlow); // http body (model) parameter
            }
            else
            {
                localVarPostBody = emailFlow; // byte array
            }

            // authentication (ultraCartBrowserApiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key")))
            {
                localVarHeaderParams["x-ultracart-browser-key"] = Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key");
            }
            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateEmailFlow", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EmailFlowResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (EmailFlowResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(EmailFlowResponse)));
        }

        /// <summary>
        /// Update email flow 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid">null</param>
        /// <param name="emailFlowUuid">null</param>
        /// <param name="emailFlow">Email flow</param>
        /// <returns>Task of EmailFlowResponse</returns>
        public async System.Threading.Tasks.Task<EmailFlowResponse> UpdateEmailFlowAsync (string storefrontOid, string emailFlowUuid, EmailFlow emailFlow)
        {
             ApiResponse<EmailFlowResponse> localVarResponse = await UpdateEmailFlowAsyncWithHttpInfo(storefrontOid, emailFlowUuid, emailFlow);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update email flow 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid">null</param>
        /// <param name="emailFlowUuid">null</param>
        /// <param name="emailFlow">Email flow</param>
        /// <returns>Task of ApiResponse (EmailFlowResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<EmailFlowResponse>> UpdateEmailFlowAsyncWithHttpInfo (string storefrontOid, string emailFlowUuid, EmailFlow emailFlow)
        {
            // verify the required parameter 'storefrontOid' is set
            if (storefrontOid == null)
                throw new ApiException(400, "Missing required parameter 'storefrontOid' when calling StorefrontApi->UpdateEmailFlow");
            // verify the required parameter 'emailFlowUuid' is set
            if (emailFlowUuid == null)
                throw new ApiException(400, "Missing required parameter 'emailFlowUuid' when calling StorefrontApi->UpdateEmailFlow");
            // verify the required parameter 'emailFlow' is set
            if (emailFlow == null)
                throw new ApiException(400, "Missing required parameter 'emailFlow' when calling StorefrontApi->UpdateEmailFlow");

            var localVarPath = "/storefront/{storefront_oid}/email/flows/{email_flow_uuid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (storefrontOid != null) localVarPathParams.Add("storefront_oid", Configuration.ApiClient.ParameterToString(storefrontOid)); // path parameter
            if (emailFlowUuid != null) localVarPathParams.Add("email_flow_uuid", Configuration.ApiClient.ParameterToString(emailFlowUuid)); // path parameter
            if (emailFlow != null && emailFlow.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(emailFlow); // http body (model) parameter
            }
            else
            {
                localVarPostBody = emailFlow; // byte array
            }

            // authentication (ultraCartBrowserApiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key")))
            {
                localVarHeaderParams["x-ultracart-browser-key"] = Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key");
            }
            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateEmailFlow", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EmailFlowResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (EmailFlowResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(EmailFlowResponse)));
        }

        /// <summary>
        /// Update email list 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid">null</param>
        /// <param name="emailListUuid">null</param>
        /// <param name="emailList">Email list</param>
        /// <returns>EmailListResponse</returns>
        public EmailListResponse UpdateEmailList (string storefrontOid, string emailListUuid, EmailList emailList)
        {
             ApiResponse<EmailListResponse> localVarResponse = UpdateEmailListWithHttpInfo(storefrontOid, emailListUuid, emailList);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update email list 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid">null</param>
        /// <param name="emailListUuid">null</param>
        /// <param name="emailList">Email list</param>
        /// <returns>ApiResponse of EmailListResponse</returns>
        public ApiResponse< EmailListResponse > UpdateEmailListWithHttpInfo (string storefrontOid, string emailListUuid, EmailList emailList)
        {
            // verify the required parameter 'storefrontOid' is set
            if (storefrontOid == null)
                throw new ApiException(400, "Missing required parameter 'storefrontOid' when calling StorefrontApi->UpdateEmailList");
            // verify the required parameter 'emailListUuid' is set
            if (emailListUuid == null)
                throw new ApiException(400, "Missing required parameter 'emailListUuid' when calling StorefrontApi->UpdateEmailList");
            // verify the required parameter 'emailList' is set
            if (emailList == null)
                throw new ApiException(400, "Missing required parameter 'emailList' when calling StorefrontApi->UpdateEmailList");

            var localVarPath = "/storefront/{storefront_oid}/email/lists/{email_list_uuid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (storefrontOid != null) localVarPathParams.Add("storefront_oid", Configuration.ApiClient.ParameterToString(storefrontOid)); // path parameter
            if (emailListUuid != null) localVarPathParams.Add("email_list_uuid", Configuration.ApiClient.ParameterToString(emailListUuid)); // path parameter
            if (emailList != null && emailList.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(emailList); // http body (model) parameter
            }
            else
            {
                localVarPostBody = emailList; // byte array
            }

            // authentication (ultraCartBrowserApiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key")))
            {
                localVarHeaderParams["x-ultracart-browser-key"] = Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key");
            }
            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateEmailList", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EmailListResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (EmailListResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(EmailListResponse)));
        }

        /// <summary>
        /// Update email list 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid">null</param>
        /// <param name="emailListUuid">null</param>
        /// <param name="emailList">Email list</param>
        /// <returns>Task of EmailListResponse</returns>
        public async System.Threading.Tasks.Task<EmailListResponse> UpdateEmailListAsync (string storefrontOid, string emailListUuid, EmailList emailList)
        {
             ApiResponse<EmailListResponse> localVarResponse = await UpdateEmailListAsyncWithHttpInfo(storefrontOid, emailListUuid, emailList);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update email list 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid">null</param>
        /// <param name="emailListUuid">null</param>
        /// <param name="emailList">Email list</param>
        /// <returns>Task of ApiResponse (EmailListResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<EmailListResponse>> UpdateEmailListAsyncWithHttpInfo (string storefrontOid, string emailListUuid, EmailList emailList)
        {
            // verify the required parameter 'storefrontOid' is set
            if (storefrontOid == null)
                throw new ApiException(400, "Missing required parameter 'storefrontOid' when calling StorefrontApi->UpdateEmailList");
            // verify the required parameter 'emailListUuid' is set
            if (emailListUuid == null)
                throw new ApiException(400, "Missing required parameter 'emailListUuid' when calling StorefrontApi->UpdateEmailList");
            // verify the required parameter 'emailList' is set
            if (emailList == null)
                throw new ApiException(400, "Missing required parameter 'emailList' when calling StorefrontApi->UpdateEmailList");

            var localVarPath = "/storefront/{storefront_oid}/email/lists/{email_list_uuid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (storefrontOid != null) localVarPathParams.Add("storefront_oid", Configuration.ApiClient.ParameterToString(storefrontOid)); // path parameter
            if (emailListUuid != null) localVarPathParams.Add("email_list_uuid", Configuration.ApiClient.ParameterToString(emailListUuid)); // path parameter
            if (emailList != null && emailList.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(emailList); // http body (model) parameter
            }
            else
            {
                localVarPostBody = emailList; // byte array
            }

            // authentication (ultraCartBrowserApiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key")))
            {
                localVarHeaderParams["x-ultracart-browser-key"] = Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key");
            }
            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateEmailList", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EmailListResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (EmailListResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(EmailListResponse)));
        }

        /// <summary>
        /// Update email segment 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid">null</param>
        /// <param name="emailSegmentUuid">null</param>
        /// <param name="emailSegment">Email segment</param>
        /// <returns>EmailSegmentResponse</returns>
        public EmailSegmentResponse UpdateEmailSegment (string storefrontOid, string emailSegmentUuid, EmailSegment emailSegment)
        {
             ApiResponse<EmailSegmentResponse> localVarResponse = UpdateEmailSegmentWithHttpInfo(storefrontOid, emailSegmentUuid, emailSegment);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update email segment 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid">null</param>
        /// <param name="emailSegmentUuid">null</param>
        /// <param name="emailSegment">Email segment</param>
        /// <returns>ApiResponse of EmailSegmentResponse</returns>
        public ApiResponse< EmailSegmentResponse > UpdateEmailSegmentWithHttpInfo (string storefrontOid, string emailSegmentUuid, EmailSegment emailSegment)
        {
            // verify the required parameter 'storefrontOid' is set
            if (storefrontOid == null)
                throw new ApiException(400, "Missing required parameter 'storefrontOid' when calling StorefrontApi->UpdateEmailSegment");
            // verify the required parameter 'emailSegmentUuid' is set
            if (emailSegmentUuid == null)
                throw new ApiException(400, "Missing required parameter 'emailSegmentUuid' when calling StorefrontApi->UpdateEmailSegment");
            // verify the required parameter 'emailSegment' is set
            if (emailSegment == null)
                throw new ApiException(400, "Missing required parameter 'emailSegment' when calling StorefrontApi->UpdateEmailSegment");

            var localVarPath = "/storefront/{storefront_oid}/email/segments/{email_segment_uuid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (storefrontOid != null) localVarPathParams.Add("storefront_oid", Configuration.ApiClient.ParameterToString(storefrontOid)); // path parameter
            if (emailSegmentUuid != null) localVarPathParams.Add("email_segment_uuid", Configuration.ApiClient.ParameterToString(emailSegmentUuid)); // path parameter
            if (emailSegment != null && emailSegment.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(emailSegment); // http body (model) parameter
            }
            else
            {
                localVarPostBody = emailSegment; // byte array
            }

            // authentication (ultraCartBrowserApiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key")))
            {
                localVarHeaderParams["x-ultracart-browser-key"] = Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key");
            }
            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateEmailSegment", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EmailSegmentResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (EmailSegmentResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(EmailSegmentResponse)));
        }

        /// <summary>
        /// Update email segment 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid">null</param>
        /// <param name="emailSegmentUuid">null</param>
        /// <param name="emailSegment">Email segment</param>
        /// <returns>Task of EmailSegmentResponse</returns>
        public async System.Threading.Tasks.Task<EmailSegmentResponse> UpdateEmailSegmentAsync (string storefrontOid, string emailSegmentUuid, EmailSegment emailSegment)
        {
             ApiResponse<EmailSegmentResponse> localVarResponse = await UpdateEmailSegmentAsyncWithHttpInfo(storefrontOid, emailSegmentUuid, emailSegment);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update email segment 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid">null</param>
        /// <param name="emailSegmentUuid">null</param>
        /// <param name="emailSegment">Email segment</param>
        /// <returns>Task of ApiResponse (EmailSegmentResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<EmailSegmentResponse>> UpdateEmailSegmentAsyncWithHttpInfo (string storefrontOid, string emailSegmentUuid, EmailSegment emailSegment)
        {
            // verify the required parameter 'storefrontOid' is set
            if (storefrontOid == null)
                throw new ApiException(400, "Missing required parameter 'storefrontOid' when calling StorefrontApi->UpdateEmailSegment");
            // verify the required parameter 'emailSegmentUuid' is set
            if (emailSegmentUuid == null)
                throw new ApiException(400, "Missing required parameter 'emailSegmentUuid' when calling StorefrontApi->UpdateEmailSegment");
            // verify the required parameter 'emailSegment' is set
            if (emailSegment == null)
                throw new ApiException(400, "Missing required parameter 'emailSegment' when calling StorefrontApi->UpdateEmailSegment");

            var localVarPath = "/storefront/{storefront_oid}/email/segments/{email_segment_uuid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (storefrontOid != null) localVarPathParams.Add("storefront_oid", Configuration.ApiClient.ParameterToString(storefrontOid)); // path parameter
            if (emailSegmentUuid != null) localVarPathParams.Add("email_segment_uuid", Configuration.ApiClient.ParameterToString(emailSegmentUuid)); // path parameter
            if (emailSegment != null && emailSegment.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(emailSegment); // http body (model) parameter
            }
            else
            {
                localVarPostBody = emailSegment; // byte array
            }

            // authentication (ultraCartBrowserApiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key")))
            {
                localVarHeaderParams["x-ultracart-browser-key"] = Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key");
            }
            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateEmailSegment", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EmailSegmentResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (EmailSegmentResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(EmailSegmentResponse)));
        }

        /// <summary>
        /// Update experiment 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid">null</param>
        /// <param name="storefrontExperimentOid">null</param>
        /// <param name="experiment">Experiment</param>
        /// <returns>ExperimentResponse</returns>
        public ExperimentResponse UpdateExperiment (string storefrontOid, int? storefrontExperimentOid, Experiment experiment)
        {
             ApiResponse<ExperimentResponse> localVarResponse = UpdateExperimentWithHttpInfo(storefrontOid, storefrontExperimentOid, experiment);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update experiment 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid">null</param>
        /// <param name="storefrontExperimentOid">null</param>
        /// <param name="experiment">Experiment</param>
        /// <returns>ApiResponse of ExperimentResponse</returns>
        public ApiResponse< ExperimentResponse > UpdateExperimentWithHttpInfo (string storefrontOid, int? storefrontExperimentOid, Experiment experiment)
        {
            // verify the required parameter 'storefrontOid' is set
            if (storefrontOid == null)
                throw new ApiException(400, "Missing required parameter 'storefrontOid' when calling StorefrontApi->UpdateExperiment");
            // verify the required parameter 'storefrontExperimentOid' is set
            if (storefrontExperimentOid == null)
                throw new ApiException(400, "Missing required parameter 'storefrontExperimentOid' when calling StorefrontApi->UpdateExperiment");
            // verify the required parameter 'experiment' is set
            if (experiment == null)
                throw new ApiException(400, "Missing required parameter 'experiment' when calling StorefrontApi->UpdateExperiment");

            var localVarPath = "/storefront/{storefront_oid}/experiments/{storefront_experiment_oid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (storefrontOid != null) localVarPathParams.Add("storefront_oid", Configuration.ApiClient.ParameterToString(storefrontOid)); // path parameter
            if (storefrontExperimentOid != null) localVarPathParams.Add("storefront_experiment_oid", Configuration.ApiClient.ParameterToString(storefrontExperimentOid)); // path parameter
            if (experiment != null && experiment.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(experiment); // http body (model) parameter
            }
            else
            {
                localVarPostBody = experiment; // byte array
            }

            // authentication (ultraCartBrowserApiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key")))
            {
                localVarHeaderParams["x-ultracart-browser-key"] = Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key");
            }
            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateExperiment", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ExperimentResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ExperimentResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ExperimentResponse)));
        }

        /// <summary>
        /// Update experiment 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid">null</param>
        /// <param name="storefrontExperimentOid">null</param>
        /// <param name="experiment">Experiment</param>
        /// <returns>Task of ExperimentResponse</returns>
        public async System.Threading.Tasks.Task<ExperimentResponse> UpdateExperimentAsync (string storefrontOid, int? storefrontExperimentOid, Experiment experiment)
        {
             ApiResponse<ExperimentResponse> localVarResponse = await UpdateExperimentAsyncWithHttpInfo(storefrontOid, storefrontExperimentOid, experiment);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update experiment 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storefrontOid">null</param>
        /// <param name="storefrontExperimentOid">null</param>
        /// <param name="experiment">Experiment</param>
        /// <returns>Task of ApiResponse (ExperimentResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ExperimentResponse>> UpdateExperimentAsyncWithHttpInfo (string storefrontOid, int? storefrontExperimentOid, Experiment experiment)
        {
            // verify the required parameter 'storefrontOid' is set
            if (storefrontOid == null)
                throw new ApiException(400, "Missing required parameter 'storefrontOid' when calling StorefrontApi->UpdateExperiment");
            // verify the required parameter 'storefrontExperimentOid' is set
            if (storefrontExperimentOid == null)
                throw new ApiException(400, "Missing required parameter 'storefrontExperimentOid' when calling StorefrontApi->UpdateExperiment");
            // verify the required parameter 'experiment' is set
            if (experiment == null)
                throw new ApiException(400, "Missing required parameter 'experiment' when calling StorefrontApi->UpdateExperiment");

            var localVarPath = "/storefront/{storefront_oid}/experiments/{storefront_experiment_oid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (storefrontOid != null) localVarPathParams.Add("storefront_oid", Configuration.ApiClient.ParameterToString(storefrontOid)); // path parameter
            if (storefrontExperimentOid != null) localVarPathParams.Add("storefront_experiment_oid", Configuration.ApiClient.ParameterToString(storefrontExperimentOid)); // path parameter
            if (experiment != null && experiment.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(experiment); // http body (model) parameter
            }
            else
            {
                localVarPostBody = experiment; // byte array
            }

            // authentication (ultraCartBrowserApiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key")))
            {
                localVarHeaderParams["x-ultracart-browser-key"] = Configuration.GetApiKeyWithPrefix("x-ultracart-browser-key");
            }
            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateExperiment", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ExperimentResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ExperimentResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ExperimentResponse)));
        }

    }
}
