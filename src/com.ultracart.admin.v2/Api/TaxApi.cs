/*
 * UltraCart Rest API V2
 *
 * UltraCart REST API Version 2
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@ultracart.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Threading;
using RestSharp;
using com.ultracart.admin.v2.Client;
using com.ultracart.admin.v2.Model;

namespace com.ultracart.admin.v2.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ITaxApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Deletes a Self tax provider city
        /// </summary>
        /// <remarks>
        /// Deletes a Self tax provider city. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="city">The city being deleted.</param>
        /// <param name="taxCity">tax city to be deleted</param>
        /// <returns></returns>
        void DeleteTaxProviderSelfCity (string city, TaxCity taxCity);

        /// <summary>
        /// Deletes a Self tax provider city
        /// </summary>
        /// <remarks>
        /// Deletes a Self tax provider city. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="city">The city being deleted.</param>
        /// <param name="taxCity">tax city to be deleted</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteTaxProviderSelfCityWithHttpInfo (string city, TaxCity taxCity);
        /// <summary>
        /// Deletes a Self tax provider country
        /// </summary>
        /// <remarks>
        /// Deletes a Self tax provider country. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="countryCode">The country code being deleted.</param>
        /// <param name="taxCountry">tax country to be deleted</param>
        /// <returns></returns>
        void DeleteTaxProviderSelfCountry (string countryCode, TaxCountry taxCountry);

        /// <summary>
        /// Deletes a Self tax provider country
        /// </summary>
        /// <remarks>
        /// Deletes a Self tax provider country. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="countryCode">The country code being deleted.</param>
        /// <param name="taxCountry">tax country to be deleted</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteTaxProviderSelfCountryWithHttpInfo (string countryCode, TaxCountry taxCountry);
        /// <summary>
        /// Deletes a Self tax provider county
        /// </summary>
        /// <remarks>
        /// Deletes a Self tax provider county. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="county">The county being deleted.</param>
        /// <param name="taxCounty">tax county to be deleted</param>
        /// <returns></returns>
        void DeleteTaxProviderSelfCounty (string county, TaxCounty taxCounty);

        /// <summary>
        /// Deletes a Self tax provider county
        /// </summary>
        /// <remarks>
        /// Deletes a Self tax provider county. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="county">The county being deleted.</param>
        /// <param name="taxCounty">tax county to be deleted</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteTaxProviderSelfCountyWithHttpInfo (string county, TaxCounty taxCounty);
        /// <summary>
        /// Deletes a Self tax provider postalCode
        /// </summary>
        /// <remarks>
        /// Deletes a Self tax provider postalCode. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postalCode">The postal code being deleted.</param>
        /// <param name="taxPostalCode">tax postal code to be deleted</param>
        /// <returns></returns>
        void DeleteTaxProviderSelfPostalCode (string postalCode, TaxPostalCode taxPostalCode);

        /// <summary>
        /// Deletes a Self tax provider postalCode
        /// </summary>
        /// <remarks>
        /// Deletes a Self tax provider postalCode. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postalCode">The postal code being deleted.</param>
        /// <param name="taxPostalCode">tax postal code to be deleted</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteTaxProviderSelfPostalCodeWithHttpInfo (string postalCode, TaxPostalCode taxPostalCode);
        /// <summary>
        /// Deletes a Self tax provider state
        /// </summary>
        /// <remarks>
        /// Deletes a Self tax provider state. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stateCode">The state code being deleted.</param>
        /// <param name="taxState">tax state to be deleted</param>
        /// <returns></returns>
        void DeleteTaxProviderSelfState (string stateCode, TaxState taxState);

        /// <summary>
        /// Deletes a Self tax provider state
        /// </summary>
        /// <remarks>
        /// Deletes a Self tax provider state. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stateCode">The state code being deleted.</param>
        /// <param name="taxState">tax state to be deleted</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteTaxProviderSelfStateWithHttpInfo (string stateCode, TaxState taxState);
        /// <summary>
        /// Retrieve the Avalara tax provider
        /// </summary>
        /// <remarks>
        /// Retrieves the Avalara tax provider. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>TaxProviderAvalara</returns>
        TaxProviderAvalara GetTaxProviderAvalara ();

        /// <summary>
        /// Retrieve the Avalara tax provider
        /// </summary>
        /// <remarks>
        /// Retrieves the Avalara tax provider. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of TaxProviderAvalara</returns>
        ApiResponse<TaxProviderAvalara> GetTaxProviderAvalaraWithHttpInfo ();
        /// <summary>
        /// Returns Avalara Tax companies configured by the merchant
        /// </summary>
        /// <remarks>
        /// Returns Avalara Tax companies configured by the merchant 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taxProviderAvalara">TaxProviderAvalara object</param>
        /// <returns>TaxProviderAvalaraCompaniesResult</returns>
        TaxProviderAvalaraCompaniesResult GetTaxProviderAvalaraCompanies (TaxProviderAvalara taxProviderAvalara);

        /// <summary>
        /// Returns Avalara Tax companies configured by the merchant
        /// </summary>
        /// <remarks>
        /// Returns Avalara Tax companies configured by the merchant 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taxProviderAvalara">TaxProviderAvalara object</param>
        /// <returns>ApiResponse of TaxProviderAvalaraCompaniesResult</returns>
        ApiResponse<TaxProviderAvalaraCompaniesResult> GetTaxProviderAvalaraCompaniesWithHttpInfo (TaxProviderAvalara taxProviderAvalara);
        /// <summary>
        /// Attempts to connect to Avalara and returns back the response
        /// </summary>
        /// <remarks>
        /// Attempts to connect to Avalara and returns back the response. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>TaxProviderTestResult</returns>
        TaxProviderTestResult GetTaxProviderAvalaraTest ();

        /// <summary>
        /// Attempts to connect to Avalara and returns back the response
        /// </summary>
        /// <remarks>
        /// Attempts to connect to Avalara and returns back the response. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of TaxProviderTestResult</returns>
        ApiResponse<TaxProviderTestResult> GetTaxProviderAvalaraTestWithHttpInfo ();
        /// <summary>
        /// Retrieve the Self tax provider
        /// </summary>
        /// <remarks>
        /// Retrieves the Self tax provider. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>TaxProviderSelf</returns>
        TaxProviderSelf GetTaxProviderSelf ();

        /// <summary>
        /// Retrieve the Self tax provider
        /// </summary>
        /// <remarks>
        /// Retrieves the Self tax provider. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of TaxProviderSelf</returns>
        ApiResponse<TaxProviderSelf> GetTaxProviderSelfWithHttpInfo ();
        /// <summary>
        /// Retrieve the Self tax provider countries
        /// </summary>
        /// <remarks>
        /// Retrieves the Self tax provider countries. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>TaxProviderSelfCountriesResponse</returns>
        TaxProviderSelfCountriesResponse GetTaxProviderSelfCountries ();

        /// <summary>
        /// Retrieve the Self tax provider countries
        /// </summary>
        /// <remarks>
        /// Retrieves the Self tax provider countries. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of TaxProviderSelfCountriesResponse</returns>
        ApiResponse<TaxProviderSelfCountriesResponse> GetTaxProviderSelfCountriesWithHttpInfo ();
        /// <summary>
        /// Retrieve the Self tax provider regions for a given country code
        /// </summary>
        /// <remarks>
        /// Retrieves the Self tax provider regions for a given country code. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="countryCode">The country code regions desired.</param>
        /// <returns>TaxProviderSelfRegionsResponse</returns>
        TaxProviderSelfRegionsResponse GetTaxProviderSelfRegionsByCountryCode (string countryCode);

        /// <summary>
        /// Retrieve the Self tax provider regions for a given country code
        /// </summary>
        /// <remarks>
        /// Retrieves the Self tax provider regions for a given country code. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="countryCode">The country code regions desired.</param>
        /// <returns>ApiResponse of TaxProviderSelfRegionsResponse</returns>
        ApiResponse<TaxProviderSelfRegionsResponse> GetTaxProviderSelfRegionsByCountryCodeWithHttpInfo (string countryCode);
        /// <summary>
        /// Retrieve the Sovos tax provider
        /// </summary>
        /// <remarks>
        /// Retrieves the Sovos tax provider. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>TaxProviderSovos</returns>
        TaxProviderSovos GetTaxProviderSovos ();

        /// <summary>
        /// Retrieve the Sovos tax provider
        /// </summary>
        /// <remarks>
        /// Retrieves the Sovos tax provider. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of TaxProviderSovos</returns>
        ApiResponse<TaxProviderSovos> GetTaxProviderSovosWithHttpInfo ();
        /// <summary>
        /// Attempts to connect to Sovos and returns back the response
        /// </summary>
        /// <remarks>
        /// Attempts to connect to Sovos and returns back the response. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>TaxProviderTestResult</returns>
        TaxProviderTestResult GetTaxProviderSovosTest ();

        /// <summary>
        /// Attempts to connect to Sovos and returns back the response
        /// </summary>
        /// <remarks>
        /// Attempts to connect to Sovos and returns back the response. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of TaxProviderTestResult</returns>
        ApiResponse<TaxProviderTestResult> GetTaxProviderSovosTestWithHttpInfo ();
        /// <summary>
        /// Retrieve the TaxJar tax provider
        /// </summary>
        /// <remarks>
        /// Retrieves the TaxJar tax provider. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>TaxProviderTaxJar</returns>
        TaxProviderTaxJar GetTaxProviderTaxJar ();

        /// <summary>
        /// Retrieve the TaxJar tax provider
        /// </summary>
        /// <remarks>
        /// Retrieves the TaxJar tax provider. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of TaxProviderTaxJar</returns>
        ApiResponse<TaxProviderTaxJar> GetTaxProviderTaxJarWithHttpInfo ();
        /// <summary>
        /// Attempts to connect to TaxJar and returns back the response
        /// </summary>
        /// <remarks>
        /// Attempts to connect to TaxJar and returns back the response. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>TaxProviderTestResult</returns>
        TaxProviderTestResult GetTaxProviderTaxJarTest ();

        /// <summary>
        /// Attempts to connect to TaxJar and returns back the response
        /// </summary>
        /// <remarks>
        /// Attempts to connect to TaxJar and returns back the response. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of TaxProviderTestResult</returns>
        ApiResponse<TaxProviderTestResult> GetTaxProviderTaxJarTestWithHttpInfo ();
        /// <summary>
        /// Retrieve the UltraCart tax provider
        /// </summary>
        /// <remarks>
        /// Retrieves the UltraCart tax provider. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>TaxProviderUltraCart</returns>
        TaxProviderUltraCart GetTaxProviderUltraCart ();

        /// <summary>
        /// Retrieve the UltraCart tax provider
        /// </summary>
        /// <remarks>
        /// Retrieves the UltraCart tax provider. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of TaxProviderUltraCart</returns>
        ApiResponse<TaxProviderUltraCart> GetTaxProviderUltraCartWithHttpInfo ();
        /// <summary>
        /// Retrieve tax methods
        /// </summary>
        /// <remarks>
        /// Retrieves tax methods for this account. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">The maximum number of records to return on this one API call. (Max 200) (optional, default to 100)</param>
        /// <param name="offset">Pagination of the record set.  Offset is a zero based index. (optional, default to 0)</param>
        /// <param name="expand">The object expansion to perform on the result.  See documentation for examples (optional)</param>
        /// <returns>TaxProvidersResponse</returns>
        TaxProvidersResponse GetTaxProviders (int? limit = default(int?), int? offset = default(int?), string expand = default(string));

        /// <summary>
        /// Retrieve tax methods
        /// </summary>
        /// <remarks>
        /// Retrieves tax methods for this account. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">The maximum number of records to return on this one API call. (Max 200) (optional, default to 100)</param>
        /// <param name="offset">Pagination of the record set.  Offset is a zero based index. (optional, default to 0)</param>
        /// <param name="expand">The object expansion to perform on the result.  See documentation for examples (optional)</param>
        /// <returns>ApiResponse of TaxProvidersResponse</returns>
        ApiResponse<TaxProvidersResponse> GetTaxProvidersWithHttpInfo (int? limit = default(int?), int? offset = default(int?), string expand = default(string));
        /// <summary>
        /// Toggle a tax provider to active
        /// </summary>
        /// <remarks>
        /// Toggle a tax provider to active. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="providerName">The tax provider to set active.</param>
        /// <returns>TaxProviderActivateResult</returns>
        TaxProviderActivateResult SetActiveTaxProvider (string providerName);

        /// <summary>
        /// Toggle a tax provider to active
        /// </summary>
        /// <remarks>
        /// Toggle a tax provider to active. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="providerName">The tax provider to set active.</param>
        /// <returns>ApiResponse of TaxProviderActivateResult</returns>
        ApiResponse<TaxProviderActivateResult> SetActiveTaxProviderWithHttpInfo (string providerName);
        /// <summary>
        /// Update the Avalara tax provider
        /// </summary>
        /// <remarks>
        /// Update the Avalara tax provider. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taxProviderAvalara">TaxProviderAvalara object</param>
        /// <returns>TaxProviderAvalara</returns>
        TaxProviderAvalara UpdateTaxProviderAvalara (TaxProviderAvalara taxProviderAvalara);

        /// <summary>
        /// Update the Avalara tax provider
        /// </summary>
        /// <remarks>
        /// Update the Avalara tax provider. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taxProviderAvalara">TaxProviderAvalara object</param>
        /// <returns>ApiResponse of TaxProviderAvalara</returns>
        ApiResponse<TaxProviderAvalara> UpdateTaxProviderAvalaraWithHttpInfo (TaxProviderAvalara taxProviderAvalara);
        /// <summary>
        /// Update the Self tax provider
        /// </summary>
        /// <remarks>
        /// Update the Self tax provider. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taxProviderSelf">TaxProviderSelf object</param>
        /// <returns>TaxProviderSelf</returns>
        TaxProviderSelf UpdateTaxProviderSelf (TaxProviderSelf taxProviderSelf);

        /// <summary>
        /// Update the Self tax provider
        /// </summary>
        /// <remarks>
        /// Update the Self tax provider. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taxProviderSelf">TaxProviderSelf object</param>
        /// <returns>ApiResponse of TaxProviderSelf</returns>
        ApiResponse<TaxProviderSelf> UpdateTaxProviderSelfWithHttpInfo (TaxProviderSelf taxProviderSelf);
        /// <summary>
        /// Updates a Self tax provider city
        /// </summary>
        /// <remarks>
        /// Updates a Self tax provider city. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="city">The city being updated.</param>
        /// <param name="taxCity">tax city to be updated</param>
        /// <returns>TaxCity</returns>
        TaxCity UpdateTaxProviderSelfCity (string city, TaxCity taxCity);

        /// <summary>
        /// Updates a Self tax provider city
        /// </summary>
        /// <remarks>
        /// Updates a Self tax provider city. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="city">The city being updated.</param>
        /// <param name="taxCity">tax city to be updated</param>
        /// <returns>ApiResponse of TaxCity</returns>
        ApiResponse<TaxCity> UpdateTaxProviderSelfCityWithHttpInfo (string city, TaxCity taxCity);
        /// <summary>
        /// Updates a Self tax provider country
        /// </summary>
        /// <remarks>
        /// Updates a Self tax provider country. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="countryCode">The country code being updated.</param>
        /// <param name="taxCountry">tax country to be updated</param>
        /// <returns>TaxCountry</returns>
        TaxCountry UpdateTaxProviderSelfCountry (string countryCode, TaxCountry taxCountry);

        /// <summary>
        /// Updates a Self tax provider country
        /// </summary>
        /// <remarks>
        /// Updates a Self tax provider country. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="countryCode">The country code being updated.</param>
        /// <param name="taxCountry">tax country to be updated</param>
        /// <returns>ApiResponse of TaxCountry</returns>
        ApiResponse<TaxCountry> UpdateTaxProviderSelfCountryWithHttpInfo (string countryCode, TaxCountry taxCountry);
        /// <summary>
        /// Updates a Self tax provider county
        /// </summary>
        /// <remarks>
        /// Updates a Self tax provider county. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="county">The county being updated.</param>
        /// <param name="taxCounty">tax county to be updated</param>
        /// <returns>TaxCounty</returns>
        TaxCounty UpdateTaxProviderSelfCounty (string county, TaxCounty taxCounty);

        /// <summary>
        /// Updates a Self tax provider county
        /// </summary>
        /// <remarks>
        /// Updates a Self tax provider county. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="county">The county being updated.</param>
        /// <param name="taxCounty">tax county to be updated</param>
        /// <returns>ApiResponse of TaxCounty</returns>
        ApiResponse<TaxCounty> UpdateTaxProviderSelfCountyWithHttpInfo (string county, TaxCounty taxCounty);
        /// <summary>
        /// Updates a Self tax provider postalCode
        /// </summary>
        /// <remarks>
        /// Updates a Self tax provider postalCode. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postalCode">The postal code being updated.</param>
        /// <param name="taxPostalCode">tax postal code to be updated</param>
        /// <returns>TaxPostalCode</returns>
        TaxPostalCode UpdateTaxProviderSelfPostalCode (string postalCode, TaxPostalCode taxPostalCode);

        /// <summary>
        /// Updates a Self tax provider postalCode
        /// </summary>
        /// <remarks>
        /// Updates a Self tax provider postalCode. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postalCode">The postal code being updated.</param>
        /// <param name="taxPostalCode">tax postal code to be updated</param>
        /// <returns>ApiResponse of TaxPostalCode</returns>
        ApiResponse<TaxPostalCode> UpdateTaxProviderSelfPostalCodeWithHttpInfo (string postalCode, TaxPostalCode taxPostalCode);
        /// <summary>
        /// Updates a Self tax provider state
        /// </summary>
        /// <remarks>
        /// Updates a Self tax provider state. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stateCode">The state code being updated.</param>
        /// <param name="taxState">tax state to be updated</param>
        /// <returns>TaxState</returns>
        TaxState UpdateTaxProviderSelfState (string stateCode, TaxState taxState);

        /// <summary>
        /// Updates a Self tax provider state
        /// </summary>
        /// <remarks>
        /// Updates a Self tax provider state. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stateCode">The state code being updated.</param>
        /// <param name="taxState">tax state to be updated</param>
        /// <returns>ApiResponse of TaxState</returns>
        ApiResponse<TaxState> UpdateTaxProviderSelfStateWithHttpInfo (string stateCode, TaxState taxState);
        /// <summary>
        /// Update the Sovos tax provider
        /// </summary>
        /// <remarks>
        /// Update the Sovos tax provider. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taxProviderSovos">TaxProviderSovos object</param>
        /// <returns>TaxProviderSovos</returns>
        TaxProviderSovos UpdateTaxProviderSovos (TaxProviderSovos taxProviderSovos);

        /// <summary>
        /// Update the Sovos tax provider
        /// </summary>
        /// <remarks>
        /// Update the Sovos tax provider. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taxProviderSovos">TaxProviderSovos object</param>
        /// <returns>ApiResponse of TaxProviderSovos</returns>
        ApiResponse<TaxProviderSovos> UpdateTaxProviderSovosWithHttpInfo (TaxProviderSovos taxProviderSovos);
        /// <summary>
        /// Update the TaxJar tax provider
        /// </summary>
        /// <remarks>
        /// Update the TaxJar tax provider. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taxProviderTaxJar">TaxProviderTaxJar object</param>
        /// <returns>TaxProviderTaxJar</returns>
        TaxProviderTaxJar UpdateTaxProviderTaxJar (TaxProviderTaxJar taxProviderTaxJar);

        /// <summary>
        /// Update the TaxJar tax provider
        /// </summary>
        /// <remarks>
        /// Update the TaxJar tax provider. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taxProviderTaxJar">TaxProviderTaxJar object</param>
        /// <returns>ApiResponse of TaxProviderTaxJar</returns>
        ApiResponse<TaxProviderTaxJar> UpdateTaxProviderTaxJarWithHttpInfo (TaxProviderTaxJar taxProviderTaxJar);
        /// <summary>
        /// Update the UltraCart tax provider
        /// </summary>
        /// <remarks>
        /// Update the UltraCart tax provider. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taxProviderUltracart">TaxProviderUltraCart object</param>
        /// <returns>TaxProviderUltraCart</returns>
        TaxProviderUltraCart UpdateTaxProviderUltraCart (TaxProviderUltraCart taxProviderUltracart);

        /// <summary>
        /// Update the UltraCart tax provider
        /// </summary>
        /// <remarks>
        /// Update the UltraCart tax provider. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taxProviderUltracart">TaxProviderUltraCart object</param>
        /// <returns>ApiResponse of TaxProviderUltraCart</returns>
        ApiResponse<TaxProviderUltraCart> UpdateTaxProviderUltraCartWithHttpInfo (TaxProviderUltraCart taxProviderUltracart);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Deletes a Self tax provider city
        /// </summary>
        /// <remarks>
        /// Deletes a Self tax provider city. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="city">The city being deleted.</param>
        /// <param name="taxCity">tax city to be deleted</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteTaxProviderSelfCityAsync (string city, TaxCity taxCity, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Deletes a Self tax provider city
        /// </summary>
        /// <remarks>
        /// Deletes a Self tax provider city. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="city">The city being deleted.</param>
        /// <param name="taxCity">tax city to be deleted</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteTaxProviderSelfCityWithHttpInfoAsync (string city, TaxCity taxCity, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Deletes a Self tax provider country
        /// </summary>
        /// <remarks>
        /// Deletes a Self tax provider country. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="countryCode">The country code being deleted.</param>
        /// <param name="taxCountry">tax country to be deleted</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteTaxProviderSelfCountryAsync (string countryCode, TaxCountry taxCountry, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Deletes a Self tax provider country
        /// </summary>
        /// <remarks>
        /// Deletes a Self tax provider country. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="countryCode">The country code being deleted.</param>
        /// <param name="taxCountry">tax country to be deleted</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteTaxProviderSelfCountryWithHttpInfoAsync (string countryCode, TaxCountry taxCountry, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Deletes a Self tax provider county
        /// </summary>
        /// <remarks>
        /// Deletes a Self tax provider county. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="county">The county being deleted.</param>
        /// <param name="taxCounty">tax county to be deleted</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteTaxProviderSelfCountyAsync (string county, TaxCounty taxCounty, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Deletes a Self tax provider county
        /// </summary>
        /// <remarks>
        /// Deletes a Self tax provider county. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="county">The county being deleted.</param>
        /// <param name="taxCounty">tax county to be deleted</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteTaxProviderSelfCountyWithHttpInfoAsync (string county, TaxCounty taxCounty, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Deletes a Self tax provider postalCode
        /// </summary>
        /// <remarks>
        /// Deletes a Self tax provider postalCode. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postalCode">The postal code being deleted.</param>
        /// <param name="taxPostalCode">tax postal code to be deleted</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteTaxProviderSelfPostalCodeAsync (string postalCode, TaxPostalCode taxPostalCode, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Deletes a Self tax provider postalCode
        /// </summary>
        /// <remarks>
        /// Deletes a Self tax provider postalCode. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postalCode">The postal code being deleted.</param>
        /// <param name="taxPostalCode">tax postal code to be deleted</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteTaxProviderSelfPostalCodeWithHttpInfoAsync (string postalCode, TaxPostalCode taxPostalCode, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Deletes a Self tax provider state
        /// </summary>
        /// <remarks>
        /// Deletes a Self tax provider state. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stateCode">The state code being deleted.</param>
        /// <param name="taxState">tax state to be deleted</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteTaxProviderSelfStateAsync (string stateCode, TaxState taxState, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Deletes a Self tax provider state
        /// </summary>
        /// <remarks>
        /// Deletes a Self tax provider state. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stateCode">The state code being deleted.</param>
        /// <param name="taxState">tax state to be deleted</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteTaxProviderSelfStateWithHttpInfoAsync (string stateCode, TaxState taxState, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Retrieve the Avalara tax provider
        /// </summary>
        /// <remarks>
        /// Retrieves the Avalara tax provider. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of TaxProviderAvalara</returns>
        System.Threading.Tasks.Task<TaxProviderAvalara> GetTaxProviderAvalaraAsync (CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Retrieve the Avalara tax provider
        /// </summary>
        /// <remarks>
        /// Retrieves the Avalara tax provider. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (TaxProviderAvalara)</returns>
        System.Threading.Tasks.Task<ApiResponse<TaxProviderAvalara>> GetTaxProviderAvalaraWithHttpInfoAsync (CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Returns Avalara Tax companies configured by the merchant
        /// </summary>
        /// <remarks>
        /// Returns Avalara Tax companies configured by the merchant 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taxProviderAvalara">TaxProviderAvalara object</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of TaxProviderAvalaraCompaniesResult</returns>
        System.Threading.Tasks.Task<TaxProviderAvalaraCompaniesResult> GetTaxProviderAvalaraCompaniesAsync (TaxProviderAvalara taxProviderAvalara, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Returns Avalara Tax companies configured by the merchant
        /// </summary>
        /// <remarks>
        /// Returns Avalara Tax companies configured by the merchant 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taxProviderAvalara">TaxProviderAvalara object</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (TaxProviderAvalaraCompaniesResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<TaxProviderAvalaraCompaniesResult>> GetTaxProviderAvalaraCompaniesWithHttpInfoAsync (TaxProviderAvalara taxProviderAvalara, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Attempts to connect to Avalara and returns back the response
        /// </summary>
        /// <remarks>
        /// Attempts to connect to Avalara and returns back the response. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of TaxProviderTestResult</returns>
        System.Threading.Tasks.Task<TaxProviderTestResult> GetTaxProviderAvalaraTestAsync (CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Attempts to connect to Avalara and returns back the response
        /// </summary>
        /// <remarks>
        /// Attempts to connect to Avalara and returns back the response. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (TaxProviderTestResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<TaxProviderTestResult>> GetTaxProviderAvalaraTestWithHttpInfoAsync (CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Retrieve the Self tax provider
        /// </summary>
        /// <remarks>
        /// Retrieves the Self tax provider. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of TaxProviderSelf</returns>
        System.Threading.Tasks.Task<TaxProviderSelf> GetTaxProviderSelfAsync (CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Retrieve the Self tax provider
        /// </summary>
        /// <remarks>
        /// Retrieves the Self tax provider. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (TaxProviderSelf)</returns>
        System.Threading.Tasks.Task<ApiResponse<TaxProviderSelf>> GetTaxProviderSelfWithHttpInfoAsync (CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Retrieve the Self tax provider countries
        /// </summary>
        /// <remarks>
        /// Retrieves the Self tax provider countries. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of TaxProviderSelfCountriesResponse</returns>
        System.Threading.Tasks.Task<TaxProviderSelfCountriesResponse> GetTaxProviderSelfCountriesAsync (CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Retrieve the Self tax provider countries
        /// </summary>
        /// <remarks>
        /// Retrieves the Self tax provider countries. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (TaxProviderSelfCountriesResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TaxProviderSelfCountriesResponse>> GetTaxProviderSelfCountriesWithHttpInfoAsync (CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Retrieve the Self tax provider regions for a given country code
        /// </summary>
        /// <remarks>
        /// Retrieves the Self tax provider regions for a given country code. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="countryCode">The country code regions desired.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of TaxProviderSelfRegionsResponse</returns>
        System.Threading.Tasks.Task<TaxProviderSelfRegionsResponse> GetTaxProviderSelfRegionsByCountryCodeAsync (string countryCode, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Retrieve the Self tax provider regions for a given country code
        /// </summary>
        /// <remarks>
        /// Retrieves the Self tax provider regions for a given country code. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="countryCode">The country code regions desired.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (TaxProviderSelfRegionsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TaxProviderSelfRegionsResponse>> GetTaxProviderSelfRegionsByCountryCodeWithHttpInfoAsync (string countryCode, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Retrieve the Sovos tax provider
        /// </summary>
        /// <remarks>
        /// Retrieves the Sovos tax provider. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of TaxProviderSovos</returns>
        System.Threading.Tasks.Task<TaxProviderSovos> GetTaxProviderSovosAsync (CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Retrieve the Sovos tax provider
        /// </summary>
        /// <remarks>
        /// Retrieves the Sovos tax provider. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (TaxProviderSovos)</returns>
        System.Threading.Tasks.Task<ApiResponse<TaxProviderSovos>> GetTaxProviderSovosWithHttpInfoAsync (CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Attempts to connect to Sovos and returns back the response
        /// </summary>
        /// <remarks>
        /// Attempts to connect to Sovos and returns back the response. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of TaxProviderTestResult</returns>
        System.Threading.Tasks.Task<TaxProviderTestResult> GetTaxProviderSovosTestAsync (CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Attempts to connect to Sovos and returns back the response
        /// </summary>
        /// <remarks>
        /// Attempts to connect to Sovos and returns back the response. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (TaxProviderTestResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<TaxProviderTestResult>> GetTaxProviderSovosTestWithHttpInfoAsync (CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Retrieve the TaxJar tax provider
        /// </summary>
        /// <remarks>
        /// Retrieves the TaxJar tax provider. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of TaxProviderTaxJar</returns>
        System.Threading.Tasks.Task<TaxProviderTaxJar> GetTaxProviderTaxJarAsync (CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Retrieve the TaxJar tax provider
        /// </summary>
        /// <remarks>
        /// Retrieves the TaxJar tax provider. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (TaxProviderTaxJar)</returns>
        System.Threading.Tasks.Task<ApiResponse<TaxProviderTaxJar>> GetTaxProviderTaxJarWithHttpInfoAsync (CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Attempts to connect to TaxJar and returns back the response
        /// </summary>
        /// <remarks>
        /// Attempts to connect to TaxJar and returns back the response. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of TaxProviderTestResult</returns>
        System.Threading.Tasks.Task<TaxProviderTestResult> GetTaxProviderTaxJarTestAsync (CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Attempts to connect to TaxJar and returns back the response
        /// </summary>
        /// <remarks>
        /// Attempts to connect to TaxJar and returns back the response. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (TaxProviderTestResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<TaxProviderTestResult>> GetTaxProviderTaxJarTestWithHttpInfoAsync (CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Retrieve the UltraCart tax provider
        /// </summary>
        /// <remarks>
        /// Retrieves the UltraCart tax provider. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of TaxProviderUltraCart</returns>
        System.Threading.Tasks.Task<TaxProviderUltraCart> GetTaxProviderUltraCartAsync (CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Retrieve the UltraCart tax provider
        /// </summary>
        /// <remarks>
        /// Retrieves the UltraCart tax provider. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (TaxProviderUltraCart)</returns>
        System.Threading.Tasks.Task<ApiResponse<TaxProviderUltraCart>> GetTaxProviderUltraCartWithHttpInfoAsync (CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Retrieve tax methods
        /// </summary>
        /// <remarks>
        /// Retrieves tax methods for this account. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">The maximum number of records to return on this one API call. (Max 200) (optional, default to 100)</param>
        /// <param name="offset">Pagination of the record set.  Offset is a zero based index. (optional, default to 0)</param>
        /// <param name="expand">The object expansion to perform on the result.  See documentation for examples (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of TaxProvidersResponse</returns>
        System.Threading.Tasks.Task<TaxProvidersResponse> GetTaxProvidersAsync (int? limit = default(int?), int? offset = default(int?), string expand = default(string), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Retrieve tax methods
        /// </summary>
        /// <remarks>
        /// Retrieves tax methods for this account. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">The maximum number of records to return on this one API call. (Max 200) (optional, default to 100)</param>
        /// <param name="offset">Pagination of the record set.  Offset is a zero based index. (optional, default to 0)</param>
        /// <param name="expand">The object expansion to perform on the result.  See documentation for examples (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (TaxProvidersResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TaxProvidersResponse>> GetTaxProvidersWithHttpInfoAsync (int? limit = default(int?), int? offset = default(int?), string expand = default(string), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Toggle a tax provider to active
        /// </summary>
        /// <remarks>
        /// Toggle a tax provider to active. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="providerName">The tax provider to set active.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of TaxProviderActivateResult</returns>
        System.Threading.Tasks.Task<TaxProviderActivateResult> SetActiveTaxProviderAsync (string providerName, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Toggle a tax provider to active
        /// </summary>
        /// <remarks>
        /// Toggle a tax provider to active. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="providerName">The tax provider to set active.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (TaxProviderActivateResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<TaxProviderActivateResult>> SetActiveTaxProviderWithHttpInfoAsync (string providerName, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Update the Avalara tax provider
        /// </summary>
        /// <remarks>
        /// Update the Avalara tax provider. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taxProviderAvalara">TaxProviderAvalara object</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of TaxProviderAvalara</returns>
        System.Threading.Tasks.Task<TaxProviderAvalara> UpdateTaxProviderAvalaraAsync (TaxProviderAvalara taxProviderAvalara, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Update the Avalara tax provider
        /// </summary>
        /// <remarks>
        /// Update the Avalara tax provider. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taxProviderAvalara">TaxProviderAvalara object</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (TaxProviderAvalara)</returns>
        System.Threading.Tasks.Task<ApiResponse<TaxProviderAvalara>> UpdateTaxProviderAvalaraWithHttpInfoAsync (TaxProviderAvalara taxProviderAvalara, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Update the Self tax provider
        /// </summary>
        /// <remarks>
        /// Update the Self tax provider. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taxProviderSelf">TaxProviderSelf object</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of TaxProviderSelf</returns>
        System.Threading.Tasks.Task<TaxProviderSelf> UpdateTaxProviderSelfAsync (TaxProviderSelf taxProviderSelf, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Update the Self tax provider
        /// </summary>
        /// <remarks>
        /// Update the Self tax provider. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taxProviderSelf">TaxProviderSelf object</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (TaxProviderSelf)</returns>
        System.Threading.Tasks.Task<ApiResponse<TaxProviderSelf>> UpdateTaxProviderSelfWithHttpInfoAsync (TaxProviderSelf taxProviderSelf, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Updates a Self tax provider city
        /// </summary>
        /// <remarks>
        /// Updates a Self tax provider city. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="city">The city being updated.</param>
        /// <param name="taxCity">tax city to be updated</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of TaxCity</returns>
        System.Threading.Tasks.Task<TaxCity> UpdateTaxProviderSelfCityAsync (string city, TaxCity taxCity, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Updates a Self tax provider city
        /// </summary>
        /// <remarks>
        /// Updates a Self tax provider city. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="city">The city being updated.</param>
        /// <param name="taxCity">tax city to be updated</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (TaxCity)</returns>
        System.Threading.Tasks.Task<ApiResponse<TaxCity>> UpdateTaxProviderSelfCityWithHttpInfoAsync (string city, TaxCity taxCity, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Updates a Self tax provider country
        /// </summary>
        /// <remarks>
        /// Updates a Self tax provider country. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="countryCode">The country code being updated.</param>
        /// <param name="taxCountry">tax country to be updated</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of TaxCountry</returns>
        System.Threading.Tasks.Task<TaxCountry> UpdateTaxProviderSelfCountryAsync (string countryCode, TaxCountry taxCountry, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Updates a Self tax provider country
        /// </summary>
        /// <remarks>
        /// Updates a Self tax provider country. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="countryCode">The country code being updated.</param>
        /// <param name="taxCountry">tax country to be updated</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (TaxCountry)</returns>
        System.Threading.Tasks.Task<ApiResponse<TaxCountry>> UpdateTaxProviderSelfCountryWithHttpInfoAsync (string countryCode, TaxCountry taxCountry, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Updates a Self tax provider county
        /// </summary>
        /// <remarks>
        /// Updates a Self tax provider county. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="county">The county being updated.</param>
        /// <param name="taxCounty">tax county to be updated</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of TaxCounty</returns>
        System.Threading.Tasks.Task<TaxCounty> UpdateTaxProviderSelfCountyAsync (string county, TaxCounty taxCounty, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Updates a Self tax provider county
        /// </summary>
        /// <remarks>
        /// Updates a Self tax provider county. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="county">The county being updated.</param>
        /// <param name="taxCounty">tax county to be updated</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (TaxCounty)</returns>
        System.Threading.Tasks.Task<ApiResponse<TaxCounty>> UpdateTaxProviderSelfCountyWithHttpInfoAsync (string county, TaxCounty taxCounty, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Updates a Self tax provider postalCode
        /// </summary>
        /// <remarks>
        /// Updates a Self tax provider postalCode. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postalCode">The postal code being updated.</param>
        /// <param name="taxPostalCode">tax postal code to be updated</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of TaxPostalCode</returns>
        System.Threading.Tasks.Task<TaxPostalCode> UpdateTaxProviderSelfPostalCodeAsync (string postalCode, TaxPostalCode taxPostalCode, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Updates a Self tax provider postalCode
        /// </summary>
        /// <remarks>
        /// Updates a Self tax provider postalCode. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postalCode">The postal code being updated.</param>
        /// <param name="taxPostalCode">tax postal code to be updated</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (TaxPostalCode)</returns>
        System.Threading.Tasks.Task<ApiResponse<TaxPostalCode>> UpdateTaxProviderSelfPostalCodeWithHttpInfoAsync (string postalCode, TaxPostalCode taxPostalCode, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Updates a Self tax provider state
        /// </summary>
        /// <remarks>
        /// Updates a Self tax provider state. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stateCode">The state code being updated.</param>
        /// <param name="taxState">tax state to be updated</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of TaxState</returns>
        System.Threading.Tasks.Task<TaxState> UpdateTaxProviderSelfStateAsync (string stateCode, TaxState taxState, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Updates a Self tax provider state
        /// </summary>
        /// <remarks>
        /// Updates a Self tax provider state. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stateCode">The state code being updated.</param>
        /// <param name="taxState">tax state to be updated</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (TaxState)</returns>
        System.Threading.Tasks.Task<ApiResponse<TaxState>> UpdateTaxProviderSelfStateWithHttpInfoAsync (string stateCode, TaxState taxState, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Update the Sovos tax provider
        /// </summary>
        /// <remarks>
        /// Update the Sovos tax provider. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taxProviderSovos">TaxProviderSovos object</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of TaxProviderSovos</returns>
        System.Threading.Tasks.Task<TaxProviderSovos> UpdateTaxProviderSovosAsync (TaxProviderSovos taxProviderSovos, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Update the Sovos tax provider
        /// </summary>
        /// <remarks>
        /// Update the Sovos tax provider. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taxProviderSovos">TaxProviderSovos object</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (TaxProviderSovos)</returns>
        System.Threading.Tasks.Task<ApiResponse<TaxProviderSovos>> UpdateTaxProviderSovosWithHttpInfoAsync (TaxProviderSovos taxProviderSovos, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Update the TaxJar tax provider
        /// </summary>
        /// <remarks>
        /// Update the TaxJar tax provider. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taxProviderTaxJar">TaxProviderTaxJar object</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of TaxProviderTaxJar</returns>
        System.Threading.Tasks.Task<TaxProviderTaxJar> UpdateTaxProviderTaxJarAsync (TaxProviderTaxJar taxProviderTaxJar, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Update the TaxJar tax provider
        /// </summary>
        /// <remarks>
        /// Update the TaxJar tax provider. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taxProviderTaxJar">TaxProviderTaxJar object</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (TaxProviderTaxJar)</returns>
        System.Threading.Tasks.Task<ApiResponse<TaxProviderTaxJar>> UpdateTaxProviderTaxJarWithHttpInfoAsync (TaxProviderTaxJar taxProviderTaxJar, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Update the UltraCart tax provider
        /// </summary>
        /// <remarks>
        /// Update the UltraCart tax provider. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taxProviderUltracart">TaxProviderUltraCart object</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of TaxProviderUltraCart</returns>
        System.Threading.Tasks.Task<TaxProviderUltraCart> UpdateTaxProviderUltraCartAsync (TaxProviderUltraCart taxProviderUltracart, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Update the UltraCart tax provider
        /// </summary>
        /// <remarks>
        /// Update the UltraCart tax provider. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taxProviderUltracart">TaxProviderUltraCart object</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (TaxProviderUltraCart)</returns>
        System.Threading.Tasks.Task<ApiResponse<TaxProviderUltraCart>> UpdateTaxProviderUltraCartWithHttpInfoAsync (TaxProviderUltraCart taxProviderUltracart, CancellationToken cancellationToken = default(CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class TaxApi : ITaxApi
    {
        private com.ultracart.admin.v2.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="TaxApi"/> class.
        /// </summary>
        /// <returns></returns>
        public TaxApi(String basePath, bool uselessVariable)
        {
            this.Configuration = new com.ultracart.admin.v2.Client.Configuration { BasePath = basePath };

            ExceptionFactory = com.ultracart.admin.v2.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TaxApi"/> class
        /// </summary>
        /// <returns></returns>
        public TaxApi()
        {
            this.Configuration = com.ultracart.admin.v2.Client.Configuration.Default;

            ExceptionFactory = com.ultracart.admin.v2.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TaxApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public TaxApi(com.ultracart.admin.v2.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = com.ultracart.admin.v2.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = com.ultracart.admin.v2.Client.Configuration.DefaultExceptionFactory;
        }


        /// <summary>
        /// Initializes a new instance of the <see cref="TaxApi"/> class
        /// using a simple key string and optional version, which you will
        /// almost always want to use the default
        /// </summary>
        /// <param name="SimpleKey">A simple key.  See https://ultracart.atlassian.net/wiki/spaces/ucdoc/pages/38688545/API+Simple+Key</param>
        /// <returns></returns>
        public TaxApi(string SimpleKey)
        {
            Configuration configuration = new Configuration();
            configuration.ApiKey.Add("x-ultracart-simple-key", SimpleKey);
            configuration.DefaultHeader.Add("X-UltraCart-Api-Version", "2017-03-01");
            this.Configuration = configuration;
            ExceptionFactory = com.ultracart.admin.v2.Client.Configuration.DefaultExceptionFactory;
        }


        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public com.ultracart.admin.v2.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public com.ultracart.admin.v2.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Deletes a Self tax provider city Deletes a Self tax provider city. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="city">The city being deleted.</param>
        /// <param name="taxCity">tax city to be deleted</param>
        /// <returns></returns>
        public void DeleteTaxProviderSelfCity (string city, TaxCity taxCity)
        {
             DeleteTaxProviderSelfCityWithHttpInfo(city, taxCity);
        }

        /// <summary>
        /// Deletes a Self tax provider city Deletes a Self tax provider city. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="city">The city being deleted.</param>
        /// <param name="taxCity">tax city to be deleted</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteTaxProviderSelfCityWithHttpInfo (string city, TaxCity taxCity)
        {
            // verify the required parameter 'city' is set
            if (city == null)
                throw new ApiException(400, "Missing required parameter 'city' when calling TaxApi->DeleteTaxProviderSelfCity");
            // verify the required parameter 'taxCity' is set
            if (taxCity == null)
                throw new ApiException(400, "Missing required parameter 'taxCity' when calling TaxApi->DeleteTaxProviderSelfCity");

            var localVarPath = "/tax/providers/self/city/{city}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (city != null) localVarPathParams.Add("city", this.Configuration.ApiClient.ParameterToString(city)); // path parameter
            if (taxCity != null && taxCity.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(taxCity); // http body (model) parameter
            }
            else
            {
                localVarPostBody = taxCity; // byte array
            }

            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteTaxProviderSelfCity", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Deletes a Self tax provider city Deletes a Self tax provider city. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="city">The city being deleted.</param>
        /// <param name="taxCity">tax city to be deleted</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteTaxProviderSelfCityAsync (string city, TaxCity taxCity, CancellationToken cancellationToken = default(CancellationToken))
        {
             await DeleteTaxProviderSelfCityWithHttpInfoAsync(city, taxCity, cancellationToken);

        }

        /// <summary>
        /// Deletes a Self tax provider city Deletes a Self tax provider city. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="city">The city being deleted.</param>
        /// <param name="taxCity">tax city to be deleted</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteTaxProviderSelfCityWithHttpInfoAsync (string city, TaxCity taxCity, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'city' is set
            if (city == null)
                throw new ApiException(400, "Missing required parameter 'city' when calling TaxApi->DeleteTaxProviderSelfCity");
            // verify the required parameter 'taxCity' is set
            if (taxCity == null)
                throw new ApiException(400, "Missing required parameter 'taxCity' when calling TaxApi->DeleteTaxProviderSelfCity");

            var localVarPath = "/tax/providers/self/city/{city}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (city != null) localVarPathParams.Add("city", this.Configuration.ApiClient.ParameterToString(city)); // path parameter
            if (taxCity != null && taxCity.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(taxCity); // http body (model) parameter
            }
            else
            {
                localVarPostBody = taxCity; // byte array
            }

            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteTaxProviderSelfCity", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Deletes a Self tax provider country Deletes a Self tax provider country. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="countryCode">The country code being deleted.</param>
        /// <param name="taxCountry">tax country to be deleted</param>
        /// <returns></returns>
        public void DeleteTaxProviderSelfCountry (string countryCode, TaxCountry taxCountry)
        {
             DeleteTaxProviderSelfCountryWithHttpInfo(countryCode, taxCountry);
        }

        /// <summary>
        /// Deletes a Self tax provider country Deletes a Self tax provider country. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="countryCode">The country code being deleted.</param>
        /// <param name="taxCountry">tax country to be deleted</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteTaxProviderSelfCountryWithHttpInfo (string countryCode, TaxCountry taxCountry)
        {
            // verify the required parameter 'countryCode' is set
            if (countryCode == null)
                throw new ApiException(400, "Missing required parameter 'countryCode' when calling TaxApi->DeleteTaxProviderSelfCountry");
            // verify the required parameter 'taxCountry' is set
            if (taxCountry == null)
                throw new ApiException(400, "Missing required parameter 'taxCountry' when calling TaxApi->DeleteTaxProviderSelfCountry");

            var localVarPath = "/tax/providers/self/country/{countryCode}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (countryCode != null) localVarPathParams.Add("countryCode", this.Configuration.ApiClient.ParameterToString(countryCode)); // path parameter
            if (taxCountry != null && taxCountry.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(taxCountry); // http body (model) parameter
            }
            else
            {
                localVarPostBody = taxCountry; // byte array
            }

            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteTaxProviderSelfCountry", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Deletes a Self tax provider country Deletes a Self tax provider country. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="countryCode">The country code being deleted.</param>
        /// <param name="taxCountry">tax country to be deleted</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteTaxProviderSelfCountryAsync (string countryCode, TaxCountry taxCountry, CancellationToken cancellationToken = default(CancellationToken))
        {
             await DeleteTaxProviderSelfCountryWithHttpInfoAsync(countryCode, taxCountry, cancellationToken);

        }

        /// <summary>
        /// Deletes a Self tax provider country Deletes a Self tax provider country. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="countryCode">The country code being deleted.</param>
        /// <param name="taxCountry">tax country to be deleted</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteTaxProviderSelfCountryWithHttpInfoAsync (string countryCode, TaxCountry taxCountry, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'countryCode' is set
            if (countryCode == null)
                throw new ApiException(400, "Missing required parameter 'countryCode' when calling TaxApi->DeleteTaxProviderSelfCountry");
            // verify the required parameter 'taxCountry' is set
            if (taxCountry == null)
                throw new ApiException(400, "Missing required parameter 'taxCountry' when calling TaxApi->DeleteTaxProviderSelfCountry");

            var localVarPath = "/tax/providers/self/country/{countryCode}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (countryCode != null) localVarPathParams.Add("countryCode", this.Configuration.ApiClient.ParameterToString(countryCode)); // path parameter
            if (taxCountry != null && taxCountry.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(taxCountry); // http body (model) parameter
            }
            else
            {
                localVarPostBody = taxCountry; // byte array
            }

            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteTaxProviderSelfCountry", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Deletes a Self tax provider county Deletes a Self tax provider county. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="county">The county being deleted.</param>
        /// <param name="taxCounty">tax county to be deleted</param>
        /// <returns></returns>
        public void DeleteTaxProviderSelfCounty (string county, TaxCounty taxCounty)
        {
             DeleteTaxProviderSelfCountyWithHttpInfo(county, taxCounty);
        }

        /// <summary>
        /// Deletes a Self tax provider county Deletes a Self tax provider county. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="county">The county being deleted.</param>
        /// <param name="taxCounty">tax county to be deleted</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteTaxProviderSelfCountyWithHttpInfo (string county, TaxCounty taxCounty)
        {
            // verify the required parameter 'county' is set
            if (county == null)
                throw new ApiException(400, "Missing required parameter 'county' when calling TaxApi->DeleteTaxProviderSelfCounty");
            // verify the required parameter 'taxCounty' is set
            if (taxCounty == null)
                throw new ApiException(400, "Missing required parameter 'taxCounty' when calling TaxApi->DeleteTaxProviderSelfCounty");

            var localVarPath = "/tax/providers/self/county/{county}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (county != null) localVarPathParams.Add("county", this.Configuration.ApiClient.ParameterToString(county)); // path parameter
            if (taxCounty != null && taxCounty.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(taxCounty); // http body (model) parameter
            }
            else
            {
                localVarPostBody = taxCounty; // byte array
            }

            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteTaxProviderSelfCounty", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Deletes a Self tax provider county Deletes a Self tax provider county. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="county">The county being deleted.</param>
        /// <param name="taxCounty">tax county to be deleted</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteTaxProviderSelfCountyAsync (string county, TaxCounty taxCounty, CancellationToken cancellationToken = default(CancellationToken))
        {
             await DeleteTaxProviderSelfCountyWithHttpInfoAsync(county, taxCounty, cancellationToken);

        }

        /// <summary>
        /// Deletes a Self tax provider county Deletes a Self tax provider county. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="county">The county being deleted.</param>
        /// <param name="taxCounty">tax county to be deleted</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteTaxProviderSelfCountyWithHttpInfoAsync (string county, TaxCounty taxCounty, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'county' is set
            if (county == null)
                throw new ApiException(400, "Missing required parameter 'county' when calling TaxApi->DeleteTaxProviderSelfCounty");
            // verify the required parameter 'taxCounty' is set
            if (taxCounty == null)
                throw new ApiException(400, "Missing required parameter 'taxCounty' when calling TaxApi->DeleteTaxProviderSelfCounty");

            var localVarPath = "/tax/providers/self/county/{county}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (county != null) localVarPathParams.Add("county", this.Configuration.ApiClient.ParameterToString(county)); // path parameter
            if (taxCounty != null && taxCounty.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(taxCounty); // http body (model) parameter
            }
            else
            {
                localVarPostBody = taxCounty; // byte array
            }

            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteTaxProviderSelfCounty", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Deletes a Self tax provider postalCode Deletes a Self tax provider postalCode. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postalCode">The postal code being deleted.</param>
        /// <param name="taxPostalCode">tax postal code to be deleted</param>
        /// <returns></returns>
        public void DeleteTaxProviderSelfPostalCode (string postalCode, TaxPostalCode taxPostalCode)
        {
             DeleteTaxProviderSelfPostalCodeWithHttpInfo(postalCode, taxPostalCode);
        }

        /// <summary>
        /// Deletes a Self tax provider postalCode Deletes a Self tax provider postalCode. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postalCode">The postal code being deleted.</param>
        /// <param name="taxPostalCode">tax postal code to be deleted</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteTaxProviderSelfPostalCodeWithHttpInfo (string postalCode, TaxPostalCode taxPostalCode)
        {
            // verify the required parameter 'postalCode' is set
            if (postalCode == null)
                throw new ApiException(400, "Missing required parameter 'postalCode' when calling TaxApi->DeleteTaxProviderSelfPostalCode");
            // verify the required parameter 'taxPostalCode' is set
            if (taxPostalCode == null)
                throw new ApiException(400, "Missing required parameter 'taxPostalCode' when calling TaxApi->DeleteTaxProviderSelfPostalCode");

            var localVarPath = "/tax/providers/self/postalCode/{postal_code}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (postalCode != null) localVarPathParams.Add("postal_code", this.Configuration.ApiClient.ParameterToString(postalCode)); // path parameter
            if (taxPostalCode != null && taxPostalCode.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(taxPostalCode); // http body (model) parameter
            }
            else
            {
                localVarPostBody = taxPostalCode; // byte array
            }

            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteTaxProviderSelfPostalCode", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Deletes a Self tax provider postalCode Deletes a Self tax provider postalCode. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postalCode">The postal code being deleted.</param>
        /// <param name="taxPostalCode">tax postal code to be deleted</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteTaxProviderSelfPostalCodeAsync (string postalCode, TaxPostalCode taxPostalCode, CancellationToken cancellationToken = default(CancellationToken))
        {
             await DeleteTaxProviderSelfPostalCodeWithHttpInfoAsync(postalCode, taxPostalCode, cancellationToken);

        }

        /// <summary>
        /// Deletes a Self tax provider postalCode Deletes a Self tax provider postalCode. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postalCode">The postal code being deleted.</param>
        /// <param name="taxPostalCode">tax postal code to be deleted</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteTaxProviderSelfPostalCodeWithHttpInfoAsync (string postalCode, TaxPostalCode taxPostalCode, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'postalCode' is set
            if (postalCode == null)
                throw new ApiException(400, "Missing required parameter 'postalCode' when calling TaxApi->DeleteTaxProviderSelfPostalCode");
            // verify the required parameter 'taxPostalCode' is set
            if (taxPostalCode == null)
                throw new ApiException(400, "Missing required parameter 'taxPostalCode' when calling TaxApi->DeleteTaxProviderSelfPostalCode");

            var localVarPath = "/tax/providers/self/postalCode/{postal_code}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (postalCode != null) localVarPathParams.Add("postal_code", this.Configuration.ApiClient.ParameterToString(postalCode)); // path parameter
            if (taxPostalCode != null && taxPostalCode.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(taxPostalCode); // http body (model) parameter
            }
            else
            {
                localVarPostBody = taxPostalCode; // byte array
            }

            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteTaxProviderSelfPostalCode", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Deletes a Self tax provider state Deletes a Self tax provider state. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stateCode">The state code being deleted.</param>
        /// <param name="taxState">tax state to be deleted</param>
        /// <returns></returns>
        public void DeleteTaxProviderSelfState (string stateCode, TaxState taxState)
        {
             DeleteTaxProviderSelfStateWithHttpInfo(stateCode, taxState);
        }

        /// <summary>
        /// Deletes a Self tax provider state Deletes a Self tax provider state. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stateCode">The state code being deleted.</param>
        /// <param name="taxState">tax state to be deleted</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteTaxProviderSelfStateWithHttpInfo (string stateCode, TaxState taxState)
        {
            // verify the required parameter 'stateCode' is set
            if (stateCode == null)
                throw new ApiException(400, "Missing required parameter 'stateCode' when calling TaxApi->DeleteTaxProviderSelfState");
            // verify the required parameter 'taxState' is set
            if (taxState == null)
                throw new ApiException(400, "Missing required parameter 'taxState' when calling TaxApi->DeleteTaxProviderSelfState");

            var localVarPath = "/tax/providers/self/state/{stateCode}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (stateCode != null) localVarPathParams.Add("stateCode", this.Configuration.ApiClient.ParameterToString(stateCode)); // path parameter
            if (taxState != null && taxState.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(taxState); // http body (model) parameter
            }
            else
            {
                localVarPostBody = taxState; // byte array
            }

            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteTaxProviderSelfState", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Deletes a Self tax provider state Deletes a Self tax provider state. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stateCode">The state code being deleted.</param>
        /// <param name="taxState">tax state to be deleted</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteTaxProviderSelfStateAsync (string stateCode, TaxState taxState, CancellationToken cancellationToken = default(CancellationToken))
        {
             await DeleteTaxProviderSelfStateWithHttpInfoAsync(stateCode, taxState, cancellationToken);

        }

        /// <summary>
        /// Deletes a Self tax provider state Deletes a Self tax provider state. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stateCode">The state code being deleted.</param>
        /// <param name="taxState">tax state to be deleted</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteTaxProviderSelfStateWithHttpInfoAsync (string stateCode, TaxState taxState, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'stateCode' is set
            if (stateCode == null)
                throw new ApiException(400, "Missing required parameter 'stateCode' when calling TaxApi->DeleteTaxProviderSelfState");
            // verify the required parameter 'taxState' is set
            if (taxState == null)
                throw new ApiException(400, "Missing required parameter 'taxState' when calling TaxApi->DeleteTaxProviderSelfState");

            var localVarPath = "/tax/providers/self/state/{stateCode}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (stateCode != null) localVarPathParams.Add("stateCode", this.Configuration.ApiClient.ParameterToString(stateCode)); // path parameter
            if (taxState != null && taxState.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(taxState); // http body (model) parameter
            }
            else
            {
                localVarPostBody = taxState; // byte array
            }

            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteTaxProviderSelfState", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Retrieve the Avalara tax provider Retrieves the Avalara tax provider. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>TaxProviderAvalara</returns>
        public TaxProviderAvalara GetTaxProviderAvalara ()
        {
             ApiResponse<TaxProviderAvalara> localVarResponse = GetTaxProviderAvalaraWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve the Avalara tax provider Retrieves the Avalara tax provider. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of TaxProviderAvalara</returns>
        public ApiResponse<TaxProviderAvalara> GetTaxProviderAvalaraWithHttpInfo ()
        {

            var localVarPath = "/tax/providers/avalara";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTaxProviderAvalara", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TaxProviderAvalara>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (TaxProviderAvalara) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TaxProviderAvalara)));
        }

        /// <summary>
        /// Retrieve the Avalara tax provider Retrieves the Avalara tax provider. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of TaxProviderAvalara</returns>
        public async System.Threading.Tasks.Task<TaxProviderAvalara> GetTaxProviderAvalaraAsync (CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<TaxProviderAvalara> localVarResponse = await GetTaxProviderAvalaraWithHttpInfoAsync(cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieve the Avalara tax provider Retrieves the Avalara tax provider. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (TaxProviderAvalara)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TaxProviderAvalara>> GetTaxProviderAvalaraWithHttpInfoAsync (CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/tax/providers/avalara";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTaxProviderAvalara", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TaxProviderAvalara>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (TaxProviderAvalara) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TaxProviderAvalara)));
        }

        /// <summary>
        /// Returns Avalara Tax companies configured by the merchant Returns Avalara Tax companies configured by the merchant 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taxProviderAvalara">TaxProviderAvalara object</param>
        /// <returns>TaxProviderAvalaraCompaniesResult</returns>
        public TaxProviderAvalaraCompaniesResult GetTaxProviderAvalaraCompanies (TaxProviderAvalara taxProviderAvalara)
        {
             ApiResponse<TaxProviderAvalaraCompaniesResult> localVarResponse = GetTaxProviderAvalaraCompaniesWithHttpInfo(taxProviderAvalara);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Returns Avalara Tax companies configured by the merchant Returns Avalara Tax companies configured by the merchant 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taxProviderAvalara">TaxProviderAvalara object</param>
        /// <returns>ApiResponse of TaxProviderAvalaraCompaniesResult</returns>
        public ApiResponse<TaxProviderAvalaraCompaniesResult> GetTaxProviderAvalaraCompaniesWithHttpInfo (TaxProviderAvalara taxProviderAvalara)
        {
            // verify the required parameter 'taxProviderAvalara' is set
            if (taxProviderAvalara == null)
                throw new ApiException(400, "Missing required parameter 'taxProviderAvalara' when calling TaxApi->GetTaxProviderAvalaraCompanies");

            var localVarPath = "/tax/providers/avalara/companies";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (taxProviderAvalara != null && taxProviderAvalara.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(taxProviderAvalara); // http body (model) parameter
            }
            else
            {
                localVarPostBody = taxProviderAvalara; // byte array
            }

            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTaxProviderAvalaraCompanies", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TaxProviderAvalaraCompaniesResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (TaxProviderAvalaraCompaniesResult) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TaxProviderAvalaraCompaniesResult)));
        }

        /// <summary>
        /// Returns Avalara Tax companies configured by the merchant Returns Avalara Tax companies configured by the merchant 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taxProviderAvalara">TaxProviderAvalara object</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of TaxProviderAvalaraCompaniesResult</returns>
        public async System.Threading.Tasks.Task<TaxProviderAvalaraCompaniesResult> GetTaxProviderAvalaraCompaniesAsync (TaxProviderAvalara taxProviderAvalara, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<TaxProviderAvalaraCompaniesResult> localVarResponse = await GetTaxProviderAvalaraCompaniesWithHttpInfoAsync(taxProviderAvalara, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Returns Avalara Tax companies configured by the merchant Returns Avalara Tax companies configured by the merchant 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taxProviderAvalara">TaxProviderAvalara object</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (TaxProviderAvalaraCompaniesResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TaxProviderAvalaraCompaniesResult>> GetTaxProviderAvalaraCompaniesWithHttpInfoAsync (TaxProviderAvalara taxProviderAvalara, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'taxProviderAvalara' is set
            if (taxProviderAvalara == null)
                throw new ApiException(400, "Missing required parameter 'taxProviderAvalara' when calling TaxApi->GetTaxProviderAvalaraCompanies");

            var localVarPath = "/tax/providers/avalara/companies";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (taxProviderAvalara != null && taxProviderAvalara.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(taxProviderAvalara); // http body (model) parameter
            }
            else
            {
                localVarPostBody = taxProviderAvalara; // byte array
            }

            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTaxProviderAvalaraCompanies", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TaxProviderAvalaraCompaniesResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (TaxProviderAvalaraCompaniesResult) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TaxProviderAvalaraCompaniesResult)));
        }

        /// <summary>
        /// Attempts to connect to Avalara and returns back the response Attempts to connect to Avalara and returns back the response. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>TaxProviderTestResult</returns>
        public TaxProviderTestResult GetTaxProviderAvalaraTest ()
        {
             ApiResponse<TaxProviderTestResult> localVarResponse = GetTaxProviderAvalaraTestWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Attempts to connect to Avalara and returns back the response Attempts to connect to Avalara and returns back the response. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of TaxProviderTestResult</returns>
        public ApiResponse<TaxProviderTestResult> GetTaxProviderAvalaraTestWithHttpInfo ()
        {

            var localVarPath = "/tax/providers/avalara/test";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTaxProviderAvalaraTest", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TaxProviderTestResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (TaxProviderTestResult) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TaxProviderTestResult)));
        }

        /// <summary>
        /// Attempts to connect to Avalara and returns back the response Attempts to connect to Avalara and returns back the response. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of TaxProviderTestResult</returns>
        public async System.Threading.Tasks.Task<TaxProviderTestResult> GetTaxProviderAvalaraTestAsync (CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<TaxProviderTestResult> localVarResponse = await GetTaxProviderAvalaraTestWithHttpInfoAsync(cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Attempts to connect to Avalara and returns back the response Attempts to connect to Avalara and returns back the response. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (TaxProviderTestResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TaxProviderTestResult>> GetTaxProviderAvalaraTestWithHttpInfoAsync (CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/tax/providers/avalara/test";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTaxProviderAvalaraTest", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TaxProviderTestResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (TaxProviderTestResult) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TaxProviderTestResult)));
        }

        /// <summary>
        /// Retrieve the Self tax provider Retrieves the Self tax provider. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>TaxProviderSelf</returns>
        public TaxProviderSelf GetTaxProviderSelf ()
        {
             ApiResponse<TaxProviderSelf> localVarResponse = GetTaxProviderSelfWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve the Self tax provider Retrieves the Self tax provider. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of TaxProviderSelf</returns>
        public ApiResponse<TaxProviderSelf> GetTaxProviderSelfWithHttpInfo ()
        {

            var localVarPath = "/tax/providers/self";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTaxProviderSelf", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TaxProviderSelf>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (TaxProviderSelf) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TaxProviderSelf)));
        }

        /// <summary>
        /// Retrieve the Self tax provider Retrieves the Self tax provider. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of TaxProviderSelf</returns>
        public async System.Threading.Tasks.Task<TaxProviderSelf> GetTaxProviderSelfAsync (CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<TaxProviderSelf> localVarResponse = await GetTaxProviderSelfWithHttpInfoAsync(cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieve the Self tax provider Retrieves the Self tax provider. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (TaxProviderSelf)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TaxProviderSelf>> GetTaxProviderSelfWithHttpInfoAsync (CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/tax/providers/self";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTaxProviderSelf", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TaxProviderSelf>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (TaxProviderSelf) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TaxProviderSelf)));
        }

        /// <summary>
        /// Retrieve the Self tax provider countries Retrieves the Self tax provider countries. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>TaxProviderSelfCountriesResponse</returns>
        public TaxProviderSelfCountriesResponse GetTaxProviderSelfCountries ()
        {
             ApiResponse<TaxProviderSelfCountriesResponse> localVarResponse = GetTaxProviderSelfCountriesWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve the Self tax provider countries Retrieves the Self tax provider countries. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of TaxProviderSelfCountriesResponse</returns>
        public ApiResponse<TaxProviderSelfCountriesResponse> GetTaxProviderSelfCountriesWithHttpInfo ()
        {

            var localVarPath = "/tax/providers/self/countries";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTaxProviderSelfCountries", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TaxProviderSelfCountriesResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (TaxProviderSelfCountriesResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TaxProviderSelfCountriesResponse)));
        }

        /// <summary>
        /// Retrieve the Self tax provider countries Retrieves the Self tax provider countries. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of TaxProviderSelfCountriesResponse</returns>
        public async System.Threading.Tasks.Task<TaxProviderSelfCountriesResponse> GetTaxProviderSelfCountriesAsync (CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<TaxProviderSelfCountriesResponse> localVarResponse = await GetTaxProviderSelfCountriesWithHttpInfoAsync(cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieve the Self tax provider countries Retrieves the Self tax provider countries. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (TaxProviderSelfCountriesResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TaxProviderSelfCountriesResponse>> GetTaxProviderSelfCountriesWithHttpInfoAsync (CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/tax/providers/self/countries";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTaxProviderSelfCountries", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TaxProviderSelfCountriesResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (TaxProviderSelfCountriesResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TaxProviderSelfCountriesResponse)));
        }

        /// <summary>
        /// Retrieve the Self tax provider regions for a given country code Retrieves the Self tax provider regions for a given country code. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="countryCode">The country code regions desired.</param>
        /// <returns>TaxProviderSelfRegionsResponse</returns>
        public TaxProviderSelfRegionsResponse GetTaxProviderSelfRegionsByCountryCode (string countryCode)
        {
             ApiResponse<TaxProviderSelfRegionsResponse> localVarResponse = GetTaxProviderSelfRegionsByCountryCodeWithHttpInfo(countryCode);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve the Self tax provider regions for a given country code Retrieves the Self tax provider regions for a given country code. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="countryCode">The country code regions desired.</param>
        /// <returns>ApiResponse of TaxProviderSelfRegionsResponse</returns>
        public ApiResponse<TaxProviderSelfRegionsResponse> GetTaxProviderSelfRegionsByCountryCodeWithHttpInfo (string countryCode)
        {
            // verify the required parameter 'countryCode' is set
            if (countryCode == null)
                throw new ApiException(400, "Missing required parameter 'countryCode' when calling TaxApi->GetTaxProviderSelfRegionsByCountryCode");

            var localVarPath = "/tax/providers/self/regions/{countryCode}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (countryCode != null) localVarPathParams.Add("countryCode", this.Configuration.ApiClient.ParameterToString(countryCode)); // path parameter

            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTaxProviderSelfRegionsByCountryCode", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TaxProviderSelfRegionsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (TaxProviderSelfRegionsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TaxProviderSelfRegionsResponse)));
        }

        /// <summary>
        /// Retrieve the Self tax provider regions for a given country code Retrieves the Self tax provider regions for a given country code. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="countryCode">The country code regions desired.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of TaxProviderSelfRegionsResponse</returns>
        public async System.Threading.Tasks.Task<TaxProviderSelfRegionsResponse> GetTaxProviderSelfRegionsByCountryCodeAsync (string countryCode, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<TaxProviderSelfRegionsResponse> localVarResponse = await GetTaxProviderSelfRegionsByCountryCodeWithHttpInfoAsync(countryCode, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieve the Self tax provider regions for a given country code Retrieves the Self tax provider regions for a given country code. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="countryCode">The country code regions desired.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (TaxProviderSelfRegionsResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TaxProviderSelfRegionsResponse>> GetTaxProviderSelfRegionsByCountryCodeWithHttpInfoAsync (string countryCode, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'countryCode' is set
            if (countryCode == null)
                throw new ApiException(400, "Missing required parameter 'countryCode' when calling TaxApi->GetTaxProviderSelfRegionsByCountryCode");

            var localVarPath = "/tax/providers/self/regions/{countryCode}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (countryCode != null) localVarPathParams.Add("countryCode", this.Configuration.ApiClient.ParameterToString(countryCode)); // path parameter

            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTaxProviderSelfRegionsByCountryCode", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TaxProviderSelfRegionsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (TaxProviderSelfRegionsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TaxProviderSelfRegionsResponse)));
        }

        /// <summary>
        /// Retrieve the Sovos tax provider Retrieves the Sovos tax provider. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>TaxProviderSovos</returns>
        public TaxProviderSovos GetTaxProviderSovos ()
        {
             ApiResponse<TaxProviderSovos> localVarResponse = GetTaxProviderSovosWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve the Sovos tax provider Retrieves the Sovos tax provider. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of TaxProviderSovos</returns>
        public ApiResponse<TaxProviderSovos> GetTaxProviderSovosWithHttpInfo ()
        {

            var localVarPath = "/tax/providers/sovos";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTaxProviderSovos", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TaxProviderSovos>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (TaxProviderSovos) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TaxProviderSovos)));
        }

        /// <summary>
        /// Retrieve the Sovos tax provider Retrieves the Sovos tax provider. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of TaxProviderSovos</returns>
        public async System.Threading.Tasks.Task<TaxProviderSovos> GetTaxProviderSovosAsync (CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<TaxProviderSovos> localVarResponse = await GetTaxProviderSovosWithHttpInfoAsync(cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieve the Sovos tax provider Retrieves the Sovos tax provider. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (TaxProviderSovos)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TaxProviderSovos>> GetTaxProviderSovosWithHttpInfoAsync (CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/tax/providers/sovos";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTaxProviderSovos", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TaxProviderSovos>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (TaxProviderSovos) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TaxProviderSovos)));
        }

        /// <summary>
        /// Attempts to connect to Sovos and returns back the response Attempts to connect to Sovos and returns back the response. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>TaxProviderTestResult</returns>
        public TaxProviderTestResult GetTaxProviderSovosTest ()
        {
             ApiResponse<TaxProviderTestResult> localVarResponse = GetTaxProviderSovosTestWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Attempts to connect to Sovos and returns back the response Attempts to connect to Sovos and returns back the response. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of TaxProviderTestResult</returns>
        public ApiResponse<TaxProviderTestResult> GetTaxProviderSovosTestWithHttpInfo ()
        {

            var localVarPath = "/tax/providers/sovos/test";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTaxProviderSovosTest", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TaxProviderTestResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (TaxProviderTestResult) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TaxProviderTestResult)));
        }

        /// <summary>
        /// Attempts to connect to Sovos and returns back the response Attempts to connect to Sovos and returns back the response. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of TaxProviderTestResult</returns>
        public async System.Threading.Tasks.Task<TaxProviderTestResult> GetTaxProviderSovosTestAsync (CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<TaxProviderTestResult> localVarResponse = await GetTaxProviderSovosTestWithHttpInfoAsync(cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Attempts to connect to Sovos and returns back the response Attempts to connect to Sovos and returns back the response. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (TaxProviderTestResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TaxProviderTestResult>> GetTaxProviderSovosTestWithHttpInfoAsync (CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/tax/providers/sovos/test";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTaxProviderSovosTest", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TaxProviderTestResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (TaxProviderTestResult) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TaxProviderTestResult)));
        }

        /// <summary>
        /// Retrieve the TaxJar tax provider Retrieves the TaxJar tax provider. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>TaxProviderTaxJar</returns>
        public TaxProviderTaxJar GetTaxProviderTaxJar ()
        {
             ApiResponse<TaxProviderTaxJar> localVarResponse = GetTaxProviderTaxJarWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve the TaxJar tax provider Retrieves the TaxJar tax provider. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of TaxProviderTaxJar</returns>
        public ApiResponse<TaxProviderTaxJar> GetTaxProviderTaxJarWithHttpInfo ()
        {

            var localVarPath = "/tax/providers/taxjar";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTaxProviderTaxJar", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TaxProviderTaxJar>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (TaxProviderTaxJar) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TaxProviderTaxJar)));
        }

        /// <summary>
        /// Retrieve the TaxJar tax provider Retrieves the TaxJar tax provider. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of TaxProviderTaxJar</returns>
        public async System.Threading.Tasks.Task<TaxProviderTaxJar> GetTaxProviderTaxJarAsync (CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<TaxProviderTaxJar> localVarResponse = await GetTaxProviderTaxJarWithHttpInfoAsync(cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieve the TaxJar tax provider Retrieves the TaxJar tax provider. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (TaxProviderTaxJar)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TaxProviderTaxJar>> GetTaxProviderTaxJarWithHttpInfoAsync (CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/tax/providers/taxjar";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTaxProviderTaxJar", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TaxProviderTaxJar>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (TaxProviderTaxJar) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TaxProviderTaxJar)));
        }

        /// <summary>
        /// Attempts to connect to TaxJar and returns back the response Attempts to connect to TaxJar and returns back the response. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>TaxProviderTestResult</returns>
        public TaxProviderTestResult GetTaxProviderTaxJarTest ()
        {
             ApiResponse<TaxProviderTestResult> localVarResponse = GetTaxProviderTaxJarTestWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Attempts to connect to TaxJar and returns back the response Attempts to connect to TaxJar and returns back the response. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of TaxProviderTestResult</returns>
        public ApiResponse<TaxProviderTestResult> GetTaxProviderTaxJarTestWithHttpInfo ()
        {

            var localVarPath = "/tax/providers/taxjar/test";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTaxProviderTaxJarTest", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TaxProviderTestResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (TaxProviderTestResult) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TaxProviderTestResult)));
        }

        /// <summary>
        /// Attempts to connect to TaxJar and returns back the response Attempts to connect to TaxJar and returns back the response. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of TaxProviderTestResult</returns>
        public async System.Threading.Tasks.Task<TaxProviderTestResult> GetTaxProviderTaxJarTestAsync (CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<TaxProviderTestResult> localVarResponse = await GetTaxProviderTaxJarTestWithHttpInfoAsync(cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Attempts to connect to TaxJar and returns back the response Attempts to connect to TaxJar and returns back the response. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (TaxProviderTestResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TaxProviderTestResult>> GetTaxProviderTaxJarTestWithHttpInfoAsync (CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/tax/providers/taxjar/test";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTaxProviderTaxJarTest", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TaxProviderTestResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (TaxProviderTestResult) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TaxProviderTestResult)));
        }

        /// <summary>
        /// Retrieve the UltraCart tax provider Retrieves the UltraCart tax provider. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>TaxProviderUltraCart</returns>
        public TaxProviderUltraCart GetTaxProviderUltraCart ()
        {
             ApiResponse<TaxProviderUltraCart> localVarResponse = GetTaxProviderUltraCartWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve the UltraCart tax provider Retrieves the UltraCart tax provider. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of TaxProviderUltraCart</returns>
        public ApiResponse<TaxProviderUltraCart> GetTaxProviderUltraCartWithHttpInfo ()
        {

            var localVarPath = "/tax/providers/ultracart";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTaxProviderUltraCart", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TaxProviderUltraCart>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (TaxProviderUltraCart) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TaxProviderUltraCart)));
        }

        /// <summary>
        /// Retrieve the UltraCart tax provider Retrieves the UltraCart tax provider. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of TaxProviderUltraCart</returns>
        public async System.Threading.Tasks.Task<TaxProviderUltraCart> GetTaxProviderUltraCartAsync (CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<TaxProviderUltraCart> localVarResponse = await GetTaxProviderUltraCartWithHttpInfoAsync(cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieve the UltraCart tax provider Retrieves the UltraCart tax provider. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (TaxProviderUltraCart)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TaxProviderUltraCart>> GetTaxProviderUltraCartWithHttpInfoAsync (CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/tax/providers/ultracart";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTaxProviderUltraCart", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TaxProviderUltraCart>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (TaxProviderUltraCart) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TaxProviderUltraCart)));
        }

        /// <summary>
        /// Retrieve tax methods Retrieves tax methods for this account. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">The maximum number of records to return on this one API call. (Max 200) (optional, default to 100)</param>
        /// <param name="offset">Pagination of the record set.  Offset is a zero based index. (optional, default to 0)</param>
        /// <param name="expand">The object expansion to perform on the result.  See documentation for examples (optional)</param>
        /// <returns>TaxProvidersResponse</returns>
        public TaxProvidersResponse GetTaxProviders (int? limit = default(int?), int? offset = default(int?), string expand = default(string))
        {
             ApiResponse<TaxProvidersResponse> localVarResponse = GetTaxProvidersWithHttpInfo(limit, offset, expand);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve tax methods Retrieves tax methods for this account. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">The maximum number of records to return on this one API call. (Max 200) (optional, default to 100)</param>
        /// <param name="offset">Pagination of the record set.  Offset is a zero based index. (optional, default to 0)</param>
        /// <param name="expand">The object expansion to perform on the result.  See documentation for examples (optional)</param>
        /// <returns>ApiResponse of TaxProvidersResponse</returns>
        public ApiResponse<TaxProvidersResponse> GetTaxProvidersWithHttpInfo (int? limit = default(int?), int? offset = default(int?), string expand = default(string))
        {

            var localVarPath = "/tax/providers";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "_limit", limit)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "_offset", offset)); // query parameter
            if (expand != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "_expand", expand)); // query parameter

            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTaxProviders", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TaxProvidersResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (TaxProvidersResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TaxProvidersResponse)));
        }

        /// <summary>
        /// Retrieve tax methods Retrieves tax methods for this account. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">The maximum number of records to return on this one API call. (Max 200) (optional, default to 100)</param>
        /// <param name="offset">Pagination of the record set.  Offset is a zero based index. (optional, default to 0)</param>
        /// <param name="expand">The object expansion to perform on the result.  See documentation for examples (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of TaxProvidersResponse</returns>
        public async System.Threading.Tasks.Task<TaxProvidersResponse> GetTaxProvidersAsync (int? limit = default(int?), int? offset = default(int?), string expand = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<TaxProvidersResponse> localVarResponse = await GetTaxProvidersWithHttpInfoAsync(limit, offset, expand, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieve tax methods Retrieves tax methods for this account. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">The maximum number of records to return on this one API call. (Max 200) (optional, default to 100)</param>
        /// <param name="offset">Pagination of the record set.  Offset is a zero based index. (optional, default to 0)</param>
        /// <param name="expand">The object expansion to perform on the result.  See documentation for examples (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (TaxProvidersResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TaxProvidersResponse>> GetTaxProvidersWithHttpInfoAsync (int? limit = default(int?), int? offset = default(int?), string expand = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/tax/providers";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "_limit", limit)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "_offset", offset)); // query parameter
            if (expand != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "_expand", expand)); // query parameter

            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTaxProviders", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TaxProvidersResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (TaxProvidersResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TaxProvidersResponse)));
        }

        /// <summary>
        /// Toggle a tax provider to active Toggle a tax provider to active. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="providerName">The tax provider to set active.</param>
        /// <returns>TaxProviderActivateResult</returns>
        public TaxProviderActivateResult SetActiveTaxProvider (string providerName)
        {
             ApiResponse<TaxProviderActivateResult> localVarResponse = SetActiveTaxProviderWithHttpInfo(providerName);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Toggle a tax provider to active Toggle a tax provider to active. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="providerName">The tax provider to set active.</param>
        /// <returns>ApiResponse of TaxProviderActivateResult</returns>
        public ApiResponse<TaxProviderActivateResult> SetActiveTaxProviderWithHttpInfo (string providerName)
        {
            // verify the required parameter 'providerName' is set
            if (providerName == null)
                throw new ApiException(400, "Missing required parameter 'providerName' when calling TaxApi->SetActiveTaxProvider");

            var localVarPath = "/tax/providers/setActive/{providerName}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (providerName != null) localVarPathParams.Add("providerName", this.Configuration.ApiClient.ParameterToString(providerName)); // path parameter

            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SetActiveTaxProvider", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TaxProviderActivateResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (TaxProviderActivateResult) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TaxProviderActivateResult)));
        }

        /// <summary>
        /// Toggle a tax provider to active Toggle a tax provider to active. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="providerName">The tax provider to set active.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of TaxProviderActivateResult</returns>
        public async System.Threading.Tasks.Task<TaxProviderActivateResult> SetActiveTaxProviderAsync (string providerName, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<TaxProviderActivateResult> localVarResponse = await SetActiveTaxProviderWithHttpInfoAsync(providerName, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Toggle a tax provider to active Toggle a tax provider to active. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="providerName">The tax provider to set active.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (TaxProviderActivateResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TaxProviderActivateResult>> SetActiveTaxProviderWithHttpInfoAsync (string providerName, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'providerName' is set
            if (providerName == null)
                throw new ApiException(400, "Missing required parameter 'providerName' when calling TaxApi->SetActiveTaxProvider");

            var localVarPath = "/tax/providers/setActive/{providerName}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (providerName != null) localVarPathParams.Add("providerName", this.Configuration.ApiClient.ParameterToString(providerName)); // path parameter

            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SetActiveTaxProvider", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TaxProviderActivateResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (TaxProviderActivateResult) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TaxProviderActivateResult)));
        }

        /// <summary>
        /// Update the Avalara tax provider Update the Avalara tax provider. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taxProviderAvalara">TaxProviderAvalara object</param>
        /// <returns>TaxProviderAvalara</returns>
        public TaxProviderAvalara UpdateTaxProviderAvalara (TaxProviderAvalara taxProviderAvalara)
        {
             ApiResponse<TaxProviderAvalara> localVarResponse = UpdateTaxProviderAvalaraWithHttpInfo(taxProviderAvalara);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update the Avalara tax provider Update the Avalara tax provider. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taxProviderAvalara">TaxProviderAvalara object</param>
        /// <returns>ApiResponse of TaxProviderAvalara</returns>
        public ApiResponse<TaxProviderAvalara> UpdateTaxProviderAvalaraWithHttpInfo (TaxProviderAvalara taxProviderAvalara)
        {
            // verify the required parameter 'taxProviderAvalara' is set
            if (taxProviderAvalara == null)
                throw new ApiException(400, "Missing required parameter 'taxProviderAvalara' when calling TaxApi->UpdateTaxProviderAvalara");

            var localVarPath = "/tax/providers/avalara";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (taxProviderAvalara != null && taxProviderAvalara.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(taxProviderAvalara); // http body (model) parameter
            }
            else
            {
                localVarPostBody = taxProviderAvalara; // byte array
            }

            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateTaxProviderAvalara", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TaxProviderAvalara>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (TaxProviderAvalara) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TaxProviderAvalara)));
        }

        /// <summary>
        /// Update the Avalara tax provider Update the Avalara tax provider. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taxProviderAvalara">TaxProviderAvalara object</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of TaxProviderAvalara</returns>
        public async System.Threading.Tasks.Task<TaxProviderAvalara> UpdateTaxProviderAvalaraAsync (TaxProviderAvalara taxProviderAvalara, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<TaxProviderAvalara> localVarResponse = await UpdateTaxProviderAvalaraWithHttpInfoAsync(taxProviderAvalara, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update the Avalara tax provider Update the Avalara tax provider. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taxProviderAvalara">TaxProviderAvalara object</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (TaxProviderAvalara)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TaxProviderAvalara>> UpdateTaxProviderAvalaraWithHttpInfoAsync (TaxProviderAvalara taxProviderAvalara, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'taxProviderAvalara' is set
            if (taxProviderAvalara == null)
                throw new ApiException(400, "Missing required parameter 'taxProviderAvalara' when calling TaxApi->UpdateTaxProviderAvalara");

            var localVarPath = "/tax/providers/avalara";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (taxProviderAvalara != null && taxProviderAvalara.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(taxProviderAvalara); // http body (model) parameter
            }
            else
            {
                localVarPostBody = taxProviderAvalara; // byte array
            }

            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateTaxProviderAvalara", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TaxProviderAvalara>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (TaxProviderAvalara) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TaxProviderAvalara)));
        }

        /// <summary>
        /// Update the Self tax provider Update the Self tax provider. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taxProviderSelf">TaxProviderSelf object</param>
        /// <returns>TaxProviderSelf</returns>
        public TaxProviderSelf UpdateTaxProviderSelf (TaxProviderSelf taxProviderSelf)
        {
             ApiResponse<TaxProviderSelf> localVarResponse = UpdateTaxProviderSelfWithHttpInfo(taxProviderSelf);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update the Self tax provider Update the Self tax provider. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taxProviderSelf">TaxProviderSelf object</param>
        /// <returns>ApiResponse of TaxProviderSelf</returns>
        public ApiResponse<TaxProviderSelf> UpdateTaxProviderSelfWithHttpInfo (TaxProviderSelf taxProviderSelf)
        {
            // verify the required parameter 'taxProviderSelf' is set
            if (taxProviderSelf == null)
                throw new ApiException(400, "Missing required parameter 'taxProviderSelf' when calling TaxApi->UpdateTaxProviderSelf");

            var localVarPath = "/tax/providers/self";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (taxProviderSelf != null && taxProviderSelf.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(taxProviderSelf); // http body (model) parameter
            }
            else
            {
                localVarPostBody = taxProviderSelf; // byte array
            }

            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateTaxProviderSelf", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TaxProviderSelf>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (TaxProviderSelf) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TaxProviderSelf)));
        }

        /// <summary>
        /// Update the Self tax provider Update the Self tax provider. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taxProviderSelf">TaxProviderSelf object</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of TaxProviderSelf</returns>
        public async System.Threading.Tasks.Task<TaxProviderSelf> UpdateTaxProviderSelfAsync (TaxProviderSelf taxProviderSelf, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<TaxProviderSelf> localVarResponse = await UpdateTaxProviderSelfWithHttpInfoAsync(taxProviderSelf, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update the Self tax provider Update the Self tax provider. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taxProviderSelf">TaxProviderSelf object</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (TaxProviderSelf)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TaxProviderSelf>> UpdateTaxProviderSelfWithHttpInfoAsync (TaxProviderSelf taxProviderSelf, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'taxProviderSelf' is set
            if (taxProviderSelf == null)
                throw new ApiException(400, "Missing required parameter 'taxProviderSelf' when calling TaxApi->UpdateTaxProviderSelf");

            var localVarPath = "/tax/providers/self";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (taxProviderSelf != null && taxProviderSelf.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(taxProviderSelf); // http body (model) parameter
            }
            else
            {
                localVarPostBody = taxProviderSelf; // byte array
            }

            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateTaxProviderSelf", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TaxProviderSelf>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (TaxProviderSelf) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TaxProviderSelf)));
        }

        /// <summary>
        /// Updates a Self tax provider city Updates a Self tax provider city. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="city">The city being updated.</param>
        /// <param name="taxCity">tax city to be updated</param>
        /// <returns>TaxCity</returns>
        public TaxCity UpdateTaxProviderSelfCity (string city, TaxCity taxCity)
        {
             ApiResponse<TaxCity> localVarResponse = UpdateTaxProviderSelfCityWithHttpInfo(city, taxCity);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Updates a Self tax provider city Updates a Self tax provider city. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="city">The city being updated.</param>
        /// <param name="taxCity">tax city to be updated</param>
        /// <returns>ApiResponse of TaxCity</returns>
        public ApiResponse<TaxCity> UpdateTaxProviderSelfCityWithHttpInfo (string city, TaxCity taxCity)
        {
            // verify the required parameter 'city' is set
            if (city == null)
                throw new ApiException(400, "Missing required parameter 'city' when calling TaxApi->UpdateTaxProviderSelfCity");
            // verify the required parameter 'taxCity' is set
            if (taxCity == null)
                throw new ApiException(400, "Missing required parameter 'taxCity' when calling TaxApi->UpdateTaxProviderSelfCity");

            var localVarPath = "/tax/providers/self/city/{city}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (city != null) localVarPathParams.Add("city", this.Configuration.ApiClient.ParameterToString(city)); // path parameter
            if (taxCity != null && taxCity.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(taxCity); // http body (model) parameter
            }
            else
            {
                localVarPostBody = taxCity; // byte array
            }

            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateTaxProviderSelfCity", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TaxCity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (TaxCity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TaxCity)));
        }

        /// <summary>
        /// Updates a Self tax provider city Updates a Self tax provider city. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="city">The city being updated.</param>
        /// <param name="taxCity">tax city to be updated</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of TaxCity</returns>
        public async System.Threading.Tasks.Task<TaxCity> UpdateTaxProviderSelfCityAsync (string city, TaxCity taxCity, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<TaxCity> localVarResponse = await UpdateTaxProviderSelfCityWithHttpInfoAsync(city, taxCity, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Updates a Self tax provider city Updates a Self tax provider city. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="city">The city being updated.</param>
        /// <param name="taxCity">tax city to be updated</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (TaxCity)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TaxCity>> UpdateTaxProviderSelfCityWithHttpInfoAsync (string city, TaxCity taxCity, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'city' is set
            if (city == null)
                throw new ApiException(400, "Missing required parameter 'city' when calling TaxApi->UpdateTaxProviderSelfCity");
            // verify the required parameter 'taxCity' is set
            if (taxCity == null)
                throw new ApiException(400, "Missing required parameter 'taxCity' when calling TaxApi->UpdateTaxProviderSelfCity");

            var localVarPath = "/tax/providers/self/city/{city}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (city != null) localVarPathParams.Add("city", this.Configuration.ApiClient.ParameterToString(city)); // path parameter
            if (taxCity != null && taxCity.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(taxCity); // http body (model) parameter
            }
            else
            {
                localVarPostBody = taxCity; // byte array
            }

            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateTaxProviderSelfCity", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TaxCity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (TaxCity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TaxCity)));
        }

        /// <summary>
        /// Updates a Self tax provider country Updates a Self tax provider country. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="countryCode">The country code being updated.</param>
        /// <param name="taxCountry">tax country to be updated</param>
        /// <returns>TaxCountry</returns>
        public TaxCountry UpdateTaxProviderSelfCountry (string countryCode, TaxCountry taxCountry)
        {
             ApiResponse<TaxCountry> localVarResponse = UpdateTaxProviderSelfCountryWithHttpInfo(countryCode, taxCountry);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Updates a Self tax provider country Updates a Self tax provider country. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="countryCode">The country code being updated.</param>
        /// <param name="taxCountry">tax country to be updated</param>
        /// <returns>ApiResponse of TaxCountry</returns>
        public ApiResponse<TaxCountry> UpdateTaxProviderSelfCountryWithHttpInfo (string countryCode, TaxCountry taxCountry)
        {
            // verify the required parameter 'countryCode' is set
            if (countryCode == null)
                throw new ApiException(400, "Missing required parameter 'countryCode' when calling TaxApi->UpdateTaxProviderSelfCountry");
            // verify the required parameter 'taxCountry' is set
            if (taxCountry == null)
                throw new ApiException(400, "Missing required parameter 'taxCountry' when calling TaxApi->UpdateTaxProviderSelfCountry");

            var localVarPath = "/tax/providers/self/country/{countryCode}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (countryCode != null) localVarPathParams.Add("countryCode", this.Configuration.ApiClient.ParameterToString(countryCode)); // path parameter
            if (taxCountry != null && taxCountry.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(taxCountry); // http body (model) parameter
            }
            else
            {
                localVarPostBody = taxCountry; // byte array
            }

            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateTaxProviderSelfCountry", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TaxCountry>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (TaxCountry) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TaxCountry)));
        }

        /// <summary>
        /// Updates a Self tax provider country Updates a Self tax provider country. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="countryCode">The country code being updated.</param>
        /// <param name="taxCountry">tax country to be updated</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of TaxCountry</returns>
        public async System.Threading.Tasks.Task<TaxCountry> UpdateTaxProviderSelfCountryAsync (string countryCode, TaxCountry taxCountry, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<TaxCountry> localVarResponse = await UpdateTaxProviderSelfCountryWithHttpInfoAsync(countryCode, taxCountry, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Updates a Self tax provider country Updates a Self tax provider country. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="countryCode">The country code being updated.</param>
        /// <param name="taxCountry">tax country to be updated</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (TaxCountry)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TaxCountry>> UpdateTaxProviderSelfCountryWithHttpInfoAsync (string countryCode, TaxCountry taxCountry, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'countryCode' is set
            if (countryCode == null)
                throw new ApiException(400, "Missing required parameter 'countryCode' when calling TaxApi->UpdateTaxProviderSelfCountry");
            // verify the required parameter 'taxCountry' is set
            if (taxCountry == null)
                throw new ApiException(400, "Missing required parameter 'taxCountry' when calling TaxApi->UpdateTaxProviderSelfCountry");

            var localVarPath = "/tax/providers/self/country/{countryCode}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (countryCode != null) localVarPathParams.Add("countryCode", this.Configuration.ApiClient.ParameterToString(countryCode)); // path parameter
            if (taxCountry != null && taxCountry.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(taxCountry); // http body (model) parameter
            }
            else
            {
                localVarPostBody = taxCountry; // byte array
            }

            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateTaxProviderSelfCountry", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TaxCountry>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (TaxCountry) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TaxCountry)));
        }

        /// <summary>
        /// Updates a Self tax provider county Updates a Self tax provider county. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="county">The county being updated.</param>
        /// <param name="taxCounty">tax county to be updated</param>
        /// <returns>TaxCounty</returns>
        public TaxCounty UpdateTaxProviderSelfCounty (string county, TaxCounty taxCounty)
        {
             ApiResponse<TaxCounty> localVarResponse = UpdateTaxProviderSelfCountyWithHttpInfo(county, taxCounty);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Updates a Self tax provider county Updates a Self tax provider county. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="county">The county being updated.</param>
        /// <param name="taxCounty">tax county to be updated</param>
        /// <returns>ApiResponse of TaxCounty</returns>
        public ApiResponse<TaxCounty> UpdateTaxProviderSelfCountyWithHttpInfo (string county, TaxCounty taxCounty)
        {
            // verify the required parameter 'county' is set
            if (county == null)
                throw new ApiException(400, "Missing required parameter 'county' when calling TaxApi->UpdateTaxProviderSelfCounty");
            // verify the required parameter 'taxCounty' is set
            if (taxCounty == null)
                throw new ApiException(400, "Missing required parameter 'taxCounty' when calling TaxApi->UpdateTaxProviderSelfCounty");

            var localVarPath = "/tax/providers/self/county/{county}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (county != null) localVarPathParams.Add("county", this.Configuration.ApiClient.ParameterToString(county)); // path parameter
            if (taxCounty != null && taxCounty.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(taxCounty); // http body (model) parameter
            }
            else
            {
                localVarPostBody = taxCounty; // byte array
            }

            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateTaxProviderSelfCounty", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TaxCounty>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (TaxCounty) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TaxCounty)));
        }

        /// <summary>
        /// Updates a Self tax provider county Updates a Self tax provider county. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="county">The county being updated.</param>
        /// <param name="taxCounty">tax county to be updated</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of TaxCounty</returns>
        public async System.Threading.Tasks.Task<TaxCounty> UpdateTaxProviderSelfCountyAsync (string county, TaxCounty taxCounty, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<TaxCounty> localVarResponse = await UpdateTaxProviderSelfCountyWithHttpInfoAsync(county, taxCounty, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Updates a Self tax provider county Updates a Self tax provider county. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="county">The county being updated.</param>
        /// <param name="taxCounty">tax county to be updated</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (TaxCounty)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TaxCounty>> UpdateTaxProviderSelfCountyWithHttpInfoAsync (string county, TaxCounty taxCounty, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'county' is set
            if (county == null)
                throw new ApiException(400, "Missing required parameter 'county' when calling TaxApi->UpdateTaxProviderSelfCounty");
            // verify the required parameter 'taxCounty' is set
            if (taxCounty == null)
                throw new ApiException(400, "Missing required parameter 'taxCounty' when calling TaxApi->UpdateTaxProviderSelfCounty");

            var localVarPath = "/tax/providers/self/county/{county}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (county != null) localVarPathParams.Add("county", this.Configuration.ApiClient.ParameterToString(county)); // path parameter
            if (taxCounty != null && taxCounty.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(taxCounty); // http body (model) parameter
            }
            else
            {
                localVarPostBody = taxCounty; // byte array
            }

            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateTaxProviderSelfCounty", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TaxCounty>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (TaxCounty) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TaxCounty)));
        }

        /// <summary>
        /// Updates a Self tax provider postalCode Updates a Self tax provider postalCode. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postalCode">The postal code being updated.</param>
        /// <param name="taxPostalCode">tax postal code to be updated</param>
        /// <returns>TaxPostalCode</returns>
        public TaxPostalCode UpdateTaxProviderSelfPostalCode (string postalCode, TaxPostalCode taxPostalCode)
        {
             ApiResponse<TaxPostalCode> localVarResponse = UpdateTaxProviderSelfPostalCodeWithHttpInfo(postalCode, taxPostalCode);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Updates a Self tax provider postalCode Updates a Self tax provider postalCode. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postalCode">The postal code being updated.</param>
        /// <param name="taxPostalCode">tax postal code to be updated</param>
        /// <returns>ApiResponse of TaxPostalCode</returns>
        public ApiResponse<TaxPostalCode> UpdateTaxProviderSelfPostalCodeWithHttpInfo (string postalCode, TaxPostalCode taxPostalCode)
        {
            // verify the required parameter 'postalCode' is set
            if (postalCode == null)
                throw new ApiException(400, "Missing required parameter 'postalCode' when calling TaxApi->UpdateTaxProviderSelfPostalCode");
            // verify the required parameter 'taxPostalCode' is set
            if (taxPostalCode == null)
                throw new ApiException(400, "Missing required parameter 'taxPostalCode' when calling TaxApi->UpdateTaxProviderSelfPostalCode");

            var localVarPath = "/tax/providers/self/postalCode/{postal_code}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (postalCode != null) localVarPathParams.Add("postal_code", this.Configuration.ApiClient.ParameterToString(postalCode)); // path parameter
            if (taxPostalCode != null && taxPostalCode.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(taxPostalCode); // http body (model) parameter
            }
            else
            {
                localVarPostBody = taxPostalCode; // byte array
            }

            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateTaxProviderSelfPostalCode", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TaxPostalCode>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (TaxPostalCode) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TaxPostalCode)));
        }

        /// <summary>
        /// Updates a Self tax provider postalCode Updates a Self tax provider postalCode. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postalCode">The postal code being updated.</param>
        /// <param name="taxPostalCode">tax postal code to be updated</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of TaxPostalCode</returns>
        public async System.Threading.Tasks.Task<TaxPostalCode> UpdateTaxProviderSelfPostalCodeAsync (string postalCode, TaxPostalCode taxPostalCode, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<TaxPostalCode> localVarResponse = await UpdateTaxProviderSelfPostalCodeWithHttpInfoAsync(postalCode, taxPostalCode, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Updates a Self tax provider postalCode Updates a Self tax provider postalCode. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postalCode">The postal code being updated.</param>
        /// <param name="taxPostalCode">tax postal code to be updated</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (TaxPostalCode)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TaxPostalCode>> UpdateTaxProviderSelfPostalCodeWithHttpInfoAsync (string postalCode, TaxPostalCode taxPostalCode, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'postalCode' is set
            if (postalCode == null)
                throw new ApiException(400, "Missing required parameter 'postalCode' when calling TaxApi->UpdateTaxProviderSelfPostalCode");
            // verify the required parameter 'taxPostalCode' is set
            if (taxPostalCode == null)
                throw new ApiException(400, "Missing required parameter 'taxPostalCode' when calling TaxApi->UpdateTaxProviderSelfPostalCode");

            var localVarPath = "/tax/providers/self/postalCode/{postal_code}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (postalCode != null) localVarPathParams.Add("postal_code", this.Configuration.ApiClient.ParameterToString(postalCode)); // path parameter
            if (taxPostalCode != null && taxPostalCode.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(taxPostalCode); // http body (model) parameter
            }
            else
            {
                localVarPostBody = taxPostalCode; // byte array
            }

            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateTaxProviderSelfPostalCode", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TaxPostalCode>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (TaxPostalCode) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TaxPostalCode)));
        }

        /// <summary>
        /// Updates a Self tax provider state Updates a Self tax provider state. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stateCode">The state code being updated.</param>
        /// <param name="taxState">tax state to be updated</param>
        /// <returns>TaxState</returns>
        public TaxState UpdateTaxProviderSelfState (string stateCode, TaxState taxState)
        {
             ApiResponse<TaxState> localVarResponse = UpdateTaxProviderSelfStateWithHttpInfo(stateCode, taxState);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Updates a Self tax provider state Updates a Self tax provider state. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stateCode">The state code being updated.</param>
        /// <param name="taxState">tax state to be updated</param>
        /// <returns>ApiResponse of TaxState</returns>
        public ApiResponse<TaxState> UpdateTaxProviderSelfStateWithHttpInfo (string stateCode, TaxState taxState)
        {
            // verify the required parameter 'stateCode' is set
            if (stateCode == null)
                throw new ApiException(400, "Missing required parameter 'stateCode' when calling TaxApi->UpdateTaxProviderSelfState");
            // verify the required parameter 'taxState' is set
            if (taxState == null)
                throw new ApiException(400, "Missing required parameter 'taxState' when calling TaxApi->UpdateTaxProviderSelfState");

            var localVarPath = "/tax/providers/self/state/{stateCode}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (stateCode != null) localVarPathParams.Add("stateCode", this.Configuration.ApiClient.ParameterToString(stateCode)); // path parameter
            if (taxState != null && taxState.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(taxState); // http body (model) parameter
            }
            else
            {
                localVarPostBody = taxState; // byte array
            }

            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateTaxProviderSelfState", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TaxState>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (TaxState) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TaxState)));
        }

        /// <summary>
        /// Updates a Self tax provider state Updates a Self tax provider state. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stateCode">The state code being updated.</param>
        /// <param name="taxState">tax state to be updated</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of TaxState</returns>
        public async System.Threading.Tasks.Task<TaxState> UpdateTaxProviderSelfStateAsync (string stateCode, TaxState taxState, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<TaxState> localVarResponse = await UpdateTaxProviderSelfStateWithHttpInfoAsync(stateCode, taxState, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Updates a Self tax provider state Updates a Self tax provider state. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stateCode">The state code being updated.</param>
        /// <param name="taxState">tax state to be updated</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (TaxState)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TaxState>> UpdateTaxProviderSelfStateWithHttpInfoAsync (string stateCode, TaxState taxState, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'stateCode' is set
            if (stateCode == null)
                throw new ApiException(400, "Missing required parameter 'stateCode' when calling TaxApi->UpdateTaxProviderSelfState");
            // verify the required parameter 'taxState' is set
            if (taxState == null)
                throw new ApiException(400, "Missing required parameter 'taxState' when calling TaxApi->UpdateTaxProviderSelfState");

            var localVarPath = "/tax/providers/self/state/{stateCode}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (stateCode != null) localVarPathParams.Add("stateCode", this.Configuration.ApiClient.ParameterToString(stateCode)); // path parameter
            if (taxState != null && taxState.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(taxState); // http body (model) parameter
            }
            else
            {
                localVarPostBody = taxState; // byte array
            }

            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateTaxProviderSelfState", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TaxState>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (TaxState) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TaxState)));
        }

        /// <summary>
        /// Update the Sovos tax provider Update the Sovos tax provider. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taxProviderSovos">TaxProviderSovos object</param>
        /// <returns>TaxProviderSovos</returns>
        public TaxProviderSovos UpdateTaxProviderSovos (TaxProviderSovos taxProviderSovos)
        {
             ApiResponse<TaxProviderSovos> localVarResponse = UpdateTaxProviderSovosWithHttpInfo(taxProviderSovos);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update the Sovos tax provider Update the Sovos tax provider. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taxProviderSovos">TaxProviderSovos object</param>
        /// <returns>ApiResponse of TaxProviderSovos</returns>
        public ApiResponse<TaxProviderSovos> UpdateTaxProviderSovosWithHttpInfo (TaxProviderSovos taxProviderSovos)
        {
            // verify the required parameter 'taxProviderSovos' is set
            if (taxProviderSovos == null)
                throw new ApiException(400, "Missing required parameter 'taxProviderSovos' when calling TaxApi->UpdateTaxProviderSovos");

            var localVarPath = "/tax/providers/sovos";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (taxProviderSovos != null && taxProviderSovos.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(taxProviderSovos); // http body (model) parameter
            }
            else
            {
                localVarPostBody = taxProviderSovos; // byte array
            }

            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateTaxProviderSovos", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TaxProviderSovos>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (TaxProviderSovos) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TaxProviderSovos)));
        }

        /// <summary>
        /// Update the Sovos tax provider Update the Sovos tax provider. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taxProviderSovos">TaxProviderSovos object</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of TaxProviderSovos</returns>
        public async System.Threading.Tasks.Task<TaxProviderSovos> UpdateTaxProviderSovosAsync (TaxProviderSovos taxProviderSovos, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<TaxProviderSovos> localVarResponse = await UpdateTaxProviderSovosWithHttpInfoAsync(taxProviderSovos, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update the Sovos tax provider Update the Sovos tax provider. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taxProviderSovos">TaxProviderSovos object</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (TaxProviderSovos)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TaxProviderSovos>> UpdateTaxProviderSovosWithHttpInfoAsync (TaxProviderSovos taxProviderSovos, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'taxProviderSovos' is set
            if (taxProviderSovos == null)
                throw new ApiException(400, "Missing required parameter 'taxProviderSovos' when calling TaxApi->UpdateTaxProviderSovos");

            var localVarPath = "/tax/providers/sovos";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (taxProviderSovos != null && taxProviderSovos.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(taxProviderSovos); // http body (model) parameter
            }
            else
            {
                localVarPostBody = taxProviderSovos; // byte array
            }

            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateTaxProviderSovos", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TaxProviderSovos>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (TaxProviderSovos) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TaxProviderSovos)));
        }

        /// <summary>
        /// Update the TaxJar tax provider Update the TaxJar tax provider. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taxProviderTaxJar">TaxProviderTaxJar object</param>
        /// <returns>TaxProviderTaxJar</returns>
        public TaxProviderTaxJar UpdateTaxProviderTaxJar (TaxProviderTaxJar taxProviderTaxJar)
        {
             ApiResponse<TaxProviderTaxJar> localVarResponse = UpdateTaxProviderTaxJarWithHttpInfo(taxProviderTaxJar);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update the TaxJar tax provider Update the TaxJar tax provider. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taxProviderTaxJar">TaxProviderTaxJar object</param>
        /// <returns>ApiResponse of TaxProviderTaxJar</returns>
        public ApiResponse<TaxProviderTaxJar> UpdateTaxProviderTaxJarWithHttpInfo (TaxProviderTaxJar taxProviderTaxJar)
        {
            // verify the required parameter 'taxProviderTaxJar' is set
            if (taxProviderTaxJar == null)
                throw new ApiException(400, "Missing required parameter 'taxProviderTaxJar' when calling TaxApi->UpdateTaxProviderTaxJar");

            var localVarPath = "/tax/providers/taxjar";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (taxProviderTaxJar != null && taxProviderTaxJar.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(taxProviderTaxJar); // http body (model) parameter
            }
            else
            {
                localVarPostBody = taxProviderTaxJar; // byte array
            }

            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateTaxProviderTaxJar", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TaxProviderTaxJar>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (TaxProviderTaxJar) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TaxProviderTaxJar)));
        }

        /// <summary>
        /// Update the TaxJar tax provider Update the TaxJar tax provider. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taxProviderTaxJar">TaxProviderTaxJar object</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of TaxProviderTaxJar</returns>
        public async System.Threading.Tasks.Task<TaxProviderTaxJar> UpdateTaxProviderTaxJarAsync (TaxProviderTaxJar taxProviderTaxJar, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<TaxProviderTaxJar> localVarResponse = await UpdateTaxProviderTaxJarWithHttpInfoAsync(taxProviderTaxJar, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update the TaxJar tax provider Update the TaxJar tax provider. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taxProviderTaxJar">TaxProviderTaxJar object</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (TaxProviderTaxJar)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TaxProviderTaxJar>> UpdateTaxProviderTaxJarWithHttpInfoAsync (TaxProviderTaxJar taxProviderTaxJar, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'taxProviderTaxJar' is set
            if (taxProviderTaxJar == null)
                throw new ApiException(400, "Missing required parameter 'taxProviderTaxJar' when calling TaxApi->UpdateTaxProviderTaxJar");

            var localVarPath = "/tax/providers/taxjar";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (taxProviderTaxJar != null && taxProviderTaxJar.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(taxProviderTaxJar); // http body (model) parameter
            }
            else
            {
                localVarPostBody = taxProviderTaxJar; // byte array
            }

            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateTaxProviderTaxJar", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TaxProviderTaxJar>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (TaxProviderTaxJar) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TaxProviderTaxJar)));
        }

        /// <summary>
        /// Update the UltraCart tax provider Update the UltraCart tax provider. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taxProviderUltracart">TaxProviderUltraCart object</param>
        /// <returns>TaxProviderUltraCart</returns>
        public TaxProviderUltraCart UpdateTaxProviderUltraCart (TaxProviderUltraCart taxProviderUltracart)
        {
             ApiResponse<TaxProviderUltraCart> localVarResponse = UpdateTaxProviderUltraCartWithHttpInfo(taxProviderUltracart);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update the UltraCart tax provider Update the UltraCart tax provider. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taxProviderUltracart">TaxProviderUltraCart object</param>
        /// <returns>ApiResponse of TaxProviderUltraCart</returns>
        public ApiResponse<TaxProviderUltraCart> UpdateTaxProviderUltraCartWithHttpInfo (TaxProviderUltraCart taxProviderUltracart)
        {
            // verify the required parameter 'taxProviderUltracart' is set
            if (taxProviderUltracart == null)
                throw new ApiException(400, "Missing required parameter 'taxProviderUltracart' when calling TaxApi->UpdateTaxProviderUltraCart");

            var localVarPath = "/tax/providers/ultracart";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (taxProviderUltracart != null && taxProviderUltracart.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(taxProviderUltracart); // http body (model) parameter
            }
            else
            {
                localVarPostBody = taxProviderUltracart; // byte array
            }

            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateTaxProviderUltraCart", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TaxProviderUltraCart>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (TaxProviderUltraCart) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TaxProviderUltraCart)));
        }

        /// <summary>
        /// Update the UltraCart tax provider Update the UltraCart tax provider. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taxProviderUltracart">TaxProviderUltraCart object</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of TaxProviderUltraCart</returns>
        public async System.Threading.Tasks.Task<TaxProviderUltraCart> UpdateTaxProviderUltraCartAsync (TaxProviderUltraCart taxProviderUltracart, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<TaxProviderUltraCart> localVarResponse = await UpdateTaxProviderUltraCartWithHttpInfoAsync(taxProviderUltracart, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update the UltraCart tax provider Update the UltraCart tax provider. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taxProviderUltracart">TaxProviderUltraCart object</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (TaxProviderUltraCart)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TaxProviderUltraCart>> UpdateTaxProviderUltraCartWithHttpInfoAsync (TaxProviderUltraCart taxProviderUltracart, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'taxProviderUltracart' is set
            if (taxProviderUltracart == null)
                throw new ApiException(400, "Missing required parameter 'taxProviderUltracart' when calling TaxApi->UpdateTaxProviderUltraCart");

            var localVarPath = "/tax/providers/ultracart";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (taxProviderUltracart != null && taxProviderUltracart.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(taxProviderUltracart); // http body (model) parameter
            }
            else
            {
                localVarPostBody = taxProviderUltracart; // byte array
            }

            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateTaxProviderUltraCart", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TaxProviderUltraCart>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (TaxProviderUltraCart) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TaxProviderUltraCart)));
        }

    }
}
