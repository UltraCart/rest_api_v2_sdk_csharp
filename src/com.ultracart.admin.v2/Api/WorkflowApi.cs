/*
 * UltraCart Rest API V2
 *
 * UltraCart REST API Version 2
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@ultracart.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Threading;
using RestSharp;
using com.ultracart.admin.v2.Client;
using com.ultracart.admin.v2.Model;

namespace com.ultracart.admin.v2.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IWorkflowApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Retrieve a list of groups that workflow tasks can be assigned to
        /// </summary>
        /// <remarks>
        /// Retrieve a list of groups that workflow tasks can be assigned to 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">The maximum number of records to return on this one API call. (Max 200) (optional, default to 100)</param>
        /// <param name="offset">Pagination of the record set.  Offset is a zero based index. (optional, default to 0)</param>
        /// <returns>WorkflowGroupsResponse</returns>
        WorkflowGroupsResponse GetWorkflowAssignmentGroups (int? limit = default(int?), int? offset = default(int?));

        /// <summary>
        /// Retrieve a list of groups that workflow tasks can be assigned to
        /// </summary>
        /// <remarks>
        /// Retrieve a list of groups that workflow tasks can be assigned to 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">The maximum number of records to return on this one API call. (Max 200) (optional, default to 100)</param>
        /// <param name="offset">Pagination of the record set.  Offset is a zero based index. (optional, default to 0)</param>
        /// <returns>ApiResponse of WorkflowGroupsResponse</returns>
        ApiResponse<WorkflowGroupsResponse> GetWorkflowAssignmentGroupsWithHttpInfo (int? limit = default(int?), int? offset = default(int?));
        /// <summary>
        /// Retrieve a list of users that workflow tasks can be assigned to
        /// </summary>
        /// <remarks>
        /// Retrieve a list of users that workflow tasks can be assigned to 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">The maximum number of records to return on this one API call. (Max 200) (optional, default to 100)</param>
        /// <param name="offset">Pagination of the record set.  Offset is a zero based index. (optional, default to 0)</param>
        /// <returns>WorkflowUsersResponse</returns>
        WorkflowUsersResponse GetWorkflowAssignmentUsers (int? limit = default(int?), int? offset = default(int?));

        /// <summary>
        /// Retrieve a list of users that workflow tasks can be assigned to
        /// </summary>
        /// <remarks>
        /// Retrieve a list of users that workflow tasks can be assigned to 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">The maximum number of records to return on this one API call. (Max 200) (optional, default to 100)</param>
        /// <param name="offset">Pagination of the record set.  Offset is a zero based index. (optional, default to 0)</param>
        /// <returns>ApiResponse of WorkflowUsersResponse</returns>
        ApiResponse<WorkflowUsersResponse> GetWorkflowAssignmentUsersWithHttpInfo (int? limit = default(int?), int? offset = default(int?));
        /// <summary>
        /// Retrieve a user object for myself
        /// </summary>
        /// <remarks>
        /// Retrieve a user object for myself 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>WorkflowUserResponse</returns>
        WorkflowUserResponse GetWorkflowMe ();

        /// <summary>
        /// Retrieve a user object for myself
        /// </summary>
        /// <remarks>
        /// Retrieve a user object for myself 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of WorkflowUserResponse</returns>
        ApiResponse<WorkflowUserResponse> GetWorkflowMeWithHttpInfo ();
        /// <summary>
        /// Retrieve a workflow task
        /// </summary>
        /// <remarks>
        /// Retrieve a workflow task 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskUuid"></param>
        /// <returns>WorkflowTaskResponse</returns>
        WorkflowTaskResponse GetWorkflowTask (string taskUuid);

        /// <summary>
        /// Retrieve a workflow task
        /// </summary>
        /// <remarks>
        /// Retrieve a workflow task 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskUuid"></param>
        /// <returns>ApiResponse of WorkflowTaskResponse</returns>
        ApiResponse<WorkflowTaskResponse> GetWorkflowTaskWithHttpInfo (string taskUuid);
        /// <summary>
        /// Get a presigned workflow task attachment upload URL
        /// </summary>
        /// <remarks>
        /// Get a presigned workflow task attachment upload URL 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="extension"></param>
        /// <returns>WorkflowAttachmentUploadUrlResponse</returns>
        WorkflowAttachmentUploadUrlResponse GetWorkflowTaskAttachmentUploadUrl (string extension);

        /// <summary>
        /// Get a presigned workflow task attachment upload URL
        /// </summary>
        /// <remarks>
        /// Get a presigned workflow task attachment upload URL 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="extension"></param>
        /// <returns>ApiResponse of WorkflowAttachmentUploadUrlResponse</returns>
        ApiResponse<WorkflowAttachmentUploadUrlResponse> GetWorkflowTaskAttachmentUploadUrlWithHttpInfo (string extension);
        /// <summary>
        /// Retrieve a workflow task by object type and id
        /// </summary>
        /// <remarks>
        /// Retrieve a workflow task by object type and id 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectType"></param>
        /// <param name="objectId"></param>
        /// <returns>WorkflowTasksResponse</returns>
        WorkflowTasksResponse GetWorkflowTaskByObjectType (string objectType, string objectId);

        /// <summary>
        /// Retrieve a workflow task by object type and id
        /// </summary>
        /// <remarks>
        /// Retrieve a workflow task by object type and id 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectType"></param>
        /// <param name="objectId"></param>
        /// <returns>ApiResponse of WorkflowTasksResponse</returns>
        ApiResponse<WorkflowTasksResponse> GetWorkflowTaskByObjectTypeWithHttpInfo (string objectType, string objectId);
        /// <summary>
        /// Get a list of existing workflow task tags
        /// </summary>
        /// <remarks>
        /// Retrieves a unique list of all the existing workflow task tags. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>WorkflowTaskTagsResponse</returns>
        WorkflowTaskTagsResponse GetWorkflowTaskTags ();

        /// <summary>
        /// Get a list of existing workflow task tags
        /// </summary>
        /// <remarks>
        /// Retrieves a unique list of all the existing workflow task tags. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of WorkflowTaskTagsResponse</returns>
        ApiResponse<WorkflowTaskTagsResponse> GetWorkflowTaskTagsWithHttpInfo ();
        /// <summary>
        /// Search workflow tasks
        /// </summary>
        /// <remarks>
        /// Retrieves a set of workflow tasks from the account based on a query object. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workflowTasksQuery">Workflow tasks query</param>
        /// <param name="limit">The maximum number of records to return on this one API call. (Default 100, Max 500) (optional, default to 100)</param>
        /// <param name="offset">Pagination of the record set.  Offset is a zero based index. (optional, default to 0)</param>
        /// <param name="sort">The sort order of the items.  See Sorting documentation for examples of using multiple values and sorting by ascending and descending. (optional)</param>
        /// <returns>WorkflowTasksResponse</returns>
        WorkflowTasksResponse GetWorkflowTasks (WorkflowTasksRequest workflowTasksQuery, int? limit = default(int?), int? offset = default(int?), string sort = default(string));

        /// <summary>
        /// Search workflow tasks
        /// </summary>
        /// <remarks>
        /// Retrieves a set of workflow tasks from the account based on a query object. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workflowTasksQuery">Workflow tasks query</param>
        /// <param name="limit">The maximum number of records to return on this one API call. (Default 100, Max 500) (optional, default to 100)</param>
        /// <param name="offset">Pagination of the record set.  Offset is a zero based index. (optional, default to 0)</param>
        /// <param name="sort">The sort order of the items.  See Sorting documentation for examples of using multiple values and sorting by ascending and descending. (optional)</param>
        /// <returns>ApiResponse of WorkflowTasksResponse</returns>
        ApiResponse<WorkflowTasksResponse> GetWorkflowTasksWithHttpInfo (WorkflowTasksRequest workflowTasksQuery, int? limit = default(int?), int? offset = default(int?), string sort = default(string));
        /// <summary>
        /// Insert a workflow task
        /// </summary>
        /// <remarks>
        /// Insert a workflow task 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workflowTask">workflow task</param>
        /// <returns>WorkflowTaskResponse</returns>
        WorkflowTaskResponse InsertWorkflowTask (WorkflowTask workflowTask);

        /// <summary>
        /// Insert a workflow task
        /// </summary>
        /// <remarks>
        /// Insert a workflow task 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workflowTask">workflow task</param>
        /// <returns>ApiResponse of WorkflowTaskResponse</returns>
        ApiResponse<WorkflowTaskResponse> InsertWorkflowTaskWithHttpInfo (WorkflowTask workflowTask);
        /// <summary>
        /// Update a workflow task
        /// </summary>
        /// <remarks>
        /// Update a workflow task 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskUuid"></param>
        /// <param name="workflowTask">Workflow task</param>
        /// <returns>WorkflowTaskResponse</returns>
        WorkflowTaskResponse UpdateWorkflowTask (string taskUuid, WorkflowTask workflowTask);

        /// <summary>
        /// Update a workflow task
        /// </summary>
        /// <remarks>
        /// Update a workflow task 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskUuid"></param>
        /// <param name="workflowTask">Workflow task</param>
        /// <returns>ApiResponse of WorkflowTaskResponse</returns>
        ApiResponse<WorkflowTaskResponse> UpdateWorkflowTaskWithHttpInfo (string taskUuid, WorkflowTask workflowTask);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Retrieve a list of groups that workflow tasks can be assigned to
        /// </summary>
        /// <remarks>
        /// Retrieve a list of groups that workflow tasks can be assigned to 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">The maximum number of records to return on this one API call. (Max 200) (optional, default to 100)</param>
        /// <param name="offset">Pagination of the record set.  Offset is a zero based index. (optional, default to 0)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of WorkflowGroupsResponse</returns>
        System.Threading.Tasks.Task<WorkflowGroupsResponse> GetWorkflowAssignmentGroupsAsync (int? limit = default(int?), int? offset = default(int?), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Retrieve a list of groups that workflow tasks can be assigned to
        /// </summary>
        /// <remarks>
        /// Retrieve a list of groups that workflow tasks can be assigned to 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">The maximum number of records to return on this one API call. (Max 200) (optional, default to 100)</param>
        /// <param name="offset">Pagination of the record set.  Offset is a zero based index. (optional, default to 0)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (WorkflowGroupsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<WorkflowGroupsResponse>> GetWorkflowAssignmentGroupsWithHttpInfoAsync (int? limit = default(int?), int? offset = default(int?), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Retrieve a list of users that workflow tasks can be assigned to
        /// </summary>
        /// <remarks>
        /// Retrieve a list of users that workflow tasks can be assigned to 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">The maximum number of records to return on this one API call. (Max 200) (optional, default to 100)</param>
        /// <param name="offset">Pagination of the record set.  Offset is a zero based index. (optional, default to 0)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of WorkflowUsersResponse</returns>
        System.Threading.Tasks.Task<WorkflowUsersResponse> GetWorkflowAssignmentUsersAsync (int? limit = default(int?), int? offset = default(int?), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Retrieve a list of users that workflow tasks can be assigned to
        /// </summary>
        /// <remarks>
        /// Retrieve a list of users that workflow tasks can be assigned to 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">The maximum number of records to return on this one API call. (Max 200) (optional, default to 100)</param>
        /// <param name="offset">Pagination of the record set.  Offset is a zero based index. (optional, default to 0)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (WorkflowUsersResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<WorkflowUsersResponse>> GetWorkflowAssignmentUsersWithHttpInfoAsync (int? limit = default(int?), int? offset = default(int?), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Retrieve a user object for myself
        /// </summary>
        /// <remarks>
        /// Retrieve a user object for myself 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of WorkflowUserResponse</returns>
        System.Threading.Tasks.Task<WorkflowUserResponse> GetWorkflowMeAsync (CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Retrieve a user object for myself
        /// </summary>
        /// <remarks>
        /// Retrieve a user object for myself 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (WorkflowUserResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<WorkflowUserResponse>> GetWorkflowMeWithHttpInfoAsync (CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Retrieve a workflow task
        /// </summary>
        /// <remarks>
        /// Retrieve a workflow task 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskUuid"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of WorkflowTaskResponse</returns>
        System.Threading.Tasks.Task<WorkflowTaskResponse> GetWorkflowTaskAsync (string taskUuid, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Retrieve a workflow task
        /// </summary>
        /// <remarks>
        /// Retrieve a workflow task 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskUuid"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (WorkflowTaskResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<WorkflowTaskResponse>> GetWorkflowTaskWithHttpInfoAsync (string taskUuid, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get a presigned workflow task attachment upload URL
        /// </summary>
        /// <remarks>
        /// Get a presigned workflow task attachment upload URL 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="extension"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of WorkflowAttachmentUploadUrlResponse</returns>
        System.Threading.Tasks.Task<WorkflowAttachmentUploadUrlResponse> GetWorkflowTaskAttachmentUploadUrlAsync (string extension, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get a presigned workflow task attachment upload URL
        /// </summary>
        /// <remarks>
        /// Get a presigned workflow task attachment upload URL 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="extension"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (WorkflowAttachmentUploadUrlResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<WorkflowAttachmentUploadUrlResponse>> GetWorkflowTaskAttachmentUploadUrlWithHttpInfoAsync (string extension, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Retrieve a workflow task by object type and id
        /// </summary>
        /// <remarks>
        /// Retrieve a workflow task by object type and id 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectType"></param>
        /// <param name="objectId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of WorkflowTasksResponse</returns>
        System.Threading.Tasks.Task<WorkflowTasksResponse> GetWorkflowTaskByObjectTypeAsync (string objectType, string objectId, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Retrieve a workflow task by object type and id
        /// </summary>
        /// <remarks>
        /// Retrieve a workflow task by object type and id 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectType"></param>
        /// <param name="objectId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (WorkflowTasksResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<WorkflowTasksResponse>> GetWorkflowTaskByObjectTypeWithHttpInfoAsync (string objectType, string objectId, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get a list of existing workflow task tags
        /// </summary>
        /// <remarks>
        /// Retrieves a unique list of all the existing workflow task tags. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of WorkflowTaskTagsResponse</returns>
        System.Threading.Tasks.Task<WorkflowTaskTagsResponse> GetWorkflowTaskTagsAsync (CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get a list of existing workflow task tags
        /// </summary>
        /// <remarks>
        /// Retrieves a unique list of all the existing workflow task tags. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (WorkflowTaskTagsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<WorkflowTaskTagsResponse>> GetWorkflowTaskTagsWithHttpInfoAsync (CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Search workflow tasks
        /// </summary>
        /// <remarks>
        /// Retrieves a set of workflow tasks from the account based on a query object. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workflowTasksQuery">Workflow tasks query</param>
        /// <param name="limit">The maximum number of records to return on this one API call. (Default 100, Max 500) (optional, default to 100)</param>
        /// <param name="offset">Pagination of the record set.  Offset is a zero based index. (optional, default to 0)</param>
        /// <param name="sort">The sort order of the items.  See Sorting documentation for examples of using multiple values and sorting by ascending and descending. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of WorkflowTasksResponse</returns>
        System.Threading.Tasks.Task<WorkflowTasksResponse> GetWorkflowTasksAsync (WorkflowTasksRequest workflowTasksQuery, int? limit = default(int?), int? offset = default(int?), string sort = default(string), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Search workflow tasks
        /// </summary>
        /// <remarks>
        /// Retrieves a set of workflow tasks from the account based on a query object. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workflowTasksQuery">Workflow tasks query</param>
        /// <param name="limit">The maximum number of records to return on this one API call. (Default 100, Max 500) (optional, default to 100)</param>
        /// <param name="offset">Pagination of the record set.  Offset is a zero based index. (optional, default to 0)</param>
        /// <param name="sort">The sort order of the items.  See Sorting documentation for examples of using multiple values and sorting by ascending and descending. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (WorkflowTasksResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<WorkflowTasksResponse>> GetWorkflowTasksWithHttpInfoAsync (WorkflowTasksRequest workflowTasksQuery, int? limit = default(int?), int? offset = default(int?), string sort = default(string), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Insert a workflow task
        /// </summary>
        /// <remarks>
        /// Insert a workflow task 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workflowTask">workflow task</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of WorkflowTaskResponse</returns>
        System.Threading.Tasks.Task<WorkflowTaskResponse> InsertWorkflowTaskAsync (WorkflowTask workflowTask, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Insert a workflow task
        /// </summary>
        /// <remarks>
        /// Insert a workflow task 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workflowTask">workflow task</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (WorkflowTaskResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<WorkflowTaskResponse>> InsertWorkflowTaskWithHttpInfoAsync (WorkflowTask workflowTask, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Update a workflow task
        /// </summary>
        /// <remarks>
        /// Update a workflow task 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskUuid"></param>
        /// <param name="workflowTask">Workflow task</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of WorkflowTaskResponse</returns>
        System.Threading.Tasks.Task<WorkflowTaskResponse> UpdateWorkflowTaskAsync (string taskUuid, WorkflowTask workflowTask, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Update a workflow task
        /// </summary>
        /// <remarks>
        /// Update a workflow task 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskUuid"></param>
        /// <param name="workflowTask">Workflow task</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (WorkflowTaskResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<WorkflowTaskResponse>> UpdateWorkflowTaskWithHttpInfoAsync (string taskUuid, WorkflowTask workflowTask, CancellationToken cancellationToken = default(CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class WorkflowApi : IWorkflowApi
    {
        private com.ultracart.admin.v2.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="WorkflowApi"/> class.
        /// </summary>
        /// <returns></returns>
        public WorkflowApi(String basePath, bool uselessVariable)
        {
            this.Configuration = new com.ultracart.admin.v2.Client.Configuration { BasePath = basePath };

            ExceptionFactory = com.ultracart.admin.v2.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="WorkflowApi"/> class
        /// </summary>
        /// <returns></returns>
        public WorkflowApi()
        {
            this.Configuration = com.ultracart.admin.v2.Client.Configuration.Default;

            ExceptionFactory = com.ultracart.admin.v2.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="WorkflowApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public WorkflowApi(com.ultracart.admin.v2.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = com.ultracart.admin.v2.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = com.ultracart.admin.v2.Client.Configuration.DefaultExceptionFactory;
        }


        /// <summary>
        /// Initializes a new instance of the <see cref="WorkflowApi"/> class
        /// using a simple key string and optional version, which you will
        /// almost always want to use the default
        /// </summary>
        /// <param name="SimpleKey">A simple key.  See https://ultracart.atlassian.net/wiki/spaces/ucdoc/pages/38688545/API+Simple+Key</param>
        /// <returns></returns>
        public WorkflowApi(string SimpleKey)
        {
            Configuration configuration = new Configuration();
            configuration.ApiKey.Add("x-ultracart-simple-key", SimpleKey);
            configuration.DefaultHeader.Add("X-UltraCart-Api-Version", "2017-03-01");
            this.Configuration = configuration;
            ExceptionFactory = com.ultracart.admin.v2.Client.Configuration.DefaultExceptionFactory;
        }


        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public com.ultracart.admin.v2.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public com.ultracart.admin.v2.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Retrieve a list of groups that workflow tasks can be assigned to Retrieve a list of groups that workflow tasks can be assigned to 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">The maximum number of records to return on this one API call. (Max 200) (optional, default to 100)</param>
        /// <param name="offset">Pagination of the record set.  Offset is a zero based index. (optional, default to 0)</param>
        /// <returns>WorkflowGroupsResponse</returns>
        public WorkflowGroupsResponse GetWorkflowAssignmentGroups (int? limit = default(int?), int? offset = default(int?))
        {
             ApiResponse<WorkflowGroupsResponse> localVarResponse = GetWorkflowAssignmentGroupsWithHttpInfo(limit, offset);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve a list of groups that workflow tasks can be assigned to Retrieve a list of groups that workflow tasks can be assigned to 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">The maximum number of records to return on this one API call. (Max 200) (optional, default to 100)</param>
        /// <param name="offset">Pagination of the record set.  Offset is a zero based index. (optional, default to 0)</param>
        /// <returns>ApiResponse of WorkflowGroupsResponse</returns>
        public ApiResponse<WorkflowGroupsResponse> GetWorkflowAssignmentGroupsWithHttpInfo (int? limit = default(int?), int? offset = default(int?))
        {

            var localVarPath = "/workflow/assignment_groups";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "_limit", limit)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "_offset", offset)); // query parameter

            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetWorkflowAssignmentGroups", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WorkflowGroupsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (WorkflowGroupsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(WorkflowGroupsResponse)));
        }

        /// <summary>
        /// Retrieve a list of groups that workflow tasks can be assigned to Retrieve a list of groups that workflow tasks can be assigned to 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">The maximum number of records to return on this one API call. (Max 200) (optional, default to 100)</param>
        /// <param name="offset">Pagination of the record set.  Offset is a zero based index. (optional, default to 0)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of WorkflowGroupsResponse</returns>
        public async System.Threading.Tasks.Task<WorkflowGroupsResponse> GetWorkflowAssignmentGroupsAsync (int? limit = default(int?), int? offset = default(int?), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<WorkflowGroupsResponse> localVarResponse = await GetWorkflowAssignmentGroupsWithHttpInfoAsync(limit, offset, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieve a list of groups that workflow tasks can be assigned to Retrieve a list of groups that workflow tasks can be assigned to 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">The maximum number of records to return on this one API call. (Max 200) (optional, default to 100)</param>
        /// <param name="offset">Pagination of the record set.  Offset is a zero based index. (optional, default to 0)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (WorkflowGroupsResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<WorkflowGroupsResponse>> GetWorkflowAssignmentGroupsWithHttpInfoAsync (int? limit = default(int?), int? offset = default(int?), CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/workflow/assignment_groups";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "_limit", limit)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "_offset", offset)); // query parameter

            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetWorkflowAssignmentGroups", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WorkflowGroupsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (WorkflowGroupsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(WorkflowGroupsResponse)));
        }

        /// <summary>
        /// Retrieve a list of users that workflow tasks can be assigned to Retrieve a list of users that workflow tasks can be assigned to 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">The maximum number of records to return on this one API call. (Max 200) (optional, default to 100)</param>
        /// <param name="offset">Pagination of the record set.  Offset is a zero based index. (optional, default to 0)</param>
        /// <returns>WorkflowUsersResponse</returns>
        public WorkflowUsersResponse GetWorkflowAssignmentUsers (int? limit = default(int?), int? offset = default(int?))
        {
             ApiResponse<WorkflowUsersResponse> localVarResponse = GetWorkflowAssignmentUsersWithHttpInfo(limit, offset);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve a list of users that workflow tasks can be assigned to Retrieve a list of users that workflow tasks can be assigned to 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">The maximum number of records to return on this one API call. (Max 200) (optional, default to 100)</param>
        /// <param name="offset">Pagination of the record set.  Offset is a zero based index. (optional, default to 0)</param>
        /// <returns>ApiResponse of WorkflowUsersResponse</returns>
        public ApiResponse<WorkflowUsersResponse> GetWorkflowAssignmentUsersWithHttpInfo (int? limit = default(int?), int? offset = default(int?))
        {

            var localVarPath = "/workflow/assignment_users";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "_limit", limit)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "_offset", offset)); // query parameter

            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetWorkflowAssignmentUsers", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WorkflowUsersResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (WorkflowUsersResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(WorkflowUsersResponse)));
        }

        /// <summary>
        /// Retrieve a list of users that workflow tasks can be assigned to Retrieve a list of users that workflow tasks can be assigned to 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">The maximum number of records to return on this one API call. (Max 200) (optional, default to 100)</param>
        /// <param name="offset">Pagination of the record set.  Offset is a zero based index. (optional, default to 0)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of WorkflowUsersResponse</returns>
        public async System.Threading.Tasks.Task<WorkflowUsersResponse> GetWorkflowAssignmentUsersAsync (int? limit = default(int?), int? offset = default(int?), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<WorkflowUsersResponse> localVarResponse = await GetWorkflowAssignmentUsersWithHttpInfoAsync(limit, offset, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieve a list of users that workflow tasks can be assigned to Retrieve a list of users that workflow tasks can be assigned to 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">The maximum number of records to return on this one API call. (Max 200) (optional, default to 100)</param>
        /// <param name="offset">Pagination of the record set.  Offset is a zero based index. (optional, default to 0)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (WorkflowUsersResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<WorkflowUsersResponse>> GetWorkflowAssignmentUsersWithHttpInfoAsync (int? limit = default(int?), int? offset = default(int?), CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/workflow/assignment_users";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "_limit", limit)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "_offset", offset)); // query parameter

            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetWorkflowAssignmentUsers", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WorkflowUsersResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (WorkflowUsersResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(WorkflowUsersResponse)));
        }

        /// <summary>
        /// Retrieve a user object for myself Retrieve a user object for myself 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>WorkflowUserResponse</returns>
        public WorkflowUserResponse GetWorkflowMe ()
        {
             ApiResponse<WorkflowUserResponse> localVarResponse = GetWorkflowMeWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve a user object for myself Retrieve a user object for myself 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of WorkflowUserResponse</returns>
        public ApiResponse<WorkflowUserResponse> GetWorkflowMeWithHttpInfo ()
        {

            var localVarPath = "/workflow/me";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetWorkflowMe", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WorkflowUserResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (WorkflowUserResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(WorkflowUserResponse)));
        }

        /// <summary>
        /// Retrieve a user object for myself Retrieve a user object for myself 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of WorkflowUserResponse</returns>
        public async System.Threading.Tasks.Task<WorkflowUserResponse> GetWorkflowMeAsync (CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<WorkflowUserResponse> localVarResponse = await GetWorkflowMeWithHttpInfoAsync(cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieve a user object for myself Retrieve a user object for myself 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (WorkflowUserResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<WorkflowUserResponse>> GetWorkflowMeWithHttpInfoAsync (CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/workflow/me";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetWorkflowMe", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WorkflowUserResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (WorkflowUserResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(WorkflowUserResponse)));
        }

        /// <summary>
        /// Retrieve a workflow task Retrieve a workflow task 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskUuid"></param>
        /// <returns>WorkflowTaskResponse</returns>
        public WorkflowTaskResponse GetWorkflowTask (string taskUuid)
        {
             ApiResponse<WorkflowTaskResponse> localVarResponse = GetWorkflowTaskWithHttpInfo(taskUuid);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve a workflow task Retrieve a workflow task 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskUuid"></param>
        /// <returns>ApiResponse of WorkflowTaskResponse</returns>
        public ApiResponse<WorkflowTaskResponse> GetWorkflowTaskWithHttpInfo (string taskUuid)
        {
            // verify the required parameter 'taskUuid' is set
            if (taskUuid == null)
                throw new ApiException(400, "Missing required parameter 'taskUuid' when calling WorkflowApi->GetWorkflowTask");

            var localVarPath = "/workflow/tasks/{task_uuid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (taskUuid != null) localVarPathParams.Add("task_uuid", this.Configuration.ApiClient.ParameterToString(taskUuid)); // path parameter

            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetWorkflowTask", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WorkflowTaskResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (WorkflowTaskResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(WorkflowTaskResponse)));
        }

        /// <summary>
        /// Retrieve a workflow task Retrieve a workflow task 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskUuid"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of WorkflowTaskResponse</returns>
        public async System.Threading.Tasks.Task<WorkflowTaskResponse> GetWorkflowTaskAsync (string taskUuid, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<WorkflowTaskResponse> localVarResponse = await GetWorkflowTaskWithHttpInfoAsync(taskUuid, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieve a workflow task Retrieve a workflow task 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskUuid"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (WorkflowTaskResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<WorkflowTaskResponse>> GetWorkflowTaskWithHttpInfoAsync (string taskUuid, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'taskUuid' is set
            if (taskUuid == null)
                throw new ApiException(400, "Missing required parameter 'taskUuid' when calling WorkflowApi->GetWorkflowTask");

            var localVarPath = "/workflow/tasks/{task_uuid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (taskUuid != null) localVarPathParams.Add("task_uuid", this.Configuration.ApiClient.ParameterToString(taskUuid)); // path parameter

            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetWorkflowTask", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WorkflowTaskResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (WorkflowTaskResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(WorkflowTaskResponse)));
        }

        /// <summary>
        /// Get a presigned workflow task attachment upload URL Get a presigned workflow task attachment upload URL 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="extension"></param>
        /// <returns>WorkflowAttachmentUploadUrlResponse</returns>
        public WorkflowAttachmentUploadUrlResponse GetWorkflowTaskAttachmentUploadUrl (string extension)
        {
             ApiResponse<WorkflowAttachmentUploadUrlResponse> localVarResponse = GetWorkflowTaskAttachmentUploadUrlWithHttpInfo(extension);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a presigned workflow task attachment upload URL Get a presigned workflow task attachment upload URL 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="extension"></param>
        /// <returns>ApiResponse of WorkflowAttachmentUploadUrlResponse</returns>
        public ApiResponse<WorkflowAttachmentUploadUrlResponse> GetWorkflowTaskAttachmentUploadUrlWithHttpInfo (string extension)
        {
            // verify the required parameter 'extension' is set
            if (extension == null)
                throw new ApiException(400, "Missing required parameter 'extension' when calling WorkflowApi->GetWorkflowTaskAttachmentUploadUrl");

            var localVarPath = "/workflow/tasks/attachments/{extension}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (extension != null) localVarPathParams.Add("extension", this.Configuration.ApiClient.ParameterToString(extension)); // path parameter

            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetWorkflowTaskAttachmentUploadUrl", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WorkflowAttachmentUploadUrlResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (WorkflowAttachmentUploadUrlResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(WorkflowAttachmentUploadUrlResponse)));
        }

        /// <summary>
        /// Get a presigned workflow task attachment upload URL Get a presigned workflow task attachment upload URL 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="extension"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of WorkflowAttachmentUploadUrlResponse</returns>
        public async System.Threading.Tasks.Task<WorkflowAttachmentUploadUrlResponse> GetWorkflowTaskAttachmentUploadUrlAsync (string extension, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<WorkflowAttachmentUploadUrlResponse> localVarResponse = await GetWorkflowTaskAttachmentUploadUrlWithHttpInfoAsync(extension, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a presigned workflow task attachment upload URL Get a presigned workflow task attachment upload URL 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="extension"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (WorkflowAttachmentUploadUrlResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<WorkflowAttachmentUploadUrlResponse>> GetWorkflowTaskAttachmentUploadUrlWithHttpInfoAsync (string extension, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'extension' is set
            if (extension == null)
                throw new ApiException(400, "Missing required parameter 'extension' when calling WorkflowApi->GetWorkflowTaskAttachmentUploadUrl");

            var localVarPath = "/workflow/tasks/attachments/{extension}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (extension != null) localVarPathParams.Add("extension", this.Configuration.ApiClient.ParameterToString(extension)); // path parameter

            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetWorkflowTaskAttachmentUploadUrl", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WorkflowAttachmentUploadUrlResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (WorkflowAttachmentUploadUrlResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(WorkflowAttachmentUploadUrlResponse)));
        }

        /// <summary>
        /// Retrieve a workflow task by object type and id Retrieve a workflow task by object type and id 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectType"></param>
        /// <param name="objectId"></param>
        /// <returns>WorkflowTasksResponse</returns>
        public WorkflowTasksResponse GetWorkflowTaskByObjectType (string objectType, string objectId)
        {
             ApiResponse<WorkflowTasksResponse> localVarResponse = GetWorkflowTaskByObjectTypeWithHttpInfo(objectType, objectId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve a workflow task by object type and id Retrieve a workflow task by object type and id 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectType"></param>
        /// <param name="objectId"></param>
        /// <returns>ApiResponse of WorkflowTasksResponse</returns>
        public ApiResponse<WorkflowTasksResponse> GetWorkflowTaskByObjectTypeWithHttpInfo (string objectType, string objectId)
        {
            // verify the required parameter 'objectType' is set
            if (objectType == null)
                throw new ApiException(400, "Missing required parameter 'objectType' when calling WorkflowApi->GetWorkflowTaskByObjectType");
            // verify the required parameter 'objectId' is set
            if (objectId == null)
                throw new ApiException(400, "Missing required parameter 'objectId' when calling WorkflowApi->GetWorkflowTaskByObjectType");

            var localVarPath = "/workflow/tasks/by/{object_type}/{object_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (objectType != null) localVarPathParams.Add("object_type", this.Configuration.ApiClient.ParameterToString(objectType)); // path parameter
            if (objectId != null) localVarPathParams.Add("object_id", this.Configuration.ApiClient.ParameterToString(objectId)); // path parameter

            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetWorkflowTaskByObjectType", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WorkflowTasksResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (WorkflowTasksResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(WorkflowTasksResponse)));
        }

        /// <summary>
        /// Retrieve a workflow task by object type and id Retrieve a workflow task by object type and id 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectType"></param>
        /// <param name="objectId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of WorkflowTasksResponse</returns>
        public async System.Threading.Tasks.Task<WorkflowTasksResponse> GetWorkflowTaskByObjectTypeAsync (string objectType, string objectId, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<WorkflowTasksResponse> localVarResponse = await GetWorkflowTaskByObjectTypeWithHttpInfoAsync(objectType, objectId, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieve a workflow task by object type and id Retrieve a workflow task by object type and id 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectType"></param>
        /// <param name="objectId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (WorkflowTasksResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<WorkflowTasksResponse>> GetWorkflowTaskByObjectTypeWithHttpInfoAsync (string objectType, string objectId, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'objectType' is set
            if (objectType == null)
                throw new ApiException(400, "Missing required parameter 'objectType' when calling WorkflowApi->GetWorkflowTaskByObjectType");
            // verify the required parameter 'objectId' is set
            if (objectId == null)
                throw new ApiException(400, "Missing required parameter 'objectId' when calling WorkflowApi->GetWorkflowTaskByObjectType");

            var localVarPath = "/workflow/tasks/by/{object_type}/{object_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (objectType != null) localVarPathParams.Add("object_type", this.Configuration.ApiClient.ParameterToString(objectType)); // path parameter
            if (objectId != null) localVarPathParams.Add("object_id", this.Configuration.ApiClient.ParameterToString(objectId)); // path parameter

            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetWorkflowTaskByObjectType", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WorkflowTasksResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (WorkflowTasksResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(WorkflowTasksResponse)));
        }

        /// <summary>
        /// Get a list of existing workflow task tags Retrieves a unique list of all the existing workflow task tags. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>WorkflowTaskTagsResponse</returns>
        public WorkflowTaskTagsResponse GetWorkflowTaskTags ()
        {
             ApiResponse<WorkflowTaskTagsResponse> localVarResponse = GetWorkflowTaskTagsWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a list of existing workflow task tags Retrieves a unique list of all the existing workflow task tags. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of WorkflowTaskTagsResponse</returns>
        public ApiResponse<WorkflowTaskTagsResponse> GetWorkflowTaskTagsWithHttpInfo ()
        {

            var localVarPath = "/workflow/tasks/tags";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetWorkflowTaskTags", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WorkflowTaskTagsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (WorkflowTaskTagsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(WorkflowTaskTagsResponse)));
        }

        /// <summary>
        /// Get a list of existing workflow task tags Retrieves a unique list of all the existing workflow task tags. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of WorkflowTaskTagsResponse</returns>
        public async System.Threading.Tasks.Task<WorkflowTaskTagsResponse> GetWorkflowTaskTagsAsync (CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<WorkflowTaskTagsResponse> localVarResponse = await GetWorkflowTaskTagsWithHttpInfoAsync(cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a list of existing workflow task tags Retrieves a unique list of all the existing workflow task tags. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (WorkflowTaskTagsResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<WorkflowTaskTagsResponse>> GetWorkflowTaskTagsWithHttpInfoAsync (CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/workflow/tasks/tags";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetWorkflowTaskTags", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WorkflowTaskTagsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (WorkflowTaskTagsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(WorkflowTaskTagsResponse)));
        }

        /// <summary>
        /// Search workflow tasks Retrieves a set of workflow tasks from the account based on a query object. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workflowTasksQuery">Workflow tasks query</param>
        /// <param name="limit">The maximum number of records to return on this one API call. (Default 100, Max 500) (optional, default to 100)</param>
        /// <param name="offset">Pagination of the record set.  Offset is a zero based index. (optional, default to 0)</param>
        /// <param name="sort">The sort order of the items.  See Sorting documentation for examples of using multiple values and sorting by ascending and descending. (optional)</param>
        /// <returns>WorkflowTasksResponse</returns>
        public WorkflowTasksResponse GetWorkflowTasks (WorkflowTasksRequest workflowTasksQuery, int? limit = default(int?), int? offset = default(int?), string sort = default(string))
        {
             ApiResponse<WorkflowTasksResponse> localVarResponse = GetWorkflowTasksWithHttpInfo(workflowTasksQuery, limit, offset, sort);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Search workflow tasks Retrieves a set of workflow tasks from the account based on a query object. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workflowTasksQuery">Workflow tasks query</param>
        /// <param name="limit">The maximum number of records to return on this one API call. (Default 100, Max 500) (optional, default to 100)</param>
        /// <param name="offset">Pagination of the record set.  Offset is a zero based index. (optional, default to 0)</param>
        /// <param name="sort">The sort order of the items.  See Sorting documentation for examples of using multiple values and sorting by ascending and descending. (optional)</param>
        /// <returns>ApiResponse of WorkflowTasksResponse</returns>
        public ApiResponse<WorkflowTasksResponse> GetWorkflowTasksWithHttpInfo (WorkflowTasksRequest workflowTasksQuery, int? limit = default(int?), int? offset = default(int?), string sort = default(string))
        {
            // verify the required parameter 'workflowTasksQuery' is set
            if (workflowTasksQuery == null)
                throw new ApiException(400, "Missing required parameter 'workflowTasksQuery' when calling WorkflowApi->GetWorkflowTasks");

            var localVarPath = "/workflow/tasks/search";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "_limit", limit)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "_offset", offset)); // query parameter
            if (sort != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "_sort", sort)); // query parameter
            if (workflowTasksQuery != null && workflowTasksQuery.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(workflowTasksQuery); // http body (model) parameter
            }
            else
            {
                localVarPostBody = workflowTasksQuery; // byte array
            }

            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetWorkflowTasks", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WorkflowTasksResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (WorkflowTasksResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(WorkflowTasksResponse)));
        }

        /// <summary>
        /// Search workflow tasks Retrieves a set of workflow tasks from the account based on a query object. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workflowTasksQuery">Workflow tasks query</param>
        /// <param name="limit">The maximum number of records to return on this one API call. (Default 100, Max 500) (optional, default to 100)</param>
        /// <param name="offset">Pagination of the record set.  Offset is a zero based index. (optional, default to 0)</param>
        /// <param name="sort">The sort order of the items.  See Sorting documentation for examples of using multiple values and sorting by ascending and descending. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of WorkflowTasksResponse</returns>
        public async System.Threading.Tasks.Task<WorkflowTasksResponse> GetWorkflowTasksAsync (WorkflowTasksRequest workflowTasksQuery, int? limit = default(int?), int? offset = default(int?), string sort = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<WorkflowTasksResponse> localVarResponse = await GetWorkflowTasksWithHttpInfoAsync(workflowTasksQuery, limit, offset, sort, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Search workflow tasks Retrieves a set of workflow tasks from the account based on a query object. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workflowTasksQuery">Workflow tasks query</param>
        /// <param name="limit">The maximum number of records to return on this one API call. (Default 100, Max 500) (optional, default to 100)</param>
        /// <param name="offset">Pagination of the record set.  Offset is a zero based index. (optional, default to 0)</param>
        /// <param name="sort">The sort order of the items.  See Sorting documentation for examples of using multiple values and sorting by ascending and descending. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (WorkflowTasksResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<WorkflowTasksResponse>> GetWorkflowTasksWithHttpInfoAsync (WorkflowTasksRequest workflowTasksQuery, int? limit = default(int?), int? offset = default(int?), string sort = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'workflowTasksQuery' is set
            if (workflowTasksQuery == null)
                throw new ApiException(400, "Missing required parameter 'workflowTasksQuery' when calling WorkflowApi->GetWorkflowTasks");

            var localVarPath = "/workflow/tasks/search";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "_limit", limit)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "_offset", offset)); // query parameter
            if (sort != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "_sort", sort)); // query parameter
            if (workflowTasksQuery != null && workflowTasksQuery.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(workflowTasksQuery); // http body (model) parameter
            }
            else
            {
                localVarPostBody = workflowTasksQuery; // byte array
            }

            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetWorkflowTasks", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WorkflowTasksResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (WorkflowTasksResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(WorkflowTasksResponse)));
        }

        /// <summary>
        /// Insert a workflow task Insert a workflow task 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workflowTask">workflow task</param>
        /// <returns>WorkflowTaskResponse</returns>
        public WorkflowTaskResponse InsertWorkflowTask (WorkflowTask workflowTask)
        {
             ApiResponse<WorkflowTaskResponse> localVarResponse = InsertWorkflowTaskWithHttpInfo(workflowTask);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Insert a workflow task Insert a workflow task 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workflowTask">workflow task</param>
        /// <returns>ApiResponse of WorkflowTaskResponse</returns>
        public ApiResponse<WorkflowTaskResponse> InsertWorkflowTaskWithHttpInfo (WorkflowTask workflowTask)
        {
            // verify the required parameter 'workflowTask' is set
            if (workflowTask == null)
                throw new ApiException(400, "Missing required parameter 'workflowTask' when calling WorkflowApi->InsertWorkflowTask");

            var localVarPath = "/workflow/tasks";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workflowTask != null && workflowTask.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(workflowTask); // http body (model) parameter
            }
            else
            {
                localVarPostBody = workflowTask; // byte array
            }

            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("InsertWorkflowTask", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WorkflowTaskResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (WorkflowTaskResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(WorkflowTaskResponse)));
        }

        /// <summary>
        /// Insert a workflow task Insert a workflow task 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workflowTask">workflow task</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of WorkflowTaskResponse</returns>
        public async System.Threading.Tasks.Task<WorkflowTaskResponse> InsertWorkflowTaskAsync (WorkflowTask workflowTask, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<WorkflowTaskResponse> localVarResponse = await InsertWorkflowTaskWithHttpInfoAsync(workflowTask, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Insert a workflow task Insert a workflow task 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workflowTask">workflow task</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (WorkflowTaskResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<WorkflowTaskResponse>> InsertWorkflowTaskWithHttpInfoAsync (WorkflowTask workflowTask, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'workflowTask' is set
            if (workflowTask == null)
                throw new ApiException(400, "Missing required parameter 'workflowTask' when calling WorkflowApi->InsertWorkflowTask");

            var localVarPath = "/workflow/tasks";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workflowTask != null && workflowTask.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(workflowTask); // http body (model) parameter
            }
            else
            {
                localVarPostBody = workflowTask; // byte array
            }

            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("InsertWorkflowTask", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WorkflowTaskResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (WorkflowTaskResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(WorkflowTaskResponse)));
        }

        /// <summary>
        /// Update a workflow task Update a workflow task 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskUuid"></param>
        /// <param name="workflowTask">Workflow task</param>
        /// <returns>WorkflowTaskResponse</returns>
        public WorkflowTaskResponse UpdateWorkflowTask (string taskUuid, WorkflowTask workflowTask)
        {
             ApiResponse<WorkflowTaskResponse> localVarResponse = UpdateWorkflowTaskWithHttpInfo(taskUuid, workflowTask);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update a workflow task Update a workflow task 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskUuid"></param>
        /// <param name="workflowTask">Workflow task</param>
        /// <returns>ApiResponse of WorkflowTaskResponse</returns>
        public ApiResponse<WorkflowTaskResponse> UpdateWorkflowTaskWithHttpInfo (string taskUuid, WorkflowTask workflowTask)
        {
            // verify the required parameter 'taskUuid' is set
            if (taskUuid == null)
                throw new ApiException(400, "Missing required parameter 'taskUuid' when calling WorkflowApi->UpdateWorkflowTask");
            // verify the required parameter 'workflowTask' is set
            if (workflowTask == null)
                throw new ApiException(400, "Missing required parameter 'workflowTask' when calling WorkflowApi->UpdateWorkflowTask");

            var localVarPath = "/workflow/tasks/{task_uuid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (taskUuid != null) localVarPathParams.Add("task_uuid", this.Configuration.ApiClient.ParameterToString(taskUuid)); // path parameter
            if (workflowTask != null && workflowTask.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(workflowTask); // http body (model) parameter
            }
            else
            {
                localVarPostBody = workflowTask; // byte array
            }

            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateWorkflowTask", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WorkflowTaskResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (WorkflowTaskResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(WorkflowTaskResponse)));
        }

        /// <summary>
        /// Update a workflow task Update a workflow task 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskUuid"></param>
        /// <param name="workflowTask">Workflow task</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of WorkflowTaskResponse</returns>
        public async System.Threading.Tasks.Task<WorkflowTaskResponse> UpdateWorkflowTaskAsync (string taskUuid, WorkflowTask workflowTask, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<WorkflowTaskResponse> localVarResponse = await UpdateWorkflowTaskWithHttpInfoAsync(taskUuid, workflowTask, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update a workflow task Update a workflow task 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskUuid"></param>
        /// <param name="workflowTask">Workflow task</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (WorkflowTaskResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<WorkflowTaskResponse>> UpdateWorkflowTaskWithHttpInfoAsync (string taskUuid, WorkflowTask workflowTask, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'taskUuid' is set
            if (taskUuid == null)
                throw new ApiException(400, "Missing required parameter 'taskUuid' when calling WorkflowApi->UpdateWorkflowTask");
            // verify the required parameter 'workflowTask' is set
            if (workflowTask == null)
                throw new ApiException(400, "Missing required parameter 'workflowTask' when calling WorkflowApi->UpdateWorkflowTask");

            var localVarPath = "/workflow/tasks/{task_uuid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (taskUuid != null) localVarPathParams.Add("task_uuid", this.Configuration.ApiClient.ParameterToString(taskUuid)); // path parameter
            if (workflowTask != null && workflowTask.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(workflowTask); // http body (model) parameter
            }
            else
            {
                localVarPostBody = workflowTask; // byte array
            }

            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = this.Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateWorkflowTask", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WorkflowTaskResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (WorkflowTaskResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(WorkflowTaskResponse)));
        }

    }
}
