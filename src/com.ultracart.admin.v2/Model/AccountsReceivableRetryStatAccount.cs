/*
 * UltraCart Rest API V2
 *
 * UltraCart REST API Version 2
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@ultracart.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = com.ultracart.admin.v2.Client.OpenAPIDateConverter;

namespace com.ultracart.admin.v2.Model
{
    /// <summary>
    /// AccountsReceivableRetryStatAccount
    /// </summary>
    [DataContract]
    public partial class AccountsReceivableRetryStatAccount :  IEquatable<AccountsReceivableRetryStatAccount>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AccountsReceivableRetryStatAccount" /> class.
        /// </summary>
        /// <param name="days">days.</param>
        /// <param name="merchantId">merchantId.</param>
        /// <param name="overall">overall.</param>
        /// <param name="revenueForPeriod">revenueForPeriod.</param>
        public AccountsReceivableRetryStatAccount(List<AccountsReceivableRetryStatMetrics> days = default(List<AccountsReceivableRetryStatMetrics>), string merchantId = default(string), AccountsReceivableRetryStatMetrics overall = default(AccountsReceivableRetryStatMetrics), List<AccountsReceivableRetryStatRevenue> revenueForPeriod = default(List<AccountsReceivableRetryStatRevenue>))
        {
            this.Days = days;
            this.MerchantId = merchantId;
            this.Overall = overall;
            this.RevenueForPeriod = revenueForPeriod;
        }

        /// <summary>
        /// Gets or Sets Days
        /// </summary>
        [DataMember(Name="days", EmitDefaultValue=false)]
        public List<AccountsReceivableRetryStatMetrics> Days { get; set; }

        /// <summary>
        /// Gets or Sets MerchantId
        /// </summary>
        [DataMember(Name="merchant_id", EmitDefaultValue=false)]
        public string MerchantId { get; set; }

        /// <summary>
        /// Gets or Sets Overall
        /// </summary>
        [DataMember(Name="overall", EmitDefaultValue=false)]
        public AccountsReceivableRetryStatMetrics Overall { get; set; }

        /// <summary>
        /// Gets or Sets RevenueForPeriod
        /// </summary>
        [DataMember(Name="revenue_for_period", EmitDefaultValue=false)]
        public List<AccountsReceivableRetryStatRevenue> RevenueForPeriod { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AccountsReceivableRetryStatAccount {\n");
            sb.Append("  Days: ").Append(Days).Append("\n");
            sb.Append("  MerchantId: ").Append(MerchantId).Append("\n");
            sb.Append("  Overall: ").Append(Overall).Append("\n");
            sb.Append("  RevenueForPeriod: ").Append(RevenueForPeriod).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AccountsReceivableRetryStatAccount);
        }

        /// <summary>
        /// Returns true if AccountsReceivableRetryStatAccount instances are equal
        /// </summary>
        /// <param name="input">Instance of AccountsReceivableRetryStatAccount to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AccountsReceivableRetryStatAccount input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Days == input.Days ||
                    this.Days != null &&
                    input.Days != null &&
                    this.Days.SequenceEqual(input.Days)
                ) && 
                (
                    this.MerchantId == input.MerchantId ||
                    (this.MerchantId != null &&
                    this.MerchantId.Equals(input.MerchantId))
                ) && 
                (
                    this.Overall == input.Overall ||
                    (this.Overall != null &&
                    this.Overall.Equals(input.Overall))
                ) && 
                (
                    this.RevenueForPeriod == input.RevenueForPeriod ||
                    this.RevenueForPeriod != null &&
                    input.RevenueForPeriod != null &&
                    this.RevenueForPeriod.SequenceEqual(input.RevenueForPeriod)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Days != null)
                    hashCode = hashCode * 59 + this.Days.GetHashCode();
                if (this.MerchantId != null)
                    hashCode = hashCode * 59 + this.MerchantId.GetHashCode();
                if (this.Overall != null)
                    hashCode = hashCode * 59 + this.Overall.GetHashCode();
                if (this.RevenueForPeriod != null)
                    hashCode = hashCode * 59 + this.RevenueForPeriod.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
