/*
 * UltraCart Rest API V2
 *
 * UltraCart REST API Version 2
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@ultracart.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = com.ultracart.admin.v2.Client.OpenAPIDateConverter;

namespace com.ultracart.admin.v2.Model
{
    /// <summary>
    /// AccountsReceivableRetryStatMetrics
    /// </summary>
    [DataContract]
    public partial class AccountsReceivableRetryStatMetrics :  IEquatable<AccountsReceivableRetryStatMetrics>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AccountsReceivableRetryStatMetrics" /> class.
        /// </summary>
        /// <param name="attempts">attempts.</param>
        /// <param name="attemptsFormatted">attemptsFormatted.</param>
        /// <param name="conversionRate">conversionRate.</param>
        /// <param name="conversionRateFormatted">conversionRateFormatted.</param>
        /// <param name="day">day.</param>
        /// <param name="discounts">discounts.</param>
        /// <param name="discountsFormatted">discountsFormatted.</param>
        /// <param name="revenue">revenue.</param>
        /// <param name="revenueFormatted">revenueFormatted.</param>
        /// <param name="successes">successes.</param>
        /// <param name="successesFormatted">successesFormatted.</param>
        public AccountsReceivableRetryStatMetrics(int attempts = default(int), string attemptsFormatted = default(string), decimal conversionRate = default(decimal), string conversionRateFormatted = default(string), int day = default(int), decimal discounts = default(decimal), string discountsFormatted = default(string), decimal revenue = default(decimal), string revenueFormatted = default(string), int successes = default(int), string successesFormatted = default(string))
        {
            this.Attempts = attempts;
            this.AttemptsFormatted = attemptsFormatted;
            this.ConversionRate = conversionRate;
            this.ConversionRateFormatted = conversionRateFormatted;
            this.Day = day;
            this.Discounts = discounts;
            this.DiscountsFormatted = discountsFormatted;
            this.Revenue = revenue;
            this.RevenueFormatted = revenueFormatted;
            this.Successes = successes;
            this.SuccessesFormatted = successesFormatted;
        }

        /// <summary>
        /// Gets or Sets Attempts
        /// </summary>
        [DataMember(Name="attempts", EmitDefaultValue=false)]
        public int Attempts { get; set; }

        /// <summary>
        /// Gets or Sets AttemptsFormatted
        /// </summary>
        [DataMember(Name="attempts_formatted", EmitDefaultValue=false)]
        public string AttemptsFormatted { get; set; }

        /// <summary>
        /// Gets or Sets ConversionRate
        /// </summary>
        [DataMember(Name="conversion_rate", EmitDefaultValue=false)]
        public decimal ConversionRate { get; set; }

        /// <summary>
        /// Gets or Sets ConversionRateFormatted
        /// </summary>
        [DataMember(Name="conversion_rate_formatted", EmitDefaultValue=false)]
        public string ConversionRateFormatted { get; set; }

        /// <summary>
        /// Gets or Sets Day
        /// </summary>
        [DataMember(Name="day", EmitDefaultValue=false)]
        public int Day { get; set; }

        /// <summary>
        /// Gets or Sets Discounts
        /// </summary>
        [DataMember(Name="discounts", EmitDefaultValue=false)]
        public decimal Discounts { get; set; }

        /// <summary>
        /// Gets or Sets DiscountsFormatted
        /// </summary>
        [DataMember(Name="discounts_formatted", EmitDefaultValue=false)]
        public string DiscountsFormatted { get; set; }

        /// <summary>
        /// Gets or Sets Revenue
        /// </summary>
        [DataMember(Name="revenue", EmitDefaultValue=false)]
        public decimal Revenue { get; set; }

        /// <summary>
        /// Gets or Sets RevenueFormatted
        /// </summary>
        [DataMember(Name="revenue_formatted", EmitDefaultValue=false)]
        public string RevenueFormatted { get; set; }

        /// <summary>
        /// Gets or Sets Successes
        /// </summary>
        [DataMember(Name="successes", EmitDefaultValue=false)]
        public int Successes { get; set; }

        /// <summary>
        /// Gets or Sets SuccessesFormatted
        /// </summary>
        [DataMember(Name="successes_formatted", EmitDefaultValue=false)]
        public string SuccessesFormatted { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AccountsReceivableRetryStatMetrics {\n");
            sb.Append("  Attempts: ").Append(Attempts).Append("\n");
            sb.Append("  AttemptsFormatted: ").Append(AttemptsFormatted).Append("\n");
            sb.Append("  ConversionRate: ").Append(ConversionRate).Append("\n");
            sb.Append("  ConversionRateFormatted: ").Append(ConversionRateFormatted).Append("\n");
            sb.Append("  Day: ").Append(Day).Append("\n");
            sb.Append("  Discounts: ").Append(Discounts).Append("\n");
            sb.Append("  DiscountsFormatted: ").Append(DiscountsFormatted).Append("\n");
            sb.Append("  Revenue: ").Append(Revenue).Append("\n");
            sb.Append("  RevenueFormatted: ").Append(RevenueFormatted).Append("\n");
            sb.Append("  Successes: ").Append(Successes).Append("\n");
            sb.Append("  SuccessesFormatted: ").Append(SuccessesFormatted).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AccountsReceivableRetryStatMetrics);
        }

        /// <summary>
        /// Returns true if AccountsReceivableRetryStatMetrics instances are equal
        /// </summary>
        /// <param name="input">Instance of AccountsReceivableRetryStatMetrics to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AccountsReceivableRetryStatMetrics input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Attempts == input.Attempts ||
                    (this.Attempts != null &&
                    this.Attempts.Equals(input.Attempts))
                ) && 
                (
                    this.AttemptsFormatted == input.AttemptsFormatted ||
                    (this.AttemptsFormatted != null &&
                    this.AttemptsFormatted.Equals(input.AttemptsFormatted))
                ) && 
                (
                    this.ConversionRate == input.ConversionRate ||
                    (this.ConversionRate != null &&
                    this.ConversionRate.Equals(input.ConversionRate))
                ) && 
                (
                    this.ConversionRateFormatted == input.ConversionRateFormatted ||
                    (this.ConversionRateFormatted != null &&
                    this.ConversionRateFormatted.Equals(input.ConversionRateFormatted))
                ) && 
                (
                    this.Day == input.Day ||
                    (this.Day != null &&
                    this.Day.Equals(input.Day))
                ) && 
                (
                    this.Discounts == input.Discounts ||
                    (this.Discounts != null &&
                    this.Discounts.Equals(input.Discounts))
                ) && 
                (
                    this.DiscountsFormatted == input.DiscountsFormatted ||
                    (this.DiscountsFormatted != null &&
                    this.DiscountsFormatted.Equals(input.DiscountsFormatted))
                ) && 
                (
                    this.Revenue == input.Revenue ||
                    (this.Revenue != null &&
                    this.Revenue.Equals(input.Revenue))
                ) && 
                (
                    this.RevenueFormatted == input.RevenueFormatted ||
                    (this.RevenueFormatted != null &&
                    this.RevenueFormatted.Equals(input.RevenueFormatted))
                ) && 
                (
                    this.Successes == input.Successes ||
                    (this.Successes != null &&
                    this.Successes.Equals(input.Successes))
                ) && 
                (
                    this.SuccessesFormatted == input.SuccessesFormatted ||
                    (this.SuccessesFormatted != null &&
                    this.SuccessesFormatted.Equals(input.SuccessesFormatted))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Attempts != null)
                    hashCode = hashCode * 59 + this.Attempts.GetHashCode();
                if (this.AttemptsFormatted != null)
                    hashCode = hashCode * 59 + this.AttemptsFormatted.GetHashCode();
                if (this.ConversionRate != null)
                    hashCode = hashCode * 59 + this.ConversionRate.GetHashCode();
                if (this.ConversionRateFormatted != null)
                    hashCode = hashCode * 59 + this.ConversionRateFormatted.GetHashCode();
                if (this.Day != null)
                    hashCode = hashCode * 59 + this.Day.GetHashCode();
                if (this.Discounts != null)
                    hashCode = hashCode * 59 + this.Discounts.GetHashCode();
                if (this.DiscountsFormatted != null)
                    hashCode = hashCode * 59 + this.DiscountsFormatted.GetHashCode();
                if (this.Revenue != null)
                    hashCode = hashCode * 59 + this.Revenue.GetHashCode();
                if (this.RevenueFormatted != null)
                    hashCode = hashCode * 59 + this.RevenueFormatted.GetHashCode();
                if (this.Successes != null)
                    hashCode = hashCode * 59 + this.Successes.GetHashCode();
                if (this.SuccessesFormatted != null)
                    hashCode = hashCode * 59 + this.SuccessesFormatted.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
