/*
 * UltraCart Rest API V2
 *
 * UltraCart REST API Version 2
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@ultracart.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = com.ultracart.admin.v2.Client.OpenAPIDateConverter;

namespace com.ultracart.admin.v2.Model
{
    /// <summary>
    /// AdjustInternalCertificateRequest
    /// </summary>
    [DataContract]
    public partial class AdjustInternalCertificateRequest :  IEquatable<AdjustInternalCertificateRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AdjustInternalCertificateRequest" /> class.
        /// </summary>
        /// <param name="adjustmentAmount">The adjustment amount.</param>
        /// <param name="description">Description of this adjustment, 50 characters max.</param>
        /// <param name="entryDts">Optional timestamp for the adjustment, defaults to current time.</param>
        /// <param name="expirationDays">Optional expiration days from the entry_dts when these adjustment becomes worthless.</param>
        /// <param name="orderId">Optional order id if this adjustment is related to a particular order.</param>
        /// <param name="vestingDays">Optional days required for this adjustment to vest.</param>
        public AdjustInternalCertificateRequest(decimal adjustmentAmount = default(decimal), string description = default(string), string entryDts = default(string), int expirationDays = default(int), string orderId = default(string), int vestingDays = default(int))
        {
            this.AdjustmentAmount = adjustmentAmount;
            this.Description = description;
            this.EntryDts = entryDts;
            this.ExpirationDays = expirationDays;
            this.OrderId = orderId;
            this.VestingDays = vestingDays;
        }

        /// <summary>
        /// The adjustment amount
        /// </summary>
        /// <value>The adjustment amount</value>
        [DataMember(Name="adjustment_amount", EmitDefaultValue=false)]
        public decimal AdjustmentAmount { get; set; }

        /// <summary>
        /// Description of this adjustment, 50 characters max
        /// </summary>
        /// <value>Description of this adjustment, 50 characters max</value>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }

        /// <summary>
        /// Optional timestamp for the adjustment, defaults to current time
        /// </summary>
        /// <value>Optional timestamp for the adjustment, defaults to current time</value>
        [DataMember(Name="entry_dts", EmitDefaultValue=false)]
        public string EntryDts { get; set; }

        /// <summary>
        /// Optional expiration days from the entry_dts when these adjustment becomes worthless
        /// </summary>
        /// <value>Optional expiration days from the entry_dts when these adjustment becomes worthless</value>
        [DataMember(Name="expiration_days", EmitDefaultValue=false)]
        public int ExpirationDays { get; set; }

        /// <summary>
        /// Optional order id if this adjustment is related to a particular order
        /// </summary>
        /// <value>Optional order id if this adjustment is related to a particular order</value>
        [DataMember(Name="order_id", EmitDefaultValue=false)]
        public string OrderId { get; set; }

        /// <summary>
        /// Optional days required for this adjustment to vest
        /// </summary>
        /// <value>Optional days required for this adjustment to vest</value>
        [DataMember(Name="vesting_days", EmitDefaultValue=false)]
        public int VestingDays { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AdjustInternalCertificateRequest {\n");
            sb.Append("  AdjustmentAmount: ").Append(AdjustmentAmount).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  EntryDts: ").Append(EntryDts).Append("\n");
            sb.Append("  ExpirationDays: ").Append(ExpirationDays).Append("\n");
            sb.Append("  OrderId: ").Append(OrderId).Append("\n");
            sb.Append("  VestingDays: ").Append(VestingDays).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AdjustInternalCertificateRequest);
        }

        /// <summary>
        /// Returns true if AdjustInternalCertificateRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of AdjustInternalCertificateRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AdjustInternalCertificateRequest input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.AdjustmentAmount == input.AdjustmentAmount ||
                    (this.AdjustmentAmount != null &&
                    this.AdjustmentAmount.Equals(input.AdjustmentAmount))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.EntryDts == input.EntryDts ||
                    (this.EntryDts != null &&
                    this.EntryDts.Equals(input.EntryDts))
                ) && 
                (
                    this.ExpirationDays == input.ExpirationDays ||
                    (this.ExpirationDays != null &&
                    this.ExpirationDays.Equals(input.ExpirationDays))
                ) && 
                (
                    this.OrderId == input.OrderId ||
                    (this.OrderId != null &&
                    this.OrderId.Equals(input.OrderId))
                ) && 
                (
                    this.VestingDays == input.VestingDays ||
                    (this.VestingDays != null &&
                    this.VestingDays.Equals(input.VestingDays))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AdjustmentAmount != null)
                    hashCode = hashCode * 59 + this.AdjustmentAmount.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                if (this.EntryDts != null)
                    hashCode = hashCode * 59 + this.EntryDts.GetHashCode();
                if (this.ExpirationDays != null)
                    hashCode = hashCode * 59 + this.ExpirationDays.GetHashCode();
                if (this.OrderId != null)
                    hashCode = hashCode * 59 + this.OrderId.GetHashCode();
                if (this.VestingDays != null)
                    hashCode = hashCode * 59 + this.VestingDays.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
