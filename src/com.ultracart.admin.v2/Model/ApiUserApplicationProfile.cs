/*
 * UltraCart Rest API V2
 *
 * UltraCart REST API Version 2
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@ultracart.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = com.ultracart.admin.v2.Client.OpenAPIDateConverter;

namespace com.ultracart.admin.v2.Model
{
    /// <summary>
    /// ApiUserApplicationProfile
    /// </summary>
    [DataContract]
    public partial class ApiUserApplicationProfile :  IEquatable<ApiUserApplicationProfile>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ApiUserApplicationProfile" /> class.
        /// </summary>
        /// <param name="apiApplicationLogoUrl">Application logo URL.</param>
        /// <param name="applicationDescription">Application description.</param>
        /// <param name="applicationName">Application name.</param>
        /// <param name="developerName">Developer name.</param>
        /// <param name="developerWebsite">Developer website.</param>
        public ApiUserApplicationProfile(string apiApplicationLogoUrl = default(string), string applicationDescription = default(string), string applicationName = default(string), string developerName = default(string), string developerWebsite = default(string))
        {
            this.ApiApplicationLogoUrl = apiApplicationLogoUrl;
            this.ApplicationDescription = applicationDescription;
            this.ApplicationName = applicationName;
            this.DeveloperName = developerName;
            this.DeveloperWebsite = developerWebsite;
        }

        /// <summary>
        /// Application logo URL
        /// </summary>
        /// <value>Application logo URL</value>
        [DataMember(Name="api_application_logo_url", EmitDefaultValue=false)]
        public string ApiApplicationLogoUrl { get; set; }

        /// <summary>
        /// Application description
        /// </summary>
        /// <value>Application description</value>
        [DataMember(Name="application_description", EmitDefaultValue=false)]
        public string ApplicationDescription { get; set; }

        /// <summary>
        /// Application name
        /// </summary>
        /// <value>Application name</value>
        [DataMember(Name="application_name", EmitDefaultValue=false)]
        public string ApplicationName { get; set; }

        /// <summary>
        /// Developer name
        /// </summary>
        /// <value>Developer name</value>
        [DataMember(Name="developer_name", EmitDefaultValue=false)]
        public string DeveloperName { get; set; }

        /// <summary>
        /// Developer website
        /// </summary>
        /// <value>Developer website</value>
        [DataMember(Name="developer_website", EmitDefaultValue=false)]
        public string DeveloperWebsite { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ApiUserApplicationProfile {\n");
            sb.Append("  ApiApplicationLogoUrl: ").Append(ApiApplicationLogoUrl).Append("\n");
            sb.Append("  ApplicationDescription: ").Append(ApplicationDescription).Append("\n");
            sb.Append("  ApplicationName: ").Append(ApplicationName).Append("\n");
            sb.Append("  DeveloperName: ").Append(DeveloperName).Append("\n");
            sb.Append("  DeveloperWebsite: ").Append(DeveloperWebsite).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ApiUserApplicationProfile);
        }

        /// <summary>
        /// Returns true if ApiUserApplicationProfile instances are equal
        /// </summary>
        /// <param name="input">Instance of ApiUserApplicationProfile to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ApiUserApplicationProfile input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ApiApplicationLogoUrl == input.ApiApplicationLogoUrl ||
                    (this.ApiApplicationLogoUrl != null &&
                    this.ApiApplicationLogoUrl.Equals(input.ApiApplicationLogoUrl))
                ) && 
                (
                    this.ApplicationDescription == input.ApplicationDescription ||
                    (this.ApplicationDescription != null &&
                    this.ApplicationDescription.Equals(input.ApplicationDescription))
                ) && 
                (
                    this.ApplicationName == input.ApplicationName ||
                    (this.ApplicationName != null &&
                    this.ApplicationName.Equals(input.ApplicationName))
                ) && 
                (
                    this.DeveloperName == input.DeveloperName ||
                    (this.DeveloperName != null &&
                    this.DeveloperName.Equals(input.DeveloperName))
                ) && 
                (
                    this.DeveloperWebsite == input.DeveloperWebsite ||
                    (this.DeveloperWebsite != null &&
                    this.DeveloperWebsite.Equals(input.DeveloperWebsite))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ApiApplicationLogoUrl != null)
                    hashCode = hashCode * 59 + this.ApiApplicationLogoUrl.GetHashCode();
                if (this.ApplicationDescription != null)
                    hashCode = hashCode * 59 + this.ApplicationDescription.GetHashCode();
                if (this.ApplicationName != null)
                    hashCode = hashCode * 59 + this.ApplicationName.GetHashCode();
                if (this.DeveloperName != null)
                    hashCode = hashCode * 59 + this.DeveloperName.GetHashCode();
                if (this.DeveloperWebsite != null)
                    hashCode = hashCode * 59 + this.DeveloperWebsite.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
