/* 
 * UltraCart Rest API V2
 *
 * UltraCart REST API Version 2
 *
 * OpenAPI spec version: 2.0.0
 * Contact: support@ultracart.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = com.ultracart.admin.v2.Client.SwaggerDateConverter;

namespace com.ultracart.admin.v2.Model
{
    /// <summary>
    /// ApplyLibraryItemResponse
    /// </summary>
    [DataContract]
    public partial class ApplyLibraryItemResponse :  IEquatable<ApplyLibraryItemResponse>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ApplyLibraryItemResponse" /> class.
        /// </summary>
        /// <param name="cjson">Cjson from library item, only populated if this library item was a cjson snippet.</param>
        /// <param name="contentType">flow, campaign, cjson, or upsell.</param>
        /// <param name="error">error.</param>
        /// <param name="metadata">metadata.</param>
        /// <param name="storefrontOid">StoreFront oid where content originates necessary for tracking down relative assets.</param>
        /// <param name="success">Indicates if API call was successful.</param>
        /// <param name="title">title of library item, usually the name of the flow or campaign, or description of cjson.</param>
        /// <param name="uuid">UUID of communication flow or campaign if this library item was a campaign or flow.</param>
        public ApplyLibraryItemResponse(string cjson = default(string), string contentType = default(string), Error error = default(Error), ResponseMetadata metadata = default(ResponseMetadata), int? storefrontOid = default(int?), bool? success = default(bool?), string title = default(string), string uuid = default(string))
        {
            this.Cjson = cjson;
            this.ContentType = contentType;
            this.Error = error;
            this.Metadata = metadata;
            this.StorefrontOid = storefrontOid;
            this.Success = success;
            this.Title = title;
            this.Uuid = uuid;
        }
        
        /// <summary>
        /// Cjson from library item, only populated if this library item was a cjson snippet
        /// </summary>
        /// <value>Cjson from library item, only populated if this library item was a cjson snippet</value>
        [DataMember(Name="cjson", EmitDefaultValue=false)]
        public string Cjson { get; set; }

        /// <summary>
        /// flow, campaign, cjson, or upsell
        /// </summary>
        /// <value>flow, campaign, cjson, or upsell</value>
        [DataMember(Name="content_type", EmitDefaultValue=false)]
        public string ContentType { get; set; }

        /// <summary>
        /// Gets or Sets Error
        /// </summary>
        [DataMember(Name="error", EmitDefaultValue=false)]
        public Error Error { get; set; }

        /// <summary>
        /// Gets or Sets Metadata
        /// </summary>
        [DataMember(Name="metadata", EmitDefaultValue=false)]
        public ResponseMetadata Metadata { get; set; }

        /// <summary>
        /// StoreFront oid where content originates necessary for tracking down relative assets
        /// </summary>
        /// <value>StoreFront oid where content originates necessary for tracking down relative assets</value>
        [DataMember(Name="storefront_oid", EmitDefaultValue=false)]
        public int? StorefrontOid { get; set; }

        /// <summary>
        /// Indicates if API call was successful
        /// </summary>
        /// <value>Indicates if API call was successful</value>
        [DataMember(Name="success", EmitDefaultValue=false)]
        public bool? Success { get; set; }

        /// <summary>
        /// title of library item, usually the name of the flow or campaign, or description of cjson
        /// </summary>
        /// <value>title of library item, usually the name of the flow or campaign, or description of cjson</value>
        [DataMember(Name="title", EmitDefaultValue=false)]
        public string Title { get; set; }

        /// <summary>
        /// UUID of communication flow or campaign if this library item was a campaign or flow
        /// </summary>
        /// <value>UUID of communication flow or campaign if this library item was a campaign or flow</value>
        [DataMember(Name="uuid", EmitDefaultValue=false)]
        public string Uuid { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ApplyLibraryItemResponse {\n");
            sb.Append("  Cjson: ").Append(Cjson).Append("\n");
            sb.Append("  ContentType: ").Append(ContentType).Append("\n");
            sb.Append("  Error: ").Append(Error).Append("\n");
            sb.Append("  Metadata: ").Append(Metadata).Append("\n");
            sb.Append("  StorefrontOid: ").Append(StorefrontOid).Append("\n");
            sb.Append("  Success: ").Append(Success).Append("\n");
            sb.Append("  Title: ").Append(Title).Append("\n");
            sb.Append("  Uuid: ").Append(Uuid).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ApplyLibraryItemResponse);
        }

        /// <summary>
        /// Returns true if ApplyLibraryItemResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of ApplyLibraryItemResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ApplyLibraryItemResponse input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Cjson == input.Cjson ||
                    (this.Cjson != null &&
                    this.Cjson.Equals(input.Cjson))
                ) && 
                (
                    this.ContentType == input.ContentType ||
                    (this.ContentType != null &&
                    this.ContentType.Equals(input.ContentType))
                ) && 
                (
                    this.Error == input.Error ||
                    (this.Error != null &&
                    this.Error.Equals(input.Error))
                ) && 
                (
                    this.Metadata == input.Metadata ||
                    (this.Metadata != null &&
                    this.Metadata.Equals(input.Metadata))
                ) && 
                (
                    this.StorefrontOid == input.StorefrontOid ||
                    (this.StorefrontOid != null &&
                    this.StorefrontOid.Equals(input.StorefrontOid))
                ) && 
                (
                    this.Success == input.Success ||
                    (this.Success != null &&
                    this.Success.Equals(input.Success))
                ) && 
                (
                    this.Title == input.Title ||
                    (this.Title != null &&
                    this.Title.Equals(input.Title))
                ) && 
                (
                    this.Uuid == input.Uuid ||
                    (this.Uuid != null &&
                    this.Uuid.Equals(input.Uuid))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Cjson != null)
                    hashCode = hashCode * 59 + this.Cjson.GetHashCode();
                if (this.ContentType != null)
                    hashCode = hashCode * 59 + this.ContentType.GetHashCode();
                if (this.Error != null)
                    hashCode = hashCode * 59 + this.Error.GetHashCode();
                if (this.Metadata != null)
                    hashCode = hashCode * 59 + this.Metadata.GetHashCode();
                if (this.StorefrontOid != null)
                    hashCode = hashCode * 59 + this.StorefrontOid.GetHashCode();
                if (this.Success != null)
                    hashCode = hashCode * 59 + this.Success.GetHashCode();
                if (this.Title != null)
                    hashCode = hashCode * 59 + this.Title.GetHashCode();
                if (this.Uuid != null)
                    hashCode = hashCode * 59 + this.Uuid.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
