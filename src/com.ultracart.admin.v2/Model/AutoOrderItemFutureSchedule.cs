/* 
 * UltraCart Rest API V2
 *
 * UltraCart REST API Version 2
 *
 * OpenAPI spec version: 2.0.0
 * Contact: support@ultracart.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = com.ultracart.admin.v2.Client.SwaggerDateConverter;

namespace com.ultracart.admin.v2.Model
{
    /// <summary>
    /// AutoOrderItemFutureSchedule
    /// </summary>
    [DataContract]
    public partial class AutoOrderItemFutureSchedule :  IEquatable<AutoOrderItemFutureSchedule>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AutoOrderItemFutureSchedule" /> class.
        /// </summary>
        /// <param name="ItemId">Item ID that should rebill.</param>
        /// <param name="RebillCount">The number of times this rebill represents.</param>
        /// <param name="ShipmentDts">Date/time that this item is scheduled to rebill.</param>
        /// <param name="UnitCost">The unit cost of the item rebilling.</param>
        public AutoOrderItemFutureSchedule(string ItemId = default(string), int? RebillCount = default(int?), string ShipmentDts = default(string), decimal? UnitCost = default(decimal?))
        {
            this.ItemId = ItemId;
            this.RebillCount = RebillCount;
            this.ShipmentDts = ShipmentDts;
            this.UnitCost = UnitCost;
        }
        
        /// <summary>
        /// Item ID that should rebill
        /// </summary>
        /// <value>Item ID that should rebill</value>
        [DataMember(Name="item_id", EmitDefaultValue=false)]
        public string ItemId { get; set; }

        /// <summary>
        /// The number of times this rebill represents
        /// </summary>
        /// <value>The number of times this rebill represents</value>
        [DataMember(Name="rebill_count", EmitDefaultValue=false)]
        public int? RebillCount { get; set; }

        /// <summary>
        /// Date/time that this item is scheduled to rebill
        /// </summary>
        /// <value>Date/time that this item is scheduled to rebill</value>
        [DataMember(Name="shipment_dts", EmitDefaultValue=false)]
        public string ShipmentDts { get; set; }

        /// <summary>
        /// The unit cost of the item rebilling
        /// </summary>
        /// <value>The unit cost of the item rebilling</value>
        [DataMember(Name="unit_cost", EmitDefaultValue=false)]
        public decimal? UnitCost { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AutoOrderItemFutureSchedule {\n");
            sb.Append("  ItemId: ").Append(ItemId).Append("\n");
            sb.Append("  RebillCount: ").Append(RebillCount).Append("\n");
            sb.Append("  ShipmentDts: ").Append(ShipmentDts).Append("\n");
            sb.Append("  UnitCost: ").Append(UnitCost).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AutoOrderItemFutureSchedule);
        }

        /// <summary>
        /// Returns true if AutoOrderItemFutureSchedule instances are equal
        /// </summary>
        /// <param name="input">Instance of AutoOrderItemFutureSchedule to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AutoOrderItemFutureSchedule input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ItemId == input.ItemId ||
                    (this.ItemId != null &&
                    this.ItemId.Equals(input.ItemId))
                ) && 
                (
                    this.RebillCount == input.RebillCount ||
                    (this.RebillCount != null &&
                    this.RebillCount.Equals(input.RebillCount))
                ) && 
                (
                    this.ShipmentDts == input.ShipmentDts ||
                    (this.ShipmentDts != null &&
                    this.ShipmentDts.Equals(input.ShipmentDts))
                ) && 
                (
                    this.UnitCost == input.UnitCost ||
                    (this.UnitCost != null &&
                    this.UnitCost.Equals(input.UnitCost))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ItemId != null)
                    hashCode = hashCode * 59 + this.ItemId.GetHashCode();
                if (this.RebillCount != null)
                    hashCode = hashCode * 59 + this.RebillCount.GetHashCode();
                if (this.ShipmentDts != null)
                    hashCode = hashCode * 59 + this.ShipmentDts.GetHashCode();
                if (this.UnitCost != null)
                    hashCode = hashCode * 59 + this.UnitCost.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
