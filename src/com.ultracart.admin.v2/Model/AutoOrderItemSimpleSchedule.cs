/* 
 * UltraCart Rest API V2
 *
 * UltraCart REST API Version 2
 *
 * OpenAPI spec version: 2.0.0
 * Contact: support@ultracart.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = com.ultracart.admin.v2.Client.SwaggerDateConverter;

namespace com.ultracart.admin.v2.Model
{
    /// <summary>
    /// AutoOrderItemSimpleSchedule
    /// </summary>
    [DataContract]
    public partial class AutoOrderItemSimpleSchedule :  IEquatable<AutoOrderItemSimpleSchedule>, IValidatableObject
    {
        /// <summary>
        /// Frequency of the rebill if not a fixed schedule
        /// </summary>
        /// <value>Frequency of the rebill if not a fixed schedule</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum FrequencyEnum
        {
            
            /// <summary>
            /// Enum Weekly for value: Weekly
            /// </summary>
            [EnumMember(Value = "Weekly")]
            Weekly = 1,
            
            /// <summary>
            /// Enum Biweekly for value: Biweekly
            /// </summary>
            [EnumMember(Value = "Biweekly")]
            Biweekly = 2,
            
            /// <summary>
            /// Enum Every for value: Every...
            /// </summary>
            [EnumMember(Value = "Every...")]
            Every = 3,
            
            /// <summary>
            /// Enum Every10Days for value: Every 10 Days
            /// </summary>
            [EnumMember(Value = "Every 10 Days")]
            Every10Days = 4,
            
            /// <summary>
            /// Enum Every24Days for value: Every 24 Days
            /// </summary>
            [EnumMember(Value = "Every 24 Days")]
            Every24Days = 5,
            
            /// <summary>
            /// Enum Every28Days for value: Every 28 Days
            /// </summary>
            [EnumMember(Value = "Every 28 Days")]
            Every28Days = 6,
            
            /// <summary>
            /// Enum Monthly for value: Monthly
            /// </summary>
            [EnumMember(Value = "Monthly")]
            Monthly = 7,
            
            /// <summary>
            /// Enum Every45Days for value: Every 45 Days
            /// </summary>
            [EnumMember(Value = "Every 45 Days")]
            Every45Days = 8,
            
            /// <summary>
            /// Enum Every2Months for value: Every 2 Months
            /// </summary>
            [EnumMember(Value = "Every 2 Months")]
            Every2Months = 9,
            
            /// <summary>
            /// Enum Every3Months for value: Every 3 Months
            /// </summary>
            [EnumMember(Value = "Every 3 Months")]
            Every3Months = 10,
            
            /// <summary>
            /// Enum Every4Months for value: Every 4 Months
            /// </summary>
            [EnumMember(Value = "Every 4 Months")]
            Every4Months = 11,
            
            /// <summary>
            /// Enum Every5Months for value: Every 5 Months
            /// </summary>
            [EnumMember(Value = "Every 5 Months")]
            Every5Months = 12,
            
            /// <summary>
            /// Enum Every6Months for value: Every 6 Months
            /// </summary>
            [EnumMember(Value = "Every 6 Months")]
            Every6Months = 13,
            
            /// <summary>
            /// Enum Yearly for value: Yearly
            /// </summary>
            [EnumMember(Value = "Yearly")]
            Yearly = 14,
            
            /// <summary>
            /// Enum Every4Weeks for value: Every 4 Weeks
            /// </summary>
            [EnumMember(Value = "Every 4 Weeks")]
            Every4Weeks = 15,
            
            /// <summary>
            /// Enum Every6Weeks for value: Every 6 Weeks
            /// </summary>
            [EnumMember(Value = "Every 6 Weeks")]
            Every6Weeks = 16,
            
            /// <summary>
            /// Enum Every8Weeks for value: Every 8 Weeks
            /// </summary>
            [EnumMember(Value = "Every 8 Weeks")]
            Every8Weeks = 17
        }

        /// <summary>
        /// Frequency of the rebill if not a fixed schedule
        /// </summary>
        /// <value>Frequency of the rebill if not a fixed schedule</value>
        [DataMember(Name="frequency", EmitDefaultValue=false)]
        public FrequencyEnum? Frequency { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="AutoOrderItemSimpleSchedule" /> class.
        /// </summary>
        /// <param name="frequency">Frequency of the rebill if not a fixed schedule.</param>
        /// <param name="itemId">Item ID that should rebill.</param>
        /// <param name="repeatCount">The number of times this simple schedule is configured for.</param>
        public AutoOrderItemSimpleSchedule(FrequencyEnum? frequency = default(FrequencyEnum?), string itemId = default(string), int? repeatCount = default(int?))
        {
            this.Frequency = frequency;
            this.ItemId = itemId;
            this.RepeatCount = repeatCount;
        }
        

        /// <summary>
        /// Item ID that should rebill
        /// </summary>
        /// <value>Item ID that should rebill</value>
        [DataMember(Name="item_id", EmitDefaultValue=false)]
        public string ItemId { get; set; }

        /// <summary>
        /// The number of times this simple schedule is configured for
        /// </summary>
        /// <value>The number of times this simple schedule is configured for</value>
        [DataMember(Name="repeat_count", EmitDefaultValue=false)]
        public int? RepeatCount { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AutoOrderItemSimpleSchedule {\n");
            sb.Append("  Frequency: ").Append(Frequency).Append("\n");
            sb.Append("  ItemId: ").Append(ItemId).Append("\n");
            sb.Append("  RepeatCount: ").Append(RepeatCount).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AutoOrderItemSimpleSchedule);
        }

        /// <summary>
        /// Returns true if AutoOrderItemSimpleSchedule instances are equal
        /// </summary>
        /// <param name="input">Instance of AutoOrderItemSimpleSchedule to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AutoOrderItemSimpleSchedule input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Frequency == input.Frequency ||
                    (this.Frequency != null &&
                    this.Frequency.Equals(input.Frequency))
                ) && 
                (
                    this.ItemId == input.ItemId ||
                    (this.ItemId != null &&
                    this.ItemId.Equals(input.ItemId))
                ) && 
                (
                    this.RepeatCount == input.RepeatCount ||
                    (this.RepeatCount != null &&
                    this.RepeatCount.Equals(input.RepeatCount))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Frequency != null)
                    hashCode = hashCode * 59 + this.Frequency.GetHashCode();
                if (this.ItemId != null)
                    hashCode = hashCode * 59 + this.ItemId.GetHashCode();
                if (this.RepeatCount != null)
                    hashCode = hashCode * 59 + this.RepeatCount.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
