/* 
 * UltraCart Rest API V2
 *
 * UltraCart REST API Version 2
 *
 * OpenAPI spec version: 2.0.0
 * Contact: support@ultracart.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = com.ultracart.admin.v2.Client.SwaggerDateConverter;

namespace com.ultracart.admin.v2.Model
{
    /// <summary>
    /// AutoOrderQuery
    /// </summary>
    [DataContract]
    public partial class AutoOrderQuery :  IEquatable<AutoOrderQuery>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AutoOrderQuery" /> class.
        /// </summary>
        /// <param name="AutoOrderCode">Auto order code.</param>
        /// <param name="CardType">Card type.</param>
        /// <param name="City">City.</param>
        /// <param name="Company">Company.</param>
        /// <param name="CountryCode">ISO-3166 two letter country code.</param>
        /// <param name="CustomerProfileOid">Customer profile object identifier.</param>
        /// <param name="Email">Email.</param>
        /// <param name="FirstName">First name.</param>
        /// <param name="ItemId">Item ID.</param>
        /// <param name="LastName">Last name.</param>
        /// <param name="NextShipmentDateBegin">Next shipment date begin.</param>
        /// <param name="NextShipmentDateEnd">Next shipment date end.</param>
        /// <param name="OriginalOrderDateBegin">Original order date begin.</param>
        /// <param name="OriginalOrderDateEnd">Original order date end.</param>
        /// <param name="OriginalOrderId">Original order ID.</param>
        /// <param name="Phone">Phone.</param>
        /// <param name="PostalCode">Postal code.</param>
        /// <param name="State">State.</param>
        /// <param name="Status">Status.</param>
        public AutoOrderQuery(string AutoOrderCode = default(string), string CardType = default(string), string City = default(string), string Company = default(string), string CountryCode = default(string), int? CustomerProfileOid = default(int?), string Email = default(string), string FirstName = default(string), string ItemId = default(string), string LastName = default(string), string NextShipmentDateBegin = default(string), string NextShipmentDateEnd = default(string), string OriginalOrderDateBegin = default(string), string OriginalOrderDateEnd = default(string), string OriginalOrderId = default(string), string Phone = default(string), string PostalCode = default(string), string State = default(string), string Status = default(string))
        {
            this.AutoOrderCode = AutoOrderCode;
            this.CardType = CardType;
            this.City = City;
            this.Company = Company;
            this.CountryCode = CountryCode;
            this.CustomerProfileOid = CustomerProfileOid;
            this.Email = Email;
            this.FirstName = FirstName;
            this.ItemId = ItemId;
            this.LastName = LastName;
            this.NextShipmentDateBegin = NextShipmentDateBegin;
            this.NextShipmentDateEnd = NextShipmentDateEnd;
            this.OriginalOrderDateBegin = OriginalOrderDateBegin;
            this.OriginalOrderDateEnd = OriginalOrderDateEnd;
            this.OriginalOrderId = OriginalOrderId;
            this.Phone = Phone;
            this.PostalCode = PostalCode;
            this.State = State;
            this.Status = Status;
        }
        
        /// <summary>
        /// Auto order code
        /// </summary>
        /// <value>Auto order code</value>
        [DataMember(Name="auto_order_code", EmitDefaultValue=false)]
        public string AutoOrderCode { get; set; }

        /// <summary>
        /// Card type
        /// </summary>
        /// <value>Card type</value>
        [DataMember(Name="card_type", EmitDefaultValue=false)]
        public string CardType { get; set; }

        /// <summary>
        /// City
        /// </summary>
        /// <value>City</value>
        [DataMember(Name="city", EmitDefaultValue=false)]
        public string City { get; set; }

        /// <summary>
        /// Company
        /// </summary>
        /// <value>Company</value>
        [DataMember(Name="company", EmitDefaultValue=false)]
        public string Company { get; set; }

        /// <summary>
        /// ISO-3166 two letter country code
        /// </summary>
        /// <value>ISO-3166 two letter country code</value>
        [DataMember(Name="country_code", EmitDefaultValue=false)]
        public string CountryCode { get; set; }

        /// <summary>
        /// Customer profile object identifier
        /// </summary>
        /// <value>Customer profile object identifier</value>
        [DataMember(Name="customer_profile_oid", EmitDefaultValue=false)]
        public int? CustomerProfileOid { get; set; }

        /// <summary>
        /// Email
        /// </summary>
        /// <value>Email</value>
        [DataMember(Name="email", EmitDefaultValue=false)]
        public string Email { get; set; }

        /// <summary>
        /// First name
        /// </summary>
        /// <value>First name</value>
        [DataMember(Name="first_name", EmitDefaultValue=false)]
        public string FirstName { get; set; }

        /// <summary>
        /// Item ID
        /// </summary>
        /// <value>Item ID</value>
        [DataMember(Name="item_id", EmitDefaultValue=false)]
        public string ItemId { get; set; }

        /// <summary>
        /// Last name
        /// </summary>
        /// <value>Last name</value>
        [DataMember(Name="last_name", EmitDefaultValue=false)]
        public string LastName { get; set; }

        /// <summary>
        /// Next shipment date begin
        /// </summary>
        /// <value>Next shipment date begin</value>
        [DataMember(Name="next_shipment_date_begin", EmitDefaultValue=false)]
        public string NextShipmentDateBegin { get; set; }

        /// <summary>
        /// Next shipment date end
        /// </summary>
        /// <value>Next shipment date end</value>
        [DataMember(Name="next_shipment_date_end", EmitDefaultValue=false)]
        public string NextShipmentDateEnd { get; set; }

        /// <summary>
        /// Original order date begin
        /// </summary>
        /// <value>Original order date begin</value>
        [DataMember(Name="original_order_date_begin", EmitDefaultValue=false)]
        public string OriginalOrderDateBegin { get; set; }

        /// <summary>
        /// Original order date end
        /// </summary>
        /// <value>Original order date end</value>
        [DataMember(Name="original_order_date_end", EmitDefaultValue=false)]
        public string OriginalOrderDateEnd { get; set; }

        /// <summary>
        /// Original order ID
        /// </summary>
        /// <value>Original order ID</value>
        [DataMember(Name="original_order_id", EmitDefaultValue=false)]
        public string OriginalOrderId { get; set; }

        /// <summary>
        /// Phone
        /// </summary>
        /// <value>Phone</value>
        [DataMember(Name="phone", EmitDefaultValue=false)]
        public string Phone { get; set; }

        /// <summary>
        /// Postal code
        /// </summary>
        /// <value>Postal code</value>
        [DataMember(Name="postal_code", EmitDefaultValue=false)]
        public string PostalCode { get; set; }

        /// <summary>
        /// State
        /// </summary>
        /// <value>State</value>
        [DataMember(Name="state", EmitDefaultValue=false)]
        public string State { get; set; }

        /// <summary>
        /// Status
        /// </summary>
        /// <value>Status</value>
        [DataMember(Name="status", EmitDefaultValue=false)]
        public string Status { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AutoOrderQuery {\n");
            sb.Append("  AutoOrderCode: ").Append(AutoOrderCode).Append("\n");
            sb.Append("  CardType: ").Append(CardType).Append("\n");
            sb.Append("  City: ").Append(City).Append("\n");
            sb.Append("  Company: ").Append(Company).Append("\n");
            sb.Append("  CountryCode: ").Append(CountryCode).Append("\n");
            sb.Append("  CustomerProfileOid: ").Append(CustomerProfileOid).Append("\n");
            sb.Append("  Email: ").Append(Email).Append("\n");
            sb.Append("  FirstName: ").Append(FirstName).Append("\n");
            sb.Append("  ItemId: ").Append(ItemId).Append("\n");
            sb.Append("  LastName: ").Append(LastName).Append("\n");
            sb.Append("  NextShipmentDateBegin: ").Append(NextShipmentDateBegin).Append("\n");
            sb.Append("  NextShipmentDateEnd: ").Append(NextShipmentDateEnd).Append("\n");
            sb.Append("  OriginalOrderDateBegin: ").Append(OriginalOrderDateBegin).Append("\n");
            sb.Append("  OriginalOrderDateEnd: ").Append(OriginalOrderDateEnd).Append("\n");
            sb.Append("  OriginalOrderId: ").Append(OriginalOrderId).Append("\n");
            sb.Append("  Phone: ").Append(Phone).Append("\n");
            sb.Append("  PostalCode: ").Append(PostalCode).Append("\n");
            sb.Append("  State: ").Append(State).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AutoOrderQuery);
        }

        /// <summary>
        /// Returns true if AutoOrderQuery instances are equal
        /// </summary>
        /// <param name="input">Instance of AutoOrderQuery to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AutoOrderQuery input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.AutoOrderCode == input.AutoOrderCode ||
                    (this.AutoOrderCode != null &&
                    this.AutoOrderCode.Equals(input.AutoOrderCode))
                ) && 
                (
                    this.CardType == input.CardType ||
                    (this.CardType != null &&
                    this.CardType.Equals(input.CardType))
                ) && 
                (
                    this.City == input.City ||
                    (this.City != null &&
                    this.City.Equals(input.City))
                ) && 
                (
                    this.Company == input.Company ||
                    (this.Company != null &&
                    this.Company.Equals(input.Company))
                ) && 
                (
                    this.CountryCode == input.CountryCode ||
                    (this.CountryCode != null &&
                    this.CountryCode.Equals(input.CountryCode))
                ) && 
                (
                    this.CustomerProfileOid == input.CustomerProfileOid ||
                    (this.CustomerProfileOid != null &&
                    this.CustomerProfileOid.Equals(input.CustomerProfileOid))
                ) && 
                (
                    this.Email == input.Email ||
                    (this.Email != null &&
                    this.Email.Equals(input.Email))
                ) && 
                (
                    this.FirstName == input.FirstName ||
                    (this.FirstName != null &&
                    this.FirstName.Equals(input.FirstName))
                ) && 
                (
                    this.ItemId == input.ItemId ||
                    (this.ItemId != null &&
                    this.ItemId.Equals(input.ItemId))
                ) && 
                (
                    this.LastName == input.LastName ||
                    (this.LastName != null &&
                    this.LastName.Equals(input.LastName))
                ) && 
                (
                    this.NextShipmentDateBegin == input.NextShipmentDateBegin ||
                    (this.NextShipmentDateBegin != null &&
                    this.NextShipmentDateBegin.Equals(input.NextShipmentDateBegin))
                ) && 
                (
                    this.NextShipmentDateEnd == input.NextShipmentDateEnd ||
                    (this.NextShipmentDateEnd != null &&
                    this.NextShipmentDateEnd.Equals(input.NextShipmentDateEnd))
                ) && 
                (
                    this.OriginalOrderDateBegin == input.OriginalOrderDateBegin ||
                    (this.OriginalOrderDateBegin != null &&
                    this.OriginalOrderDateBegin.Equals(input.OriginalOrderDateBegin))
                ) && 
                (
                    this.OriginalOrderDateEnd == input.OriginalOrderDateEnd ||
                    (this.OriginalOrderDateEnd != null &&
                    this.OriginalOrderDateEnd.Equals(input.OriginalOrderDateEnd))
                ) && 
                (
                    this.OriginalOrderId == input.OriginalOrderId ||
                    (this.OriginalOrderId != null &&
                    this.OriginalOrderId.Equals(input.OriginalOrderId))
                ) && 
                (
                    this.Phone == input.Phone ||
                    (this.Phone != null &&
                    this.Phone.Equals(input.Phone))
                ) && 
                (
                    this.PostalCode == input.PostalCode ||
                    (this.PostalCode != null &&
                    this.PostalCode.Equals(input.PostalCode))
                ) && 
                (
                    this.State == input.State ||
                    (this.State != null &&
                    this.State.Equals(input.State))
                ) && 
                (
                    this.Status == input.Status ||
                    (this.Status != null &&
                    this.Status.Equals(input.Status))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AutoOrderCode != null)
                    hashCode = hashCode * 59 + this.AutoOrderCode.GetHashCode();
                if (this.CardType != null)
                    hashCode = hashCode * 59 + this.CardType.GetHashCode();
                if (this.City != null)
                    hashCode = hashCode * 59 + this.City.GetHashCode();
                if (this.Company != null)
                    hashCode = hashCode * 59 + this.Company.GetHashCode();
                if (this.CountryCode != null)
                    hashCode = hashCode * 59 + this.CountryCode.GetHashCode();
                if (this.CustomerProfileOid != null)
                    hashCode = hashCode * 59 + this.CustomerProfileOid.GetHashCode();
                if (this.Email != null)
                    hashCode = hashCode * 59 + this.Email.GetHashCode();
                if (this.FirstName != null)
                    hashCode = hashCode * 59 + this.FirstName.GetHashCode();
                if (this.ItemId != null)
                    hashCode = hashCode * 59 + this.ItemId.GetHashCode();
                if (this.LastName != null)
                    hashCode = hashCode * 59 + this.LastName.GetHashCode();
                if (this.NextShipmentDateBegin != null)
                    hashCode = hashCode * 59 + this.NextShipmentDateBegin.GetHashCode();
                if (this.NextShipmentDateEnd != null)
                    hashCode = hashCode * 59 + this.NextShipmentDateEnd.GetHashCode();
                if (this.OriginalOrderDateBegin != null)
                    hashCode = hashCode * 59 + this.OriginalOrderDateBegin.GetHashCode();
                if (this.OriginalOrderDateEnd != null)
                    hashCode = hashCode * 59 + this.OriginalOrderDateEnd.GetHashCode();
                if (this.OriginalOrderId != null)
                    hashCode = hashCode * 59 + this.OriginalOrderId.GetHashCode();
                if (this.Phone != null)
                    hashCode = hashCode * 59 + this.Phone.GetHashCode();
                if (this.PostalCode != null)
                    hashCode = hashCode * 59 + this.PostalCode.GetHashCode();
                if (this.State != null)
                    hashCode = hashCode * 59 + this.State.GetHashCode();
                if (this.Status != null)
                    hashCode = hashCode * 59 + this.Status.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // CardType (string) maxLength
            if(this.CardType != null && this.CardType.Length > 100)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for CardType, length must be less than 100.", new [] { "CardType" });
            }

            // CountryCode (string) maxLength
            if(this.CountryCode != null && this.CountryCode.Length > 2)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for CountryCode, length must be less than 2.", new [] { "CountryCode" });
            }

            // Email (string) maxLength
            if(this.Email != null && this.Email.Length > 100)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Email, length must be less than 100.", new [] { "Email" });
            }

            // Phone (string) maxLength
            if(this.Phone != null && this.Phone.Length > 25)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Phone, length must be less than 25.", new [] { "Phone" });
            }

            yield break;
        }
    }

}
