/* 
 * UltraCart Rest API V2
 *
 * UltraCart REST API Version 2
 *
 * OpenAPI spec version: 2.0.0
 * Contact: support@ultracart.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = com.ultracart.admin.v2.Client.SwaggerDateConverter;

namespace com.ultracart.admin.v2.Model
{
    /// <summary>
    /// AvalaraConfig
    /// </summary>
    [DataContract]
    public partial class AvalaraConfig :  IEquatable<AvalaraConfig>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AvalaraConfig" /> class.
        /// </summary>
        /// <param name="AccountId">Avalara account ID.</param>
        /// <param name="Active">True if Avalara is active for this merchant.</param>
        /// <param name="AvalaraOid">Unique identifier for this avalara config object.</param>
        /// <param name="CompanyId">Avalara company ID.</param>
        /// <param name="EnableUpc">True if this Avalara configuration is set to enable tax valuation by UPC.</param>
        /// <param name="EstimateOnly">True if this Avalara configuration is to estimate taxes only and not report placed orders to Avalara.</param>
        /// <param name="GuestCustomerCode">Optional customer code for customers without profiles, defaults to GuestCustomer.</param>
        /// <param name="LastTestDts">Date/time of the connection test to Avalara.</param>
        /// <param name="LicenseKey">Avalara license key.</param>
        /// <param name="Sandbox">True if this Avalara instance is pointed at the Avalara Sandbox.</param>
        /// <param name="SendTestOrders">Send test orders through to Avalara.  The default is to not transmit test orders to Avalara..</param>
        /// <param name="ServiceUrl">Avalara service URL.</param>
        /// <param name="TestResults">Test results of the last connection test to Avalara.</param>
        public AvalaraConfig(string AccountId = default(string), bool? Active = default(bool?), int? AvalaraOid = default(int?), string CompanyId = default(string), bool? EnableUpc = default(bool?), bool? EstimateOnly = default(bool?), string GuestCustomerCode = default(string), string LastTestDts = default(string), string LicenseKey = default(string), bool? Sandbox = default(bool?), bool? SendTestOrders = default(bool?), string ServiceUrl = default(string), string TestResults = default(string))
        {
            this.AccountId = AccountId;
            this.Active = Active;
            this.AvalaraOid = AvalaraOid;
            this.CompanyId = CompanyId;
            this.EnableUpc = EnableUpc;
            this.EstimateOnly = EstimateOnly;
            this.GuestCustomerCode = GuestCustomerCode;
            this.LastTestDts = LastTestDts;
            this.LicenseKey = LicenseKey;
            this.Sandbox = Sandbox;
            this.SendTestOrders = SendTestOrders;
            this.ServiceUrl = ServiceUrl;
            this.TestResults = TestResults;
        }
        
        /// <summary>
        /// Avalara account ID
        /// </summary>
        /// <value>Avalara account ID</value>
        [DataMember(Name="account_id", EmitDefaultValue=false)]
        public string AccountId { get; set; }

        /// <summary>
        /// True if Avalara is active for this merchant
        /// </summary>
        /// <value>True if Avalara is active for this merchant</value>
        [DataMember(Name="active", EmitDefaultValue=false)]
        public bool? Active { get; set; }

        /// <summary>
        /// Unique identifier for this avalara config object
        /// </summary>
        /// <value>Unique identifier for this avalara config object</value>
        [DataMember(Name="avalara_oid", EmitDefaultValue=false)]
        public int? AvalaraOid { get; set; }

        /// <summary>
        /// Avalara company ID
        /// </summary>
        /// <value>Avalara company ID</value>
        [DataMember(Name="company_id", EmitDefaultValue=false)]
        public string CompanyId { get; set; }

        /// <summary>
        /// True if this Avalara configuration is set to enable tax valuation by UPC
        /// </summary>
        /// <value>True if this Avalara configuration is set to enable tax valuation by UPC</value>
        [DataMember(Name="enable_upc", EmitDefaultValue=false)]
        public bool? EnableUpc { get; set; }

        /// <summary>
        /// True if this Avalara configuration is to estimate taxes only and not report placed orders to Avalara
        /// </summary>
        /// <value>True if this Avalara configuration is to estimate taxes only and not report placed orders to Avalara</value>
        [DataMember(Name="estimate_only", EmitDefaultValue=false)]
        public bool? EstimateOnly { get; set; }

        /// <summary>
        /// Optional customer code for customers without profiles, defaults to GuestCustomer
        /// </summary>
        /// <value>Optional customer code for customers without profiles, defaults to GuestCustomer</value>
        [DataMember(Name="guest_customer_code", EmitDefaultValue=false)]
        public string GuestCustomerCode { get; set; }

        /// <summary>
        /// Date/time of the connection test to Avalara
        /// </summary>
        /// <value>Date/time of the connection test to Avalara</value>
        [DataMember(Name="last_test_dts", EmitDefaultValue=false)]
        public string LastTestDts { get; set; }

        /// <summary>
        /// Avalara license key
        /// </summary>
        /// <value>Avalara license key</value>
        [DataMember(Name="license_key", EmitDefaultValue=false)]
        public string LicenseKey { get; set; }

        /// <summary>
        /// True if this Avalara instance is pointed at the Avalara Sandbox
        /// </summary>
        /// <value>True if this Avalara instance is pointed at the Avalara Sandbox</value>
        [DataMember(Name="sandbox", EmitDefaultValue=false)]
        public bool? Sandbox { get; set; }

        /// <summary>
        /// Send test orders through to Avalara.  The default is to not transmit test orders to Avalara.
        /// </summary>
        /// <value>Send test orders through to Avalara.  The default is to not transmit test orders to Avalara.</value>
        [DataMember(Name="send_test_orders", EmitDefaultValue=false)]
        public bool? SendTestOrders { get; set; }

        /// <summary>
        /// Avalara service URL
        /// </summary>
        /// <value>Avalara service URL</value>
        [DataMember(Name="service_url", EmitDefaultValue=false)]
        public string ServiceUrl { get; set; }

        /// <summary>
        /// Test results of the last connection test to Avalara
        /// </summary>
        /// <value>Test results of the last connection test to Avalara</value>
        [DataMember(Name="test_results", EmitDefaultValue=false)]
        public string TestResults { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AvalaraConfig {\n");
            sb.Append("  AccountId: ").Append(AccountId).Append("\n");
            sb.Append("  Active: ").Append(Active).Append("\n");
            sb.Append("  AvalaraOid: ").Append(AvalaraOid).Append("\n");
            sb.Append("  CompanyId: ").Append(CompanyId).Append("\n");
            sb.Append("  EnableUpc: ").Append(EnableUpc).Append("\n");
            sb.Append("  EstimateOnly: ").Append(EstimateOnly).Append("\n");
            sb.Append("  GuestCustomerCode: ").Append(GuestCustomerCode).Append("\n");
            sb.Append("  LastTestDts: ").Append(LastTestDts).Append("\n");
            sb.Append("  LicenseKey: ").Append(LicenseKey).Append("\n");
            sb.Append("  Sandbox: ").Append(Sandbox).Append("\n");
            sb.Append("  SendTestOrders: ").Append(SendTestOrders).Append("\n");
            sb.Append("  ServiceUrl: ").Append(ServiceUrl).Append("\n");
            sb.Append("  TestResults: ").Append(TestResults).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AvalaraConfig);
        }

        /// <summary>
        /// Returns true if AvalaraConfig instances are equal
        /// </summary>
        /// <param name="input">Instance of AvalaraConfig to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AvalaraConfig input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.AccountId == input.AccountId ||
                    (this.AccountId != null &&
                    this.AccountId.Equals(input.AccountId))
                ) && 
                (
                    this.Active == input.Active ||
                    (this.Active != null &&
                    this.Active.Equals(input.Active))
                ) && 
                (
                    this.AvalaraOid == input.AvalaraOid ||
                    (this.AvalaraOid != null &&
                    this.AvalaraOid.Equals(input.AvalaraOid))
                ) && 
                (
                    this.CompanyId == input.CompanyId ||
                    (this.CompanyId != null &&
                    this.CompanyId.Equals(input.CompanyId))
                ) && 
                (
                    this.EnableUpc == input.EnableUpc ||
                    (this.EnableUpc != null &&
                    this.EnableUpc.Equals(input.EnableUpc))
                ) && 
                (
                    this.EstimateOnly == input.EstimateOnly ||
                    (this.EstimateOnly != null &&
                    this.EstimateOnly.Equals(input.EstimateOnly))
                ) && 
                (
                    this.GuestCustomerCode == input.GuestCustomerCode ||
                    (this.GuestCustomerCode != null &&
                    this.GuestCustomerCode.Equals(input.GuestCustomerCode))
                ) && 
                (
                    this.LastTestDts == input.LastTestDts ||
                    (this.LastTestDts != null &&
                    this.LastTestDts.Equals(input.LastTestDts))
                ) && 
                (
                    this.LicenseKey == input.LicenseKey ||
                    (this.LicenseKey != null &&
                    this.LicenseKey.Equals(input.LicenseKey))
                ) && 
                (
                    this.Sandbox == input.Sandbox ||
                    (this.Sandbox != null &&
                    this.Sandbox.Equals(input.Sandbox))
                ) && 
                (
                    this.SendTestOrders == input.SendTestOrders ||
                    (this.SendTestOrders != null &&
                    this.SendTestOrders.Equals(input.SendTestOrders))
                ) && 
                (
                    this.ServiceUrl == input.ServiceUrl ||
                    (this.ServiceUrl != null &&
                    this.ServiceUrl.Equals(input.ServiceUrl))
                ) && 
                (
                    this.TestResults == input.TestResults ||
                    (this.TestResults != null &&
                    this.TestResults.Equals(input.TestResults))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AccountId != null)
                    hashCode = hashCode * 59 + this.AccountId.GetHashCode();
                if (this.Active != null)
                    hashCode = hashCode * 59 + this.Active.GetHashCode();
                if (this.AvalaraOid != null)
                    hashCode = hashCode * 59 + this.AvalaraOid.GetHashCode();
                if (this.CompanyId != null)
                    hashCode = hashCode * 59 + this.CompanyId.GetHashCode();
                if (this.EnableUpc != null)
                    hashCode = hashCode * 59 + this.EnableUpc.GetHashCode();
                if (this.EstimateOnly != null)
                    hashCode = hashCode * 59 + this.EstimateOnly.GetHashCode();
                if (this.GuestCustomerCode != null)
                    hashCode = hashCode * 59 + this.GuestCustomerCode.GetHashCode();
                if (this.LastTestDts != null)
                    hashCode = hashCode * 59 + this.LastTestDts.GetHashCode();
                if (this.LicenseKey != null)
                    hashCode = hashCode * 59 + this.LicenseKey.GetHashCode();
                if (this.Sandbox != null)
                    hashCode = hashCode * 59 + this.Sandbox.GetHashCode();
                if (this.SendTestOrders != null)
                    hashCode = hashCode * 59 + this.SendTestOrders.GetHashCode();
                if (this.ServiceUrl != null)
                    hashCode = hashCode * 59 + this.ServiceUrl.GetHashCode();
                if (this.TestResults != null)
                    hashCode = hashCode * 59 + this.TestResults.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
