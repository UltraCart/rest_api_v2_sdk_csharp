/* 
 * UltraCart Rest API V2
 *
 * This is the next generation UltraCart REST API...
 *
 * OpenAPI spec version: 2.0.0
 * Contact: support@ultracart.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace com.ultracart.admin.v2.Model
{
    /// <summary>
    /// CartCustomerProfile
    /// </summary>
    [DataContract]
    public partial class CartCustomerProfile :  IEquatable<CartCustomerProfile>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CartCustomerProfile" /> class.
        /// </summary>
        /// <param name="Allow3rdPartyBilling">True if profile is allowed to bill to their 3rd party shipping account.</param>
        /// <param name="AllowCod">True if this profile is allowed to use a COD.</param>
        /// <param name="AllowPurchaseOrder">True if this profile is allowed to use a purchase order.</param>
        /// <param name="BillingAddresses">Billing addresses on file for this profile.</param>
        /// <param name="CreditCards">Credit cards on file for this profile (masked).</param>
        /// <param name="CustomerProfileOid">Unique identifier.</param>
        /// <param name="DhlAccountNumber">DHL account number on file.</param>
        /// <param name="Email">Email.</param>
        /// <param name="FedexAccountNumber">FedEx account number on file.</param>
        /// <param name="FreeShipping">True if this profile always qualifies for free shipping.</param>
        /// <param name="FreeShippingMinimum">The minimum aount that this profile has to purchase to qualify for free shipping.</param>
        /// <param name="MaximumItemCount">Maximum item count this profile can purchase.</param>
        /// <param name="MinimumItemCount">Minimum item count this profile must purchase.</param>
        /// <param name="MinimumSubtotal">Minimum subtotal this profile must purchase.</param>
        /// <param name="NoCoupons">True if this profile is prevented from using coupons.</param>
        /// <param name="NoFreeShipping">True if this profile is never given free shipping.</param>
        /// <param name="NoRealtimeCharge">True if this customers orders are not charged in real-time.</param>
        /// <param name="PricingTiers">Pricing tier names this profile qualifies for.</param>
        /// <param name="ShippingAddresses">Shipping addresses on file for this profile.</param>
        /// <param name="TaxExempt">True if this profile is exempt from sales tax.</param>
        /// <param name="UpsAccountNumber">UPS account number on file.</param>
        public CartCustomerProfile(bool? Allow3rdPartyBilling = null, bool? AllowCod = null, bool? AllowPurchaseOrder = null, List<CartCustomerProfileAddress> BillingAddresses = null, List<CartCustomerProfileCreditCard> CreditCards = null, int? CustomerProfileOid = null, string DhlAccountNumber = null, string Email = null, string FedexAccountNumber = null, bool? FreeShipping = null, decimal? FreeShippingMinimum = null, int? MaximumItemCount = null, int? MinimumItemCount = null, decimal? MinimumSubtotal = null, bool? NoCoupons = null, bool? NoFreeShipping = null, bool? NoRealtimeCharge = null, List<string> PricingTiers = null, List<CartCustomerProfileAddress> ShippingAddresses = null, bool? TaxExempt = null, string UpsAccountNumber = null)
        {
            this.Allow3rdPartyBilling = Allow3rdPartyBilling;
            this.AllowCod = AllowCod;
            this.AllowPurchaseOrder = AllowPurchaseOrder;
            this.BillingAddresses = BillingAddresses;
            this.CreditCards = CreditCards;
            this.CustomerProfileOid = CustomerProfileOid;
            this.DhlAccountNumber = DhlAccountNumber;
            this.Email = Email;
            this.FedexAccountNumber = FedexAccountNumber;
            this.FreeShipping = FreeShipping;
            this.FreeShippingMinimum = FreeShippingMinimum;
            this.MaximumItemCount = MaximumItemCount;
            this.MinimumItemCount = MinimumItemCount;
            this.MinimumSubtotal = MinimumSubtotal;
            this.NoCoupons = NoCoupons;
            this.NoFreeShipping = NoFreeShipping;
            this.NoRealtimeCharge = NoRealtimeCharge;
            this.PricingTiers = PricingTiers;
            this.ShippingAddresses = ShippingAddresses;
            this.TaxExempt = TaxExempt;
            this.UpsAccountNumber = UpsAccountNumber;
        }
        
        /// <summary>
        /// True if profile is allowed to bill to their 3rd party shipping account
        /// </summary>
        /// <value>True if profile is allowed to bill to their 3rd party shipping account</value>
        [DataMember(Name="allow_3rd_party_billing", EmitDefaultValue=false)]
        public bool? Allow3rdPartyBilling { get; set; }
        /// <summary>
        /// True if this profile is allowed to use a COD
        /// </summary>
        /// <value>True if this profile is allowed to use a COD</value>
        [DataMember(Name="allow_cod", EmitDefaultValue=false)]
        public bool? AllowCod { get; set; }
        /// <summary>
        /// True if this profile is allowed to use a purchase order
        /// </summary>
        /// <value>True if this profile is allowed to use a purchase order</value>
        [DataMember(Name="allow_purchase_order", EmitDefaultValue=false)]
        public bool? AllowPurchaseOrder { get; set; }
        /// <summary>
        /// Billing addresses on file for this profile
        /// </summary>
        /// <value>Billing addresses on file for this profile</value>
        [DataMember(Name="billing_addresses", EmitDefaultValue=false)]
        public List<CartCustomerProfileAddress> BillingAddresses { get; set; }
        /// <summary>
        /// Credit cards on file for this profile (masked)
        /// </summary>
        /// <value>Credit cards on file for this profile (masked)</value>
        [DataMember(Name="credit_cards", EmitDefaultValue=false)]
        public List<CartCustomerProfileCreditCard> CreditCards { get; set; }
        /// <summary>
        /// Unique identifier
        /// </summary>
        /// <value>Unique identifier</value>
        [DataMember(Name="customer_profile_oid", EmitDefaultValue=false)]
        public int? CustomerProfileOid { get; set; }
        /// <summary>
        /// DHL account number on file
        /// </summary>
        /// <value>DHL account number on file</value>
        [DataMember(Name="dhl_account_number", EmitDefaultValue=false)]
        public string DhlAccountNumber { get; set; }
        /// <summary>
        /// Email
        /// </summary>
        /// <value>Email</value>
        [DataMember(Name="email", EmitDefaultValue=false)]
        public string Email { get; set; }
        /// <summary>
        /// FedEx account number on file
        /// </summary>
        /// <value>FedEx account number on file</value>
        [DataMember(Name="fedex_account_number", EmitDefaultValue=false)]
        public string FedexAccountNumber { get; set; }
        /// <summary>
        /// True if this profile always qualifies for free shipping
        /// </summary>
        /// <value>True if this profile always qualifies for free shipping</value>
        [DataMember(Name="free_shipping", EmitDefaultValue=false)]
        public bool? FreeShipping { get; set; }
        /// <summary>
        /// The minimum aount that this profile has to purchase to qualify for free shipping
        /// </summary>
        /// <value>The minimum aount that this profile has to purchase to qualify for free shipping</value>
        [DataMember(Name="free_shipping_minimum", EmitDefaultValue=false)]
        public decimal? FreeShippingMinimum { get; set; }
        /// <summary>
        /// Maximum item count this profile can purchase
        /// </summary>
        /// <value>Maximum item count this profile can purchase</value>
        [DataMember(Name="maximum_item_count", EmitDefaultValue=false)]
        public int? MaximumItemCount { get; set; }
        /// <summary>
        /// Minimum item count this profile must purchase
        /// </summary>
        /// <value>Minimum item count this profile must purchase</value>
        [DataMember(Name="minimum_item_count", EmitDefaultValue=false)]
        public int? MinimumItemCount { get; set; }
        /// <summary>
        /// Minimum subtotal this profile must purchase
        /// </summary>
        /// <value>Minimum subtotal this profile must purchase</value>
        [DataMember(Name="minimum_subtotal", EmitDefaultValue=false)]
        public decimal? MinimumSubtotal { get; set; }
        /// <summary>
        /// True if this profile is prevented from using coupons
        /// </summary>
        /// <value>True if this profile is prevented from using coupons</value>
        [DataMember(Name="no_coupons", EmitDefaultValue=false)]
        public bool? NoCoupons { get; set; }
        /// <summary>
        /// True if this profile is never given free shipping
        /// </summary>
        /// <value>True if this profile is never given free shipping</value>
        [DataMember(Name="no_free_shipping", EmitDefaultValue=false)]
        public bool? NoFreeShipping { get; set; }
        /// <summary>
        /// True if this customers orders are not charged in real-time
        /// </summary>
        /// <value>True if this customers orders are not charged in real-time</value>
        [DataMember(Name="no_realtime_charge", EmitDefaultValue=false)]
        public bool? NoRealtimeCharge { get; set; }
        /// <summary>
        /// Pricing tier names this profile qualifies for
        /// </summary>
        /// <value>Pricing tier names this profile qualifies for</value>
        [DataMember(Name="pricing_tiers", EmitDefaultValue=false)]
        public List<string> PricingTiers { get; set; }
        /// <summary>
        /// Shipping addresses on file for this profile
        /// </summary>
        /// <value>Shipping addresses on file for this profile</value>
        [DataMember(Name="shipping_addresses", EmitDefaultValue=false)]
        public List<CartCustomerProfileAddress> ShippingAddresses { get; set; }
        /// <summary>
        /// True if this profile is exempt from sales tax
        /// </summary>
        /// <value>True if this profile is exempt from sales tax</value>
        [DataMember(Name="tax_exempt", EmitDefaultValue=false)]
        public bool? TaxExempt { get; set; }
        /// <summary>
        /// UPS account number on file
        /// </summary>
        /// <value>UPS account number on file</value>
        [DataMember(Name="ups_account_number", EmitDefaultValue=false)]
        public string UpsAccountNumber { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CartCustomerProfile {\n");
            sb.Append("  Allow3rdPartyBilling: ").Append(Allow3rdPartyBilling).Append("\n");
            sb.Append("  AllowCod: ").Append(AllowCod).Append("\n");
            sb.Append("  AllowPurchaseOrder: ").Append(AllowPurchaseOrder).Append("\n");
            sb.Append("  BillingAddresses: ").Append(BillingAddresses).Append("\n");
            sb.Append("  CreditCards: ").Append(CreditCards).Append("\n");
            sb.Append("  CustomerProfileOid: ").Append(CustomerProfileOid).Append("\n");
            sb.Append("  DhlAccountNumber: ").Append(DhlAccountNumber).Append("\n");
            sb.Append("  Email: ").Append(Email).Append("\n");
            sb.Append("  FedexAccountNumber: ").Append(FedexAccountNumber).Append("\n");
            sb.Append("  FreeShipping: ").Append(FreeShipping).Append("\n");
            sb.Append("  FreeShippingMinimum: ").Append(FreeShippingMinimum).Append("\n");
            sb.Append("  MaximumItemCount: ").Append(MaximumItemCount).Append("\n");
            sb.Append("  MinimumItemCount: ").Append(MinimumItemCount).Append("\n");
            sb.Append("  MinimumSubtotal: ").Append(MinimumSubtotal).Append("\n");
            sb.Append("  NoCoupons: ").Append(NoCoupons).Append("\n");
            sb.Append("  NoFreeShipping: ").Append(NoFreeShipping).Append("\n");
            sb.Append("  NoRealtimeCharge: ").Append(NoRealtimeCharge).Append("\n");
            sb.Append("  PricingTiers: ").Append(PricingTiers).Append("\n");
            sb.Append("  ShippingAddresses: ").Append(ShippingAddresses).Append("\n");
            sb.Append("  TaxExempt: ").Append(TaxExempt).Append("\n");
            sb.Append("  UpsAccountNumber: ").Append(UpsAccountNumber).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as CartCustomerProfile);
        }

        /// <summary>
        /// Returns true if CartCustomerProfile instances are equal
        /// </summary>
        /// <param name="other">Instance of CartCustomerProfile to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CartCustomerProfile other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Allow3rdPartyBilling == other.Allow3rdPartyBilling ||
                    this.Allow3rdPartyBilling != null &&
                    this.Allow3rdPartyBilling.Equals(other.Allow3rdPartyBilling)
                ) && 
                (
                    this.AllowCod == other.AllowCod ||
                    this.AllowCod != null &&
                    this.AllowCod.Equals(other.AllowCod)
                ) && 
                (
                    this.AllowPurchaseOrder == other.AllowPurchaseOrder ||
                    this.AllowPurchaseOrder != null &&
                    this.AllowPurchaseOrder.Equals(other.AllowPurchaseOrder)
                ) && 
                (
                    this.BillingAddresses == other.BillingAddresses ||
                    this.BillingAddresses != null &&
                    this.BillingAddresses.SequenceEqual(other.BillingAddresses)
                ) && 
                (
                    this.CreditCards == other.CreditCards ||
                    this.CreditCards != null &&
                    this.CreditCards.SequenceEqual(other.CreditCards)
                ) && 
                (
                    this.CustomerProfileOid == other.CustomerProfileOid ||
                    this.CustomerProfileOid != null &&
                    this.CustomerProfileOid.Equals(other.CustomerProfileOid)
                ) && 
                (
                    this.DhlAccountNumber == other.DhlAccountNumber ||
                    this.DhlAccountNumber != null &&
                    this.DhlAccountNumber.Equals(other.DhlAccountNumber)
                ) && 
                (
                    this.Email == other.Email ||
                    this.Email != null &&
                    this.Email.Equals(other.Email)
                ) && 
                (
                    this.FedexAccountNumber == other.FedexAccountNumber ||
                    this.FedexAccountNumber != null &&
                    this.FedexAccountNumber.Equals(other.FedexAccountNumber)
                ) && 
                (
                    this.FreeShipping == other.FreeShipping ||
                    this.FreeShipping != null &&
                    this.FreeShipping.Equals(other.FreeShipping)
                ) && 
                (
                    this.FreeShippingMinimum == other.FreeShippingMinimum ||
                    this.FreeShippingMinimum != null &&
                    this.FreeShippingMinimum.Equals(other.FreeShippingMinimum)
                ) && 
                (
                    this.MaximumItemCount == other.MaximumItemCount ||
                    this.MaximumItemCount != null &&
                    this.MaximumItemCount.Equals(other.MaximumItemCount)
                ) && 
                (
                    this.MinimumItemCount == other.MinimumItemCount ||
                    this.MinimumItemCount != null &&
                    this.MinimumItemCount.Equals(other.MinimumItemCount)
                ) && 
                (
                    this.MinimumSubtotal == other.MinimumSubtotal ||
                    this.MinimumSubtotal != null &&
                    this.MinimumSubtotal.Equals(other.MinimumSubtotal)
                ) && 
                (
                    this.NoCoupons == other.NoCoupons ||
                    this.NoCoupons != null &&
                    this.NoCoupons.Equals(other.NoCoupons)
                ) && 
                (
                    this.NoFreeShipping == other.NoFreeShipping ||
                    this.NoFreeShipping != null &&
                    this.NoFreeShipping.Equals(other.NoFreeShipping)
                ) && 
                (
                    this.NoRealtimeCharge == other.NoRealtimeCharge ||
                    this.NoRealtimeCharge != null &&
                    this.NoRealtimeCharge.Equals(other.NoRealtimeCharge)
                ) && 
                (
                    this.PricingTiers == other.PricingTiers ||
                    this.PricingTiers != null &&
                    this.PricingTiers.SequenceEqual(other.PricingTiers)
                ) && 
                (
                    this.ShippingAddresses == other.ShippingAddresses ||
                    this.ShippingAddresses != null &&
                    this.ShippingAddresses.SequenceEqual(other.ShippingAddresses)
                ) && 
                (
                    this.TaxExempt == other.TaxExempt ||
                    this.TaxExempt != null &&
                    this.TaxExempt.Equals(other.TaxExempt)
                ) && 
                (
                    this.UpsAccountNumber == other.UpsAccountNumber ||
                    this.UpsAccountNumber != null &&
                    this.UpsAccountNumber.Equals(other.UpsAccountNumber)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Allow3rdPartyBilling != null)
                    hash = hash * 59 + this.Allow3rdPartyBilling.GetHashCode();
                if (this.AllowCod != null)
                    hash = hash * 59 + this.AllowCod.GetHashCode();
                if (this.AllowPurchaseOrder != null)
                    hash = hash * 59 + this.AllowPurchaseOrder.GetHashCode();
                if (this.BillingAddresses != null)
                    hash = hash * 59 + this.BillingAddresses.GetHashCode();
                if (this.CreditCards != null)
                    hash = hash * 59 + this.CreditCards.GetHashCode();
                if (this.CustomerProfileOid != null)
                    hash = hash * 59 + this.CustomerProfileOid.GetHashCode();
                if (this.DhlAccountNumber != null)
                    hash = hash * 59 + this.DhlAccountNumber.GetHashCode();
                if (this.Email != null)
                    hash = hash * 59 + this.Email.GetHashCode();
                if (this.FedexAccountNumber != null)
                    hash = hash * 59 + this.FedexAccountNumber.GetHashCode();
                if (this.FreeShipping != null)
                    hash = hash * 59 + this.FreeShipping.GetHashCode();
                if (this.FreeShippingMinimum != null)
                    hash = hash * 59 + this.FreeShippingMinimum.GetHashCode();
                if (this.MaximumItemCount != null)
                    hash = hash * 59 + this.MaximumItemCount.GetHashCode();
                if (this.MinimumItemCount != null)
                    hash = hash * 59 + this.MinimumItemCount.GetHashCode();
                if (this.MinimumSubtotal != null)
                    hash = hash * 59 + this.MinimumSubtotal.GetHashCode();
                if (this.NoCoupons != null)
                    hash = hash * 59 + this.NoCoupons.GetHashCode();
                if (this.NoFreeShipping != null)
                    hash = hash * 59 + this.NoFreeShipping.GetHashCode();
                if (this.NoRealtimeCharge != null)
                    hash = hash * 59 + this.NoRealtimeCharge.GetHashCode();
                if (this.PricingTiers != null)
                    hash = hash * 59 + this.PricingTiers.GetHashCode();
                if (this.ShippingAddresses != null)
                    hash = hash * 59 + this.ShippingAddresses.GetHashCode();
                if (this.TaxExempt != null)
                    hash = hash * 59 + this.TaxExempt.GetHashCode();
                if (this.UpsAccountNumber != null)
                    hash = hash * 59 + this.UpsAccountNumber.GetHashCode();
                return hash;
            }
        }
    }

}
