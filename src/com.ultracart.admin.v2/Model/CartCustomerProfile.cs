/*
 * UltraCart Rest API V2
 *
 * UltraCart REST API Version 2
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@ultracart.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = com.ultracart.admin.v2.Client.OpenAPIDateConverter;

namespace com.ultracart.admin.v2.Model
{
    /// <summary>
    /// CartCustomerProfile
    /// </summary>
    [DataContract]
    public partial class CartCustomerProfile :  IEquatable<CartCustomerProfile>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CartCustomerProfile" /> class.
        /// </summary>
        /// <param name="allow3rdPartyBilling">True if profile is allowed to bill to their 3rd party shipping account.</param>
        /// <param name="allowCod">True if this profile is allowed to use a COD.</param>
        /// <param name="allowPurchaseOrder">True if this profile is allowed to use a purchase order.</param>
        /// <param name="billingAddresses">Billing addresses on file for this profile.</param>
        /// <param name="creditCards">Credit cards on file for this profile (masked).</param>
        /// <param name="customerProfileOid">Unique identifier.</param>
        /// <param name="dhlAccountNumber">DHL account number on file.</param>
        /// <param name="dhlDutyAccountNumber">DHL duty account number on file.</param>
        /// <param name="email">Email.</param>
        /// <param name="fedexAccountNumber">FedEx account number on file.</param>
        /// <param name="freeShipping">True if this profile always qualifies for free shipping.</param>
        /// <param name="freeShippingMinimum">The minimum aount that this profile has to purchase to qualify for free shipping.</param>
        /// <param name="maximumItemCount">Maximum item count this profile can purchase.</param>
        /// <param name="minimumItemCount">Minimum item count this profile must purchase.</param>
        /// <param name="minimumSubtotal">Minimum subtotal this profile must purchase.</param>
        /// <param name="noCoupons">True if this profile is prevented from using coupons.</param>
        /// <param name="noFreeShipping">True if this profile is never given free shipping.</param>
        /// <param name="noRealtimeCharge">True if this customers orders are not charged in real-time.</param>
        /// <param name="pricingTiers">Pricing tier names this profile qualifies for.</param>
        /// <param name="shippingAddresses">Shipping addresses on file for this profile.</param>
        /// <param name="taxExempt">True if this profile is exempt from sales tax.</param>
        /// <param name="upsAccountNumber">UPS account number on file.</param>
        public CartCustomerProfile(bool allow3rdPartyBilling = default(bool), bool allowCod = default(bool), bool allowPurchaseOrder = default(bool), List<CartCustomerProfileAddress> billingAddresses = default(List<CartCustomerProfileAddress>), List<CartCustomerProfileCreditCard> creditCards = default(List<CartCustomerProfileCreditCard>), int customerProfileOid = default(int), string dhlAccountNumber = default(string), string dhlDutyAccountNumber = default(string), string email = default(string), string fedexAccountNumber = default(string), bool freeShipping = default(bool), decimal freeShippingMinimum = default(decimal), int maximumItemCount = default(int), int minimumItemCount = default(int), decimal minimumSubtotal = default(decimal), bool noCoupons = default(bool), bool noFreeShipping = default(bool), bool noRealtimeCharge = default(bool), List<string> pricingTiers = default(List<string>), List<CartCustomerProfileAddress> shippingAddresses = default(List<CartCustomerProfileAddress>), bool taxExempt = default(bool), string upsAccountNumber = default(string))
        {
            this.Allow3rdPartyBilling = allow3rdPartyBilling;
            this.AllowCod = allowCod;
            this.AllowPurchaseOrder = allowPurchaseOrder;
            this.BillingAddresses = billingAddresses;
            this.CreditCards = creditCards;
            this.CustomerProfileOid = customerProfileOid;
            this.DhlAccountNumber = dhlAccountNumber;
            this.DhlDutyAccountNumber = dhlDutyAccountNumber;
            this.Email = email;
            this.FedexAccountNumber = fedexAccountNumber;
            this.FreeShipping = freeShipping;
            this.FreeShippingMinimum = freeShippingMinimum;
            this.MaximumItemCount = maximumItemCount;
            this.MinimumItemCount = minimumItemCount;
            this.MinimumSubtotal = minimumSubtotal;
            this.NoCoupons = noCoupons;
            this.NoFreeShipping = noFreeShipping;
            this.NoRealtimeCharge = noRealtimeCharge;
            this.PricingTiers = pricingTiers;
            this.ShippingAddresses = shippingAddresses;
            this.TaxExempt = taxExempt;
            this.UpsAccountNumber = upsAccountNumber;
        }

        /// <summary>
        /// True if profile is allowed to bill to their 3rd party shipping account
        /// </summary>
        /// <value>True if profile is allowed to bill to their 3rd party shipping account</value>
        [DataMember(Name="allow_3rd_party_billing", EmitDefaultValue=false)]
        public bool Allow3rdPartyBilling { get; set; }

        /// <summary>
        /// True if this profile is allowed to use a COD
        /// </summary>
        /// <value>True if this profile is allowed to use a COD</value>
        [DataMember(Name="allow_cod", EmitDefaultValue=false)]
        public bool AllowCod { get; set; }

        /// <summary>
        /// True if this profile is allowed to use a purchase order
        /// </summary>
        /// <value>True if this profile is allowed to use a purchase order</value>
        [DataMember(Name="allow_purchase_order", EmitDefaultValue=false)]
        public bool AllowPurchaseOrder { get; set; }

        /// <summary>
        /// Billing addresses on file for this profile
        /// </summary>
        /// <value>Billing addresses on file for this profile</value>
        [DataMember(Name="billing_addresses", EmitDefaultValue=false)]
        public List<CartCustomerProfileAddress> BillingAddresses { get; set; }

        /// <summary>
        /// Credit cards on file for this profile (masked)
        /// </summary>
        /// <value>Credit cards on file for this profile (masked)</value>
        [DataMember(Name="credit_cards", EmitDefaultValue=false)]
        public List<CartCustomerProfileCreditCard> CreditCards { get; set; }

        /// <summary>
        /// Unique identifier
        /// </summary>
        /// <value>Unique identifier</value>
        [DataMember(Name="customer_profile_oid", EmitDefaultValue=false)]
        public int CustomerProfileOid { get; set; }

        /// <summary>
        /// DHL account number on file
        /// </summary>
        /// <value>DHL account number on file</value>
        [DataMember(Name="dhl_account_number", EmitDefaultValue=false)]
        public string DhlAccountNumber { get; set; }

        /// <summary>
        /// DHL duty account number on file
        /// </summary>
        /// <value>DHL duty account number on file</value>
        [DataMember(Name="dhl_duty_account_number", EmitDefaultValue=false)]
        public string DhlDutyAccountNumber { get; set; }

        /// <summary>
        /// Email
        /// </summary>
        /// <value>Email</value>
        [DataMember(Name="email", EmitDefaultValue=false)]
        public string Email { get; set; }

        /// <summary>
        /// FedEx account number on file
        /// </summary>
        /// <value>FedEx account number on file</value>
        [DataMember(Name="fedex_account_number", EmitDefaultValue=false)]
        public string FedexAccountNumber { get; set; }

        /// <summary>
        /// True if this profile always qualifies for free shipping
        /// </summary>
        /// <value>True if this profile always qualifies for free shipping</value>
        [DataMember(Name="free_shipping", EmitDefaultValue=false)]
        public bool FreeShipping { get; set; }

        /// <summary>
        /// The minimum aount that this profile has to purchase to qualify for free shipping
        /// </summary>
        /// <value>The minimum aount that this profile has to purchase to qualify for free shipping</value>
        [DataMember(Name="free_shipping_minimum", EmitDefaultValue=false)]
        public decimal FreeShippingMinimum { get; set; }

        /// <summary>
        /// Maximum item count this profile can purchase
        /// </summary>
        /// <value>Maximum item count this profile can purchase</value>
        [DataMember(Name="maximum_item_count", EmitDefaultValue=false)]
        public int MaximumItemCount { get; set; }

        /// <summary>
        /// Minimum item count this profile must purchase
        /// </summary>
        /// <value>Minimum item count this profile must purchase</value>
        [DataMember(Name="minimum_item_count", EmitDefaultValue=false)]
        public int MinimumItemCount { get; set; }

        /// <summary>
        /// Minimum subtotal this profile must purchase
        /// </summary>
        /// <value>Minimum subtotal this profile must purchase</value>
        [DataMember(Name="minimum_subtotal", EmitDefaultValue=false)]
        public decimal MinimumSubtotal { get; set; }

        /// <summary>
        /// True if this profile is prevented from using coupons
        /// </summary>
        /// <value>True if this profile is prevented from using coupons</value>
        [DataMember(Name="no_coupons", EmitDefaultValue=false)]
        public bool NoCoupons { get; set; }

        /// <summary>
        /// True if this profile is never given free shipping
        /// </summary>
        /// <value>True if this profile is never given free shipping</value>
        [DataMember(Name="no_free_shipping", EmitDefaultValue=false)]
        public bool NoFreeShipping { get; set; }

        /// <summary>
        /// True if this customers orders are not charged in real-time
        /// </summary>
        /// <value>True if this customers orders are not charged in real-time</value>
        [DataMember(Name="no_realtime_charge", EmitDefaultValue=false)]
        public bool NoRealtimeCharge { get; set; }

        /// <summary>
        /// Pricing tier names this profile qualifies for
        /// </summary>
        /// <value>Pricing tier names this profile qualifies for</value>
        [DataMember(Name="pricing_tiers", EmitDefaultValue=false)]
        public List<string> PricingTiers { get; set; }

        /// <summary>
        /// Shipping addresses on file for this profile
        /// </summary>
        /// <value>Shipping addresses on file for this profile</value>
        [DataMember(Name="shipping_addresses", EmitDefaultValue=false)]
        public List<CartCustomerProfileAddress> ShippingAddresses { get; set; }

        /// <summary>
        /// True if this profile is exempt from sales tax
        /// </summary>
        /// <value>True if this profile is exempt from sales tax</value>
        [DataMember(Name="tax_exempt", EmitDefaultValue=false)]
        public bool TaxExempt { get; set; }

        /// <summary>
        /// UPS account number on file
        /// </summary>
        /// <value>UPS account number on file</value>
        [DataMember(Name="ups_account_number", EmitDefaultValue=false)]
        public string UpsAccountNumber { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CartCustomerProfile {\n");
            sb.Append("  Allow3rdPartyBilling: ").Append(Allow3rdPartyBilling).Append("\n");
            sb.Append("  AllowCod: ").Append(AllowCod).Append("\n");
            sb.Append("  AllowPurchaseOrder: ").Append(AllowPurchaseOrder).Append("\n");
            sb.Append("  BillingAddresses: ").Append(BillingAddresses).Append("\n");
            sb.Append("  CreditCards: ").Append(CreditCards).Append("\n");
            sb.Append("  CustomerProfileOid: ").Append(CustomerProfileOid).Append("\n");
            sb.Append("  DhlAccountNumber: ").Append(DhlAccountNumber).Append("\n");
            sb.Append("  DhlDutyAccountNumber: ").Append(DhlDutyAccountNumber).Append("\n");
            sb.Append("  Email: ").Append(Email).Append("\n");
            sb.Append("  FedexAccountNumber: ").Append(FedexAccountNumber).Append("\n");
            sb.Append("  FreeShipping: ").Append(FreeShipping).Append("\n");
            sb.Append("  FreeShippingMinimum: ").Append(FreeShippingMinimum).Append("\n");
            sb.Append("  MaximumItemCount: ").Append(MaximumItemCount).Append("\n");
            sb.Append("  MinimumItemCount: ").Append(MinimumItemCount).Append("\n");
            sb.Append("  MinimumSubtotal: ").Append(MinimumSubtotal).Append("\n");
            sb.Append("  NoCoupons: ").Append(NoCoupons).Append("\n");
            sb.Append("  NoFreeShipping: ").Append(NoFreeShipping).Append("\n");
            sb.Append("  NoRealtimeCharge: ").Append(NoRealtimeCharge).Append("\n");
            sb.Append("  PricingTiers: ").Append(PricingTiers).Append("\n");
            sb.Append("  ShippingAddresses: ").Append(ShippingAddresses).Append("\n");
            sb.Append("  TaxExempt: ").Append(TaxExempt).Append("\n");
            sb.Append("  UpsAccountNumber: ").Append(UpsAccountNumber).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CartCustomerProfile);
        }

        /// <summary>
        /// Returns true if CartCustomerProfile instances are equal
        /// </summary>
        /// <param name="input">Instance of CartCustomerProfile to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CartCustomerProfile input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Allow3rdPartyBilling == input.Allow3rdPartyBilling ||
                    (this.Allow3rdPartyBilling != null &&
                    this.Allow3rdPartyBilling.Equals(input.Allow3rdPartyBilling))
                ) && 
                (
                    this.AllowCod == input.AllowCod ||
                    (this.AllowCod != null &&
                    this.AllowCod.Equals(input.AllowCod))
                ) && 
                (
                    this.AllowPurchaseOrder == input.AllowPurchaseOrder ||
                    (this.AllowPurchaseOrder != null &&
                    this.AllowPurchaseOrder.Equals(input.AllowPurchaseOrder))
                ) && 
                (
                    this.BillingAddresses == input.BillingAddresses ||
                    this.BillingAddresses != null &&
                    input.BillingAddresses != null &&
                    this.BillingAddresses.SequenceEqual(input.BillingAddresses)
                ) && 
                (
                    this.CreditCards == input.CreditCards ||
                    this.CreditCards != null &&
                    input.CreditCards != null &&
                    this.CreditCards.SequenceEqual(input.CreditCards)
                ) && 
                (
                    this.CustomerProfileOid == input.CustomerProfileOid ||
                    (this.CustomerProfileOid != null &&
                    this.CustomerProfileOid.Equals(input.CustomerProfileOid))
                ) && 
                (
                    this.DhlAccountNumber == input.DhlAccountNumber ||
                    (this.DhlAccountNumber != null &&
                    this.DhlAccountNumber.Equals(input.DhlAccountNumber))
                ) && 
                (
                    this.DhlDutyAccountNumber == input.DhlDutyAccountNumber ||
                    (this.DhlDutyAccountNumber != null &&
                    this.DhlDutyAccountNumber.Equals(input.DhlDutyAccountNumber))
                ) && 
                (
                    this.Email == input.Email ||
                    (this.Email != null &&
                    this.Email.Equals(input.Email))
                ) && 
                (
                    this.FedexAccountNumber == input.FedexAccountNumber ||
                    (this.FedexAccountNumber != null &&
                    this.FedexAccountNumber.Equals(input.FedexAccountNumber))
                ) && 
                (
                    this.FreeShipping == input.FreeShipping ||
                    (this.FreeShipping != null &&
                    this.FreeShipping.Equals(input.FreeShipping))
                ) && 
                (
                    this.FreeShippingMinimum == input.FreeShippingMinimum ||
                    (this.FreeShippingMinimum != null &&
                    this.FreeShippingMinimum.Equals(input.FreeShippingMinimum))
                ) && 
                (
                    this.MaximumItemCount == input.MaximumItemCount ||
                    (this.MaximumItemCount != null &&
                    this.MaximumItemCount.Equals(input.MaximumItemCount))
                ) && 
                (
                    this.MinimumItemCount == input.MinimumItemCount ||
                    (this.MinimumItemCount != null &&
                    this.MinimumItemCount.Equals(input.MinimumItemCount))
                ) && 
                (
                    this.MinimumSubtotal == input.MinimumSubtotal ||
                    (this.MinimumSubtotal != null &&
                    this.MinimumSubtotal.Equals(input.MinimumSubtotal))
                ) && 
                (
                    this.NoCoupons == input.NoCoupons ||
                    (this.NoCoupons != null &&
                    this.NoCoupons.Equals(input.NoCoupons))
                ) && 
                (
                    this.NoFreeShipping == input.NoFreeShipping ||
                    (this.NoFreeShipping != null &&
                    this.NoFreeShipping.Equals(input.NoFreeShipping))
                ) && 
                (
                    this.NoRealtimeCharge == input.NoRealtimeCharge ||
                    (this.NoRealtimeCharge != null &&
                    this.NoRealtimeCharge.Equals(input.NoRealtimeCharge))
                ) && 
                (
                    this.PricingTiers == input.PricingTiers ||
                    this.PricingTiers != null &&
                    input.PricingTiers != null &&
                    this.PricingTiers.SequenceEqual(input.PricingTiers)
                ) && 
                (
                    this.ShippingAddresses == input.ShippingAddresses ||
                    this.ShippingAddresses != null &&
                    input.ShippingAddresses != null &&
                    this.ShippingAddresses.SequenceEqual(input.ShippingAddresses)
                ) && 
                (
                    this.TaxExempt == input.TaxExempt ||
                    (this.TaxExempt != null &&
                    this.TaxExempt.Equals(input.TaxExempt))
                ) && 
                (
                    this.UpsAccountNumber == input.UpsAccountNumber ||
                    (this.UpsAccountNumber != null &&
                    this.UpsAccountNumber.Equals(input.UpsAccountNumber))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Allow3rdPartyBilling != null)
                    hashCode = hashCode * 59 + this.Allow3rdPartyBilling.GetHashCode();
                if (this.AllowCod != null)
                    hashCode = hashCode * 59 + this.AllowCod.GetHashCode();
                if (this.AllowPurchaseOrder != null)
                    hashCode = hashCode * 59 + this.AllowPurchaseOrder.GetHashCode();
                if (this.BillingAddresses != null)
                    hashCode = hashCode * 59 + this.BillingAddresses.GetHashCode();
                if (this.CreditCards != null)
                    hashCode = hashCode * 59 + this.CreditCards.GetHashCode();
                if (this.CustomerProfileOid != null)
                    hashCode = hashCode * 59 + this.CustomerProfileOid.GetHashCode();
                if (this.DhlAccountNumber != null)
                    hashCode = hashCode * 59 + this.DhlAccountNumber.GetHashCode();
                if (this.DhlDutyAccountNumber != null)
                    hashCode = hashCode * 59 + this.DhlDutyAccountNumber.GetHashCode();
                if (this.Email != null)
                    hashCode = hashCode * 59 + this.Email.GetHashCode();
                if (this.FedexAccountNumber != null)
                    hashCode = hashCode * 59 + this.FedexAccountNumber.GetHashCode();
                if (this.FreeShipping != null)
                    hashCode = hashCode * 59 + this.FreeShipping.GetHashCode();
                if (this.FreeShippingMinimum != null)
                    hashCode = hashCode * 59 + this.FreeShippingMinimum.GetHashCode();
                if (this.MaximumItemCount != null)
                    hashCode = hashCode * 59 + this.MaximumItemCount.GetHashCode();
                if (this.MinimumItemCount != null)
                    hashCode = hashCode * 59 + this.MinimumItemCount.GetHashCode();
                if (this.MinimumSubtotal != null)
                    hashCode = hashCode * 59 + this.MinimumSubtotal.GetHashCode();
                if (this.NoCoupons != null)
                    hashCode = hashCode * 59 + this.NoCoupons.GetHashCode();
                if (this.NoFreeShipping != null)
                    hashCode = hashCode * 59 + this.NoFreeShipping.GetHashCode();
                if (this.NoRealtimeCharge != null)
                    hashCode = hashCode * 59 + this.NoRealtimeCharge.GetHashCode();
                if (this.PricingTiers != null)
                    hashCode = hashCode * 59 + this.PricingTiers.GetHashCode();
                if (this.ShippingAddresses != null)
                    hashCode = hashCode * 59 + this.ShippingAddresses.GetHashCode();
                if (this.TaxExempt != null)
                    hashCode = hashCode * 59 + this.TaxExempt.GetHashCode();
                if (this.UpsAccountNumber != null)
                    hashCode = hashCode * 59 + this.UpsAccountNumber.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
