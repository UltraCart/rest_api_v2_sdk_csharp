/* 
 * UltraCart Rest API V2
 *
 * This is the next generation UltraCart REST API...
 *
 * OpenAPI spec version: 2.0.0
 * Contact: support@ultracart.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace com.ultracart.admin.v2.Model
{
    /// <summary>
    /// CartFinalizeOrderResponse
    /// </summary>
    [DataContract]
    public partial class CartFinalizeOrderResponse :  IEquatable<CartFinalizeOrderResponse>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CartFinalizeOrderResponse" /> class.
        /// </summary>
        /// <param name="Errors">Error messages if the order could not be completed.</param>
        /// <param name="NextCart">NextCart.</param>
        /// <param name="Order">Order.</param>
        /// <param name="OrderId">Order ID assigned to the order.</param>
        /// <param name="Successful">True if the cart was converted successfully to an order.</param>
        public CartFinalizeOrderResponse(List<string> Errors = null, Cart NextCart = null, Order Order = null, string OrderId = null, bool? Successful = null)
        {
            this.Errors = Errors;
            this.NextCart = NextCart;
            this.Order = Order;
            this.OrderId = OrderId;
            this.Successful = Successful;
        }
        
        /// <summary>
        /// Error messages if the order could not be completed
        /// </summary>
        /// <value>Error messages if the order could not be completed</value>
        [DataMember(Name="errors", EmitDefaultValue=false)]
        public List<string> Errors { get; set; }
        /// <summary>
        /// Gets or Sets NextCart
        /// </summary>
        [DataMember(Name="next_cart", EmitDefaultValue=false)]
        public Cart NextCart { get; set; }
        /// <summary>
        /// Gets or Sets Order
        /// </summary>
        [DataMember(Name="order", EmitDefaultValue=false)]
        public Order Order { get; set; }
        /// <summary>
        /// Order ID assigned to the order
        /// </summary>
        /// <value>Order ID assigned to the order</value>
        [DataMember(Name="order_id", EmitDefaultValue=false)]
        public string OrderId { get; set; }
        /// <summary>
        /// True if the cart was converted successfully to an order
        /// </summary>
        /// <value>True if the cart was converted successfully to an order</value>
        [DataMember(Name="successful", EmitDefaultValue=false)]
        public bool? Successful { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CartFinalizeOrderResponse {\n");
            sb.Append("  Errors: ").Append(Errors).Append("\n");
            sb.Append("  NextCart: ").Append(NextCart).Append("\n");
            sb.Append("  Order: ").Append(Order).Append("\n");
            sb.Append("  OrderId: ").Append(OrderId).Append("\n");
            sb.Append("  Successful: ").Append(Successful).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as CartFinalizeOrderResponse);
        }

        /// <summary>
        /// Returns true if CartFinalizeOrderResponse instances are equal
        /// </summary>
        /// <param name="other">Instance of CartFinalizeOrderResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CartFinalizeOrderResponse other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Errors == other.Errors ||
                    this.Errors != null &&
                    this.Errors.SequenceEqual(other.Errors)
                ) && 
                (
                    this.NextCart == other.NextCart ||
                    this.NextCart != null &&
                    this.NextCart.Equals(other.NextCart)
                ) && 
                (
                    this.Order == other.Order ||
                    this.Order != null &&
                    this.Order.Equals(other.Order)
                ) && 
                (
                    this.OrderId == other.OrderId ||
                    this.OrderId != null &&
                    this.OrderId.Equals(other.OrderId)
                ) && 
                (
                    this.Successful == other.Successful ||
                    this.Successful != null &&
                    this.Successful.Equals(other.Successful)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Errors != null)
                    hash = hash * 59 + this.Errors.GetHashCode();
                if (this.NextCart != null)
                    hash = hash * 59 + this.NextCart.GetHashCode();
                if (this.Order != null)
                    hash = hash * 59 + this.Order.GetHashCode();
                if (this.OrderId != null)
                    hash = hash * 59 + this.OrderId.GetHashCode();
                if (this.Successful != null)
                    hash = hash * 59 + this.Successful.GetHashCode();
                return hash;
            }
        }
    }

}
