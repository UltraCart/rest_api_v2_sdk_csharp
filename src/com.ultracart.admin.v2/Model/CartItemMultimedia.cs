/* 
 * UltraCart Rest API V2
 *
 * This is the next generation UltraCart REST API...
 *
 * OpenAPI spec version: 2.0.0
 * Contact: support@ultracart.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace com.ultracart.admin.v2.Model
{
    /// <summary>
    /// CartItemMultimedia
    /// </summary>
    [DataContract]
    public partial class CartItemMultimedia :  IEquatable<CartItemMultimedia>
    {
        /// <summary>
        /// Type of multimedia
        /// </summary>
        /// <value>Type of multimedia</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TypeEnum
        {
            
            /// <summary>
            /// Enum Image for "Image"
            /// </summary>
            [EnumMember(Value = "Image")]
            Image,
            
            /// <summary>
            /// Enum PDF for "PDF"
            /// </summary>
            [EnumMember(Value = "PDF")]
            PDF,
            
            /// <summary>
            /// Enum Text for "Text"
            /// </summary>
            [EnumMember(Value = "Text")]
            Text,
            
            /// <summary>
            /// Enum Unknown for "Unknown"
            /// </summary>
            [EnumMember(Value = "Unknown")]
            Unknown,
            
            /// <summary>
            /// Enum Video for "Video"
            /// </summary>
            [EnumMember(Value = "Video")]
            Video
        }

        /// <summary>
        /// Type of multimedia
        /// </summary>
        /// <value>Type of multimedia</value>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public TypeEnum? Type { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="CartItemMultimedia" /> class.
        /// </summary>
        /// <param name="Code">Code assigned to the multimedia.</param>
        /// <param name="Description">Description.</param>
        /// <param name="ExcludeFromGallery">True if the image should be excluded from galleries.</param>
        /// <param name="ImageHeight">Image height.</param>
        /// <param name="ImageWidth">Image width.</param>
        /// <param name="IsDefault">True if the multimedia is the default for this type.</param>
        /// <param name="Thumbnails">Thumbnails of the images.</param>
        /// <param name="Type">Type of multimedia.</param>
        /// <param name="Url">URL to view multimedia at.</param>
        public CartItemMultimedia(string Code = null, string Description = null, bool? ExcludeFromGallery = null, int? ImageHeight = null, int? ImageWidth = null, bool? IsDefault = null, List<CartItemMultimediaThumbnail> Thumbnails = null, TypeEnum? Type = null, string Url = null)
        {
            this.Code = Code;
            this.Description = Description;
            this.ExcludeFromGallery = ExcludeFromGallery;
            this.ImageHeight = ImageHeight;
            this.ImageWidth = ImageWidth;
            this.IsDefault = IsDefault;
            this.Thumbnails = Thumbnails;
            this.Type = Type;
            this.Url = Url;
        }
        
        /// <summary>
        /// Code assigned to the multimedia
        /// </summary>
        /// <value>Code assigned to the multimedia</value>
        [DataMember(Name="code", EmitDefaultValue=false)]
        public string Code { get; set; }
        /// <summary>
        /// Description
        /// </summary>
        /// <value>Description</value>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }
        /// <summary>
        /// True if the image should be excluded from galleries
        /// </summary>
        /// <value>True if the image should be excluded from galleries</value>
        [DataMember(Name="exclude_from_gallery", EmitDefaultValue=false)]
        public bool? ExcludeFromGallery { get; set; }
        /// <summary>
        /// Image height
        /// </summary>
        /// <value>Image height</value>
        [DataMember(Name="image_height", EmitDefaultValue=false)]
        public int? ImageHeight { get; set; }
        /// <summary>
        /// Image width
        /// </summary>
        /// <value>Image width</value>
        [DataMember(Name="image_width", EmitDefaultValue=false)]
        public int? ImageWidth { get; set; }
        /// <summary>
        /// True if the multimedia is the default for this type
        /// </summary>
        /// <value>True if the multimedia is the default for this type</value>
        [DataMember(Name="is_default", EmitDefaultValue=false)]
        public bool? IsDefault { get; set; }
        /// <summary>
        /// Thumbnails of the images
        /// </summary>
        /// <value>Thumbnails of the images</value>
        [DataMember(Name="thumbnails", EmitDefaultValue=false)]
        public List<CartItemMultimediaThumbnail> Thumbnails { get; set; }
        /// <summary>
        /// URL to view multimedia at
        /// </summary>
        /// <value>URL to view multimedia at</value>
        [DataMember(Name="url", EmitDefaultValue=false)]
        public string Url { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CartItemMultimedia {\n");
            sb.Append("  Code: ").Append(Code).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  ExcludeFromGallery: ").Append(ExcludeFromGallery).Append("\n");
            sb.Append("  ImageHeight: ").Append(ImageHeight).Append("\n");
            sb.Append("  ImageWidth: ").Append(ImageWidth).Append("\n");
            sb.Append("  IsDefault: ").Append(IsDefault).Append("\n");
            sb.Append("  Thumbnails: ").Append(Thumbnails).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Url: ").Append(Url).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as CartItemMultimedia);
        }

        /// <summary>
        /// Returns true if CartItemMultimedia instances are equal
        /// </summary>
        /// <param name="other">Instance of CartItemMultimedia to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CartItemMultimedia other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Code == other.Code ||
                    this.Code != null &&
                    this.Code.Equals(other.Code)
                ) && 
                (
                    this.Description == other.Description ||
                    this.Description != null &&
                    this.Description.Equals(other.Description)
                ) && 
                (
                    this.ExcludeFromGallery == other.ExcludeFromGallery ||
                    this.ExcludeFromGallery != null &&
                    this.ExcludeFromGallery.Equals(other.ExcludeFromGallery)
                ) && 
                (
                    this.ImageHeight == other.ImageHeight ||
                    this.ImageHeight != null &&
                    this.ImageHeight.Equals(other.ImageHeight)
                ) && 
                (
                    this.ImageWidth == other.ImageWidth ||
                    this.ImageWidth != null &&
                    this.ImageWidth.Equals(other.ImageWidth)
                ) && 
                (
                    this.IsDefault == other.IsDefault ||
                    this.IsDefault != null &&
                    this.IsDefault.Equals(other.IsDefault)
                ) && 
                (
                    this.Thumbnails == other.Thumbnails ||
                    this.Thumbnails != null &&
                    this.Thumbnails.SequenceEqual(other.Thumbnails)
                ) && 
                (
                    this.Type == other.Type ||
                    this.Type != null &&
                    this.Type.Equals(other.Type)
                ) && 
                (
                    this.Url == other.Url ||
                    this.Url != null &&
                    this.Url.Equals(other.Url)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Code != null)
                    hash = hash * 59 + this.Code.GetHashCode();
                if (this.Description != null)
                    hash = hash * 59 + this.Description.GetHashCode();
                if (this.ExcludeFromGallery != null)
                    hash = hash * 59 + this.ExcludeFromGallery.GetHashCode();
                if (this.ImageHeight != null)
                    hash = hash * 59 + this.ImageHeight.GetHashCode();
                if (this.ImageWidth != null)
                    hash = hash * 59 + this.ImageWidth.GetHashCode();
                if (this.IsDefault != null)
                    hash = hash * 59 + this.IsDefault.GetHashCode();
                if (this.Thumbnails != null)
                    hash = hash * 59 + this.Thumbnails.GetHashCode();
                if (this.Type != null)
                    hash = hash * 59 + this.Type.GetHashCode();
                if (this.Url != null)
                    hash = hash * 59 + this.Url.GetHashCode();
                return hash;
            }
        }
    }

}
