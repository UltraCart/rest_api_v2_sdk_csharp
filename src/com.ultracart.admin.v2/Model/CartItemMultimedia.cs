/*
 * UltraCart Rest API V2
 *
 * UltraCart REST API Version 2
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@ultracart.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = com.ultracart.admin.v2.Client.OpenAPIDateConverter;

namespace com.ultracart.admin.v2.Model
{
    /// <summary>
    /// CartItemMultimedia
    /// </summary>
    [DataContract]
    public partial class CartItemMultimedia :  IEquatable<CartItemMultimedia>, IValidatableObject
    {
        /// <summary>
        /// Type of multimedia
        /// </summary>
        /// <value>Type of multimedia</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TypeEnum
        {
            /// <summary>
            /// Enum Image for value: Image
            /// </summary>
            [EnumMember(Value = "Image")]
            Image = 1,

            /// <summary>
            /// Enum PDF for value: PDF
            /// </summary>
            [EnumMember(Value = "PDF")]
            PDF = 2,

            /// <summary>
            /// Enum Text for value: Text
            /// </summary>
            [EnumMember(Value = "Text")]
            Text = 3,

            /// <summary>
            /// Enum Unknown for value: Unknown
            /// </summary>
            [EnumMember(Value = "Unknown")]
            Unknown = 4,

            /// <summary>
            /// Enum Video for value: Video
            /// </summary>
            [EnumMember(Value = "Video")]
            Video = 5

        }

        /// <summary>
        /// Type of multimedia
        /// </summary>
        /// <value>Type of multimedia</value>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public TypeEnum? Type { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="CartItemMultimedia" /> class.
        /// </summary>
        /// <param name="code">Code assigned to the multimedia.</param>
        /// <param name="description">Description.</param>
        /// <param name="excludeFromGallery">True if the image should be excluded from galleries.</param>
        /// <param name="imageHeight">Image height.</param>
        /// <param name="imageWidth">Image width.</param>
        /// <param name="isDefault">True if the multimedia is the default for this type.</param>
        /// <param name="thumbnails">Thumbnails of the images.</param>
        /// <param name="type">Type of multimedia.</param>
        /// <param name="url">URL to view multimedia at.</param>
        public CartItemMultimedia(string code = default(string), string description = default(string), bool excludeFromGallery = default(bool), int imageHeight = default(int), int imageWidth = default(int), bool isDefault = default(bool), List<CartItemMultimediaThumbnail> thumbnails = default(List<CartItemMultimediaThumbnail>), TypeEnum? type = default(TypeEnum?), string url = default(string))
        {
            this.Code = code;
            this.Description = description;
            this.ExcludeFromGallery = excludeFromGallery;
            this.ImageHeight = imageHeight;
            this.ImageWidth = imageWidth;
            this.IsDefault = isDefault;
            this.Thumbnails = thumbnails;
            this.Type = type;
            this.Url = url;
        }

        /// <summary>
        /// Code assigned to the multimedia
        /// </summary>
        /// <value>Code assigned to the multimedia</value>
        [DataMember(Name="code", EmitDefaultValue=false)]
        public string Code { get; set; }

        /// <summary>
        /// Description
        /// </summary>
        /// <value>Description</value>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }

        /// <summary>
        /// True if the image should be excluded from galleries
        /// </summary>
        /// <value>True if the image should be excluded from galleries</value>
        [DataMember(Name="exclude_from_gallery", EmitDefaultValue=false)]
        public bool ExcludeFromGallery { get; set; }

        /// <summary>
        /// Image height
        /// </summary>
        /// <value>Image height</value>
        [DataMember(Name="image_height", EmitDefaultValue=false)]
        public int ImageHeight { get; set; }

        /// <summary>
        /// Image width
        /// </summary>
        /// <value>Image width</value>
        [DataMember(Name="image_width", EmitDefaultValue=false)]
        public int ImageWidth { get; set; }

        /// <summary>
        /// True if the multimedia is the default for this type
        /// </summary>
        /// <value>True if the multimedia is the default for this type</value>
        [DataMember(Name="is_default", EmitDefaultValue=false)]
        public bool IsDefault { get; set; }

        /// <summary>
        /// Thumbnails of the images
        /// </summary>
        /// <value>Thumbnails of the images</value>
        [DataMember(Name="thumbnails", EmitDefaultValue=false)]
        public List<CartItemMultimediaThumbnail> Thumbnails { get; set; }


        /// <summary>
        /// URL to view multimedia at
        /// </summary>
        /// <value>URL to view multimedia at</value>
        [DataMember(Name="url", EmitDefaultValue=false)]
        public string Url { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CartItemMultimedia {\n");
            sb.Append("  Code: ").Append(Code).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  ExcludeFromGallery: ").Append(ExcludeFromGallery).Append("\n");
            sb.Append("  ImageHeight: ").Append(ImageHeight).Append("\n");
            sb.Append("  ImageWidth: ").Append(ImageWidth).Append("\n");
            sb.Append("  IsDefault: ").Append(IsDefault).Append("\n");
            sb.Append("  Thumbnails: ").Append(Thumbnails).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Url: ").Append(Url).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CartItemMultimedia);
        }

        /// <summary>
        /// Returns true if CartItemMultimedia instances are equal
        /// </summary>
        /// <param name="input">Instance of CartItemMultimedia to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CartItemMultimedia input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Code == input.Code ||
                    (this.Code != null &&
                    this.Code.Equals(input.Code))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.ExcludeFromGallery == input.ExcludeFromGallery ||
                    (this.ExcludeFromGallery != null &&
                    this.ExcludeFromGallery.Equals(input.ExcludeFromGallery))
                ) && 
                (
                    this.ImageHeight == input.ImageHeight ||
                    (this.ImageHeight != null &&
                    this.ImageHeight.Equals(input.ImageHeight))
                ) && 
                (
                    this.ImageWidth == input.ImageWidth ||
                    (this.ImageWidth != null &&
                    this.ImageWidth.Equals(input.ImageWidth))
                ) && 
                (
                    this.IsDefault == input.IsDefault ||
                    (this.IsDefault != null &&
                    this.IsDefault.Equals(input.IsDefault))
                ) && 
                (
                    this.Thumbnails == input.Thumbnails ||
                    this.Thumbnails != null &&
                    input.Thumbnails != null &&
                    this.Thumbnails.SequenceEqual(input.Thumbnails)
                ) && 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.Url == input.Url ||
                    (this.Url != null &&
                    this.Url.Equals(input.Url))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Code != null)
                    hashCode = hashCode * 59 + this.Code.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                if (this.ExcludeFromGallery != null)
                    hashCode = hashCode * 59 + this.ExcludeFromGallery.GetHashCode();
                if (this.ImageHeight != null)
                    hashCode = hashCode * 59 + this.ImageHeight.GetHashCode();
                if (this.ImageWidth != null)
                    hashCode = hashCode * 59 + this.ImageWidth.GetHashCode();
                if (this.IsDefault != null)
                    hashCode = hashCode * 59 + this.IsDefault.GetHashCode();
                if (this.Thumbnails != null)
                    hashCode = hashCode * 59 + this.Thumbnails.GetHashCode();
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.Url != null)
                    hashCode = hashCode * 59 + this.Url.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
