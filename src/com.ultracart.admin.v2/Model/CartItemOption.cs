/* 
 * UltraCart Rest API V2
 *
 * This is the next generation UltraCart REST API...
 *
 * OpenAPI spec version: 2.0.0
 * Contact: support@ultracart.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = com.ultracart.admin.v2.Client.SwaggerDateConverter;

namespace com.ultracart.admin.v2.Model
{
    /// <summary>
    /// CartItemOption
    /// </summary>
    [DataContract]
    public partial class CartItemOption :  IEquatable<CartItemOption>, IValidatableObject
    {
        /// <summary>
        /// Type of option
        /// </summary>
        /// <value>Type of option</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TypeEnum
        {
            
            /// <summary>
            /// Enum Single for "single"
            /// </summary>
            [EnumMember(Value = "single")]
            Single,
            
            /// <summary>
            /// Enum Multiline for "multiline"
            /// </summary>
            [EnumMember(Value = "multiline")]
            Multiline,
            
            /// <summary>
            /// Enum Dropdown for "dropdown"
            /// </summary>
            [EnumMember(Value = "dropdown")]
            Dropdown,
            
            /// <summary>
            /// Enum Hidden for "hidden"
            /// </summary>
            [EnumMember(Value = "hidden")]
            Hidden,
            
            /// <summary>
            /// Enum Radio for "radio"
            /// </summary>
            [EnumMember(Value = "radio")]
            Radio,
            
            /// <summary>
            /// Enum Fixed for "fixed"
            /// </summary>
            [EnumMember(Value = "fixed")]
            Fixed
        }

        /// <summary>
        /// Type of option
        /// </summary>
        /// <value>Type of option</value>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public TypeEnum? Type { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="CartItemOption" /> class.
        /// </summary>
        /// <param name="CostIfSpecified">CostIfSpecified.</param>
        /// <param name="CostPerLetter">CostPerLetter.</param>
        /// <param name="CostPerLine">CostPerLine.</param>
        /// <param name="IgnoreIfDefault">True if the default answer is ignored.</param>
        /// <param name="Label">Display label for the option.</param>
        /// <param name="Name">Name of the option.</param>
        /// <param name="OneTimeFee">Charge the fee a single time instead of multiplying by the quantity.</param>
        /// <param name="OptionOid">Unique identifier for the option.</param>
        /// <param name="Required">True if the customer is required to select a value.</param>
        /// <param name="SelectedValue">The value of the option specified by the customer.</param>
        /// <param name="Type">Type of option.</param>
        /// <param name="Values">Values that the customer can select from for radio or select type options.</param>
        public CartItemOption(Currency CostIfSpecified = default(Currency), Currency CostPerLetter = default(Currency), Currency CostPerLine = default(Currency), bool? IgnoreIfDefault = default(bool?), string Label = default(string), string Name = default(string), bool? OneTimeFee = default(bool?), int? OptionOid = default(int?), bool? Required = default(bool?), string SelectedValue = default(string), TypeEnum? Type = default(TypeEnum?), List<CartItemOptionValue> Values = default(List<CartItemOptionValue>))
        {
            this.CostIfSpecified = CostIfSpecified;
            this.CostPerLetter = CostPerLetter;
            this.CostPerLine = CostPerLine;
            this.IgnoreIfDefault = IgnoreIfDefault;
            this.Label = Label;
            this.Name = Name;
            this.OneTimeFee = OneTimeFee;
            this.OptionOid = OptionOid;
            this.Required = Required;
            this.SelectedValue = SelectedValue;
            this.Type = Type;
            this.Values = Values;
        }
        
        /// <summary>
        /// Gets or Sets CostIfSpecified
        /// </summary>
        [DataMember(Name="cost_if_specified", EmitDefaultValue=false)]
        public Currency CostIfSpecified { get; set; }

        /// <summary>
        /// Gets or Sets CostPerLetter
        /// </summary>
        [DataMember(Name="cost_per_letter", EmitDefaultValue=false)]
        public Currency CostPerLetter { get; set; }

        /// <summary>
        /// Gets or Sets CostPerLine
        /// </summary>
        [DataMember(Name="cost_per_line", EmitDefaultValue=false)]
        public Currency CostPerLine { get; set; }

        /// <summary>
        /// True if the default answer is ignored
        /// </summary>
        /// <value>True if the default answer is ignored</value>
        [DataMember(Name="ignore_if_default", EmitDefaultValue=false)]
        public bool? IgnoreIfDefault { get; set; }

        /// <summary>
        /// Display label for the option
        /// </summary>
        /// <value>Display label for the option</value>
        [DataMember(Name="label", EmitDefaultValue=false)]
        public string Label { get; set; }

        /// <summary>
        /// Name of the option
        /// </summary>
        /// <value>Name of the option</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Charge the fee a single time instead of multiplying by the quantity
        /// </summary>
        /// <value>Charge the fee a single time instead of multiplying by the quantity</value>
        [DataMember(Name="one_time_fee", EmitDefaultValue=false)]
        public bool? OneTimeFee { get; set; }

        /// <summary>
        /// Unique identifier for the option
        /// </summary>
        /// <value>Unique identifier for the option</value>
        [DataMember(Name="option_oid", EmitDefaultValue=false)]
        public int? OptionOid { get; set; }

        /// <summary>
        /// True if the customer is required to select a value
        /// </summary>
        /// <value>True if the customer is required to select a value</value>
        [DataMember(Name="required", EmitDefaultValue=false)]
        public bool? Required { get; set; }

        /// <summary>
        /// The value of the option specified by the customer
        /// </summary>
        /// <value>The value of the option specified by the customer</value>
        [DataMember(Name="selected_value", EmitDefaultValue=false)]
        public string SelectedValue { get; set; }


        /// <summary>
        /// Values that the customer can select from for radio or select type options
        /// </summary>
        /// <value>Values that the customer can select from for radio or select type options</value>
        [DataMember(Name="values", EmitDefaultValue=false)]
        public List<CartItemOptionValue> Values { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CartItemOption {\n");
            sb.Append("  CostIfSpecified: ").Append(CostIfSpecified).Append("\n");
            sb.Append("  CostPerLetter: ").Append(CostPerLetter).Append("\n");
            sb.Append("  CostPerLine: ").Append(CostPerLine).Append("\n");
            sb.Append("  IgnoreIfDefault: ").Append(IgnoreIfDefault).Append("\n");
            sb.Append("  Label: ").Append(Label).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  OneTimeFee: ").Append(OneTimeFee).Append("\n");
            sb.Append("  OptionOid: ").Append(OptionOid).Append("\n");
            sb.Append("  Required: ").Append(Required).Append("\n");
            sb.Append("  SelectedValue: ").Append(SelectedValue).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Values: ").Append(Values).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as CartItemOption);
        }

        /// <summary>
        /// Returns true if CartItemOption instances are equal
        /// </summary>
        /// <param name="other">Instance of CartItemOption to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CartItemOption other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.CostIfSpecified == other.CostIfSpecified ||
                    this.CostIfSpecified != null &&
                    this.CostIfSpecified.Equals(other.CostIfSpecified)
                ) && 
                (
                    this.CostPerLetter == other.CostPerLetter ||
                    this.CostPerLetter != null &&
                    this.CostPerLetter.Equals(other.CostPerLetter)
                ) && 
                (
                    this.CostPerLine == other.CostPerLine ||
                    this.CostPerLine != null &&
                    this.CostPerLine.Equals(other.CostPerLine)
                ) && 
                (
                    this.IgnoreIfDefault == other.IgnoreIfDefault ||
                    this.IgnoreIfDefault != null &&
                    this.IgnoreIfDefault.Equals(other.IgnoreIfDefault)
                ) && 
                (
                    this.Label == other.Label ||
                    this.Label != null &&
                    this.Label.Equals(other.Label)
                ) && 
                (
                    this.Name == other.Name ||
                    this.Name != null &&
                    this.Name.Equals(other.Name)
                ) && 
                (
                    this.OneTimeFee == other.OneTimeFee ||
                    this.OneTimeFee != null &&
                    this.OneTimeFee.Equals(other.OneTimeFee)
                ) && 
                (
                    this.OptionOid == other.OptionOid ||
                    this.OptionOid != null &&
                    this.OptionOid.Equals(other.OptionOid)
                ) && 
                (
                    this.Required == other.Required ||
                    this.Required != null &&
                    this.Required.Equals(other.Required)
                ) && 
                (
                    this.SelectedValue == other.SelectedValue ||
                    this.SelectedValue != null &&
                    this.SelectedValue.Equals(other.SelectedValue)
                ) && 
                (
                    this.Type == other.Type ||
                    this.Type != null &&
                    this.Type.Equals(other.Type)
                ) && 
                (
                    this.Values == other.Values ||
                    this.Values != null &&
                    this.Values.SequenceEqual(other.Values)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.CostIfSpecified != null)
                    hash = hash * 59 + this.CostIfSpecified.GetHashCode();
                if (this.CostPerLetter != null)
                    hash = hash * 59 + this.CostPerLetter.GetHashCode();
                if (this.CostPerLine != null)
                    hash = hash * 59 + this.CostPerLine.GetHashCode();
                if (this.IgnoreIfDefault != null)
                    hash = hash * 59 + this.IgnoreIfDefault.GetHashCode();
                if (this.Label != null)
                    hash = hash * 59 + this.Label.GetHashCode();
                if (this.Name != null)
                    hash = hash * 59 + this.Name.GetHashCode();
                if (this.OneTimeFee != null)
                    hash = hash * 59 + this.OneTimeFee.GetHashCode();
                if (this.OptionOid != null)
                    hash = hash * 59 + this.OptionOid.GetHashCode();
                if (this.Required != null)
                    hash = hash * 59 + this.Required.GetHashCode();
                if (this.SelectedValue != null)
                    hash = hash * 59 + this.SelectedValue.GetHashCode();
                if (this.Type != null)
                    hash = hash * 59 + this.Type.GetHashCode();
                if (this.Values != null)
                    hash = hash * 59 + this.Values.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // SelectedValue (string) maxLength
            if(this.SelectedValue != null && this.SelectedValue.Length > 1024)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for SelectedValue, length must be less than 1024.", new [] { "SelectedValue" });
            }

            yield break;
        }
    }

}
