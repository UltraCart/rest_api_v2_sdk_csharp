/* 
 * UltraCart Rest API V2
 *
 * This is the next generation UltraCart REST API...
 *
 * OpenAPI spec version: 2.0.0
 * Contact: support@ultracart.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = com.ultracart.admin.v2.Client.SwaggerDateConverter;

namespace com.ultracart.admin.v2.Model
{
    /// <summary>
    /// CartItemVariationSelection
    /// </summary>
    [DataContract]
    public partial class CartItemVariationSelection :  IEquatable<CartItemVariationSelection>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CartItemVariationSelection" /> class.
        /// </summary>
        /// <param name="VariationName">Variation name.</param>
        /// <param name="VariationValue">Variation value.</param>
        public CartItemVariationSelection(string VariationName = default(string), string VariationValue = default(string))
        {
            this.VariationName = VariationName;
            this.VariationValue = VariationValue;
        }
        
        /// <summary>
        /// Variation name
        /// </summary>
        /// <value>Variation name</value>
        [DataMember(Name="variation_name", EmitDefaultValue=false)]
        public string VariationName { get; set; }

        /// <summary>
        /// Variation value
        /// </summary>
        /// <value>Variation value</value>
        [DataMember(Name="variation_value", EmitDefaultValue=false)]
        public string VariationValue { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CartItemVariationSelection {\n");
            sb.Append("  VariationName: ").Append(VariationName).Append("\n");
            sb.Append("  VariationValue: ").Append(VariationValue).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as CartItemVariationSelection);
        }

        /// <summary>
        /// Returns true if CartItemVariationSelection instances are equal
        /// </summary>
        /// <param name="other">Instance of CartItemVariationSelection to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CartItemVariationSelection other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.VariationName == other.VariationName ||
                    this.VariationName != null &&
                    this.VariationName.Equals(other.VariationName)
                ) && 
                (
                    this.VariationValue == other.VariationValue ||
                    this.VariationValue != null &&
                    this.VariationValue.Equals(other.VariationValue)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.VariationName != null)
                    hash = hash * 59 + this.VariationName.GetHashCode();
                if (this.VariationValue != null)
                    hash = hash * 59 + this.VariationValue.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
