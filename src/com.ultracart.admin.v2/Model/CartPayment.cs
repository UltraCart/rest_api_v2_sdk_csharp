/* 
 * UltraCart Rest API V2
 *
 * This is the next generation UltraCart REST API...
 *
 * OpenAPI spec version: 2.0.0
 * Contact: support@ultracart.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = com.ultracart.admin.v2.Client.SwaggerDateConverter;

namespace com.ultracart.admin.v2.Model
{
    /// <summary>
    /// CartPayment
    /// </summary>
    [DataContract]
    public partial class CartPayment :  IEquatable<CartPayment>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CartPayment" /> class.
        /// </summary>
        /// <param name="Amazon">Amazon.</param>
        /// <param name="Check">Check.</param>
        /// <param name="CreditCard">CreditCard.</param>
        /// <param name="PaymentMethod">Payment method.</param>
        /// <param name="PurchaseOrder">PurchaseOrder.</param>
        /// <param name="RtgCode">Rotating transaction gateway code.</param>
        public CartPayment(CartPaymentAmazon Amazon = default(CartPaymentAmazon), CartPaymentCheck Check = default(CartPaymentCheck), CartPaymentCreditCard CreditCard = default(CartPaymentCreditCard), string PaymentMethod = default(string), CartPaymentPurchaseOrder PurchaseOrder = default(CartPaymentPurchaseOrder), string RtgCode = default(string))
        {
            this.Amazon = Amazon;
            this.Check = Check;
            this.CreditCard = CreditCard;
            this.PaymentMethod = PaymentMethod;
            this.PurchaseOrder = PurchaseOrder;
            this.RtgCode = RtgCode;
        }
        
        /// <summary>
        /// Gets or Sets Amazon
        /// </summary>
        [DataMember(Name="amazon", EmitDefaultValue=false)]
        public CartPaymentAmazon Amazon { get; set; }

        /// <summary>
        /// Gets or Sets Check
        /// </summary>
        [DataMember(Name="check", EmitDefaultValue=false)]
        public CartPaymentCheck Check { get; set; }

        /// <summary>
        /// Gets or Sets CreditCard
        /// </summary>
        [DataMember(Name="credit_card", EmitDefaultValue=false)]
        public CartPaymentCreditCard CreditCard { get; set; }

        /// <summary>
        /// Payment method
        /// </summary>
        /// <value>Payment method</value>
        [DataMember(Name="payment_method", EmitDefaultValue=false)]
        public string PaymentMethod { get; set; }

        /// <summary>
        /// Gets or Sets PurchaseOrder
        /// </summary>
        [DataMember(Name="purchase_order", EmitDefaultValue=false)]
        public CartPaymentPurchaseOrder PurchaseOrder { get; set; }

        /// <summary>
        /// Rotating transaction gateway code
        /// </summary>
        /// <value>Rotating transaction gateway code</value>
        [DataMember(Name="rtg_code", EmitDefaultValue=false)]
        public string RtgCode { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CartPayment {\n");
            sb.Append("  Amazon: ").Append(Amazon).Append("\n");
            sb.Append("  Check: ").Append(Check).Append("\n");
            sb.Append("  CreditCard: ").Append(CreditCard).Append("\n");
            sb.Append("  PaymentMethod: ").Append(PaymentMethod).Append("\n");
            sb.Append("  PurchaseOrder: ").Append(PurchaseOrder).Append("\n");
            sb.Append("  RtgCode: ").Append(RtgCode).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as CartPayment);
        }

        /// <summary>
        /// Returns true if CartPayment instances are equal
        /// </summary>
        /// <param name="other">Instance of CartPayment to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CartPayment other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Amazon == other.Amazon ||
                    this.Amazon != null &&
                    this.Amazon.Equals(other.Amazon)
                ) && 
                (
                    this.Check == other.Check ||
                    this.Check != null &&
                    this.Check.Equals(other.Check)
                ) && 
                (
                    this.CreditCard == other.CreditCard ||
                    this.CreditCard != null &&
                    this.CreditCard.Equals(other.CreditCard)
                ) && 
                (
                    this.PaymentMethod == other.PaymentMethod ||
                    this.PaymentMethod != null &&
                    this.PaymentMethod.Equals(other.PaymentMethod)
                ) && 
                (
                    this.PurchaseOrder == other.PurchaseOrder ||
                    this.PurchaseOrder != null &&
                    this.PurchaseOrder.Equals(other.PurchaseOrder)
                ) && 
                (
                    this.RtgCode == other.RtgCode ||
                    this.RtgCode != null &&
                    this.RtgCode.Equals(other.RtgCode)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Amazon != null)
                    hash = hash * 59 + this.Amazon.GetHashCode();
                if (this.Check != null)
                    hash = hash * 59 + this.Check.GetHashCode();
                if (this.CreditCard != null)
                    hash = hash * 59 + this.CreditCard.GetHashCode();
                if (this.PaymentMethod != null)
                    hash = hash * 59 + this.PaymentMethod.GetHashCode();
                if (this.PurchaseOrder != null)
                    hash = hash * 59 + this.PurchaseOrder.GetHashCode();
                if (this.RtgCode != null)
                    hash = hash * 59 + this.RtgCode.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
