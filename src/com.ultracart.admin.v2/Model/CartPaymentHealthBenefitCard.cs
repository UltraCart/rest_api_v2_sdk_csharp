/* 
 * UltraCart Rest API V2
 *
 * UltraCart REST API Version 2
 *
 * OpenAPI spec version: 2.0.0
 * Contact: support@ultracart.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = com.ultracart.admin.v2.Client.SwaggerDateConverter;

namespace com.ultracart.admin.v2.Model
{
    /// <summary>
    /// CartPaymentHealthBenefitCard
    /// </summary>
    [DataContract]
    public partial class CartPaymentHealthBenefitCard :  IEquatable<CartPaymentHealthBenefitCard>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CartPaymentHealthBenefitCard" /> class.
        /// </summary>
        /// <param name="healthBenefitCardExpirationMonth">Health benefit expiration month (1-12).</param>
        /// <param name="healthBenefitCardExpirationYear">Health benefit card expiration year (four digit year).</param>
        /// <param name="healthBenefitCardNumber">Health benefit card number (masked to the last 4).</param>
        /// <param name="healthBenefitCardNumberToken">Hosted field token for the card number.</param>
        /// <param name="healthBenefitCardVerificationNumber">Health benefit card verification number (masked).</param>
        /// <param name="healthBenefitCardVerificationNumberToken">Hosted field token for the health benefit card verification number.</param>
        public CartPaymentHealthBenefitCard(int? healthBenefitCardExpirationMonth = default(int?), int? healthBenefitCardExpirationYear = default(int?), string healthBenefitCardNumber = default(string), string healthBenefitCardNumberToken = default(string), string healthBenefitCardVerificationNumber = default(string), string healthBenefitCardVerificationNumberToken = default(string))
        {
            this.HealthBenefitCardExpirationMonth = healthBenefitCardExpirationMonth;
            this.HealthBenefitCardExpirationYear = healthBenefitCardExpirationYear;
            this.HealthBenefitCardNumber = healthBenefitCardNumber;
            this.HealthBenefitCardNumberToken = healthBenefitCardNumberToken;
            this.HealthBenefitCardVerificationNumber = healthBenefitCardVerificationNumber;
            this.HealthBenefitCardVerificationNumberToken = healthBenefitCardVerificationNumberToken;
        }
        
        /// <summary>
        /// Health benefit expiration month (1-12)
        /// </summary>
        /// <value>Health benefit expiration month (1-12)</value>
        [DataMember(Name="health_benefit_card_expiration_month", EmitDefaultValue=false)]
        public int? HealthBenefitCardExpirationMonth { get; set; }

        /// <summary>
        /// Health benefit card expiration year (four digit year)
        /// </summary>
        /// <value>Health benefit card expiration year (four digit year)</value>
        [DataMember(Name="health_benefit_card_expiration_year", EmitDefaultValue=false)]
        public int? HealthBenefitCardExpirationYear { get; set; }

        /// <summary>
        /// Health benefit card number (masked to the last 4)
        /// </summary>
        /// <value>Health benefit card number (masked to the last 4)</value>
        [DataMember(Name="health_benefit_card_number", EmitDefaultValue=false)]
        public string HealthBenefitCardNumber { get; set; }

        /// <summary>
        /// Hosted field token for the card number
        /// </summary>
        /// <value>Hosted field token for the card number</value>
        [DataMember(Name="health_benefit_card_number_token", EmitDefaultValue=false)]
        public string HealthBenefitCardNumberToken { get; set; }

        /// <summary>
        /// Health benefit card verification number (masked)
        /// </summary>
        /// <value>Health benefit card verification number (masked)</value>
        [DataMember(Name="health_benefit_card_verification_number", EmitDefaultValue=false)]
        public string HealthBenefitCardVerificationNumber { get; set; }

        /// <summary>
        /// Hosted field token for the health benefit card verification number
        /// </summary>
        /// <value>Hosted field token for the health benefit card verification number</value>
        [DataMember(Name="health_benefit_card_verification_number_token", EmitDefaultValue=false)]
        public string HealthBenefitCardVerificationNumberToken { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CartPaymentHealthBenefitCard {\n");
            sb.Append("  HealthBenefitCardExpirationMonth: ").Append(HealthBenefitCardExpirationMonth).Append("\n");
            sb.Append("  HealthBenefitCardExpirationYear: ").Append(HealthBenefitCardExpirationYear).Append("\n");
            sb.Append("  HealthBenefitCardNumber: ").Append(HealthBenefitCardNumber).Append("\n");
            sb.Append("  HealthBenefitCardNumberToken: ").Append(HealthBenefitCardNumberToken).Append("\n");
            sb.Append("  HealthBenefitCardVerificationNumber: ").Append(HealthBenefitCardVerificationNumber).Append("\n");
            sb.Append("  HealthBenefitCardVerificationNumberToken: ").Append(HealthBenefitCardVerificationNumberToken).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CartPaymentHealthBenefitCard);
        }

        /// <summary>
        /// Returns true if CartPaymentHealthBenefitCard instances are equal
        /// </summary>
        /// <param name="input">Instance of CartPaymentHealthBenefitCard to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CartPaymentHealthBenefitCard input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.HealthBenefitCardExpirationMonth == input.HealthBenefitCardExpirationMonth ||
                    (this.HealthBenefitCardExpirationMonth != null &&
                    this.HealthBenefitCardExpirationMonth.Equals(input.HealthBenefitCardExpirationMonth))
                ) && 
                (
                    this.HealthBenefitCardExpirationYear == input.HealthBenefitCardExpirationYear ||
                    (this.HealthBenefitCardExpirationYear != null &&
                    this.HealthBenefitCardExpirationYear.Equals(input.HealthBenefitCardExpirationYear))
                ) && 
                (
                    this.HealthBenefitCardNumber == input.HealthBenefitCardNumber ||
                    (this.HealthBenefitCardNumber != null &&
                    this.HealthBenefitCardNumber.Equals(input.HealthBenefitCardNumber))
                ) && 
                (
                    this.HealthBenefitCardNumberToken == input.HealthBenefitCardNumberToken ||
                    (this.HealthBenefitCardNumberToken != null &&
                    this.HealthBenefitCardNumberToken.Equals(input.HealthBenefitCardNumberToken))
                ) && 
                (
                    this.HealthBenefitCardVerificationNumber == input.HealthBenefitCardVerificationNumber ||
                    (this.HealthBenefitCardVerificationNumber != null &&
                    this.HealthBenefitCardVerificationNumber.Equals(input.HealthBenefitCardVerificationNumber))
                ) && 
                (
                    this.HealthBenefitCardVerificationNumberToken == input.HealthBenefitCardVerificationNumberToken ||
                    (this.HealthBenefitCardVerificationNumberToken != null &&
                    this.HealthBenefitCardVerificationNumberToken.Equals(input.HealthBenefitCardVerificationNumberToken))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.HealthBenefitCardExpirationMonth != null)
                    hashCode = hashCode * 59 + this.HealthBenefitCardExpirationMonth.GetHashCode();
                if (this.HealthBenefitCardExpirationYear != null)
                    hashCode = hashCode * 59 + this.HealthBenefitCardExpirationYear.GetHashCode();
                if (this.HealthBenefitCardNumber != null)
                    hashCode = hashCode * 59 + this.HealthBenefitCardNumber.GetHashCode();
                if (this.HealthBenefitCardNumberToken != null)
                    hashCode = hashCode * 59 + this.HealthBenefitCardNumberToken.GetHashCode();
                if (this.HealthBenefitCardVerificationNumber != null)
                    hashCode = hashCode * 59 + this.HealthBenefitCardVerificationNumber.GetHashCode();
                if (this.HealthBenefitCardVerificationNumberToken != null)
                    hashCode = hashCode * 59 + this.HealthBenefitCardVerificationNumberToken.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
