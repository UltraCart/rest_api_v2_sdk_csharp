/* 
 * UltraCart Rest API V2
 *
 * UltraCart REST API Version 2
 *
 * OpenAPI spec version: 2.0.0
 * Contact: support@ultracart.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = com.ultracart.admin.v2.Client.SwaggerDateConverter;

namespace com.ultracart.admin.v2.Model
{
    /// <summary>
    /// CartSettings
    /// </summary>
    [DataContract]
    public partial class CartSettings :  IEquatable<CartSettings>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CartSettings" /> class.
        /// </summary>
        /// <param name="billing">billing.</param>
        /// <param name="gift">gift.</param>
        /// <param name="payment">payment.</param>
        /// <param name="shipping">shipping.</param>
        /// <param name="taxes">taxes.</param>
        /// <param name="terms">terms.</param>
        public CartSettings(CartSettingsBilling billing = default(CartSettingsBilling), CartSettingsGift gift = default(CartSettingsGift), CartSettingsPayment payment = default(CartSettingsPayment), CartSettingsShipping shipping = default(CartSettingsShipping), CartSettingsTaxes taxes = default(CartSettingsTaxes), CartSettingsTerms terms = default(CartSettingsTerms))
        {
            this.Billing = billing;
            this.Gift = gift;
            this.Payment = payment;
            this.Shipping = shipping;
            this.Taxes = taxes;
            this.Terms = terms;
        }
        
        /// <summary>
        /// Gets or Sets Billing
        /// </summary>
        [DataMember(Name="billing", EmitDefaultValue=false)]
        public CartSettingsBilling Billing { get; set; }

        /// <summary>
        /// Gets or Sets Gift
        /// </summary>
        [DataMember(Name="gift", EmitDefaultValue=false)]
        public CartSettingsGift Gift { get; set; }

        /// <summary>
        /// Gets or Sets Payment
        /// </summary>
        [DataMember(Name="payment", EmitDefaultValue=false)]
        public CartSettingsPayment Payment { get; set; }

        /// <summary>
        /// Gets or Sets Shipping
        /// </summary>
        [DataMember(Name="shipping", EmitDefaultValue=false)]
        public CartSettingsShipping Shipping { get; set; }

        /// <summary>
        /// Gets or Sets Taxes
        /// </summary>
        [DataMember(Name="taxes", EmitDefaultValue=false)]
        public CartSettingsTaxes Taxes { get; set; }

        /// <summary>
        /// Gets or Sets Terms
        /// </summary>
        [DataMember(Name="terms", EmitDefaultValue=false)]
        public CartSettingsTerms Terms { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CartSettings {\n");
            sb.Append("  Billing: ").Append(Billing).Append("\n");
            sb.Append("  Gift: ").Append(Gift).Append("\n");
            sb.Append("  Payment: ").Append(Payment).Append("\n");
            sb.Append("  Shipping: ").Append(Shipping).Append("\n");
            sb.Append("  Taxes: ").Append(Taxes).Append("\n");
            sb.Append("  Terms: ").Append(Terms).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CartSettings);
        }

        /// <summary>
        /// Returns true if CartSettings instances are equal
        /// </summary>
        /// <param name="input">Instance of CartSettings to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CartSettings input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Billing == input.Billing ||
                    (this.Billing != null &&
                    this.Billing.Equals(input.Billing))
                ) && 
                (
                    this.Gift == input.Gift ||
                    (this.Gift != null &&
                    this.Gift.Equals(input.Gift))
                ) && 
                (
                    this.Payment == input.Payment ||
                    (this.Payment != null &&
                    this.Payment.Equals(input.Payment))
                ) && 
                (
                    this.Shipping == input.Shipping ||
                    (this.Shipping != null &&
                    this.Shipping.Equals(input.Shipping))
                ) && 
                (
                    this.Taxes == input.Taxes ||
                    (this.Taxes != null &&
                    this.Taxes.Equals(input.Taxes))
                ) && 
                (
                    this.Terms == input.Terms ||
                    (this.Terms != null &&
                    this.Terms.Equals(input.Terms))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Billing != null)
                    hashCode = hashCode * 59 + this.Billing.GetHashCode();
                if (this.Gift != null)
                    hashCode = hashCode * 59 + this.Gift.GetHashCode();
                if (this.Payment != null)
                    hashCode = hashCode * 59 + this.Payment.GetHashCode();
                if (this.Shipping != null)
                    hashCode = hashCode * 59 + this.Shipping.GetHashCode();
                if (this.Taxes != null)
                    hashCode = hashCode * 59 + this.Taxes.GetHashCode();
                if (this.Terms != null)
                    hashCode = hashCode * 59 + this.Terms.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
