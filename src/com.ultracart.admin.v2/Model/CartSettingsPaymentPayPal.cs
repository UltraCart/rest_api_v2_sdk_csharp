/* 
 * UltraCart Rest API V2
 *
 * This is the next generation UltraCart REST API...
 *
 * OpenAPI spec version: 2.0.0
 * Contact: support@ultracart.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = com.ultracart.admin.v2.Client.SwaggerDateConverter;

namespace com.ultracart.admin.v2.Model
{
    /// <summary>
    /// CartSettingsPaymentPayPal
    /// </summary>
    [DataContract]
    public partial class CartSettingsPaymentPayPal :  IEquatable<CartSettingsPaymentPayPal>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CartSettingsPaymentPayPal" /> class.
        /// </summary>
        /// <param name="PaypalButtonAltText">PayPal button alt text.</param>
        /// <param name="PaypalButtonUrl">PayPal button URL.</param>
        /// <param name="PaypalCreditButtonUrl">PayPal Credit button URL.</param>
        /// <param name="PaypalCreditLegalImageUrl">PayPal Credit legal image URL.</param>
        /// <param name="PaypalCreditLegalUrl">PayPal Credit legal URL.</param>
        public CartSettingsPaymentPayPal(string PaypalButtonAltText = default(string), string PaypalButtonUrl = default(string), string PaypalCreditButtonUrl = default(string), string PaypalCreditLegalImageUrl = default(string), string PaypalCreditLegalUrl = default(string))
        {
            this.PaypalButtonAltText = PaypalButtonAltText;
            this.PaypalButtonUrl = PaypalButtonUrl;
            this.PaypalCreditButtonUrl = PaypalCreditButtonUrl;
            this.PaypalCreditLegalImageUrl = PaypalCreditLegalImageUrl;
            this.PaypalCreditLegalUrl = PaypalCreditLegalUrl;
        }
        
        /// <summary>
        /// PayPal button alt text
        /// </summary>
        /// <value>PayPal button alt text</value>
        [DataMember(Name="paypal_button_alt_text", EmitDefaultValue=false)]
        public string PaypalButtonAltText { get; set; }

        /// <summary>
        /// PayPal button URL
        /// </summary>
        /// <value>PayPal button URL</value>
        [DataMember(Name="paypal_button_url", EmitDefaultValue=false)]
        public string PaypalButtonUrl { get; set; }

        /// <summary>
        /// PayPal Credit button URL
        /// </summary>
        /// <value>PayPal Credit button URL</value>
        [DataMember(Name="paypal_credit_button_url", EmitDefaultValue=false)]
        public string PaypalCreditButtonUrl { get; set; }

        /// <summary>
        /// PayPal Credit legal image URL
        /// </summary>
        /// <value>PayPal Credit legal image URL</value>
        [DataMember(Name="paypal_credit_legal_image_url", EmitDefaultValue=false)]
        public string PaypalCreditLegalImageUrl { get; set; }

        /// <summary>
        /// PayPal Credit legal URL
        /// </summary>
        /// <value>PayPal Credit legal URL</value>
        [DataMember(Name="paypal_credit_legal_url", EmitDefaultValue=false)]
        public string PaypalCreditLegalUrl { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CartSettingsPaymentPayPal {\n");
            sb.Append("  PaypalButtonAltText: ").Append(PaypalButtonAltText).Append("\n");
            sb.Append("  PaypalButtonUrl: ").Append(PaypalButtonUrl).Append("\n");
            sb.Append("  PaypalCreditButtonUrl: ").Append(PaypalCreditButtonUrl).Append("\n");
            sb.Append("  PaypalCreditLegalImageUrl: ").Append(PaypalCreditLegalImageUrl).Append("\n");
            sb.Append("  PaypalCreditLegalUrl: ").Append(PaypalCreditLegalUrl).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as CartSettingsPaymentPayPal);
        }

        /// <summary>
        /// Returns true if CartSettingsPaymentPayPal instances are equal
        /// </summary>
        /// <param name="other">Instance of CartSettingsPaymentPayPal to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CartSettingsPaymentPayPal other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.PaypalButtonAltText == other.PaypalButtonAltText ||
                    this.PaypalButtonAltText != null &&
                    this.PaypalButtonAltText.Equals(other.PaypalButtonAltText)
                ) && 
                (
                    this.PaypalButtonUrl == other.PaypalButtonUrl ||
                    this.PaypalButtonUrl != null &&
                    this.PaypalButtonUrl.Equals(other.PaypalButtonUrl)
                ) && 
                (
                    this.PaypalCreditButtonUrl == other.PaypalCreditButtonUrl ||
                    this.PaypalCreditButtonUrl != null &&
                    this.PaypalCreditButtonUrl.Equals(other.PaypalCreditButtonUrl)
                ) && 
                (
                    this.PaypalCreditLegalImageUrl == other.PaypalCreditLegalImageUrl ||
                    this.PaypalCreditLegalImageUrl != null &&
                    this.PaypalCreditLegalImageUrl.Equals(other.PaypalCreditLegalImageUrl)
                ) && 
                (
                    this.PaypalCreditLegalUrl == other.PaypalCreditLegalUrl ||
                    this.PaypalCreditLegalUrl != null &&
                    this.PaypalCreditLegalUrl.Equals(other.PaypalCreditLegalUrl)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.PaypalButtonAltText != null)
                    hash = hash * 59 + this.PaypalButtonAltText.GetHashCode();
                if (this.PaypalButtonUrl != null)
                    hash = hash * 59 + this.PaypalButtonUrl.GetHashCode();
                if (this.PaypalCreditButtonUrl != null)
                    hash = hash * 59 + this.PaypalCreditButtonUrl.GetHashCode();
                if (this.PaypalCreditLegalImageUrl != null)
                    hash = hash * 59 + this.PaypalCreditLegalImageUrl.GetHashCode();
                if (this.PaypalCreditLegalUrl != null)
                    hash = hash * 59 + this.PaypalCreditLegalUrl.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
