/* 
 * UltraCart Rest API V2
 *
 * This is the next generation UltraCart REST API...
 *
 * OpenAPI spec version: 2.0.0
 * Contact: support@ultracart.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace com.ultracart.admin.v2.Model
{
    /// <summary>
    /// CartTaxes
    /// </summary>
    [DataContract]
    public partial class CartTaxes :  IEquatable<CartTaxes>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CartTaxes" /> class.
        /// </summary>
        /// <param name="County">Tax county if the state requires it..</param>
        /// <param name="Exempt">True if tax exempt.</param>
        /// <param name="Rate">Tax rate.</param>
        public CartTaxes(string County = null, bool? Exempt = null, decimal? Rate = null)
        {
            this.County = County;
            this.Exempt = Exempt;
            this.Rate = Rate;
        }
        
        /// <summary>
        /// Tax county if the state requires it.
        /// </summary>
        /// <value>Tax county if the state requires it.</value>
        [DataMember(Name="county", EmitDefaultValue=false)]
        public string County { get; set; }
        /// <summary>
        /// True if tax exempt
        /// </summary>
        /// <value>True if tax exempt</value>
        [DataMember(Name="exempt", EmitDefaultValue=false)]
        public bool? Exempt { get; set; }
        /// <summary>
        /// Tax rate
        /// </summary>
        /// <value>Tax rate</value>
        [DataMember(Name="rate", EmitDefaultValue=false)]
        public decimal? Rate { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CartTaxes {\n");
            sb.Append("  County: ").Append(County).Append("\n");
            sb.Append("  Exempt: ").Append(Exempt).Append("\n");
            sb.Append("  Rate: ").Append(Rate).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as CartTaxes);
        }

        /// <summary>
        /// Returns true if CartTaxes instances are equal
        /// </summary>
        /// <param name="other">Instance of CartTaxes to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CartTaxes other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.County == other.County ||
                    this.County != null &&
                    this.County.Equals(other.County)
                ) && 
                (
                    this.Exempt == other.Exempt ||
                    this.Exempt != null &&
                    this.Exempt.Equals(other.Exempt)
                ) && 
                (
                    this.Rate == other.Rate ||
                    this.Rate != null &&
                    this.Rate.Equals(other.Rate)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.County != null)
                    hash = hash * 59 + this.County.GetHashCode();
                if (this.Exempt != null)
                    hash = hash * 59 + this.Exempt.GetHashCode();
                if (this.Rate != null)
                    hash = hash * 59 + this.Rate.GetHashCode();
                return hash;
            }
        }
    }

}
