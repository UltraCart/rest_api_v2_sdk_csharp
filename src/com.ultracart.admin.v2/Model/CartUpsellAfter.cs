/* 
 * UltraCart Rest API V2
 *
 * This is the next generation UltraCart REST API...
 *
 * OpenAPI spec version: 2.0.0
 * Contact: support@ultracart.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = com.ultracart.admin.v2.Client.SwaggerDateConverter;

namespace com.ultracart.admin.v2.Model
{
    /// <summary>
    /// CartUpsellAfter
    /// </summary>
    [DataContract]
    public partial class CartUpsellAfter :  IEquatable<CartUpsellAfter>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CartUpsellAfter" /> class.
        /// </summary>
        /// <param name="FinalizeAfterDts">The date/time after which the cart will finalize into an order..</param>
        /// <param name="FinalizeAfterMinutes">The amount of inactivity in minutes after which the cart should be finalized into an order.  This will calculate the finalize_after_dts field..</param>
        /// <param name="UpsellPathCode">Upsell path code.</param>
        public CartUpsellAfter(string FinalizeAfterDts = default(string), int? FinalizeAfterMinutes = default(int?), string UpsellPathCode = default(string))
        {
            this.FinalizeAfterDts = FinalizeAfterDts;
            this.FinalizeAfterMinutes = FinalizeAfterMinutes;
            this.UpsellPathCode = UpsellPathCode;
        }
        
        /// <summary>
        /// The date/time after which the cart will finalize into an order.
        /// </summary>
        /// <value>The date/time after which the cart will finalize into an order.</value>
        [DataMember(Name="finalize_after_dts", EmitDefaultValue=false)]
        public string FinalizeAfterDts { get; set; }

        /// <summary>
        /// The amount of inactivity in minutes after which the cart should be finalized into an order.  This will calculate the finalize_after_dts field.
        /// </summary>
        /// <value>The amount of inactivity in minutes after which the cart should be finalized into an order.  This will calculate the finalize_after_dts field.</value>
        [DataMember(Name="finalize_after_minutes", EmitDefaultValue=false)]
        public int? FinalizeAfterMinutes { get; set; }

        /// <summary>
        /// Upsell path code
        /// </summary>
        /// <value>Upsell path code</value>
        [DataMember(Name="upsell_path_code", EmitDefaultValue=false)]
        public string UpsellPathCode { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CartUpsellAfter {\n");
            sb.Append("  FinalizeAfterDts: ").Append(FinalizeAfterDts).Append("\n");
            sb.Append("  FinalizeAfterMinutes: ").Append(FinalizeAfterMinutes).Append("\n");
            sb.Append("  UpsellPathCode: ").Append(UpsellPathCode).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as CartUpsellAfter);
        }

        /// <summary>
        /// Returns true if CartUpsellAfter instances are equal
        /// </summary>
        /// <param name="other">Instance of CartUpsellAfter to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CartUpsellAfter other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.FinalizeAfterDts == other.FinalizeAfterDts ||
                    this.FinalizeAfterDts != null &&
                    this.FinalizeAfterDts.Equals(other.FinalizeAfterDts)
                ) && 
                (
                    this.FinalizeAfterMinutes == other.FinalizeAfterMinutes ||
                    this.FinalizeAfterMinutes != null &&
                    this.FinalizeAfterMinutes.Equals(other.FinalizeAfterMinutes)
                ) && 
                (
                    this.UpsellPathCode == other.UpsellPathCode ||
                    this.UpsellPathCode != null &&
                    this.UpsellPathCode.Equals(other.UpsellPathCode)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.FinalizeAfterDts != null)
                    hash = hash * 59 + this.FinalizeAfterDts.GetHashCode();
                if (this.FinalizeAfterMinutes != null)
                    hash = hash * 59 + this.FinalizeAfterMinutes.GetHashCode();
                if (this.UpsellPathCode != null)
                    hash = hash * 59 + this.UpsellPathCode.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // UpsellPathCode (string) maxLength
            if(this.UpsellPathCode != null && this.UpsellPathCode.Length > 5)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for UpsellPathCode, length must be less than 5.", new [] { "UpsellPathCode" });
            }

            yield break;
        }
    }

}
