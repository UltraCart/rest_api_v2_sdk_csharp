/*
 * UltraCart Rest API V2
 *
 * UltraCart REST API Version 2
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@ultracart.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = com.ultracart.admin.v2.Client.OpenAPIDateConverter;

namespace com.ultracart.admin.v2.Model
{
    /// <summary>
    /// ChannelPartner
    /// </summary>
    [DataContract]
    public partial class ChannelPartner :  IEquatable<ChannelPartner>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ChannelPartner" /> class.
        /// </summary>
        /// <param name="channelPartnerOid">Channel partner object id.</param>
        /// <param name="code">Code associated with the channel partner.</param>
        /// <param name="communicationMethod">Communication method of the channel partner.</param>
        /// <param name="dontHoldShipment">True if shipments should immediately process for this channel partner..</param>
        /// <param name="inactive">True if the channel partner is inactive.</param>
        /// <param name="merchantId">Merchant ID of the channel partner.</param>
        /// <param name="name">Name of the channel partner.</param>
        /// <param name="skipCustomerEmails">True if emails to the customer are skipped for this channel partner..</param>
        public ChannelPartner(int channelPartnerOid = default(int), string code = default(string), string communicationMethod = default(string), bool dontHoldShipment = default(bool), bool inactive = default(bool), string merchantId = default(string), string name = default(string), bool skipCustomerEmails = default(bool))
        {
            this.ChannelPartnerOid = channelPartnerOid;
            this.Code = code;
            this.CommunicationMethod = communicationMethod;
            this.DontHoldShipment = dontHoldShipment;
            this.Inactive = inactive;
            this.MerchantId = merchantId;
            this.Name = name;
            this.SkipCustomerEmails = skipCustomerEmails;
        }

        /// <summary>
        /// Channel partner object id
        /// </summary>
        /// <value>Channel partner object id</value>
        [DataMember(Name="channel_partner_oid", EmitDefaultValue=false)]
        public int ChannelPartnerOid { get; set; }

        /// <summary>
        /// Code associated with the channel partner
        /// </summary>
        /// <value>Code associated with the channel partner</value>
        [DataMember(Name="code", EmitDefaultValue=false)]
        public string Code { get; set; }

        /// <summary>
        /// Communication method of the channel partner
        /// </summary>
        /// <value>Communication method of the channel partner</value>
        [DataMember(Name="communication_method", EmitDefaultValue=false)]
        public string CommunicationMethod { get; set; }

        /// <summary>
        /// True if shipments should immediately process for this channel partner.
        /// </summary>
        /// <value>True if shipments should immediately process for this channel partner.</value>
        [DataMember(Name="dont_hold_shipment", EmitDefaultValue=false)]
        public bool DontHoldShipment { get; set; }

        /// <summary>
        /// True if the channel partner is inactive
        /// </summary>
        /// <value>True if the channel partner is inactive</value>
        [DataMember(Name="inactive", EmitDefaultValue=false)]
        public bool Inactive { get; set; }

        /// <summary>
        /// Merchant ID of the channel partner
        /// </summary>
        /// <value>Merchant ID of the channel partner</value>
        [DataMember(Name="merchant_id", EmitDefaultValue=false)]
        public string MerchantId { get; set; }

        /// <summary>
        /// Name of the channel partner
        /// </summary>
        /// <value>Name of the channel partner</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// True if emails to the customer are skipped for this channel partner.
        /// </summary>
        /// <value>True if emails to the customer are skipped for this channel partner.</value>
        [DataMember(Name="skip_customer_emails", EmitDefaultValue=false)]
        public bool SkipCustomerEmails { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ChannelPartner {\n");
            sb.Append("  ChannelPartnerOid: ").Append(ChannelPartnerOid).Append("\n");
            sb.Append("  Code: ").Append(Code).Append("\n");
            sb.Append("  CommunicationMethod: ").Append(CommunicationMethod).Append("\n");
            sb.Append("  DontHoldShipment: ").Append(DontHoldShipment).Append("\n");
            sb.Append("  Inactive: ").Append(Inactive).Append("\n");
            sb.Append("  MerchantId: ").Append(MerchantId).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  SkipCustomerEmails: ").Append(SkipCustomerEmails).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ChannelPartner);
        }

        /// <summary>
        /// Returns true if ChannelPartner instances are equal
        /// </summary>
        /// <param name="input">Instance of ChannelPartner to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ChannelPartner input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ChannelPartnerOid == input.ChannelPartnerOid ||
                    (this.ChannelPartnerOid != null &&
                    this.ChannelPartnerOid.Equals(input.ChannelPartnerOid))
                ) && 
                (
                    this.Code == input.Code ||
                    (this.Code != null &&
                    this.Code.Equals(input.Code))
                ) && 
                (
                    this.CommunicationMethod == input.CommunicationMethod ||
                    (this.CommunicationMethod != null &&
                    this.CommunicationMethod.Equals(input.CommunicationMethod))
                ) && 
                (
                    this.DontHoldShipment == input.DontHoldShipment ||
                    (this.DontHoldShipment != null &&
                    this.DontHoldShipment.Equals(input.DontHoldShipment))
                ) && 
                (
                    this.Inactive == input.Inactive ||
                    (this.Inactive != null &&
                    this.Inactive.Equals(input.Inactive))
                ) && 
                (
                    this.MerchantId == input.MerchantId ||
                    (this.MerchantId != null &&
                    this.MerchantId.Equals(input.MerchantId))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.SkipCustomerEmails == input.SkipCustomerEmails ||
                    (this.SkipCustomerEmails != null &&
                    this.SkipCustomerEmails.Equals(input.SkipCustomerEmails))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ChannelPartnerOid != null)
                    hashCode = hashCode * 59 + this.ChannelPartnerOid.GetHashCode();
                if (this.Code != null)
                    hashCode = hashCode * 59 + this.Code.GetHashCode();
                if (this.CommunicationMethod != null)
                    hashCode = hashCode * 59 + this.CommunicationMethod.GetHashCode();
                if (this.DontHoldShipment != null)
                    hashCode = hashCode * 59 + this.DontHoldShipment.GetHashCode();
                if (this.Inactive != null)
                    hashCode = hashCode * 59 + this.Inactive.GetHashCode();
                if (this.MerchantId != null)
                    hashCode = hashCode * 59 + this.MerchantId.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.SkipCustomerEmails != null)
                    hashCode = hashCode * 59 + this.SkipCustomerEmails.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
