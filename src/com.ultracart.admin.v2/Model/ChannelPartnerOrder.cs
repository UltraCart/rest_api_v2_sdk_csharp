/* 
 * UltraCart Rest API V2
 *
 * UltraCart REST API Version 2
 *
 * OpenAPI spec version: 2.0.0
 * Contact: support@ultracart.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = com.ultracart.admin.v2.Client.SwaggerDateConverter;

namespace com.ultracart.admin.v2.Model
{
    /// <summary>
    /// ChannelPartnerOrder
    /// </summary>
    [DataContract]
    public partial class ChannelPartnerOrder :  IEquatable<ChannelPartnerOrder>, IValidatableObject
    {
        /// <summary>
        /// eCheck bank account type
        /// </summary>
        /// <value>eCheck bank account type</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum EcheckBankAccountTypeEnum
        {
            
            /// <summary>
            /// Enum Checking for value: Checking
            /// </summary>
            [EnumMember(Value = "Checking")]
            Checking = 1,
            
            /// <summary>
            /// Enum Savings for value: Savings
            /// </summary>
            [EnumMember(Value = "Savings")]
            Savings = 2
        }

        /// <summary>
        /// eCheck bank account type
        /// </summary>
        /// <value>eCheck bank account type</value>
        [DataMember(Name="echeck_bank_account_type", EmitDefaultValue=false)]
        public EcheckBankAccountTypeEnum? EcheckBankAccountType { get; set; }
        /// <summary>
        /// eCheck bank owner type
        /// </summary>
        /// <value>eCheck bank owner type</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum EcheckBankOwnerTypeEnum
        {
            
            /// <summary>
            /// Enum Business for value: Business
            /// </summary>
            [EnumMember(Value = "Business")]
            Business = 1,
            
            /// <summary>
            /// Enum Personal for value: Personal
            /// </summary>
            [EnumMember(Value = "Personal")]
            Personal = 2
        }

        /// <summary>
        /// eCheck bank owner type
        /// </summary>
        /// <value>eCheck bank owner type</value>
        [DataMember(Name="echeck_bank_owner_type", EmitDefaultValue=false)]
        public EcheckBankOwnerTypeEnum? EcheckBankOwnerType { get; set; }
        /// <summary>
        /// Payment method
        /// </summary>
        /// <value>Payment method</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum PaymentMethodEnum
        {
            
            /// <summary>
            /// Enum Affirm for value: Affirm
            /// </summary>
            [EnumMember(Value = "Affirm")]
            Affirm = 1,
            
            /// <summary>
            /// Enum Amazon for value: Amazon
            /// </summary>
            [EnumMember(Value = "Amazon")]
            Amazon = 2,
            
            /// <summary>
            /// Enum Check for value: Check
            /// </summary>
            [EnumMember(Value = "Check")]
            Check = 3,
            
            /// <summary>
            /// Enum COD for value: COD
            /// </summary>
            [EnumMember(Value = "COD")]
            COD = 4,
            
            /// <summary>
            /// Enum CreditCard for value: Credit Card
            /// </summary>
            [EnumMember(Value = "Credit Card")]
            CreditCard = 5,
            
            /// <summary>
            /// Enum ECheck for value: eCheck
            /// </summary>
            [EnumMember(Value = "eCheck")]
            ECheck = 6,
            
            /// <summary>
            /// Enum LoanHero for value: LoanHero
            /// </summary>
            [EnumMember(Value = "LoanHero")]
            LoanHero = 7,
            
            /// <summary>
            /// Enum MoneyOrder for value: Money Order
            /// </summary>
            [EnumMember(Value = "Money Order")]
            MoneyOrder = 8,
            
            /// <summary>
            /// Enum PayPal for value: PayPal
            /// </summary>
            [EnumMember(Value = "PayPal")]
            PayPal = 9,
            
            /// <summary>
            /// Enum PurchaseOrder for value: Purchase Order
            /// </summary>
            [EnumMember(Value = "Purchase Order")]
            PurchaseOrder = 10,
            
            /// <summary>
            /// Enum QuoteRequest for value: Quote Request
            /// </summary>
            [EnumMember(Value = "Quote Request")]
            QuoteRequest = 11,
            
            /// <summary>
            /// Enum WireTransfer for value: Wire Transfer
            /// </summary>
            [EnumMember(Value = "Wire Transfer")]
            WireTransfer = 12
        }

        /// <summary>
        /// Payment method
        /// </summary>
        /// <value>Payment method</value>
        [DataMember(Name="payment_method", EmitDefaultValue=false)]
        public PaymentMethodEnum? PaymentMethod { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="ChannelPartnerOrder" /> class.
        /// </summary>
        /// <param name="advertisingSource">advertising_source.</param>
        /// <param name="affiliateId">Affiliate Id.</param>
        /// <param name="affiliateSubId">Affiliate Sub Id.</param>
        /// <param name="arbitraryShippingHandlingTotal">Arbitrary shipping handling total.</param>
        /// <param name="arbitraryTax">Arbitrary tax for overriding calculated taxes.</param>
        /// <param name="arbitraryTaxRate">Arbitrary tax rate.</param>
        /// <param name="arbitraryTaxableSubtotal">Arbitrary taxable subtotal.</param>
        /// <param name="associateWithCustomerProfileIfPresent">If true any matching customer profile based on email is associated with this order.</param>
        /// <param name="autoApprovePurchaseOrder">If true any purchase orders are automatically approved.</param>
        /// <param name="billtoAddress1">Billing Address line 1.</param>
        /// <param name="billtoAddress2">Billing Address line 2.</param>
        /// <param name="billtoCity">Billing City.</param>
        /// <param name="billtoCompany">Billing Company.</param>
        /// <param name="billtoCountryCode">Billing ISO-3166 two letter country code.</param>
        /// <param name="billtoDayPhone">Billing Day phone.</param>
        /// <param name="billtoEveningPhone">Billing Evening phone.</param>
        /// <param name="billtoFirstName">Billing First name.</param>
        /// <param name="billtoLastName">Billing Last name.</param>
        /// <param name="billtoPostalCode">Billing Postal code.</param>
        /// <param name="billtoStateRegion">Billing State for United States otherwise region or province for other countries.</param>
        /// <param name="billtoTitle">Billing Title.</param>
        /// <param name="ccEmail">CC email..</param>
        /// <param name="channelPartnerOrderId">The id for this order within the channel partner system..</param>
        /// <param name="considerRecurring">If true this order is marked as an auto order (recurring).</param>
        /// <param name="coupons">Array of coupon codes.</param>
        /// <param name="creditCardAuthorizationAmount">The amount authorized externally.</param>
        /// <param name="creditCardAuthorizationDts">Date/Time of credit card authorization in ISO8601 format.</param>
        /// <param name="creditCardAuthorizationNumber">The reference number provided by an externally processed transaction.</param>
        /// <param name="creditCardExpirationMonth">Credit card expiration month.</param>
        /// <param name="creditCardExpirationYear">Credit card expiration year.</param>
        /// <param name="creditCardType">Credit card type.</param>
        /// <param name="customField1">Custom field 1.</param>
        /// <param name="customField2">Custom field 2.</param>
        /// <param name="customField3">Custom field 3.</param>
        /// <param name="customField4">Custom field 4.</param>
        /// <param name="customField5">Custom field 5.</param>
        /// <param name="customField6">Custom field 6.</param>
        /// <param name="customField7">Custom field 7.</param>
        /// <param name="deliveryDate">Date the customer is requesting delivery on. Typically used for perishable product delivery..</param>
        /// <param name="echeckBankAbaCode">eCheck bank ABA code.</param>
        /// <param name="echeckBankAccountName">eCheck bank account name.</param>
        /// <param name="echeckBankAccountNumber">eCheck bank account number.</param>
        /// <param name="echeckBankAccountType">eCheck bank account type.</param>
        /// <param name="echeckBankName">eCheck bank name.</param>
        /// <param name="echeckBankOwnerType">eCheck bank owner type.</param>
        /// <param name="echeckCustomerTaxId">eCheck customer tax id.</param>
        /// <param name="echeckDriversLicenseDob">eCheck drivers license dob.</param>
        /// <param name="echeckDriversLicenseNumber">eCheck drivers license number.</param>
        /// <param name="echeckDriversLicenseState">eCheck drivers license state.</param>
        /// <param name="email">Email.</param>
        /// <param name="gift">True if this order is a gift.</param>
        /// <param name="giftEmail">Email address of the gift recipient.</param>
        /// <param name="giftMessage">Message to the gift recipient.</param>
        /// <param name="hostedFieldsCardToken">The token provided by UltraCart hosted fields when a credit card number is uploaded into the system.  This is the only way to provide a credit card number..</param>
        /// <param name="hostedFieldsCvvToken">The token provided by UltraCart hosted fields when a credit card cvv is uploaded into the system.  This is the only way to provide a cvv number..</param>
        /// <param name="insuranceApplicationId">Insurance application id.</param>
        /// <param name="insuranceClaimId">Insurance claim id.</param>
        /// <param name="ipAddress">IP Address of the customer.</param>
        /// <param name="items">Items.</param>
        /// <param name="leastCostRoute">If true the least expensive shipping method is automatically chosen during the order import.</param>
        /// <param name="leastCostRouteShippingMethods">An optional array of shipping methods to restict choices if least_cost_route is true.</param>
        /// <param name="mailingListOptIn">If true the customer is subscribed to any configured mailing lists.</param>
        /// <param name="noRealtimePaymentProcessing">If true no payment processing is done and the order is placed into Accounts Receivable.</param>
        /// <param name="paymentMethod">Payment method.</param>
        /// <param name="purchaseOrderNumber">Purchase order number.</param>
        /// <param name="rotatingTransactionGatewayCode">The rotating transaction gateway code for the gateway used to charge this order.</param>
        /// <param name="salesRepCode">Sales rep code.</param>
        /// <param name="screenBrandingThemeCode">Screen branding theme code.</param>
        /// <param name="shipOnDate">Date the customer is requesting that the order ship on.  Typically used for perishable product delivery..</param>
        /// <param name="shipToResidential">True if the shipping adress is residential.  Effects the methods that are available to the customer as well as the price of the shipping method..</param>
        /// <param name="shippingMethod">Shipping method.</param>
        /// <param name="shiptoAddress1">Shipping Address line 1.</param>
        /// <param name="shiptoAddress2">Shipping Address line 2.</param>
        /// <param name="shiptoCity">Shipping City.</param>
        /// <param name="shiptoCompany">Shipping Company.</param>
        /// <param name="shiptoCountryCode">Shipping ISO-3166 two letter country code.</param>
        /// <param name="shiptoDayPhone">Shipping Day phone.</param>
        /// <param name="shiptoEveningPhone">Shipping Evening phone.</param>
        /// <param name="shiptoFirstName">Shipping First name.</param>
        /// <param name="shiptoLastName">Shipping Last name.</param>
        /// <param name="shiptoPostalCode">Shipping Postal code.</param>
        /// <param name="shiptoStateRegion">Shipping State for United States otherwise region or province for other countries.</param>
        /// <param name="shiptoTitle">Shipping Title.</param>
        /// <param name="skipPaymentProcessing">If true the order is placed directly into the shipping department.</param>
        /// <param name="specialInstructions">Special instructions from the customer regarding shipping.</param>
        /// <param name="storeCompleted">If true the order bypasses shipping and is marked completed.</param>
        /// <param name="storeIfPaymentDeclines">If true any failed payments are placed into Accounts Receivable.  If false any failed payments result in a rejected order resulting in errors thrown during the insert routine.</param>
        /// <param name="storefrontHostName">StoreFront host name associated with the order.</param>
        /// <param name="taxCounty">The optional shipping county used to determine exact taxes.</param>
        /// <param name="taxExempt">If true this order is marked as being tax exempt.</param>
        /// <param name="transaction">transaction.</param>
        /// <param name="treatWarningsAsErrors">If true all warnings are considered errors, this is true by default.</param>
        /// <param name="usePriorPaymentInformationFromOrderId">An Order Id from a prior purchase of this customer which is used to retrieve vaulted payment information in order to pay for this current order..</param>
        public ChannelPartnerOrder(string advertisingSource = default(string), string affiliateId = default(string), string affiliateSubId = default(string), decimal? arbitraryShippingHandlingTotal = default(decimal?), decimal? arbitraryTax = default(decimal?), decimal? arbitraryTaxRate = default(decimal?), decimal? arbitraryTaxableSubtotal = default(decimal?), bool? associateWithCustomerProfileIfPresent = default(bool?), bool? autoApprovePurchaseOrder = default(bool?), string billtoAddress1 = default(string), string billtoAddress2 = default(string), string billtoCity = default(string), string billtoCompany = default(string), string billtoCountryCode = default(string), string billtoDayPhone = default(string), string billtoEveningPhone = default(string), string billtoFirstName = default(string), string billtoLastName = default(string), string billtoPostalCode = default(string), string billtoStateRegion = default(string), string billtoTitle = default(string), string ccEmail = default(string), string channelPartnerOrderId = default(string), bool? considerRecurring = default(bool?), List<string> coupons = default(List<string>), decimal? creditCardAuthorizationAmount = default(decimal?), string creditCardAuthorizationDts = default(string), string creditCardAuthorizationNumber = default(string), int? creditCardExpirationMonth = default(int?), int? creditCardExpirationYear = default(int?), string creditCardType = default(string), string customField1 = default(string), string customField2 = default(string), string customField3 = default(string), string customField4 = default(string), string customField5 = default(string), string customField6 = default(string), string customField7 = default(string), string deliveryDate = default(string), string echeckBankAbaCode = default(string), string echeckBankAccountName = default(string), string echeckBankAccountNumber = default(string), EcheckBankAccountTypeEnum? echeckBankAccountType = default(EcheckBankAccountTypeEnum?), string echeckBankName = default(string), EcheckBankOwnerTypeEnum? echeckBankOwnerType = default(EcheckBankOwnerTypeEnum?), string echeckCustomerTaxId = default(string), string echeckDriversLicenseDob = default(string), string echeckDriversLicenseNumber = default(string), string echeckDriversLicenseState = default(string), string email = default(string), bool? gift = default(bool?), string giftEmail = default(string), string giftMessage = default(string), string hostedFieldsCardToken = default(string), string hostedFieldsCvvToken = default(string), string insuranceApplicationId = default(string), string insuranceClaimId = default(string), string ipAddress = default(string), List<ChannelPartnerOrderItem> items = default(List<ChannelPartnerOrderItem>), bool? leastCostRoute = default(bool?), List<string> leastCostRouteShippingMethods = default(List<string>), bool? mailingListOptIn = default(bool?), bool? noRealtimePaymentProcessing = default(bool?), PaymentMethodEnum? paymentMethod = default(PaymentMethodEnum?), string purchaseOrderNumber = default(string), string rotatingTransactionGatewayCode = default(string), string salesRepCode = default(string), string screenBrandingThemeCode = default(string), string shipOnDate = default(string), bool? shipToResidential = default(bool?), string shippingMethod = default(string), string shiptoAddress1 = default(string), string shiptoAddress2 = default(string), string shiptoCity = default(string), string shiptoCompany = default(string), string shiptoCountryCode = default(string), string shiptoDayPhone = default(string), string shiptoEveningPhone = default(string), string shiptoFirstName = default(string), string shiptoLastName = default(string), string shiptoPostalCode = default(string), string shiptoStateRegion = default(string), string shiptoTitle = default(string), bool? skipPaymentProcessing = default(bool?), string specialInstructions = default(string), bool? storeCompleted = default(bool?), bool? storeIfPaymentDeclines = default(bool?), string storefrontHostName = default(string), string taxCounty = default(string), bool? taxExempt = default(bool?), ChannelPartnerOrderTransaction transaction = default(ChannelPartnerOrderTransaction), bool? treatWarningsAsErrors = default(bool?), string usePriorPaymentInformationFromOrderId = default(string))
        {
            this.AdvertisingSource = advertisingSource;
            this.AffiliateId = affiliateId;
            this.AffiliateSubId = affiliateSubId;
            this.ArbitraryShippingHandlingTotal = arbitraryShippingHandlingTotal;
            this.ArbitraryTax = arbitraryTax;
            this.ArbitraryTaxRate = arbitraryTaxRate;
            this.ArbitraryTaxableSubtotal = arbitraryTaxableSubtotal;
            this.AssociateWithCustomerProfileIfPresent = associateWithCustomerProfileIfPresent;
            this.AutoApprovePurchaseOrder = autoApprovePurchaseOrder;
            this.BilltoAddress1 = billtoAddress1;
            this.BilltoAddress2 = billtoAddress2;
            this.BilltoCity = billtoCity;
            this.BilltoCompany = billtoCompany;
            this.BilltoCountryCode = billtoCountryCode;
            this.BilltoDayPhone = billtoDayPhone;
            this.BilltoEveningPhone = billtoEveningPhone;
            this.BilltoFirstName = billtoFirstName;
            this.BilltoLastName = billtoLastName;
            this.BilltoPostalCode = billtoPostalCode;
            this.BilltoStateRegion = billtoStateRegion;
            this.BilltoTitle = billtoTitle;
            this.CcEmail = ccEmail;
            this.ChannelPartnerOrderId = channelPartnerOrderId;
            this.ConsiderRecurring = considerRecurring;
            this.Coupons = coupons;
            this.CreditCardAuthorizationAmount = creditCardAuthorizationAmount;
            this.CreditCardAuthorizationDts = creditCardAuthorizationDts;
            this.CreditCardAuthorizationNumber = creditCardAuthorizationNumber;
            this.CreditCardExpirationMonth = creditCardExpirationMonth;
            this.CreditCardExpirationYear = creditCardExpirationYear;
            this.CreditCardType = creditCardType;
            this.CustomField1 = customField1;
            this.CustomField2 = customField2;
            this.CustomField3 = customField3;
            this.CustomField4 = customField4;
            this.CustomField5 = customField5;
            this.CustomField6 = customField6;
            this.CustomField7 = customField7;
            this.DeliveryDate = deliveryDate;
            this.EcheckBankAbaCode = echeckBankAbaCode;
            this.EcheckBankAccountName = echeckBankAccountName;
            this.EcheckBankAccountNumber = echeckBankAccountNumber;
            this.EcheckBankAccountType = echeckBankAccountType;
            this.EcheckBankName = echeckBankName;
            this.EcheckBankOwnerType = echeckBankOwnerType;
            this.EcheckCustomerTaxId = echeckCustomerTaxId;
            this.EcheckDriversLicenseDob = echeckDriversLicenseDob;
            this.EcheckDriversLicenseNumber = echeckDriversLicenseNumber;
            this.EcheckDriversLicenseState = echeckDriversLicenseState;
            this.Email = email;
            this.Gift = gift;
            this.GiftEmail = giftEmail;
            this.GiftMessage = giftMessage;
            this.HostedFieldsCardToken = hostedFieldsCardToken;
            this.HostedFieldsCvvToken = hostedFieldsCvvToken;
            this.InsuranceApplicationId = insuranceApplicationId;
            this.InsuranceClaimId = insuranceClaimId;
            this.IpAddress = ipAddress;
            this.Items = items;
            this.LeastCostRoute = leastCostRoute;
            this.LeastCostRouteShippingMethods = leastCostRouteShippingMethods;
            this.MailingListOptIn = mailingListOptIn;
            this.NoRealtimePaymentProcessing = noRealtimePaymentProcessing;
            this.PaymentMethod = paymentMethod;
            this.PurchaseOrderNumber = purchaseOrderNumber;
            this.RotatingTransactionGatewayCode = rotatingTransactionGatewayCode;
            this.SalesRepCode = salesRepCode;
            this.ScreenBrandingThemeCode = screenBrandingThemeCode;
            this.ShipOnDate = shipOnDate;
            this.ShipToResidential = shipToResidential;
            this.ShippingMethod = shippingMethod;
            this.ShiptoAddress1 = shiptoAddress1;
            this.ShiptoAddress2 = shiptoAddress2;
            this.ShiptoCity = shiptoCity;
            this.ShiptoCompany = shiptoCompany;
            this.ShiptoCountryCode = shiptoCountryCode;
            this.ShiptoDayPhone = shiptoDayPhone;
            this.ShiptoEveningPhone = shiptoEveningPhone;
            this.ShiptoFirstName = shiptoFirstName;
            this.ShiptoLastName = shiptoLastName;
            this.ShiptoPostalCode = shiptoPostalCode;
            this.ShiptoStateRegion = shiptoStateRegion;
            this.ShiptoTitle = shiptoTitle;
            this.SkipPaymentProcessing = skipPaymentProcessing;
            this.SpecialInstructions = specialInstructions;
            this.StoreCompleted = storeCompleted;
            this.StoreIfPaymentDeclines = storeIfPaymentDeclines;
            this.StorefrontHostName = storefrontHostName;
            this.TaxCounty = taxCounty;
            this.TaxExempt = taxExempt;
            this.Transaction = transaction;
            this.TreatWarningsAsErrors = treatWarningsAsErrors;
            this.UsePriorPaymentInformationFromOrderId = usePriorPaymentInformationFromOrderId;
        }
        
        /// <summary>
        /// advertising_source
        /// </summary>
        /// <value>advertising_source</value>
        [DataMember(Name="advertisingSource", EmitDefaultValue=false)]
        public string AdvertisingSource { get; set; }

        /// <summary>
        /// Affiliate Id
        /// </summary>
        /// <value>Affiliate Id</value>
        [DataMember(Name="affiliate_id", EmitDefaultValue=false)]
        public string AffiliateId { get; set; }

        /// <summary>
        /// Affiliate Sub Id
        /// </summary>
        /// <value>Affiliate Sub Id</value>
        [DataMember(Name="affiliate_sub_id", EmitDefaultValue=false)]
        public string AffiliateSubId { get; set; }

        /// <summary>
        /// Arbitrary shipping handling total
        /// </summary>
        /// <value>Arbitrary shipping handling total</value>
        [DataMember(Name="arbitrary_shipping_handling_total", EmitDefaultValue=false)]
        public decimal? ArbitraryShippingHandlingTotal { get; set; }

        /// <summary>
        /// Arbitrary tax for overriding calculated taxes
        /// </summary>
        /// <value>Arbitrary tax for overriding calculated taxes</value>
        [DataMember(Name="arbitrary_tax", EmitDefaultValue=false)]
        public decimal? ArbitraryTax { get; set; }

        /// <summary>
        /// Arbitrary tax rate
        /// </summary>
        /// <value>Arbitrary tax rate</value>
        [DataMember(Name="arbitrary_tax_rate", EmitDefaultValue=false)]
        public decimal? ArbitraryTaxRate { get; set; }

        /// <summary>
        /// Arbitrary taxable subtotal
        /// </summary>
        /// <value>Arbitrary taxable subtotal</value>
        [DataMember(Name="arbitrary_taxable_subtotal", EmitDefaultValue=false)]
        public decimal? ArbitraryTaxableSubtotal { get; set; }

        /// <summary>
        /// If true any matching customer profile based on email is associated with this order
        /// </summary>
        /// <value>If true any matching customer profile based on email is associated with this order</value>
        [DataMember(Name="associate_with_customer_profile_if_present", EmitDefaultValue=false)]
        public bool? AssociateWithCustomerProfileIfPresent { get; set; }

        /// <summary>
        /// If true any purchase orders are automatically approved
        /// </summary>
        /// <value>If true any purchase orders are automatically approved</value>
        [DataMember(Name="auto_approve_purchase_order", EmitDefaultValue=false)]
        public bool? AutoApprovePurchaseOrder { get; set; }

        /// <summary>
        /// Billing Address line 1
        /// </summary>
        /// <value>Billing Address line 1</value>
        [DataMember(Name="billto_address1", EmitDefaultValue=false)]
        public string BilltoAddress1 { get; set; }

        /// <summary>
        /// Billing Address line 2
        /// </summary>
        /// <value>Billing Address line 2</value>
        [DataMember(Name="billto_address2", EmitDefaultValue=false)]
        public string BilltoAddress2 { get; set; }

        /// <summary>
        /// Billing City
        /// </summary>
        /// <value>Billing City</value>
        [DataMember(Name="billto_city", EmitDefaultValue=false)]
        public string BilltoCity { get; set; }

        /// <summary>
        /// Billing Company
        /// </summary>
        /// <value>Billing Company</value>
        [DataMember(Name="billto_company", EmitDefaultValue=false)]
        public string BilltoCompany { get; set; }

        /// <summary>
        /// Billing ISO-3166 two letter country code
        /// </summary>
        /// <value>Billing ISO-3166 two letter country code</value>
        [DataMember(Name="billto_country_code", EmitDefaultValue=false)]
        public string BilltoCountryCode { get; set; }

        /// <summary>
        /// Billing Day phone
        /// </summary>
        /// <value>Billing Day phone</value>
        [DataMember(Name="billto_day_phone", EmitDefaultValue=false)]
        public string BilltoDayPhone { get; set; }

        /// <summary>
        /// Billing Evening phone
        /// </summary>
        /// <value>Billing Evening phone</value>
        [DataMember(Name="billto_evening_phone", EmitDefaultValue=false)]
        public string BilltoEveningPhone { get; set; }

        /// <summary>
        /// Billing First name
        /// </summary>
        /// <value>Billing First name</value>
        [DataMember(Name="billto_first_name", EmitDefaultValue=false)]
        public string BilltoFirstName { get; set; }

        /// <summary>
        /// Billing Last name
        /// </summary>
        /// <value>Billing Last name</value>
        [DataMember(Name="billto_last_name", EmitDefaultValue=false)]
        public string BilltoLastName { get; set; }

        /// <summary>
        /// Billing Postal code
        /// </summary>
        /// <value>Billing Postal code</value>
        [DataMember(Name="billto_postal_code", EmitDefaultValue=false)]
        public string BilltoPostalCode { get; set; }

        /// <summary>
        /// Billing State for United States otherwise region or province for other countries
        /// </summary>
        /// <value>Billing State for United States otherwise region or province for other countries</value>
        [DataMember(Name="billto_state_region", EmitDefaultValue=false)]
        public string BilltoStateRegion { get; set; }

        /// <summary>
        /// Billing Title
        /// </summary>
        /// <value>Billing Title</value>
        [DataMember(Name="billto_title", EmitDefaultValue=false)]
        public string BilltoTitle { get; set; }

        /// <summary>
        /// CC email.
        /// </summary>
        /// <value>CC email.</value>
        [DataMember(Name="cc_email", EmitDefaultValue=false)]
        public string CcEmail { get; set; }

        /// <summary>
        /// The id for this order within the channel partner system.
        /// </summary>
        /// <value>The id for this order within the channel partner system.</value>
        [DataMember(Name="channel_partner_order_id", EmitDefaultValue=false)]
        public string ChannelPartnerOrderId { get; set; }

        /// <summary>
        /// If true this order is marked as an auto order (recurring)
        /// </summary>
        /// <value>If true this order is marked as an auto order (recurring)</value>
        [DataMember(Name="consider_recurring", EmitDefaultValue=false)]
        public bool? ConsiderRecurring { get; set; }

        /// <summary>
        /// Array of coupon codes
        /// </summary>
        /// <value>Array of coupon codes</value>
        [DataMember(Name="coupons", EmitDefaultValue=false)]
        public List<string> Coupons { get; set; }

        /// <summary>
        /// The amount authorized externally
        /// </summary>
        /// <value>The amount authorized externally</value>
        [DataMember(Name="credit_card_authorization_amount", EmitDefaultValue=false)]
        public decimal? CreditCardAuthorizationAmount { get; set; }

        /// <summary>
        /// Date/Time of credit card authorization in ISO8601 format
        /// </summary>
        /// <value>Date/Time of credit card authorization in ISO8601 format</value>
        [DataMember(Name="credit_card_authorization_dts", EmitDefaultValue=false)]
        public string CreditCardAuthorizationDts { get; set; }

        /// <summary>
        /// The reference number provided by an externally processed transaction
        /// </summary>
        /// <value>The reference number provided by an externally processed transaction</value>
        [DataMember(Name="credit_card_authorization_number", EmitDefaultValue=false)]
        public string CreditCardAuthorizationNumber { get; set; }

        /// <summary>
        /// Credit card expiration month
        /// </summary>
        /// <value>Credit card expiration month</value>
        [DataMember(Name="credit_card_expiration_month", EmitDefaultValue=false)]
        public int? CreditCardExpirationMonth { get; set; }

        /// <summary>
        /// Credit card expiration year
        /// </summary>
        /// <value>Credit card expiration year</value>
        [DataMember(Name="credit_card_expiration_year", EmitDefaultValue=false)]
        public int? CreditCardExpirationYear { get; set; }

        /// <summary>
        /// Credit card type
        /// </summary>
        /// <value>Credit card type</value>
        [DataMember(Name="credit_card_type", EmitDefaultValue=false)]
        public string CreditCardType { get; set; }

        /// <summary>
        /// Custom field 1
        /// </summary>
        /// <value>Custom field 1</value>
        [DataMember(Name="custom_field1", EmitDefaultValue=false)]
        public string CustomField1 { get; set; }

        /// <summary>
        /// Custom field 2
        /// </summary>
        /// <value>Custom field 2</value>
        [DataMember(Name="custom_field2", EmitDefaultValue=false)]
        public string CustomField2 { get; set; }

        /// <summary>
        /// Custom field 3
        /// </summary>
        /// <value>Custom field 3</value>
        [DataMember(Name="custom_field3", EmitDefaultValue=false)]
        public string CustomField3 { get; set; }

        /// <summary>
        /// Custom field 4
        /// </summary>
        /// <value>Custom field 4</value>
        [DataMember(Name="custom_field4", EmitDefaultValue=false)]
        public string CustomField4 { get; set; }

        /// <summary>
        /// Custom field 5
        /// </summary>
        /// <value>Custom field 5</value>
        [DataMember(Name="custom_field5", EmitDefaultValue=false)]
        public string CustomField5 { get; set; }

        /// <summary>
        /// Custom field 6
        /// </summary>
        /// <value>Custom field 6</value>
        [DataMember(Name="custom_field6", EmitDefaultValue=false)]
        public string CustomField6 { get; set; }

        /// <summary>
        /// Custom field 7
        /// </summary>
        /// <value>Custom field 7</value>
        [DataMember(Name="custom_field7", EmitDefaultValue=false)]
        public string CustomField7 { get; set; }

        /// <summary>
        /// Date the customer is requesting delivery on. Typically used for perishable product delivery.
        /// </summary>
        /// <value>Date the customer is requesting delivery on. Typically used for perishable product delivery.</value>
        [DataMember(Name="delivery_date", EmitDefaultValue=false)]
        public string DeliveryDate { get; set; }

        /// <summary>
        /// eCheck bank ABA code
        /// </summary>
        /// <value>eCheck bank ABA code</value>
        [DataMember(Name="echeck_bank_aba_code", EmitDefaultValue=false)]
        public string EcheckBankAbaCode { get; set; }

        /// <summary>
        /// eCheck bank account name
        /// </summary>
        /// <value>eCheck bank account name</value>
        [DataMember(Name="echeck_bank_account_name", EmitDefaultValue=false)]
        public string EcheckBankAccountName { get; set; }

        /// <summary>
        /// eCheck bank account number
        /// </summary>
        /// <value>eCheck bank account number</value>
        [DataMember(Name="echeck_bank_account_number", EmitDefaultValue=false)]
        public string EcheckBankAccountNumber { get; set; }


        /// <summary>
        /// eCheck bank name
        /// </summary>
        /// <value>eCheck bank name</value>
        [DataMember(Name="echeck_bank_name", EmitDefaultValue=false)]
        public string EcheckBankName { get; set; }


        /// <summary>
        /// eCheck customer tax id
        /// </summary>
        /// <value>eCheck customer tax id</value>
        [DataMember(Name="echeck_customer_tax_id", EmitDefaultValue=false)]
        public string EcheckCustomerTaxId { get; set; }

        /// <summary>
        /// eCheck drivers license dob
        /// </summary>
        /// <value>eCheck drivers license dob</value>
        [DataMember(Name="echeck_drivers_license_dob", EmitDefaultValue=false)]
        public string EcheckDriversLicenseDob { get; set; }

        /// <summary>
        /// eCheck drivers license number
        /// </summary>
        /// <value>eCheck drivers license number</value>
        [DataMember(Name="echeck_drivers_license_number", EmitDefaultValue=false)]
        public string EcheckDriversLicenseNumber { get; set; }

        /// <summary>
        /// eCheck drivers license state
        /// </summary>
        /// <value>eCheck drivers license state</value>
        [DataMember(Name="echeck_drivers_license_state", EmitDefaultValue=false)]
        public string EcheckDriversLicenseState { get; set; }

        /// <summary>
        /// Email
        /// </summary>
        /// <value>Email</value>
        [DataMember(Name="email", EmitDefaultValue=false)]
        public string Email { get; set; }

        /// <summary>
        /// True if this order is a gift
        /// </summary>
        /// <value>True if this order is a gift</value>
        [DataMember(Name="gift", EmitDefaultValue=false)]
        public bool? Gift { get; set; }

        /// <summary>
        /// Email address of the gift recipient
        /// </summary>
        /// <value>Email address of the gift recipient</value>
        [DataMember(Name="gift_email", EmitDefaultValue=false)]
        public string GiftEmail { get; set; }

        /// <summary>
        /// Message to the gift recipient
        /// </summary>
        /// <value>Message to the gift recipient</value>
        [DataMember(Name="gift_message", EmitDefaultValue=false)]
        public string GiftMessage { get; set; }

        /// <summary>
        /// The token provided by UltraCart hosted fields when a credit card number is uploaded into the system.  This is the only way to provide a credit card number.
        /// </summary>
        /// <value>The token provided by UltraCart hosted fields when a credit card number is uploaded into the system.  This is the only way to provide a credit card number.</value>
        [DataMember(Name="hosted_fields_card_token", EmitDefaultValue=false)]
        public string HostedFieldsCardToken { get; set; }

        /// <summary>
        /// The token provided by UltraCart hosted fields when a credit card cvv is uploaded into the system.  This is the only way to provide a cvv number.
        /// </summary>
        /// <value>The token provided by UltraCart hosted fields when a credit card cvv is uploaded into the system.  This is the only way to provide a cvv number.</value>
        [DataMember(Name="hosted_fields_cvv_token", EmitDefaultValue=false)]
        public string HostedFieldsCvvToken { get; set; }

        /// <summary>
        /// Insurance application id
        /// </summary>
        /// <value>Insurance application id</value>
        [DataMember(Name="insurance_application_id", EmitDefaultValue=false)]
        public string InsuranceApplicationId { get; set; }

        /// <summary>
        /// Insurance claim id
        /// </summary>
        /// <value>Insurance claim id</value>
        [DataMember(Name="insurance_claim_id", EmitDefaultValue=false)]
        public string InsuranceClaimId { get; set; }

        /// <summary>
        /// IP Address of the customer
        /// </summary>
        /// <value>IP Address of the customer</value>
        [DataMember(Name="ip_address", EmitDefaultValue=false)]
        public string IpAddress { get; set; }

        /// <summary>
        /// Items
        /// </summary>
        /// <value>Items</value>
        [DataMember(Name="items", EmitDefaultValue=false)]
        public List<ChannelPartnerOrderItem> Items { get; set; }

        /// <summary>
        /// If true the least expensive shipping method is automatically chosen during the order import
        /// </summary>
        /// <value>If true the least expensive shipping method is automatically chosen during the order import</value>
        [DataMember(Name="least_cost_route", EmitDefaultValue=false)]
        public bool? LeastCostRoute { get; set; }

        /// <summary>
        /// An optional array of shipping methods to restict choices if least_cost_route is true
        /// </summary>
        /// <value>An optional array of shipping methods to restict choices if least_cost_route is true</value>
        [DataMember(Name="least_cost_route_shipping_methods", EmitDefaultValue=false)]
        public List<string> LeastCostRouteShippingMethods { get; set; }

        /// <summary>
        /// If true the customer is subscribed to any configured mailing lists
        /// </summary>
        /// <value>If true the customer is subscribed to any configured mailing lists</value>
        [DataMember(Name="mailing_list_opt_in", EmitDefaultValue=false)]
        public bool? MailingListOptIn { get; set; }

        /// <summary>
        /// If true no payment processing is done and the order is placed into Accounts Receivable
        /// </summary>
        /// <value>If true no payment processing is done and the order is placed into Accounts Receivable</value>
        [DataMember(Name="no_realtime_payment_processing", EmitDefaultValue=false)]
        public bool? NoRealtimePaymentProcessing { get; set; }


        /// <summary>
        /// Purchase order number
        /// </summary>
        /// <value>Purchase order number</value>
        [DataMember(Name="purchase_order_number", EmitDefaultValue=false)]
        public string PurchaseOrderNumber { get; set; }

        /// <summary>
        /// The rotating transaction gateway code for the gateway used to charge this order
        /// </summary>
        /// <value>The rotating transaction gateway code for the gateway used to charge this order</value>
        [DataMember(Name="rotating_transaction_gateway_code", EmitDefaultValue=false)]
        public string RotatingTransactionGatewayCode { get; set; }

        /// <summary>
        /// Sales rep code
        /// </summary>
        /// <value>Sales rep code</value>
        [DataMember(Name="sales_rep_code", EmitDefaultValue=false)]
        public string SalesRepCode { get; set; }

        /// <summary>
        /// Screen branding theme code
        /// </summary>
        /// <value>Screen branding theme code</value>
        [DataMember(Name="screen_branding_theme_code", EmitDefaultValue=false)]
        public string ScreenBrandingThemeCode { get; set; }

        /// <summary>
        /// Date the customer is requesting that the order ship on.  Typically used for perishable product delivery.
        /// </summary>
        /// <value>Date the customer is requesting that the order ship on.  Typically used for perishable product delivery.</value>
        [DataMember(Name="ship_on_date", EmitDefaultValue=false)]
        public string ShipOnDate { get; set; }

        /// <summary>
        /// True if the shipping adress is residential.  Effects the methods that are available to the customer as well as the price of the shipping method.
        /// </summary>
        /// <value>True if the shipping adress is residential.  Effects the methods that are available to the customer as well as the price of the shipping method.</value>
        [DataMember(Name="ship_to_residential", EmitDefaultValue=false)]
        public bool? ShipToResidential { get; set; }

        /// <summary>
        /// Shipping method
        /// </summary>
        /// <value>Shipping method</value>
        [DataMember(Name="shipping_method", EmitDefaultValue=false)]
        public string ShippingMethod { get; set; }

        /// <summary>
        /// Shipping Address line 1
        /// </summary>
        /// <value>Shipping Address line 1</value>
        [DataMember(Name="shipto_address1", EmitDefaultValue=false)]
        public string ShiptoAddress1 { get; set; }

        /// <summary>
        /// Shipping Address line 2
        /// </summary>
        /// <value>Shipping Address line 2</value>
        [DataMember(Name="shipto_address2", EmitDefaultValue=false)]
        public string ShiptoAddress2 { get; set; }

        /// <summary>
        /// Shipping City
        /// </summary>
        /// <value>Shipping City</value>
        [DataMember(Name="shipto_city", EmitDefaultValue=false)]
        public string ShiptoCity { get; set; }

        /// <summary>
        /// Shipping Company
        /// </summary>
        /// <value>Shipping Company</value>
        [DataMember(Name="shipto_company", EmitDefaultValue=false)]
        public string ShiptoCompany { get; set; }

        /// <summary>
        /// Shipping ISO-3166 two letter country code
        /// </summary>
        /// <value>Shipping ISO-3166 two letter country code</value>
        [DataMember(Name="shipto_country_code", EmitDefaultValue=false)]
        public string ShiptoCountryCode { get; set; }

        /// <summary>
        /// Shipping Day phone
        /// </summary>
        /// <value>Shipping Day phone</value>
        [DataMember(Name="shipto_day_phone", EmitDefaultValue=false)]
        public string ShiptoDayPhone { get; set; }

        /// <summary>
        /// Shipping Evening phone
        /// </summary>
        /// <value>Shipping Evening phone</value>
        [DataMember(Name="shipto_evening_phone", EmitDefaultValue=false)]
        public string ShiptoEveningPhone { get; set; }

        /// <summary>
        /// Shipping First name
        /// </summary>
        /// <value>Shipping First name</value>
        [DataMember(Name="shipto_first_name", EmitDefaultValue=false)]
        public string ShiptoFirstName { get; set; }

        /// <summary>
        /// Shipping Last name
        /// </summary>
        /// <value>Shipping Last name</value>
        [DataMember(Name="shipto_last_name", EmitDefaultValue=false)]
        public string ShiptoLastName { get; set; }

        /// <summary>
        /// Shipping Postal code
        /// </summary>
        /// <value>Shipping Postal code</value>
        [DataMember(Name="shipto_postal_code", EmitDefaultValue=false)]
        public string ShiptoPostalCode { get; set; }

        /// <summary>
        /// Shipping State for United States otherwise region or province for other countries
        /// </summary>
        /// <value>Shipping State for United States otherwise region or province for other countries</value>
        [DataMember(Name="shipto_state_region", EmitDefaultValue=false)]
        public string ShiptoStateRegion { get; set; }

        /// <summary>
        /// Shipping Title
        /// </summary>
        /// <value>Shipping Title</value>
        [DataMember(Name="shipto_title", EmitDefaultValue=false)]
        public string ShiptoTitle { get; set; }

        /// <summary>
        /// If true the order is placed directly into the shipping department
        /// </summary>
        /// <value>If true the order is placed directly into the shipping department</value>
        [DataMember(Name="skip_payment_processing", EmitDefaultValue=false)]
        public bool? SkipPaymentProcessing { get; set; }

        /// <summary>
        /// Special instructions from the customer regarding shipping
        /// </summary>
        /// <value>Special instructions from the customer regarding shipping</value>
        [DataMember(Name="special_instructions", EmitDefaultValue=false)]
        public string SpecialInstructions { get; set; }

        /// <summary>
        /// If true the order bypasses shipping and is marked completed
        /// </summary>
        /// <value>If true the order bypasses shipping and is marked completed</value>
        [DataMember(Name="store_completed", EmitDefaultValue=false)]
        public bool? StoreCompleted { get; set; }

        /// <summary>
        /// If true any failed payments are placed into Accounts Receivable.  If false any failed payments result in a rejected order resulting in errors thrown during the insert routine
        /// </summary>
        /// <value>If true any failed payments are placed into Accounts Receivable.  If false any failed payments result in a rejected order resulting in errors thrown during the insert routine</value>
        [DataMember(Name="store_if_payment_declines", EmitDefaultValue=false)]
        public bool? StoreIfPaymentDeclines { get; set; }

        /// <summary>
        /// StoreFront host name associated with the order
        /// </summary>
        /// <value>StoreFront host name associated with the order</value>
        [DataMember(Name="storefront_host_name", EmitDefaultValue=false)]
        public string StorefrontHostName { get; set; }

        /// <summary>
        /// The optional shipping county used to determine exact taxes
        /// </summary>
        /// <value>The optional shipping county used to determine exact taxes</value>
        [DataMember(Name="tax_county", EmitDefaultValue=false)]
        public string TaxCounty { get; set; }

        /// <summary>
        /// If true this order is marked as being tax exempt
        /// </summary>
        /// <value>If true this order is marked as being tax exempt</value>
        [DataMember(Name="tax_exempt", EmitDefaultValue=false)]
        public bool? TaxExempt { get; set; }

        /// <summary>
        /// Gets or Sets Transaction
        /// </summary>
        [DataMember(Name="transaction", EmitDefaultValue=false)]
        public ChannelPartnerOrderTransaction Transaction { get; set; }

        /// <summary>
        /// If true all warnings are considered errors, this is true by default
        /// </summary>
        /// <value>If true all warnings are considered errors, this is true by default</value>
        [DataMember(Name="treat_warnings_as_errors", EmitDefaultValue=false)]
        public bool? TreatWarningsAsErrors { get; set; }

        /// <summary>
        /// An Order Id from a prior purchase of this customer which is used to retrieve vaulted payment information in order to pay for this current order.
        /// </summary>
        /// <value>An Order Id from a prior purchase of this customer which is used to retrieve vaulted payment information in order to pay for this current order.</value>
        [DataMember(Name="use_prior_payment_information_from_order_id", EmitDefaultValue=false)]
        public string UsePriorPaymentInformationFromOrderId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ChannelPartnerOrder {\n");
            sb.Append("  AdvertisingSource: ").Append(AdvertisingSource).Append("\n");
            sb.Append("  AffiliateId: ").Append(AffiliateId).Append("\n");
            sb.Append("  AffiliateSubId: ").Append(AffiliateSubId).Append("\n");
            sb.Append("  ArbitraryShippingHandlingTotal: ").Append(ArbitraryShippingHandlingTotal).Append("\n");
            sb.Append("  ArbitraryTax: ").Append(ArbitraryTax).Append("\n");
            sb.Append("  ArbitraryTaxRate: ").Append(ArbitraryTaxRate).Append("\n");
            sb.Append("  ArbitraryTaxableSubtotal: ").Append(ArbitraryTaxableSubtotal).Append("\n");
            sb.Append("  AssociateWithCustomerProfileIfPresent: ").Append(AssociateWithCustomerProfileIfPresent).Append("\n");
            sb.Append("  AutoApprovePurchaseOrder: ").Append(AutoApprovePurchaseOrder).Append("\n");
            sb.Append("  BilltoAddress1: ").Append(BilltoAddress1).Append("\n");
            sb.Append("  BilltoAddress2: ").Append(BilltoAddress2).Append("\n");
            sb.Append("  BilltoCity: ").Append(BilltoCity).Append("\n");
            sb.Append("  BilltoCompany: ").Append(BilltoCompany).Append("\n");
            sb.Append("  BilltoCountryCode: ").Append(BilltoCountryCode).Append("\n");
            sb.Append("  BilltoDayPhone: ").Append(BilltoDayPhone).Append("\n");
            sb.Append("  BilltoEveningPhone: ").Append(BilltoEveningPhone).Append("\n");
            sb.Append("  BilltoFirstName: ").Append(BilltoFirstName).Append("\n");
            sb.Append("  BilltoLastName: ").Append(BilltoLastName).Append("\n");
            sb.Append("  BilltoPostalCode: ").Append(BilltoPostalCode).Append("\n");
            sb.Append("  BilltoStateRegion: ").Append(BilltoStateRegion).Append("\n");
            sb.Append("  BilltoTitle: ").Append(BilltoTitle).Append("\n");
            sb.Append("  CcEmail: ").Append(CcEmail).Append("\n");
            sb.Append("  ChannelPartnerOrderId: ").Append(ChannelPartnerOrderId).Append("\n");
            sb.Append("  ConsiderRecurring: ").Append(ConsiderRecurring).Append("\n");
            sb.Append("  Coupons: ").Append(Coupons).Append("\n");
            sb.Append("  CreditCardAuthorizationAmount: ").Append(CreditCardAuthorizationAmount).Append("\n");
            sb.Append("  CreditCardAuthorizationDts: ").Append(CreditCardAuthorizationDts).Append("\n");
            sb.Append("  CreditCardAuthorizationNumber: ").Append(CreditCardAuthorizationNumber).Append("\n");
            sb.Append("  CreditCardExpirationMonth: ").Append(CreditCardExpirationMonth).Append("\n");
            sb.Append("  CreditCardExpirationYear: ").Append(CreditCardExpirationYear).Append("\n");
            sb.Append("  CreditCardType: ").Append(CreditCardType).Append("\n");
            sb.Append("  CustomField1: ").Append(CustomField1).Append("\n");
            sb.Append("  CustomField2: ").Append(CustomField2).Append("\n");
            sb.Append("  CustomField3: ").Append(CustomField3).Append("\n");
            sb.Append("  CustomField4: ").Append(CustomField4).Append("\n");
            sb.Append("  CustomField5: ").Append(CustomField5).Append("\n");
            sb.Append("  CustomField6: ").Append(CustomField6).Append("\n");
            sb.Append("  CustomField7: ").Append(CustomField7).Append("\n");
            sb.Append("  DeliveryDate: ").Append(DeliveryDate).Append("\n");
            sb.Append("  EcheckBankAbaCode: ").Append(EcheckBankAbaCode).Append("\n");
            sb.Append("  EcheckBankAccountName: ").Append(EcheckBankAccountName).Append("\n");
            sb.Append("  EcheckBankAccountNumber: ").Append(EcheckBankAccountNumber).Append("\n");
            sb.Append("  EcheckBankAccountType: ").Append(EcheckBankAccountType).Append("\n");
            sb.Append("  EcheckBankName: ").Append(EcheckBankName).Append("\n");
            sb.Append("  EcheckBankOwnerType: ").Append(EcheckBankOwnerType).Append("\n");
            sb.Append("  EcheckCustomerTaxId: ").Append(EcheckCustomerTaxId).Append("\n");
            sb.Append("  EcheckDriversLicenseDob: ").Append(EcheckDriversLicenseDob).Append("\n");
            sb.Append("  EcheckDriversLicenseNumber: ").Append(EcheckDriversLicenseNumber).Append("\n");
            sb.Append("  EcheckDriversLicenseState: ").Append(EcheckDriversLicenseState).Append("\n");
            sb.Append("  Email: ").Append(Email).Append("\n");
            sb.Append("  Gift: ").Append(Gift).Append("\n");
            sb.Append("  GiftEmail: ").Append(GiftEmail).Append("\n");
            sb.Append("  GiftMessage: ").Append(GiftMessage).Append("\n");
            sb.Append("  HostedFieldsCardToken: ").Append(HostedFieldsCardToken).Append("\n");
            sb.Append("  HostedFieldsCvvToken: ").Append(HostedFieldsCvvToken).Append("\n");
            sb.Append("  InsuranceApplicationId: ").Append(InsuranceApplicationId).Append("\n");
            sb.Append("  InsuranceClaimId: ").Append(InsuranceClaimId).Append("\n");
            sb.Append("  IpAddress: ").Append(IpAddress).Append("\n");
            sb.Append("  Items: ").Append(Items).Append("\n");
            sb.Append("  LeastCostRoute: ").Append(LeastCostRoute).Append("\n");
            sb.Append("  LeastCostRouteShippingMethods: ").Append(LeastCostRouteShippingMethods).Append("\n");
            sb.Append("  MailingListOptIn: ").Append(MailingListOptIn).Append("\n");
            sb.Append("  NoRealtimePaymentProcessing: ").Append(NoRealtimePaymentProcessing).Append("\n");
            sb.Append("  PaymentMethod: ").Append(PaymentMethod).Append("\n");
            sb.Append("  PurchaseOrderNumber: ").Append(PurchaseOrderNumber).Append("\n");
            sb.Append("  RotatingTransactionGatewayCode: ").Append(RotatingTransactionGatewayCode).Append("\n");
            sb.Append("  SalesRepCode: ").Append(SalesRepCode).Append("\n");
            sb.Append("  ScreenBrandingThemeCode: ").Append(ScreenBrandingThemeCode).Append("\n");
            sb.Append("  ShipOnDate: ").Append(ShipOnDate).Append("\n");
            sb.Append("  ShipToResidential: ").Append(ShipToResidential).Append("\n");
            sb.Append("  ShippingMethod: ").Append(ShippingMethod).Append("\n");
            sb.Append("  ShiptoAddress1: ").Append(ShiptoAddress1).Append("\n");
            sb.Append("  ShiptoAddress2: ").Append(ShiptoAddress2).Append("\n");
            sb.Append("  ShiptoCity: ").Append(ShiptoCity).Append("\n");
            sb.Append("  ShiptoCompany: ").Append(ShiptoCompany).Append("\n");
            sb.Append("  ShiptoCountryCode: ").Append(ShiptoCountryCode).Append("\n");
            sb.Append("  ShiptoDayPhone: ").Append(ShiptoDayPhone).Append("\n");
            sb.Append("  ShiptoEveningPhone: ").Append(ShiptoEveningPhone).Append("\n");
            sb.Append("  ShiptoFirstName: ").Append(ShiptoFirstName).Append("\n");
            sb.Append("  ShiptoLastName: ").Append(ShiptoLastName).Append("\n");
            sb.Append("  ShiptoPostalCode: ").Append(ShiptoPostalCode).Append("\n");
            sb.Append("  ShiptoStateRegion: ").Append(ShiptoStateRegion).Append("\n");
            sb.Append("  ShiptoTitle: ").Append(ShiptoTitle).Append("\n");
            sb.Append("  SkipPaymentProcessing: ").Append(SkipPaymentProcessing).Append("\n");
            sb.Append("  SpecialInstructions: ").Append(SpecialInstructions).Append("\n");
            sb.Append("  StoreCompleted: ").Append(StoreCompleted).Append("\n");
            sb.Append("  StoreIfPaymentDeclines: ").Append(StoreIfPaymentDeclines).Append("\n");
            sb.Append("  StorefrontHostName: ").Append(StorefrontHostName).Append("\n");
            sb.Append("  TaxCounty: ").Append(TaxCounty).Append("\n");
            sb.Append("  TaxExempt: ").Append(TaxExempt).Append("\n");
            sb.Append("  Transaction: ").Append(Transaction).Append("\n");
            sb.Append("  TreatWarningsAsErrors: ").Append(TreatWarningsAsErrors).Append("\n");
            sb.Append("  UsePriorPaymentInformationFromOrderId: ").Append(UsePriorPaymentInformationFromOrderId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ChannelPartnerOrder);
        }

        /// <summary>
        /// Returns true if ChannelPartnerOrder instances are equal
        /// </summary>
        /// <param name="input">Instance of ChannelPartnerOrder to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ChannelPartnerOrder input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.AdvertisingSource == input.AdvertisingSource ||
                    (this.AdvertisingSource != null &&
                    this.AdvertisingSource.Equals(input.AdvertisingSource))
                ) && 
                (
                    this.AffiliateId == input.AffiliateId ||
                    (this.AffiliateId != null &&
                    this.AffiliateId.Equals(input.AffiliateId))
                ) && 
                (
                    this.AffiliateSubId == input.AffiliateSubId ||
                    (this.AffiliateSubId != null &&
                    this.AffiliateSubId.Equals(input.AffiliateSubId))
                ) && 
                (
                    this.ArbitraryShippingHandlingTotal == input.ArbitraryShippingHandlingTotal ||
                    (this.ArbitraryShippingHandlingTotal != null &&
                    this.ArbitraryShippingHandlingTotal.Equals(input.ArbitraryShippingHandlingTotal))
                ) && 
                (
                    this.ArbitraryTax == input.ArbitraryTax ||
                    (this.ArbitraryTax != null &&
                    this.ArbitraryTax.Equals(input.ArbitraryTax))
                ) && 
                (
                    this.ArbitraryTaxRate == input.ArbitraryTaxRate ||
                    (this.ArbitraryTaxRate != null &&
                    this.ArbitraryTaxRate.Equals(input.ArbitraryTaxRate))
                ) && 
                (
                    this.ArbitraryTaxableSubtotal == input.ArbitraryTaxableSubtotal ||
                    (this.ArbitraryTaxableSubtotal != null &&
                    this.ArbitraryTaxableSubtotal.Equals(input.ArbitraryTaxableSubtotal))
                ) && 
                (
                    this.AssociateWithCustomerProfileIfPresent == input.AssociateWithCustomerProfileIfPresent ||
                    (this.AssociateWithCustomerProfileIfPresent != null &&
                    this.AssociateWithCustomerProfileIfPresent.Equals(input.AssociateWithCustomerProfileIfPresent))
                ) && 
                (
                    this.AutoApprovePurchaseOrder == input.AutoApprovePurchaseOrder ||
                    (this.AutoApprovePurchaseOrder != null &&
                    this.AutoApprovePurchaseOrder.Equals(input.AutoApprovePurchaseOrder))
                ) && 
                (
                    this.BilltoAddress1 == input.BilltoAddress1 ||
                    (this.BilltoAddress1 != null &&
                    this.BilltoAddress1.Equals(input.BilltoAddress1))
                ) && 
                (
                    this.BilltoAddress2 == input.BilltoAddress2 ||
                    (this.BilltoAddress2 != null &&
                    this.BilltoAddress2.Equals(input.BilltoAddress2))
                ) && 
                (
                    this.BilltoCity == input.BilltoCity ||
                    (this.BilltoCity != null &&
                    this.BilltoCity.Equals(input.BilltoCity))
                ) && 
                (
                    this.BilltoCompany == input.BilltoCompany ||
                    (this.BilltoCompany != null &&
                    this.BilltoCompany.Equals(input.BilltoCompany))
                ) && 
                (
                    this.BilltoCountryCode == input.BilltoCountryCode ||
                    (this.BilltoCountryCode != null &&
                    this.BilltoCountryCode.Equals(input.BilltoCountryCode))
                ) && 
                (
                    this.BilltoDayPhone == input.BilltoDayPhone ||
                    (this.BilltoDayPhone != null &&
                    this.BilltoDayPhone.Equals(input.BilltoDayPhone))
                ) && 
                (
                    this.BilltoEveningPhone == input.BilltoEveningPhone ||
                    (this.BilltoEveningPhone != null &&
                    this.BilltoEveningPhone.Equals(input.BilltoEveningPhone))
                ) && 
                (
                    this.BilltoFirstName == input.BilltoFirstName ||
                    (this.BilltoFirstName != null &&
                    this.BilltoFirstName.Equals(input.BilltoFirstName))
                ) && 
                (
                    this.BilltoLastName == input.BilltoLastName ||
                    (this.BilltoLastName != null &&
                    this.BilltoLastName.Equals(input.BilltoLastName))
                ) && 
                (
                    this.BilltoPostalCode == input.BilltoPostalCode ||
                    (this.BilltoPostalCode != null &&
                    this.BilltoPostalCode.Equals(input.BilltoPostalCode))
                ) && 
                (
                    this.BilltoStateRegion == input.BilltoStateRegion ||
                    (this.BilltoStateRegion != null &&
                    this.BilltoStateRegion.Equals(input.BilltoStateRegion))
                ) && 
                (
                    this.BilltoTitle == input.BilltoTitle ||
                    (this.BilltoTitle != null &&
                    this.BilltoTitle.Equals(input.BilltoTitle))
                ) && 
                (
                    this.CcEmail == input.CcEmail ||
                    (this.CcEmail != null &&
                    this.CcEmail.Equals(input.CcEmail))
                ) && 
                (
                    this.ChannelPartnerOrderId == input.ChannelPartnerOrderId ||
                    (this.ChannelPartnerOrderId != null &&
                    this.ChannelPartnerOrderId.Equals(input.ChannelPartnerOrderId))
                ) && 
                (
                    this.ConsiderRecurring == input.ConsiderRecurring ||
                    (this.ConsiderRecurring != null &&
                    this.ConsiderRecurring.Equals(input.ConsiderRecurring))
                ) && 
                (
                    this.Coupons == input.Coupons ||
                    this.Coupons != null &&
                    this.Coupons.SequenceEqual(input.Coupons)
                ) && 
                (
                    this.CreditCardAuthorizationAmount == input.CreditCardAuthorizationAmount ||
                    (this.CreditCardAuthorizationAmount != null &&
                    this.CreditCardAuthorizationAmount.Equals(input.CreditCardAuthorizationAmount))
                ) && 
                (
                    this.CreditCardAuthorizationDts == input.CreditCardAuthorizationDts ||
                    (this.CreditCardAuthorizationDts != null &&
                    this.CreditCardAuthorizationDts.Equals(input.CreditCardAuthorizationDts))
                ) && 
                (
                    this.CreditCardAuthorizationNumber == input.CreditCardAuthorizationNumber ||
                    (this.CreditCardAuthorizationNumber != null &&
                    this.CreditCardAuthorizationNumber.Equals(input.CreditCardAuthorizationNumber))
                ) && 
                (
                    this.CreditCardExpirationMonth == input.CreditCardExpirationMonth ||
                    (this.CreditCardExpirationMonth != null &&
                    this.CreditCardExpirationMonth.Equals(input.CreditCardExpirationMonth))
                ) && 
                (
                    this.CreditCardExpirationYear == input.CreditCardExpirationYear ||
                    (this.CreditCardExpirationYear != null &&
                    this.CreditCardExpirationYear.Equals(input.CreditCardExpirationYear))
                ) && 
                (
                    this.CreditCardType == input.CreditCardType ||
                    (this.CreditCardType != null &&
                    this.CreditCardType.Equals(input.CreditCardType))
                ) && 
                (
                    this.CustomField1 == input.CustomField1 ||
                    (this.CustomField1 != null &&
                    this.CustomField1.Equals(input.CustomField1))
                ) && 
                (
                    this.CustomField2 == input.CustomField2 ||
                    (this.CustomField2 != null &&
                    this.CustomField2.Equals(input.CustomField2))
                ) && 
                (
                    this.CustomField3 == input.CustomField3 ||
                    (this.CustomField3 != null &&
                    this.CustomField3.Equals(input.CustomField3))
                ) && 
                (
                    this.CustomField4 == input.CustomField4 ||
                    (this.CustomField4 != null &&
                    this.CustomField4.Equals(input.CustomField4))
                ) && 
                (
                    this.CustomField5 == input.CustomField5 ||
                    (this.CustomField5 != null &&
                    this.CustomField5.Equals(input.CustomField5))
                ) && 
                (
                    this.CustomField6 == input.CustomField6 ||
                    (this.CustomField6 != null &&
                    this.CustomField6.Equals(input.CustomField6))
                ) && 
                (
                    this.CustomField7 == input.CustomField7 ||
                    (this.CustomField7 != null &&
                    this.CustomField7.Equals(input.CustomField7))
                ) && 
                (
                    this.DeliveryDate == input.DeliveryDate ||
                    (this.DeliveryDate != null &&
                    this.DeliveryDate.Equals(input.DeliveryDate))
                ) && 
                (
                    this.EcheckBankAbaCode == input.EcheckBankAbaCode ||
                    (this.EcheckBankAbaCode != null &&
                    this.EcheckBankAbaCode.Equals(input.EcheckBankAbaCode))
                ) && 
                (
                    this.EcheckBankAccountName == input.EcheckBankAccountName ||
                    (this.EcheckBankAccountName != null &&
                    this.EcheckBankAccountName.Equals(input.EcheckBankAccountName))
                ) && 
                (
                    this.EcheckBankAccountNumber == input.EcheckBankAccountNumber ||
                    (this.EcheckBankAccountNumber != null &&
                    this.EcheckBankAccountNumber.Equals(input.EcheckBankAccountNumber))
                ) && 
                (
                    this.EcheckBankAccountType == input.EcheckBankAccountType ||
                    (this.EcheckBankAccountType != null &&
                    this.EcheckBankAccountType.Equals(input.EcheckBankAccountType))
                ) && 
                (
                    this.EcheckBankName == input.EcheckBankName ||
                    (this.EcheckBankName != null &&
                    this.EcheckBankName.Equals(input.EcheckBankName))
                ) && 
                (
                    this.EcheckBankOwnerType == input.EcheckBankOwnerType ||
                    (this.EcheckBankOwnerType != null &&
                    this.EcheckBankOwnerType.Equals(input.EcheckBankOwnerType))
                ) && 
                (
                    this.EcheckCustomerTaxId == input.EcheckCustomerTaxId ||
                    (this.EcheckCustomerTaxId != null &&
                    this.EcheckCustomerTaxId.Equals(input.EcheckCustomerTaxId))
                ) && 
                (
                    this.EcheckDriversLicenseDob == input.EcheckDriversLicenseDob ||
                    (this.EcheckDriversLicenseDob != null &&
                    this.EcheckDriversLicenseDob.Equals(input.EcheckDriversLicenseDob))
                ) && 
                (
                    this.EcheckDriversLicenseNumber == input.EcheckDriversLicenseNumber ||
                    (this.EcheckDriversLicenseNumber != null &&
                    this.EcheckDriversLicenseNumber.Equals(input.EcheckDriversLicenseNumber))
                ) && 
                (
                    this.EcheckDriversLicenseState == input.EcheckDriversLicenseState ||
                    (this.EcheckDriversLicenseState != null &&
                    this.EcheckDriversLicenseState.Equals(input.EcheckDriversLicenseState))
                ) && 
                (
                    this.Email == input.Email ||
                    (this.Email != null &&
                    this.Email.Equals(input.Email))
                ) && 
                (
                    this.Gift == input.Gift ||
                    (this.Gift != null &&
                    this.Gift.Equals(input.Gift))
                ) && 
                (
                    this.GiftEmail == input.GiftEmail ||
                    (this.GiftEmail != null &&
                    this.GiftEmail.Equals(input.GiftEmail))
                ) && 
                (
                    this.GiftMessage == input.GiftMessage ||
                    (this.GiftMessage != null &&
                    this.GiftMessage.Equals(input.GiftMessage))
                ) && 
                (
                    this.HostedFieldsCardToken == input.HostedFieldsCardToken ||
                    (this.HostedFieldsCardToken != null &&
                    this.HostedFieldsCardToken.Equals(input.HostedFieldsCardToken))
                ) && 
                (
                    this.HostedFieldsCvvToken == input.HostedFieldsCvvToken ||
                    (this.HostedFieldsCvvToken != null &&
                    this.HostedFieldsCvvToken.Equals(input.HostedFieldsCvvToken))
                ) && 
                (
                    this.InsuranceApplicationId == input.InsuranceApplicationId ||
                    (this.InsuranceApplicationId != null &&
                    this.InsuranceApplicationId.Equals(input.InsuranceApplicationId))
                ) && 
                (
                    this.InsuranceClaimId == input.InsuranceClaimId ||
                    (this.InsuranceClaimId != null &&
                    this.InsuranceClaimId.Equals(input.InsuranceClaimId))
                ) && 
                (
                    this.IpAddress == input.IpAddress ||
                    (this.IpAddress != null &&
                    this.IpAddress.Equals(input.IpAddress))
                ) && 
                (
                    this.Items == input.Items ||
                    this.Items != null &&
                    this.Items.SequenceEqual(input.Items)
                ) && 
                (
                    this.LeastCostRoute == input.LeastCostRoute ||
                    (this.LeastCostRoute != null &&
                    this.LeastCostRoute.Equals(input.LeastCostRoute))
                ) && 
                (
                    this.LeastCostRouteShippingMethods == input.LeastCostRouteShippingMethods ||
                    this.LeastCostRouteShippingMethods != null &&
                    this.LeastCostRouteShippingMethods.SequenceEqual(input.LeastCostRouteShippingMethods)
                ) && 
                (
                    this.MailingListOptIn == input.MailingListOptIn ||
                    (this.MailingListOptIn != null &&
                    this.MailingListOptIn.Equals(input.MailingListOptIn))
                ) && 
                (
                    this.NoRealtimePaymentProcessing == input.NoRealtimePaymentProcessing ||
                    (this.NoRealtimePaymentProcessing != null &&
                    this.NoRealtimePaymentProcessing.Equals(input.NoRealtimePaymentProcessing))
                ) && 
                (
                    this.PaymentMethod == input.PaymentMethod ||
                    (this.PaymentMethod != null &&
                    this.PaymentMethod.Equals(input.PaymentMethod))
                ) && 
                (
                    this.PurchaseOrderNumber == input.PurchaseOrderNumber ||
                    (this.PurchaseOrderNumber != null &&
                    this.PurchaseOrderNumber.Equals(input.PurchaseOrderNumber))
                ) && 
                (
                    this.RotatingTransactionGatewayCode == input.RotatingTransactionGatewayCode ||
                    (this.RotatingTransactionGatewayCode != null &&
                    this.RotatingTransactionGatewayCode.Equals(input.RotatingTransactionGatewayCode))
                ) && 
                (
                    this.SalesRepCode == input.SalesRepCode ||
                    (this.SalesRepCode != null &&
                    this.SalesRepCode.Equals(input.SalesRepCode))
                ) && 
                (
                    this.ScreenBrandingThemeCode == input.ScreenBrandingThemeCode ||
                    (this.ScreenBrandingThemeCode != null &&
                    this.ScreenBrandingThemeCode.Equals(input.ScreenBrandingThemeCode))
                ) && 
                (
                    this.ShipOnDate == input.ShipOnDate ||
                    (this.ShipOnDate != null &&
                    this.ShipOnDate.Equals(input.ShipOnDate))
                ) && 
                (
                    this.ShipToResidential == input.ShipToResidential ||
                    (this.ShipToResidential != null &&
                    this.ShipToResidential.Equals(input.ShipToResidential))
                ) && 
                (
                    this.ShippingMethod == input.ShippingMethod ||
                    (this.ShippingMethod != null &&
                    this.ShippingMethod.Equals(input.ShippingMethod))
                ) && 
                (
                    this.ShiptoAddress1 == input.ShiptoAddress1 ||
                    (this.ShiptoAddress1 != null &&
                    this.ShiptoAddress1.Equals(input.ShiptoAddress1))
                ) && 
                (
                    this.ShiptoAddress2 == input.ShiptoAddress2 ||
                    (this.ShiptoAddress2 != null &&
                    this.ShiptoAddress2.Equals(input.ShiptoAddress2))
                ) && 
                (
                    this.ShiptoCity == input.ShiptoCity ||
                    (this.ShiptoCity != null &&
                    this.ShiptoCity.Equals(input.ShiptoCity))
                ) && 
                (
                    this.ShiptoCompany == input.ShiptoCompany ||
                    (this.ShiptoCompany != null &&
                    this.ShiptoCompany.Equals(input.ShiptoCompany))
                ) && 
                (
                    this.ShiptoCountryCode == input.ShiptoCountryCode ||
                    (this.ShiptoCountryCode != null &&
                    this.ShiptoCountryCode.Equals(input.ShiptoCountryCode))
                ) && 
                (
                    this.ShiptoDayPhone == input.ShiptoDayPhone ||
                    (this.ShiptoDayPhone != null &&
                    this.ShiptoDayPhone.Equals(input.ShiptoDayPhone))
                ) && 
                (
                    this.ShiptoEveningPhone == input.ShiptoEveningPhone ||
                    (this.ShiptoEveningPhone != null &&
                    this.ShiptoEveningPhone.Equals(input.ShiptoEveningPhone))
                ) && 
                (
                    this.ShiptoFirstName == input.ShiptoFirstName ||
                    (this.ShiptoFirstName != null &&
                    this.ShiptoFirstName.Equals(input.ShiptoFirstName))
                ) && 
                (
                    this.ShiptoLastName == input.ShiptoLastName ||
                    (this.ShiptoLastName != null &&
                    this.ShiptoLastName.Equals(input.ShiptoLastName))
                ) && 
                (
                    this.ShiptoPostalCode == input.ShiptoPostalCode ||
                    (this.ShiptoPostalCode != null &&
                    this.ShiptoPostalCode.Equals(input.ShiptoPostalCode))
                ) && 
                (
                    this.ShiptoStateRegion == input.ShiptoStateRegion ||
                    (this.ShiptoStateRegion != null &&
                    this.ShiptoStateRegion.Equals(input.ShiptoStateRegion))
                ) && 
                (
                    this.ShiptoTitle == input.ShiptoTitle ||
                    (this.ShiptoTitle != null &&
                    this.ShiptoTitle.Equals(input.ShiptoTitle))
                ) && 
                (
                    this.SkipPaymentProcessing == input.SkipPaymentProcessing ||
                    (this.SkipPaymentProcessing != null &&
                    this.SkipPaymentProcessing.Equals(input.SkipPaymentProcessing))
                ) && 
                (
                    this.SpecialInstructions == input.SpecialInstructions ||
                    (this.SpecialInstructions != null &&
                    this.SpecialInstructions.Equals(input.SpecialInstructions))
                ) && 
                (
                    this.StoreCompleted == input.StoreCompleted ||
                    (this.StoreCompleted != null &&
                    this.StoreCompleted.Equals(input.StoreCompleted))
                ) && 
                (
                    this.StoreIfPaymentDeclines == input.StoreIfPaymentDeclines ||
                    (this.StoreIfPaymentDeclines != null &&
                    this.StoreIfPaymentDeclines.Equals(input.StoreIfPaymentDeclines))
                ) && 
                (
                    this.StorefrontHostName == input.StorefrontHostName ||
                    (this.StorefrontHostName != null &&
                    this.StorefrontHostName.Equals(input.StorefrontHostName))
                ) && 
                (
                    this.TaxCounty == input.TaxCounty ||
                    (this.TaxCounty != null &&
                    this.TaxCounty.Equals(input.TaxCounty))
                ) && 
                (
                    this.TaxExempt == input.TaxExempt ||
                    (this.TaxExempt != null &&
                    this.TaxExempt.Equals(input.TaxExempt))
                ) && 
                (
                    this.Transaction == input.Transaction ||
                    (this.Transaction != null &&
                    this.Transaction.Equals(input.Transaction))
                ) && 
                (
                    this.TreatWarningsAsErrors == input.TreatWarningsAsErrors ||
                    (this.TreatWarningsAsErrors != null &&
                    this.TreatWarningsAsErrors.Equals(input.TreatWarningsAsErrors))
                ) && 
                (
                    this.UsePriorPaymentInformationFromOrderId == input.UsePriorPaymentInformationFromOrderId ||
                    (this.UsePriorPaymentInformationFromOrderId != null &&
                    this.UsePriorPaymentInformationFromOrderId.Equals(input.UsePriorPaymentInformationFromOrderId))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AdvertisingSource != null)
                    hashCode = hashCode * 59 + this.AdvertisingSource.GetHashCode();
                if (this.AffiliateId != null)
                    hashCode = hashCode * 59 + this.AffiliateId.GetHashCode();
                if (this.AffiliateSubId != null)
                    hashCode = hashCode * 59 + this.AffiliateSubId.GetHashCode();
                if (this.ArbitraryShippingHandlingTotal != null)
                    hashCode = hashCode * 59 + this.ArbitraryShippingHandlingTotal.GetHashCode();
                if (this.ArbitraryTax != null)
                    hashCode = hashCode * 59 + this.ArbitraryTax.GetHashCode();
                if (this.ArbitraryTaxRate != null)
                    hashCode = hashCode * 59 + this.ArbitraryTaxRate.GetHashCode();
                if (this.ArbitraryTaxableSubtotal != null)
                    hashCode = hashCode * 59 + this.ArbitraryTaxableSubtotal.GetHashCode();
                if (this.AssociateWithCustomerProfileIfPresent != null)
                    hashCode = hashCode * 59 + this.AssociateWithCustomerProfileIfPresent.GetHashCode();
                if (this.AutoApprovePurchaseOrder != null)
                    hashCode = hashCode * 59 + this.AutoApprovePurchaseOrder.GetHashCode();
                if (this.BilltoAddress1 != null)
                    hashCode = hashCode * 59 + this.BilltoAddress1.GetHashCode();
                if (this.BilltoAddress2 != null)
                    hashCode = hashCode * 59 + this.BilltoAddress2.GetHashCode();
                if (this.BilltoCity != null)
                    hashCode = hashCode * 59 + this.BilltoCity.GetHashCode();
                if (this.BilltoCompany != null)
                    hashCode = hashCode * 59 + this.BilltoCompany.GetHashCode();
                if (this.BilltoCountryCode != null)
                    hashCode = hashCode * 59 + this.BilltoCountryCode.GetHashCode();
                if (this.BilltoDayPhone != null)
                    hashCode = hashCode * 59 + this.BilltoDayPhone.GetHashCode();
                if (this.BilltoEveningPhone != null)
                    hashCode = hashCode * 59 + this.BilltoEveningPhone.GetHashCode();
                if (this.BilltoFirstName != null)
                    hashCode = hashCode * 59 + this.BilltoFirstName.GetHashCode();
                if (this.BilltoLastName != null)
                    hashCode = hashCode * 59 + this.BilltoLastName.GetHashCode();
                if (this.BilltoPostalCode != null)
                    hashCode = hashCode * 59 + this.BilltoPostalCode.GetHashCode();
                if (this.BilltoStateRegion != null)
                    hashCode = hashCode * 59 + this.BilltoStateRegion.GetHashCode();
                if (this.BilltoTitle != null)
                    hashCode = hashCode * 59 + this.BilltoTitle.GetHashCode();
                if (this.CcEmail != null)
                    hashCode = hashCode * 59 + this.CcEmail.GetHashCode();
                if (this.ChannelPartnerOrderId != null)
                    hashCode = hashCode * 59 + this.ChannelPartnerOrderId.GetHashCode();
                if (this.ConsiderRecurring != null)
                    hashCode = hashCode * 59 + this.ConsiderRecurring.GetHashCode();
                if (this.Coupons != null)
                    hashCode = hashCode * 59 + this.Coupons.GetHashCode();
                if (this.CreditCardAuthorizationAmount != null)
                    hashCode = hashCode * 59 + this.CreditCardAuthorizationAmount.GetHashCode();
                if (this.CreditCardAuthorizationDts != null)
                    hashCode = hashCode * 59 + this.CreditCardAuthorizationDts.GetHashCode();
                if (this.CreditCardAuthorizationNumber != null)
                    hashCode = hashCode * 59 + this.CreditCardAuthorizationNumber.GetHashCode();
                if (this.CreditCardExpirationMonth != null)
                    hashCode = hashCode * 59 + this.CreditCardExpirationMonth.GetHashCode();
                if (this.CreditCardExpirationYear != null)
                    hashCode = hashCode * 59 + this.CreditCardExpirationYear.GetHashCode();
                if (this.CreditCardType != null)
                    hashCode = hashCode * 59 + this.CreditCardType.GetHashCode();
                if (this.CustomField1 != null)
                    hashCode = hashCode * 59 + this.CustomField1.GetHashCode();
                if (this.CustomField2 != null)
                    hashCode = hashCode * 59 + this.CustomField2.GetHashCode();
                if (this.CustomField3 != null)
                    hashCode = hashCode * 59 + this.CustomField3.GetHashCode();
                if (this.CustomField4 != null)
                    hashCode = hashCode * 59 + this.CustomField4.GetHashCode();
                if (this.CustomField5 != null)
                    hashCode = hashCode * 59 + this.CustomField5.GetHashCode();
                if (this.CustomField6 != null)
                    hashCode = hashCode * 59 + this.CustomField6.GetHashCode();
                if (this.CustomField7 != null)
                    hashCode = hashCode * 59 + this.CustomField7.GetHashCode();
                if (this.DeliveryDate != null)
                    hashCode = hashCode * 59 + this.DeliveryDate.GetHashCode();
                if (this.EcheckBankAbaCode != null)
                    hashCode = hashCode * 59 + this.EcheckBankAbaCode.GetHashCode();
                if (this.EcheckBankAccountName != null)
                    hashCode = hashCode * 59 + this.EcheckBankAccountName.GetHashCode();
                if (this.EcheckBankAccountNumber != null)
                    hashCode = hashCode * 59 + this.EcheckBankAccountNumber.GetHashCode();
                if (this.EcheckBankAccountType != null)
                    hashCode = hashCode * 59 + this.EcheckBankAccountType.GetHashCode();
                if (this.EcheckBankName != null)
                    hashCode = hashCode * 59 + this.EcheckBankName.GetHashCode();
                if (this.EcheckBankOwnerType != null)
                    hashCode = hashCode * 59 + this.EcheckBankOwnerType.GetHashCode();
                if (this.EcheckCustomerTaxId != null)
                    hashCode = hashCode * 59 + this.EcheckCustomerTaxId.GetHashCode();
                if (this.EcheckDriversLicenseDob != null)
                    hashCode = hashCode * 59 + this.EcheckDriversLicenseDob.GetHashCode();
                if (this.EcheckDriversLicenseNumber != null)
                    hashCode = hashCode * 59 + this.EcheckDriversLicenseNumber.GetHashCode();
                if (this.EcheckDriversLicenseState != null)
                    hashCode = hashCode * 59 + this.EcheckDriversLicenseState.GetHashCode();
                if (this.Email != null)
                    hashCode = hashCode * 59 + this.Email.GetHashCode();
                if (this.Gift != null)
                    hashCode = hashCode * 59 + this.Gift.GetHashCode();
                if (this.GiftEmail != null)
                    hashCode = hashCode * 59 + this.GiftEmail.GetHashCode();
                if (this.GiftMessage != null)
                    hashCode = hashCode * 59 + this.GiftMessage.GetHashCode();
                if (this.HostedFieldsCardToken != null)
                    hashCode = hashCode * 59 + this.HostedFieldsCardToken.GetHashCode();
                if (this.HostedFieldsCvvToken != null)
                    hashCode = hashCode * 59 + this.HostedFieldsCvvToken.GetHashCode();
                if (this.InsuranceApplicationId != null)
                    hashCode = hashCode * 59 + this.InsuranceApplicationId.GetHashCode();
                if (this.InsuranceClaimId != null)
                    hashCode = hashCode * 59 + this.InsuranceClaimId.GetHashCode();
                if (this.IpAddress != null)
                    hashCode = hashCode * 59 + this.IpAddress.GetHashCode();
                if (this.Items != null)
                    hashCode = hashCode * 59 + this.Items.GetHashCode();
                if (this.LeastCostRoute != null)
                    hashCode = hashCode * 59 + this.LeastCostRoute.GetHashCode();
                if (this.LeastCostRouteShippingMethods != null)
                    hashCode = hashCode * 59 + this.LeastCostRouteShippingMethods.GetHashCode();
                if (this.MailingListOptIn != null)
                    hashCode = hashCode * 59 + this.MailingListOptIn.GetHashCode();
                if (this.NoRealtimePaymentProcessing != null)
                    hashCode = hashCode * 59 + this.NoRealtimePaymentProcessing.GetHashCode();
                if (this.PaymentMethod != null)
                    hashCode = hashCode * 59 + this.PaymentMethod.GetHashCode();
                if (this.PurchaseOrderNumber != null)
                    hashCode = hashCode * 59 + this.PurchaseOrderNumber.GetHashCode();
                if (this.RotatingTransactionGatewayCode != null)
                    hashCode = hashCode * 59 + this.RotatingTransactionGatewayCode.GetHashCode();
                if (this.SalesRepCode != null)
                    hashCode = hashCode * 59 + this.SalesRepCode.GetHashCode();
                if (this.ScreenBrandingThemeCode != null)
                    hashCode = hashCode * 59 + this.ScreenBrandingThemeCode.GetHashCode();
                if (this.ShipOnDate != null)
                    hashCode = hashCode * 59 + this.ShipOnDate.GetHashCode();
                if (this.ShipToResidential != null)
                    hashCode = hashCode * 59 + this.ShipToResidential.GetHashCode();
                if (this.ShippingMethod != null)
                    hashCode = hashCode * 59 + this.ShippingMethod.GetHashCode();
                if (this.ShiptoAddress1 != null)
                    hashCode = hashCode * 59 + this.ShiptoAddress1.GetHashCode();
                if (this.ShiptoAddress2 != null)
                    hashCode = hashCode * 59 + this.ShiptoAddress2.GetHashCode();
                if (this.ShiptoCity != null)
                    hashCode = hashCode * 59 + this.ShiptoCity.GetHashCode();
                if (this.ShiptoCompany != null)
                    hashCode = hashCode * 59 + this.ShiptoCompany.GetHashCode();
                if (this.ShiptoCountryCode != null)
                    hashCode = hashCode * 59 + this.ShiptoCountryCode.GetHashCode();
                if (this.ShiptoDayPhone != null)
                    hashCode = hashCode * 59 + this.ShiptoDayPhone.GetHashCode();
                if (this.ShiptoEveningPhone != null)
                    hashCode = hashCode * 59 + this.ShiptoEveningPhone.GetHashCode();
                if (this.ShiptoFirstName != null)
                    hashCode = hashCode * 59 + this.ShiptoFirstName.GetHashCode();
                if (this.ShiptoLastName != null)
                    hashCode = hashCode * 59 + this.ShiptoLastName.GetHashCode();
                if (this.ShiptoPostalCode != null)
                    hashCode = hashCode * 59 + this.ShiptoPostalCode.GetHashCode();
                if (this.ShiptoStateRegion != null)
                    hashCode = hashCode * 59 + this.ShiptoStateRegion.GetHashCode();
                if (this.ShiptoTitle != null)
                    hashCode = hashCode * 59 + this.ShiptoTitle.GetHashCode();
                if (this.SkipPaymentProcessing != null)
                    hashCode = hashCode * 59 + this.SkipPaymentProcessing.GetHashCode();
                if (this.SpecialInstructions != null)
                    hashCode = hashCode * 59 + this.SpecialInstructions.GetHashCode();
                if (this.StoreCompleted != null)
                    hashCode = hashCode * 59 + this.StoreCompleted.GetHashCode();
                if (this.StoreIfPaymentDeclines != null)
                    hashCode = hashCode * 59 + this.StoreIfPaymentDeclines.GetHashCode();
                if (this.StorefrontHostName != null)
                    hashCode = hashCode * 59 + this.StorefrontHostName.GetHashCode();
                if (this.TaxCounty != null)
                    hashCode = hashCode * 59 + this.TaxCounty.GetHashCode();
                if (this.TaxExempt != null)
                    hashCode = hashCode * 59 + this.TaxExempt.GetHashCode();
                if (this.Transaction != null)
                    hashCode = hashCode * 59 + this.Transaction.GetHashCode();
                if (this.TreatWarningsAsErrors != null)
                    hashCode = hashCode * 59 + this.TreatWarningsAsErrors.GetHashCode();
                if (this.UsePriorPaymentInformationFromOrderId != null)
                    hashCode = hashCode * 59 + this.UsePriorPaymentInformationFromOrderId.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // BilltoAddress1 (string) maxLength
            if(this.BilltoAddress1 != null && this.BilltoAddress1.Length > 50)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for BilltoAddress1, length must be less than 50.", new [] { "BilltoAddress1" });
            }

            // BilltoAddress2 (string) maxLength
            if(this.BilltoAddress2 != null && this.BilltoAddress2.Length > 50)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for BilltoAddress2, length must be less than 50.", new [] { "BilltoAddress2" });
            }

            // BilltoCity (string) maxLength
            if(this.BilltoCity != null && this.BilltoCity.Length > 32)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for BilltoCity, length must be less than 32.", new [] { "BilltoCity" });
            }

            // BilltoCompany (string) maxLength
            if(this.BilltoCompany != null && this.BilltoCompany.Length > 50)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for BilltoCompany, length must be less than 50.", new [] { "BilltoCompany" });
            }

            // BilltoCountryCode (string) maxLength
            if(this.BilltoCountryCode != null && this.BilltoCountryCode.Length > 2)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for BilltoCountryCode, length must be less than 2.", new [] { "BilltoCountryCode" });
            }

            // BilltoDayPhone (string) maxLength
            if(this.BilltoDayPhone != null && this.BilltoDayPhone.Length > 25)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for BilltoDayPhone, length must be less than 25.", new [] { "BilltoDayPhone" });
            }

            // BilltoEveningPhone (string) maxLength
            if(this.BilltoEveningPhone != null && this.BilltoEveningPhone.Length > 25)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for BilltoEveningPhone, length must be less than 25.", new [] { "BilltoEveningPhone" });
            }

            // BilltoFirstName (string) maxLength
            if(this.BilltoFirstName != null && this.BilltoFirstName.Length > 30)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for BilltoFirstName, length must be less than 30.", new [] { "BilltoFirstName" });
            }

            // BilltoLastName (string) maxLength
            if(this.BilltoLastName != null && this.BilltoLastName.Length > 30)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for BilltoLastName, length must be less than 30.", new [] { "BilltoLastName" });
            }

            // BilltoPostalCode (string) maxLength
            if(this.BilltoPostalCode != null && this.BilltoPostalCode.Length > 20)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for BilltoPostalCode, length must be less than 20.", new [] { "BilltoPostalCode" });
            }

            // BilltoStateRegion (string) maxLength
            if(this.BilltoStateRegion != null && this.BilltoStateRegion.Length > 32)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for BilltoStateRegion, length must be less than 32.", new [] { "BilltoStateRegion" });
            }

            // BilltoTitle (string) maxLength
            if(this.BilltoTitle != null && this.BilltoTitle.Length > 50)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for BilltoTitle, length must be less than 50.", new [] { "BilltoTitle" });
            }

            // CcEmail (string) maxLength
            if(this.CcEmail != null && this.CcEmail.Length > 100)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for CcEmail, length must be less than 100.", new [] { "CcEmail" });
            }

            // CustomField1 (string) maxLength
            if(this.CustomField1 != null && this.CustomField1.Length > 50)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for CustomField1, length must be less than 50.", new [] { "CustomField1" });
            }

            // CustomField2 (string) maxLength
            if(this.CustomField2 != null && this.CustomField2.Length > 50)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for CustomField2, length must be less than 50.", new [] { "CustomField2" });
            }

            // CustomField3 (string) maxLength
            if(this.CustomField3 != null && this.CustomField3.Length > 50)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for CustomField3, length must be less than 50.", new [] { "CustomField3" });
            }

            // CustomField4 (string) maxLength
            if(this.CustomField4 != null && this.CustomField4.Length > 50)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for CustomField4, length must be less than 50.", new [] { "CustomField4" });
            }

            // CustomField5 (string) maxLength
            if(this.CustomField5 != null && this.CustomField5.Length > 75)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for CustomField5, length must be less than 75.", new [] { "CustomField5" });
            }

            // CustomField6 (string) maxLength
            if(this.CustomField6 != null && this.CustomField6.Length > 50)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for CustomField6, length must be less than 50.", new [] { "CustomField6" });
            }

            // CustomField7 (string) maxLength
            if(this.CustomField7 != null && this.CustomField7.Length > 50)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for CustomField7, length must be less than 50.", new [] { "CustomField7" });
            }

            // Email (string) maxLength
            if(this.Email != null && this.Email.Length > 100)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Email, length must be less than 100.", new [] { "Email" });
            }

            // GiftEmail (string) maxLength
            if(this.GiftEmail != null && this.GiftEmail.Length > 100)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for GiftEmail, length must be less than 100.", new [] { "GiftEmail" });
            }

            // GiftMessage (string) maxLength
            if(this.GiftMessage != null && this.GiftMessage.Length > 10000)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for GiftMessage, length must be less than 10000.", new [] { "GiftMessage" });
            }

            // ScreenBrandingThemeCode (string) maxLength
            if(this.ScreenBrandingThemeCode != null && this.ScreenBrandingThemeCode.Length > 10)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ScreenBrandingThemeCode, length must be less than 10.", new [] { "ScreenBrandingThemeCode" });
            }

            // ShiptoAddress1 (string) maxLength
            if(this.ShiptoAddress1 != null && this.ShiptoAddress1.Length > 50)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ShiptoAddress1, length must be less than 50.", new [] { "ShiptoAddress1" });
            }

            // ShiptoAddress2 (string) maxLength
            if(this.ShiptoAddress2 != null && this.ShiptoAddress2.Length > 50)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ShiptoAddress2, length must be less than 50.", new [] { "ShiptoAddress2" });
            }

            // ShiptoCity (string) maxLength
            if(this.ShiptoCity != null && this.ShiptoCity.Length > 32)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ShiptoCity, length must be less than 32.", new [] { "ShiptoCity" });
            }

            // ShiptoCompany (string) maxLength
            if(this.ShiptoCompany != null && this.ShiptoCompany.Length > 50)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ShiptoCompany, length must be less than 50.", new [] { "ShiptoCompany" });
            }

            // ShiptoCountryCode (string) maxLength
            if(this.ShiptoCountryCode != null && this.ShiptoCountryCode.Length > 2)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ShiptoCountryCode, length must be less than 2.", new [] { "ShiptoCountryCode" });
            }

            // ShiptoDayPhone (string) maxLength
            if(this.ShiptoDayPhone != null && this.ShiptoDayPhone.Length > 25)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ShiptoDayPhone, length must be less than 25.", new [] { "ShiptoDayPhone" });
            }

            // ShiptoEveningPhone (string) maxLength
            if(this.ShiptoEveningPhone != null && this.ShiptoEveningPhone.Length > 25)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ShiptoEveningPhone, length must be less than 25.", new [] { "ShiptoEveningPhone" });
            }

            // ShiptoFirstName (string) maxLength
            if(this.ShiptoFirstName != null && this.ShiptoFirstName.Length > 30)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ShiptoFirstName, length must be less than 30.", new [] { "ShiptoFirstName" });
            }

            // ShiptoLastName (string) maxLength
            if(this.ShiptoLastName != null && this.ShiptoLastName.Length > 30)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ShiptoLastName, length must be less than 30.", new [] { "ShiptoLastName" });
            }

            // ShiptoPostalCode (string) maxLength
            if(this.ShiptoPostalCode != null && this.ShiptoPostalCode.Length > 20)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ShiptoPostalCode, length must be less than 20.", new [] { "ShiptoPostalCode" });
            }

            // ShiptoStateRegion (string) maxLength
            if(this.ShiptoStateRegion != null && this.ShiptoStateRegion.Length > 32)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ShiptoStateRegion, length must be less than 32.", new [] { "ShiptoStateRegion" });
            }

            // ShiptoTitle (string) maxLength
            if(this.ShiptoTitle != null && this.ShiptoTitle.Length > 50)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ShiptoTitle, length must be less than 50.", new [] { "ShiptoTitle" });
            }

            // SpecialInstructions (string) maxLength
            if(this.SpecialInstructions != null && this.SpecialInstructions.Length > 10000)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for SpecialInstructions, length must be less than 10000.", new [] { "SpecialInstructions" });
            }

            yield break;
        }
    }

}
