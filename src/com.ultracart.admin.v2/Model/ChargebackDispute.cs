/* 
 * UltraCart Rest API V2
 *
 * This is the next generation UltraCart REST API...
 *
 * OpenAPI spec version: 2.0.0
 * Contact: support@ultracart.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace com.ultracart.admin.v2.Model
{
    /// <summary>
    /// ChargebackDispute
    /// </summary>
    [DataContract]
    public partial class ChargebackDispute :  IEquatable<ChargebackDispute>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ChargebackDispute" /> class.
        /// </summary>
        /// <param name="AccountNumber">Account number.</param>
        /// <param name="AdjustmentRequestText">Adjustment request text.</param>
        /// <param name="Amount">Amount.</param>
        /// <param name="AuthCode">Auth code.</param>
        /// <param name="CaseNumber">Case number.</param>
        /// <param name="ChargebackDisputeOid">Chargeback Dispute Oid.</param>
        /// <param name="ChargebackDts">Chargeback dts.</param>
        /// <param name="Currency">Currency.</param>
        /// <param name="CustomerCareNotes">Customer care notes.</param>
        /// <param name="EncryptionKey">Encryption key.</param>
        /// <param name="ExpirationDts">Expiration Dts.</param>
        /// <param name="FaxFailureReason">Fax failure reason.</param>
        /// <param name="FaxNumber">Fax number.</param>
        /// <param name="FaxTransactionId">Fax transaction id.</param>
        /// <param name="Icsid">icsid.</param>
        /// <param name="MerchantAccountProfileOid">Merchant account profile oid.</param>
        /// <param name="Order">Order.</param>
        /// <param name="OrderId">Order Id.</param>
        /// <param name="PartialCardNumber">Partial card number.</param>
        /// <param name="PdfFileOid">PDF file oid.</param>
        /// <param name="ReasonCode">Reason code.</param>
        /// <param name="Status">Status.</param>
        /// <param name="WebsiteUrl">Website URL.</param>
        public ChargebackDispute(string AccountNumber = null, string AdjustmentRequestText = null, decimal? Amount = null, string AuthCode = null, string CaseNumber = null, int? ChargebackDisputeOid = null, string ChargebackDts = null, string Currency = null, string CustomerCareNotes = null, string EncryptionKey = null, string ExpirationDts = null, string FaxFailureReason = null, string FaxNumber = null, long? FaxTransactionId = null, string Icsid = null, int? MerchantAccountProfileOid = null, Order Order = null, string OrderId = null, string PartialCardNumber = null, string PdfFileOid = null, string ReasonCode = null, string Status = null, string WebsiteUrl = null)
        {
            this.AccountNumber = AccountNumber;
            this.AdjustmentRequestText = AdjustmentRequestText;
            this.Amount = Amount;
            this.AuthCode = AuthCode;
            this.CaseNumber = CaseNumber;
            this.ChargebackDisputeOid = ChargebackDisputeOid;
            this.ChargebackDts = ChargebackDts;
            this.Currency = Currency;
            this.CustomerCareNotes = CustomerCareNotes;
            this.EncryptionKey = EncryptionKey;
            this.ExpirationDts = ExpirationDts;
            this.FaxFailureReason = FaxFailureReason;
            this.FaxNumber = FaxNumber;
            this.FaxTransactionId = FaxTransactionId;
            this.Icsid = Icsid;
            this.MerchantAccountProfileOid = MerchantAccountProfileOid;
            this.Order = Order;
            this.OrderId = OrderId;
            this.PartialCardNumber = PartialCardNumber;
            this.PdfFileOid = PdfFileOid;
            this.ReasonCode = ReasonCode;
            this.Status = Status;
            this.WebsiteUrl = WebsiteUrl;
        }
        
        /// <summary>
        /// Account number
        /// </summary>
        /// <value>Account number</value>
        [DataMember(Name="account_number", EmitDefaultValue=false)]
        public string AccountNumber { get; set; }
        /// <summary>
        /// Adjustment request text
        /// </summary>
        /// <value>Adjustment request text</value>
        [DataMember(Name="adjustment_request_text", EmitDefaultValue=false)]
        public string AdjustmentRequestText { get; set; }
        /// <summary>
        /// Amount
        /// </summary>
        /// <value>Amount</value>
        [DataMember(Name="amount", EmitDefaultValue=false)]
        public decimal? Amount { get; set; }
        /// <summary>
        /// Auth code
        /// </summary>
        /// <value>Auth code</value>
        [DataMember(Name="auth_code", EmitDefaultValue=false)]
        public string AuthCode { get; set; }
        /// <summary>
        /// Case number
        /// </summary>
        /// <value>Case number</value>
        [DataMember(Name="case_number", EmitDefaultValue=false)]
        public string CaseNumber { get; set; }
        /// <summary>
        /// Chargeback Dispute Oid
        /// </summary>
        /// <value>Chargeback Dispute Oid</value>
        [DataMember(Name="chargeback_dispute_oid", EmitDefaultValue=false)]
        public int? ChargebackDisputeOid { get; set; }
        /// <summary>
        /// Chargeback dts
        /// </summary>
        /// <value>Chargeback dts</value>
        [DataMember(Name="chargeback_dts", EmitDefaultValue=false)]
        public string ChargebackDts { get; set; }
        /// <summary>
        /// Currency
        /// </summary>
        /// <value>Currency</value>
        [DataMember(Name="currency", EmitDefaultValue=false)]
        public string Currency { get; set; }
        /// <summary>
        /// Customer care notes
        /// </summary>
        /// <value>Customer care notes</value>
        [DataMember(Name="customer_care_notes", EmitDefaultValue=false)]
        public string CustomerCareNotes { get; set; }
        /// <summary>
        /// Encryption key
        /// </summary>
        /// <value>Encryption key</value>
        [DataMember(Name="encryption_key", EmitDefaultValue=false)]
        public string EncryptionKey { get; set; }
        /// <summary>
        /// Expiration Dts
        /// </summary>
        /// <value>Expiration Dts</value>
        [DataMember(Name="expiration_dts", EmitDefaultValue=false)]
        public string ExpirationDts { get; set; }
        /// <summary>
        /// Fax failure reason
        /// </summary>
        /// <value>Fax failure reason</value>
        [DataMember(Name="fax_failure_reason", EmitDefaultValue=false)]
        public string FaxFailureReason { get; set; }
        /// <summary>
        /// Fax number
        /// </summary>
        /// <value>Fax number</value>
        [DataMember(Name="fax_number", EmitDefaultValue=false)]
        public string FaxNumber { get; set; }
        /// <summary>
        /// Fax transaction id
        /// </summary>
        /// <value>Fax transaction id</value>
        [DataMember(Name="fax_transaction_id", EmitDefaultValue=false)]
        public long? FaxTransactionId { get; set; }
        /// <summary>
        /// icsid
        /// </summary>
        /// <value>icsid</value>
        [DataMember(Name="icsid", EmitDefaultValue=false)]
        public string Icsid { get; set; }
        /// <summary>
        /// Merchant account profile oid
        /// </summary>
        /// <value>Merchant account profile oid</value>
        [DataMember(Name="merchant_account_profile_oid", EmitDefaultValue=false)]
        public int? MerchantAccountProfileOid { get; set; }
        /// <summary>
        /// Gets or Sets Order
        /// </summary>
        [DataMember(Name="order", EmitDefaultValue=false)]
        public Order Order { get; set; }
        /// <summary>
        /// Order Id
        /// </summary>
        /// <value>Order Id</value>
        [DataMember(Name="order_id", EmitDefaultValue=false)]
        public string OrderId { get; set; }
        /// <summary>
        /// Partial card number
        /// </summary>
        /// <value>Partial card number</value>
        [DataMember(Name="partial_card_number", EmitDefaultValue=false)]
        public string PartialCardNumber { get; set; }
        /// <summary>
        /// PDF file oid
        /// </summary>
        /// <value>PDF file oid</value>
        [DataMember(Name="pdf_file_oid", EmitDefaultValue=false)]
        public string PdfFileOid { get; set; }
        /// <summary>
        /// Reason code
        /// </summary>
        /// <value>Reason code</value>
        [DataMember(Name="reason_code", EmitDefaultValue=false)]
        public string ReasonCode { get; set; }
        /// <summary>
        /// Status
        /// </summary>
        /// <value>Status</value>
        [DataMember(Name="status", EmitDefaultValue=false)]
        public string Status { get; set; }
        /// <summary>
        /// Website URL
        /// </summary>
        /// <value>Website URL</value>
        [DataMember(Name="website_url", EmitDefaultValue=false)]
        public string WebsiteUrl { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ChargebackDispute {\n");
            sb.Append("  AccountNumber: ").Append(AccountNumber).Append("\n");
            sb.Append("  AdjustmentRequestText: ").Append(AdjustmentRequestText).Append("\n");
            sb.Append("  Amount: ").Append(Amount).Append("\n");
            sb.Append("  AuthCode: ").Append(AuthCode).Append("\n");
            sb.Append("  CaseNumber: ").Append(CaseNumber).Append("\n");
            sb.Append("  ChargebackDisputeOid: ").Append(ChargebackDisputeOid).Append("\n");
            sb.Append("  ChargebackDts: ").Append(ChargebackDts).Append("\n");
            sb.Append("  Currency: ").Append(Currency).Append("\n");
            sb.Append("  CustomerCareNotes: ").Append(CustomerCareNotes).Append("\n");
            sb.Append("  EncryptionKey: ").Append(EncryptionKey).Append("\n");
            sb.Append("  ExpirationDts: ").Append(ExpirationDts).Append("\n");
            sb.Append("  FaxFailureReason: ").Append(FaxFailureReason).Append("\n");
            sb.Append("  FaxNumber: ").Append(FaxNumber).Append("\n");
            sb.Append("  FaxTransactionId: ").Append(FaxTransactionId).Append("\n");
            sb.Append("  Icsid: ").Append(Icsid).Append("\n");
            sb.Append("  MerchantAccountProfileOid: ").Append(MerchantAccountProfileOid).Append("\n");
            sb.Append("  Order: ").Append(Order).Append("\n");
            sb.Append("  OrderId: ").Append(OrderId).Append("\n");
            sb.Append("  PartialCardNumber: ").Append(PartialCardNumber).Append("\n");
            sb.Append("  PdfFileOid: ").Append(PdfFileOid).Append("\n");
            sb.Append("  ReasonCode: ").Append(ReasonCode).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  WebsiteUrl: ").Append(WebsiteUrl).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as ChargebackDispute);
        }

        /// <summary>
        /// Returns true if ChargebackDispute instances are equal
        /// </summary>
        /// <param name="other">Instance of ChargebackDispute to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ChargebackDispute other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.AccountNumber == other.AccountNumber ||
                    this.AccountNumber != null &&
                    this.AccountNumber.Equals(other.AccountNumber)
                ) && 
                (
                    this.AdjustmentRequestText == other.AdjustmentRequestText ||
                    this.AdjustmentRequestText != null &&
                    this.AdjustmentRequestText.Equals(other.AdjustmentRequestText)
                ) && 
                (
                    this.Amount == other.Amount ||
                    this.Amount != null &&
                    this.Amount.Equals(other.Amount)
                ) && 
                (
                    this.AuthCode == other.AuthCode ||
                    this.AuthCode != null &&
                    this.AuthCode.Equals(other.AuthCode)
                ) && 
                (
                    this.CaseNumber == other.CaseNumber ||
                    this.CaseNumber != null &&
                    this.CaseNumber.Equals(other.CaseNumber)
                ) && 
                (
                    this.ChargebackDisputeOid == other.ChargebackDisputeOid ||
                    this.ChargebackDisputeOid != null &&
                    this.ChargebackDisputeOid.Equals(other.ChargebackDisputeOid)
                ) && 
                (
                    this.ChargebackDts == other.ChargebackDts ||
                    this.ChargebackDts != null &&
                    this.ChargebackDts.Equals(other.ChargebackDts)
                ) && 
                (
                    this.Currency == other.Currency ||
                    this.Currency != null &&
                    this.Currency.Equals(other.Currency)
                ) && 
                (
                    this.CustomerCareNotes == other.CustomerCareNotes ||
                    this.CustomerCareNotes != null &&
                    this.CustomerCareNotes.Equals(other.CustomerCareNotes)
                ) && 
                (
                    this.EncryptionKey == other.EncryptionKey ||
                    this.EncryptionKey != null &&
                    this.EncryptionKey.Equals(other.EncryptionKey)
                ) && 
                (
                    this.ExpirationDts == other.ExpirationDts ||
                    this.ExpirationDts != null &&
                    this.ExpirationDts.Equals(other.ExpirationDts)
                ) && 
                (
                    this.FaxFailureReason == other.FaxFailureReason ||
                    this.FaxFailureReason != null &&
                    this.FaxFailureReason.Equals(other.FaxFailureReason)
                ) && 
                (
                    this.FaxNumber == other.FaxNumber ||
                    this.FaxNumber != null &&
                    this.FaxNumber.Equals(other.FaxNumber)
                ) && 
                (
                    this.FaxTransactionId == other.FaxTransactionId ||
                    this.FaxTransactionId != null &&
                    this.FaxTransactionId.Equals(other.FaxTransactionId)
                ) && 
                (
                    this.Icsid == other.Icsid ||
                    this.Icsid != null &&
                    this.Icsid.Equals(other.Icsid)
                ) && 
                (
                    this.MerchantAccountProfileOid == other.MerchantAccountProfileOid ||
                    this.MerchantAccountProfileOid != null &&
                    this.MerchantAccountProfileOid.Equals(other.MerchantAccountProfileOid)
                ) && 
                (
                    this.Order == other.Order ||
                    this.Order != null &&
                    this.Order.Equals(other.Order)
                ) && 
                (
                    this.OrderId == other.OrderId ||
                    this.OrderId != null &&
                    this.OrderId.Equals(other.OrderId)
                ) && 
                (
                    this.PartialCardNumber == other.PartialCardNumber ||
                    this.PartialCardNumber != null &&
                    this.PartialCardNumber.Equals(other.PartialCardNumber)
                ) && 
                (
                    this.PdfFileOid == other.PdfFileOid ||
                    this.PdfFileOid != null &&
                    this.PdfFileOid.Equals(other.PdfFileOid)
                ) && 
                (
                    this.ReasonCode == other.ReasonCode ||
                    this.ReasonCode != null &&
                    this.ReasonCode.Equals(other.ReasonCode)
                ) && 
                (
                    this.Status == other.Status ||
                    this.Status != null &&
                    this.Status.Equals(other.Status)
                ) && 
                (
                    this.WebsiteUrl == other.WebsiteUrl ||
                    this.WebsiteUrl != null &&
                    this.WebsiteUrl.Equals(other.WebsiteUrl)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.AccountNumber != null)
                    hash = hash * 59 + this.AccountNumber.GetHashCode();
                if (this.AdjustmentRequestText != null)
                    hash = hash * 59 + this.AdjustmentRequestText.GetHashCode();
                if (this.Amount != null)
                    hash = hash * 59 + this.Amount.GetHashCode();
                if (this.AuthCode != null)
                    hash = hash * 59 + this.AuthCode.GetHashCode();
                if (this.CaseNumber != null)
                    hash = hash * 59 + this.CaseNumber.GetHashCode();
                if (this.ChargebackDisputeOid != null)
                    hash = hash * 59 + this.ChargebackDisputeOid.GetHashCode();
                if (this.ChargebackDts != null)
                    hash = hash * 59 + this.ChargebackDts.GetHashCode();
                if (this.Currency != null)
                    hash = hash * 59 + this.Currency.GetHashCode();
                if (this.CustomerCareNotes != null)
                    hash = hash * 59 + this.CustomerCareNotes.GetHashCode();
                if (this.EncryptionKey != null)
                    hash = hash * 59 + this.EncryptionKey.GetHashCode();
                if (this.ExpirationDts != null)
                    hash = hash * 59 + this.ExpirationDts.GetHashCode();
                if (this.FaxFailureReason != null)
                    hash = hash * 59 + this.FaxFailureReason.GetHashCode();
                if (this.FaxNumber != null)
                    hash = hash * 59 + this.FaxNumber.GetHashCode();
                if (this.FaxTransactionId != null)
                    hash = hash * 59 + this.FaxTransactionId.GetHashCode();
                if (this.Icsid != null)
                    hash = hash * 59 + this.Icsid.GetHashCode();
                if (this.MerchantAccountProfileOid != null)
                    hash = hash * 59 + this.MerchantAccountProfileOid.GetHashCode();
                if (this.Order != null)
                    hash = hash * 59 + this.Order.GetHashCode();
                if (this.OrderId != null)
                    hash = hash * 59 + this.OrderId.GetHashCode();
                if (this.PartialCardNumber != null)
                    hash = hash * 59 + this.PartialCardNumber.GetHashCode();
                if (this.PdfFileOid != null)
                    hash = hash * 59 + this.PdfFileOid.GetHashCode();
                if (this.ReasonCode != null)
                    hash = hash * 59 + this.ReasonCode.GetHashCode();
                if (this.Status != null)
                    hash = hash * 59 + this.Status.GetHashCode();
                if (this.WebsiteUrl != null)
                    hash = hash * 59 + this.WebsiteUrl.GetHashCode();
                return hash;
            }
        }
    }

}
