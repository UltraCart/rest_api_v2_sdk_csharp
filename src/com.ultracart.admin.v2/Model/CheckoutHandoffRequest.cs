/* 
 * UltraCart Rest API V2
 *
 * This is the next generation UltraCart REST API...
 *
 * OpenAPI spec version: 2.0.0
 * Contact: support@ultracart.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace com.ultracart.admin.v2.Model
{
    /// <summary>
    /// CheckoutHandoffRequest
    /// </summary>
    [DataContract]
    public partial class CheckoutHandoffRequest :  IEquatable<CheckoutHandoffRequest>
    {
        /// <summary>
        /// The type of handoff operation to perform
        /// </summary>
        /// <value>The type of handoff operation to perform</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum OperationEnum
        {
            
            /// <summary>
            /// Enum Checkout for "checkout"
            /// </summary>
            [EnumMember(Value = "checkout")]
            Checkout,
            
            /// <summary>
            /// Enum PayPal for "payPal"
            /// </summary>
            [EnumMember(Value = "payPal")]
            PayPal,
            
            /// <summary>
            /// Enum PayPalCredit for "payPalCredit"
            /// </summary>
            [EnumMember(Value = "payPalCredit")]
            PayPalCredit,
            
            /// <summary>
            /// Enum View for "view"
            /// </summary>
            [EnumMember(Value = "view")]
            View
        }

        /// <summary>
        /// The type of handoff operation to perform
        /// </summary>
        /// <value>The type of handoff operation to perform</value>
        [DataMember(Name="operation", EmitDefaultValue=false)]
        public OperationEnum? Operation { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="CheckoutHandoffRequest" /> class.
        /// </summary>
        /// <param name="Cart">Cart.</param>
        /// <param name="ErrorParameterName">If any error happen during the processing on the UltraCart side, the browser will be redirected to your error_return_url with the error passed in this parameter name..</param>
        /// <param name="ErrorReturnUrl">The URL to return the browser to if there are processing errors on the UltraCart side..</param>
        /// <param name="Operation">The type of handoff operation to perform.</param>
        /// <param name="PaypalMaximumUpsellRevenue">The maximum amount of revenue that you think the customer could add during a custom upsell after sequence on your checkout..</param>
        /// <param name="PaypalReturnUrl">The URl to return the customers browser to after they have completed the PayPal process..</param>
        /// <param name="SecureHostName">The desired secure host name to perform the handoff on.  This should match the desired StoreFront..</param>
        public CheckoutHandoffRequest(Cart Cart = null, string ErrorParameterName = null, string ErrorReturnUrl = null, OperationEnum? Operation = null, decimal? PaypalMaximumUpsellRevenue = null, string PaypalReturnUrl = null, string SecureHostName = null)
        {
            this.Cart = Cart;
            this.ErrorParameterName = ErrorParameterName;
            this.ErrorReturnUrl = ErrorReturnUrl;
            this.Operation = Operation;
            this.PaypalMaximumUpsellRevenue = PaypalMaximumUpsellRevenue;
            this.PaypalReturnUrl = PaypalReturnUrl;
            this.SecureHostName = SecureHostName;
        }
        
        /// <summary>
        /// Gets or Sets Cart
        /// </summary>
        [DataMember(Name="cart", EmitDefaultValue=false)]
        public Cart Cart { get; set; }
        /// <summary>
        /// If any error happen during the processing on the UltraCart side, the browser will be redirected to your error_return_url with the error passed in this parameter name.
        /// </summary>
        /// <value>If any error happen during the processing on the UltraCart side, the browser will be redirected to your error_return_url with the error passed in this parameter name.</value>
        [DataMember(Name="error_parameter_name", EmitDefaultValue=false)]
        public string ErrorParameterName { get; set; }
        /// <summary>
        /// The URL to return the browser to if there are processing errors on the UltraCart side.
        /// </summary>
        /// <value>The URL to return the browser to if there are processing errors on the UltraCart side.</value>
        [DataMember(Name="error_return_url", EmitDefaultValue=false)]
        public string ErrorReturnUrl { get; set; }
        /// <summary>
        /// The maximum amount of revenue that you think the customer could add during a custom upsell after sequence on your checkout.
        /// </summary>
        /// <value>The maximum amount of revenue that you think the customer could add during a custom upsell after sequence on your checkout.</value>
        [DataMember(Name="paypal_maximum_upsell_revenue", EmitDefaultValue=false)]
        public decimal? PaypalMaximumUpsellRevenue { get; set; }
        /// <summary>
        /// The URl to return the customers browser to after they have completed the PayPal process.
        /// </summary>
        /// <value>The URl to return the customers browser to after they have completed the PayPal process.</value>
        [DataMember(Name="paypal_return_url", EmitDefaultValue=false)]
        public string PaypalReturnUrl { get; set; }
        /// <summary>
        /// The desired secure host name to perform the handoff on.  This should match the desired StoreFront.
        /// </summary>
        /// <value>The desired secure host name to perform the handoff on.  This should match the desired StoreFront.</value>
        [DataMember(Name="secure_host_name", EmitDefaultValue=false)]
        public string SecureHostName { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CheckoutHandoffRequest {\n");
            sb.Append("  Cart: ").Append(Cart).Append("\n");
            sb.Append("  ErrorParameterName: ").Append(ErrorParameterName).Append("\n");
            sb.Append("  ErrorReturnUrl: ").Append(ErrorReturnUrl).Append("\n");
            sb.Append("  Operation: ").Append(Operation).Append("\n");
            sb.Append("  PaypalMaximumUpsellRevenue: ").Append(PaypalMaximumUpsellRevenue).Append("\n");
            sb.Append("  PaypalReturnUrl: ").Append(PaypalReturnUrl).Append("\n");
            sb.Append("  SecureHostName: ").Append(SecureHostName).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as CheckoutHandoffRequest);
        }

        /// <summary>
        /// Returns true if CheckoutHandoffRequest instances are equal
        /// </summary>
        /// <param name="other">Instance of CheckoutHandoffRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CheckoutHandoffRequest other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Cart == other.Cart ||
                    this.Cart != null &&
                    this.Cart.Equals(other.Cart)
                ) && 
                (
                    this.ErrorParameterName == other.ErrorParameterName ||
                    this.ErrorParameterName != null &&
                    this.ErrorParameterName.Equals(other.ErrorParameterName)
                ) && 
                (
                    this.ErrorReturnUrl == other.ErrorReturnUrl ||
                    this.ErrorReturnUrl != null &&
                    this.ErrorReturnUrl.Equals(other.ErrorReturnUrl)
                ) && 
                (
                    this.Operation == other.Operation ||
                    this.Operation != null &&
                    this.Operation.Equals(other.Operation)
                ) && 
                (
                    this.PaypalMaximumUpsellRevenue == other.PaypalMaximumUpsellRevenue ||
                    this.PaypalMaximumUpsellRevenue != null &&
                    this.PaypalMaximumUpsellRevenue.Equals(other.PaypalMaximumUpsellRevenue)
                ) && 
                (
                    this.PaypalReturnUrl == other.PaypalReturnUrl ||
                    this.PaypalReturnUrl != null &&
                    this.PaypalReturnUrl.Equals(other.PaypalReturnUrl)
                ) && 
                (
                    this.SecureHostName == other.SecureHostName ||
                    this.SecureHostName != null &&
                    this.SecureHostName.Equals(other.SecureHostName)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Cart != null)
                    hash = hash * 59 + this.Cart.GetHashCode();
                if (this.ErrorParameterName != null)
                    hash = hash * 59 + this.ErrorParameterName.GetHashCode();
                if (this.ErrorReturnUrl != null)
                    hash = hash * 59 + this.ErrorReturnUrl.GetHashCode();
                if (this.Operation != null)
                    hash = hash * 59 + this.Operation.GetHashCode();
                if (this.PaypalMaximumUpsellRevenue != null)
                    hash = hash * 59 + this.PaypalMaximumUpsellRevenue.GetHashCode();
                if (this.PaypalReturnUrl != null)
                    hash = hash * 59 + this.PaypalReturnUrl.GetHashCode();
                if (this.SecureHostName != null)
                    hash = hash * 59 + this.SecureHostName.GetHashCode();
                return hash;
            }
        }
    }

}
