/* 
 * UltraCart Rest API V2
 *
 * UltraCart REST API Version 2
 *
 * OpenAPI spec version: 2.0.0
 * Contact: support@ultracart.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = com.ultracart.admin.v2.Client.SwaggerDateConverter;

namespace com.ultracart.admin.v2.Model
{
    /// <summary>
    /// ConversationAgentProfile
    /// </summary>
    [DataContract]
    public partial class ConversationAgentProfile :  IEquatable<ConversationAgentProfile>, IValidatableObject
    {
        /// <summary>
        /// Default status when the agent loads conversations app.
        /// </summary>
        /// <value>Default status when the agent loads conversations app.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum DefaultStatusEnum
        {
            
            /// <summary>
            /// Enum Available for value: available
            /// </summary>
            [EnumMember(Value = "available")]
            Available = 1,
            
            /// <summary>
            /// Enum Busy for value: busy
            /// </summary>
            [EnumMember(Value = "busy")]
            Busy = 2,
            
            /// <summary>
            /// Enum Unavailable for value: unavailable
            /// </summary>
            [EnumMember(Value = "unavailable")]
            Unavailable = 3
        }

        /// <summary>
        /// Default status when the agent loads conversations app.
        /// </summary>
        /// <value>Default status when the agent loads conversations app.</value>
        [DataMember(Name="default_status", EmitDefaultValue=false)]
        public DefaultStatusEnum? DefaultStatus { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="ConversationAgentProfile" /> class.
        /// </summary>
        /// <param name="ai">AI powered chat bot.</param>
        /// <param name="aiChatInstructions">Additional instructions for this AI when handle web chats.</param>
        /// <param name="aiPersona">Persona of this AI agent.</param>
        /// <param name="aiSmsInstructions">Additional instructions for this AI when handle SMS messages.</param>
        /// <param name="chatLimit">The number of engagement chats that can be pushed on them at any given time..</param>
        /// <param name="defaultLanguageIsoCode">The default language the agent is chatting in.</param>
        /// <param name="defaultStatus">Default status when the agent loads conversations app..</param>
        /// <param name="displayName">An alternate name that the agent wants to use in chat..</param>
        /// <param name="name">Their actual user name for profile settings display as placeholder test.</param>
        /// <param name="profileImageUploadKey">An upload key used to update the profile image..</param>
        /// <param name="profileImageUrl">Their current profile image URL.</param>
        public ConversationAgentProfile(bool? ai = default(bool?), string aiChatInstructions = default(string), string aiPersona = default(string), string aiSmsInstructions = default(string), int? chatLimit = default(int?), string defaultLanguageIsoCode = default(string), DefaultStatusEnum? defaultStatus = default(DefaultStatusEnum?), string displayName = default(string), string name = default(string), string profileImageUploadKey = default(string), string profileImageUrl = default(string))
        {
            this.Ai = ai;
            this.AiChatInstructions = aiChatInstructions;
            this.AiPersona = aiPersona;
            this.AiSmsInstructions = aiSmsInstructions;
            this.ChatLimit = chatLimit;
            this.DefaultLanguageIsoCode = defaultLanguageIsoCode;
            this.DefaultStatus = defaultStatus;
            this.DisplayName = displayName;
            this.Name = name;
            this.ProfileImageUploadKey = profileImageUploadKey;
            this.ProfileImageUrl = profileImageUrl;
        }
        
        /// <summary>
        /// AI powered chat bot
        /// </summary>
        /// <value>AI powered chat bot</value>
        [DataMember(Name="ai", EmitDefaultValue=false)]
        public bool? Ai { get; set; }

        /// <summary>
        /// Additional instructions for this AI when handle web chats
        /// </summary>
        /// <value>Additional instructions for this AI when handle web chats</value>
        [DataMember(Name="ai_chat_instructions", EmitDefaultValue=false)]
        public string AiChatInstructions { get; set; }

        /// <summary>
        /// Persona of this AI agent
        /// </summary>
        /// <value>Persona of this AI agent</value>
        [DataMember(Name="ai_persona", EmitDefaultValue=false)]
        public string AiPersona { get; set; }

        /// <summary>
        /// Additional instructions for this AI when handle SMS messages
        /// </summary>
        /// <value>Additional instructions for this AI when handle SMS messages</value>
        [DataMember(Name="ai_sms_instructions", EmitDefaultValue=false)]
        public string AiSmsInstructions { get; set; }

        /// <summary>
        /// The number of engagement chats that can be pushed on them at any given time.
        /// </summary>
        /// <value>The number of engagement chats that can be pushed on them at any given time.</value>
        [DataMember(Name="chat_limit", EmitDefaultValue=false)]
        public int? ChatLimit { get; set; }

        /// <summary>
        /// The default language the agent is chatting in
        /// </summary>
        /// <value>The default language the agent is chatting in</value>
        [DataMember(Name="default_language_iso_code", EmitDefaultValue=false)]
        public string DefaultLanguageIsoCode { get; set; }


        /// <summary>
        /// An alternate name that the agent wants to use in chat.
        /// </summary>
        /// <value>An alternate name that the agent wants to use in chat.</value>
        [DataMember(Name="display_name", EmitDefaultValue=false)]
        public string DisplayName { get; set; }

        /// <summary>
        /// Their actual user name for profile settings display as placeholder test
        /// </summary>
        /// <value>Their actual user name for profile settings display as placeholder test</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// An upload key used to update the profile image.
        /// </summary>
        /// <value>An upload key used to update the profile image.</value>
        [DataMember(Name="profile_image_upload_key", EmitDefaultValue=false)]
        public string ProfileImageUploadKey { get; set; }

        /// <summary>
        /// Their current profile image URL
        /// </summary>
        /// <value>Their current profile image URL</value>
        [DataMember(Name="profile_image_url", EmitDefaultValue=false)]
        public string ProfileImageUrl { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ConversationAgentProfile {\n");
            sb.Append("  Ai: ").Append(Ai).Append("\n");
            sb.Append("  AiChatInstructions: ").Append(AiChatInstructions).Append("\n");
            sb.Append("  AiPersona: ").Append(AiPersona).Append("\n");
            sb.Append("  AiSmsInstructions: ").Append(AiSmsInstructions).Append("\n");
            sb.Append("  ChatLimit: ").Append(ChatLimit).Append("\n");
            sb.Append("  DefaultLanguageIsoCode: ").Append(DefaultLanguageIsoCode).Append("\n");
            sb.Append("  DefaultStatus: ").Append(DefaultStatus).Append("\n");
            sb.Append("  DisplayName: ").Append(DisplayName).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  ProfileImageUploadKey: ").Append(ProfileImageUploadKey).Append("\n");
            sb.Append("  ProfileImageUrl: ").Append(ProfileImageUrl).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ConversationAgentProfile);
        }

        /// <summary>
        /// Returns true if ConversationAgentProfile instances are equal
        /// </summary>
        /// <param name="input">Instance of ConversationAgentProfile to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ConversationAgentProfile input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Ai == input.Ai ||
                    (this.Ai != null &&
                    this.Ai.Equals(input.Ai))
                ) && 
                (
                    this.AiChatInstructions == input.AiChatInstructions ||
                    (this.AiChatInstructions != null &&
                    this.AiChatInstructions.Equals(input.AiChatInstructions))
                ) && 
                (
                    this.AiPersona == input.AiPersona ||
                    (this.AiPersona != null &&
                    this.AiPersona.Equals(input.AiPersona))
                ) && 
                (
                    this.AiSmsInstructions == input.AiSmsInstructions ||
                    (this.AiSmsInstructions != null &&
                    this.AiSmsInstructions.Equals(input.AiSmsInstructions))
                ) && 
                (
                    this.ChatLimit == input.ChatLimit ||
                    (this.ChatLimit != null &&
                    this.ChatLimit.Equals(input.ChatLimit))
                ) && 
                (
                    this.DefaultLanguageIsoCode == input.DefaultLanguageIsoCode ||
                    (this.DefaultLanguageIsoCode != null &&
                    this.DefaultLanguageIsoCode.Equals(input.DefaultLanguageIsoCode))
                ) && 
                (
                    this.DefaultStatus == input.DefaultStatus ||
                    (this.DefaultStatus != null &&
                    this.DefaultStatus.Equals(input.DefaultStatus))
                ) && 
                (
                    this.DisplayName == input.DisplayName ||
                    (this.DisplayName != null &&
                    this.DisplayName.Equals(input.DisplayName))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.ProfileImageUploadKey == input.ProfileImageUploadKey ||
                    (this.ProfileImageUploadKey != null &&
                    this.ProfileImageUploadKey.Equals(input.ProfileImageUploadKey))
                ) && 
                (
                    this.ProfileImageUrl == input.ProfileImageUrl ||
                    (this.ProfileImageUrl != null &&
                    this.ProfileImageUrl.Equals(input.ProfileImageUrl))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Ai != null)
                    hashCode = hashCode * 59 + this.Ai.GetHashCode();
                if (this.AiChatInstructions != null)
                    hashCode = hashCode * 59 + this.AiChatInstructions.GetHashCode();
                if (this.AiPersona != null)
                    hashCode = hashCode * 59 + this.AiPersona.GetHashCode();
                if (this.AiSmsInstructions != null)
                    hashCode = hashCode * 59 + this.AiSmsInstructions.GetHashCode();
                if (this.ChatLimit != null)
                    hashCode = hashCode * 59 + this.ChatLimit.GetHashCode();
                if (this.DefaultLanguageIsoCode != null)
                    hashCode = hashCode * 59 + this.DefaultLanguageIsoCode.GetHashCode();
                if (this.DefaultStatus != null)
                    hashCode = hashCode * 59 + this.DefaultStatus.GetHashCode();
                if (this.DisplayName != null)
                    hashCode = hashCode * 59 + this.DisplayName.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.ProfileImageUploadKey != null)
                    hashCode = hashCode * 59 + this.ProfileImageUploadKey.GetHashCode();
                if (this.ProfileImageUrl != null)
                    hashCode = hashCode * 59 + this.ProfileImageUrl.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
