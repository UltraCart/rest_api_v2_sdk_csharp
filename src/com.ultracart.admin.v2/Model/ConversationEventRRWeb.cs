/*
 * UltraCart Rest API V2
 *
 * UltraCart REST API Version 2
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@ultracart.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = com.ultracart.admin.v2.Client.OpenAPIDateConverter;

namespace com.ultracart.admin.v2.Model
{
    /// <summary>
    /// ConversationEventRRWeb
    /// </summary>
    [DataContract]
    public partial class ConversationEventRRWeb :  IEquatable<ConversationEventRRWeb>, IValidatableObject
    {
        /// <summary>
        /// Type of event
        /// </summary>
        /// <value>Type of event</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TypeEnum
        {
            /// <summary>
            /// Enum Init for value: init
            /// </summary>
            [EnumMember(Value = "init")]
            Init = 1,

            /// <summary>
            /// Enum Events for value: events
            /// </summary>
            [EnumMember(Value = "events")]
            Events = 2

        }

        /// <summary>
        /// Type of event
        /// </summary>
        /// <value>Type of event</value>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public TypeEnum? Type { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="ConversationEventRRWeb" /> class.
        /// </summary>
        /// <param name="data">data.</param>
        /// <param name="dataPart">dataPart.</param>
        /// <param name="dataSha256">dataSha256.</param>
        /// <param name="dataTotalParts">dataTotalParts.</param>
        /// <param name="dataTotalSha256">dataTotalSha256.</param>
        /// <param name="eventIndex">eventIndex.</param>
        /// <param name="type">Type of event.</param>
        public ConversationEventRRWeb(string data = default(string), int dataPart = default(int), string dataSha256 = default(string), int dataTotalParts = default(int), string dataTotalSha256 = default(string), int eventIndex = default(int), TypeEnum? type = default(TypeEnum?))
        {
            this.Data = data;
            this.DataPart = dataPart;
            this.DataSha256 = dataSha256;
            this.DataTotalParts = dataTotalParts;
            this.DataTotalSha256 = dataTotalSha256;
            this.EventIndex = eventIndex;
            this.Type = type;
        }

        /// <summary>
        /// Gets or Sets Data
        /// </summary>
        [DataMember(Name="data", EmitDefaultValue=false)]
        public string Data { get; set; }

        /// <summary>
        /// Gets or Sets DataPart
        /// </summary>
        [DataMember(Name="data_part", EmitDefaultValue=false)]
        public int DataPart { get; set; }

        /// <summary>
        /// Gets or Sets DataSha256
        /// </summary>
        [DataMember(Name="data_sha256", EmitDefaultValue=false)]
        public string DataSha256 { get; set; }

        /// <summary>
        /// Gets or Sets DataTotalParts
        /// </summary>
        [DataMember(Name="data_total_parts", EmitDefaultValue=false)]
        public int DataTotalParts { get; set; }

        /// <summary>
        /// Gets or Sets DataTotalSha256
        /// </summary>
        [DataMember(Name="data_total_sha256", EmitDefaultValue=false)]
        public string DataTotalSha256 { get; set; }

        /// <summary>
        /// Gets or Sets EventIndex
        /// </summary>
        [DataMember(Name="event_index", EmitDefaultValue=false)]
        public int EventIndex { get; set; }


        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ConversationEventRRWeb {\n");
            sb.Append("  Data: ").Append(Data).Append("\n");
            sb.Append("  DataPart: ").Append(DataPart).Append("\n");
            sb.Append("  DataSha256: ").Append(DataSha256).Append("\n");
            sb.Append("  DataTotalParts: ").Append(DataTotalParts).Append("\n");
            sb.Append("  DataTotalSha256: ").Append(DataTotalSha256).Append("\n");
            sb.Append("  EventIndex: ").Append(EventIndex).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ConversationEventRRWeb);
        }

        /// <summary>
        /// Returns true if ConversationEventRRWeb instances are equal
        /// </summary>
        /// <param name="input">Instance of ConversationEventRRWeb to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ConversationEventRRWeb input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Data == input.Data ||
                    (this.Data != null &&
                    this.Data.Equals(input.Data))
                ) && 
                (
                    this.DataPart == input.DataPart ||
                    (this.DataPart != null &&
                    this.DataPart.Equals(input.DataPart))
                ) && 
                (
                    this.DataSha256 == input.DataSha256 ||
                    (this.DataSha256 != null &&
                    this.DataSha256.Equals(input.DataSha256))
                ) && 
                (
                    this.DataTotalParts == input.DataTotalParts ||
                    (this.DataTotalParts != null &&
                    this.DataTotalParts.Equals(input.DataTotalParts))
                ) && 
                (
                    this.DataTotalSha256 == input.DataTotalSha256 ||
                    (this.DataTotalSha256 != null &&
                    this.DataTotalSha256.Equals(input.DataTotalSha256))
                ) && 
                (
                    this.EventIndex == input.EventIndex ||
                    (this.EventIndex != null &&
                    this.EventIndex.Equals(input.EventIndex))
                ) && 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Data != null)
                    hashCode = hashCode * 59 + this.Data.GetHashCode();
                if (this.DataPart != null)
                    hashCode = hashCode * 59 + this.DataPart.GetHashCode();
                if (this.DataSha256 != null)
                    hashCode = hashCode * 59 + this.DataSha256.GetHashCode();
                if (this.DataTotalParts != null)
                    hashCode = hashCode * 59 + this.DataTotalParts.GetHashCode();
                if (this.DataTotalSha256 != null)
                    hashCode = hashCode * 59 + this.DataTotalSha256.GetHashCode();
                if (this.EventIndex != null)
                    hashCode = hashCode * 59 + this.EventIndex.GetHashCode();
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
