/* 
 * UltraCart Rest API V2
 *
 * UltraCart REST API Version 2
 *
 * OpenAPI spec version: 2.0.0
 * Contact: support@ultracart.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = com.ultracart.admin.v2.Client.SwaggerDateConverter;

namespace com.ultracart.admin.v2.Model
{
    /// <summary>
    /// ConversationKnowledgeBaseDocument
    /// </summary>
    [DataContract]
    public partial class ConversationKnowledgeBaseDocument :  IEquatable<ConversationKnowledgeBaseDocument>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ConversationKnowledgeBaseDocument" /> class.
        /// </summary>
        /// <param name="chunkCount">chunkCount.</param>
        /// <param name="description">description.</param>
        /// <param name="documentId">Human readable identifier.  Filename is recommended..</param>
        /// <param name="documentUuid">documentUuid.</param>
        /// <param name="metadata">metadata.</param>
        /// <param name="mimeType">mimeType.</param>
        /// <param name="s3Key">s3Key.</param>
        public ConversationKnowledgeBaseDocument(int? chunkCount = default(int?), string description = default(string), string documentId = default(string), string documentUuid = default(string), string metadata = default(string), string mimeType = default(string), string s3Key = default(string))
        {
            this.ChunkCount = chunkCount;
            this.Description = description;
            this.DocumentId = documentId;
            this.DocumentUuid = documentUuid;
            this.Metadata = metadata;
            this.MimeType = mimeType;
            this.S3Key = s3Key;
        }
        
        /// <summary>
        /// Gets or Sets ChunkCount
        /// </summary>
        [DataMember(Name="chunk_count", EmitDefaultValue=false)]
        public int? ChunkCount { get; set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }

        /// <summary>
        /// Human readable identifier.  Filename is recommended.
        /// </summary>
        /// <value>Human readable identifier.  Filename is recommended.</value>
        [DataMember(Name="document_id", EmitDefaultValue=false)]
        public string DocumentId { get; set; }

        /// <summary>
        /// Gets or Sets DocumentUuid
        /// </summary>
        [DataMember(Name="document_uuid", EmitDefaultValue=false)]
        public string DocumentUuid { get; set; }

        /// <summary>
        /// Gets or Sets Metadata
        /// </summary>
        [DataMember(Name="metadata", EmitDefaultValue=false)]
        public string Metadata { get; set; }

        /// <summary>
        /// Gets or Sets MimeType
        /// </summary>
        [DataMember(Name="mime_type", EmitDefaultValue=false)]
        public string MimeType { get; set; }

        /// <summary>
        /// Gets or Sets S3Key
        /// </summary>
        [DataMember(Name="s3_key", EmitDefaultValue=false)]
        public string S3Key { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ConversationKnowledgeBaseDocument {\n");
            sb.Append("  ChunkCount: ").Append(ChunkCount).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  DocumentId: ").Append(DocumentId).Append("\n");
            sb.Append("  DocumentUuid: ").Append(DocumentUuid).Append("\n");
            sb.Append("  Metadata: ").Append(Metadata).Append("\n");
            sb.Append("  MimeType: ").Append(MimeType).Append("\n");
            sb.Append("  S3Key: ").Append(S3Key).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ConversationKnowledgeBaseDocument);
        }

        /// <summary>
        /// Returns true if ConversationKnowledgeBaseDocument instances are equal
        /// </summary>
        /// <param name="input">Instance of ConversationKnowledgeBaseDocument to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ConversationKnowledgeBaseDocument input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ChunkCount == input.ChunkCount ||
                    (this.ChunkCount != null &&
                    this.ChunkCount.Equals(input.ChunkCount))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.DocumentId == input.DocumentId ||
                    (this.DocumentId != null &&
                    this.DocumentId.Equals(input.DocumentId))
                ) && 
                (
                    this.DocumentUuid == input.DocumentUuid ||
                    (this.DocumentUuid != null &&
                    this.DocumentUuid.Equals(input.DocumentUuid))
                ) && 
                (
                    this.Metadata == input.Metadata ||
                    (this.Metadata != null &&
                    this.Metadata.Equals(input.Metadata))
                ) && 
                (
                    this.MimeType == input.MimeType ||
                    (this.MimeType != null &&
                    this.MimeType.Equals(input.MimeType))
                ) && 
                (
                    this.S3Key == input.S3Key ||
                    (this.S3Key != null &&
                    this.S3Key.Equals(input.S3Key))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ChunkCount != null)
                    hashCode = hashCode * 59 + this.ChunkCount.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                if (this.DocumentId != null)
                    hashCode = hashCode * 59 + this.DocumentId.GetHashCode();
                if (this.DocumentUuid != null)
                    hashCode = hashCode * 59 + this.DocumentUuid.GetHashCode();
                if (this.Metadata != null)
                    hashCode = hashCode * 59 + this.Metadata.GetHashCode();
                if (this.MimeType != null)
                    hashCode = hashCode * 59 + this.MimeType.GetHashCode();
                if (this.S3Key != null)
                    hashCode = hashCode * 59 + this.S3Key.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
