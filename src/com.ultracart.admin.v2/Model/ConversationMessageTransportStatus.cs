/* 
 * UltraCart Rest API V2
 *
 * UltraCart REST API Version 2
 *
 * OpenAPI spec version: 2.0.0
 * Contact: support@ultracart.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = com.ultracart.admin.v2.Client.SwaggerDateConverter;

namespace com.ultracart.admin.v2.Model
{
    /// <summary>
    /// ConversationMessageTransportStatus
    /// </summary>
    [DataContract]
    public partial class ConversationMessageTransportStatus :  IEquatable<ConversationMessageTransportStatus>, IValidatableObject
    {
        /// <summary>
        /// The status of the message transport
        /// </summary>
        /// <value>The status of the message transport</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum StatusEnum
        {
            
            /// <summary>
            /// Enum Accepted for value: accepted
            /// </summary>
            [EnumMember(Value = "accepted")]
            Accepted = 1,
            
            /// <summary>
            /// Enum Scheduled for value: scheduled
            /// </summary>
            [EnumMember(Value = "scheduled")]
            Scheduled = 2,
            
            /// <summary>
            /// Enum Queued for value: queued
            /// </summary>
            [EnumMember(Value = "queued")]
            Queued = 3,
            
            /// <summary>
            /// Enum Sending for value: sending
            /// </summary>
            [EnumMember(Value = "sending")]
            Sending = 4,
            
            /// <summary>
            /// Enum Sent for value: sent
            /// </summary>
            [EnumMember(Value = "sent")]
            Sent = 5,
            
            /// <summary>
            /// Enum Read for value: read
            /// </summary>
            [EnumMember(Value = "read")]
            Read = 6,
            
            /// <summary>
            /// Enum TWILIOCREDENTIALSMISSING for value: TWILIO_CREDENTIALS_MISSING
            /// </summary>
            [EnumMember(Value = "TWILIO_CREDENTIALS_MISSING")]
            TWILIOCREDENTIALSMISSING = 7,
            
            /// <summary>
            /// Enum SENTTOTWILIO for value: SENT_TO_TWILIO
            /// </summary>
            [EnumMember(Value = "SENT_TO_TWILIO")]
            SENTTOTWILIO = 8,
            
            /// <summary>
            /// Enum TWILIOERROR for value: TWILIO_ERROR
            /// </summary>
            [EnumMember(Value = "TWILIO_ERROR")]
            TWILIOERROR = 9,
            
            /// <summary>
            /// Enum SENTTOPINPOINT for value: SENT_TO_PINPOINT
            /// </summary>
            [EnumMember(Value = "SENT_TO_PINPOINT")]
            SENTTOPINPOINT = 10,
            
            /// <summary>
            /// Enum PINPOINTERROR for value: PINPOINT_ERROR
            /// </summary>
            [EnumMember(Value = "PINPOINT_ERROR")]
            PINPOINTERROR = 11
        }

        /// <summary>
        /// The status of the message transport
        /// </summary>
        /// <value>The status of the message transport</value>
        [DataMember(Name="status", EmitDefaultValue=false)]
        public StatusEnum? Status { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="ConversationMessageTransportStatus" /> class.
        /// </summary>
        /// <param name="conversationParticipantArn">conversationParticipantArn.</param>
        /// <param name="status">The status of the message transport.</param>
        public ConversationMessageTransportStatus(string conversationParticipantArn = default(string), StatusEnum? status = default(StatusEnum?))
        {
            this.ConversationParticipantArn = conversationParticipantArn;
            this.Status = status;
        }
        
        /// <summary>
        /// Gets or Sets ConversationParticipantArn
        /// </summary>
        [DataMember(Name="conversation_participant_arn", EmitDefaultValue=false)]
        public string ConversationParticipantArn { get; set; }


        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ConversationMessageTransportStatus {\n");
            sb.Append("  ConversationParticipantArn: ").Append(ConversationParticipantArn).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ConversationMessageTransportStatus);
        }

        /// <summary>
        /// Returns true if ConversationMessageTransportStatus instances are equal
        /// </summary>
        /// <param name="input">Instance of ConversationMessageTransportStatus to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ConversationMessageTransportStatus input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ConversationParticipantArn == input.ConversationParticipantArn ||
                    (this.ConversationParticipantArn != null &&
                    this.ConversationParticipantArn.Equals(input.ConversationParticipantArn))
                ) && 
                (
                    this.Status == input.Status ||
                    (this.Status != null &&
                    this.Status.Equals(input.Status))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ConversationParticipantArn != null)
                    hashCode = hashCode * 59 + this.ConversationParticipantArn.GetHashCode();
                if (this.Status != null)
                    hashCode = hashCode * 59 + this.Status.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
