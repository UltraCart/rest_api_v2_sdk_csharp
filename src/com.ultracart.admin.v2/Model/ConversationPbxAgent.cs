/* 
 * UltraCart Rest API V2
 *
 * UltraCart REST API Version 2
 *
 * OpenAPI spec version: 2.0.0
 * Contact: support@ultracart.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = com.ultracart.admin.v2.Client.SwaggerDateConverter;

namespace com.ultracart.admin.v2.Model
{
    /// <summary>
    /// ConversationPbxAgent
    /// </summary>
    [DataContract]
    public partial class ConversationPbxAgent :  IEquatable<ConversationPbxAgent>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ConversationPbxAgent" /> class.
        /// </summary>
        /// <param name="cellphone">Cellphone number of agent in E.164 format.</param>
        /// <param name="conversationPbxAgentUuid">Conversation Pbx Agent unique identifier.</param>
        /// <param name="conversationPbxVoicemailMailboxUuid">Conversation Pbx Voicemail Mailbox UUID.</param>
        /// <param name="forwardCallsToCellphone">True if calls to this agent should be forwarded to their cellphone.</param>
        /// <param name="merchantId">Merchant Id.</param>
        /// <param name="recordOutgoingAutomatically">True if outgoing calls should be automatically recorded.</param>
        /// <param name="twilioTaskrouterWorkerId">Twilio taskrouter worker Id.</param>
        /// <param name="userId">User Id.</param>
        /// <param name="voicemail">True if this agent has voicemail configured.</param>
        public ConversationPbxAgent(string cellphone = default(string), string conversationPbxAgentUuid = default(string), string conversationPbxVoicemailMailboxUuid = default(string), bool? forwardCallsToCellphone = default(bool?), string merchantId = default(string), bool? recordOutgoingAutomatically = default(bool?), string twilioTaskrouterWorkerId = default(string), int? userId = default(int?), bool? voicemail = default(bool?))
        {
            this.Cellphone = cellphone;
            this.ConversationPbxAgentUuid = conversationPbxAgentUuid;
            this.ConversationPbxVoicemailMailboxUuid = conversationPbxVoicemailMailboxUuid;
            this.ForwardCallsToCellphone = forwardCallsToCellphone;
            this.MerchantId = merchantId;
            this.RecordOutgoingAutomatically = recordOutgoingAutomatically;
            this.TwilioTaskrouterWorkerId = twilioTaskrouterWorkerId;
            this.UserId = userId;
            this.Voicemail = voicemail;
        }
        
        /// <summary>
        /// Cellphone number of agent in E.164 format
        /// </summary>
        /// <value>Cellphone number of agent in E.164 format</value>
        [DataMember(Name="cellphone", EmitDefaultValue=false)]
        public string Cellphone { get; set; }

        /// <summary>
        /// Conversation Pbx Agent unique identifier
        /// </summary>
        /// <value>Conversation Pbx Agent unique identifier</value>
        [DataMember(Name="conversation_pbx_agent_uuid", EmitDefaultValue=false)]
        public string ConversationPbxAgentUuid { get; set; }

        /// <summary>
        /// Conversation Pbx Voicemail Mailbox UUID
        /// </summary>
        /// <value>Conversation Pbx Voicemail Mailbox UUID</value>
        [DataMember(Name="conversation_pbx_voicemail_mailbox_uuid", EmitDefaultValue=false)]
        public string ConversationPbxVoicemailMailboxUuid { get; set; }

        /// <summary>
        /// True if calls to this agent should be forwarded to their cellphone
        /// </summary>
        /// <value>True if calls to this agent should be forwarded to their cellphone</value>
        [DataMember(Name="forward_calls_to_cellphone", EmitDefaultValue=false)]
        public bool? ForwardCallsToCellphone { get; set; }

        /// <summary>
        /// Merchant Id
        /// </summary>
        /// <value>Merchant Id</value>
        [DataMember(Name="merchant_id", EmitDefaultValue=false)]
        public string MerchantId { get; set; }

        /// <summary>
        /// True if outgoing calls should be automatically recorded
        /// </summary>
        /// <value>True if outgoing calls should be automatically recorded</value>
        [DataMember(Name="record_outgoing_automatically", EmitDefaultValue=false)]
        public bool? RecordOutgoingAutomatically { get; set; }

        /// <summary>
        /// Twilio taskrouter worker Id
        /// </summary>
        /// <value>Twilio taskrouter worker Id</value>
        [DataMember(Name="twilio_taskrouter_worker_id", EmitDefaultValue=false)]
        public string TwilioTaskrouterWorkerId { get; set; }

        /// <summary>
        /// User Id
        /// </summary>
        /// <value>User Id</value>
        [DataMember(Name="user_id", EmitDefaultValue=false)]
        public int? UserId { get; set; }

        /// <summary>
        /// True if this agent has voicemail configured
        /// </summary>
        /// <value>True if this agent has voicemail configured</value>
        [DataMember(Name="voicemail", EmitDefaultValue=false)]
        public bool? Voicemail { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ConversationPbxAgent {\n");
            sb.Append("  Cellphone: ").Append(Cellphone).Append("\n");
            sb.Append("  ConversationPbxAgentUuid: ").Append(ConversationPbxAgentUuid).Append("\n");
            sb.Append("  ConversationPbxVoicemailMailboxUuid: ").Append(ConversationPbxVoicemailMailboxUuid).Append("\n");
            sb.Append("  ForwardCallsToCellphone: ").Append(ForwardCallsToCellphone).Append("\n");
            sb.Append("  MerchantId: ").Append(MerchantId).Append("\n");
            sb.Append("  RecordOutgoingAutomatically: ").Append(RecordOutgoingAutomatically).Append("\n");
            sb.Append("  TwilioTaskrouterWorkerId: ").Append(TwilioTaskrouterWorkerId).Append("\n");
            sb.Append("  UserId: ").Append(UserId).Append("\n");
            sb.Append("  Voicemail: ").Append(Voicemail).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ConversationPbxAgent);
        }

        /// <summary>
        /// Returns true if ConversationPbxAgent instances are equal
        /// </summary>
        /// <param name="input">Instance of ConversationPbxAgent to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ConversationPbxAgent input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Cellphone == input.Cellphone ||
                    (this.Cellphone != null &&
                    this.Cellphone.Equals(input.Cellphone))
                ) && 
                (
                    this.ConversationPbxAgentUuid == input.ConversationPbxAgentUuid ||
                    (this.ConversationPbxAgentUuid != null &&
                    this.ConversationPbxAgentUuid.Equals(input.ConversationPbxAgentUuid))
                ) && 
                (
                    this.ConversationPbxVoicemailMailboxUuid == input.ConversationPbxVoicemailMailboxUuid ||
                    (this.ConversationPbxVoicemailMailboxUuid != null &&
                    this.ConversationPbxVoicemailMailboxUuid.Equals(input.ConversationPbxVoicemailMailboxUuid))
                ) && 
                (
                    this.ForwardCallsToCellphone == input.ForwardCallsToCellphone ||
                    (this.ForwardCallsToCellphone != null &&
                    this.ForwardCallsToCellphone.Equals(input.ForwardCallsToCellphone))
                ) && 
                (
                    this.MerchantId == input.MerchantId ||
                    (this.MerchantId != null &&
                    this.MerchantId.Equals(input.MerchantId))
                ) && 
                (
                    this.RecordOutgoingAutomatically == input.RecordOutgoingAutomatically ||
                    (this.RecordOutgoingAutomatically != null &&
                    this.RecordOutgoingAutomatically.Equals(input.RecordOutgoingAutomatically))
                ) && 
                (
                    this.TwilioTaskrouterWorkerId == input.TwilioTaskrouterWorkerId ||
                    (this.TwilioTaskrouterWorkerId != null &&
                    this.TwilioTaskrouterWorkerId.Equals(input.TwilioTaskrouterWorkerId))
                ) && 
                (
                    this.UserId == input.UserId ||
                    (this.UserId != null &&
                    this.UserId.Equals(input.UserId))
                ) && 
                (
                    this.Voicemail == input.Voicemail ||
                    (this.Voicemail != null &&
                    this.Voicemail.Equals(input.Voicemail))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Cellphone != null)
                    hashCode = hashCode * 59 + this.Cellphone.GetHashCode();
                if (this.ConversationPbxAgentUuid != null)
                    hashCode = hashCode * 59 + this.ConversationPbxAgentUuid.GetHashCode();
                if (this.ConversationPbxVoicemailMailboxUuid != null)
                    hashCode = hashCode * 59 + this.ConversationPbxVoicemailMailboxUuid.GetHashCode();
                if (this.ForwardCallsToCellphone != null)
                    hashCode = hashCode * 59 + this.ForwardCallsToCellphone.GetHashCode();
                if (this.MerchantId != null)
                    hashCode = hashCode * 59 + this.MerchantId.GetHashCode();
                if (this.RecordOutgoingAutomatically != null)
                    hashCode = hashCode * 59 + this.RecordOutgoingAutomatically.GetHashCode();
                if (this.TwilioTaskrouterWorkerId != null)
                    hashCode = hashCode * 59 + this.TwilioTaskrouterWorkerId.GetHashCode();
                if (this.UserId != null)
                    hashCode = hashCode * 59 + this.UserId.GetHashCode();
                if (this.Voicemail != null)
                    hashCode = hashCode * 59 + this.Voicemail.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Cellphone (string) maxLength
            if(this.Cellphone != null && this.Cellphone.Length > 50)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Cellphone, length must be less than 50.", new [] { "Cellphone" });
            }

            // ConversationPbxVoicemailMailboxUuid (string) maxLength
            if(this.ConversationPbxVoicemailMailboxUuid != null && this.ConversationPbxVoicemailMailboxUuid.Length > 50)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ConversationPbxVoicemailMailboxUuid, length must be less than 50.", new [] { "ConversationPbxVoicemailMailboxUuid" });
            }

            // MerchantId (string) maxLength
            if(this.MerchantId != null && this.MerchantId.Length > 5)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for MerchantId, length must be less than 5.", new [] { "MerchantId" });
            }

            // TwilioTaskrouterWorkerId (string) maxLength
            if(this.TwilioTaskrouterWorkerId != null && this.TwilioTaskrouterWorkerId.Length > 100)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for TwilioTaskrouterWorkerId, length must be less than 100.", new [] { "TwilioTaskrouterWorkerId" });
            }

            yield break;
        }
    }

}
