/* 
 * UltraCart Rest API V2
 *
 * UltraCart REST API Version 2
 *
 * OpenAPI spec version: 2.0.0
 * Contact: support@ultracart.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = com.ultracart.admin.v2.Client.SwaggerDateConverter;

namespace com.ultracart.admin.v2.Model
{
    /// <summary>
    /// ConversationPbxAudio
    /// </summary>
    [DataContract]
    public partial class ConversationPbxAudio :  IEquatable<ConversationPbxAudio>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ConversationPbxAudio" /> class.
        /// </summary>
        /// <param name="audioS3ListingKey">Audio S3 Listing Key.</param>
        /// <param name="conversationPbxAudioUuid">Conversation Pbx Audio UUID.</param>
        /// <param name="defaultHoldMusic">If true, this will be the default hold music.</param>
        /// <param name="description">Description of this audio.</param>
        /// <param name="filename">Filename.</param>
        /// <param name="merchantId">Merchant Id.</param>
        /// <param name="mimeType">Mime Type.</param>
        /// <param name="url">URL.</param>
        /// <param name="userId">User Id.</param>
        /// <param name="version">Version.</param>
        public ConversationPbxAudio(string audioS3ListingKey = default(string), string conversationPbxAudioUuid = default(string), bool? defaultHoldMusic = default(bool?), string description = default(string), string filename = default(string), string merchantId = default(string), string mimeType = default(string), string url = default(string), int? userId = default(int?), int? version = default(int?))
        {
            this.AudioS3ListingKey = audioS3ListingKey;
            this.ConversationPbxAudioUuid = conversationPbxAudioUuid;
            this.DefaultHoldMusic = defaultHoldMusic;
            this.Description = description;
            this.Filename = filename;
            this.MerchantId = merchantId;
            this.MimeType = mimeType;
            this.Url = url;
            this.UserId = userId;
            this.Version = version;
        }
        
        /// <summary>
        /// Audio S3 Listing Key
        /// </summary>
        /// <value>Audio S3 Listing Key</value>
        [DataMember(Name="audio_s3_listing_key", EmitDefaultValue=false)]
        public string AudioS3ListingKey { get; set; }

        /// <summary>
        /// Conversation Pbx Audio UUID
        /// </summary>
        /// <value>Conversation Pbx Audio UUID</value>
        [DataMember(Name="conversation_pbx_audio_uuid", EmitDefaultValue=false)]
        public string ConversationPbxAudioUuid { get; set; }

        /// <summary>
        /// If true, this will be the default hold music
        /// </summary>
        /// <value>If true, this will be the default hold music</value>
        [DataMember(Name="default_hold_music", EmitDefaultValue=false)]
        public bool? DefaultHoldMusic { get; set; }

        /// <summary>
        /// Description of this audio
        /// </summary>
        /// <value>Description of this audio</value>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }

        /// <summary>
        /// Filename
        /// </summary>
        /// <value>Filename</value>
        [DataMember(Name="filename", EmitDefaultValue=false)]
        public string Filename { get; set; }

        /// <summary>
        /// Merchant Id
        /// </summary>
        /// <value>Merchant Id</value>
        [DataMember(Name="merchant_id", EmitDefaultValue=false)]
        public string MerchantId { get; set; }

        /// <summary>
        /// Mime Type
        /// </summary>
        /// <value>Mime Type</value>
        [DataMember(Name="mime_type", EmitDefaultValue=false)]
        public string MimeType { get; set; }

        /// <summary>
        /// URL
        /// </summary>
        /// <value>URL</value>
        [DataMember(Name="url", EmitDefaultValue=false)]
        public string Url { get; set; }

        /// <summary>
        /// User Id
        /// </summary>
        /// <value>User Id</value>
        [DataMember(Name="user_id", EmitDefaultValue=false)]
        public int? UserId { get; set; }

        /// <summary>
        /// Version
        /// </summary>
        /// <value>Version</value>
        [DataMember(Name="version", EmitDefaultValue=false)]
        public int? Version { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ConversationPbxAudio {\n");
            sb.Append("  AudioS3ListingKey: ").Append(AudioS3ListingKey).Append("\n");
            sb.Append("  ConversationPbxAudioUuid: ").Append(ConversationPbxAudioUuid).Append("\n");
            sb.Append("  DefaultHoldMusic: ").Append(DefaultHoldMusic).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Filename: ").Append(Filename).Append("\n");
            sb.Append("  MerchantId: ").Append(MerchantId).Append("\n");
            sb.Append("  MimeType: ").Append(MimeType).Append("\n");
            sb.Append("  Url: ").Append(Url).Append("\n");
            sb.Append("  UserId: ").Append(UserId).Append("\n");
            sb.Append("  Version: ").Append(Version).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ConversationPbxAudio);
        }

        /// <summary>
        /// Returns true if ConversationPbxAudio instances are equal
        /// </summary>
        /// <param name="input">Instance of ConversationPbxAudio to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ConversationPbxAudio input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.AudioS3ListingKey == input.AudioS3ListingKey ||
                    (this.AudioS3ListingKey != null &&
                    this.AudioS3ListingKey.Equals(input.AudioS3ListingKey))
                ) && 
                (
                    this.ConversationPbxAudioUuid == input.ConversationPbxAudioUuid ||
                    (this.ConversationPbxAudioUuid != null &&
                    this.ConversationPbxAudioUuid.Equals(input.ConversationPbxAudioUuid))
                ) && 
                (
                    this.DefaultHoldMusic == input.DefaultHoldMusic ||
                    (this.DefaultHoldMusic != null &&
                    this.DefaultHoldMusic.Equals(input.DefaultHoldMusic))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.Filename == input.Filename ||
                    (this.Filename != null &&
                    this.Filename.Equals(input.Filename))
                ) && 
                (
                    this.MerchantId == input.MerchantId ||
                    (this.MerchantId != null &&
                    this.MerchantId.Equals(input.MerchantId))
                ) && 
                (
                    this.MimeType == input.MimeType ||
                    (this.MimeType != null &&
                    this.MimeType.Equals(input.MimeType))
                ) && 
                (
                    this.Url == input.Url ||
                    (this.Url != null &&
                    this.Url.Equals(input.Url))
                ) && 
                (
                    this.UserId == input.UserId ||
                    (this.UserId != null &&
                    this.UserId.Equals(input.UserId))
                ) && 
                (
                    this.Version == input.Version ||
                    (this.Version != null &&
                    this.Version.Equals(input.Version))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AudioS3ListingKey != null)
                    hashCode = hashCode * 59 + this.AudioS3ListingKey.GetHashCode();
                if (this.ConversationPbxAudioUuid != null)
                    hashCode = hashCode * 59 + this.ConversationPbxAudioUuid.GetHashCode();
                if (this.DefaultHoldMusic != null)
                    hashCode = hashCode * 59 + this.DefaultHoldMusic.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                if (this.Filename != null)
                    hashCode = hashCode * 59 + this.Filename.GetHashCode();
                if (this.MerchantId != null)
                    hashCode = hashCode * 59 + this.MerchantId.GetHashCode();
                if (this.MimeType != null)
                    hashCode = hashCode * 59 + this.MimeType.GetHashCode();
                if (this.Url != null)
                    hashCode = hashCode * 59 + this.Url.GetHashCode();
                if (this.UserId != null)
                    hashCode = hashCode * 59 + this.UserId.GetHashCode();
                if (this.Version != null)
                    hashCode = hashCode * 59 + this.Version.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // AudioS3ListingKey (string) maxLength
            if(this.AudioS3ListingKey != null && this.AudioS3ListingKey.Length > 250)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for AudioS3ListingKey, length must be less than 250.", new [] { "AudioS3ListingKey" });
            }

            // ConversationPbxAudioUuid (string) maxLength
            if(this.ConversationPbxAudioUuid != null && this.ConversationPbxAudioUuid.Length > 50)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ConversationPbxAudioUuid, length must be less than 50.", new [] { "ConversationPbxAudioUuid" });
            }

            // Description (string) maxLength
            if(this.Description != null && this.Description.Length > 100)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Description, length must be less than 100.", new [] { "Description" });
            }

            // Filename (string) maxLength
            if(this.Filename != null && this.Filename.Length > 100)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Filename, length must be less than 100.", new [] { "Filename" });
            }

            // MerchantId (string) maxLength
            if(this.MerchantId != null && this.MerchantId.Length > 5)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for MerchantId, length must be less than 5.", new [] { "MerchantId" });
            }

            // MimeType (string) maxLength
            if(this.MimeType != null && this.MimeType.Length > 100)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for MimeType, length must be less than 100.", new [] { "MimeType" });
            }

            yield break;
        }
    }

}
