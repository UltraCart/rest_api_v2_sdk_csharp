/* 
 * UltraCart Rest API V2
 *
 * UltraCart REST API Version 2
 *
 * OpenAPI spec version: 2.0.0
 * Contact: support@ultracart.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = com.ultracart.admin.v2.Client.SwaggerDateConverter;

namespace com.ultracart.admin.v2.Model
{
    /// <summary>
    /// ConversationPbxAudioUsageResponse
    /// </summary>
    [DataContract]
    public partial class ConversationPbxAudioUsageResponse :  IEquatable<ConversationPbxAudioUsageResponse>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ConversationPbxAudioUsageResponse" /> class.
        /// </summary>
        /// <param name="error">error.</param>
        /// <param name="menus">menus.</param>
        /// <param name="metadata">metadata.</param>
        /// <param name="queues">queues.</param>
        /// <param name="success">Indicates if API call was successful.</param>
        /// <param name="voicemailMailboxes">voicemailMailboxes.</param>
        /// <param name="warning">warning.</param>
        public ConversationPbxAudioUsageResponse(Error error = default(Error), List<ConversationPbxMenu> menus = default(List<ConversationPbxMenu>), ResponseMetadata metadata = default(ResponseMetadata), List<ConversationPbxQueue> queues = default(List<ConversationPbxQueue>), bool? success = default(bool?), List<ConversationPbxVoicemailMailbox> voicemailMailboxes = default(List<ConversationPbxVoicemailMailbox>), Warning warning = default(Warning))
        {
            this.Error = error;
            this.Menus = menus;
            this.Metadata = metadata;
            this.Queues = queues;
            this.Success = success;
            this.VoicemailMailboxes = voicemailMailboxes;
            this.Warning = warning;
        }
        
        /// <summary>
        /// Gets or Sets Error
        /// </summary>
        [DataMember(Name="error", EmitDefaultValue=false)]
        public Error Error { get; set; }

        /// <summary>
        /// Gets or Sets Menus
        /// </summary>
        [DataMember(Name="menus", EmitDefaultValue=false)]
        public List<ConversationPbxMenu> Menus { get; set; }

        /// <summary>
        /// Gets or Sets Metadata
        /// </summary>
        [DataMember(Name="metadata", EmitDefaultValue=false)]
        public ResponseMetadata Metadata { get; set; }

        /// <summary>
        /// Gets or Sets Queues
        /// </summary>
        [DataMember(Name="queues", EmitDefaultValue=false)]
        public List<ConversationPbxQueue> Queues { get; set; }

        /// <summary>
        /// Indicates if API call was successful
        /// </summary>
        /// <value>Indicates if API call was successful</value>
        [DataMember(Name="success", EmitDefaultValue=false)]
        public bool? Success { get; set; }

        /// <summary>
        /// Gets or Sets VoicemailMailboxes
        /// </summary>
        [DataMember(Name="voicemail_mailboxes", EmitDefaultValue=false)]
        public List<ConversationPbxVoicemailMailbox> VoicemailMailboxes { get; set; }

        /// <summary>
        /// Gets or Sets Warning
        /// </summary>
        [DataMember(Name="warning", EmitDefaultValue=false)]
        public Warning Warning { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ConversationPbxAudioUsageResponse {\n");
            sb.Append("  Error: ").Append(Error).Append("\n");
            sb.Append("  Menus: ").Append(Menus).Append("\n");
            sb.Append("  Metadata: ").Append(Metadata).Append("\n");
            sb.Append("  Queues: ").Append(Queues).Append("\n");
            sb.Append("  Success: ").Append(Success).Append("\n");
            sb.Append("  VoicemailMailboxes: ").Append(VoicemailMailboxes).Append("\n");
            sb.Append("  Warning: ").Append(Warning).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ConversationPbxAudioUsageResponse);
        }

        /// <summary>
        /// Returns true if ConversationPbxAudioUsageResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of ConversationPbxAudioUsageResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ConversationPbxAudioUsageResponse input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Error == input.Error ||
                    (this.Error != null &&
                    this.Error.Equals(input.Error))
                ) && 
                (
                    this.Menus == input.Menus ||
                    this.Menus != null &&
                    this.Menus.SequenceEqual(input.Menus)
                ) && 
                (
                    this.Metadata == input.Metadata ||
                    (this.Metadata != null &&
                    this.Metadata.Equals(input.Metadata))
                ) && 
                (
                    this.Queues == input.Queues ||
                    this.Queues != null &&
                    this.Queues.SequenceEqual(input.Queues)
                ) && 
                (
                    this.Success == input.Success ||
                    (this.Success != null &&
                    this.Success.Equals(input.Success))
                ) && 
                (
                    this.VoicemailMailboxes == input.VoicemailMailboxes ||
                    this.VoicemailMailboxes != null &&
                    this.VoicemailMailboxes.SequenceEqual(input.VoicemailMailboxes)
                ) && 
                (
                    this.Warning == input.Warning ||
                    (this.Warning != null &&
                    this.Warning.Equals(input.Warning))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Error != null)
                    hashCode = hashCode * 59 + this.Error.GetHashCode();
                if (this.Menus != null)
                    hashCode = hashCode * 59 + this.Menus.GetHashCode();
                if (this.Metadata != null)
                    hashCode = hashCode * 59 + this.Metadata.GetHashCode();
                if (this.Queues != null)
                    hashCode = hashCode * 59 + this.Queues.GetHashCode();
                if (this.Success != null)
                    hashCode = hashCode * 59 + this.Success.GetHashCode();
                if (this.VoicemailMailboxes != null)
                    hashCode = hashCode * 59 + this.VoicemailMailboxes.GetHashCode();
                if (this.Warning != null)
                    hashCode = hashCode * 59 + this.Warning.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
