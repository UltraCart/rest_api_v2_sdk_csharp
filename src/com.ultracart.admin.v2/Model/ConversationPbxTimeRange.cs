/* 
 * UltraCart Rest API V2
 *
 * UltraCart REST API Version 2
 *
 * OpenAPI spec version: 2.0.0
 * Contact: support@ultracart.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = com.ultracart.admin.v2.Client.SwaggerDateConverter;

namespace com.ultracart.admin.v2.Model
{
    /// <summary>
    /// ConversationPbxTimeRange
    /// </summary>
    [DataContract]
    public partial class ConversationPbxTimeRange :  IEquatable<ConversationPbxTimeRange>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ConversationPbxTimeRange" /> class.
        /// </summary>
        /// <param name="configs">Configurations for all ranges in this time range.</param>
        /// <param name="conversationPbxTimeRangeUuid">Conversation Pbx Time Range UUID.</param>
        /// <param name="merchantId">Merchant Id.</param>
        /// <param name="timeRangeName">Time range name.</param>
        /// <param name="timezone">Timezone.</param>
        public ConversationPbxTimeRange(List<ConversationPbxTimeRangeConfig> configs = default(List<ConversationPbxTimeRangeConfig>), string conversationPbxTimeRangeUuid = default(string), string merchantId = default(string), string timeRangeName = default(string), string timezone = default(string))
        {
            this.Configs = configs;
            this.ConversationPbxTimeRangeUuid = conversationPbxTimeRangeUuid;
            this.MerchantId = merchantId;
            this.TimeRangeName = timeRangeName;
            this.Timezone = timezone;
        }
        
        /// <summary>
        /// Configurations for all ranges in this time range
        /// </summary>
        /// <value>Configurations for all ranges in this time range</value>
        [DataMember(Name="configs", EmitDefaultValue=false)]
        public List<ConversationPbxTimeRangeConfig> Configs { get; set; }

        /// <summary>
        /// Conversation Pbx Time Range UUID
        /// </summary>
        /// <value>Conversation Pbx Time Range UUID</value>
        [DataMember(Name="conversation_pbx_time_range_uuid", EmitDefaultValue=false)]
        public string ConversationPbxTimeRangeUuid { get; set; }

        /// <summary>
        /// Merchant Id
        /// </summary>
        /// <value>Merchant Id</value>
        [DataMember(Name="merchant_id", EmitDefaultValue=false)]
        public string MerchantId { get; set; }

        /// <summary>
        /// Time range name
        /// </summary>
        /// <value>Time range name</value>
        [DataMember(Name="time_range_name", EmitDefaultValue=false)]
        public string TimeRangeName { get; set; }

        /// <summary>
        /// Timezone
        /// </summary>
        /// <value>Timezone</value>
        [DataMember(Name="timezone", EmitDefaultValue=false)]
        public string Timezone { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ConversationPbxTimeRange {\n");
            sb.Append("  Configs: ").Append(Configs).Append("\n");
            sb.Append("  ConversationPbxTimeRangeUuid: ").Append(ConversationPbxTimeRangeUuid).Append("\n");
            sb.Append("  MerchantId: ").Append(MerchantId).Append("\n");
            sb.Append("  TimeRangeName: ").Append(TimeRangeName).Append("\n");
            sb.Append("  Timezone: ").Append(Timezone).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ConversationPbxTimeRange);
        }

        /// <summary>
        /// Returns true if ConversationPbxTimeRange instances are equal
        /// </summary>
        /// <param name="input">Instance of ConversationPbxTimeRange to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ConversationPbxTimeRange input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Configs == input.Configs ||
                    this.Configs != null &&
                    this.Configs.SequenceEqual(input.Configs)
                ) && 
                (
                    this.ConversationPbxTimeRangeUuid == input.ConversationPbxTimeRangeUuid ||
                    (this.ConversationPbxTimeRangeUuid != null &&
                    this.ConversationPbxTimeRangeUuid.Equals(input.ConversationPbxTimeRangeUuid))
                ) && 
                (
                    this.MerchantId == input.MerchantId ||
                    (this.MerchantId != null &&
                    this.MerchantId.Equals(input.MerchantId))
                ) && 
                (
                    this.TimeRangeName == input.TimeRangeName ||
                    (this.TimeRangeName != null &&
                    this.TimeRangeName.Equals(input.TimeRangeName))
                ) && 
                (
                    this.Timezone == input.Timezone ||
                    (this.Timezone != null &&
                    this.Timezone.Equals(input.Timezone))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Configs != null)
                    hashCode = hashCode * 59 + this.Configs.GetHashCode();
                if (this.ConversationPbxTimeRangeUuid != null)
                    hashCode = hashCode * 59 + this.ConversationPbxTimeRangeUuid.GetHashCode();
                if (this.MerchantId != null)
                    hashCode = hashCode * 59 + this.MerchantId.GetHashCode();
                if (this.TimeRangeName != null)
                    hashCode = hashCode * 59 + this.TimeRangeName.GetHashCode();
                if (this.Timezone != null)
                    hashCode = hashCode * 59 + this.Timezone.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // ConversationPbxTimeRangeUuid (string) maxLength
            if(this.ConversationPbxTimeRangeUuid != null && this.ConversationPbxTimeRangeUuid.Length > 50)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ConversationPbxTimeRangeUuid, length must be less than 50.", new [] { "ConversationPbxTimeRangeUuid" });
            }

            // MerchantId (string) maxLength
            if(this.MerchantId != null && this.MerchantId.Length > 5)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for MerchantId, length must be less than 5.", new [] { "MerchantId" });
            }

            // TimeRangeName (string) maxLength
            if(this.TimeRangeName != null && this.TimeRangeName.Length > 50)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for TimeRangeName, length must be less than 50.", new [] { "TimeRangeName" });
            }

            // Timezone (string) maxLength
            if(this.Timezone != null && this.Timezone.Length > 100)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Timezone, length must be less than 100.", new [] { "Timezone" });
            }

            yield break;
        }
    }

}
