/*
 * UltraCart Rest API V2
 *
 * UltraCart REST API Version 2
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@ultracart.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = com.ultracart.admin.v2.Client.OpenAPIDateConverter;

namespace com.ultracart.admin.v2.Model
{
    /// <summary>
    /// ConversationPbxTimeRangeConfig
    /// </summary>
    [DataContract]
    public partial class ConversationPbxTimeRangeConfig :  IEquatable<ConversationPbxTimeRangeConfig>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ConversationPbxTimeRangeConfig" /> class.
        /// </summary>
        /// <param name="endDate">End date.</param>
        /// <param name="endDayOfWeek">End day of week.</param>
        /// <param name="endTime">End time.</param>
        /// <param name="startDate">Start date.</param>
        /// <param name="startDayOfWeek">Start day of week.</param>
        /// <param name="startTime">Start time.</param>
        public ConversationPbxTimeRangeConfig(string endDate = default(string), int endDayOfWeek = default(int), string endTime = default(string), string startDate = default(string), int startDayOfWeek = default(int), string startTime = default(string))
        {
            this.EndDate = endDate;
            this.EndDayOfWeek = endDayOfWeek;
            this.EndTime = endTime;
            this.StartDate = startDate;
            this.StartDayOfWeek = startDayOfWeek;
            this.StartTime = startTime;
        }

        /// <summary>
        /// End date
        /// </summary>
        /// <value>End date</value>
        [DataMember(Name="end_date", EmitDefaultValue=false)]
        public string EndDate { get; set; }

        /// <summary>
        /// End day of week
        /// </summary>
        /// <value>End day of week</value>
        [DataMember(Name="end_day_of_week", EmitDefaultValue=false)]
        public int EndDayOfWeek { get; set; }

        /// <summary>
        /// End time
        /// </summary>
        /// <value>End time</value>
        [DataMember(Name="end_time", EmitDefaultValue=false)]
        public string EndTime { get; set; }

        /// <summary>
        /// Start date
        /// </summary>
        /// <value>Start date</value>
        [DataMember(Name="start_date", EmitDefaultValue=false)]
        public string StartDate { get; set; }

        /// <summary>
        /// Start day of week
        /// </summary>
        /// <value>Start day of week</value>
        [DataMember(Name="start_day_of_week", EmitDefaultValue=false)]
        public int StartDayOfWeek { get; set; }

        /// <summary>
        /// Start time
        /// </summary>
        /// <value>Start time</value>
        [DataMember(Name="start_time", EmitDefaultValue=false)]
        public string StartTime { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ConversationPbxTimeRangeConfig {\n");
            sb.Append("  EndDate: ").Append(EndDate).Append("\n");
            sb.Append("  EndDayOfWeek: ").Append(EndDayOfWeek).Append("\n");
            sb.Append("  EndTime: ").Append(EndTime).Append("\n");
            sb.Append("  StartDate: ").Append(StartDate).Append("\n");
            sb.Append("  StartDayOfWeek: ").Append(StartDayOfWeek).Append("\n");
            sb.Append("  StartTime: ").Append(StartTime).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ConversationPbxTimeRangeConfig);
        }

        /// <summary>
        /// Returns true if ConversationPbxTimeRangeConfig instances are equal
        /// </summary>
        /// <param name="input">Instance of ConversationPbxTimeRangeConfig to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ConversationPbxTimeRangeConfig input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.EndDate == input.EndDate ||
                    (this.EndDate != null &&
                    this.EndDate.Equals(input.EndDate))
                ) && 
                (
                    this.EndDayOfWeek == input.EndDayOfWeek ||
                    (this.EndDayOfWeek != null &&
                    this.EndDayOfWeek.Equals(input.EndDayOfWeek))
                ) && 
                (
                    this.EndTime == input.EndTime ||
                    (this.EndTime != null &&
                    this.EndTime.Equals(input.EndTime))
                ) && 
                (
                    this.StartDate == input.StartDate ||
                    (this.StartDate != null &&
                    this.StartDate.Equals(input.StartDate))
                ) && 
                (
                    this.StartDayOfWeek == input.StartDayOfWeek ||
                    (this.StartDayOfWeek != null &&
                    this.StartDayOfWeek.Equals(input.StartDayOfWeek))
                ) && 
                (
                    this.StartTime == input.StartTime ||
                    (this.StartTime != null &&
                    this.StartTime.Equals(input.StartTime))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.EndDate != null)
                    hashCode = hashCode * 59 + this.EndDate.GetHashCode();
                if (this.EndDayOfWeek != null)
                    hashCode = hashCode * 59 + this.EndDayOfWeek.GetHashCode();
                if (this.EndTime != null)
                    hashCode = hashCode * 59 + this.EndTime.GetHashCode();
                if (this.StartDate != null)
                    hashCode = hashCode * 59 + this.StartDate.GetHashCode();
                if (this.StartDayOfWeek != null)
                    hashCode = hashCode * 59 + this.StartDayOfWeek.GetHashCode();
                if (this.StartTime != null)
                    hashCode = hashCode * 59 + this.StartTime.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
