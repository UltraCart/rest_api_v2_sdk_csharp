/*
 * UltraCart Rest API V2
 *
 * UltraCart REST API Version 2
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@ultracart.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = com.ultracart.admin.v2.Client.OpenAPIDateConverter;

namespace com.ultracart.admin.v2.Model
{
    /// <summary>
    /// ConversationPbxVoicemailMessageSummary
    /// </summary>
    [DataContract]
    public partial class ConversationPbxVoicemailMessageSummary :  IEquatable<ConversationPbxVoicemailMessageSummary>, IValidatableObject
    {
        /// <summary>
        /// Recording Status
        /// </summary>
        /// <value>Recording Status</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum RecordingStatusEnum
        {
            /// <summary>
            /// Enum Completed for value: completed
            /// </summary>
            [EnumMember(Value = "completed")]
            Completed = 1

        }

        /// <summary>
        /// Recording Status
        /// </summary>
        /// <value>Recording Status</value>
        [DataMember(Name="recording_status", EmitDefaultValue=false)]
        public RecordingStatusEnum? RecordingStatus { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="ConversationPbxVoicemailMessageSummary" /> class.
        /// </summary>
        /// <param name="callSid">Call SID.</param>
        /// <param name="duration">Duration in seconds.</param>
        /// <param name="from">From phone number in E.164.</param>
        /// <param name="fromCallerId">From caller id (if available).</param>
        /// <param name="listened">True if the voicemail has been listened to in the user interface.</param>
        /// <param name="merchantId">Merchant ID.</param>
        /// <param name="recordingSid">Recording SID.</param>
        /// <param name="recordingSizeBytes">Recording size in bytes.</param>
        /// <param name="recordingStatus">Recording Status.</param>
        /// <param name="voicemailDts">Voicemail date/time.</param>
        public ConversationPbxVoicemailMessageSummary(string callSid = default(string), int duration = default(int), string from = default(string), string fromCallerId = default(string), bool listened = default(bool), string merchantId = default(string), string recordingSid = default(string), int recordingSizeBytes = default(int), RecordingStatusEnum? recordingStatus = default(RecordingStatusEnum?), string voicemailDts = default(string))
        {
            this.CallSid = callSid;
            this.Duration = duration;
            this.From = from;
            this.FromCallerId = fromCallerId;
            this.Listened = listened;
            this.MerchantId = merchantId;
            this.RecordingSid = recordingSid;
            this.RecordingSizeBytes = recordingSizeBytes;
            this.RecordingStatus = recordingStatus;
            this.VoicemailDts = voicemailDts;
        }

        /// <summary>
        /// Call SID
        /// </summary>
        /// <value>Call SID</value>
        [DataMember(Name="call_sid", EmitDefaultValue=false)]
        public string CallSid { get; set; }

        /// <summary>
        /// Duration in seconds
        /// </summary>
        /// <value>Duration in seconds</value>
        [DataMember(Name="duration", EmitDefaultValue=false)]
        public int Duration { get; set; }

        /// <summary>
        /// From phone number in E.164
        /// </summary>
        /// <value>From phone number in E.164</value>
        [DataMember(Name="from", EmitDefaultValue=false)]
        public string From { get; set; }

        /// <summary>
        /// From caller id (if available)
        /// </summary>
        /// <value>From caller id (if available)</value>
        [DataMember(Name="from_caller_id", EmitDefaultValue=false)]
        public string FromCallerId { get; set; }

        /// <summary>
        /// True if the voicemail has been listened to in the user interface
        /// </summary>
        /// <value>True if the voicemail has been listened to in the user interface</value>
        [DataMember(Name="listened", EmitDefaultValue=false)]
        public bool Listened { get; set; }

        /// <summary>
        /// Merchant ID
        /// </summary>
        /// <value>Merchant ID</value>
        [DataMember(Name="merchant_id", EmitDefaultValue=false)]
        public string MerchantId { get; set; }

        /// <summary>
        /// Recording SID
        /// </summary>
        /// <value>Recording SID</value>
        [DataMember(Name="recording_sid", EmitDefaultValue=false)]
        public string RecordingSid { get; set; }

        /// <summary>
        /// Recording size in bytes
        /// </summary>
        /// <value>Recording size in bytes</value>
        [DataMember(Name="recording_size_bytes", EmitDefaultValue=false)]
        public int RecordingSizeBytes { get; set; }


        /// <summary>
        /// Voicemail date/time
        /// </summary>
        /// <value>Voicemail date/time</value>
        [DataMember(Name="voicemail_dts", EmitDefaultValue=false)]
        public string VoicemailDts { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ConversationPbxVoicemailMessageSummary {\n");
            sb.Append("  CallSid: ").Append(CallSid).Append("\n");
            sb.Append("  Duration: ").Append(Duration).Append("\n");
            sb.Append("  From: ").Append(From).Append("\n");
            sb.Append("  FromCallerId: ").Append(FromCallerId).Append("\n");
            sb.Append("  Listened: ").Append(Listened).Append("\n");
            sb.Append("  MerchantId: ").Append(MerchantId).Append("\n");
            sb.Append("  RecordingSid: ").Append(RecordingSid).Append("\n");
            sb.Append("  RecordingSizeBytes: ").Append(RecordingSizeBytes).Append("\n");
            sb.Append("  RecordingStatus: ").Append(RecordingStatus).Append("\n");
            sb.Append("  VoicemailDts: ").Append(VoicemailDts).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ConversationPbxVoicemailMessageSummary);
        }

        /// <summary>
        /// Returns true if ConversationPbxVoicemailMessageSummary instances are equal
        /// </summary>
        /// <param name="input">Instance of ConversationPbxVoicemailMessageSummary to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ConversationPbxVoicemailMessageSummary input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.CallSid == input.CallSid ||
                    (this.CallSid != null &&
                    this.CallSid.Equals(input.CallSid))
                ) && 
                (
                    this.Duration == input.Duration ||
                    (this.Duration != null &&
                    this.Duration.Equals(input.Duration))
                ) && 
                (
                    this.From == input.From ||
                    (this.From != null &&
                    this.From.Equals(input.From))
                ) && 
                (
                    this.FromCallerId == input.FromCallerId ||
                    (this.FromCallerId != null &&
                    this.FromCallerId.Equals(input.FromCallerId))
                ) && 
                (
                    this.Listened == input.Listened ||
                    (this.Listened != null &&
                    this.Listened.Equals(input.Listened))
                ) && 
                (
                    this.MerchantId == input.MerchantId ||
                    (this.MerchantId != null &&
                    this.MerchantId.Equals(input.MerchantId))
                ) && 
                (
                    this.RecordingSid == input.RecordingSid ||
                    (this.RecordingSid != null &&
                    this.RecordingSid.Equals(input.RecordingSid))
                ) && 
                (
                    this.RecordingSizeBytes == input.RecordingSizeBytes ||
                    (this.RecordingSizeBytes != null &&
                    this.RecordingSizeBytes.Equals(input.RecordingSizeBytes))
                ) && 
                (
                    this.RecordingStatus == input.RecordingStatus ||
                    (this.RecordingStatus != null &&
                    this.RecordingStatus.Equals(input.RecordingStatus))
                ) && 
                (
                    this.VoicemailDts == input.VoicemailDts ||
                    (this.VoicemailDts != null &&
                    this.VoicemailDts.Equals(input.VoicemailDts))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.CallSid != null)
                    hashCode = hashCode * 59 + this.CallSid.GetHashCode();
                if (this.Duration != null)
                    hashCode = hashCode * 59 + this.Duration.GetHashCode();
                if (this.From != null)
                    hashCode = hashCode * 59 + this.From.GetHashCode();
                if (this.FromCallerId != null)
                    hashCode = hashCode * 59 + this.FromCallerId.GetHashCode();
                if (this.Listened != null)
                    hashCode = hashCode * 59 + this.Listened.GetHashCode();
                if (this.MerchantId != null)
                    hashCode = hashCode * 59 + this.MerchantId.GetHashCode();
                if (this.RecordingSid != null)
                    hashCode = hashCode * 59 + this.RecordingSid.GetHashCode();
                if (this.RecordingSizeBytes != null)
                    hashCode = hashCode * 59 + this.RecordingSizeBytes.GetHashCode();
                if (this.RecordingStatus != null)
                    hashCode = hashCode * 59 + this.RecordingStatus.GetHashCode();
                if (this.VoicemailDts != null)
                    hashCode = hashCode * 59 + this.VoicemailDts.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
