/*
 * UltraCart Rest API V2
 *
 * UltraCart REST API Version 2
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@ultracart.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = com.ultracart.admin.v2.Client.OpenAPIDateConverter;

namespace com.ultracart.admin.v2.Model
{
    /// <summary>
    /// ConversationVirtualAgentCapabilities
    /// </summary>
    [DataContract]
    public partial class ConversationVirtualAgentCapabilities :  IEquatable<ConversationVirtualAgentCapabilities>, IValidatableObject
    {
        /// <summary>
        /// Channel to use to open the support ticket
        /// </summary>
        /// <value>Channel to use to open the support ticket</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum OpenSupportTicketChannelEnum
        {
            /// <summary>
            /// Enum None for value: none
            /// </summary>
            [EnumMember(Value = "none")]
            None = 1,

            /// <summary>
            /// Enum Email for value: email
            /// </summary>
            [EnumMember(Value = "email")]
            Email = 2,

            /// <summary>
            /// Enum Ultracarttask for value: ultracart_task
            /// </summary>
            [EnumMember(Value = "ultracart_task")]
            Ultracarttask = 3,

            /// <summary>
            /// Enum Zohodeskticket for value: zoho_desk_ticket
            /// </summary>
            [EnumMember(Value = "zoho_desk_ticket")]
            Zohodeskticket = 4

        }

        /// <summary>
        /// Channel to use to open the support ticket
        /// </summary>
        /// <value>Channel to use to open the support ticket</value>
        [DataMember(Name="open_support_ticket_channel", EmitDefaultValue=false)]
        public OpenSupportTicketChannelEnum? OpenSupportTicketChannel { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="ConversationVirtualAgentCapabilities" /> class.
        /// </summary>
        /// <param name="cancelSubscription">cancelSubscription.</param>
        /// <param name="delaySubscription">delaySubscription.</param>
        /// <param name="lookupOrderInformation">lookupOrderInformation.</param>
        /// <param name="lookupSubscriptionInformation">lookupSubscriptionInformation.</param>
        /// <param name="openSupportTicket">openSupportTicket.</param>
        /// <param name="openSupportTicketChannel">Channel to use to open the support ticket.</param>
        /// <param name="openSupportTicketChannelEmail">Email to send support ticket to.</param>
        /// <param name="openSupportTicketZohoDeskDepartmentId">Department ID to open a Zoho Desk ticket for.</param>
        /// <param name="pauseSubscription">pauseSubscription.</param>
        /// <param name="resumeSubscription">resumeSubscription.</param>
        /// <param name="transferChatToLiveAgent">transferChatToLiveAgent.</param>
        /// <param name="updateSubscriptionCreditCard">updateSubscriptionCreditCard.</param>
        /// <param name="zohoDeskAvailable">True if Zoho Desk is connected to UltraCart.</param>
        /// <param name="zohoDeskDepartments">Array of Zoho Desk Department if zoho desk is connected to UltraCart.</param>
        public ConversationVirtualAgentCapabilities(bool cancelSubscription = default(bool), bool delaySubscription = default(bool), bool lookupOrderInformation = default(bool), bool lookupSubscriptionInformation = default(bool), bool openSupportTicket = default(bool), OpenSupportTicketChannelEnum? openSupportTicketChannel = default(OpenSupportTicketChannelEnum?), string openSupportTicketChannelEmail = default(string), string openSupportTicketZohoDeskDepartmentId = default(string), bool pauseSubscription = default(bool), bool resumeSubscription = default(bool), bool transferChatToLiveAgent = default(bool), bool updateSubscriptionCreditCard = default(bool), bool zohoDeskAvailable = default(bool), List<ConversationVirtualAgentCapabilityZohoDeskDepartment> zohoDeskDepartments = default(List<ConversationVirtualAgentCapabilityZohoDeskDepartment>))
        {
            this.CancelSubscription = cancelSubscription;
            this.DelaySubscription = delaySubscription;
            this.LookupOrderInformation = lookupOrderInformation;
            this.LookupSubscriptionInformation = lookupSubscriptionInformation;
            this.OpenSupportTicket = openSupportTicket;
            this.OpenSupportTicketChannel = openSupportTicketChannel;
            this.OpenSupportTicketChannelEmail = openSupportTicketChannelEmail;
            this.OpenSupportTicketZohoDeskDepartmentId = openSupportTicketZohoDeskDepartmentId;
            this.PauseSubscription = pauseSubscription;
            this.ResumeSubscription = resumeSubscription;
            this.TransferChatToLiveAgent = transferChatToLiveAgent;
            this.UpdateSubscriptionCreditCard = updateSubscriptionCreditCard;
            this.ZohoDeskAvailable = zohoDeskAvailable;
            this.ZohoDeskDepartments = zohoDeskDepartments;
        }

        /// <summary>
        /// Gets or Sets CancelSubscription
        /// </summary>
        [DataMember(Name="cancel_subscription", EmitDefaultValue=false)]
        public bool CancelSubscription { get; set; }

        /// <summary>
        /// Gets or Sets DelaySubscription
        /// </summary>
        [DataMember(Name="delay_subscription", EmitDefaultValue=false)]
        public bool DelaySubscription { get; set; }

        /// <summary>
        /// Gets or Sets LookupOrderInformation
        /// </summary>
        [DataMember(Name="lookup_order_information", EmitDefaultValue=false)]
        public bool LookupOrderInformation { get; set; }

        /// <summary>
        /// Gets or Sets LookupSubscriptionInformation
        /// </summary>
        [DataMember(Name="lookup_subscription_information", EmitDefaultValue=false)]
        public bool LookupSubscriptionInformation { get; set; }

        /// <summary>
        /// Gets or Sets OpenSupportTicket
        /// </summary>
        [DataMember(Name="open_support_ticket", EmitDefaultValue=false)]
        public bool OpenSupportTicket { get; set; }


        /// <summary>
        /// Email to send support ticket to
        /// </summary>
        /// <value>Email to send support ticket to</value>
        [DataMember(Name="open_support_ticket_channel_email", EmitDefaultValue=false)]
        public string OpenSupportTicketChannelEmail { get; set; }

        /// <summary>
        /// Department ID to open a Zoho Desk ticket for
        /// </summary>
        /// <value>Department ID to open a Zoho Desk ticket for</value>
        [DataMember(Name="open_support_ticket_zoho_desk_department_id", EmitDefaultValue=false)]
        public string OpenSupportTicketZohoDeskDepartmentId { get; set; }

        /// <summary>
        /// Gets or Sets PauseSubscription
        /// </summary>
        [DataMember(Name="pause_subscription", EmitDefaultValue=false)]
        public bool PauseSubscription { get; set; }

        /// <summary>
        /// Gets or Sets ResumeSubscription
        /// </summary>
        [DataMember(Name="resume_subscription", EmitDefaultValue=false)]
        public bool ResumeSubscription { get; set; }

        /// <summary>
        /// Gets or Sets TransferChatToLiveAgent
        /// </summary>
        [DataMember(Name="transfer_chat_to_live_agent", EmitDefaultValue=false)]
        public bool TransferChatToLiveAgent { get; set; }

        /// <summary>
        /// Gets or Sets UpdateSubscriptionCreditCard
        /// </summary>
        [DataMember(Name="update_subscription_credit_card", EmitDefaultValue=false)]
        public bool UpdateSubscriptionCreditCard { get; set; }

        /// <summary>
        /// True if Zoho Desk is connected to UltraCart
        /// </summary>
        /// <value>True if Zoho Desk is connected to UltraCart</value>
        [DataMember(Name="zoho_desk_available", EmitDefaultValue=false)]
        public bool ZohoDeskAvailable { get; set; }

        /// <summary>
        /// Array of Zoho Desk Department if zoho desk is connected to UltraCart
        /// </summary>
        /// <value>Array of Zoho Desk Department if zoho desk is connected to UltraCart</value>
        [DataMember(Name="zoho_desk_departments", EmitDefaultValue=false)]
        public List<ConversationVirtualAgentCapabilityZohoDeskDepartment> ZohoDeskDepartments { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ConversationVirtualAgentCapabilities {\n");
            sb.Append("  CancelSubscription: ").Append(CancelSubscription).Append("\n");
            sb.Append("  DelaySubscription: ").Append(DelaySubscription).Append("\n");
            sb.Append("  LookupOrderInformation: ").Append(LookupOrderInformation).Append("\n");
            sb.Append("  LookupSubscriptionInformation: ").Append(LookupSubscriptionInformation).Append("\n");
            sb.Append("  OpenSupportTicket: ").Append(OpenSupportTicket).Append("\n");
            sb.Append("  OpenSupportTicketChannel: ").Append(OpenSupportTicketChannel).Append("\n");
            sb.Append("  OpenSupportTicketChannelEmail: ").Append(OpenSupportTicketChannelEmail).Append("\n");
            sb.Append("  OpenSupportTicketZohoDeskDepartmentId: ").Append(OpenSupportTicketZohoDeskDepartmentId).Append("\n");
            sb.Append("  PauseSubscription: ").Append(PauseSubscription).Append("\n");
            sb.Append("  ResumeSubscription: ").Append(ResumeSubscription).Append("\n");
            sb.Append("  TransferChatToLiveAgent: ").Append(TransferChatToLiveAgent).Append("\n");
            sb.Append("  UpdateSubscriptionCreditCard: ").Append(UpdateSubscriptionCreditCard).Append("\n");
            sb.Append("  ZohoDeskAvailable: ").Append(ZohoDeskAvailable).Append("\n");
            sb.Append("  ZohoDeskDepartments: ").Append(ZohoDeskDepartments).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ConversationVirtualAgentCapabilities);
        }

        /// <summary>
        /// Returns true if ConversationVirtualAgentCapabilities instances are equal
        /// </summary>
        /// <param name="input">Instance of ConversationVirtualAgentCapabilities to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ConversationVirtualAgentCapabilities input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.CancelSubscription == input.CancelSubscription ||
                    (this.CancelSubscription != null &&
                    this.CancelSubscription.Equals(input.CancelSubscription))
                ) && 
                (
                    this.DelaySubscription == input.DelaySubscription ||
                    (this.DelaySubscription != null &&
                    this.DelaySubscription.Equals(input.DelaySubscription))
                ) && 
                (
                    this.LookupOrderInformation == input.LookupOrderInformation ||
                    (this.LookupOrderInformation != null &&
                    this.LookupOrderInformation.Equals(input.LookupOrderInformation))
                ) && 
                (
                    this.LookupSubscriptionInformation == input.LookupSubscriptionInformation ||
                    (this.LookupSubscriptionInformation != null &&
                    this.LookupSubscriptionInformation.Equals(input.LookupSubscriptionInformation))
                ) && 
                (
                    this.OpenSupportTicket == input.OpenSupportTicket ||
                    (this.OpenSupportTicket != null &&
                    this.OpenSupportTicket.Equals(input.OpenSupportTicket))
                ) && 
                (
                    this.OpenSupportTicketChannel == input.OpenSupportTicketChannel ||
                    (this.OpenSupportTicketChannel != null &&
                    this.OpenSupportTicketChannel.Equals(input.OpenSupportTicketChannel))
                ) && 
                (
                    this.OpenSupportTicketChannelEmail == input.OpenSupportTicketChannelEmail ||
                    (this.OpenSupportTicketChannelEmail != null &&
                    this.OpenSupportTicketChannelEmail.Equals(input.OpenSupportTicketChannelEmail))
                ) && 
                (
                    this.OpenSupportTicketZohoDeskDepartmentId == input.OpenSupportTicketZohoDeskDepartmentId ||
                    (this.OpenSupportTicketZohoDeskDepartmentId != null &&
                    this.OpenSupportTicketZohoDeskDepartmentId.Equals(input.OpenSupportTicketZohoDeskDepartmentId))
                ) && 
                (
                    this.PauseSubscription == input.PauseSubscription ||
                    (this.PauseSubscription != null &&
                    this.PauseSubscription.Equals(input.PauseSubscription))
                ) && 
                (
                    this.ResumeSubscription == input.ResumeSubscription ||
                    (this.ResumeSubscription != null &&
                    this.ResumeSubscription.Equals(input.ResumeSubscription))
                ) && 
                (
                    this.TransferChatToLiveAgent == input.TransferChatToLiveAgent ||
                    (this.TransferChatToLiveAgent != null &&
                    this.TransferChatToLiveAgent.Equals(input.TransferChatToLiveAgent))
                ) && 
                (
                    this.UpdateSubscriptionCreditCard == input.UpdateSubscriptionCreditCard ||
                    (this.UpdateSubscriptionCreditCard != null &&
                    this.UpdateSubscriptionCreditCard.Equals(input.UpdateSubscriptionCreditCard))
                ) && 
                (
                    this.ZohoDeskAvailable == input.ZohoDeskAvailable ||
                    (this.ZohoDeskAvailable != null &&
                    this.ZohoDeskAvailable.Equals(input.ZohoDeskAvailable))
                ) && 
                (
                    this.ZohoDeskDepartments == input.ZohoDeskDepartments ||
                    this.ZohoDeskDepartments != null &&
                    input.ZohoDeskDepartments != null &&
                    this.ZohoDeskDepartments.SequenceEqual(input.ZohoDeskDepartments)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.CancelSubscription != null)
                    hashCode = hashCode * 59 + this.CancelSubscription.GetHashCode();
                if (this.DelaySubscription != null)
                    hashCode = hashCode * 59 + this.DelaySubscription.GetHashCode();
                if (this.LookupOrderInformation != null)
                    hashCode = hashCode * 59 + this.LookupOrderInformation.GetHashCode();
                if (this.LookupSubscriptionInformation != null)
                    hashCode = hashCode * 59 + this.LookupSubscriptionInformation.GetHashCode();
                if (this.OpenSupportTicket != null)
                    hashCode = hashCode * 59 + this.OpenSupportTicket.GetHashCode();
                if (this.OpenSupportTicketChannel != null)
                    hashCode = hashCode * 59 + this.OpenSupportTicketChannel.GetHashCode();
                if (this.OpenSupportTicketChannelEmail != null)
                    hashCode = hashCode * 59 + this.OpenSupportTicketChannelEmail.GetHashCode();
                if (this.OpenSupportTicketZohoDeskDepartmentId != null)
                    hashCode = hashCode * 59 + this.OpenSupportTicketZohoDeskDepartmentId.GetHashCode();
                if (this.PauseSubscription != null)
                    hashCode = hashCode * 59 + this.PauseSubscription.GetHashCode();
                if (this.ResumeSubscription != null)
                    hashCode = hashCode * 59 + this.ResumeSubscription.GetHashCode();
                if (this.TransferChatToLiveAgent != null)
                    hashCode = hashCode * 59 + this.TransferChatToLiveAgent.GetHashCode();
                if (this.UpdateSubscriptionCreditCard != null)
                    hashCode = hashCode * 59 + this.UpdateSubscriptionCreditCard.GetHashCode();
                if (this.ZohoDeskAvailable != null)
                    hashCode = hashCode * 59 + this.ZohoDeskAvailable.GetHashCode();
                if (this.ZohoDeskDepartments != null)
                    hashCode = hashCode * 59 + this.ZohoDeskDepartments.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
