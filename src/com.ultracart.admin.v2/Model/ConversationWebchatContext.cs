/* 
 * UltraCart Rest API V2
 *
 * UltraCart REST API Version 2
 *
 * OpenAPI spec version: 2.0.0
 * Contact: support@ultracart.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = com.ultracart.admin.v2.Client.SwaggerDateConverter;

namespace com.ultracart.admin.v2.Model
{
    /// <summary>
    /// ConversationWebchatContext
    /// </summary>
    [DataContract]
    public partial class ConversationWebchatContext :  IEquatable<ConversationWebchatContext>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ConversationWebchatContext" /> class.
        /// </summary>
        /// <param name="cart">cart.</param>
        /// <param name="currentUrl">currentUrl.</param>
        /// <param name="pageView">pageView.</param>
        /// <param name="sessionStart">sessionStart.</param>
        /// <param name="sessionUtm">sessionUtm.</param>
        public ConversationWebchatContext(Cart cart = default(Cart), string currentUrl = default(string), List<HitPageView> pageView = default(List<HitPageView>), HitSessionStart sessionStart = default(HitSessionStart), HitSessionUtm sessionUtm = default(HitSessionUtm))
        {
            this.Cart = cart;
            this.CurrentUrl = currentUrl;
            this.PageView = pageView;
            this.SessionStart = sessionStart;
            this.SessionUtm = sessionUtm;
        }
        
        /// <summary>
        /// Gets or Sets Cart
        /// </summary>
        [DataMember(Name="cart", EmitDefaultValue=false)]
        public Cart Cart { get; set; }

        /// <summary>
        /// Gets or Sets CurrentUrl
        /// </summary>
        [DataMember(Name="current_url", EmitDefaultValue=false)]
        public string CurrentUrl { get; set; }

        /// <summary>
        /// Gets or Sets PageView
        /// </summary>
        [DataMember(Name="page_view", EmitDefaultValue=false)]
        public List<HitPageView> PageView { get; set; }

        /// <summary>
        /// Gets or Sets SessionStart
        /// </summary>
        [DataMember(Name="session_start", EmitDefaultValue=false)]
        public HitSessionStart SessionStart { get; set; }

        /// <summary>
        /// Gets or Sets SessionUtm
        /// </summary>
        [DataMember(Name="session_utm", EmitDefaultValue=false)]
        public HitSessionUtm SessionUtm { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ConversationWebchatContext {\n");
            sb.Append("  Cart: ").Append(Cart).Append("\n");
            sb.Append("  CurrentUrl: ").Append(CurrentUrl).Append("\n");
            sb.Append("  PageView: ").Append(PageView).Append("\n");
            sb.Append("  SessionStart: ").Append(SessionStart).Append("\n");
            sb.Append("  SessionUtm: ").Append(SessionUtm).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ConversationWebchatContext);
        }

        /// <summary>
        /// Returns true if ConversationWebchatContext instances are equal
        /// </summary>
        /// <param name="input">Instance of ConversationWebchatContext to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ConversationWebchatContext input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Cart == input.Cart ||
                    (this.Cart != null &&
                    this.Cart.Equals(input.Cart))
                ) && 
                (
                    this.CurrentUrl == input.CurrentUrl ||
                    (this.CurrentUrl != null &&
                    this.CurrentUrl.Equals(input.CurrentUrl))
                ) && 
                (
                    this.PageView == input.PageView ||
                    this.PageView != null &&
                    this.PageView.SequenceEqual(input.PageView)
                ) && 
                (
                    this.SessionStart == input.SessionStart ||
                    (this.SessionStart != null &&
                    this.SessionStart.Equals(input.SessionStart))
                ) && 
                (
                    this.SessionUtm == input.SessionUtm ||
                    (this.SessionUtm != null &&
                    this.SessionUtm.Equals(input.SessionUtm))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Cart != null)
                    hashCode = hashCode * 59 + this.Cart.GetHashCode();
                if (this.CurrentUrl != null)
                    hashCode = hashCode * 59 + this.CurrentUrl.GetHashCode();
                if (this.PageView != null)
                    hashCode = hashCode * 59 + this.PageView.GetHashCode();
                if (this.SessionStart != null)
                    hashCode = hashCode * 59 + this.SessionStart.GetHashCode();
                if (this.SessionUtm != null)
                    hashCode = hashCode * 59 + this.SessionUtm.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
