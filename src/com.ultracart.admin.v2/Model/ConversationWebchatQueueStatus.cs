/*
 * UltraCart Rest API V2
 *
 * UltraCart REST API Version 2
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@ultracart.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = com.ultracart.admin.v2.Client.OpenAPIDateConverter;

namespace com.ultracart.admin.v2.Model
{
    /// <summary>
    /// ConversationWebchatQueueStatus
    /// </summary>
    [DataContract]
    public partial class ConversationWebchatQueueStatus :  IEquatable<ConversationWebchatQueueStatus>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ConversationWebchatQueueStatus" /> class.
        /// </summary>
        /// <param name="agentAvailableCount">agentAvailableCount.</param>
        /// <param name="agentBusyCount">agentBusyCount.</param>
        /// <param name="agentCount">agentCount.</param>
        /// <param name="agentUnavailableCount">agentUnavailableCount.</param>
        /// <param name="agents">agents.</param>
        /// <param name="customerAbandonCount">customerAbandonCount.</param>
        /// <param name="customerActiveCount">customerActiveCount.</param>
        /// <param name="customerAverageAbandonTimeSeconds">customerAverageAbandonTimeSeconds.</param>
        /// <param name="customerAverageChatTimeSeconds">customerAverageChatTimeSeconds.</param>
        /// <param name="customerAverageHoldTimeSeconds">customerAverageHoldTimeSeconds.</param>
        /// <param name="customerWaitingCount">customerWaitingCount.</param>
        /// <param name="customerWaitingJoinDts">Date/time that the oldest person joined the queue.</param>
        /// <param name="queueEntries">queueEntries.</param>
        /// <param name="queueName">queueName.</param>
        public ConversationWebchatQueueStatus(int agentAvailableCount = default(int), int agentBusyCount = default(int), int agentCount = default(int), int agentUnavailableCount = default(int), List<ConversationWebchatQueueStatusAgent> agents = default(List<ConversationWebchatQueueStatusAgent>), int customerAbandonCount = default(int), int customerActiveCount = default(int), int customerAverageAbandonTimeSeconds = default(int), int customerAverageChatTimeSeconds = default(int), int customerAverageHoldTimeSeconds = default(int), int customerWaitingCount = default(int), string customerWaitingJoinDts = default(string), List<ConversationWebchatQueueStatusQueueEntry> queueEntries = default(List<ConversationWebchatQueueStatusQueueEntry>), string queueName = default(string))
        {
            this.AgentAvailableCount = agentAvailableCount;
            this.AgentBusyCount = agentBusyCount;
            this.AgentCount = agentCount;
            this.AgentUnavailableCount = agentUnavailableCount;
            this.Agents = agents;
            this.CustomerAbandonCount = customerAbandonCount;
            this.CustomerActiveCount = customerActiveCount;
            this.CustomerAverageAbandonTimeSeconds = customerAverageAbandonTimeSeconds;
            this.CustomerAverageChatTimeSeconds = customerAverageChatTimeSeconds;
            this.CustomerAverageHoldTimeSeconds = customerAverageHoldTimeSeconds;
            this.CustomerWaitingCount = customerWaitingCount;
            this.CustomerWaitingJoinDts = customerWaitingJoinDts;
            this.QueueEntries = queueEntries;
            this.QueueName = queueName;
        }

        /// <summary>
        /// Gets or Sets AgentAvailableCount
        /// </summary>
        [DataMember(Name="agent_available_count", EmitDefaultValue=false)]
        public int AgentAvailableCount { get; set; }

        /// <summary>
        /// Gets or Sets AgentBusyCount
        /// </summary>
        [DataMember(Name="agent_busy_count", EmitDefaultValue=false)]
        public int AgentBusyCount { get; set; }

        /// <summary>
        /// Gets or Sets AgentCount
        /// </summary>
        [DataMember(Name="agent_count", EmitDefaultValue=false)]
        public int AgentCount { get; set; }

        /// <summary>
        /// Gets or Sets AgentUnavailableCount
        /// </summary>
        [DataMember(Name="agent_unavailable_count", EmitDefaultValue=false)]
        public int AgentUnavailableCount { get; set; }

        /// <summary>
        /// Gets or Sets Agents
        /// </summary>
        [DataMember(Name="agents", EmitDefaultValue=false)]
        public List<ConversationWebchatQueueStatusAgent> Agents { get; set; }

        /// <summary>
        /// Gets or Sets CustomerAbandonCount
        /// </summary>
        [DataMember(Name="customer_abandon_count", EmitDefaultValue=false)]
        public int CustomerAbandonCount { get; set; }

        /// <summary>
        /// Gets or Sets CustomerActiveCount
        /// </summary>
        [DataMember(Name="customer_active_count", EmitDefaultValue=false)]
        public int CustomerActiveCount { get; set; }

        /// <summary>
        /// Gets or Sets CustomerAverageAbandonTimeSeconds
        /// </summary>
        [DataMember(Name="customer_average_abandon_time_seconds", EmitDefaultValue=false)]
        public int CustomerAverageAbandonTimeSeconds { get; set; }

        /// <summary>
        /// Gets or Sets CustomerAverageChatTimeSeconds
        /// </summary>
        [DataMember(Name="customer_average_chat_time_seconds", EmitDefaultValue=false)]
        public int CustomerAverageChatTimeSeconds { get; set; }

        /// <summary>
        /// Gets or Sets CustomerAverageHoldTimeSeconds
        /// </summary>
        [DataMember(Name="customer_average_hold_time_seconds", EmitDefaultValue=false)]
        public int CustomerAverageHoldTimeSeconds { get; set; }

        /// <summary>
        /// Gets or Sets CustomerWaitingCount
        /// </summary>
        [DataMember(Name="customer_waiting_count", EmitDefaultValue=false)]
        public int CustomerWaitingCount { get; set; }

        /// <summary>
        /// Date/time that the oldest person joined the queue
        /// </summary>
        /// <value>Date/time that the oldest person joined the queue</value>
        [DataMember(Name="customer_waiting_join_dts", EmitDefaultValue=false)]
        public string CustomerWaitingJoinDts { get; set; }

        /// <summary>
        /// Gets or Sets QueueEntries
        /// </summary>
        [DataMember(Name="queue_entries", EmitDefaultValue=false)]
        public List<ConversationWebchatQueueStatusQueueEntry> QueueEntries { get; set; }

        /// <summary>
        /// Gets or Sets QueueName
        /// </summary>
        [DataMember(Name="queue_name", EmitDefaultValue=false)]
        public string QueueName { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ConversationWebchatQueueStatus {\n");
            sb.Append("  AgentAvailableCount: ").Append(AgentAvailableCount).Append("\n");
            sb.Append("  AgentBusyCount: ").Append(AgentBusyCount).Append("\n");
            sb.Append("  AgentCount: ").Append(AgentCount).Append("\n");
            sb.Append("  AgentUnavailableCount: ").Append(AgentUnavailableCount).Append("\n");
            sb.Append("  Agents: ").Append(Agents).Append("\n");
            sb.Append("  CustomerAbandonCount: ").Append(CustomerAbandonCount).Append("\n");
            sb.Append("  CustomerActiveCount: ").Append(CustomerActiveCount).Append("\n");
            sb.Append("  CustomerAverageAbandonTimeSeconds: ").Append(CustomerAverageAbandonTimeSeconds).Append("\n");
            sb.Append("  CustomerAverageChatTimeSeconds: ").Append(CustomerAverageChatTimeSeconds).Append("\n");
            sb.Append("  CustomerAverageHoldTimeSeconds: ").Append(CustomerAverageHoldTimeSeconds).Append("\n");
            sb.Append("  CustomerWaitingCount: ").Append(CustomerWaitingCount).Append("\n");
            sb.Append("  CustomerWaitingJoinDts: ").Append(CustomerWaitingJoinDts).Append("\n");
            sb.Append("  QueueEntries: ").Append(QueueEntries).Append("\n");
            sb.Append("  QueueName: ").Append(QueueName).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ConversationWebchatQueueStatus);
        }

        /// <summary>
        /// Returns true if ConversationWebchatQueueStatus instances are equal
        /// </summary>
        /// <param name="input">Instance of ConversationWebchatQueueStatus to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ConversationWebchatQueueStatus input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.AgentAvailableCount == input.AgentAvailableCount ||
                    (this.AgentAvailableCount != null &&
                    this.AgentAvailableCount.Equals(input.AgentAvailableCount))
                ) && 
                (
                    this.AgentBusyCount == input.AgentBusyCount ||
                    (this.AgentBusyCount != null &&
                    this.AgentBusyCount.Equals(input.AgentBusyCount))
                ) && 
                (
                    this.AgentCount == input.AgentCount ||
                    (this.AgentCount != null &&
                    this.AgentCount.Equals(input.AgentCount))
                ) && 
                (
                    this.AgentUnavailableCount == input.AgentUnavailableCount ||
                    (this.AgentUnavailableCount != null &&
                    this.AgentUnavailableCount.Equals(input.AgentUnavailableCount))
                ) && 
                (
                    this.Agents == input.Agents ||
                    this.Agents != null &&
                    input.Agents != null &&
                    this.Agents.SequenceEqual(input.Agents)
                ) && 
                (
                    this.CustomerAbandonCount == input.CustomerAbandonCount ||
                    (this.CustomerAbandonCount != null &&
                    this.CustomerAbandonCount.Equals(input.CustomerAbandonCount))
                ) && 
                (
                    this.CustomerActiveCount == input.CustomerActiveCount ||
                    (this.CustomerActiveCount != null &&
                    this.CustomerActiveCount.Equals(input.CustomerActiveCount))
                ) && 
                (
                    this.CustomerAverageAbandonTimeSeconds == input.CustomerAverageAbandonTimeSeconds ||
                    (this.CustomerAverageAbandonTimeSeconds != null &&
                    this.CustomerAverageAbandonTimeSeconds.Equals(input.CustomerAverageAbandonTimeSeconds))
                ) && 
                (
                    this.CustomerAverageChatTimeSeconds == input.CustomerAverageChatTimeSeconds ||
                    (this.CustomerAverageChatTimeSeconds != null &&
                    this.CustomerAverageChatTimeSeconds.Equals(input.CustomerAverageChatTimeSeconds))
                ) && 
                (
                    this.CustomerAverageHoldTimeSeconds == input.CustomerAverageHoldTimeSeconds ||
                    (this.CustomerAverageHoldTimeSeconds != null &&
                    this.CustomerAverageHoldTimeSeconds.Equals(input.CustomerAverageHoldTimeSeconds))
                ) && 
                (
                    this.CustomerWaitingCount == input.CustomerWaitingCount ||
                    (this.CustomerWaitingCount != null &&
                    this.CustomerWaitingCount.Equals(input.CustomerWaitingCount))
                ) && 
                (
                    this.CustomerWaitingJoinDts == input.CustomerWaitingJoinDts ||
                    (this.CustomerWaitingJoinDts != null &&
                    this.CustomerWaitingJoinDts.Equals(input.CustomerWaitingJoinDts))
                ) && 
                (
                    this.QueueEntries == input.QueueEntries ||
                    this.QueueEntries != null &&
                    input.QueueEntries != null &&
                    this.QueueEntries.SequenceEqual(input.QueueEntries)
                ) && 
                (
                    this.QueueName == input.QueueName ||
                    (this.QueueName != null &&
                    this.QueueName.Equals(input.QueueName))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AgentAvailableCount != null)
                    hashCode = hashCode * 59 + this.AgentAvailableCount.GetHashCode();
                if (this.AgentBusyCount != null)
                    hashCode = hashCode * 59 + this.AgentBusyCount.GetHashCode();
                if (this.AgentCount != null)
                    hashCode = hashCode * 59 + this.AgentCount.GetHashCode();
                if (this.AgentUnavailableCount != null)
                    hashCode = hashCode * 59 + this.AgentUnavailableCount.GetHashCode();
                if (this.Agents != null)
                    hashCode = hashCode * 59 + this.Agents.GetHashCode();
                if (this.CustomerAbandonCount != null)
                    hashCode = hashCode * 59 + this.CustomerAbandonCount.GetHashCode();
                if (this.CustomerActiveCount != null)
                    hashCode = hashCode * 59 + this.CustomerActiveCount.GetHashCode();
                if (this.CustomerAverageAbandonTimeSeconds != null)
                    hashCode = hashCode * 59 + this.CustomerAverageAbandonTimeSeconds.GetHashCode();
                if (this.CustomerAverageChatTimeSeconds != null)
                    hashCode = hashCode * 59 + this.CustomerAverageChatTimeSeconds.GetHashCode();
                if (this.CustomerAverageHoldTimeSeconds != null)
                    hashCode = hashCode * 59 + this.CustomerAverageHoldTimeSeconds.GetHashCode();
                if (this.CustomerWaitingCount != null)
                    hashCode = hashCode * 59 + this.CustomerWaitingCount.GetHashCode();
                if (this.CustomerWaitingJoinDts != null)
                    hashCode = hashCode * 59 + this.CustomerWaitingJoinDts.GetHashCode();
                if (this.QueueEntries != null)
                    hashCode = hashCode * 59 + this.QueueEntries.GetHashCode();
                if (this.QueueName != null)
                    hashCode = hashCode * 59 + this.QueueName.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
