/*
 * UltraCart Rest API V2
 *
 * UltraCart REST API Version 2
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@ultracart.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = com.ultracart.admin.v2.Client.OpenAPIDateConverter;

namespace com.ultracart.admin.v2.Model
{
    /// <summary>
    /// ConversationWebsocketMessage
    /// </summary>
    [DataContract]
    public partial class ConversationWebsocketMessage :  IEquatable<ConversationWebsocketMessage>, IValidatableObject
    {
        /// <summary>
        /// Type of event
        /// </summary>
        /// <value>Type of event</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum EventTypeEnum
        {
            /// <summary>
            /// Enum Queueposition for value: queue position
            /// </summary>
            [EnumMember(Value = "queue position")]
            Queueposition = 1,

            /// <summary>
            /// Enum Webchatstartconversation for value: webchat start conversation
            /// </summary>
            [EnumMember(Value = "webchat start conversation")]
            Webchatstartconversation = 2,

            /// <summary>
            /// Enum Conversationclosed for value: conversation closed
            /// </summary>
            [EnumMember(Value = "conversation closed")]
            Conversationclosed = 3,

            /// <summary>
            /// Enum Newconversation for value: new conversation
            /// </summary>
            [EnumMember(Value = "new conversation")]
            Newconversation = 4,

            /// <summary>
            /// Enum Newmessage for value: new message
            /// </summary>
            [EnumMember(Value = "new message")]
            Newmessage = 5,

            /// <summary>
            /// Enum Updatedmessage for value: updated message
            /// </summary>
            [EnumMember(Value = "updated message")]
            Updatedmessage = 6

        }

        /// <summary>
        /// Type of event
        /// </summary>
        /// <value>Type of event</value>
        [DataMember(Name="event_type", EmitDefaultValue=false)]
        public EventTypeEnum? EventType { get; set; }
        /// <summary>
        /// Type of message
        /// </summary>
        /// <value>Type of message</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TypeEnum
        {
            /// <summary>
            /// Enum Message for value: message
            /// </summary>
            [EnumMember(Value = "message")]
            Message = 1,

            /// <summary>
            /// Enum Event for value: event
            /// </summary>
            [EnumMember(Value = "event")]
            Event = 2,

            /// <summary>
            /// Enum Ping for value: ping
            /// </summary>
            [EnumMember(Value = "ping")]
            Ping = 3

        }

        /// <summary>
        /// Type of message
        /// </summary>
        /// <value>Type of message</value>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public TypeEnum? Type { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="ConversationWebsocketMessage" /> class.
        /// </summary>
        /// <param name="conversationUuid">Conversation UUID if the websocket message is tied to a specific conversation.</param>
        /// <param name="eventConversationClosed">eventConversationClosed.</param>
        /// <param name="eventNewConversation">eventNewConversation.</param>
        /// <param name="eventNewMessage">eventNewMessage.</param>
        /// <param name="eventQueuePosition">eventQueuePosition.</param>
        /// <param name="eventType">Type of event.</param>
        /// <param name="eventUpdatedMessage">eventUpdatedMessage.</param>
        /// <param name="message">message.</param>
        /// <param name="type">Type of message.</param>
        public ConversationWebsocketMessage(string conversationUuid = default(string), ConversationSummary eventConversationClosed = default(ConversationSummary), ConversationSummary eventNewConversation = default(ConversationSummary), ConversationSummary eventNewMessage = default(ConversationSummary), ConversationEventQueuePosition eventQueuePosition = default(ConversationEventQueuePosition), EventTypeEnum? eventType = default(EventTypeEnum?), ConversationMessage eventUpdatedMessage = default(ConversationMessage), ConversationMessage message = default(ConversationMessage), TypeEnum? type = default(TypeEnum?))
        {
            this.ConversationUuid = conversationUuid;
            this.EventConversationClosed = eventConversationClosed;
            this.EventNewConversation = eventNewConversation;
            this.EventNewMessage = eventNewMessage;
            this.EventQueuePosition = eventQueuePosition;
            this.EventType = eventType;
            this.EventUpdatedMessage = eventUpdatedMessage;
            this.Message = message;
            this.Type = type;
        }

        /// <summary>
        /// Conversation UUID if the websocket message is tied to a specific conversation
        /// </summary>
        /// <value>Conversation UUID if the websocket message is tied to a specific conversation</value>
        [DataMember(Name="conversation_uuid", EmitDefaultValue=false)]
        public string ConversationUuid { get; set; }

        /// <summary>
        /// Gets or Sets EventConversationClosed
        /// </summary>
        [DataMember(Name="event_conversation_closed", EmitDefaultValue=false)]
        public ConversationSummary EventConversationClosed { get; set; }

        /// <summary>
        /// Gets or Sets EventNewConversation
        /// </summary>
        [DataMember(Name="event_new_conversation", EmitDefaultValue=false)]
        public ConversationSummary EventNewConversation { get; set; }

        /// <summary>
        /// Gets or Sets EventNewMessage
        /// </summary>
        [DataMember(Name="event_new_message", EmitDefaultValue=false)]
        public ConversationSummary EventNewMessage { get; set; }

        /// <summary>
        /// Gets or Sets EventQueuePosition
        /// </summary>
        [DataMember(Name="event_queue_position", EmitDefaultValue=false)]
        public ConversationEventQueuePosition EventQueuePosition { get; set; }


        /// <summary>
        /// Gets or Sets EventUpdatedMessage
        /// </summary>
        [DataMember(Name="event_updated_message", EmitDefaultValue=false)]
        public ConversationMessage EventUpdatedMessage { get; set; }

        /// <summary>
        /// Gets or Sets Message
        /// </summary>
        [DataMember(Name="message", EmitDefaultValue=false)]
        public ConversationMessage Message { get; set; }


        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ConversationWebsocketMessage {\n");
            sb.Append("  ConversationUuid: ").Append(ConversationUuid).Append("\n");
            sb.Append("  EventConversationClosed: ").Append(EventConversationClosed).Append("\n");
            sb.Append("  EventNewConversation: ").Append(EventNewConversation).Append("\n");
            sb.Append("  EventNewMessage: ").Append(EventNewMessage).Append("\n");
            sb.Append("  EventQueuePosition: ").Append(EventQueuePosition).Append("\n");
            sb.Append("  EventType: ").Append(EventType).Append("\n");
            sb.Append("  EventUpdatedMessage: ").Append(EventUpdatedMessage).Append("\n");
            sb.Append("  Message: ").Append(Message).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ConversationWebsocketMessage);
        }

        /// <summary>
        /// Returns true if ConversationWebsocketMessage instances are equal
        /// </summary>
        /// <param name="input">Instance of ConversationWebsocketMessage to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ConversationWebsocketMessage input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ConversationUuid == input.ConversationUuid ||
                    (this.ConversationUuid != null &&
                    this.ConversationUuid.Equals(input.ConversationUuid))
                ) && 
                (
                    this.EventConversationClosed == input.EventConversationClosed ||
                    (this.EventConversationClosed != null &&
                    this.EventConversationClosed.Equals(input.EventConversationClosed))
                ) && 
                (
                    this.EventNewConversation == input.EventNewConversation ||
                    (this.EventNewConversation != null &&
                    this.EventNewConversation.Equals(input.EventNewConversation))
                ) && 
                (
                    this.EventNewMessage == input.EventNewMessage ||
                    (this.EventNewMessage != null &&
                    this.EventNewMessage.Equals(input.EventNewMessage))
                ) && 
                (
                    this.EventQueuePosition == input.EventQueuePosition ||
                    (this.EventQueuePosition != null &&
                    this.EventQueuePosition.Equals(input.EventQueuePosition))
                ) && 
                (
                    this.EventType == input.EventType ||
                    (this.EventType != null &&
                    this.EventType.Equals(input.EventType))
                ) && 
                (
                    this.EventUpdatedMessage == input.EventUpdatedMessage ||
                    (this.EventUpdatedMessage != null &&
                    this.EventUpdatedMessage.Equals(input.EventUpdatedMessage))
                ) && 
                (
                    this.Message == input.Message ||
                    (this.Message != null &&
                    this.Message.Equals(input.Message))
                ) && 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ConversationUuid != null)
                    hashCode = hashCode * 59 + this.ConversationUuid.GetHashCode();
                if (this.EventConversationClosed != null)
                    hashCode = hashCode * 59 + this.EventConversationClosed.GetHashCode();
                if (this.EventNewConversation != null)
                    hashCode = hashCode * 59 + this.EventNewConversation.GetHashCode();
                if (this.EventNewMessage != null)
                    hashCode = hashCode * 59 + this.EventNewMessage.GetHashCode();
                if (this.EventQueuePosition != null)
                    hashCode = hashCode * 59 + this.EventQueuePosition.GetHashCode();
                if (this.EventType != null)
                    hashCode = hashCode * 59 + this.EventType.GetHashCode();
                if (this.EventUpdatedMessage != null)
                    hashCode = hashCode * 59 + this.EventUpdatedMessage.GetHashCode();
                if (this.Message != null)
                    hashCode = hashCode * 59 + this.Message.GetHashCode();
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
