/* 
 * UltraCart Rest API V2
 *
 * UltraCart REST API Version 2
 *
 * OpenAPI spec version: 2.0.0
 * Contact: support@ultracart.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = com.ultracart.admin.v2.Client.SwaggerDateConverter;

namespace com.ultracart.admin.v2.Model
{
    /// <summary>
    /// CouponItemSearchResult
    /// </summary>
    [DataContract]
    public partial class CouponItemSearchResult :  IEquatable<CouponItemSearchResult>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CouponItemSearchResult" /> class.
        /// </summary>
        /// <param name="cost">The cost of this item..</param>
        /// <param name="description">A human readable description of this item..</param>
        /// <param name="manufacturerName">The manufacturer of this item..</param>
        /// <param name="manufacturerSku">The manufacturer sku of this item..</param>
        /// <param name="merchantItemId">The merchant item identifier, which is unique for this merchant, but not across all of UltraCart..</param>
        /// <param name="merchantItemOid">The unique internal identifier used by UltraCart to manage this item..</param>
        /// <param name="score">The search score of this item.  Larger scores mean more accurate matches against the search term..</param>
        /// <param name="thumbnailUrl">A url for displaying a thumbnail of this item.</param>
        public CouponItemSearchResult(string cost = default(string), string description = default(string), string manufacturerName = default(string), string manufacturerSku = default(string), string merchantItemId = default(string), int? merchantItemOid = default(int?), string score = default(string), string thumbnailUrl = default(string))
        {
            this.Cost = cost;
            this.Description = description;
            this.ManufacturerName = manufacturerName;
            this.ManufacturerSku = manufacturerSku;
            this.MerchantItemId = merchantItemId;
            this.MerchantItemOid = merchantItemOid;
            this.Score = score;
            this.ThumbnailUrl = thumbnailUrl;
        }
        
        /// <summary>
        /// The cost of this item.
        /// </summary>
        /// <value>The cost of this item.</value>
        [DataMember(Name="cost", EmitDefaultValue=false)]
        public string Cost { get; set; }

        /// <summary>
        /// A human readable description of this item.
        /// </summary>
        /// <value>A human readable description of this item.</value>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }

        /// <summary>
        /// The manufacturer of this item.
        /// </summary>
        /// <value>The manufacturer of this item.</value>
        [DataMember(Name="manufacturer_name", EmitDefaultValue=false)]
        public string ManufacturerName { get; set; }

        /// <summary>
        /// The manufacturer sku of this item.
        /// </summary>
        /// <value>The manufacturer sku of this item.</value>
        [DataMember(Name="manufacturer_sku", EmitDefaultValue=false)]
        public string ManufacturerSku { get; set; }

        /// <summary>
        /// The merchant item identifier, which is unique for this merchant, but not across all of UltraCart.
        /// </summary>
        /// <value>The merchant item identifier, which is unique for this merchant, but not across all of UltraCart.</value>
        [DataMember(Name="merchant_item_id", EmitDefaultValue=false)]
        public string MerchantItemId { get; set; }

        /// <summary>
        /// The unique internal identifier used by UltraCart to manage this item.
        /// </summary>
        /// <value>The unique internal identifier used by UltraCart to manage this item.</value>
        [DataMember(Name="merchant_item_oid", EmitDefaultValue=false)]
        public int? MerchantItemOid { get; set; }

        /// <summary>
        /// The search score of this item.  Larger scores mean more accurate matches against the search term.
        /// </summary>
        /// <value>The search score of this item.  Larger scores mean more accurate matches against the search term.</value>
        [DataMember(Name="score", EmitDefaultValue=false)]
        public string Score { get; set; }

        /// <summary>
        /// A url for displaying a thumbnail of this item
        /// </summary>
        /// <value>A url for displaying a thumbnail of this item</value>
        [DataMember(Name="thumbnail_url", EmitDefaultValue=false)]
        public string ThumbnailUrl { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CouponItemSearchResult {\n");
            sb.Append("  Cost: ").Append(Cost).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  ManufacturerName: ").Append(ManufacturerName).Append("\n");
            sb.Append("  ManufacturerSku: ").Append(ManufacturerSku).Append("\n");
            sb.Append("  MerchantItemId: ").Append(MerchantItemId).Append("\n");
            sb.Append("  MerchantItemOid: ").Append(MerchantItemOid).Append("\n");
            sb.Append("  Score: ").Append(Score).Append("\n");
            sb.Append("  ThumbnailUrl: ").Append(ThumbnailUrl).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CouponItemSearchResult);
        }

        /// <summary>
        /// Returns true if CouponItemSearchResult instances are equal
        /// </summary>
        /// <param name="input">Instance of CouponItemSearchResult to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CouponItemSearchResult input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Cost == input.Cost ||
                    (this.Cost != null &&
                    this.Cost.Equals(input.Cost))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.ManufacturerName == input.ManufacturerName ||
                    (this.ManufacturerName != null &&
                    this.ManufacturerName.Equals(input.ManufacturerName))
                ) && 
                (
                    this.ManufacturerSku == input.ManufacturerSku ||
                    (this.ManufacturerSku != null &&
                    this.ManufacturerSku.Equals(input.ManufacturerSku))
                ) && 
                (
                    this.MerchantItemId == input.MerchantItemId ||
                    (this.MerchantItemId != null &&
                    this.MerchantItemId.Equals(input.MerchantItemId))
                ) && 
                (
                    this.MerchantItemOid == input.MerchantItemOid ||
                    (this.MerchantItemOid != null &&
                    this.MerchantItemOid.Equals(input.MerchantItemOid))
                ) && 
                (
                    this.Score == input.Score ||
                    (this.Score != null &&
                    this.Score.Equals(input.Score))
                ) && 
                (
                    this.ThumbnailUrl == input.ThumbnailUrl ||
                    (this.ThumbnailUrl != null &&
                    this.ThumbnailUrl.Equals(input.ThumbnailUrl))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Cost != null)
                    hashCode = hashCode * 59 + this.Cost.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                if (this.ManufacturerName != null)
                    hashCode = hashCode * 59 + this.ManufacturerName.GetHashCode();
                if (this.ManufacturerSku != null)
                    hashCode = hashCode * 59 + this.ManufacturerSku.GetHashCode();
                if (this.MerchantItemId != null)
                    hashCode = hashCode * 59 + this.MerchantItemId.GetHashCode();
                if (this.MerchantItemOid != null)
                    hashCode = hashCode * 59 + this.MerchantItemOid.GetHashCode();
                if (this.Score != null)
                    hashCode = hashCode * 59 + this.Score.GetHashCode();
                if (this.ThumbnailUrl != null)
                    hashCode = hashCode * 59 + this.ThumbnailUrl.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
