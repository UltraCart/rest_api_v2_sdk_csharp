/*
 * UltraCart Rest API V2
 *
 * UltraCart REST API Version 2
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@ultracart.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = com.ultracart.admin.v2.Client.OpenAPIDateConverter;

namespace com.ultracart.admin.v2.Model
{
    /// <summary>
    /// CouponMoreLoyaltyPoints
    /// </summary>
    [DataContract]
    public partial class CouponMoreLoyaltyPoints :  IEquatable<CouponMoreLoyaltyPoints>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CouponMoreLoyaltyPoints" /> class.
        /// </summary>
        /// <param name="loyaltyPoints">The additional loyalty points.</param>
        public CouponMoreLoyaltyPoints(decimal loyaltyPoints = default(decimal))
        {
            this.LoyaltyPoints = loyaltyPoints;
        }

        /// <summary>
        /// The additional loyalty points
        /// </summary>
        /// <value>The additional loyalty points</value>
        [DataMember(Name="loyalty_points", EmitDefaultValue=false)]
        public decimal LoyaltyPoints { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CouponMoreLoyaltyPoints {\n");
            sb.Append("  LoyaltyPoints: ").Append(LoyaltyPoints).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CouponMoreLoyaltyPoints);
        }

        /// <summary>
        /// Returns true if CouponMoreLoyaltyPoints instances are equal
        /// </summary>
        /// <param name="input">Instance of CouponMoreLoyaltyPoints to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CouponMoreLoyaltyPoints input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.LoyaltyPoints == input.LoyaltyPoints ||
                    (this.LoyaltyPoints != null &&
                    this.LoyaltyPoints.Equals(input.LoyaltyPoints))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.LoyaltyPoints != null)
                    hashCode = hashCode * 59 + this.LoyaltyPoints.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
