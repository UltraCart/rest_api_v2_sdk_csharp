/* 
 * UltraCart Rest API V2
 *
 * UltraCart REST API Version 2
 *
 * OpenAPI spec version: 2.0.0
 * Contact: support@ultracart.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = com.ultracart.admin.v2.Client.SwaggerDateConverter;

namespace com.ultracart.admin.v2.Model
{
    /// <summary>
    /// CouponRestriction
    /// </summary>
    [DataContract]
    public partial class CouponRestriction :  IEquatable<CouponRestriction>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CouponRestriction" /> class.
        /// </summary>
        /// <param name="invalidForThis">invalidForThis.</param>
        /// <param name="name">name.</param>
        /// <param name="validForThis">validForThis.</param>
        /// <param name="validOnlyForThis">validOnlyForThis.</param>
        public CouponRestriction(bool? invalidForThis = default(bool?), string name = default(string), bool? validForThis = default(bool?), bool? validOnlyForThis = default(bool?))
        {
            this.InvalidForThis = invalidForThis;
            this.Name = name;
            this.ValidForThis = validForThis;
            this.ValidOnlyForThis = validOnlyForThis;
        }
        
        /// <summary>
        /// Gets or Sets InvalidForThis
        /// </summary>
        [DataMember(Name="invalidForThis", EmitDefaultValue=false)]
        public bool? InvalidForThis { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets ValidForThis
        /// </summary>
        [DataMember(Name="validForThis", EmitDefaultValue=false)]
        public bool? ValidForThis { get; set; }

        /// <summary>
        /// Gets or Sets ValidOnlyForThis
        /// </summary>
        [DataMember(Name="validOnlyForThis", EmitDefaultValue=false)]
        public bool? ValidOnlyForThis { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CouponRestriction {\n");
            sb.Append("  InvalidForThis: ").Append(InvalidForThis).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  ValidForThis: ").Append(ValidForThis).Append("\n");
            sb.Append("  ValidOnlyForThis: ").Append(ValidOnlyForThis).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CouponRestriction);
        }

        /// <summary>
        /// Returns true if CouponRestriction instances are equal
        /// </summary>
        /// <param name="input">Instance of CouponRestriction to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CouponRestriction input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.InvalidForThis == input.InvalidForThis ||
                    (this.InvalidForThis != null &&
                    this.InvalidForThis.Equals(input.InvalidForThis))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.ValidForThis == input.ValidForThis ||
                    (this.ValidForThis != null &&
                    this.ValidForThis.Equals(input.ValidForThis))
                ) && 
                (
                    this.ValidOnlyForThis == input.ValidOnlyForThis ||
                    (this.ValidOnlyForThis != null &&
                    this.ValidOnlyForThis.Equals(input.ValidOnlyForThis))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.InvalidForThis != null)
                    hashCode = hashCode * 59 + this.InvalidForThis.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.ValidForThis != null)
                    hashCode = hashCode * 59 + this.ValidForThis.GetHashCode();
                if (this.ValidOnlyForThis != null)
                    hashCode = hashCode * 59 + this.ValidOnlyForThis.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
