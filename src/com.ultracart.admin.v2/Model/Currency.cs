/* 
 * UltraCart Rest API V2
 *
 * UltraCart REST API Version 2
 *
 * OpenAPI spec version: 2.0.0
 * Contact: support@ultracart.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = com.ultracart.admin.v2.Client.SwaggerDateConverter;

namespace com.ultracart.admin.v2.Model
{
    /// <summary>
    /// Currency
    /// </summary>
    [DataContract]
    public partial class Currency :  IEquatable<Currency>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Currency" /> class.
        /// </summary>
        /// <param name="CurrencyCode">Currency code of the localized value.</param>
        /// <param name="ExchangeRate">Exchange rate used to localize.</param>
        /// <param name="Localized">Value localized to the customer.</param>
        /// <param name="LocalizedFormatted">Value localized and formatted for the customer.</param>
        /// <param name="Value">Value in base currency.</param>
        public Currency(string CurrencyCode = default(string), decimal? ExchangeRate = default(decimal?), decimal? Localized = default(decimal?), string LocalizedFormatted = default(string), decimal? Value = default(decimal?))
        {
            this.CurrencyCode = CurrencyCode;
            this.ExchangeRate = ExchangeRate;
            this.Localized = Localized;
            this.LocalizedFormatted = LocalizedFormatted;
            this.Value = Value;
        }
        
        /// <summary>
        /// Currency code of the localized value
        /// </summary>
        /// <value>Currency code of the localized value</value>
        [DataMember(Name="currency_code", EmitDefaultValue=false)]
        public string CurrencyCode { get; set; }

        /// <summary>
        /// Exchange rate used to localize
        /// </summary>
        /// <value>Exchange rate used to localize</value>
        [DataMember(Name="exchange_rate", EmitDefaultValue=false)]
        public decimal? ExchangeRate { get; set; }

        /// <summary>
        /// Value localized to the customer
        /// </summary>
        /// <value>Value localized to the customer</value>
        [DataMember(Name="localized", EmitDefaultValue=false)]
        public decimal? Localized { get; set; }

        /// <summary>
        /// Value localized and formatted for the customer
        /// </summary>
        /// <value>Value localized and formatted for the customer</value>
        [DataMember(Name="localized_formatted", EmitDefaultValue=false)]
        public string LocalizedFormatted { get; set; }

        /// <summary>
        /// Value in base currency
        /// </summary>
        /// <value>Value in base currency</value>
        [DataMember(Name="value", EmitDefaultValue=false)]
        public decimal? Value { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Currency {\n");
            sb.Append("  CurrencyCode: ").Append(CurrencyCode).Append("\n");
            sb.Append("  ExchangeRate: ").Append(ExchangeRate).Append("\n");
            sb.Append("  Localized: ").Append(Localized).Append("\n");
            sb.Append("  LocalizedFormatted: ").Append(LocalizedFormatted).Append("\n");
            sb.Append("  Value: ").Append(Value).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Currency);
        }

        /// <summary>
        /// Returns true if Currency instances are equal
        /// </summary>
        /// <param name="input">Instance of Currency to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Currency input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.CurrencyCode == input.CurrencyCode ||
                    (this.CurrencyCode != null &&
                    this.CurrencyCode.Equals(input.CurrencyCode))
                ) && 
                (
                    this.ExchangeRate == input.ExchangeRate ||
                    (this.ExchangeRate != null &&
                    this.ExchangeRate.Equals(input.ExchangeRate))
                ) && 
                (
                    this.Localized == input.Localized ||
                    (this.Localized != null &&
                    this.Localized.Equals(input.Localized))
                ) && 
                (
                    this.LocalizedFormatted == input.LocalizedFormatted ||
                    (this.LocalizedFormatted != null &&
                    this.LocalizedFormatted.Equals(input.LocalizedFormatted))
                ) && 
                (
                    this.Value == input.Value ||
                    (this.Value != null &&
                    this.Value.Equals(input.Value))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.CurrencyCode != null)
                    hashCode = hashCode * 59 + this.CurrencyCode.GetHashCode();
                if (this.ExchangeRate != null)
                    hashCode = hashCode * 59 + this.ExchangeRate.GetHashCode();
                if (this.Localized != null)
                    hashCode = hashCode * 59 + this.Localized.GetHashCode();
                if (this.LocalizedFormatted != null)
                    hashCode = hashCode * 59 + this.LocalizedFormatted.GetHashCode();
                if (this.Value != null)
                    hashCode = hashCode * 59 + this.Value.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
