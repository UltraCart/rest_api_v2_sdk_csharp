/*
 * UltraCart Rest API V2
 *
 * UltraCart REST API Version 2
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@ultracart.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = com.ultracart.admin.v2.Client.OpenAPIDateConverter;

namespace com.ultracart.admin.v2.Model
{
    /// <summary>
    /// CustomDashboard
    /// </summary>
    [DataContract]
    public partial class CustomDashboard :  IEquatable<CustomDashboard>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CustomDashboard" /> class.
        /// </summary>
        /// <param name="dataWarehouseCustomDashboardOid">dataWarehouseCustomDashboardOid.</param>
        /// <param name="merchantId">merchantId.</param>
        /// <param name="name">name.</param>
        /// <param name="pages">pages.</param>
        /// <param name="parameters">parameters.</param>
        public CustomDashboard(int dataWarehouseCustomDashboardOid = default(int), string merchantId = default(string), string name = default(string), List<CustomDashboardPage> pages = default(List<CustomDashboardPage>), List<CustomDashboardExecutionParameter> parameters = default(List<CustomDashboardExecutionParameter>))
        {
            this.DataWarehouseCustomDashboardOid = dataWarehouseCustomDashboardOid;
            this.MerchantId = merchantId;
            this.Name = name;
            this.Pages = pages;
            this.Parameters = parameters;
        }

        /// <summary>
        /// Gets or Sets DataWarehouseCustomDashboardOid
        /// </summary>
        [DataMember(Name="data_warehouse_custom_dashboard_oid", EmitDefaultValue=false)]
        public int DataWarehouseCustomDashboardOid { get; set; }

        /// <summary>
        /// Gets or Sets MerchantId
        /// </summary>
        [DataMember(Name="merchant_id", EmitDefaultValue=false)]
        public string MerchantId { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Pages
        /// </summary>
        [DataMember(Name="pages", EmitDefaultValue=false)]
        public List<CustomDashboardPage> Pages { get; set; }

        /// <summary>
        /// Gets or Sets Parameters
        /// </summary>
        [DataMember(Name="parameters", EmitDefaultValue=false)]
        public List<CustomDashboardExecutionParameter> Parameters { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CustomDashboard {\n");
            sb.Append("  DataWarehouseCustomDashboardOid: ").Append(DataWarehouseCustomDashboardOid).Append("\n");
            sb.Append("  MerchantId: ").Append(MerchantId).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Pages: ").Append(Pages).Append("\n");
            sb.Append("  Parameters: ").Append(Parameters).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CustomDashboard);
        }

        /// <summary>
        /// Returns true if CustomDashboard instances are equal
        /// </summary>
        /// <param name="input">Instance of CustomDashboard to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CustomDashboard input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.DataWarehouseCustomDashboardOid == input.DataWarehouseCustomDashboardOid ||
                    (this.DataWarehouseCustomDashboardOid != null &&
                    this.DataWarehouseCustomDashboardOid.Equals(input.DataWarehouseCustomDashboardOid))
                ) && 
                (
                    this.MerchantId == input.MerchantId ||
                    (this.MerchantId != null &&
                    this.MerchantId.Equals(input.MerchantId))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Pages == input.Pages ||
                    this.Pages != null &&
                    input.Pages != null &&
                    this.Pages.SequenceEqual(input.Pages)
                ) && 
                (
                    this.Parameters == input.Parameters ||
                    this.Parameters != null &&
                    input.Parameters != null &&
                    this.Parameters.SequenceEqual(input.Parameters)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.DataWarehouseCustomDashboardOid != null)
                    hashCode = hashCode * 59 + this.DataWarehouseCustomDashboardOid.GetHashCode();
                if (this.MerchantId != null)
                    hashCode = hashCode * 59 + this.MerchantId.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Pages != null)
                    hashCode = hashCode * 59 + this.Pages.GetHashCode();
                if (this.Parameters != null)
                    hashCode = hashCode * 59 + this.Parameters.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
