/*
 * UltraCart Rest API V2
 *
 * UltraCart REST API Version 2
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@ultracart.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = com.ultracart.admin.v2.Client.OpenAPIDateConverter;

namespace com.ultracart.admin.v2.Model
{
    /// <summary>
    /// CustomDashboardPageReport
    /// </summary>
    [DataContract]
    public partial class CustomDashboardPageReport :  IEquatable<CustomDashboardPageReport>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CustomDashboardPageReport" /> class.
        /// </summary>
        /// <param name="dataWarehouseReportConfigOid">dataWarehouseReportConfigOid.</param>
        /// <param name="gridHeight">gridHeight.</param>
        /// <param name="gridWidth">gridWidth.</param>
        /// <param name="gridX">gridX.</param>
        /// <param name="gridY">gridY.</param>
        public CustomDashboardPageReport(int dataWarehouseReportConfigOid = default(int), int gridHeight = default(int), int gridWidth = default(int), int gridX = default(int), int gridY = default(int))
        {
            this.DataWarehouseReportConfigOid = dataWarehouseReportConfigOid;
            this.GridHeight = gridHeight;
            this.GridWidth = gridWidth;
            this.GridX = gridX;
            this.GridY = gridY;
        }

        /// <summary>
        /// Gets or Sets DataWarehouseReportConfigOid
        /// </summary>
        [DataMember(Name="data_warehouse_report_config_oid", EmitDefaultValue=false)]
        public int DataWarehouseReportConfigOid { get; set; }

        /// <summary>
        /// Gets or Sets GridHeight
        /// </summary>
        [DataMember(Name="grid_height", EmitDefaultValue=false)]
        public int GridHeight { get; set; }

        /// <summary>
        /// Gets or Sets GridWidth
        /// </summary>
        [DataMember(Name="grid_width", EmitDefaultValue=false)]
        public int GridWidth { get; set; }

        /// <summary>
        /// Gets or Sets GridX
        /// </summary>
        [DataMember(Name="grid_x", EmitDefaultValue=false)]
        public int GridX { get; set; }

        /// <summary>
        /// Gets or Sets GridY
        /// </summary>
        [DataMember(Name="grid_y", EmitDefaultValue=false)]
        public int GridY { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CustomDashboardPageReport {\n");
            sb.Append("  DataWarehouseReportConfigOid: ").Append(DataWarehouseReportConfigOid).Append("\n");
            sb.Append("  GridHeight: ").Append(GridHeight).Append("\n");
            sb.Append("  GridWidth: ").Append(GridWidth).Append("\n");
            sb.Append("  GridX: ").Append(GridX).Append("\n");
            sb.Append("  GridY: ").Append(GridY).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CustomDashboardPageReport);
        }

        /// <summary>
        /// Returns true if CustomDashboardPageReport instances are equal
        /// </summary>
        /// <param name="input">Instance of CustomDashboardPageReport to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CustomDashboardPageReport input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.DataWarehouseReportConfigOid == input.DataWarehouseReportConfigOid ||
                    (this.DataWarehouseReportConfigOid != null &&
                    this.DataWarehouseReportConfigOid.Equals(input.DataWarehouseReportConfigOid))
                ) && 
                (
                    this.GridHeight == input.GridHeight ||
                    (this.GridHeight != null &&
                    this.GridHeight.Equals(input.GridHeight))
                ) && 
                (
                    this.GridWidth == input.GridWidth ||
                    (this.GridWidth != null &&
                    this.GridWidth.Equals(input.GridWidth))
                ) && 
                (
                    this.GridX == input.GridX ||
                    (this.GridX != null &&
                    this.GridX.Equals(input.GridX))
                ) && 
                (
                    this.GridY == input.GridY ||
                    (this.GridY != null &&
                    this.GridY.Equals(input.GridY))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.DataWarehouseReportConfigOid != null)
                    hashCode = hashCode * 59 + this.DataWarehouseReportConfigOid.GetHashCode();
                if (this.GridHeight != null)
                    hashCode = hashCode * 59 + this.GridHeight.GetHashCode();
                if (this.GridWidth != null)
                    hashCode = hashCode * 59 + this.GridWidth.GetHashCode();
                if (this.GridX != null)
                    hashCode = hashCode * 59 + this.GridX.GetHashCode();
                if (this.GridY != null)
                    hashCode = hashCode * 59 + this.GridY.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
