/*
 * UltraCart Rest API V2
 *
 * UltraCart REST API Version 2
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@ultracart.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = com.ultracart.admin.v2.Client.OpenAPIDateConverter;

namespace com.ultracart.admin.v2.Model
{
    /// <summary>
    /// CustomDashboardSchedule
    /// </summary>
    [DataContract]
    public partial class CustomDashboardSchedule :  IEquatable<CustomDashboardSchedule>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CustomDashboardSchedule" /> class.
        /// </summary>
        /// <param name="cronTriggerExpression">cronTriggerExpression.</param>
        /// <param name="dataWarehouseCustomDashboardOid">dataWarehouseCustomDashboardOid.</param>
        /// <param name="dataWarehouseCustomDashboardScheduleOid">dataWarehouseCustomDashboardScheduleOid.</param>
        /// <param name="emails">emails.</param>
        /// <param name="nextSendDts">Date/time that the next send will occur..</param>
        public CustomDashboardSchedule(string cronTriggerExpression = default(string), int dataWarehouseCustomDashboardOid = default(int), int dataWarehouseCustomDashboardScheduleOid = default(int), List<string> emails = default(List<string>), string nextSendDts = default(string))
        {
            this.CronTriggerExpression = cronTriggerExpression;
            this.DataWarehouseCustomDashboardOid = dataWarehouseCustomDashboardOid;
            this.DataWarehouseCustomDashboardScheduleOid = dataWarehouseCustomDashboardScheduleOid;
            this.Emails = emails;
            this.NextSendDts = nextSendDts;
        }

        /// <summary>
        /// Gets or Sets CronTriggerExpression
        /// </summary>
        [DataMember(Name="cron_trigger_expression", EmitDefaultValue=false)]
        public string CronTriggerExpression { get; set; }

        /// <summary>
        /// Gets or Sets DataWarehouseCustomDashboardOid
        /// </summary>
        [DataMember(Name="data_warehouse_custom_dashboard_oid", EmitDefaultValue=false)]
        public int DataWarehouseCustomDashboardOid { get; set; }

        /// <summary>
        /// Gets or Sets DataWarehouseCustomDashboardScheduleOid
        /// </summary>
        [DataMember(Name="data_warehouse_custom_dashboard_schedule_oid", EmitDefaultValue=false)]
        public int DataWarehouseCustomDashboardScheduleOid { get; set; }

        /// <summary>
        /// Gets or Sets Emails
        /// </summary>
        [DataMember(Name="emails", EmitDefaultValue=false)]
        public List<string> Emails { get; set; }

        /// <summary>
        /// Date/time that the next send will occur.
        /// </summary>
        /// <value>Date/time that the next send will occur.</value>
        [DataMember(Name="next_send_dts", EmitDefaultValue=false)]
        public string NextSendDts { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CustomDashboardSchedule {\n");
            sb.Append("  CronTriggerExpression: ").Append(CronTriggerExpression).Append("\n");
            sb.Append("  DataWarehouseCustomDashboardOid: ").Append(DataWarehouseCustomDashboardOid).Append("\n");
            sb.Append("  DataWarehouseCustomDashboardScheduleOid: ").Append(DataWarehouseCustomDashboardScheduleOid).Append("\n");
            sb.Append("  Emails: ").Append(Emails).Append("\n");
            sb.Append("  NextSendDts: ").Append(NextSendDts).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CustomDashboardSchedule);
        }

        /// <summary>
        /// Returns true if CustomDashboardSchedule instances are equal
        /// </summary>
        /// <param name="input">Instance of CustomDashboardSchedule to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CustomDashboardSchedule input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.CronTriggerExpression == input.CronTriggerExpression ||
                    (this.CronTriggerExpression != null &&
                    this.CronTriggerExpression.Equals(input.CronTriggerExpression))
                ) && 
                (
                    this.DataWarehouseCustomDashboardOid == input.DataWarehouseCustomDashboardOid ||
                    (this.DataWarehouseCustomDashboardOid != null &&
                    this.DataWarehouseCustomDashboardOid.Equals(input.DataWarehouseCustomDashboardOid))
                ) && 
                (
                    this.DataWarehouseCustomDashboardScheduleOid == input.DataWarehouseCustomDashboardScheduleOid ||
                    (this.DataWarehouseCustomDashboardScheduleOid != null &&
                    this.DataWarehouseCustomDashboardScheduleOid.Equals(input.DataWarehouseCustomDashboardScheduleOid))
                ) && 
                (
                    this.Emails == input.Emails ||
                    this.Emails != null &&
                    input.Emails != null &&
                    this.Emails.SequenceEqual(input.Emails)
                ) && 
                (
                    this.NextSendDts == input.NextSendDts ||
                    (this.NextSendDts != null &&
                    this.NextSendDts.Equals(input.NextSendDts))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.CronTriggerExpression != null)
                    hashCode = hashCode * 59 + this.CronTriggerExpression.GetHashCode();
                if (this.DataWarehouseCustomDashboardOid != null)
                    hashCode = hashCode * 59 + this.DataWarehouseCustomDashboardOid.GetHashCode();
                if (this.DataWarehouseCustomDashboardScheduleOid != null)
                    hashCode = hashCode * 59 + this.DataWarehouseCustomDashboardScheduleOid.GetHashCode();
                if (this.Emails != null)
                    hashCode = hashCode * 59 + this.Emails.GetHashCode();
                if (this.NextSendDts != null)
                    hashCode = hashCode * 59 + this.NextSendDts.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
