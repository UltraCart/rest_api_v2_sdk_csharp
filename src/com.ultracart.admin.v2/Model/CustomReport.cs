/* 
 * UltraCart Rest API V2
 *
 * UltraCart REST API Version 2
 *
 * OpenAPI spec version: 2.0.0
 * Contact: support@ultracart.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = com.ultracart.admin.v2.Client.SwaggerDateConverter;

namespace com.ultracart.admin.v2.Model
{
    /// <summary>
    /// CustomReport
    /// </summary>
    [DataContract]
    public partial class CustomReport :  IEquatable<CustomReport>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CustomReport" /> class.
        /// </summary>
        /// <param name="businessAnalysisPrompt">businessAnalysisPrompt.</param>
        /// <param name="chartJavascript">chartJavascript.</param>
        /// <param name="chartJavascriptUrl">chartJavascriptUrl.</param>
        /// <param name="dataWarehouseReportConfigOid">dataWarehouseReportConfigOid.</param>
        /// <param name="datasetSecurityLevel">datasetSecurityLevel.</param>
        /// <param name="groupName">groupName.</param>
        /// <param name="merchantId">merchantId.</param>
        /// <param name="name">name.</param>
        /// <param name="parameters">parameters.</param>
        /// <param name="queries">queries.</param>
        /// <param name="tooltips">tooltips.</param>
        public CustomReport(string businessAnalysisPrompt = default(string), string chartJavascript = default(string), string chartJavascriptUrl = default(string), int? dataWarehouseReportConfigOid = default(int?), string datasetSecurityLevel = default(string), string groupName = default(string), string merchantId = default(string), string name = default(string), List<CustomReportParameter> parameters = default(List<CustomReportParameter>), List<CustomReportQuery> queries = default(List<CustomReportQuery>), List<CustomReportTooltip> tooltips = default(List<CustomReportTooltip>))
        {
            this.BusinessAnalysisPrompt = businessAnalysisPrompt;
            this.ChartJavascript = chartJavascript;
            this.ChartJavascriptUrl = chartJavascriptUrl;
            this.DataWarehouseReportConfigOid = dataWarehouseReportConfigOid;
            this.DatasetSecurityLevel = datasetSecurityLevel;
            this.GroupName = groupName;
            this.MerchantId = merchantId;
            this.Name = name;
            this.Parameters = parameters;
            this.Queries = queries;
            this.Tooltips = tooltips;
        }
        
        /// <summary>
        /// Gets or Sets BusinessAnalysisPrompt
        /// </summary>
        [DataMember(Name="business_analysis_prompt", EmitDefaultValue=false)]
        public string BusinessAnalysisPrompt { get; set; }

        /// <summary>
        /// Gets or Sets ChartJavascript
        /// </summary>
        [DataMember(Name="chart_javascript", EmitDefaultValue=false)]
        public string ChartJavascript { get; set; }

        /// <summary>
        /// Gets or Sets ChartJavascriptUrl
        /// </summary>
        [DataMember(Name="chart_javascript_url", EmitDefaultValue=false)]
        public string ChartJavascriptUrl { get; set; }

        /// <summary>
        /// Gets or Sets DataWarehouseReportConfigOid
        /// </summary>
        [DataMember(Name="data_warehouse_report_config_oid", EmitDefaultValue=false)]
        public int? DataWarehouseReportConfigOid { get; set; }

        /// <summary>
        /// Gets or Sets DatasetSecurityLevel
        /// </summary>
        [DataMember(Name="dataset_security_level", EmitDefaultValue=false)]
        public string DatasetSecurityLevel { get; set; }

        /// <summary>
        /// Gets or Sets GroupName
        /// </summary>
        [DataMember(Name="group_name", EmitDefaultValue=false)]
        public string GroupName { get; set; }

        /// <summary>
        /// Gets or Sets MerchantId
        /// </summary>
        [DataMember(Name="merchant_id", EmitDefaultValue=false)]
        public string MerchantId { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Parameters
        /// </summary>
        [DataMember(Name="parameters", EmitDefaultValue=false)]
        public List<CustomReportParameter> Parameters { get; set; }

        /// <summary>
        /// Gets or Sets Queries
        /// </summary>
        [DataMember(Name="queries", EmitDefaultValue=false)]
        public List<CustomReportQuery> Queries { get; set; }

        /// <summary>
        /// Gets or Sets Tooltips
        /// </summary>
        [DataMember(Name="tooltips", EmitDefaultValue=false)]
        public List<CustomReportTooltip> Tooltips { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CustomReport {\n");
            sb.Append("  BusinessAnalysisPrompt: ").Append(BusinessAnalysisPrompt).Append("\n");
            sb.Append("  ChartJavascript: ").Append(ChartJavascript).Append("\n");
            sb.Append("  ChartJavascriptUrl: ").Append(ChartJavascriptUrl).Append("\n");
            sb.Append("  DataWarehouseReportConfigOid: ").Append(DataWarehouseReportConfigOid).Append("\n");
            sb.Append("  DatasetSecurityLevel: ").Append(DatasetSecurityLevel).Append("\n");
            sb.Append("  GroupName: ").Append(GroupName).Append("\n");
            sb.Append("  MerchantId: ").Append(MerchantId).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Parameters: ").Append(Parameters).Append("\n");
            sb.Append("  Queries: ").Append(Queries).Append("\n");
            sb.Append("  Tooltips: ").Append(Tooltips).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CustomReport);
        }

        /// <summary>
        /// Returns true if CustomReport instances are equal
        /// </summary>
        /// <param name="input">Instance of CustomReport to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CustomReport input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.BusinessAnalysisPrompt == input.BusinessAnalysisPrompt ||
                    (this.BusinessAnalysisPrompt != null &&
                    this.BusinessAnalysisPrompt.Equals(input.BusinessAnalysisPrompt))
                ) && 
                (
                    this.ChartJavascript == input.ChartJavascript ||
                    (this.ChartJavascript != null &&
                    this.ChartJavascript.Equals(input.ChartJavascript))
                ) && 
                (
                    this.ChartJavascriptUrl == input.ChartJavascriptUrl ||
                    (this.ChartJavascriptUrl != null &&
                    this.ChartJavascriptUrl.Equals(input.ChartJavascriptUrl))
                ) && 
                (
                    this.DataWarehouseReportConfigOid == input.DataWarehouseReportConfigOid ||
                    (this.DataWarehouseReportConfigOid != null &&
                    this.DataWarehouseReportConfigOid.Equals(input.DataWarehouseReportConfigOid))
                ) && 
                (
                    this.DatasetSecurityLevel == input.DatasetSecurityLevel ||
                    (this.DatasetSecurityLevel != null &&
                    this.DatasetSecurityLevel.Equals(input.DatasetSecurityLevel))
                ) && 
                (
                    this.GroupName == input.GroupName ||
                    (this.GroupName != null &&
                    this.GroupName.Equals(input.GroupName))
                ) && 
                (
                    this.MerchantId == input.MerchantId ||
                    (this.MerchantId != null &&
                    this.MerchantId.Equals(input.MerchantId))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Parameters == input.Parameters ||
                    this.Parameters != null &&
                    this.Parameters.SequenceEqual(input.Parameters)
                ) && 
                (
                    this.Queries == input.Queries ||
                    this.Queries != null &&
                    this.Queries.SequenceEqual(input.Queries)
                ) && 
                (
                    this.Tooltips == input.Tooltips ||
                    this.Tooltips != null &&
                    this.Tooltips.SequenceEqual(input.Tooltips)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.BusinessAnalysisPrompt != null)
                    hashCode = hashCode * 59 + this.BusinessAnalysisPrompt.GetHashCode();
                if (this.ChartJavascript != null)
                    hashCode = hashCode * 59 + this.ChartJavascript.GetHashCode();
                if (this.ChartJavascriptUrl != null)
                    hashCode = hashCode * 59 + this.ChartJavascriptUrl.GetHashCode();
                if (this.DataWarehouseReportConfigOid != null)
                    hashCode = hashCode * 59 + this.DataWarehouseReportConfigOid.GetHashCode();
                if (this.DatasetSecurityLevel != null)
                    hashCode = hashCode * 59 + this.DatasetSecurityLevel.GetHashCode();
                if (this.GroupName != null)
                    hashCode = hashCode * 59 + this.GroupName.GetHashCode();
                if (this.MerchantId != null)
                    hashCode = hashCode * 59 + this.MerchantId.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Parameters != null)
                    hashCode = hashCode * 59 + this.Parameters.GetHashCode();
                if (this.Queries != null)
                    hashCode = hashCode * 59 + this.Queries.GetHashCode();
                if (this.Tooltips != null)
                    hashCode = hashCode * 59 + this.Tooltips.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
