/*
 * UltraCart Rest API V2
 *
 * UltraCart REST API Version 2
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@ultracart.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = com.ultracart.admin.v2.Client.OpenAPIDateConverter;

namespace com.ultracart.admin.v2.Model
{
    /// <summary>
    /// CustomReportAccountConfig
    /// </summary>
    [DataContract]
    public partial class CustomReportAccountConfig :  IEquatable<CustomReportAccountConfig>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CustomReportAccountConfig" /> class.
        /// </summary>
        /// <param name="aiBudget">aiBudget.</param>
        /// <param name="aiUsage">Current AI usage creating reports.</param>
        /// <param name="merchantId">Current BigQuery SQL usage running reports.</param>
        /// <param name="noviceSqlComments">noviceSqlComments.</param>
        /// <param name="optIn">True if they have opted into custom reports.</param>
        /// <param name="optInByUser">User that opted into custom reporting.</param>
        /// <param name="optInDate">Date/time that custom reporting was opted in to.</param>
        /// <param name="sqlBudget">sqlBudget.</param>
        /// <param name="sqlUsage">sqlUsage.</param>
        public CustomReportAccountConfig(decimal aiBudget = default(decimal), decimal aiUsage = default(decimal), string merchantId = default(string), bool noviceSqlComments = default(bool), bool optIn = default(bool), string optInByUser = default(string), string optInDate = default(string), decimal sqlBudget = default(decimal), decimal sqlUsage = default(decimal))
        {
            this.AiBudget = aiBudget;
            this.AiUsage = aiUsage;
            this.MerchantId = merchantId;
            this.NoviceSqlComments = noviceSqlComments;
            this.OptIn = optIn;
            this.OptInByUser = optInByUser;
            this.OptInDate = optInDate;
            this.SqlBudget = sqlBudget;
            this.SqlUsage = sqlUsage;
        }

        /// <summary>
        /// Gets or Sets AiBudget
        /// </summary>
        [DataMember(Name="ai_budget", EmitDefaultValue=false)]
        public decimal AiBudget { get; set; }

        /// <summary>
        /// Current AI usage creating reports
        /// </summary>
        /// <value>Current AI usage creating reports</value>
        [DataMember(Name="ai_usage", EmitDefaultValue=false)]
        public decimal AiUsage { get; set; }

        /// <summary>
        /// Current BigQuery SQL usage running reports
        /// </summary>
        /// <value>Current BigQuery SQL usage running reports</value>
        [DataMember(Name="merchant_id", EmitDefaultValue=false)]
        public string MerchantId { get; set; }

        /// <summary>
        /// Gets or Sets NoviceSqlComments
        /// </summary>
        [DataMember(Name="novice_sql_comments", EmitDefaultValue=false)]
        public bool NoviceSqlComments { get; set; }

        /// <summary>
        /// True if they have opted into custom reports
        /// </summary>
        /// <value>True if they have opted into custom reports</value>
        [DataMember(Name="opt_in", EmitDefaultValue=false)]
        public bool OptIn { get; set; }

        /// <summary>
        /// User that opted into custom reporting
        /// </summary>
        /// <value>User that opted into custom reporting</value>
        [DataMember(Name="opt_in_by_user", EmitDefaultValue=false)]
        public string OptInByUser { get; set; }

        /// <summary>
        /// Date/time that custom reporting was opted in to
        /// </summary>
        /// <value>Date/time that custom reporting was opted in to</value>
        [DataMember(Name="opt_in_date", EmitDefaultValue=false)]
        public string OptInDate { get; set; }

        /// <summary>
        /// Gets or Sets SqlBudget
        /// </summary>
        [DataMember(Name="sql_budget", EmitDefaultValue=false)]
        public decimal SqlBudget { get; set; }

        /// <summary>
        /// Gets or Sets SqlUsage
        /// </summary>
        [DataMember(Name="sql_usage", EmitDefaultValue=false)]
        public decimal SqlUsage { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CustomReportAccountConfig {\n");
            sb.Append("  AiBudget: ").Append(AiBudget).Append("\n");
            sb.Append("  AiUsage: ").Append(AiUsage).Append("\n");
            sb.Append("  MerchantId: ").Append(MerchantId).Append("\n");
            sb.Append("  NoviceSqlComments: ").Append(NoviceSqlComments).Append("\n");
            sb.Append("  OptIn: ").Append(OptIn).Append("\n");
            sb.Append("  OptInByUser: ").Append(OptInByUser).Append("\n");
            sb.Append("  OptInDate: ").Append(OptInDate).Append("\n");
            sb.Append("  SqlBudget: ").Append(SqlBudget).Append("\n");
            sb.Append("  SqlUsage: ").Append(SqlUsage).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CustomReportAccountConfig);
        }

        /// <summary>
        /// Returns true if CustomReportAccountConfig instances are equal
        /// </summary>
        /// <param name="input">Instance of CustomReportAccountConfig to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CustomReportAccountConfig input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.AiBudget == input.AiBudget ||
                    (this.AiBudget != null &&
                    this.AiBudget.Equals(input.AiBudget))
                ) && 
                (
                    this.AiUsage == input.AiUsage ||
                    (this.AiUsage != null &&
                    this.AiUsage.Equals(input.AiUsage))
                ) && 
                (
                    this.MerchantId == input.MerchantId ||
                    (this.MerchantId != null &&
                    this.MerchantId.Equals(input.MerchantId))
                ) && 
                (
                    this.NoviceSqlComments == input.NoviceSqlComments ||
                    (this.NoviceSqlComments != null &&
                    this.NoviceSqlComments.Equals(input.NoviceSqlComments))
                ) && 
                (
                    this.OptIn == input.OptIn ||
                    (this.OptIn != null &&
                    this.OptIn.Equals(input.OptIn))
                ) && 
                (
                    this.OptInByUser == input.OptInByUser ||
                    (this.OptInByUser != null &&
                    this.OptInByUser.Equals(input.OptInByUser))
                ) && 
                (
                    this.OptInDate == input.OptInDate ||
                    (this.OptInDate != null &&
                    this.OptInDate.Equals(input.OptInDate))
                ) && 
                (
                    this.SqlBudget == input.SqlBudget ||
                    (this.SqlBudget != null &&
                    this.SqlBudget.Equals(input.SqlBudget))
                ) && 
                (
                    this.SqlUsage == input.SqlUsage ||
                    (this.SqlUsage != null &&
                    this.SqlUsage.Equals(input.SqlUsage))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AiBudget != null)
                    hashCode = hashCode * 59 + this.AiBudget.GetHashCode();
                if (this.AiUsage != null)
                    hashCode = hashCode * 59 + this.AiUsage.GetHashCode();
                if (this.MerchantId != null)
                    hashCode = hashCode * 59 + this.MerchantId.GetHashCode();
                if (this.NoviceSqlComments != null)
                    hashCode = hashCode * 59 + this.NoviceSqlComments.GetHashCode();
                if (this.OptIn != null)
                    hashCode = hashCode * 59 + this.OptIn.GetHashCode();
                if (this.OptInByUser != null)
                    hashCode = hashCode * 59 + this.OptInByUser.GetHashCode();
                if (this.OptInDate != null)
                    hashCode = hashCode * 59 + this.OptInDate.GetHashCode();
                if (this.SqlBudget != null)
                    hashCode = hashCode * 59 + this.SqlBudget.GetHashCode();
                if (this.SqlUsage != null)
                    hashCode = hashCode * 59 + this.SqlUsage.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
