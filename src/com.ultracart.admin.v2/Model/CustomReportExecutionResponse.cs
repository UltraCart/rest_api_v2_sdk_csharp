/*
 * UltraCart Rest API V2
 *
 * UltraCart REST API Version 2
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@ultracart.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = com.ultracart.admin.v2.Client.OpenAPIDateConverter;

namespace com.ultracart.admin.v2.Model
{
    /// <summary>
    /// CustomReportExecutionResponse
    /// </summary>
    [DataContract]
    public partial class CustomReportExecutionResponse :  IEquatable<CustomReportExecutionResponse>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CustomReportExecutionResponse" /> class.
        /// </summary>
        /// <param name="error">error.</param>
        /// <param name="metadata">metadata.</param>
        /// <param name="parameters">parameters.</param>
        /// <param name="report">report.</param>
        /// <param name="resultSchemaJson">resultSchemaJson.</param>
        /// <param name="resultUrl">resultUrl.</param>
        /// <param name="success">Indicates if API call was successful.</param>
        /// <param name="warning">warning.</param>
        public CustomReportExecutionResponse(Error error = default(Error), ResponseMetadata metadata = default(ResponseMetadata), List<CustomReportExecutionParameter> parameters = default(List<CustomReportExecutionParameter>), CustomReport report = default(CustomReport), string resultSchemaJson = default(string), string resultUrl = default(string), bool success = default(bool), Warning warning = default(Warning))
        {
            this.Error = error;
            this.Metadata = metadata;
            this.Parameters = parameters;
            this.Report = report;
            this.ResultSchemaJson = resultSchemaJson;
            this.ResultUrl = resultUrl;
            this.Success = success;
            this.Warning = warning;
        }

        /// <summary>
        /// Gets or Sets Error
        /// </summary>
        [DataMember(Name="error", EmitDefaultValue=false)]
        public Error Error { get; set; }

        /// <summary>
        /// Gets or Sets Metadata
        /// </summary>
        [DataMember(Name="metadata", EmitDefaultValue=false)]
        public ResponseMetadata Metadata { get; set; }

        /// <summary>
        /// Gets or Sets Parameters
        /// </summary>
        [DataMember(Name="parameters", EmitDefaultValue=false)]
        public List<CustomReportExecutionParameter> Parameters { get; set; }

        /// <summary>
        /// Gets or Sets Report
        /// </summary>
        [DataMember(Name="report", EmitDefaultValue=false)]
        public CustomReport Report { get; set; }

        /// <summary>
        /// Gets or Sets ResultSchemaJson
        /// </summary>
        [DataMember(Name="result_schema_json", EmitDefaultValue=false)]
        public string ResultSchemaJson { get; set; }

        /// <summary>
        /// Gets or Sets ResultUrl
        /// </summary>
        [DataMember(Name="result_url", EmitDefaultValue=false)]
        public string ResultUrl { get; set; }

        /// <summary>
        /// Indicates if API call was successful
        /// </summary>
        /// <value>Indicates if API call was successful</value>
        [DataMember(Name="success", EmitDefaultValue=false)]
        public bool Success { get; set; }

        /// <summary>
        /// Gets or Sets Warning
        /// </summary>
        [DataMember(Name="warning", EmitDefaultValue=false)]
        public Warning Warning { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CustomReportExecutionResponse {\n");
            sb.Append("  Error: ").Append(Error).Append("\n");
            sb.Append("  Metadata: ").Append(Metadata).Append("\n");
            sb.Append("  Parameters: ").Append(Parameters).Append("\n");
            sb.Append("  Report: ").Append(Report).Append("\n");
            sb.Append("  ResultSchemaJson: ").Append(ResultSchemaJson).Append("\n");
            sb.Append("  ResultUrl: ").Append(ResultUrl).Append("\n");
            sb.Append("  Success: ").Append(Success).Append("\n");
            sb.Append("  Warning: ").Append(Warning).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CustomReportExecutionResponse);
        }

        /// <summary>
        /// Returns true if CustomReportExecutionResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of CustomReportExecutionResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CustomReportExecutionResponse input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Error == input.Error ||
                    (this.Error != null &&
                    this.Error.Equals(input.Error))
                ) && 
                (
                    this.Metadata == input.Metadata ||
                    (this.Metadata != null &&
                    this.Metadata.Equals(input.Metadata))
                ) && 
                (
                    this.Parameters == input.Parameters ||
                    this.Parameters != null &&
                    input.Parameters != null &&
                    this.Parameters.SequenceEqual(input.Parameters)
                ) && 
                (
                    this.Report == input.Report ||
                    (this.Report != null &&
                    this.Report.Equals(input.Report))
                ) && 
                (
                    this.ResultSchemaJson == input.ResultSchemaJson ||
                    (this.ResultSchemaJson != null &&
                    this.ResultSchemaJson.Equals(input.ResultSchemaJson))
                ) && 
                (
                    this.ResultUrl == input.ResultUrl ||
                    (this.ResultUrl != null &&
                    this.ResultUrl.Equals(input.ResultUrl))
                ) && 
                (
                    this.Success == input.Success ||
                    (this.Success != null &&
                    this.Success.Equals(input.Success))
                ) && 
                (
                    this.Warning == input.Warning ||
                    (this.Warning != null &&
                    this.Warning.Equals(input.Warning))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Error != null)
                    hashCode = hashCode * 59 + this.Error.GetHashCode();
                if (this.Metadata != null)
                    hashCode = hashCode * 59 + this.Metadata.GetHashCode();
                if (this.Parameters != null)
                    hashCode = hashCode * 59 + this.Parameters.GetHashCode();
                if (this.Report != null)
                    hashCode = hashCode * 59 + this.Report.GetHashCode();
                if (this.ResultSchemaJson != null)
                    hashCode = hashCode * 59 + this.ResultSchemaJson.GetHashCode();
                if (this.ResultUrl != null)
                    hashCode = hashCode * 59 + this.ResultUrl.GetHashCode();
                if (this.Success != null)
                    hashCode = hashCode * 59 + this.Success.GetHashCode();
                if (this.Warning != null)
                    hashCode = hashCode * 59 + this.Warning.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
