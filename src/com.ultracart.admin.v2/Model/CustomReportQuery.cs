/*
 * UltraCart Rest API V2
 *
 * UltraCart REST API Version 2
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@ultracart.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = com.ultracart.admin.v2.Client.OpenAPIDateConverter;

namespace com.ultracart.admin.v2.Model
{
    /// <summary>
    /// CustomReportQuery
    /// </summary>
    [DataContract]
    public partial class CustomReportQuery :  IEquatable<CustomReportQuery>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CustomReportQuery" /> class.
        /// </summary>
        /// <param name="conditionalFormattingStartColumn">conditionalFormattingStartColumn.</param>
        /// <param name="freezeColumns">freezeColumns.</param>
        /// <param name="piiColumns">piiColumns.</param>
        /// <param name="query">query.</param>
        /// <param name="sheetName">sheetName.</param>
        /// <param name="title">title.</param>
        public CustomReportQuery(int conditionalFormattingStartColumn = default(int), int freezeColumns = default(int), List<string> piiColumns = default(List<string>), string query = default(string), string sheetName = default(string), string title = default(string))
        {
            this.ConditionalFormattingStartColumn = conditionalFormattingStartColumn;
            this.FreezeColumns = freezeColumns;
            this.PiiColumns = piiColumns;
            this.Query = query;
            this.SheetName = sheetName;
            this.Title = title;
        }

        /// <summary>
        /// Gets or Sets ConditionalFormattingStartColumn
        /// </summary>
        [DataMember(Name="conditional_formatting_start_column", EmitDefaultValue=false)]
        public int ConditionalFormattingStartColumn { get; set; }

        /// <summary>
        /// Gets or Sets FreezeColumns
        /// </summary>
        [DataMember(Name="freeze_columns", EmitDefaultValue=false)]
        public int FreezeColumns { get; set; }

        /// <summary>
        /// Gets or Sets PiiColumns
        /// </summary>
        [DataMember(Name="pii_columns", EmitDefaultValue=false)]
        public List<string> PiiColumns { get; set; }

        /// <summary>
        /// Gets or Sets Query
        /// </summary>
        [DataMember(Name="query", EmitDefaultValue=false)]
        public string Query { get; set; }

        /// <summary>
        /// Gets or Sets SheetName
        /// </summary>
        [DataMember(Name="sheet_name", EmitDefaultValue=false)]
        public string SheetName { get; set; }

        /// <summary>
        /// Gets or Sets Title
        /// </summary>
        [DataMember(Name="title", EmitDefaultValue=false)]
        public string Title { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CustomReportQuery {\n");
            sb.Append("  ConditionalFormattingStartColumn: ").Append(ConditionalFormattingStartColumn).Append("\n");
            sb.Append("  FreezeColumns: ").Append(FreezeColumns).Append("\n");
            sb.Append("  PiiColumns: ").Append(PiiColumns).Append("\n");
            sb.Append("  Query: ").Append(Query).Append("\n");
            sb.Append("  SheetName: ").Append(SheetName).Append("\n");
            sb.Append("  Title: ").Append(Title).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CustomReportQuery);
        }

        /// <summary>
        /// Returns true if CustomReportQuery instances are equal
        /// </summary>
        /// <param name="input">Instance of CustomReportQuery to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CustomReportQuery input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ConditionalFormattingStartColumn == input.ConditionalFormattingStartColumn ||
                    (this.ConditionalFormattingStartColumn != null &&
                    this.ConditionalFormattingStartColumn.Equals(input.ConditionalFormattingStartColumn))
                ) && 
                (
                    this.FreezeColumns == input.FreezeColumns ||
                    (this.FreezeColumns != null &&
                    this.FreezeColumns.Equals(input.FreezeColumns))
                ) && 
                (
                    this.PiiColumns == input.PiiColumns ||
                    this.PiiColumns != null &&
                    input.PiiColumns != null &&
                    this.PiiColumns.SequenceEqual(input.PiiColumns)
                ) && 
                (
                    this.Query == input.Query ||
                    (this.Query != null &&
                    this.Query.Equals(input.Query))
                ) && 
                (
                    this.SheetName == input.SheetName ||
                    (this.SheetName != null &&
                    this.SheetName.Equals(input.SheetName))
                ) && 
                (
                    this.Title == input.Title ||
                    (this.Title != null &&
                    this.Title.Equals(input.Title))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ConditionalFormattingStartColumn != null)
                    hashCode = hashCode * 59 + this.ConditionalFormattingStartColumn.GetHashCode();
                if (this.FreezeColumns != null)
                    hashCode = hashCode * 59 + this.FreezeColumns.GetHashCode();
                if (this.PiiColumns != null)
                    hashCode = hashCode * 59 + this.PiiColumns.GetHashCode();
                if (this.Query != null)
                    hashCode = hashCode * 59 + this.Query.GetHashCode();
                if (this.SheetName != null)
                    hashCode = hashCode * 59 + this.SheetName.GetHashCode();
                if (this.Title != null)
                    hashCode = hashCode * 59 + this.Title.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
