/*
 * UltraCart Rest API V2
 *
 * UltraCart REST API Version 2
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@ultracart.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = com.ultracart.admin.v2.Client.OpenAPIDateConverter;

namespace com.ultracart.admin.v2.Model
{
    /// <summary>
    /// Customer
    /// </summary>
    [DataContract]
    public partial class Customer :  IEquatable<Customer>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Customer" /> class.
        /// </summary>
        /// <param name="activity">activity.</param>
        /// <param name="affiliateOid">Affiliate oid.</param>
        /// <param name="allow3rdPartyBilling">Allow 3rd party billing.</param>
        /// <param name="allowCod">Allow COD.</param>
        /// <param name="allowDropShipping">Allow Drop Shipping.</param>
        /// <param name="allowPurchaseOrder">Allow purchase orders by this customer.</param>
        /// <param name="allowQuoteRequest">Allow quote request.</param>
        /// <param name="allowSelectionOfAddressType">Allow selection of residential or business address type.</param>
        /// <param name="attachments">Attachments.</param>
        /// <param name="autoApproveCod">Auto approve COD.</param>
        /// <param name="autoApprovePurchaseOrder">Auto approve purchase orders by this customer.</param>
        /// <param name="automaticMerchantNotes">Automatic merchant notes are added to every order placed.</param>
        /// <param name="billing">Billing addresses for this customer.</param>
        /// <param name="businessNotes">Business notes (internally visible only).</param>
        /// <param name="cards">Credit Cards for this customer.</param>
        /// <param name="ccEmails">Additional emails to CC notification.</param>
        /// <param name="customerProfileOid">Customer profile object identifier.</param>
        /// <param name="dhlAccountNumber">DHL account number.</param>
        /// <param name="dhlDutyAccountNumber">DHL duty account number.</param>
        /// <param name="doNotSendMail">Do not send mail (null will not update).</param>
        /// <param name="edi">edi.</param>
        /// <param name="email">Email address of this customer profile.</param>
        /// <param name="exemptShippingHandlingCharge">Exempt shipping handling charge.</param>
        /// <param name="fax">Fax Number.</param>
        /// <param name="fedexAccountNumber">FedEx account number.</param>
        /// <param name="freeShipping">This customer always receives free shipping.</param>
        /// <param name="freeShippingMinimum">If free_shipping is true, this is the minimum subtotal required for free shipping.</param>
        /// <param name="lastModifiedBy">Last modified by.</param>
        /// <param name="lastModifiedDts">Last modified date.</param>
        /// <param name="loyalty">loyalty.</param>
        /// <param name="maximumItemCount">Maximum item count.</param>
        /// <param name="merchantId">Merchant ID.</param>
        /// <param name="minimumItemCount">Minimum item count.</param>
        /// <param name="minimumSubtotal">Minimum subtotal.</param>
        /// <param name="noCoupons">No coupons.</param>
        /// <param name="noFreeShipping">No free shipping regardless of coupons or item level settings.</param>
        /// <param name="noRealtimeCharge">No realtime charge.</param>
        /// <param name="orders">Orders associated with this customer profile.</param>
        /// <param name="ordersSummary">ordersSummary.</param>
        /// <param name="password">Password (may only be set, never read).</param>
        /// <param name="pricingTiers">Pricing tiers for this customer.</param>
        /// <param name="privacy">privacy.</param>
        /// <param name="properties">Properties for this customer.</param>
        /// <param name="qbClass">QuickBooks class to import this customer as.</param>
        /// <param name="qbCode">QuickBooks name to import this customer as.</param>
        /// <param name="qbTaxExemptionReasonCode">QuickBooks tax exemption reason code.</param>
        /// <param name="quotes">Quotes associated with this customer profile.</param>
        /// <param name="quotesSummary">quotesSummary.</param>
        /// <param name="referralSource">Referral Source.</param>
        /// <param name="reviewer">reviewer.</param>
        /// <param name="salesRepCode">Sales rep code.</param>
        /// <param name="sendSignupNotification">Send signup notification, if true during customer creation, will send a notification..</param>
        /// <param name="shipping">Shipping addresses for this customer.</param>
        /// <param name="signupDts">Signup date.</param>
        /// <param name="softwareEntitlements">Software entitlements owned by this customer.</param>
        /// <param name="suppressBuysafe">Suppress buySAFE (deprecated).</param>
        /// <param name="tags">Tags for this customer.</param>
        /// <param name="taxCodes">taxCodes.</param>
        /// <param name="taxExempt">True if the customer is tax exempt.</param>
        /// <param name="taxId">Tax ID.</param>
        /// <param name="terms">Terms for this customer.</param>
        /// <param name="trackSeparately">True if the customer should be tracked separately in QuickBooks.</param>
        /// <param name="unapproved">Unapproved.</param>
        /// <param name="upsAccountNumber">UPS account number.</param>
        /// <param name="websiteUrl">Website url.</param>
        public Customer(CustomerActivity activity = default(CustomerActivity), int affiliateOid = default(int), bool allow3rdPartyBilling = default(bool), bool allowCod = default(bool), bool allowDropShipping = default(bool), bool allowPurchaseOrder = default(bool), bool allowQuoteRequest = default(bool), bool allowSelectionOfAddressType = default(bool), List<CustomerAttachment> attachments = default(List<CustomerAttachment>), bool autoApproveCod = default(bool), bool autoApprovePurchaseOrder = default(bool), string automaticMerchantNotes = default(string), List<CustomerBilling> billing = default(List<CustomerBilling>), string businessNotes = default(string), List<CustomerCard> cards = default(List<CustomerCard>), List<CustomerEmail> ccEmails = default(List<CustomerEmail>), int customerProfileOid = default(int), string dhlAccountNumber = default(string), string dhlDutyAccountNumber = default(string), bool doNotSendMail = default(bool), CustomerEDI edi = default(CustomerEDI), string email = default(string), bool exemptShippingHandlingCharge = default(bool), string fax = default(string), string fedexAccountNumber = default(string), bool freeShipping = default(bool), decimal freeShippingMinimum = default(decimal), string lastModifiedBy = default(string), string lastModifiedDts = default(string), CustomerLoyalty loyalty = default(CustomerLoyalty), int maximumItemCount = default(int), string merchantId = default(string), int minimumItemCount = default(int), decimal minimumSubtotal = default(decimal), bool noCoupons = default(bool), bool noFreeShipping = default(bool), bool noRealtimeCharge = default(bool), List<Order> orders = default(List<Order>), CustomerOrdersSummary ordersSummary = default(CustomerOrdersSummary), string password = default(string), List<CustomerPricingTier> pricingTiers = default(List<CustomerPricingTier>), CustomerPrivacy privacy = default(CustomerPrivacy), List<CustomerProperty> properties = default(List<CustomerProperty>), string qbClass = default(string), string qbCode = default(string), int qbTaxExemptionReasonCode = default(int), List<Order> quotes = default(List<Order>), CustomerQuotesSummary quotesSummary = default(CustomerQuotesSummary), string referralSource = default(string), CustomerReviewer reviewer = default(CustomerReviewer), string salesRepCode = default(string), bool sendSignupNotification = default(bool), List<CustomerShipping> shipping = default(List<CustomerShipping>), string signupDts = default(string), List<CustomerSoftwareEntitlement> softwareEntitlements = default(List<CustomerSoftwareEntitlement>), bool suppressBuysafe = default(bool), List<CustomerTag> tags = default(List<CustomerTag>), CustomerTaxCodes taxCodes = default(CustomerTaxCodes), bool taxExempt = default(bool), string taxId = default(string), string terms = default(string), bool trackSeparately = default(bool), bool unapproved = default(bool), string upsAccountNumber = default(string), string websiteUrl = default(string))
        {
            this.Activity = activity;
            this.AffiliateOid = affiliateOid;
            this.Allow3rdPartyBilling = allow3rdPartyBilling;
            this.AllowCod = allowCod;
            this.AllowDropShipping = allowDropShipping;
            this.AllowPurchaseOrder = allowPurchaseOrder;
            this.AllowQuoteRequest = allowQuoteRequest;
            this.AllowSelectionOfAddressType = allowSelectionOfAddressType;
            this.Attachments = attachments;
            this.AutoApproveCod = autoApproveCod;
            this.AutoApprovePurchaseOrder = autoApprovePurchaseOrder;
            this.AutomaticMerchantNotes = automaticMerchantNotes;
            this.Billing = billing;
            this.BusinessNotes = businessNotes;
            this.Cards = cards;
            this.CcEmails = ccEmails;
            this.CustomerProfileOid = customerProfileOid;
            this.DhlAccountNumber = dhlAccountNumber;
            this.DhlDutyAccountNumber = dhlDutyAccountNumber;
            this.DoNotSendMail = doNotSendMail;
            this.Edi = edi;
            this.Email = email;
            this.ExemptShippingHandlingCharge = exemptShippingHandlingCharge;
            this.Fax = fax;
            this.FedexAccountNumber = fedexAccountNumber;
            this.FreeShipping = freeShipping;
            this.FreeShippingMinimum = freeShippingMinimum;
            this.LastModifiedBy = lastModifiedBy;
            this.LastModifiedDts = lastModifiedDts;
            this.Loyalty = loyalty;
            this.MaximumItemCount = maximumItemCount;
            this.MerchantId = merchantId;
            this.MinimumItemCount = minimumItemCount;
            this.MinimumSubtotal = minimumSubtotal;
            this.NoCoupons = noCoupons;
            this.NoFreeShipping = noFreeShipping;
            this.NoRealtimeCharge = noRealtimeCharge;
            this.Orders = orders;
            this.OrdersSummary = ordersSummary;
            this.Password = password;
            this.PricingTiers = pricingTiers;
            this.Privacy = privacy;
            this.Properties = properties;
            this.QbClass = qbClass;
            this.QbCode = qbCode;
            this.QbTaxExemptionReasonCode = qbTaxExemptionReasonCode;
            this.Quotes = quotes;
            this.QuotesSummary = quotesSummary;
            this.ReferralSource = referralSource;
            this.Reviewer = reviewer;
            this.SalesRepCode = salesRepCode;
            this.SendSignupNotification = sendSignupNotification;
            this.Shipping = shipping;
            this.SignupDts = signupDts;
            this.SoftwareEntitlements = softwareEntitlements;
            this.SuppressBuysafe = suppressBuysafe;
            this.Tags = tags;
            this.TaxCodes = taxCodes;
            this.TaxExempt = taxExempt;
            this.TaxId = taxId;
            this.Terms = terms;
            this.TrackSeparately = trackSeparately;
            this.Unapproved = unapproved;
            this.UpsAccountNumber = upsAccountNumber;
            this.WebsiteUrl = websiteUrl;
        }

        /// <summary>
        /// Gets or Sets Activity
        /// </summary>
        [DataMember(Name="activity", EmitDefaultValue=false)]
        public CustomerActivity Activity { get; set; }

        /// <summary>
        /// Affiliate oid
        /// </summary>
        /// <value>Affiliate oid</value>
        [DataMember(Name="affiliate_oid", EmitDefaultValue=false)]
        public int AffiliateOid { get; set; }

        /// <summary>
        /// Allow 3rd party billing
        /// </summary>
        /// <value>Allow 3rd party billing</value>
        [DataMember(Name="allow_3rd_party_billing", EmitDefaultValue=false)]
        public bool Allow3rdPartyBilling { get; set; }

        /// <summary>
        /// Allow COD
        /// </summary>
        /// <value>Allow COD</value>
        [DataMember(Name="allow_cod", EmitDefaultValue=false)]
        public bool AllowCod { get; set; }

        /// <summary>
        /// Allow Drop Shipping
        /// </summary>
        /// <value>Allow Drop Shipping</value>
        [DataMember(Name="allow_drop_shipping", EmitDefaultValue=false)]
        public bool AllowDropShipping { get; set; }

        /// <summary>
        /// Allow purchase orders by this customer
        /// </summary>
        /// <value>Allow purchase orders by this customer</value>
        [DataMember(Name="allow_purchase_order", EmitDefaultValue=false)]
        public bool AllowPurchaseOrder { get; set; }

        /// <summary>
        /// Allow quote request
        /// </summary>
        /// <value>Allow quote request</value>
        [DataMember(Name="allow_quote_request", EmitDefaultValue=false)]
        public bool AllowQuoteRequest { get; set; }

        /// <summary>
        /// Allow selection of residential or business address type
        /// </summary>
        /// <value>Allow selection of residential or business address type</value>
        [DataMember(Name="allow_selection_of_address_type", EmitDefaultValue=false)]
        public bool AllowSelectionOfAddressType { get; set; }

        /// <summary>
        /// Attachments
        /// </summary>
        /// <value>Attachments</value>
        [DataMember(Name="attachments", EmitDefaultValue=false)]
        public List<CustomerAttachment> Attachments { get; set; }

        /// <summary>
        /// Auto approve COD
        /// </summary>
        /// <value>Auto approve COD</value>
        [DataMember(Name="auto_approve_cod", EmitDefaultValue=false)]
        public bool AutoApproveCod { get; set; }

        /// <summary>
        /// Auto approve purchase orders by this customer
        /// </summary>
        /// <value>Auto approve purchase orders by this customer</value>
        [DataMember(Name="auto_approve_purchase_order", EmitDefaultValue=false)]
        public bool AutoApprovePurchaseOrder { get; set; }

        /// <summary>
        /// Automatic merchant notes are added to every order placed
        /// </summary>
        /// <value>Automatic merchant notes are added to every order placed</value>
        [DataMember(Name="automatic_merchant_notes", EmitDefaultValue=false)]
        public string AutomaticMerchantNotes { get; set; }

        /// <summary>
        /// Billing addresses for this customer
        /// </summary>
        /// <value>Billing addresses for this customer</value>
        [DataMember(Name="billing", EmitDefaultValue=false)]
        public List<CustomerBilling> Billing { get; set; }

        /// <summary>
        /// Business notes (internally visible only)
        /// </summary>
        /// <value>Business notes (internally visible only)</value>
        [DataMember(Name="business_notes", EmitDefaultValue=false)]
        public string BusinessNotes { get; set; }

        /// <summary>
        /// Credit Cards for this customer
        /// </summary>
        /// <value>Credit Cards for this customer</value>
        [DataMember(Name="cards", EmitDefaultValue=false)]
        public List<CustomerCard> Cards { get; set; }

        /// <summary>
        /// Additional emails to CC notification
        /// </summary>
        /// <value>Additional emails to CC notification</value>
        [DataMember(Name="cc_emails", EmitDefaultValue=false)]
        public List<CustomerEmail> CcEmails { get; set; }

        /// <summary>
        /// Customer profile object identifier
        /// </summary>
        /// <value>Customer profile object identifier</value>
        [DataMember(Name="customer_profile_oid", EmitDefaultValue=false)]
        public int CustomerProfileOid { get; set; }

        /// <summary>
        /// DHL account number
        /// </summary>
        /// <value>DHL account number</value>
        [DataMember(Name="dhl_account_number", EmitDefaultValue=false)]
        public string DhlAccountNumber { get; set; }

        /// <summary>
        /// DHL duty account number
        /// </summary>
        /// <value>DHL duty account number</value>
        [DataMember(Name="dhl_duty_account_number", EmitDefaultValue=false)]
        public string DhlDutyAccountNumber { get; set; }

        /// <summary>
        /// Do not send mail (null will not update)
        /// </summary>
        /// <value>Do not send mail (null will not update)</value>
        [DataMember(Name="do_not_send_mail", EmitDefaultValue=false)]
        public bool DoNotSendMail { get; set; }

        /// <summary>
        /// Gets or Sets Edi
        /// </summary>
        [DataMember(Name="edi", EmitDefaultValue=false)]
        public CustomerEDI Edi { get; set; }

        /// <summary>
        /// Email address of this customer profile
        /// </summary>
        /// <value>Email address of this customer profile</value>
        [DataMember(Name="email", EmitDefaultValue=false)]
        public string Email { get; set; }

        /// <summary>
        /// Exempt shipping handling charge
        /// </summary>
        /// <value>Exempt shipping handling charge</value>
        [DataMember(Name="exempt_shipping_handling_charge", EmitDefaultValue=false)]
        public bool ExemptShippingHandlingCharge { get; set; }

        /// <summary>
        /// Fax Number
        /// </summary>
        /// <value>Fax Number</value>
        [DataMember(Name="fax", EmitDefaultValue=false)]
        public string Fax { get; set; }

        /// <summary>
        /// FedEx account number
        /// </summary>
        /// <value>FedEx account number</value>
        [DataMember(Name="fedex_account_number", EmitDefaultValue=false)]
        public string FedexAccountNumber { get; set; }

        /// <summary>
        /// This customer always receives free shipping
        /// </summary>
        /// <value>This customer always receives free shipping</value>
        [DataMember(Name="free_shipping", EmitDefaultValue=false)]
        public bool FreeShipping { get; set; }

        /// <summary>
        /// If free_shipping is true, this is the minimum subtotal required for free shipping
        /// </summary>
        /// <value>If free_shipping is true, this is the minimum subtotal required for free shipping</value>
        [DataMember(Name="free_shipping_minimum", EmitDefaultValue=false)]
        public decimal FreeShippingMinimum { get; set; }

        /// <summary>
        /// Last modified by
        /// </summary>
        /// <value>Last modified by</value>
        [DataMember(Name="last_modified_by", EmitDefaultValue=false)]
        public string LastModifiedBy { get; set; }

        /// <summary>
        /// Last modified date
        /// </summary>
        /// <value>Last modified date</value>
        [DataMember(Name="last_modified_dts", EmitDefaultValue=false)]
        public string LastModifiedDts { get; set; }

        /// <summary>
        /// Gets or Sets Loyalty
        /// </summary>
        [DataMember(Name="loyalty", EmitDefaultValue=false)]
        public CustomerLoyalty Loyalty { get; set; }

        /// <summary>
        /// Maximum item count
        /// </summary>
        /// <value>Maximum item count</value>
        [DataMember(Name="maximum_item_count", EmitDefaultValue=false)]
        public int MaximumItemCount { get; set; }

        /// <summary>
        /// Merchant ID
        /// </summary>
        /// <value>Merchant ID</value>
        [DataMember(Name="merchant_id", EmitDefaultValue=false)]
        public string MerchantId { get; set; }

        /// <summary>
        /// Minimum item count
        /// </summary>
        /// <value>Minimum item count</value>
        [DataMember(Name="minimum_item_count", EmitDefaultValue=false)]
        public int MinimumItemCount { get; set; }

        /// <summary>
        /// Minimum subtotal
        /// </summary>
        /// <value>Minimum subtotal</value>
        [DataMember(Name="minimum_subtotal", EmitDefaultValue=false)]
        public decimal MinimumSubtotal { get; set; }

        /// <summary>
        /// No coupons
        /// </summary>
        /// <value>No coupons</value>
        [DataMember(Name="no_coupons", EmitDefaultValue=false)]
        public bool NoCoupons { get; set; }

        /// <summary>
        /// No free shipping regardless of coupons or item level settings
        /// </summary>
        /// <value>No free shipping regardless of coupons or item level settings</value>
        [DataMember(Name="no_free_shipping", EmitDefaultValue=false)]
        public bool NoFreeShipping { get; set; }

        /// <summary>
        /// No realtime charge
        /// </summary>
        /// <value>No realtime charge</value>
        [DataMember(Name="no_realtime_charge", EmitDefaultValue=false)]
        public bool NoRealtimeCharge { get; set; }

        /// <summary>
        /// Orders associated with this customer profile
        /// </summary>
        /// <value>Orders associated with this customer profile</value>
        [DataMember(Name="orders", EmitDefaultValue=false)]
        public List<Order> Orders { get; set; }

        /// <summary>
        /// Gets or Sets OrdersSummary
        /// </summary>
        [DataMember(Name="orders_summary", EmitDefaultValue=false)]
        public CustomerOrdersSummary OrdersSummary { get; set; }

        /// <summary>
        /// Password (may only be set, never read)
        /// </summary>
        /// <value>Password (may only be set, never read)</value>
        [DataMember(Name="password", EmitDefaultValue=false)]
        public string Password { get; set; }

        /// <summary>
        /// Pricing tiers for this customer
        /// </summary>
        /// <value>Pricing tiers for this customer</value>
        [DataMember(Name="pricing_tiers", EmitDefaultValue=false)]
        public List<CustomerPricingTier> PricingTiers { get; set; }

        /// <summary>
        /// Gets or Sets Privacy
        /// </summary>
        [DataMember(Name="privacy", EmitDefaultValue=false)]
        public CustomerPrivacy Privacy { get; set; }

        /// <summary>
        /// Properties for this customer
        /// </summary>
        /// <value>Properties for this customer</value>
        [DataMember(Name="properties", EmitDefaultValue=false)]
        public List<CustomerProperty> Properties { get; set; }

        /// <summary>
        /// QuickBooks class to import this customer as
        /// </summary>
        /// <value>QuickBooks class to import this customer as</value>
        [DataMember(Name="qb_class", EmitDefaultValue=false)]
        public string QbClass { get; set; }

        /// <summary>
        /// QuickBooks name to import this customer as
        /// </summary>
        /// <value>QuickBooks name to import this customer as</value>
        [DataMember(Name="qb_code", EmitDefaultValue=false)]
        public string QbCode { get; set; }

        /// <summary>
        /// QuickBooks tax exemption reason code
        /// </summary>
        /// <value>QuickBooks tax exemption reason code</value>
        [DataMember(Name="qb_tax_exemption_reason_code", EmitDefaultValue=false)]
        public int QbTaxExemptionReasonCode { get; set; }

        /// <summary>
        /// Quotes associated with this customer profile
        /// </summary>
        /// <value>Quotes associated with this customer profile</value>
        [DataMember(Name="quotes", EmitDefaultValue=false)]
        public List<Order> Quotes { get; set; }

        /// <summary>
        /// Gets or Sets QuotesSummary
        /// </summary>
        [DataMember(Name="quotes_summary", EmitDefaultValue=false)]
        public CustomerQuotesSummary QuotesSummary { get; set; }

        /// <summary>
        /// Referral Source
        /// </summary>
        /// <value>Referral Source</value>
        [DataMember(Name="referral_source", EmitDefaultValue=false)]
        public string ReferralSource { get; set; }

        /// <summary>
        /// Gets or Sets Reviewer
        /// </summary>
        [DataMember(Name="reviewer", EmitDefaultValue=false)]
        public CustomerReviewer Reviewer { get; set; }

        /// <summary>
        /// Sales rep code
        /// </summary>
        /// <value>Sales rep code</value>
        [DataMember(Name="sales_rep_code", EmitDefaultValue=false)]
        public string SalesRepCode { get; set; }

        /// <summary>
        /// Send signup notification, if true during customer creation, will send a notification.
        /// </summary>
        /// <value>Send signup notification, if true during customer creation, will send a notification.</value>
        [DataMember(Name="send_signup_notification", EmitDefaultValue=false)]
        public bool SendSignupNotification { get; set; }

        /// <summary>
        /// Shipping addresses for this customer
        /// </summary>
        /// <value>Shipping addresses for this customer</value>
        [DataMember(Name="shipping", EmitDefaultValue=false)]
        public List<CustomerShipping> Shipping { get; set; }

        /// <summary>
        /// Signup date
        /// </summary>
        /// <value>Signup date</value>
        [DataMember(Name="signup_dts", EmitDefaultValue=false)]
        public string SignupDts { get; set; }

        /// <summary>
        /// Software entitlements owned by this customer
        /// </summary>
        /// <value>Software entitlements owned by this customer</value>
        [DataMember(Name="software_entitlements", EmitDefaultValue=false)]
        public List<CustomerSoftwareEntitlement> SoftwareEntitlements { get; set; }

        /// <summary>
        /// Suppress buySAFE (deprecated)
        /// </summary>
        /// <value>Suppress buySAFE (deprecated)</value>
        [DataMember(Name="suppress_buysafe", EmitDefaultValue=false)]
        public bool SuppressBuysafe { get; set; }

        /// <summary>
        /// Tags for this customer
        /// </summary>
        /// <value>Tags for this customer</value>
        [DataMember(Name="tags", EmitDefaultValue=false)]
        public List<CustomerTag> Tags { get; set; }

        /// <summary>
        /// Gets or Sets TaxCodes
        /// </summary>
        [DataMember(Name="tax_codes", EmitDefaultValue=false)]
        public CustomerTaxCodes TaxCodes { get; set; }

        /// <summary>
        /// True if the customer is tax exempt
        /// </summary>
        /// <value>True if the customer is tax exempt</value>
        [DataMember(Name="tax_exempt", EmitDefaultValue=false)]
        public bool TaxExempt { get; set; }

        /// <summary>
        /// Tax ID
        /// </summary>
        /// <value>Tax ID</value>
        [DataMember(Name="tax_id", EmitDefaultValue=false)]
        public string TaxId { get; set; }

        /// <summary>
        /// Terms for this customer
        /// </summary>
        /// <value>Terms for this customer</value>
        [DataMember(Name="terms", EmitDefaultValue=false)]
        public string Terms { get; set; }

        /// <summary>
        /// True if the customer should be tracked separately in QuickBooks
        /// </summary>
        /// <value>True if the customer should be tracked separately in QuickBooks</value>
        [DataMember(Name="track_separately", EmitDefaultValue=false)]
        public bool TrackSeparately { get; set; }

        /// <summary>
        /// Unapproved
        /// </summary>
        /// <value>Unapproved</value>
        [DataMember(Name="unapproved", EmitDefaultValue=false)]
        public bool Unapproved { get; set; }

        /// <summary>
        /// UPS account number
        /// </summary>
        /// <value>UPS account number</value>
        [DataMember(Name="ups_account_number", EmitDefaultValue=false)]
        public string UpsAccountNumber { get; set; }

        /// <summary>
        /// Website url
        /// </summary>
        /// <value>Website url</value>
        [DataMember(Name="website_url", EmitDefaultValue=false)]
        public string WebsiteUrl { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Customer {\n");
            sb.Append("  Activity: ").Append(Activity).Append("\n");
            sb.Append("  AffiliateOid: ").Append(AffiliateOid).Append("\n");
            sb.Append("  Allow3rdPartyBilling: ").Append(Allow3rdPartyBilling).Append("\n");
            sb.Append("  AllowCod: ").Append(AllowCod).Append("\n");
            sb.Append("  AllowDropShipping: ").Append(AllowDropShipping).Append("\n");
            sb.Append("  AllowPurchaseOrder: ").Append(AllowPurchaseOrder).Append("\n");
            sb.Append("  AllowQuoteRequest: ").Append(AllowQuoteRequest).Append("\n");
            sb.Append("  AllowSelectionOfAddressType: ").Append(AllowSelectionOfAddressType).Append("\n");
            sb.Append("  Attachments: ").Append(Attachments).Append("\n");
            sb.Append("  AutoApproveCod: ").Append(AutoApproveCod).Append("\n");
            sb.Append("  AutoApprovePurchaseOrder: ").Append(AutoApprovePurchaseOrder).Append("\n");
            sb.Append("  AutomaticMerchantNotes: ").Append(AutomaticMerchantNotes).Append("\n");
            sb.Append("  Billing: ").Append(Billing).Append("\n");
            sb.Append("  BusinessNotes: ").Append(BusinessNotes).Append("\n");
            sb.Append("  Cards: ").Append(Cards).Append("\n");
            sb.Append("  CcEmails: ").Append(CcEmails).Append("\n");
            sb.Append("  CustomerProfileOid: ").Append(CustomerProfileOid).Append("\n");
            sb.Append("  DhlAccountNumber: ").Append(DhlAccountNumber).Append("\n");
            sb.Append("  DhlDutyAccountNumber: ").Append(DhlDutyAccountNumber).Append("\n");
            sb.Append("  DoNotSendMail: ").Append(DoNotSendMail).Append("\n");
            sb.Append("  Edi: ").Append(Edi).Append("\n");
            sb.Append("  Email: ").Append(Email).Append("\n");
            sb.Append("  ExemptShippingHandlingCharge: ").Append(ExemptShippingHandlingCharge).Append("\n");
            sb.Append("  Fax: ").Append(Fax).Append("\n");
            sb.Append("  FedexAccountNumber: ").Append(FedexAccountNumber).Append("\n");
            sb.Append("  FreeShipping: ").Append(FreeShipping).Append("\n");
            sb.Append("  FreeShippingMinimum: ").Append(FreeShippingMinimum).Append("\n");
            sb.Append("  LastModifiedBy: ").Append(LastModifiedBy).Append("\n");
            sb.Append("  LastModifiedDts: ").Append(LastModifiedDts).Append("\n");
            sb.Append("  Loyalty: ").Append(Loyalty).Append("\n");
            sb.Append("  MaximumItemCount: ").Append(MaximumItemCount).Append("\n");
            sb.Append("  MerchantId: ").Append(MerchantId).Append("\n");
            sb.Append("  MinimumItemCount: ").Append(MinimumItemCount).Append("\n");
            sb.Append("  MinimumSubtotal: ").Append(MinimumSubtotal).Append("\n");
            sb.Append("  NoCoupons: ").Append(NoCoupons).Append("\n");
            sb.Append("  NoFreeShipping: ").Append(NoFreeShipping).Append("\n");
            sb.Append("  NoRealtimeCharge: ").Append(NoRealtimeCharge).Append("\n");
            sb.Append("  Orders: ").Append(Orders).Append("\n");
            sb.Append("  OrdersSummary: ").Append(OrdersSummary).Append("\n");
            sb.Append("  Password: ").Append(Password).Append("\n");
            sb.Append("  PricingTiers: ").Append(PricingTiers).Append("\n");
            sb.Append("  Privacy: ").Append(Privacy).Append("\n");
            sb.Append("  Properties: ").Append(Properties).Append("\n");
            sb.Append("  QbClass: ").Append(QbClass).Append("\n");
            sb.Append("  QbCode: ").Append(QbCode).Append("\n");
            sb.Append("  QbTaxExemptionReasonCode: ").Append(QbTaxExemptionReasonCode).Append("\n");
            sb.Append("  Quotes: ").Append(Quotes).Append("\n");
            sb.Append("  QuotesSummary: ").Append(QuotesSummary).Append("\n");
            sb.Append("  ReferralSource: ").Append(ReferralSource).Append("\n");
            sb.Append("  Reviewer: ").Append(Reviewer).Append("\n");
            sb.Append("  SalesRepCode: ").Append(SalesRepCode).Append("\n");
            sb.Append("  SendSignupNotification: ").Append(SendSignupNotification).Append("\n");
            sb.Append("  Shipping: ").Append(Shipping).Append("\n");
            sb.Append("  SignupDts: ").Append(SignupDts).Append("\n");
            sb.Append("  SoftwareEntitlements: ").Append(SoftwareEntitlements).Append("\n");
            sb.Append("  SuppressBuysafe: ").Append(SuppressBuysafe).Append("\n");
            sb.Append("  Tags: ").Append(Tags).Append("\n");
            sb.Append("  TaxCodes: ").Append(TaxCodes).Append("\n");
            sb.Append("  TaxExempt: ").Append(TaxExempt).Append("\n");
            sb.Append("  TaxId: ").Append(TaxId).Append("\n");
            sb.Append("  Terms: ").Append(Terms).Append("\n");
            sb.Append("  TrackSeparately: ").Append(TrackSeparately).Append("\n");
            sb.Append("  Unapproved: ").Append(Unapproved).Append("\n");
            sb.Append("  UpsAccountNumber: ").Append(UpsAccountNumber).Append("\n");
            sb.Append("  WebsiteUrl: ").Append(WebsiteUrl).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Customer);
        }

        /// <summary>
        /// Returns true if Customer instances are equal
        /// </summary>
        /// <param name="input">Instance of Customer to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Customer input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Activity == input.Activity ||
                    (this.Activity != null &&
                    this.Activity.Equals(input.Activity))
                ) && 
                (
                    this.AffiliateOid == input.AffiliateOid ||
                    (this.AffiliateOid != null &&
                    this.AffiliateOid.Equals(input.AffiliateOid))
                ) && 
                (
                    this.Allow3rdPartyBilling == input.Allow3rdPartyBilling ||
                    (this.Allow3rdPartyBilling != null &&
                    this.Allow3rdPartyBilling.Equals(input.Allow3rdPartyBilling))
                ) && 
                (
                    this.AllowCod == input.AllowCod ||
                    (this.AllowCod != null &&
                    this.AllowCod.Equals(input.AllowCod))
                ) && 
                (
                    this.AllowDropShipping == input.AllowDropShipping ||
                    (this.AllowDropShipping != null &&
                    this.AllowDropShipping.Equals(input.AllowDropShipping))
                ) && 
                (
                    this.AllowPurchaseOrder == input.AllowPurchaseOrder ||
                    (this.AllowPurchaseOrder != null &&
                    this.AllowPurchaseOrder.Equals(input.AllowPurchaseOrder))
                ) && 
                (
                    this.AllowQuoteRequest == input.AllowQuoteRequest ||
                    (this.AllowQuoteRequest != null &&
                    this.AllowQuoteRequest.Equals(input.AllowQuoteRequest))
                ) && 
                (
                    this.AllowSelectionOfAddressType == input.AllowSelectionOfAddressType ||
                    (this.AllowSelectionOfAddressType != null &&
                    this.AllowSelectionOfAddressType.Equals(input.AllowSelectionOfAddressType))
                ) && 
                (
                    this.Attachments == input.Attachments ||
                    this.Attachments != null &&
                    input.Attachments != null &&
                    this.Attachments.SequenceEqual(input.Attachments)
                ) && 
                (
                    this.AutoApproveCod == input.AutoApproveCod ||
                    (this.AutoApproveCod != null &&
                    this.AutoApproveCod.Equals(input.AutoApproveCod))
                ) && 
                (
                    this.AutoApprovePurchaseOrder == input.AutoApprovePurchaseOrder ||
                    (this.AutoApprovePurchaseOrder != null &&
                    this.AutoApprovePurchaseOrder.Equals(input.AutoApprovePurchaseOrder))
                ) && 
                (
                    this.AutomaticMerchantNotes == input.AutomaticMerchantNotes ||
                    (this.AutomaticMerchantNotes != null &&
                    this.AutomaticMerchantNotes.Equals(input.AutomaticMerchantNotes))
                ) && 
                (
                    this.Billing == input.Billing ||
                    this.Billing != null &&
                    input.Billing != null &&
                    this.Billing.SequenceEqual(input.Billing)
                ) && 
                (
                    this.BusinessNotes == input.BusinessNotes ||
                    (this.BusinessNotes != null &&
                    this.BusinessNotes.Equals(input.BusinessNotes))
                ) && 
                (
                    this.Cards == input.Cards ||
                    this.Cards != null &&
                    input.Cards != null &&
                    this.Cards.SequenceEqual(input.Cards)
                ) && 
                (
                    this.CcEmails == input.CcEmails ||
                    this.CcEmails != null &&
                    input.CcEmails != null &&
                    this.CcEmails.SequenceEqual(input.CcEmails)
                ) && 
                (
                    this.CustomerProfileOid == input.CustomerProfileOid ||
                    (this.CustomerProfileOid != null &&
                    this.CustomerProfileOid.Equals(input.CustomerProfileOid))
                ) && 
                (
                    this.DhlAccountNumber == input.DhlAccountNumber ||
                    (this.DhlAccountNumber != null &&
                    this.DhlAccountNumber.Equals(input.DhlAccountNumber))
                ) && 
                (
                    this.DhlDutyAccountNumber == input.DhlDutyAccountNumber ||
                    (this.DhlDutyAccountNumber != null &&
                    this.DhlDutyAccountNumber.Equals(input.DhlDutyAccountNumber))
                ) && 
                (
                    this.DoNotSendMail == input.DoNotSendMail ||
                    (this.DoNotSendMail != null &&
                    this.DoNotSendMail.Equals(input.DoNotSendMail))
                ) && 
                (
                    this.Edi == input.Edi ||
                    (this.Edi != null &&
                    this.Edi.Equals(input.Edi))
                ) && 
                (
                    this.Email == input.Email ||
                    (this.Email != null &&
                    this.Email.Equals(input.Email))
                ) && 
                (
                    this.ExemptShippingHandlingCharge == input.ExemptShippingHandlingCharge ||
                    (this.ExemptShippingHandlingCharge != null &&
                    this.ExemptShippingHandlingCharge.Equals(input.ExemptShippingHandlingCharge))
                ) && 
                (
                    this.Fax == input.Fax ||
                    (this.Fax != null &&
                    this.Fax.Equals(input.Fax))
                ) && 
                (
                    this.FedexAccountNumber == input.FedexAccountNumber ||
                    (this.FedexAccountNumber != null &&
                    this.FedexAccountNumber.Equals(input.FedexAccountNumber))
                ) && 
                (
                    this.FreeShipping == input.FreeShipping ||
                    (this.FreeShipping != null &&
                    this.FreeShipping.Equals(input.FreeShipping))
                ) && 
                (
                    this.FreeShippingMinimum == input.FreeShippingMinimum ||
                    (this.FreeShippingMinimum != null &&
                    this.FreeShippingMinimum.Equals(input.FreeShippingMinimum))
                ) && 
                (
                    this.LastModifiedBy == input.LastModifiedBy ||
                    (this.LastModifiedBy != null &&
                    this.LastModifiedBy.Equals(input.LastModifiedBy))
                ) && 
                (
                    this.LastModifiedDts == input.LastModifiedDts ||
                    (this.LastModifiedDts != null &&
                    this.LastModifiedDts.Equals(input.LastModifiedDts))
                ) && 
                (
                    this.Loyalty == input.Loyalty ||
                    (this.Loyalty != null &&
                    this.Loyalty.Equals(input.Loyalty))
                ) && 
                (
                    this.MaximumItemCount == input.MaximumItemCount ||
                    (this.MaximumItemCount != null &&
                    this.MaximumItemCount.Equals(input.MaximumItemCount))
                ) && 
                (
                    this.MerchantId == input.MerchantId ||
                    (this.MerchantId != null &&
                    this.MerchantId.Equals(input.MerchantId))
                ) && 
                (
                    this.MinimumItemCount == input.MinimumItemCount ||
                    (this.MinimumItemCount != null &&
                    this.MinimumItemCount.Equals(input.MinimumItemCount))
                ) && 
                (
                    this.MinimumSubtotal == input.MinimumSubtotal ||
                    (this.MinimumSubtotal != null &&
                    this.MinimumSubtotal.Equals(input.MinimumSubtotal))
                ) && 
                (
                    this.NoCoupons == input.NoCoupons ||
                    (this.NoCoupons != null &&
                    this.NoCoupons.Equals(input.NoCoupons))
                ) && 
                (
                    this.NoFreeShipping == input.NoFreeShipping ||
                    (this.NoFreeShipping != null &&
                    this.NoFreeShipping.Equals(input.NoFreeShipping))
                ) && 
                (
                    this.NoRealtimeCharge == input.NoRealtimeCharge ||
                    (this.NoRealtimeCharge != null &&
                    this.NoRealtimeCharge.Equals(input.NoRealtimeCharge))
                ) && 
                (
                    this.Orders == input.Orders ||
                    this.Orders != null &&
                    input.Orders != null &&
                    this.Orders.SequenceEqual(input.Orders)
                ) && 
                (
                    this.OrdersSummary == input.OrdersSummary ||
                    (this.OrdersSummary != null &&
                    this.OrdersSummary.Equals(input.OrdersSummary))
                ) && 
                (
                    this.Password == input.Password ||
                    (this.Password != null &&
                    this.Password.Equals(input.Password))
                ) && 
                (
                    this.PricingTiers == input.PricingTiers ||
                    this.PricingTiers != null &&
                    input.PricingTiers != null &&
                    this.PricingTiers.SequenceEqual(input.PricingTiers)
                ) && 
                (
                    this.Privacy == input.Privacy ||
                    (this.Privacy != null &&
                    this.Privacy.Equals(input.Privacy))
                ) && 
                (
                    this.Properties == input.Properties ||
                    this.Properties != null &&
                    input.Properties != null &&
                    this.Properties.SequenceEqual(input.Properties)
                ) && 
                (
                    this.QbClass == input.QbClass ||
                    (this.QbClass != null &&
                    this.QbClass.Equals(input.QbClass))
                ) && 
                (
                    this.QbCode == input.QbCode ||
                    (this.QbCode != null &&
                    this.QbCode.Equals(input.QbCode))
                ) && 
                (
                    this.QbTaxExemptionReasonCode == input.QbTaxExemptionReasonCode ||
                    (this.QbTaxExemptionReasonCode != null &&
                    this.QbTaxExemptionReasonCode.Equals(input.QbTaxExemptionReasonCode))
                ) && 
                (
                    this.Quotes == input.Quotes ||
                    this.Quotes != null &&
                    input.Quotes != null &&
                    this.Quotes.SequenceEqual(input.Quotes)
                ) && 
                (
                    this.QuotesSummary == input.QuotesSummary ||
                    (this.QuotesSummary != null &&
                    this.QuotesSummary.Equals(input.QuotesSummary))
                ) && 
                (
                    this.ReferralSource == input.ReferralSource ||
                    (this.ReferralSource != null &&
                    this.ReferralSource.Equals(input.ReferralSource))
                ) && 
                (
                    this.Reviewer == input.Reviewer ||
                    (this.Reviewer != null &&
                    this.Reviewer.Equals(input.Reviewer))
                ) && 
                (
                    this.SalesRepCode == input.SalesRepCode ||
                    (this.SalesRepCode != null &&
                    this.SalesRepCode.Equals(input.SalesRepCode))
                ) && 
                (
                    this.SendSignupNotification == input.SendSignupNotification ||
                    (this.SendSignupNotification != null &&
                    this.SendSignupNotification.Equals(input.SendSignupNotification))
                ) && 
                (
                    this.Shipping == input.Shipping ||
                    this.Shipping != null &&
                    input.Shipping != null &&
                    this.Shipping.SequenceEqual(input.Shipping)
                ) && 
                (
                    this.SignupDts == input.SignupDts ||
                    (this.SignupDts != null &&
                    this.SignupDts.Equals(input.SignupDts))
                ) && 
                (
                    this.SoftwareEntitlements == input.SoftwareEntitlements ||
                    this.SoftwareEntitlements != null &&
                    input.SoftwareEntitlements != null &&
                    this.SoftwareEntitlements.SequenceEqual(input.SoftwareEntitlements)
                ) && 
                (
                    this.SuppressBuysafe == input.SuppressBuysafe ||
                    (this.SuppressBuysafe != null &&
                    this.SuppressBuysafe.Equals(input.SuppressBuysafe))
                ) && 
                (
                    this.Tags == input.Tags ||
                    this.Tags != null &&
                    input.Tags != null &&
                    this.Tags.SequenceEqual(input.Tags)
                ) && 
                (
                    this.TaxCodes == input.TaxCodes ||
                    (this.TaxCodes != null &&
                    this.TaxCodes.Equals(input.TaxCodes))
                ) && 
                (
                    this.TaxExempt == input.TaxExempt ||
                    (this.TaxExempt != null &&
                    this.TaxExempt.Equals(input.TaxExempt))
                ) && 
                (
                    this.TaxId == input.TaxId ||
                    (this.TaxId != null &&
                    this.TaxId.Equals(input.TaxId))
                ) && 
                (
                    this.Terms == input.Terms ||
                    (this.Terms != null &&
                    this.Terms.Equals(input.Terms))
                ) && 
                (
                    this.TrackSeparately == input.TrackSeparately ||
                    (this.TrackSeparately != null &&
                    this.TrackSeparately.Equals(input.TrackSeparately))
                ) && 
                (
                    this.Unapproved == input.Unapproved ||
                    (this.Unapproved != null &&
                    this.Unapproved.Equals(input.Unapproved))
                ) && 
                (
                    this.UpsAccountNumber == input.UpsAccountNumber ||
                    (this.UpsAccountNumber != null &&
                    this.UpsAccountNumber.Equals(input.UpsAccountNumber))
                ) && 
                (
                    this.WebsiteUrl == input.WebsiteUrl ||
                    (this.WebsiteUrl != null &&
                    this.WebsiteUrl.Equals(input.WebsiteUrl))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Activity != null)
                    hashCode = hashCode * 59 + this.Activity.GetHashCode();
                if (this.AffiliateOid != null)
                    hashCode = hashCode * 59 + this.AffiliateOid.GetHashCode();
                if (this.Allow3rdPartyBilling != null)
                    hashCode = hashCode * 59 + this.Allow3rdPartyBilling.GetHashCode();
                if (this.AllowCod != null)
                    hashCode = hashCode * 59 + this.AllowCod.GetHashCode();
                if (this.AllowDropShipping != null)
                    hashCode = hashCode * 59 + this.AllowDropShipping.GetHashCode();
                if (this.AllowPurchaseOrder != null)
                    hashCode = hashCode * 59 + this.AllowPurchaseOrder.GetHashCode();
                if (this.AllowQuoteRequest != null)
                    hashCode = hashCode * 59 + this.AllowQuoteRequest.GetHashCode();
                if (this.AllowSelectionOfAddressType != null)
                    hashCode = hashCode * 59 + this.AllowSelectionOfAddressType.GetHashCode();
                if (this.Attachments != null)
                    hashCode = hashCode * 59 + this.Attachments.GetHashCode();
                if (this.AutoApproveCod != null)
                    hashCode = hashCode * 59 + this.AutoApproveCod.GetHashCode();
                if (this.AutoApprovePurchaseOrder != null)
                    hashCode = hashCode * 59 + this.AutoApprovePurchaseOrder.GetHashCode();
                if (this.AutomaticMerchantNotes != null)
                    hashCode = hashCode * 59 + this.AutomaticMerchantNotes.GetHashCode();
                if (this.Billing != null)
                    hashCode = hashCode * 59 + this.Billing.GetHashCode();
                if (this.BusinessNotes != null)
                    hashCode = hashCode * 59 + this.BusinessNotes.GetHashCode();
                if (this.Cards != null)
                    hashCode = hashCode * 59 + this.Cards.GetHashCode();
                if (this.CcEmails != null)
                    hashCode = hashCode * 59 + this.CcEmails.GetHashCode();
                if (this.CustomerProfileOid != null)
                    hashCode = hashCode * 59 + this.CustomerProfileOid.GetHashCode();
                if (this.DhlAccountNumber != null)
                    hashCode = hashCode * 59 + this.DhlAccountNumber.GetHashCode();
                if (this.DhlDutyAccountNumber != null)
                    hashCode = hashCode * 59 + this.DhlDutyAccountNumber.GetHashCode();
                if (this.DoNotSendMail != null)
                    hashCode = hashCode * 59 + this.DoNotSendMail.GetHashCode();
                if (this.Edi != null)
                    hashCode = hashCode * 59 + this.Edi.GetHashCode();
                if (this.Email != null)
                    hashCode = hashCode * 59 + this.Email.GetHashCode();
                if (this.ExemptShippingHandlingCharge != null)
                    hashCode = hashCode * 59 + this.ExemptShippingHandlingCharge.GetHashCode();
                if (this.Fax != null)
                    hashCode = hashCode * 59 + this.Fax.GetHashCode();
                if (this.FedexAccountNumber != null)
                    hashCode = hashCode * 59 + this.FedexAccountNumber.GetHashCode();
                if (this.FreeShipping != null)
                    hashCode = hashCode * 59 + this.FreeShipping.GetHashCode();
                if (this.FreeShippingMinimum != null)
                    hashCode = hashCode * 59 + this.FreeShippingMinimum.GetHashCode();
                if (this.LastModifiedBy != null)
                    hashCode = hashCode * 59 + this.LastModifiedBy.GetHashCode();
                if (this.LastModifiedDts != null)
                    hashCode = hashCode * 59 + this.LastModifiedDts.GetHashCode();
                if (this.Loyalty != null)
                    hashCode = hashCode * 59 + this.Loyalty.GetHashCode();
                if (this.MaximumItemCount != null)
                    hashCode = hashCode * 59 + this.MaximumItemCount.GetHashCode();
                if (this.MerchantId != null)
                    hashCode = hashCode * 59 + this.MerchantId.GetHashCode();
                if (this.MinimumItemCount != null)
                    hashCode = hashCode * 59 + this.MinimumItemCount.GetHashCode();
                if (this.MinimumSubtotal != null)
                    hashCode = hashCode * 59 + this.MinimumSubtotal.GetHashCode();
                if (this.NoCoupons != null)
                    hashCode = hashCode * 59 + this.NoCoupons.GetHashCode();
                if (this.NoFreeShipping != null)
                    hashCode = hashCode * 59 + this.NoFreeShipping.GetHashCode();
                if (this.NoRealtimeCharge != null)
                    hashCode = hashCode * 59 + this.NoRealtimeCharge.GetHashCode();
                if (this.Orders != null)
                    hashCode = hashCode * 59 + this.Orders.GetHashCode();
                if (this.OrdersSummary != null)
                    hashCode = hashCode * 59 + this.OrdersSummary.GetHashCode();
                if (this.Password != null)
                    hashCode = hashCode * 59 + this.Password.GetHashCode();
                if (this.PricingTiers != null)
                    hashCode = hashCode * 59 + this.PricingTiers.GetHashCode();
                if (this.Privacy != null)
                    hashCode = hashCode * 59 + this.Privacy.GetHashCode();
                if (this.Properties != null)
                    hashCode = hashCode * 59 + this.Properties.GetHashCode();
                if (this.QbClass != null)
                    hashCode = hashCode * 59 + this.QbClass.GetHashCode();
                if (this.QbCode != null)
                    hashCode = hashCode * 59 + this.QbCode.GetHashCode();
                if (this.QbTaxExemptionReasonCode != null)
                    hashCode = hashCode * 59 + this.QbTaxExemptionReasonCode.GetHashCode();
                if (this.Quotes != null)
                    hashCode = hashCode * 59 + this.Quotes.GetHashCode();
                if (this.QuotesSummary != null)
                    hashCode = hashCode * 59 + this.QuotesSummary.GetHashCode();
                if (this.ReferralSource != null)
                    hashCode = hashCode * 59 + this.ReferralSource.GetHashCode();
                if (this.Reviewer != null)
                    hashCode = hashCode * 59 + this.Reviewer.GetHashCode();
                if (this.SalesRepCode != null)
                    hashCode = hashCode * 59 + this.SalesRepCode.GetHashCode();
                if (this.SendSignupNotification != null)
                    hashCode = hashCode * 59 + this.SendSignupNotification.GetHashCode();
                if (this.Shipping != null)
                    hashCode = hashCode * 59 + this.Shipping.GetHashCode();
                if (this.SignupDts != null)
                    hashCode = hashCode * 59 + this.SignupDts.GetHashCode();
                if (this.SoftwareEntitlements != null)
                    hashCode = hashCode * 59 + this.SoftwareEntitlements.GetHashCode();
                if (this.SuppressBuysafe != null)
                    hashCode = hashCode * 59 + this.SuppressBuysafe.GetHashCode();
                if (this.Tags != null)
                    hashCode = hashCode * 59 + this.Tags.GetHashCode();
                if (this.TaxCodes != null)
                    hashCode = hashCode * 59 + this.TaxCodes.GetHashCode();
                if (this.TaxExempt != null)
                    hashCode = hashCode * 59 + this.TaxExempt.GetHashCode();
                if (this.TaxId != null)
                    hashCode = hashCode * 59 + this.TaxId.GetHashCode();
                if (this.Terms != null)
                    hashCode = hashCode * 59 + this.Terms.GetHashCode();
                if (this.TrackSeparately != null)
                    hashCode = hashCode * 59 + this.TrackSeparately.GetHashCode();
                if (this.Unapproved != null)
                    hashCode = hashCode * 59 + this.Unapproved.GetHashCode();
                if (this.UpsAccountNumber != null)
                    hashCode = hashCode * 59 + this.UpsAccountNumber.GetHashCode();
                if (this.WebsiteUrl != null)
                    hashCode = hashCode * 59 + this.WebsiteUrl.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // BusinessNotes (string) maxLength
            if(this.BusinessNotes != null && this.BusinessNotes.Length > 2000)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for BusinessNotes, length must be less than 2000.", new [] { "BusinessNotes" });
            }


            // DhlAccountNumber (string) maxLength
            if(this.DhlAccountNumber != null && this.DhlAccountNumber.Length > 20)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for DhlAccountNumber, length must be less than 20.", new [] { "DhlAccountNumber" });
            }


            // DhlDutyAccountNumber (string) maxLength
            if(this.DhlDutyAccountNumber != null && this.DhlDutyAccountNumber.Length > 20)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for DhlDutyAccountNumber, length must be less than 20.", new [] { "DhlDutyAccountNumber" });
            }


            // Fax (string) maxLength
            if(this.Fax != null && this.Fax.Length > 32)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Fax, length must be less than 32.", new [] { "Fax" });
            }


            // FedexAccountNumber (string) maxLength
            if(this.FedexAccountNumber != null && this.FedexAccountNumber.Length > 20)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for FedexAccountNumber, length must be less than 20.", new [] { "FedexAccountNumber" });
            }


            // LastModifiedBy (string) maxLength
            if(this.LastModifiedBy != null && this.LastModifiedBy.Length > 100)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for LastModifiedBy, length must be less than 100.", new [] { "LastModifiedBy" });
            }


            // Password (string) maxLength
            if(this.Password != null && this.Password.Length > 30)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Password, length must be less than 30.", new [] { "Password" });
            }


            // ReferralSource (string) maxLength
            if(this.ReferralSource != null && this.ReferralSource.Length > 50)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ReferralSource, length must be less than 50.", new [] { "ReferralSource" });
            }


            // SalesRepCode (string) maxLength
            if(this.SalesRepCode != null && this.SalesRepCode.Length > 10)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for SalesRepCode, length must be less than 10.", new [] { "SalesRepCode" });
            }


            // TaxId (string) maxLength
            if(this.TaxId != null && this.TaxId.Length > 15)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for TaxId, length must be less than 15.", new [] { "TaxId" });
            }


            // UpsAccountNumber (string) maxLength
            if(this.UpsAccountNumber != null && this.UpsAccountNumber.Length > 20)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for UpsAccountNumber, length must be less than 20.", new [] { "UpsAccountNumber" });
            }


            // WebsiteUrl (string) maxLength
            if(this.WebsiteUrl != null && this.WebsiteUrl.Length > 100)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for WebsiteUrl, length must be less than 100.", new [] { "WebsiteUrl" });
            }


            yield break;
        }
    }

}
