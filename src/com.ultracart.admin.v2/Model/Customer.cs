/* 
 * UltraCart Rest API V2
 *
 * This is the next generation UltraCart REST API...
 *
 * OpenAPI spec version: 2.0.0
 * Contact: support@ultracart.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = com.ultracart.admin.v2.Client.SwaggerDateConverter;

namespace com.ultracart.admin.v2.Model
{
    /// <summary>
    /// Customer
    /// </summary>
    [DataContract]
    public partial class Customer :  IEquatable<Customer>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Customer" /> class.
        /// </summary>
        /// <param name="AffiliateOid">Affiliate oid.</param>
        /// <param name="Allow3rdPartyBilling">Allow 3rd party billing.</param>
        /// <param name="AllowCod">Allow COD.</param>
        /// <param name="AllowPurchaseOrder">Allow purchase orders by this customer.</param>
        /// <param name="AllowQuoteRequest">Allow quote request.</param>
        /// <param name="AllowSelectionOfAddressType">Allow selection of residential or business address type.</param>
        /// <param name="AutoApproveCod">Auto approve COD.</param>
        /// <param name="AutoApprovePurchaseOrder">Auto approve purchase orders by this customer.</param>
        /// <param name="AutomaticMerchantNotes">Automatic merchant notes are added to every order placed.</param>
        /// <param name="Billing">Billing addresses for this customer.</param>
        /// <param name="BusinessNotes">Business notes (internally visible only).</param>
        /// <param name="Cards">Credit Cards for this customer.</param>
        /// <param name="CustomerProfileOid">Customer profile object identifier.</param>
        /// <param name="DhlAccountNumber">DHL account number.</param>
        /// <param name="Email">Email address of this customer profile.</param>
        /// <param name="ExemptShippingHandlingCharge">Exempt shipping handling charge.</param>
        /// <param name="FedexAccountNumber">FedEx account number.</param>
        /// <param name="FreeShipping">This customer always receives free shipping.</param>
        /// <param name="FreeShippingMinimum">If free_shipping is true, this is the minimum subtotal required for free shipping.</param>
        /// <param name="LastModifiedBy">Last modified by.</param>
        /// <param name="LastModifiedDts">Last modified date.</param>
        /// <param name="MaximumItemCount">Maximum item count.</param>
        /// <param name="MinimumItemCount">Minimum item count.</param>
        /// <param name="MinimumSubtotal">Minimum subtotal.</param>
        /// <param name="NoCoupons">No coupons.</param>
        /// <param name="NoFreeShipping">No free shipping regardless of coupons or item level settings.</param>
        /// <param name="NoRealtimeCharge">No realtime charge.</param>
        /// <param name="Password">Password (may only be set, never read).</param>
        /// <param name="PricingTiers">Pricing tiers for this customer.</param>
        /// <param name="QbClass">QuickBooks class to import this customer as.</param>
        /// <param name="QbCode">QuickBooks name to import this customer as.</param>
        /// <param name="ReferralSource">Referral Source.</param>
        /// <param name="SalesRepCode">Sales rep code.</param>
        /// <param name="SendSignupNotification">Send signup notification, if true during customer creation, will send a notification..</param>
        /// <param name="Shipping">Shipping addresses for this customer.</param>
        /// <param name="SignupDts">Signup date.</param>
        /// <param name="SuppressBuysafe">Suppress buySAFE.</param>
        /// <param name="TaxExempt">True if the customer is tax exempt.</param>
        /// <param name="TaxId">Tax ID.</param>
        /// <param name="Terms">Terms for this customer.</param>
        /// <param name="TrackSeparately">True if the customer should be tracked separately in QuickBooks.</param>
        /// <param name="Unapproved">Unapproved.</param>
        /// <param name="UpsAccountNumber">UPS account number.</param>
        /// <param name="WebsiteUrl">Website url.</param>
        public Customer(int? AffiliateOid = default(int?), bool? Allow3rdPartyBilling = default(bool?), bool? AllowCod = default(bool?), bool? AllowPurchaseOrder = default(bool?), bool? AllowQuoteRequest = default(bool?), bool? AllowSelectionOfAddressType = default(bool?), bool? AutoApproveCod = default(bool?), bool? AutoApprovePurchaseOrder = default(bool?), string AutomaticMerchantNotes = default(string), List<CustomerBilling> Billing = default(List<CustomerBilling>), string BusinessNotes = default(string), List<CustomerCard> Cards = default(List<CustomerCard>), int? CustomerProfileOid = default(int?), string DhlAccountNumber = default(string), string Email = default(string), bool? ExemptShippingHandlingCharge = default(bool?), string FedexAccountNumber = default(string), bool? FreeShipping = default(bool?), decimal? FreeShippingMinimum = default(decimal?), string LastModifiedBy = default(string), string LastModifiedDts = default(string), int? MaximumItemCount = default(int?), int? MinimumItemCount = default(int?), decimal? MinimumSubtotal = default(decimal?), bool? NoCoupons = default(bool?), bool? NoFreeShipping = default(bool?), bool? NoRealtimeCharge = default(bool?), string Password = default(string), List<CustomerPricingTier> PricingTiers = default(List<CustomerPricingTier>), string QbClass = default(string), string QbCode = default(string), string ReferralSource = default(string), string SalesRepCode = default(string), bool? SendSignupNotification = default(bool?), List<CustomerShipping> Shipping = default(List<CustomerShipping>), string SignupDts = default(string), bool? SuppressBuysafe = default(bool?), bool? TaxExempt = default(bool?), string TaxId = default(string), string Terms = default(string), bool? TrackSeparately = default(bool?), bool? Unapproved = default(bool?), string UpsAccountNumber = default(string), string WebsiteUrl = default(string))
        {
            this.AffiliateOid = AffiliateOid;
            this.Allow3rdPartyBilling = Allow3rdPartyBilling;
            this.AllowCod = AllowCod;
            this.AllowPurchaseOrder = AllowPurchaseOrder;
            this.AllowQuoteRequest = AllowQuoteRequest;
            this.AllowSelectionOfAddressType = AllowSelectionOfAddressType;
            this.AutoApproveCod = AutoApproveCod;
            this.AutoApprovePurchaseOrder = AutoApprovePurchaseOrder;
            this.AutomaticMerchantNotes = AutomaticMerchantNotes;
            this.Billing = Billing;
            this.BusinessNotes = BusinessNotes;
            this.Cards = Cards;
            this.CustomerProfileOid = CustomerProfileOid;
            this.DhlAccountNumber = DhlAccountNumber;
            this.Email = Email;
            this.ExemptShippingHandlingCharge = ExemptShippingHandlingCharge;
            this.FedexAccountNumber = FedexAccountNumber;
            this.FreeShipping = FreeShipping;
            this.FreeShippingMinimum = FreeShippingMinimum;
            this.LastModifiedBy = LastModifiedBy;
            this.LastModifiedDts = LastModifiedDts;
            this.MaximumItemCount = MaximumItemCount;
            this.MinimumItemCount = MinimumItemCount;
            this.MinimumSubtotal = MinimumSubtotal;
            this.NoCoupons = NoCoupons;
            this.NoFreeShipping = NoFreeShipping;
            this.NoRealtimeCharge = NoRealtimeCharge;
            this.Password = Password;
            this.PricingTiers = PricingTiers;
            this.QbClass = QbClass;
            this.QbCode = QbCode;
            this.ReferralSource = ReferralSource;
            this.SalesRepCode = SalesRepCode;
            this.SendSignupNotification = SendSignupNotification;
            this.Shipping = Shipping;
            this.SignupDts = SignupDts;
            this.SuppressBuysafe = SuppressBuysafe;
            this.TaxExempt = TaxExempt;
            this.TaxId = TaxId;
            this.Terms = Terms;
            this.TrackSeparately = TrackSeparately;
            this.Unapproved = Unapproved;
            this.UpsAccountNumber = UpsAccountNumber;
            this.WebsiteUrl = WebsiteUrl;
        }
        
        /// <summary>
        /// Affiliate oid
        /// </summary>
        /// <value>Affiliate oid</value>
        [DataMember(Name="affiliate_oid", EmitDefaultValue=false)]
        public int? AffiliateOid { get; set; }

        /// <summary>
        /// Allow 3rd party billing
        /// </summary>
        /// <value>Allow 3rd party billing</value>
        [DataMember(Name="allow_3rd_party_billing", EmitDefaultValue=false)]
        public bool? Allow3rdPartyBilling { get; set; }

        /// <summary>
        /// Allow COD
        /// </summary>
        /// <value>Allow COD</value>
        [DataMember(Name="allow_cod", EmitDefaultValue=false)]
        public bool? AllowCod { get; set; }

        /// <summary>
        /// Allow purchase orders by this customer
        /// </summary>
        /// <value>Allow purchase orders by this customer</value>
        [DataMember(Name="allow_purchase_order", EmitDefaultValue=false)]
        public bool? AllowPurchaseOrder { get; set; }

        /// <summary>
        /// Allow quote request
        /// </summary>
        /// <value>Allow quote request</value>
        [DataMember(Name="allow_quote_request", EmitDefaultValue=false)]
        public bool? AllowQuoteRequest { get; set; }

        /// <summary>
        /// Allow selection of residential or business address type
        /// </summary>
        /// <value>Allow selection of residential or business address type</value>
        [DataMember(Name="allow_selection_of_address_type", EmitDefaultValue=false)]
        public bool? AllowSelectionOfAddressType { get; set; }

        /// <summary>
        /// Auto approve COD
        /// </summary>
        /// <value>Auto approve COD</value>
        [DataMember(Name="auto_approve_cod", EmitDefaultValue=false)]
        public bool? AutoApproveCod { get; set; }

        /// <summary>
        /// Auto approve purchase orders by this customer
        /// </summary>
        /// <value>Auto approve purchase orders by this customer</value>
        [DataMember(Name="auto_approve_purchase_order", EmitDefaultValue=false)]
        public bool? AutoApprovePurchaseOrder { get; set; }

        /// <summary>
        /// Automatic merchant notes are added to every order placed
        /// </summary>
        /// <value>Automatic merchant notes are added to every order placed</value>
        [DataMember(Name="automatic_merchant_notes", EmitDefaultValue=false)]
        public string AutomaticMerchantNotes { get; set; }

        /// <summary>
        /// Billing addresses for this customer
        /// </summary>
        /// <value>Billing addresses for this customer</value>
        [DataMember(Name="billing", EmitDefaultValue=false)]
        public List<CustomerBilling> Billing { get; set; }

        /// <summary>
        /// Business notes (internally visible only)
        /// </summary>
        /// <value>Business notes (internally visible only)</value>
        [DataMember(Name="business_notes", EmitDefaultValue=false)]
        public string BusinessNotes { get; set; }

        /// <summary>
        /// Credit Cards for this customer
        /// </summary>
        /// <value>Credit Cards for this customer</value>
        [DataMember(Name="cards", EmitDefaultValue=false)]
        public List<CustomerCard> Cards { get; set; }

        /// <summary>
        /// Customer profile object identifier
        /// </summary>
        /// <value>Customer profile object identifier</value>
        [DataMember(Name="customer_profile_oid", EmitDefaultValue=false)]
        public int? CustomerProfileOid { get; set; }

        /// <summary>
        /// DHL account number
        /// </summary>
        /// <value>DHL account number</value>
        [DataMember(Name="dhl_account_number", EmitDefaultValue=false)]
        public string DhlAccountNumber { get; set; }

        /// <summary>
        /// Email address of this customer profile
        /// </summary>
        /// <value>Email address of this customer profile</value>
        [DataMember(Name="email", EmitDefaultValue=false)]
        public string Email { get; set; }

        /// <summary>
        /// Exempt shipping handling charge
        /// </summary>
        /// <value>Exempt shipping handling charge</value>
        [DataMember(Name="exempt_shipping_handling_charge", EmitDefaultValue=false)]
        public bool? ExemptShippingHandlingCharge { get; set; }

        /// <summary>
        /// FedEx account number
        /// </summary>
        /// <value>FedEx account number</value>
        [DataMember(Name="fedex_account_number", EmitDefaultValue=false)]
        public string FedexAccountNumber { get; set; }

        /// <summary>
        /// This customer always receives free shipping
        /// </summary>
        /// <value>This customer always receives free shipping</value>
        [DataMember(Name="free_shipping", EmitDefaultValue=false)]
        public bool? FreeShipping { get; set; }

        /// <summary>
        /// If free_shipping is true, this is the minimum subtotal required for free shipping
        /// </summary>
        /// <value>If free_shipping is true, this is the minimum subtotal required for free shipping</value>
        [DataMember(Name="free_shipping_minimum", EmitDefaultValue=false)]
        public decimal? FreeShippingMinimum { get; set; }

        /// <summary>
        /// Last modified by
        /// </summary>
        /// <value>Last modified by</value>
        [DataMember(Name="last_modified_by", EmitDefaultValue=false)]
        public string LastModifiedBy { get; set; }

        /// <summary>
        /// Last modified date
        /// </summary>
        /// <value>Last modified date</value>
        [DataMember(Name="last_modified_dts", EmitDefaultValue=false)]
        public string LastModifiedDts { get; set; }

        /// <summary>
        /// Maximum item count
        /// </summary>
        /// <value>Maximum item count</value>
        [DataMember(Name="maximum_item_count", EmitDefaultValue=false)]
        public int? MaximumItemCount { get; set; }

        /// <summary>
        /// Minimum item count
        /// </summary>
        /// <value>Minimum item count</value>
        [DataMember(Name="minimum_item_count", EmitDefaultValue=false)]
        public int? MinimumItemCount { get; set; }

        /// <summary>
        /// Minimum subtotal
        /// </summary>
        /// <value>Minimum subtotal</value>
        [DataMember(Name="minimum_subtotal", EmitDefaultValue=false)]
        public decimal? MinimumSubtotal { get; set; }

        /// <summary>
        /// No coupons
        /// </summary>
        /// <value>No coupons</value>
        [DataMember(Name="no_coupons", EmitDefaultValue=false)]
        public bool? NoCoupons { get; set; }

        /// <summary>
        /// No free shipping regardless of coupons or item level settings
        /// </summary>
        /// <value>No free shipping regardless of coupons or item level settings</value>
        [DataMember(Name="no_free_shipping", EmitDefaultValue=false)]
        public bool? NoFreeShipping { get; set; }

        /// <summary>
        /// No realtime charge
        /// </summary>
        /// <value>No realtime charge</value>
        [DataMember(Name="no_realtime_charge", EmitDefaultValue=false)]
        public bool? NoRealtimeCharge { get; set; }

        /// <summary>
        /// Password (may only be set, never read)
        /// </summary>
        /// <value>Password (may only be set, never read)</value>
        [DataMember(Name="password", EmitDefaultValue=false)]
        public string Password { get; set; }

        /// <summary>
        /// Pricing tiers for this customer
        /// </summary>
        /// <value>Pricing tiers for this customer</value>
        [DataMember(Name="pricing_tiers", EmitDefaultValue=false)]
        public List<CustomerPricingTier> PricingTiers { get; set; }

        /// <summary>
        /// QuickBooks class to import this customer as
        /// </summary>
        /// <value>QuickBooks class to import this customer as</value>
        [DataMember(Name="qb_class", EmitDefaultValue=false)]
        public string QbClass { get; set; }

        /// <summary>
        /// QuickBooks name to import this customer as
        /// </summary>
        /// <value>QuickBooks name to import this customer as</value>
        [DataMember(Name="qb_code", EmitDefaultValue=false)]
        public string QbCode { get; set; }

        /// <summary>
        /// Referral Source
        /// </summary>
        /// <value>Referral Source</value>
        [DataMember(Name="referral_source", EmitDefaultValue=false)]
        public string ReferralSource { get; set; }

        /// <summary>
        /// Sales rep code
        /// </summary>
        /// <value>Sales rep code</value>
        [DataMember(Name="sales_rep_code", EmitDefaultValue=false)]
        public string SalesRepCode { get; set; }

        /// <summary>
        /// Send signup notification, if true during customer creation, will send a notification.
        /// </summary>
        /// <value>Send signup notification, if true during customer creation, will send a notification.</value>
        [DataMember(Name="send_signup_notification", EmitDefaultValue=false)]
        public bool? SendSignupNotification { get; set; }

        /// <summary>
        /// Shipping addresses for this customer
        /// </summary>
        /// <value>Shipping addresses for this customer</value>
        [DataMember(Name="shipping", EmitDefaultValue=false)]
        public List<CustomerShipping> Shipping { get; set; }

        /// <summary>
        /// Signup date
        /// </summary>
        /// <value>Signup date</value>
        [DataMember(Name="signup_dts", EmitDefaultValue=false)]
        public string SignupDts { get; set; }

        /// <summary>
        /// Suppress buySAFE
        /// </summary>
        /// <value>Suppress buySAFE</value>
        [DataMember(Name="suppress_buysafe", EmitDefaultValue=false)]
        public bool? SuppressBuysafe { get; set; }

        /// <summary>
        /// True if the customer is tax exempt
        /// </summary>
        /// <value>True if the customer is tax exempt</value>
        [DataMember(Name="tax_exempt", EmitDefaultValue=false)]
        public bool? TaxExempt { get; set; }

        /// <summary>
        /// Tax ID
        /// </summary>
        /// <value>Tax ID</value>
        [DataMember(Name="tax_id", EmitDefaultValue=false)]
        public string TaxId { get; set; }

        /// <summary>
        /// Terms for this customer
        /// </summary>
        /// <value>Terms for this customer</value>
        [DataMember(Name="terms", EmitDefaultValue=false)]
        public string Terms { get; set; }

        /// <summary>
        /// True if the customer should be tracked separately in QuickBooks
        /// </summary>
        /// <value>True if the customer should be tracked separately in QuickBooks</value>
        [DataMember(Name="track_separately", EmitDefaultValue=false)]
        public bool? TrackSeparately { get; set; }

        /// <summary>
        /// Unapproved
        /// </summary>
        /// <value>Unapproved</value>
        [DataMember(Name="unapproved", EmitDefaultValue=false)]
        public bool? Unapproved { get; set; }

        /// <summary>
        /// UPS account number
        /// </summary>
        /// <value>UPS account number</value>
        [DataMember(Name="ups_account_number", EmitDefaultValue=false)]
        public string UpsAccountNumber { get; set; }

        /// <summary>
        /// Website url
        /// </summary>
        /// <value>Website url</value>
        [DataMember(Name="website_url", EmitDefaultValue=false)]
        public string WebsiteUrl { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Customer {\n");
            sb.Append("  AffiliateOid: ").Append(AffiliateOid).Append("\n");
            sb.Append("  Allow3rdPartyBilling: ").Append(Allow3rdPartyBilling).Append("\n");
            sb.Append("  AllowCod: ").Append(AllowCod).Append("\n");
            sb.Append("  AllowPurchaseOrder: ").Append(AllowPurchaseOrder).Append("\n");
            sb.Append("  AllowQuoteRequest: ").Append(AllowQuoteRequest).Append("\n");
            sb.Append("  AllowSelectionOfAddressType: ").Append(AllowSelectionOfAddressType).Append("\n");
            sb.Append("  AutoApproveCod: ").Append(AutoApproveCod).Append("\n");
            sb.Append("  AutoApprovePurchaseOrder: ").Append(AutoApprovePurchaseOrder).Append("\n");
            sb.Append("  AutomaticMerchantNotes: ").Append(AutomaticMerchantNotes).Append("\n");
            sb.Append("  Billing: ").Append(Billing).Append("\n");
            sb.Append("  BusinessNotes: ").Append(BusinessNotes).Append("\n");
            sb.Append("  Cards: ").Append(Cards).Append("\n");
            sb.Append("  CustomerProfileOid: ").Append(CustomerProfileOid).Append("\n");
            sb.Append("  DhlAccountNumber: ").Append(DhlAccountNumber).Append("\n");
            sb.Append("  Email: ").Append(Email).Append("\n");
            sb.Append("  ExemptShippingHandlingCharge: ").Append(ExemptShippingHandlingCharge).Append("\n");
            sb.Append("  FedexAccountNumber: ").Append(FedexAccountNumber).Append("\n");
            sb.Append("  FreeShipping: ").Append(FreeShipping).Append("\n");
            sb.Append("  FreeShippingMinimum: ").Append(FreeShippingMinimum).Append("\n");
            sb.Append("  LastModifiedBy: ").Append(LastModifiedBy).Append("\n");
            sb.Append("  LastModifiedDts: ").Append(LastModifiedDts).Append("\n");
            sb.Append("  MaximumItemCount: ").Append(MaximumItemCount).Append("\n");
            sb.Append("  MinimumItemCount: ").Append(MinimumItemCount).Append("\n");
            sb.Append("  MinimumSubtotal: ").Append(MinimumSubtotal).Append("\n");
            sb.Append("  NoCoupons: ").Append(NoCoupons).Append("\n");
            sb.Append("  NoFreeShipping: ").Append(NoFreeShipping).Append("\n");
            sb.Append("  NoRealtimeCharge: ").Append(NoRealtimeCharge).Append("\n");
            sb.Append("  Password: ").Append(Password).Append("\n");
            sb.Append("  PricingTiers: ").Append(PricingTiers).Append("\n");
            sb.Append("  QbClass: ").Append(QbClass).Append("\n");
            sb.Append("  QbCode: ").Append(QbCode).Append("\n");
            sb.Append("  ReferralSource: ").Append(ReferralSource).Append("\n");
            sb.Append("  SalesRepCode: ").Append(SalesRepCode).Append("\n");
            sb.Append("  SendSignupNotification: ").Append(SendSignupNotification).Append("\n");
            sb.Append("  Shipping: ").Append(Shipping).Append("\n");
            sb.Append("  SignupDts: ").Append(SignupDts).Append("\n");
            sb.Append("  SuppressBuysafe: ").Append(SuppressBuysafe).Append("\n");
            sb.Append("  TaxExempt: ").Append(TaxExempt).Append("\n");
            sb.Append("  TaxId: ").Append(TaxId).Append("\n");
            sb.Append("  Terms: ").Append(Terms).Append("\n");
            sb.Append("  TrackSeparately: ").Append(TrackSeparately).Append("\n");
            sb.Append("  Unapproved: ").Append(Unapproved).Append("\n");
            sb.Append("  UpsAccountNumber: ").Append(UpsAccountNumber).Append("\n");
            sb.Append("  WebsiteUrl: ").Append(WebsiteUrl).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as Customer);
        }

        /// <summary>
        /// Returns true if Customer instances are equal
        /// </summary>
        /// <param name="other">Instance of Customer to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Customer other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.AffiliateOid == other.AffiliateOid ||
                    this.AffiliateOid != null &&
                    this.AffiliateOid.Equals(other.AffiliateOid)
                ) && 
                (
                    this.Allow3rdPartyBilling == other.Allow3rdPartyBilling ||
                    this.Allow3rdPartyBilling != null &&
                    this.Allow3rdPartyBilling.Equals(other.Allow3rdPartyBilling)
                ) && 
                (
                    this.AllowCod == other.AllowCod ||
                    this.AllowCod != null &&
                    this.AllowCod.Equals(other.AllowCod)
                ) && 
                (
                    this.AllowPurchaseOrder == other.AllowPurchaseOrder ||
                    this.AllowPurchaseOrder != null &&
                    this.AllowPurchaseOrder.Equals(other.AllowPurchaseOrder)
                ) && 
                (
                    this.AllowQuoteRequest == other.AllowQuoteRequest ||
                    this.AllowQuoteRequest != null &&
                    this.AllowQuoteRequest.Equals(other.AllowQuoteRequest)
                ) && 
                (
                    this.AllowSelectionOfAddressType == other.AllowSelectionOfAddressType ||
                    this.AllowSelectionOfAddressType != null &&
                    this.AllowSelectionOfAddressType.Equals(other.AllowSelectionOfAddressType)
                ) && 
                (
                    this.AutoApproveCod == other.AutoApproveCod ||
                    this.AutoApproveCod != null &&
                    this.AutoApproveCod.Equals(other.AutoApproveCod)
                ) && 
                (
                    this.AutoApprovePurchaseOrder == other.AutoApprovePurchaseOrder ||
                    this.AutoApprovePurchaseOrder != null &&
                    this.AutoApprovePurchaseOrder.Equals(other.AutoApprovePurchaseOrder)
                ) && 
                (
                    this.AutomaticMerchantNotes == other.AutomaticMerchantNotes ||
                    this.AutomaticMerchantNotes != null &&
                    this.AutomaticMerchantNotes.Equals(other.AutomaticMerchantNotes)
                ) && 
                (
                    this.Billing == other.Billing ||
                    this.Billing != null &&
                    this.Billing.SequenceEqual(other.Billing)
                ) && 
                (
                    this.BusinessNotes == other.BusinessNotes ||
                    this.BusinessNotes != null &&
                    this.BusinessNotes.Equals(other.BusinessNotes)
                ) && 
                (
                    this.Cards == other.Cards ||
                    this.Cards != null &&
                    this.Cards.SequenceEqual(other.Cards)
                ) && 
                (
                    this.CustomerProfileOid == other.CustomerProfileOid ||
                    this.CustomerProfileOid != null &&
                    this.CustomerProfileOid.Equals(other.CustomerProfileOid)
                ) && 
                (
                    this.DhlAccountNumber == other.DhlAccountNumber ||
                    this.DhlAccountNumber != null &&
                    this.DhlAccountNumber.Equals(other.DhlAccountNumber)
                ) && 
                (
                    this.Email == other.Email ||
                    this.Email != null &&
                    this.Email.Equals(other.Email)
                ) && 
                (
                    this.ExemptShippingHandlingCharge == other.ExemptShippingHandlingCharge ||
                    this.ExemptShippingHandlingCharge != null &&
                    this.ExemptShippingHandlingCharge.Equals(other.ExemptShippingHandlingCharge)
                ) && 
                (
                    this.FedexAccountNumber == other.FedexAccountNumber ||
                    this.FedexAccountNumber != null &&
                    this.FedexAccountNumber.Equals(other.FedexAccountNumber)
                ) && 
                (
                    this.FreeShipping == other.FreeShipping ||
                    this.FreeShipping != null &&
                    this.FreeShipping.Equals(other.FreeShipping)
                ) && 
                (
                    this.FreeShippingMinimum == other.FreeShippingMinimum ||
                    this.FreeShippingMinimum != null &&
                    this.FreeShippingMinimum.Equals(other.FreeShippingMinimum)
                ) && 
                (
                    this.LastModifiedBy == other.LastModifiedBy ||
                    this.LastModifiedBy != null &&
                    this.LastModifiedBy.Equals(other.LastModifiedBy)
                ) && 
                (
                    this.LastModifiedDts == other.LastModifiedDts ||
                    this.LastModifiedDts != null &&
                    this.LastModifiedDts.Equals(other.LastModifiedDts)
                ) && 
                (
                    this.MaximumItemCount == other.MaximumItemCount ||
                    this.MaximumItemCount != null &&
                    this.MaximumItemCount.Equals(other.MaximumItemCount)
                ) && 
                (
                    this.MinimumItemCount == other.MinimumItemCount ||
                    this.MinimumItemCount != null &&
                    this.MinimumItemCount.Equals(other.MinimumItemCount)
                ) && 
                (
                    this.MinimumSubtotal == other.MinimumSubtotal ||
                    this.MinimumSubtotal != null &&
                    this.MinimumSubtotal.Equals(other.MinimumSubtotal)
                ) && 
                (
                    this.NoCoupons == other.NoCoupons ||
                    this.NoCoupons != null &&
                    this.NoCoupons.Equals(other.NoCoupons)
                ) && 
                (
                    this.NoFreeShipping == other.NoFreeShipping ||
                    this.NoFreeShipping != null &&
                    this.NoFreeShipping.Equals(other.NoFreeShipping)
                ) && 
                (
                    this.NoRealtimeCharge == other.NoRealtimeCharge ||
                    this.NoRealtimeCharge != null &&
                    this.NoRealtimeCharge.Equals(other.NoRealtimeCharge)
                ) && 
                (
                    this.Password == other.Password ||
                    this.Password != null &&
                    this.Password.Equals(other.Password)
                ) && 
                (
                    this.PricingTiers == other.PricingTiers ||
                    this.PricingTiers != null &&
                    this.PricingTiers.SequenceEqual(other.PricingTiers)
                ) && 
                (
                    this.QbClass == other.QbClass ||
                    this.QbClass != null &&
                    this.QbClass.Equals(other.QbClass)
                ) && 
                (
                    this.QbCode == other.QbCode ||
                    this.QbCode != null &&
                    this.QbCode.Equals(other.QbCode)
                ) && 
                (
                    this.ReferralSource == other.ReferralSource ||
                    this.ReferralSource != null &&
                    this.ReferralSource.Equals(other.ReferralSource)
                ) && 
                (
                    this.SalesRepCode == other.SalesRepCode ||
                    this.SalesRepCode != null &&
                    this.SalesRepCode.Equals(other.SalesRepCode)
                ) && 
                (
                    this.SendSignupNotification == other.SendSignupNotification ||
                    this.SendSignupNotification != null &&
                    this.SendSignupNotification.Equals(other.SendSignupNotification)
                ) && 
                (
                    this.Shipping == other.Shipping ||
                    this.Shipping != null &&
                    this.Shipping.SequenceEqual(other.Shipping)
                ) && 
                (
                    this.SignupDts == other.SignupDts ||
                    this.SignupDts != null &&
                    this.SignupDts.Equals(other.SignupDts)
                ) && 
                (
                    this.SuppressBuysafe == other.SuppressBuysafe ||
                    this.SuppressBuysafe != null &&
                    this.SuppressBuysafe.Equals(other.SuppressBuysafe)
                ) && 
                (
                    this.TaxExempt == other.TaxExempt ||
                    this.TaxExempt != null &&
                    this.TaxExempt.Equals(other.TaxExempt)
                ) && 
                (
                    this.TaxId == other.TaxId ||
                    this.TaxId != null &&
                    this.TaxId.Equals(other.TaxId)
                ) && 
                (
                    this.Terms == other.Terms ||
                    this.Terms != null &&
                    this.Terms.Equals(other.Terms)
                ) && 
                (
                    this.TrackSeparately == other.TrackSeparately ||
                    this.TrackSeparately != null &&
                    this.TrackSeparately.Equals(other.TrackSeparately)
                ) && 
                (
                    this.Unapproved == other.Unapproved ||
                    this.Unapproved != null &&
                    this.Unapproved.Equals(other.Unapproved)
                ) && 
                (
                    this.UpsAccountNumber == other.UpsAccountNumber ||
                    this.UpsAccountNumber != null &&
                    this.UpsAccountNumber.Equals(other.UpsAccountNumber)
                ) && 
                (
                    this.WebsiteUrl == other.WebsiteUrl ||
                    this.WebsiteUrl != null &&
                    this.WebsiteUrl.Equals(other.WebsiteUrl)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.AffiliateOid != null)
                    hash = hash * 59 + this.AffiliateOid.GetHashCode();
                if (this.Allow3rdPartyBilling != null)
                    hash = hash * 59 + this.Allow3rdPartyBilling.GetHashCode();
                if (this.AllowCod != null)
                    hash = hash * 59 + this.AllowCod.GetHashCode();
                if (this.AllowPurchaseOrder != null)
                    hash = hash * 59 + this.AllowPurchaseOrder.GetHashCode();
                if (this.AllowQuoteRequest != null)
                    hash = hash * 59 + this.AllowQuoteRequest.GetHashCode();
                if (this.AllowSelectionOfAddressType != null)
                    hash = hash * 59 + this.AllowSelectionOfAddressType.GetHashCode();
                if (this.AutoApproveCod != null)
                    hash = hash * 59 + this.AutoApproveCod.GetHashCode();
                if (this.AutoApprovePurchaseOrder != null)
                    hash = hash * 59 + this.AutoApprovePurchaseOrder.GetHashCode();
                if (this.AutomaticMerchantNotes != null)
                    hash = hash * 59 + this.AutomaticMerchantNotes.GetHashCode();
                if (this.Billing != null)
                    hash = hash * 59 + this.Billing.GetHashCode();
                if (this.BusinessNotes != null)
                    hash = hash * 59 + this.BusinessNotes.GetHashCode();
                if (this.Cards != null)
                    hash = hash * 59 + this.Cards.GetHashCode();
                if (this.CustomerProfileOid != null)
                    hash = hash * 59 + this.CustomerProfileOid.GetHashCode();
                if (this.DhlAccountNumber != null)
                    hash = hash * 59 + this.DhlAccountNumber.GetHashCode();
                if (this.Email != null)
                    hash = hash * 59 + this.Email.GetHashCode();
                if (this.ExemptShippingHandlingCharge != null)
                    hash = hash * 59 + this.ExemptShippingHandlingCharge.GetHashCode();
                if (this.FedexAccountNumber != null)
                    hash = hash * 59 + this.FedexAccountNumber.GetHashCode();
                if (this.FreeShipping != null)
                    hash = hash * 59 + this.FreeShipping.GetHashCode();
                if (this.FreeShippingMinimum != null)
                    hash = hash * 59 + this.FreeShippingMinimum.GetHashCode();
                if (this.LastModifiedBy != null)
                    hash = hash * 59 + this.LastModifiedBy.GetHashCode();
                if (this.LastModifiedDts != null)
                    hash = hash * 59 + this.LastModifiedDts.GetHashCode();
                if (this.MaximumItemCount != null)
                    hash = hash * 59 + this.MaximumItemCount.GetHashCode();
                if (this.MinimumItemCount != null)
                    hash = hash * 59 + this.MinimumItemCount.GetHashCode();
                if (this.MinimumSubtotal != null)
                    hash = hash * 59 + this.MinimumSubtotal.GetHashCode();
                if (this.NoCoupons != null)
                    hash = hash * 59 + this.NoCoupons.GetHashCode();
                if (this.NoFreeShipping != null)
                    hash = hash * 59 + this.NoFreeShipping.GetHashCode();
                if (this.NoRealtimeCharge != null)
                    hash = hash * 59 + this.NoRealtimeCharge.GetHashCode();
                if (this.Password != null)
                    hash = hash * 59 + this.Password.GetHashCode();
                if (this.PricingTiers != null)
                    hash = hash * 59 + this.PricingTiers.GetHashCode();
                if (this.QbClass != null)
                    hash = hash * 59 + this.QbClass.GetHashCode();
                if (this.QbCode != null)
                    hash = hash * 59 + this.QbCode.GetHashCode();
                if (this.ReferralSource != null)
                    hash = hash * 59 + this.ReferralSource.GetHashCode();
                if (this.SalesRepCode != null)
                    hash = hash * 59 + this.SalesRepCode.GetHashCode();
                if (this.SendSignupNotification != null)
                    hash = hash * 59 + this.SendSignupNotification.GetHashCode();
                if (this.Shipping != null)
                    hash = hash * 59 + this.Shipping.GetHashCode();
                if (this.SignupDts != null)
                    hash = hash * 59 + this.SignupDts.GetHashCode();
                if (this.SuppressBuysafe != null)
                    hash = hash * 59 + this.SuppressBuysafe.GetHashCode();
                if (this.TaxExempt != null)
                    hash = hash * 59 + this.TaxExempt.GetHashCode();
                if (this.TaxId != null)
                    hash = hash * 59 + this.TaxId.GetHashCode();
                if (this.Terms != null)
                    hash = hash * 59 + this.Terms.GetHashCode();
                if (this.TrackSeparately != null)
                    hash = hash * 59 + this.TrackSeparately.GetHashCode();
                if (this.Unapproved != null)
                    hash = hash * 59 + this.Unapproved.GetHashCode();
                if (this.UpsAccountNumber != null)
                    hash = hash * 59 + this.UpsAccountNumber.GetHashCode();
                if (this.WebsiteUrl != null)
                    hash = hash * 59 + this.WebsiteUrl.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // BusinessNotes (string) maxLength
            if(this.BusinessNotes != null && this.BusinessNotes.Length > 2000)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for BusinessNotes, length must be less than 2000.", new [] { "BusinessNotes" });
            }

            // DhlAccountNumber (string) maxLength
            if(this.DhlAccountNumber != null && this.DhlAccountNumber.Length > 20)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for DhlAccountNumber, length must be less than 20.", new [] { "DhlAccountNumber" });
            }

            // FedexAccountNumber (string) maxLength
            if(this.FedexAccountNumber != null && this.FedexAccountNumber.Length > 20)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for FedexAccountNumber, length must be less than 20.", new [] { "FedexAccountNumber" });
            }

            // LastModifiedBy (string) maxLength
            if(this.LastModifiedBy != null && this.LastModifiedBy.Length > 100)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for LastModifiedBy, length must be less than 100.", new [] { "LastModifiedBy" });
            }

            // Password (string) maxLength
            if(this.Password != null && this.Password.Length > 30)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Password, length must be less than 30.", new [] { "Password" });
            }

            // ReferralSource (string) maxLength
            if(this.ReferralSource != null && this.ReferralSource.Length > 50)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ReferralSource, length must be less than 50.", new [] { "ReferralSource" });
            }

            // SalesRepCode (string) maxLength
            if(this.SalesRepCode != null && this.SalesRepCode.Length > 10)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for SalesRepCode, length must be less than 10.", new [] { "SalesRepCode" });
            }

            // TaxId (string) maxLength
            if(this.TaxId != null && this.TaxId.Length > 15)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for TaxId, length must be less than 15.", new [] { "TaxId" });
            }

            // UpsAccountNumber (string) maxLength
            if(this.UpsAccountNumber != null && this.UpsAccountNumber.Length > 20)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for UpsAccountNumber, length must be less than 20.", new [] { "UpsAccountNumber" });
            }

            // WebsiteUrl (string) maxLength
            if(this.WebsiteUrl != null && this.WebsiteUrl.Length > 100)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for WebsiteUrl, length must be less than 100.", new [] { "WebsiteUrl" });
            }

            yield break;
        }
    }

}
