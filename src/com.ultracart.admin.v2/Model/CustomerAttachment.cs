/* 
 * UltraCart Rest API V2
 *
 * UltraCart REST API Version 2
 *
 * OpenAPI spec version: 2.0.0
 * Contact: support@ultracart.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = com.ultracart.admin.v2.Client.SwaggerDateConverter;

namespace com.ultracart.admin.v2.Model
{
    /// <summary>
    /// CustomerAttachment
    /// </summary>
    [DataContract]
    public partial class CustomerAttachment :  IEquatable<CustomerAttachment>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CustomerAttachment" /> class.
        /// </summary>
        /// <param name="CustomerProfileAttachmentOid">Attachment identifier.</param>
        /// <param name="Description">Description.</param>
        /// <param name="FileName">File name.</param>
        /// <param name="MimeType">Mime typoe.</param>
        /// <param name="UploadDts">Upload date/time.</param>
        public CustomerAttachment(int? CustomerProfileAttachmentOid = default(int?), string Description = default(string), string FileName = default(string), string MimeType = default(string), string UploadDts = default(string))
        {
            this.CustomerProfileAttachmentOid = CustomerProfileAttachmentOid;
            this.Description = Description;
            this.FileName = FileName;
            this.MimeType = MimeType;
            this.UploadDts = UploadDts;
        }
        
        /// <summary>
        /// Attachment identifier
        /// </summary>
        /// <value>Attachment identifier</value>
        [DataMember(Name="customer_profile_attachment_oid", EmitDefaultValue=false)]
        public int? CustomerProfileAttachmentOid { get; set; }

        /// <summary>
        /// Description
        /// </summary>
        /// <value>Description</value>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }

        /// <summary>
        /// File name
        /// </summary>
        /// <value>File name</value>
        [DataMember(Name="file_name", EmitDefaultValue=false)]
        public string FileName { get; set; }

        /// <summary>
        /// Mime typoe
        /// </summary>
        /// <value>Mime typoe</value>
        [DataMember(Name="mime_type", EmitDefaultValue=false)]
        public string MimeType { get; set; }

        /// <summary>
        /// Upload date/time
        /// </summary>
        /// <value>Upload date/time</value>
        [DataMember(Name="upload_dts", EmitDefaultValue=false)]
        public string UploadDts { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CustomerAttachment {\n");
            sb.Append("  CustomerProfileAttachmentOid: ").Append(CustomerProfileAttachmentOid).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  FileName: ").Append(FileName).Append("\n");
            sb.Append("  MimeType: ").Append(MimeType).Append("\n");
            sb.Append("  UploadDts: ").Append(UploadDts).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CustomerAttachment);
        }

        /// <summary>
        /// Returns true if CustomerAttachment instances are equal
        /// </summary>
        /// <param name="input">Instance of CustomerAttachment to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CustomerAttachment input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.CustomerProfileAttachmentOid == input.CustomerProfileAttachmentOid ||
                    (this.CustomerProfileAttachmentOid != null &&
                    this.CustomerProfileAttachmentOid.Equals(input.CustomerProfileAttachmentOid))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.FileName == input.FileName ||
                    (this.FileName != null &&
                    this.FileName.Equals(input.FileName))
                ) && 
                (
                    this.MimeType == input.MimeType ||
                    (this.MimeType != null &&
                    this.MimeType.Equals(input.MimeType))
                ) && 
                (
                    this.UploadDts == input.UploadDts ||
                    (this.UploadDts != null &&
                    this.UploadDts.Equals(input.UploadDts))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.CustomerProfileAttachmentOid != null)
                    hashCode = hashCode * 59 + this.CustomerProfileAttachmentOid.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                if (this.FileName != null)
                    hashCode = hashCode * 59 + this.FileName.GetHashCode();
                if (this.MimeType != null)
                    hashCode = hashCode * 59 + this.MimeType.GetHashCode();
                if (this.UploadDts != null)
                    hashCode = hashCode * 59 + this.UploadDts.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
