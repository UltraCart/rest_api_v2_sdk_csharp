/* 
 * UltraCart Rest API V2
 *
 * This is the next generation UltraCart REST API...
 *
 * OpenAPI spec version: 2.0.0
 * Contact: support@ultracart.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace com.ultracart.admin.v2.Model
{
    /// <summary>
    /// CustomerCard
    /// </summary>
    [DataContract]
    public partial class CustomerCard :  IEquatable<CustomerCard>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CustomerCard" /> class.
        /// </summary>
        /// <param name="CardExpirationMonth">Card expiration month (1-12).</param>
        /// <param name="CardExpirationYear">Card expiration year (four digit year).</param>
        /// <param name="CardNumber">Card number (masked to the last 4).</param>
        /// <param name="CardNumberToken">Hosted field token for the card number.</param>
        /// <param name="CardType">Card type.</param>
        /// <param name="CustomerProfileCreditCardId">ID of the stored credit card to use.</param>
        /// <param name="CustomerProfileOid">Customer profile object identifier.</param>
        public CustomerCard(int? CardExpirationMonth = null, int? CardExpirationYear = null, string CardNumber = null, string CardNumberToken = null, string CardType = null, int? CustomerProfileCreditCardId = null, int? CustomerProfileOid = null)
        {
            this.CardExpirationMonth = CardExpirationMonth;
            this.CardExpirationYear = CardExpirationYear;
            this.CardNumber = CardNumber;
            this.CardNumberToken = CardNumberToken;
            this.CardType = CardType;
            this.CustomerProfileCreditCardId = CustomerProfileCreditCardId;
            this.CustomerProfileOid = CustomerProfileOid;
        }
        
        /// <summary>
        /// Card expiration month (1-12)
        /// </summary>
        /// <value>Card expiration month (1-12)</value>
        [DataMember(Name="card_expiration_month", EmitDefaultValue=false)]
        public int? CardExpirationMonth { get; set; }
        /// <summary>
        /// Card expiration year (four digit year)
        /// </summary>
        /// <value>Card expiration year (four digit year)</value>
        [DataMember(Name="card_expiration_year", EmitDefaultValue=false)]
        public int? CardExpirationYear { get; set; }
        /// <summary>
        /// Card number (masked to the last 4)
        /// </summary>
        /// <value>Card number (masked to the last 4)</value>
        [DataMember(Name="card_number", EmitDefaultValue=false)]
        public string CardNumber { get; set; }
        /// <summary>
        /// Hosted field token for the card number
        /// </summary>
        /// <value>Hosted field token for the card number</value>
        [DataMember(Name="card_number_token", EmitDefaultValue=false)]
        public string CardNumberToken { get; set; }
        /// <summary>
        /// Card type
        /// </summary>
        /// <value>Card type</value>
        [DataMember(Name="card_type", EmitDefaultValue=false)]
        public string CardType { get; set; }
        /// <summary>
        /// ID of the stored credit card to use
        /// </summary>
        /// <value>ID of the stored credit card to use</value>
        [DataMember(Name="customer_profile_credit_card_id", EmitDefaultValue=false)]
        public int? CustomerProfileCreditCardId { get; set; }
        /// <summary>
        /// Customer profile object identifier
        /// </summary>
        /// <value>Customer profile object identifier</value>
        [DataMember(Name="customer_profile_oid", EmitDefaultValue=false)]
        public int? CustomerProfileOid { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CustomerCard {\n");
            sb.Append("  CardExpirationMonth: ").Append(CardExpirationMonth).Append("\n");
            sb.Append("  CardExpirationYear: ").Append(CardExpirationYear).Append("\n");
            sb.Append("  CardNumber: ").Append(CardNumber).Append("\n");
            sb.Append("  CardNumberToken: ").Append(CardNumberToken).Append("\n");
            sb.Append("  CardType: ").Append(CardType).Append("\n");
            sb.Append("  CustomerProfileCreditCardId: ").Append(CustomerProfileCreditCardId).Append("\n");
            sb.Append("  CustomerProfileOid: ").Append(CustomerProfileOid).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as CustomerCard);
        }

        /// <summary>
        /// Returns true if CustomerCard instances are equal
        /// </summary>
        /// <param name="other">Instance of CustomerCard to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CustomerCard other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.CardExpirationMonth == other.CardExpirationMonth ||
                    this.CardExpirationMonth != null &&
                    this.CardExpirationMonth.Equals(other.CardExpirationMonth)
                ) && 
                (
                    this.CardExpirationYear == other.CardExpirationYear ||
                    this.CardExpirationYear != null &&
                    this.CardExpirationYear.Equals(other.CardExpirationYear)
                ) && 
                (
                    this.CardNumber == other.CardNumber ||
                    this.CardNumber != null &&
                    this.CardNumber.Equals(other.CardNumber)
                ) && 
                (
                    this.CardNumberToken == other.CardNumberToken ||
                    this.CardNumberToken != null &&
                    this.CardNumberToken.Equals(other.CardNumberToken)
                ) && 
                (
                    this.CardType == other.CardType ||
                    this.CardType != null &&
                    this.CardType.Equals(other.CardType)
                ) && 
                (
                    this.CustomerProfileCreditCardId == other.CustomerProfileCreditCardId ||
                    this.CustomerProfileCreditCardId != null &&
                    this.CustomerProfileCreditCardId.Equals(other.CustomerProfileCreditCardId)
                ) && 
                (
                    this.CustomerProfileOid == other.CustomerProfileOid ||
                    this.CustomerProfileOid != null &&
                    this.CustomerProfileOid.Equals(other.CustomerProfileOid)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.CardExpirationMonth != null)
                    hash = hash * 59 + this.CardExpirationMonth.GetHashCode();
                if (this.CardExpirationYear != null)
                    hash = hash * 59 + this.CardExpirationYear.GetHashCode();
                if (this.CardNumber != null)
                    hash = hash * 59 + this.CardNumber.GetHashCode();
                if (this.CardNumberToken != null)
                    hash = hash * 59 + this.CardNumberToken.GetHashCode();
                if (this.CardType != null)
                    hash = hash * 59 + this.CardType.GetHashCode();
                if (this.CustomerProfileCreditCardId != null)
                    hash = hash * 59 + this.CustomerProfileCreditCardId.GetHashCode();
                if (this.CustomerProfileOid != null)
                    hash = hash * 59 + this.CustomerProfileOid.GetHashCode();
                return hash;
            }
        }
    }

}
