/* 
 * UltraCart Rest API V2
 *
 * UltraCart REST API Version 2
 *
 * OpenAPI spec version: 2.0.0
 * Contact: support@ultracart.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = com.ultracart.admin.v2.Client.SwaggerDateConverter;

namespace com.ultracart.admin.v2.Model
{
    /// <summary>
    /// CustomerEDI
    /// </summary>
    [DataContract]
    public partial class CustomerEDI :  IEquatable<CustomerEDI>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CustomerEDI" /> class.
        /// </summary>
        /// <param name="channelPartnerOid">EDI channel partner this customer profile is associated with.</param>
        /// <param name="distributionCenterNumber">The EDI distribution center number associated with this customer profile..</param>
        /// <param name="storeNumber">The EDI store number associated with this customer profile..</param>
        public CustomerEDI(int? channelPartnerOid = default(int?), string distributionCenterNumber = default(string), string storeNumber = default(string))
        {
            this.ChannelPartnerOid = channelPartnerOid;
            this.DistributionCenterNumber = distributionCenterNumber;
            this.StoreNumber = storeNumber;
        }
        
        /// <summary>
        /// EDI channel partner this customer profile is associated with
        /// </summary>
        /// <value>EDI channel partner this customer profile is associated with</value>
        [DataMember(Name="channel_partner_oid", EmitDefaultValue=false)]
        public int? ChannelPartnerOid { get; set; }

        /// <summary>
        /// The EDI distribution center number associated with this customer profile.
        /// </summary>
        /// <value>The EDI distribution center number associated with this customer profile.</value>
        [DataMember(Name="distribution_center_number", EmitDefaultValue=false)]
        public string DistributionCenterNumber { get; set; }

        /// <summary>
        /// The EDI store number associated with this customer profile.
        /// </summary>
        /// <value>The EDI store number associated with this customer profile.</value>
        [DataMember(Name="store_number", EmitDefaultValue=false)]
        public string StoreNumber { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CustomerEDI {\n");
            sb.Append("  ChannelPartnerOid: ").Append(ChannelPartnerOid).Append("\n");
            sb.Append("  DistributionCenterNumber: ").Append(DistributionCenterNumber).Append("\n");
            sb.Append("  StoreNumber: ").Append(StoreNumber).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CustomerEDI);
        }

        /// <summary>
        /// Returns true if CustomerEDI instances are equal
        /// </summary>
        /// <param name="input">Instance of CustomerEDI to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CustomerEDI input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ChannelPartnerOid == input.ChannelPartnerOid ||
                    (this.ChannelPartnerOid != null &&
                    this.ChannelPartnerOid.Equals(input.ChannelPartnerOid))
                ) && 
                (
                    this.DistributionCenterNumber == input.DistributionCenterNumber ||
                    (this.DistributionCenterNumber != null &&
                    this.DistributionCenterNumber.Equals(input.DistributionCenterNumber))
                ) && 
                (
                    this.StoreNumber == input.StoreNumber ||
                    (this.StoreNumber != null &&
                    this.StoreNumber.Equals(input.StoreNumber))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ChannelPartnerOid != null)
                    hashCode = hashCode * 59 + this.ChannelPartnerOid.GetHashCode();
                if (this.DistributionCenterNumber != null)
                    hashCode = hashCode * 59 + this.DistributionCenterNumber.GetHashCode();
                if (this.StoreNumber != null)
                    hashCode = hashCode * 59 + this.StoreNumber.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
