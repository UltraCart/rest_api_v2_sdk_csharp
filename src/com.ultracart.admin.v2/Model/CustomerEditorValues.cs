/*
 * UltraCart Rest API V2
 *
 * UltraCart REST API Version 2
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@ultracart.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = com.ultracart.admin.v2.Client.OpenAPIDateConverter;

namespace com.ultracart.admin.v2.Model
{
    /// <summary>
    /// CustomerEditorValues
    /// </summary>
    [DataContract]
    public partial class CustomerEditorValues :  IEquatable<CustomerEditorValues>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CustomerEditorValues" /> class.
        /// </summary>
        /// <param name="affiliates">affiliates.</param>
        /// <param name="cardExpMonths">card_exp_months.</param>
        /// <param name="cardExpYears">card_exp_years.</param>
        /// <param name="cardTypes">card_types.</param>
        /// <param name="countries">countries.</param>
        /// <param name="ediChannelPartners">EDI channel partners.</param>
        /// <param name="loyaltyLedgerDescriptions">loyalty_ledger_descriptions.</param>
        /// <param name="loyaltyProgramType">loyalty_program_type.</param>
        /// <param name="qbClasses">qb_classes.</param>
        /// <param name="salesRepCodes">sales_rep_codes.</param>
        /// <param name="stateOptionalCountries">state_optional_countries.</param>
        /// <param name="terms">terms.</param>
        public CustomerEditorValues(List<CustomerAffiliate> affiliates = default(List<CustomerAffiliate>), List<string> cardExpMonths = default(List<string>), List<string> cardExpYears = default(List<string>), List<string> cardTypes = default(List<string>), List<Country> countries = default(List<Country>), List<ChannelPartner> ediChannelPartners = default(List<ChannelPartner>), List<string> loyaltyLedgerDescriptions = default(List<string>), string loyaltyProgramType = default(string), List<string> qbClasses = default(List<string>), List<string> salesRepCodes = default(List<string>), List<Country> stateOptionalCountries = default(List<Country>), List<string> terms = default(List<string>))
        {
            this.Affiliates = affiliates;
            this.CardExpMonths = cardExpMonths;
            this.CardExpYears = cardExpYears;
            this.CardTypes = cardTypes;
            this.Countries = countries;
            this.EdiChannelPartners = ediChannelPartners;
            this.LoyaltyLedgerDescriptions = loyaltyLedgerDescriptions;
            this.LoyaltyProgramType = loyaltyProgramType;
            this.QbClasses = qbClasses;
            this.SalesRepCodes = salesRepCodes;
            this.StateOptionalCountries = stateOptionalCountries;
            this.Terms = terms;
        }

        /// <summary>
        /// affiliates
        /// </summary>
        /// <value>affiliates</value>
        [DataMember(Name="affiliates", EmitDefaultValue=false)]
        public List<CustomerAffiliate> Affiliates { get; set; }

        /// <summary>
        /// card_exp_months
        /// </summary>
        /// <value>card_exp_months</value>
        [DataMember(Name="card_exp_months", EmitDefaultValue=false)]
        public List<string> CardExpMonths { get; set; }

        /// <summary>
        /// card_exp_years
        /// </summary>
        /// <value>card_exp_years</value>
        [DataMember(Name="card_exp_years", EmitDefaultValue=false)]
        public List<string> CardExpYears { get; set; }

        /// <summary>
        /// card_types
        /// </summary>
        /// <value>card_types</value>
        [DataMember(Name="card_types", EmitDefaultValue=false)]
        public List<string> CardTypes { get; set; }

        /// <summary>
        /// countries
        /// </summary>
        /// <value>countries</value>
        [DataMember(Name="countries", EmitDefaultValue=false)]
        public List<Country> Countries { get; set; }

        /// <summary>
        /// EDI channel partners
        /// </summary>
        /// <value>EDI channel partners</value>
        [DataMember(Name="edi_channel_partners", EmitDefaultValue=false)]
        public List<ChannelPartner> EdiChannelPartners { get; set; }

        /// <summary>
        /// loyalty_ledger_descriptions
        /// </summary>
        /// <value>loyalty_ledger_descriptions</value>
        [DataMember(Name="loyalty_ledger_descriptions", EmitDefaultValue=false)]
        public List<string> LoyaltyLedgerDescriptions { get; set; }

        /// <summary>
        /// loyalty_program_type
        /// </summary>
        /// <value>loyalty_program_type</value>
        [DataMember(Name="loyalty_program_type", EmitDefaultValue=false)]
        public string LoyaltyProgramType { get; set; }

        /// <summary>
        /// qb_classes
        /// </summary>
        /// <value>qb_classes</value>
        [DataMember(Name="qb_classes", EmitDefaultValue=false)]
        public List<string> QbClasses { get; set; }

        /// <summary>
        /// sales_rep_codes
        /// </summary>
        /// <value>sales_rep_codes</value>
        [DataMember(Name="sales_rep_codes", EmitDefaultValue=false)]
        public List<string> SalesRepCodes { get; set; }

        /// <summary>
        /// state_optional_countries
        /// </summary>
        /// <value>state_optional_countries</value>
        [DataMember(Name="state_optional_countries", EmitDefaultValue=false)]
        public List<Country> StateOptionalCountries { get; set; }

        /// <summary>
        /// terms
        /// </summary>
        /// <value>terms</value>
        [DataMember(Name="terms", EmitDefaultValue=false)]
        public List<string> Terms { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CustomerEditorValues {\n");
            sb.Append("  Affiliates: ").Append(Affiliates).Append("\n");
            sb.Append("  CardExpMonths: ").Append(CardExpMonths).Append("\n");
            sb.Append("  CardExpYears: ").Append(CardExpYears).Append("\n");
            sb.Append("  CardTypes: ").Append(CardTypes).Append("\n");
            sb.Append("  Countries: ").Append(Countries).Append("\n");
            sb.Append("  EdiChannelPartners: ").Append(EdiChannelPartners).Append("\n");
            sb.Append("  LoyaltyLedgerDescriptions: ").Append(LoyaltyLedgerDescriptions).Append("\n");
            sb.Append("  LoyaltyProgramType: ").Append(LoyaltyProgramType).Append("\n");
            sb.Append("  QbClasses: ").Append(QbClasses).Append("\n");
            sb.Append("  SalesRepCodes: ").Append(SalesRepCodes).Append("\n");
            sb.Append("  StateOptionalCountries: ").Append(StateOptionalCountries).Append("\n");
            sb.Append("  Terms: ").Append(Terms).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CustomerEditorValues);
        }

        /// <summary>
        /// Returns true if CustomerEditorValues instances are equal
        /// </summary>
        /// <param name="input">Instance of CustomerEditorValues to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CustomerEditorValues input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Affiliates == input.Affiliates ||
                    this.Affiliates != null &&
                    input.Affiliates != null &&
                    this.Affiliates.SequenceEqual(input.Affiliates)
                ) && 
                (
                    this.CardExpMonths == input.CardExpMonths ||
                    this.CardExpMonths != null &&
                    input.CardExpMonths != null &&
                    this.CardExpMonths.SequenceEqual(input.CardExpMonths)
                ) && 
                (
                    this.CardExpYears == input.CardExpYears ||
                    this.CardExpYears != null &&
                    input.CardExpYears != null &&
                    this.CardExpYears.SequenceEqual(input.CardExpYears)
                ) && 
                (
                    this.CardTypes == input.CardTypes ||
                    this.CardTypes != null &&
                    input.CardTypes != null &&
                    this.CardTypes.SequenceEqual(input.CardTypes)
                ) && 
                (
                    this.Countries == input.Countries ||
                    this.Countries != null &&
                    input.Countries != null &&
                    this.Countries.SequenceEqual(input.Countries)
                ) && 
                (
                    this.EdiChannelPartners == input.EdiChannelPartners ||
                    this.EdiChannelPartners != null &&
                    input.EdiChannelPartners != null &&
                    this.EdiChannelPartners.SequenceEqual(input.EdiChannelPartners)
                ) && 
                (
                    this.LoyaltyLedgerDescriptions == input.LoyaltyLedgerDescriptions ||
                    this.LoyaltyLedgerDescriptions != null &&
                    input.LoyaltyLedgerDescriptions != null &&
                    this.LoyaltyLedgerDescriptions.SequenceEqual(input.LoyaltyLedgerDescriptions)
                ) && 
                (
                    this.LoyaltyProgramType == input.LoyaltyProgramType ||
                    (this.LoyaltyProgramType != null &&
                    this.LoyaltyProgramType.Equals(input.LoyaltyProgramType))
                ) && 
                (
                    this.QbClasses == input.QbClasses ||
                    this.QbClasses != null &&
                    input.QbClasses != null &&
                    this.QbClasses.SequenceEqual(input.QbClasses)
                ) && 
                (
                    this.SalesRepCodes == input.SalesRepCodes ||
                    this.SalesRepCodes != null &&
                    input.SalesRepCodes != null &&
                    this.SalesRepCodes.SequenceEqual(input.SalesRepCodes)
                ) && 
                (
                    this.StateOptionalCountries == input.StateOptionalCountries ||
                    this.StateOptionalCountries != null &&
                    input.StateOptionalCountries != null &&
                    this.StateOptionalCountries.SequenceEqual(input.StateOptionalCountries)
                ) && 
                (
                    this.Terms == input.Terms ||
                    this.Terms != null &&
                    input.Terms != null &&
                    this.Terms.SequenceEqual(input.Terms)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Affiliates != null)
                    hashCode = hashCode * 59 + this.Affiliates.GetHashCode();
                if (this.CardExpMonths != null)
                    hashCode = hashCode * 59 + this.CardExpMonths.GetHashCode();
                if (this.CardExpYears != null)
                    hashCode = hashCode * 59 + this.CardExpYears.GetHashCode();
                if (this.CardTypes != null)
                    hashCode = hashCode * 59 + this.CardTypes.GetHashCode();
                if (this.Countries != null)
                    hashCode = hashCode * 59 + this.Countries.GetHashCode();
                if (this.EdiChannelPartners != null)
                    hashCode = hashCode * 59 + this.EdiChannelPartners.GetHashCode();
                if (this.LoyaltyLedgerDescriptions != null)
                    hashCode = hashCode * 59 + this.LoyaltyLedgerDescriptions.GetHashCode();
                if (this.LoyaltyProgramType != null)
                    hashCode = hashCode * 59 + this.LoyaltyProgramType.GetHashCode();
                if (this.QbClasses != null)
                    hashCode = hashCode * 59 + this.QbClasses.GetHashCode();
                if (this.SalesRepCodes != null)
                    hashCode = hashCode * 59 + this.SalesRepCodes.GetHashCode();
                if (this.StateOptionalCountries != null)
                    hashCode = hashCode * 59 + this.StateOptionalCountries.GetHashCode();
                if (this.Terms != null)
                    hashCode = hashCode * 59 + this.Terms.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
