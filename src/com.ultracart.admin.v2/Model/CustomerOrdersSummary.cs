/*
 * UltraCart Rest API V2
 *
 * UltraCart REST API Version 2
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@ultracart.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = com.ultracart.admin.v2.Client.OpenAPIDateConverter;

namespace com.ultracart.admin.v2.Model
{
    /// <summary>
    /// CustomerOrdersSummary
    /// </summary>
    [DataContract]
    public partial class CustomerOrdersSummary :  IEquatable<CustomerOrdersSummary>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CustomerOrdersSummary" /> class.
        /// </summary>
        /// <param name="firstOrderDts">First order date.</param>
        /// <param name="lastOrderDts">Last order date.</param>
        /// <param name="orderCount">Total number of orders.</param>
        /// <param name="total">Total amount associated with the orders.</param>
        public CustomerOrdersSummary(string firstOrderDts = default(string), string lastOrderDts = default(string), int orderCount = default(int), decimal total = default(decimal))
        {
            this.FirstOrderDts = firstOrderDts;
            this.LastOrderDts = lastOrderDts;
            this.OrderCount = orderCount;
            this.Total = total;
        }

        /// <summary>
        /// First order date
        /// </summary>
        /// <value>First order date</value>
        [DataMember(Name="first_order_dts", EmitDefaultValue=false)]
        public string FirstOrderDts { get; set; }

        /// <summary>
        /// Last order date
        /// </summary>
        /// <value>Last order date</value>
        [DataMember(Name="last_order_dts", EmitDefaultValue=false)]
        public string LastOrderDts { get; set; }

        /// <summary>
        /// Total number of orders
        /// </summary>
        /// <value>Total number of orders</value>
        [DataMember(Name="order_count", EmitDefaultValue=false)]
        public int OrderCount { get; set; }

        /// <summary>
        /// Total amount associated with the orders
        /// </summary>
        /// <value>Total amount associated with the orders</value>
        [DataMember(Name="total", EmitDefaultValue=false)]
        public decimal Total { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CustomerOrdersSummary {\n");
            sb.Append("  FirstOrderDts: ").Append(FirstOrderDts).Append("\n");
            sb.Append("  LastOrderDts: ").Append(LastOrderDts).Append("\n");
            sb.Append("  OrderCount: ").Append(OrderCount).Append("\n");
            sb.Append("  Total: ").Append(Total).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CustomerOrdersSummary);
        }

        /// <summary>
        /// Returns true if CustomerOrdersSummary instances are equal
        /// </summary>
        /// <param name="input">Instance of CustomerOrdersSummary to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CustomerOrdersSummary input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.FirstOrderDts == input.FirstOrderDts ||
                    (this.FirstOrderDts != null &&
                    this.FirstOrderDts.Equals(input.FirstOrderDts))
                ) && 
                (
                    this.LastOrderDts == input.LastOrderDts ||
                    (this.LastOrderDts != null &&
                    this.LastOrderDts.Equals(input.LastOrderDts))
                ) && 
                (
                    this.OrderCount == input.OrderCount ||
                    (this.OrderCount != null &&
                    this.OrderCount.Equals(input.OrderCount))
                ) && 
                (
                    this.Total == input.Total ||
                    (this.Total != null &&
                    this.Total.Equals(input.Total))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.FirstOrderDts != null)
                    hashCode = hashCode * 59 + this.FirstOrderDts.GetHashCode();
                if (this.LastOrderDts != null)
                    hashCode = hashCode * 59 + this.LastOrderDts.GetHashCode();
                if (this.OrderCount != null)
                    hashCode = hashCode * 59 + this.OrderCount.GetHashCode();
                if (this.Total != null)
                    hashCode = hashCode * 59 + this.Total.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
