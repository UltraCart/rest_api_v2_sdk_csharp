/* 
 * UltraCart Rest API V2
 *
 * UltraCart REST API Version 2
 *
 * OpenAPI spec version: 2.0.0
 * Contact: support@ultracart.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = com.ultracart.admin.v2.Client.SwaggerDateConverter;

namespace com.ultracart.admin.v2.Model
{
    /// <summary>
    /// CustomerStoreCredit
    /// </summary>
    [DataContract]
    public partial class CustomerStoreCredit :  IEquatable<CustomerStoreCredit>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CustomerStoreCredit" /> class.
        /// </summary>
        /// <param name="available">available.</param>
        /// <param name="expiring">expiring.</param>
        /// <param name="futureLedgers">futureLedgers.</param>
        /// <param name="pastLedgers">pastLedgers.</param>
        /// <param name="total">total.</param>
        /// <param name="vesting">vesting.</param>
        public CustomerStoreCredit(decimal? available = default(decimal?), decimal? expiring = default(decimal?), List<CustomerStoreCreditLedgerEntry> futureLedgers = default(List<CustomerStoreCreditLedgerEntry>), List<CustomerStoreCreditLedgerEntry> pastLedgers = default(List<CustomerStoreCreditLedgerEntry>), decimal? total = default(decimal?), decimal? vesting = default(decimal?))
        {
            this.Available = available;
            this.Expiring = expiring;
            this.FutureLedgers = futureLedgers;
            this.PastLedgers = pastLedgers;
            this.Total = total;
            this.Vesting = vesting;
        }
        
        /// <summary>
        /// Gets or Sets Available
        /// </summary>
        [DataMember(Name="available", EmitDefaultValue=false)]
        public decimal? Available { get; set; }

        /// <summary>
        /// Gets or Sets Expiring
        /// </summary>
        [DataMember(Name="expiring", EmitDefaultValue=false)]
        public decimal? Expiring { get; set; }

        /// <summary>
        /// Gets or Sets FutureLedgers
        /// </summary>
        [DataMember(Name="futureLedgers", EmitDefaultValue=false)]
        public List<CustomerStoreCreditLedgerEntry> FutureLedgers { get; set; }

        /// <summary>
        /// Gets or Sets PastLedgers
        /// </summary>
        [DataMember(Name="pastLedgers", EmitDefaultValue=false)]
        public List<CustomerStoreCreditLedgerEntry> PastLedgers { get; set; }

        /// <summary>
        /// Gets or Sets Total
        /// </summary>
        [DataMember(Name="total", EmitDefaultValue=false)]
        public decimal? Total { get; set; }

        /// <summary>
        /// Gets or Sets Vesting
        /// </summary>
        [DataMember(Name="vesting", EmitDefaultValue=false)]
        public decimal? Vesting { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CustomerStoreCredit {\n");
            sb.Append("  Available: ").Append(Available).Append("\n");
            sb.Append("  Expiring: ").Append(Expiring).Append("\n");
            sb.Append("  FutureLedgers: ").Append(FutureLedgers).Append("\n");
            sb.Append("  PastLedgers: ").Append(PastLedgers).Append("\n");
            sb.Append("  Total: ").Append(Total).Append("\n");
            sb.Append("  Vesting: ").Append(Vesting).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CustomerStoreCredit);
        }

        /// <summary>
        /// Returns true if CustomerStoreCredit instances are equal
        /// </summary>
        /// <param name="input">Instance of CustomerStoreCredit to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CustomerStoreCredit input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Available == input.Available ||
                    (this.Available != null &&
                    this.Available.Equals(input.Available))
                ) && 
                (
                    this.Expiring == input.Expiring ||
                    (this.Expiring != null &&
                    this.Expiring.Equals(input.Expiring))
                ) && 
                (
                    this.FutureLedgers == input.FutureLedgers ||
                    this.FutureLedgers != null &&
                    this.FutureLedgers.SequenceEqual(input.FutureLedgers)
                ) && 
                (
                    this.PastLedgers == input.PastLedgers ||
                    this.PastLedgers != null &&
                    this.PastLedgers.SequenceEqual(input.PastLedgers)
                ) && 
                (
                    this.Total == input.Total ||
                    (this.Total != null &&
                    this.Total.Equals(input.Total))
                ) && 
                (
                    this.Vesting == input.Vesting ||
                    (this.Vesting != null &&
                    this.Vesting.Equals(input.Vesting))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Available != null)
                    hashCode = hashCode * 59 + this.Available.GetHashCode();
                if (this.Expiring != null)
                    hashCode = hashCode * 59 + this.Expiring.GetHashCode();
                if (this.FutureLedgers != null)
                    hashCode = hashCode * 59 + this.FutureLedgers.GetHashCode();
                if (this.PastLedgers != null)
                    hashCode = hashCode * 59 + this.PastLedgers.GetHashCode();
                if (this.Total != null)
                    hashCode = hashCode * 59 + this.Total.GetHashCode();
                if (this.Vesting != null)
                    hashCode = hashCode * 59 + this.Vesting.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
