/* 
 * UltraCart Rest API V2
 *
 * UltraCart REST API Version 2
 *
 * OpenAPI spec version: 2.0.0
 * Contact: support@ultracart.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = com.ultracart.admin.v2.Client.SwaggerDateConverter;

namespace com.ultracart.admin.v2.Model
{
    /// <summary>
    /// CustomerStoreCreditAddRequest
    /// </summary>
    [DataContract]
    public partial class CustomerStoreCreditAddRequest :  IEquatable<CustomerStoreCreditAddRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CustomerStoreCreditAddRequest" /> class.
        /// </summary>
        /// <param name="amount">Amount of store credit.</param>
        /// <param name="description">Description or reason for the store credit.</param>
        /// <param name="expirationDays">Optional days for store credit to expire or zero for no expiration.</param>
        /// <param name="vestingDays">Optional days for store credit to vesting or zero for immediately available.</param>
        public CustomerStoreCreditAddRequest(decimal? amount = default(decimal?), string description = default(string), int? expirationDays = default(int?), int? vestingDays = default(int?))
        {
            this.Amount = amount;
            this.Description = description;
            this.ExpirationDays = expirationDays;
            this.VestingDays = vestingDays;
        }
        
        /// <summary>
        /// Amount of store credit
        /// </summary>
        /// <value>Amount of store credit</value>
        [DataMember(Name="amount", EmitDefaultValue=false)]
        public decimal? Amount { get; set; }

        /// <summary>
        /// Description or reason for the store credit
        /// </summary>
        /// <value>Description or reason for the store credit</value>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }

        /// <summary>
        /// Optional days for store credit to expire or zero for no expiration
        /// </summary>
        /// <value>Optional days for store credit to expire or zero for no expiration</value>
        [DataMember(Name="expiration_days", EmitDefaultValue=false)]
        public int? ExpirationDays { get; set; }

        /// <summary>
        /// Optional days for store credit to vesting or zero for immediately available
        /// </summary>
        /// <value>Optional days for store credit to vesting or zero for immediately available</value>
        [DataMember(Name="vesting_days", EmitDefaultValue=false)]
        public int? VestingDays { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CustomerStoreCreditAddRequest {\n");
            sb.Append("  Amount: ").Append(Amount).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  ExpirationDays: ").Append(ExpirationDays).Append("\n");
            sb.Append("  VestingDays: ").Append(VestingDays).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CustomerStoreCreditAddRequest);
        }

        /// <summary>
        /// Returns true if CustomerStoreCreditAddRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of CustomerStoreCreditAddRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CustomerStoreCreditAddRequest input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Amount == input.Amount ||
                    (this.Amount != null &&
                    this.Amount.Equals(input.Amount))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.ExpirationDays == input.ExpirationDays ||
                    (this.ExpirationDays != null &&
                    this.ExpirationDays.Equals(input.ExpirationDays))
                ) && 
                (
                    this.VestingDays == input.VestingDays ||
                    (this.VestingDays != null &&
                    this.VestingDays.Equals(input.VestingDays))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Amount != null)
                    hashCode = hashCode * 59 + this.Amount.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                if (this.ExpirationDays != null)
                    hashCode = hashCode * 59 + this.ExpirationDays.GetHashCode();
                if (this.VestingDays != null)
                    hashCode = hashCode * 59 + this.VestingDays.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
