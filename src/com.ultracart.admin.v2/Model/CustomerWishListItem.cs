/*
 * UltraCart Rest API V2
 *
 * UltraCart REST API Version 2
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@ultracart.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = com.ultracart.admin.v2.Client.OpenAPIDateConverter;

namespace com.ultracart.admin.v2.Model
{
    /// <summary>
    /// CustomerWishListItem
    /// </summary>
    [DataContract]
    public partial class CustomerWishListItem :  IEquatable<CustomerWishListItem>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CustomerWishListItem" /> class.
        /// </summary>
        /// <param name="addDts">Add date.</param>
        /// <param name="comments">Comments.</param>
        /// <param name="customerProfileOid">Customer profile object identifier.</param>
        /// <param name="customerWishlistItemOid">Customer wishlist item object identifier.</param>
        /// <param name="merchantItemOid">Merchant item object identifier.</param>
        /// <param name="position">Position in wishlist.</param>
        /// <param name="priority">Priority of wishlist item, 3 being low priority and 5 is high priority..</param>
        public CustomerWishListItem(string addDts = default(string), string comments = default(string), int customerProfileOid = default(int), int customerWishlistItemOid = default(int), int merchantItemOid = default(int), int position = default(int), int priority = default(int))
        {
            this.AddDts = addDts;
            this.Comments = comments;
            this.CustomerProfileOid = customerProfileOid;
            this.CustomerWishlistItemOid = customerWishlistItemOid;
            this.MerchantItemOid = merchantItemOid;
            this.Position = position;
            this.Priority = priority;
        }

        /// <summary>
        /// Add date
        /// </summary>
        /// <value>Add date</value>
        [DataMember(Name="add_dts", EmitDefaultValue=false)]
        public string AddDts { get; set; }

        /// <summary>
        /// Comments
        /// </summary>
        /// <value>Comments</value>
        [DataMember(Name="comments", EmitDefaultValue=false)]
        public string Comments { get; set; }

        /// <summary>
        /// Customer profile object identifier
        /// </summary>
        /// <value>Customer profile object identifier</value>
        [DataMember(Name="customer_profile_oid", EmitDefaultValue=false)]
        public int CustomerProfileOid { get; set; }

        /// <summary>
        /// Customer wishlist item object identifier
        /// </summary>
        /// <value>Customer wishlist item object identifier</value>
        [DataMember(Name="customer_wishlist_item_oid", EmitDefaultValue=false)]
        public int CustomerWishlistItemOid { get; set; }

        /// <summary>
        /// Merchant item object identifier
        /// </summary>
        /// <value>Merchant item object identifier</value>
        [DataMember(Name="merchant_item_oid", EmitDefaultValue=false)]
        public int MerchantItemOid { get; set; }

        /// <summary>
        /// Position in wishlist
        /// </summary>
        /// <value>Position in wishlist</value>
        [DataMember(Name="position", EmitDefaultValue=false)]
        public int Position { get; set; }

        /// <summary>
        /// Priority of wishlist item, 3 being low priority and 5 is high priority.
        /// </summary>
        /// <value>Priority of wishlist item, 3 being low priority and 5 is high priority.</value>
        [DataMember(Name="priority", EmitDefaultValue=false)]
        public int Priority { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CustomerWishListItem {\n");
            sb.Append("  AddDts: ").Append(AddDts).Append("\n");
            sb.Append("  Comments: ").Append(Comments).Append("\n");
            sb.Append("  CustomerProfileOid: ").Append(CustomerProfileOid).Append("\n");
            sb.Append("  CustomerWishlistItemOid: ").Append(CustomerWishlistItemOid).Append("\n");
            sb.Append("  MerchantItemOid: ").Append(MerchantItemOid).Append("\n");
            sb.Append("  Position: ").Append(Position).Append("\n");
            sb.Append("  Priority: ").Append(Priority).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CustomerWishListItem);
        }

        /// <summary>
        /// Returns true if CustomerWishListItem instances are equal
        /// </summary>
        /// <param name="input">Instance of CustomerWishListItem to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CustomerWishListItem input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.AddDts == input.AddDts ||
                    (this.AddDts != null &&
                    this.AddDts.Equals(input.AddDts))
                ) && 
                (
                    this.Comments == input.Comments ||
                    (this.Comments != null &&
                    this.Comments.Equals(input.Comments))
                ) && 
                (
                    this.CustomerProfileOid == input.CustomerProfileOid ||
                    (this.CustomerProfileOid != null &&
                    this.CustomerProfileOid.Equals(input.CustomerProfileOid))
                ) && 
                (
                    this.CustomerWishlistItemOid == input.CustomerWishlistItemOid ||
                    (this.CustomerWishlistItemOid != null &&
                    this.CustomerWishlistItemOid.Equals(input.CustomerWishlistItemOid))
                ) && 
                (
                    this.MerchantItemOid == input.MerchantItemOid ||
                    (this.MerchantItemOid != null &&
                    this.MerchantItemOid.Equals(input.MerchantItemOid))
                ) && 
                (
                    this.Position == input.Position ||
                    (this.Position != null &&
                    this.Position.Equals(input.Position))
                ) && 
                (
                    this.Priority == input.Priority ||
                    (this.Priority != null &&
                    this.Priority.Equals(input.Priority))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AddDts != null)
                    hashCode = hashCode * 59 + this.AddDts.GetHashCode();
                if (this.Comments != null)
                    hashCode = hashCode * 59 + this.Comments.GetHashCode();
                if (this.CustomerProfileOid != null)
                    hashCode = hashCode * 59 + this.CustomerProfileOid.GetHashCode();
                if (this.CustomerWishlistItemOid != null)
                    hashCode = hashCode * 59 + this.CustomerWishlistItemOid.GetHashCode();
                if (this.MerchantItemOid != null)
                    hashCode = hashCode * 59 + this.MerchantItemOid.GetHashCode();
                if (this.Position != null)
                    hashCode = hashCode * 59 + this.Position.GetHashCode();
                if (this.Priority != null)
                    hashCode = hashCode * 59 + this.Priority.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Comments (string) maxLength
            if(this.Comments != null && this.Comments.Length > 1024)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Comments, length must be less than 1024.", new [] { "Comments" });
            }


            yield break;
        }
    }

}
