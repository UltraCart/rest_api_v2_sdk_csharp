/*
 * UltraCart Rest API V2
 *
 * UltraCart REST API Version 2
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@ultracart.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = com.ultracart.admin.v2.Client.OpenAPIDateConverter;

namespace com.ultracart.admin.v2.Model
{
    /// <summary>
    /// DataTablesServerSideResponse
    /// </summary>
    [DataContract]
    public partial class DataTablesServerSideResponse :  IEquatable<DataTablesServerSideResponse>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DataTablesServerSideResponse" /> class.
        /// </summary>
        /// <param name="data">data.</param>
        /// <param name="draw">draw.</param>
        /// <param name="recordsFiltered">recordsFiltered.</param>
        /// <param name="recordsTotal">recordsTotal.</param>
        public DataTablesServerSideResponse(List<Customer> data = default(List<Customer>), int draw = default(int), int recordsFiltered = default(int), int recordsTotal = default(int))
        {
            this.Data = data;
            this.Draw = draw;
            this.RecordsFiltered = recordsFiltered;
            this.RecordsTotal = recordsTotal;
        }

        /// <summary>
        /// Gets or Sets Data
        /// </summary>
        [DataMember(Name="data", EmitDefaultValue=false)]
        public List<Customer> Data { get; set; }

        /// <summary>
        /// Gets or Sets Draw
        /// </summary>
        [DataMember(Name="draw", EmitDefaultValue=false)]
        public int Draw { get; set; }

        /// <summary>
        /// Gets or Sets RecordsFiltered
        /// </summary>
        [DataMember(Name="recordsFiltered", EmitDefaultValue=false)]
        public int RecordsFiltered { get; set; }

        /// <summary>
        /// Gets or Sets RecordsTotal
        /// </summary>
        [DataMember(Name="recordsTotal", EmitDefaultValue=false)]
        public int RecordsTotal { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DataTablesServerSideResponse {\n");
            sb.Append("  Data: ").Append(Data).Append("\n");
            sb.Append("  Draw: ").Append(Draw).Append("\n");
            sb.Append("  RecordsFiltered: ").Append(RecordsFiltered).Append("\n");
            sb.Append("  RecordsTotal: ").Append(RecordsTotal).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DataTablesServerSideResponse);
        }

        /// <summary>
        /// Returns true if DataTablesServerSideResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of DataTablesServerSideResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DataTablesServerSideResponse input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Data == input.Data ||
                    this.Data != null &&
                    input.Data != null &&
                    this.Data.SequenceEqual(input.Data)
                ) && 
                (
                    this.Draw == input.Draw ||
                    (this.Draw != null &&
                    this.Draw.Equals(input.Draw))
                ) && 
                (
                    this.RecordsFiltered == input.RecordsFiltered ||
                    (this.RecordsFiltered != null &&
                    this.RecordsFiltered.Equals(input.RecordsFiltered))
                ) && 
                (
                    this.RecordsTotal == input.RecordsTotal ||
                    (this.RecordsTotal != null &&
                    this.RecordsTotal.Equals(input.RecordsTotal))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Data != null)
                    hashCode = hashCode * 59 + this.Data.GetHashCode();
                if (this.Draw != null)
                    hashCode = hashCode * 59 + this.Draw.GetHashCode();
                if (this.RecordsFiltered != null)
                    hashCode = hashCode * 59 + this.RecordsFiltered.GetHashCode();
                if (this.RecordsTotal != null)
                    hashCode = hashCode * 59 + this.RecordsTotal.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
