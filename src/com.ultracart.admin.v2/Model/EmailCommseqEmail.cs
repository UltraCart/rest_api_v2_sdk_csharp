/* 
 * UltraCart Rest API V2
 *
 * UltraCart REST API Version 2
 *
 * OpenAPI spec version: 2.0.0
 * Contact: support@ultracart.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = com.ultracart.admin.v2.Client.SwaggerDateConverter;

namespace com.ultracart.admin.v2.Model
{
    /// <summary>
    /// EmailCommseqEmail
    /// </summary>
    [DataContract]
    public partial class EmailCommseqEmail :  IEquatable<EmailCommseqEmail>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EmailCommseqEmail" /> class.
        /// </summary>
        /// <param name="Deleted">Deleted.</param>
        /// <param name="EditedByUser">Edited by user.</param>
        /// <param name="EmailCommunicationSequenceEmailUuid">Email communication sequence email uuid.</param>
        /// <param name="EmailContainerCjson">Email container cjson.</param>
        /// <param name="EmailTemplateVmPath">Email template virtual path.</param>
        /// <param name="FilterProfileEquationJson">Filter profile equation json.</param>
        /// <param name="IndividuallyRender">Individually render.</param>
        /// <param name="MerchantId">Merchant ID.</param>
        /// <param name="PreviewText">Preview text.</param>
        /// <param name="SmartSending">Smart sending.</param>
        /// <param name="StorefrontOid">Storefront oid.</param>
        /// <param name="Subject">Subject.</param>
        /// <param name="TransactionalEmail">Transactional email.</param>
        /// <param name="Version">Version.</param>
        public EmailCommseqEmail(bool? Deleted = default(bool?), string EditedByUser = default(string), string EmailCommunicationSequenceEmailUuid = default(string), string EmailContainerCjson = default(string), string EmailTemplateVmPath = default(string), string FilterProfileEquationJson = default(string), bool? IndividuallyRender = default(bool?), string MerchantId = default(string), string PreviewText = default(string), bool? SmartSending = default(bool?), int? StorefrontOid = default(int?), string Subject = default(string), bool? TransactionalEmail = default(bool?), int? Version = default(int?))
        {
            this.Deleted = Deleted;
            this.EditedByUser = EditedByUser;
            this.EmailCommunicationSequenceEmailUuid = EmailCommunicationSequenceEmailUuid;
            this.EmailContainerCjson = EmailContainerCjson;
            this.EmailTemplateVmPath = EmailTemplateVmPath;
            this.FilterProfileEquationJson = FilterProfileEquationJson;
            this.IndividuallyRender = IndividuallyRender;
            this.MerchantId = MerchantId;
            this.PreviewText = PreviewText;
            this.SmartSending = SmartSending;
            this.StorefrontOid = StorefrontOid;
            this.Subject = Subject;
            this.TransactionalEmail = TransactionalEmail;
            this.Version = Version;
        }
        
        /// <summary>
        /// Deleted
        /// </summary>
        /// <value>Deleted</value>
        [DataMember(Name="deleted", EmitDefaultValue=false)]
        public bool? Deleted { get; set; }

        /// <summary>
        /// Edited by user
        /// </summary>
        /// <value>Edited by user</value>
        [DataMember(Name="edited_by_user", EmitDefaultValue=false)]
        public string EditedByUser { get; set; }

        /// <summary>
        /// Email communication sequence email uuid
        /// </summary>
        /// <value>Email communication sequence email uuid</value>
        [DataMember(Name="email_communication_sequence_email_uuid", EmitDefaultValue=false)]
        public string EmailCommunicationSequenceEmailUuid { get; set; }

        /// <summary>
        /// Email container cjson
        /// </summary>
        /// <value>Email container cjson</value>
        [DataMember(Name="email_container_cjson", EmitDefaultValue=false)]
        public string EmailContainerCjson { get; set; }

        /// <summary>
        /// Email template virtual path
        /// </summary>
        /// <value>Email template virtual path</value>
        [DataMember(Name="email_template_vm_path", EmitDefaultValue=false)]
        public string EmailTemplateVmPath { get; set; }

        /// <summary>
        /// Filter profile equation json
        /// </summary>
        /// <value>Filter profile equation json</value>
        [DataMember(Name="filter_profile_equation_json", EmitDefaultValue=false)]
        public string FilterProfileEquationJson { get; set; }

        /// <summary>
        /// Individually render
        /// </summary>
        /// <value>Individually render</value>
        [DataMember(Name="individually_render", EmitDefaultValue=false)]
        public bool? IndividuallyRender { get; set; }

        /// <summary>
        /// Merchant ID
        /// </summary>
        /// <value>Merchant ID</value>
        [DataMember(Name="merchant_id", EmitDefaultValue=false)]
        public string MerchantId { get; set; }

        /// <summary>
        /// Preview text
        /// </summary>
        /// <value>Preview text</value>
        [DataMember(Name="preview_text", EmitDefaultValue=false)]
        public string PreviewText { get; set; }

        /// <summary>
        /// Smart sending
        /// </summary>
        /// <value>Smart sending</value>
        [DataMember(Name="smart_sending", EmitDefaultValue=false)]
        public bool? SmartSending { get; set; }

        /// <summary>
        /// Storefront oid
        /// </summary>
        /// <value>Storefront oid</value>
        [DataMember(Name="storefront_oid", EmitDefaultValue=false)]
        public int? StorefrontOid { get; set; }

        /// <summary>
        /// Subject
        /// </summary>
        /// <value>Subject</value>
        [DataMember(Name="subject", EmitDefaultValue=false)]
        public string Subject { get; set; }

        /// <summary>
        /// Transactional email
        /// </summary>
        /// <value>Transactional email</value>
        [DataMember(Name="transactional_email", EmitDefaultValue=false)]
        public bool? TransactionalEmail { get; set; }

        /// <summary>
        /// Version
        /// </summary>
        /// <value>Version</value>
        [DataMember(Name="version", EmitDefaultValue=false)]
        public int? Version { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class EmailCommseqEmail {\n");
            sb.Append("  Deleted: ").Append(Deleted).Append("\n");
            sb.Append("  EditedByUser: ").Append(EditedByUser).Append("\n");
            sb.Append("  EmailCommunicationSequenceEmailUuid: ").Append(EmailCommunicationSequenceEmailUuid).Append("\n");
            sb.Append("  EmailContainerCjson: ").Append(EmailContainerCjson).Append("\n");
            sb.Append("  EmailTemplateVmPath: ").Append(EmailTemplateVmPath).Append("\n");
            sb.Append("  FilterProfileEquationJson: ").Append(FilterProfileEquationJson).Append("\n");
            sb.Append("  IndividuallyRender: ").Append(IndividuallyRender).Append("\n");
            sb.Append("  MerchantId: ").Append(MerchantId).Append("\n");
            sb.Append("  PreviewText: ").Append(PreviewText).Append("\n");
            sb.Append("  SmartSending: ").Append(SmartSending).Append("\n");
            sb.Append("  StorefrontOid: ").Append(StorefrontOid).Append("\n");
            sb.Append("  Subject: ").Append(Subject).Append("\n");
            sb.Append("  TransactionalEmail: ").Append(TransactionalEmail).Append("\n");
            sb.Append("  Version: ").Append(Version).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as EmailCommseqEmail);
        }

        /// <summary>
        /// Returns true if EmailCommseqEmail instances are equal
        /// </summary>
        /// <param name="input">Instance of EmailCommseqEmail to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(EmailCommseqEmail input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Deleted == input.Deleted ||
                    (this.Deleted != null &&
                    this.Deleted.Equals(input.Deleted))
                ) && 
                (
                    this.EditedByUser == input.EditedByUser ||
                    (this.EditedByUser != null &&
                    this.EditedByUser.Equals(input.EditedByUser))
                ) && 
                (
                    this.EmailCommunicationSequenceEmailUuid == input.EmailCommunicationSequenceEmailUuid ||
                    (this.EmailCommunicationSequenceEmailUuid != null &&
                    this.EmailCommunicationSequenceEmailUuid.Equals(input.EmailCommunicationSequenceEmailUuid))
                ) && 
                (
                    this.EmailContainerCjson == input.EmailContainerCjson ||
                    (this.EmailContainerCjson != null &&
                    this.EmailContainerCjson.Equals(input.EmailContainerCjson))
                ) && 
                (
                    this.EmailTemplateVmPath == input.EmailTemplateVmPath ||
                    (this.EmailTemplateVmPath != null &&
                    this.EmailTemplateVmPath.Equals(input.EmailTemplateVmPath))
                ) && 
                (
                    this.FilterProfileEquationJson == input.FilterProfileEquationJson ||
                    (this.FilterProfileEquationJson != null &&
                    this.FilterProfileEquationJson.Equals(input.FilterProfileEquationJson))
                ) && 
                (
                    this.IndividuallyRender == input.IndividuallyRender ||
                    (this.IndividuallyRender != null &&
                    this.IndividuallyRender.Equals(input.IndividuallyRender))
                ) && 
                (
                    this.MerchantId == input.MerchantId ||
                    (this.MerchantId != null &&
                    this.MerchantId.Equals(input.MerchantId))
                ) && 
                (
                    this.PreviewText == input.PreviewText ||
                    (this.PreviewText != null &&
                    this.PreviewText.Equals(input.PreviewText))
                ) && 
                (
                    this.SmartSending == input.SmartSending ||
                    (this.SmartSending != null &&
                    this.SmartSending.Equals(input.SmartSending))
                ) && 
                (
                    this.StorefrontOid == input.StorefrontOid ||
                    (this.StorefrontOid != null &&
                    this.StorefrontOid.Equals(input.StorefrontOid))
                ) && 
                (
                    this.Subject == input.Subject ||
                    (this.Subject != null &&
                    this.Subject.Equals(input.Subject))
                ) && 
                (
                    this.TransactionalEmail == input.TransactionalEmail ||
                    (this.TransactionalEmail != null &&
                    this.TransactionalEmail.Equals(input.TransactionalEmail))
                ) && 
                (
                    this.Version == input.Version ||
                    (this.Version != null &&
                    this.Version.Equals(input.Version))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Deleted != null)
                    hashCode = hashCode * 59 + this.Deleted.GetHashCode();
                if (this.EditedByUser != null)
                    hashCode = hashCode * 59 + this.EditedByUser.GetHashCode();
                if (this.EmailCommunicationSequenceEmailUuid != null)
                    hashCode = hashCode * 59 + this.EmailCommunicationSequenceEmailUuid.GetHashCode();
                if (this.EmailContainerCjson != null)
                    hashCode = hashCode * 59 + this.EmailContainerCjson.GetHashCode();
                if (this.EmailTemplateVmPath != null)
                    hashCode = hashCode * 59 + this.EmailTemplateVmPath.GetHashCode();
                if (this.FilterProfileEquationJson != null)
                    hashCode = hashCode * 59 + this.FilterProfileEquationJson.GetHashCode();
                if (this.IndividuallyRender != null)
                    hashCode = hashCode * 59 + this.IndividuallyRender.GetHashCode();
                if (this.MerchantId != null)
                    hashCode = hashCode * 59 + this.MerchantId.GetHashCode();
                if (this.PreviewText != null)
                    hashCode = hashCode * 59 + this.PreviewText.GetHashCode();
                if (this.SmartSending != null)
                    hashCode = hashCode * 59 + this.SmartSending.GetHashCode();
                if (this.StorefrontOid != null)
                    hashCode = hashCode * 59 + this.StorefrontOid.GetHashCode();
                if (this.Subject != null)
                    hashCode = hashCode * 59 + this.Subject.GetHashCode();
                if (this.TransactionalEmail != null)
                    hashCode = hashCode * 59 + this.TransactionalEmail.GetHashCode();
                if (this.Version != null)
                    hashCode = hashCode * 59 + this.Version.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
