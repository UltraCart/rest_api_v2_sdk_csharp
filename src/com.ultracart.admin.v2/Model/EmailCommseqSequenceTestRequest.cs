/*
 * UltraCart Rest API V2
 *
 * UltraCart REST API Version 2
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@ultracart.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = com.ultracart.admin.v2.Client.OpenAPIDateConverter;

namespace com.ultracart.admin.v2.Model
{
    /// <summary>
    /// EmailCommseqSequenceTestRequest
    /// </summary>
    [DataContract]
    public partial class EmailCommseqSequenceTestRequest :  IEquatable<EmailCommseqSequenceTestRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EmailCommseqSequenceTestRequest" /> class.
        /// </summary>
        /// <param name="cartId">cartId.</param>
        /// <param name="cartItemIds">cartItemIds.</param>
        /// <param name="espCommseqUuid">espCommseqUuid.</param>
        /// <param name="name">name.</param>
        /// <param name="orderId">orderId.</param>
        /// <param name="pleaseReview">pleaseReview.</param>
        /// <param name="sendToEmail">sendToEmail.</param>
        /// <param name="sendToLoggedInUser">sendToLoggedInUser.</param>
        public EmailCommseqSequenceTestRequest(string cartId = default(string), List<string> cartItemIds = default(List<string>), string espCommseqUuid = default(string), string name = default(string), string orderId = default(string), bool pleaseReview = default(bool), string sendToEmail = default(string), bool sendToLoggedInUser = default(bool))
        {
            this.CartId = cartId;
            this.CartItemIds = cartItemIds;
            this.EspCommseqUuid = espCommseqUuid;
            this.Name = name;
            this.OrderId = orderId;
            this.PleaseReview = pleaseReview;
            this.SendToEmail = sendToEmail;
            this.SendToLoggedInUser = sendToLoggedInUser;
        }

        /// <summary>
        /// Gets or Sets CartId
        /// </summary>
        [DataMember(Name="cart_id", EmitDefaultValue=false)]
        public string CartId { get; set; }

        /// <summary>
        /// Gets or Sets CartItemIds
        /// </summary>
        [DataMember(Name="cart_item_ids", EmitDefaultValue=false)]
        public List<string> CartItemIds { get; set; }

        /// <summary>
        /// Gets or Sets EspCommseqUuid
        /// </summary>
        [DataMember(Name="esp_commseq_uuid", EmitDefaultValue=false)]
        public string EspCommseqUuid { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets OrderId
        /// </summary>
        [DataMember(Name="order_id", EmitDefaultValue=false)]
        public string OrderId { get; set; }

        /// <summary>
        /// Gets or Sets PleaseReview
        /// </summary>
        [DataMember(Name="please_review", EmitDefaultValue=false)]
        public bool PleaseReview { get; set; }

        /// <summary>
        /// Gets or Sets SendToEmail
        /// </summary>
        [DataMember(Name="send_to_email", EmitDefaultValue=false)]
        public string SendToEmail { get; set; }

        /// <summary>
        /// Gets or Sets SendToLoggedInUser
        /// </summary>
        [DataMember(Name="send_to_logged_in_user", EmitDefaultValue=false)]
        public bool SendToLoggedInUser { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class EmailCommseqSequenceTestRequest {\n");
            sb.Append("  CartId: ").Append(CartId).Append("\n");
            sb.Append("  CartItemIds: ").Append(CartItemIds).Append("\n");
            sb.Append("  EspCommseqUuid: ").Append(EspCommseqUuid).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  OrderId: ").Append(OrderId).Append("\n");
            sb.Append("  PleaseReview: ").Append(PleaseReview).Append("\n");
            sb.Append("  SendToEmail: ").Append(SendToEmail).Append("\n");
            sb.Append("  SendToLoggedInUser: ").Append(SendToLoggedInUser).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as EmailCommseqSequenceTestRequest);
        }

        /// <summary>
        /// Returns true if EmailCommseqSequenceTestRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of EmailCommseqSequenceTestRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(EmailCommseqSequenceTestRequest input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.CartId == input.CartId ||
                    (this.CartId != null &&
                    this.CartId.Equals(input.CartId))
                ) && 
                (
                    this.CartItemIds == input.CartItemIds ||
                    this.CartItemIds != null &&
                    input.CartItemIds != null &&
                    this.CartItemIds.SequenceEqual(input.CartItemIds)
                ) && 
                (
                    this.EspCommseqUuid == input.EspCommseqUuid ||
                    (this.EspCommseqUuid != null &&
                    this.EspCommseqUuid.Equals(input.EspCommseqUuid))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.OrderId == input.OrderId ||
                    (this.OrderId != null &&
                    this.OrderId.Equals(input.OrderId))
                ) && 
                (
                    this.PleaseReview == input.PleaseReview ||
                    (this.PleaseReview != null &&
                    this.PleaseReview.Equals(input.PleaseReview))
                ) && 
                (
                    this.SendToEmail == input.SendToEmail ||
                    (this.SendToEmail != null &&
                    this.SendToEmail.Equals(input.SendToEmail))
                ) && 
                (
                    this.SendToLoggedInUser == input.SendToLoggedInUser ||
                    (this.SendToLoggedInUser != null &&
                    this.SendToLoggedInUser.Equals(input.SendToLoggedInUser))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.CartId != null)
                    hashCode = hashCode * 59 + this.CartId.GetHashCode();
                if (this.CartItemIds != null)
                    hashCode = hashCode * 59 + this.CartItemIds.GetHashCode();
                if (this.EspCommseqUuid != null)
                    hashCode = hashCode * 59 + this.EspCommseqUuid.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.OrderId != null)
                    hashCode = hashCode * 59 + this.OrderId.GetHashCode();
                if (this.PleaseReview != null)
                    hashCode = hashCode * 59 + this.PleaseReview.GetHashCode();
                if (this.SendToEmail != null)
                    hashCode = hashCode * 59 + this.SendToEmail.GetHashCode();
                if (this.SendToLoggedInUser != null)
                    hashCode = hashCode * 59 + this.SendToLoggedInUser.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
