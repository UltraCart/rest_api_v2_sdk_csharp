/* 
 * UltraCart Rest API V2
 *
 * UltraCart REST API Version 2
 *
 * OpenAPI spec version: 2.0.0
 * Contact: support@ultracart.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = com.ultracart.admin.v2.Client.SwaggerDateConverter;

namespace com.ultracart.admin.v2.Model
{
    /// <summary>
    /// EmailCommseqStep
    /// </summary>
    [DataContract]
    public partial class EmailCommseqStep :  IEquatable<EmailCommseqStep>, IValidatableObject
    {
        /// <summary>
        /// Type of step
        /// </summary>
        /// <value>Type of step</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TypeEnum
        {
            
            /// <summary>
            /// Enum Begin for "begin"
            /// </summary>
            [EnumMember(Value = "begin")]
            Begin,
            
            /// <summary>
            /// Enum Wait for "wait"
            /// </summary>
            [EnumMember(Value = "wait")]
            Wait,
            
            /// <summary>
            /// Enum Email for "email"
            /// </summary>
            [EnumMember(Value = "email")]
            Email,
            
            /// <summary>
            /// Enum Merge for "merge"
            /// </summary>
            [EnumMember(Value = "merge")]
            Merge,
            
            /// <summary>
            /// Enum Condition for "condition"
            /// </summary>
            [EnumMember(Value = "condition")]
            Condition,
            
            /// <summary>
            /// Enum End for "end"
            /// </summary>
            [EnumMember(Value = "end")]
            End
        }

        /// <summary>
        /// Type of step
        /// </summary>
        /// <value>Type of step</value>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public TypeEnum? Type { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="EmailCommseqStep" /> class.
        /// </summary>
        /// <param name="AltChildEmailCommunicationSequenceSteps">Array of child steps for the alternate path.</param>
        /// <param name="ChildEmailCommunicationSequenceSteps">Array of child steps.</param>
        /// <param name="EmailCommunicationSequenceStepUuid">Email commseq step UUID.</param>
        /// <param name="FilterProfileEquationJson">Filter profile equation JSON.</param>
        /// <param name="StepConfigJson">Arbitrary Configuration for a step.</param>
        /// <param name="Type">Type of step.</param>
        public EmailCommseqStep(List<EmailCommseqStep> AltChildEmailCommunicationSequenceSteps = default(List<EmailCommseqStep>), List<EmailCommseqStep> ChildEmailCommunicationSequenceSteps = default(List<EmailCommseqStep>), string EmailCommunicationSequenceStepUuid = default(string), string FilterProfileEquationJson = default(string), string StepConfigJson = default(string), TypeEnum? Type = default(TypeEnum?))
        {
            this.AltChildEmailCommunicationSequenceSteps = AltChildEmailCommunicationSequenceSteps;
            this.ChildEmailCommunicationSequenceSteps = ChildEmailCommunicationSequenceSteps;
            this.EmailCommunicationSequenceStepUuid = EmailCommunicationSequenceStepUuid;
            this.FilterProfileEquationJson = FilterProfileEquationJson;
            this.StepConfigJson = StepConfigJson;
            this.Type = Type;
        }
        
        /// <summary>
        /// Array of child steps for the alternate path
        /// </summary>
        /// <value>Array of child steps for the alternate path</value>
        [DataMember(Name="alt_child_email_communication_sequence_steps", EmitDefaultValue=false)]
        public List<EmailCommseqStep> AltChildEmailCommunicationSequenceSteps { get; set; }

        /// <summary>
        /// Array of child steps
        /// </summary>
        /// <value>Array of child steps</value>
        [DataMember(Name="child_email_communication_sequence_steps", EmitDefaultValue=false)]
        public List<EmailCommseqStep> ChildEmailCommunicationSequenceSteps { get; set; }

        /// <summary>
        /// Email commseq step UUID
        /// </summary>
        /// <value>Email commseq step UUID</value>
        [DataMember(Name="email_communication_sequence_step_uuid", EmitDefaultValue=false)]
        public string EmailCommunicationSequenceStepUuid { get; set; }

        /// <summary>
        /// Filter profile equation JSON
        /// </summary>
        /// <value>Filter profile equation JSON</value>
        [DataMember(Name="filter_profile_equation_json", EmitDefaultValue=false)]
        public string FilterProfileEquationJson { get; set; }

        /// <summary>
        /// Arbitrary Configuration for a step
        /// </summary>
        /// <value>Arbitrary Configuration for a step</value>
        [DataMember(Name="step_config_json", EmitDefaultValue=false)]
        public string StepConfigJson { get; set; }


        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class EmailCommseqStep {\n");
            sb.Append("  AltChildEmailCommunicationSequenceSteps: ").Append(AltChildEmailCommunicationSequenceSteps).Append("\n");
            sb.Append("  ChildEmailCommunicationSequenceSteps: ").Append(ChildEmailCommunicationSequenceSteps).Append("\n");
            sb.Append("  EmailCommunicationSequenceStepUuid: ").Append(EmailCommunicationSequenceStepUuid).Append("\n");
            sb.Append("  FilterProfileEquationJson: ").Append(FilterProfileEquationJson).Append("\n");
            sb.Append("  StepConfigJson: ").Append(StepConfigJson).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as EmailCommseqStep);
        }

        /// <summary>
        /// Returns true if EmailCommseqStep instances are equal
        /// </summary>
        /// <param name="input">Instance of EmailCommseqStep to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(EmailCommseqStep input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.AltChildEmailCommunicationSequenceSteps == input.AltChildEmailCommunicationSequenceSteps ||
                    this.AltChildEmailCommunicationSequenceSteps != null &&
                    this.AltChildEmailCommunicationSequenceSteps.SequenceEqual(input.AltChildEmailCommunicationSequenceSteps)
                ) && 
                (
                    this.ChildEmailCommunicationSequenceSteps == input.ChildEmailCommunicationSequenceSteps ||
                    this.ChildEmailCommunicationSequenceSteps != null &&
                    this.ChildEmailCommunicationSequenceSteps.SequenceEqual(input.ChildEmailCommunicationSequenceSteps)
                ) && 
                (
                    this.EmailCommunicationSequenceStepUuid == input.EmailCommunicationSequenceStepUuid ||
                    (this.EmailCommunicationSequenceStepUuid != null &&
                    this.EmailCommunicationSequenceStepUuid.Equals(input.EmailCommunicationSequenceStepUuid))
                ) && 
                (
                    this.FilterProfileEquationJson == input.FilterProfileEquationJson ||
                    (this.FilterProfileEquationJson != null &&
                    this.FilterProfileEquationJson.Equals(input.FilterProfileEquationJson))
                ) && 
                (
                    this.StepConfigJson == input.StepConfigJson ||
                    (this.StepConfigJson != null &&
                    this.StepConfigJson.Equals(input.StepConfigJson))
                ) && 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AltChildEmailCommunicationSequenceSteps != null)
                    hashCode = hashCode * 59 + this.AltChildEmailCommunicationSequenceSteps.GetHashCode();
                if (this.ChildEmailCommunicationSequenceSteps != null)
                    hashCode = hashCode * 59 + this.ChildEmailCommunicationSequenceSteps.GetHashCode();
                if (this.EmailCommunicationSequenceStepUuid != null)
                    hashCode = hashCode * 59 + this.EmailCommunicationSequenceStepUuid.GetHashCode();
                if (this.FilterProfileEquationJson != null)
                    hashCode = hashCode * 59 + this.FilterProfileEquationJson.GetHashCode();
                if (this.StepConfigJson != null)
                    hashCode = hashCode * 59 + this.StepConfigJson.GetHashCode();
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
