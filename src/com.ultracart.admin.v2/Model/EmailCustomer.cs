/* 
 * UltraCart Rest API V2
 *
 * UltraCart REST API Version 2
 *
 * OpenAPI spec version: 2.0.0
 * Contact: support@ultracart.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = com.ultracart.admin.v2.Client.SwaggerDateConverter;

namespace com.ultracart.admin.v2.Model
{
    /// <summary>
    /// EmailCustomer
    /// </summary>
    [DataContract]
    public partial class EmailCustomer :  IEquatable<EmailCustomer>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EmailCustomer" /> class.
        /// </summary>
        /// <param name="active">True if the customer is flagged as active within StoreFront Communications.</param>
        /// <param name="email">Email.</param>
        /// <param name="emailCustomerUuid">Email customer UUID.</param>
        /// <param name="firstName">First name.</param>
        /// <param name="globalUnsubscribe">True if the customer has globally unsubscribed from all communication..</param>
        /// <param name="lastInteractionDts">Last interaction.</param>
        /// <param name="lastName">Last name.</param>
        /// <param name="listUuids">UUIDs of the lists they are subscribed to.</param>
        public EmailCustomer(bool? active = default(bool?), string email = default(string), string emailCustomerUuid = default(string), string firstName = default(string), bool? globalUnsubscribe = default(bool?), string lastInteractionDts = default(string), string lastName = default(string), List<string> listUuids = default(List<string>))
        {
            this.Active = active;
            this.Email = email;
            this.EmailCustomerUuid = emailCustomerUuid;
            this.FirstName = firstName;
            this.GlobalUnsubscribe = globalUnsubscribe;
            this.LastInteractionDts = lastInteractionDts;
            this.LastName = lastName;
            this.ListUuids = listUuids;
        }
        
        /// <summary>
        /// True if the customer is flagged as active within StoreFront Communications
        /// </summary>
        /// <value>True if the customer is flagged as active within StoreFront Communications</value>
        [DataMember(Name="active", EmitDefaultValue=false)]
        public bool? Active { get; set; }

        /// <summary>
        /// Email
        /// </summary>
        /// <value>Email</value>
        [DataMember(Name="email", EmitDefaultValue=false)]
        public string Email { get; set; }

        /// <summary>
        /// Email customer UUID
        /// </summary>
        /// <value>Email customer UUID</value>
        [DataMember(Name="email_customer_uuid", EmitDefaultValue=false)]
        public string EmailCustomerUuid { get; set; }

        /// <summary>
        /// First name
        /// </summary>
        /// <value>First name</value>
        [DataMember(Name="first_name", EmitDefaultValue=false)]
        public string FirstName { get; set; }

        /// <summary>
        /// True if the customer has globally unsubscribed from all communication.
        /// </summary>
        /// <value>True if the customer has globally unsubscribed from all communication.</value>
        [DataMember(Name="global_unsubscribe", EmitDefaultValue=false)]
        public bool? GlobalUnsubscribe { get; set; }

        /// <summary>
        /// Last interaction
        /// </summary>
        /// <value>Last interaction</value>
        [DataMember(Name="last_interaction_dts", EmitDefaultValue=false)]
        public string LastInteractionDts { get; set; }

        /// <summary>
        /// Last name
        /// </summary>
        /// <value>Last name</value>
        [DataMember(Name="last_name", EmitDefaultValue=false)]
        public string LastName { get; set; }

        /// <summary>
        /// UUIDs of the lists they are subscribed to
        /// </summary>
        /// <value>UUIDs of the lists they are subscribed to</value>
        [DataMember(Name="list_uuids", EmitDefaultValue=false)]
        public List<string> ListUuids { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class EmailCustomer {\n");
            sb.Append("  Active: ").Append(Active).Append("\n");
            sb.Append("  Email: ").Append(Email).Append("\n");
            sb.Append("  EmailCustomerUuid: ").Append(EmailCustomerUuid).Append("\n");
            sb.Append("  FirstName: ").Append(FirstName).Append("\n");
            sb.Append("  GlobalUnsubscribe: ").Append(GlobalUnsubscribe).Append("\n");
            sb.Append("  LastInteractionDts: ").Append(LastInteractionDts).Append("\n");
            sb.Append("  LastName: ").Append(LastName).Append("\n");
            sb.Append("  ListUuids: ").Append(ListUuids).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as EmailCustomer);
        }

        /// <summary>
        /// Returns true if EmailCustomer instances are equal
        /// </summary>
        /// <param name="input">Instance of EmailCustomer to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(EmailCustomer input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Active == input.Active ||
                    (this.Active != null &&
                    this.Active.Equals(input.Active))
                ) && 
                (
                    this.Email == input.Email ||
                    (this.Email != null &&
                    this.Email.Equals(input.Email))
                ) && 
                (
                    this.EmailCustomerUuid == input.EmailCustomerUuid ||
                    (this.EmailCustomerUuid != null &&
                    this.EmailCustomerUuid.Equals(input.EmailCustomerUuid))
                ) && 
                (
                    this.FirstName == input.FirstName ||
                    (this.FirstName != null &&
                    this.FirstName.Equals(input.FirstName))
                ) && 
                (
                    this.GlobalUnsubscribe == input.GlobalUnsubscribe ||
                    (this.GlobalUnsubscribe != null &&
                    this.GlobalUnsubscribe.Equals(input.GlobalUnsubscribe))
                ) && 
                (
                    this.LastInteractionDts == input.LastInteractionDts ||
                    (this.LastInteractionDts != null &&
                    this.LastInteractionDts.Equals(input.LastInteractionDts))
                ) && 
                (
                    this.LastName == input.LastName ||
                    (this.LastName != null &&
                    this.LastName.Equals(input.LastName))
                ) && 
                (
                    this.ListUuids == input.ListUuids ||
                    this.ListUuids != null &&
                    this.ListUuids.SequenceEqual(input.ListUuids)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Active != null)
                    hashCode = hashCode * 59 + this.Active.GetHashCode();
                if (this.Email != null)
                    hashCode = hashCode * 59 + this.Email.GetHashCode();
                if (this.EmailCustomerUuid != null)
                    hashCode = hashCode * 59 + this.EmailCustomerUuid.GetHashCode();
                if (this.FirstName != null)
                    hashCode = hashCode * 59 + this.FirstName.GetHashCode();
                if (this.GlobalUnsubscribe != null)
                    hashCode = hashCode * 59 + this.GlobalUnsubscribe.GetHashCode();
                if (this.LastInteractionDts != null)
                    hashCode = hashCode * 59 + this.LastInteractionDts.GetHashCode();
                if (this.LastName != null)
                    hashCode = hashCode * 59 + this.LastName.GetHashCode();
                if (this.ListUuids != null)
                    hashCode = hashCode * 59 + this.ListUuids.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
