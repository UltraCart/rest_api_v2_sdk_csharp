/* 
 * UltraCart Rest API V2
 *
 * UltraCart REST API Version 2
 *
 * OpenAPI spec version: 2.0.0
 * Contact: support@ultracart.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = com.ultracart.admin.v2.Client.SwaggerDateConverter;

namespace com.ultracart.admin.v2.Model
{
    /// <summary>
    /// EmailCustomersResponse
    /// </summary>
    [DataContract]
    public partial class EmailCustomersResponse :  IEquatable<EmailCustomersResponse>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EmailCustomersResponse" /> class.
        /// </summary>
        /// <param name="customers">Customers on the page.</param>
        /// <param name="pageNumber">Page number (one based offset).</param>
        /// <param name="pageSize">Number of records per page.</param>
        /// <param name="totalCustomers">Total customers.</param>
        /// <param name="totalPages">Total number of pages.</param>
        public EmailCustomersResponse(List<EmailCustomer> customers = default(List<EmailCustomer>), int? pageNumber = default(int?), int? pageSize = default(int?), int? totalCustomers = default(int?), int? totalPages = default(int?))
        {
            this.Customers = customers;
            this.PageNumber = pageNumber;
            this.PageSize = pageSize;
            this.TotalCustomers = totalCustomers;
            this.TotalPages = totalPages;
        }
        
        /// <summary>
        /// Customers on the page
        /// </summary>
        /// <value>Customers on the page</value>
        [DataMember(Name="customers", EmitDefaultValue=false)]
        public List<EmailCustomer> Customers { get; set; }

        /// <summary>
        /// Page number (one based offset)
        /// </summary>
        /// <value>Page number (one based offset)</value>
        [DataMember(Name="page_number", EmitDefaultValue=false)]
        public int? PageNumber { get; set; }

        /// <summary>
        /// Number of records per page
        /// </summary>
        /// <value>Number of records per page</value>
        [DataMember(Name="page_size", EmitDefaultValue=false)]
        public int? PageSize { get; set; }

        /// <summary>
        /// Total customers
        /// </summary>
        /// <value>Total customers</value>
        [DataMember(Name="total_customers", EmitDefaultValue=false)]
        public int? TotalCustomers { get; set; }

        /// <summary>
        /// Total number of pages
        /// </summary>
        /// <value>Total number of pages</value>
        [DataMember(Name="total_pages", EmitDefaultValue=false)]
        public int? TotalPages { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class EmailCustomersResponse {\n");
            sb.Append("  Customers: ").Append(Customers).Append("\n");
            sb.Append("  PageNumber: ").Append(PageNumber).Append("\n");
            sb.Append("  PageSize: ").Append(PageSize).Append("\n");
            sb.Append("  TotalCustomers: ").Append(TotalCustomers).Append("\n");
            sb.Append("  TotalPages: ").Append(TotalPages).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as EmailCustomersResponse);
        }

        /// <summary>
        /// Returns true if EmailCustomersResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of EmailCustomersResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(EmailCustomersResponse input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Customers == input.Customers ||
                    this.Customers != null &&
                    this.Customers.SequenceEqual(input.Customers)
                ) && 
                (
                    this.PageNumber == input.PageNumber ||
                    (this.PageNumber != null &&
                    this.PageNumber.Equals(input.PageNumber))
                ) && 
                (
                    this.PageSize == input.PageSize ||
                    (this.PageSize != null &&
                    this.PageSize.Equals(input.PageSize))
                ) && 
                (
                    this.TotalCustomers == input.TotalCustomers ||
                    (this.TotalCustomers != null &&
                    this.TotalCustomers.Equals(input.TotalCustomers))
                ) && 
                (
                    this.TotalPages == input.TotalPages ||
                    (this.TotalPages != null &&
                    this.TotalPages.Equals(input.TotalPages))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Customers != null)
                    hashCode = hashCode * 59 + this.Customers.GetHashCode();
                if (this.PageNumber != null)
                    hashCode = hashCode * 59 + this.PageNumber.GetHashCode();
                if (this.PageSize != null)
                    hashCode = hashCode * 59 + this.PageSize.GetHashCode();
                if (this.TotalCustomers != null)
                    hashCode = hashCode * 59 + this.TotalCustomers.GetHashCode();
                if (this.TotalPages != null)
                    hashCode = hashCode * 59 + this.TotalPages.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
