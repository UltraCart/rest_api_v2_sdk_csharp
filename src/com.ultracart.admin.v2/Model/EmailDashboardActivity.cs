/*
 * UltraCart Rest API V2
 *
 * UltraCart REST API Version 2
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@ultracart.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = com.ultracart.admin.v2.Client.OpenAPIDateConverter;

namespace com.ultracart.admin.v2.Model
{
    /// <summary>
    /// EmailDashboardActivity
    /// </summary>
    [DataContract]
    public partial class EmailDashboardActivity :  IEquatable<EmailDashboardActivity>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EmailDashboardActivity" /> class.
        /// </summary>
        /// <param name="action">Type of action such as add, remove, subscribe, unsubscribe.</param>
        /// <param name="activityDts">Date/time of the activity.</param>
        /// <param name="destinationName">List or segment name.</param>
        /// <param name="destinationUuid">List or segment uuid.</param>
        /// <param name="email">Email address.</param>
        /// <param name="isList">true if activity is related to list.</param>
        /// <param name="isSegment">true if activity is related to segment.</param>
        public EmailDashboardActivity(string action = default(string), string activityDts = default(string), string destinationName = default(string), string destinationUuid = default(string), string email = default(string), bool isList = default(bool), bool isSegment = default(bool))
        {
            this.Action = action;
            this.ActivityDts = activityDts;
            this.DestinationName = destinationName;
            this.DestinationUuid = destinationUuid;
            this.Email = email;
            this.IsList = isList;
            this.IsSegment = isSegment;
        }

        /// <summary>
        /// Type of action such as add, remove, subscribe, unsubscribe
        /// </summary>
        /// <value>Type of action such as add, remove, subscribe, unsubscribe</value>
        [DataMember(Name="action", EmitDefaultValue=false)]
        public string Action { get; set; }

        /// <summary>
        /// Date/time of the activity
        /// </summary>
        /// <value>Date/time of the activity</value>
        [DataMember(Name="activity_dts", EmitDefaultValue=false)]
        public string ActivityDts { get; set; }

        /// <summary>
        /// List or segment name
        /// </summary>
        /// <value>List or segment name</value>
        [DataMember(Name="destination_name", EmitDefaultValue=false)]
        public string DestinationName { get; set; }

        /// <summary>
        /// List or segment uuid
        /// </summary>
        /// <value>List or segment uuid</value>
        [DataMember(Name="destination_uuid", EmitDefaultValue=false)]
        public string DestinationUuid { get; set; }

        /// <summary>
        /// Email address
        /// </summary>
        /// <value>Email address</value>
        [DataMember(Name="email", EmitDefaultValue=false)]
        public string Email { get; set; }

        /// <summary>
        /// true if activity is related to list
        /// </summary>
        /// <value>true if activity is related to list</value>
        [DataMember(Name="is_list", EmitDefaultValue=false)]
        public bool IsList { get; set; }

        /// <summary>
        /// true if activity is related to segment
        /// </summary>
        /// <value>true if activity is related to segment</value>
        [DataMember(Name="is_segment", EmitDefaultValue=false)]
        public bool IsSegment { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class EmailDashboardActivity {\n");
            sb.Append("  Action: ").Append(Action).Append("\n");
            sb.Append("  ActivityDts: ").Append(ActivityDts).Append("\n");
            sb.Append("  DestinationName: ").Append(DestinationName).Append("\n");
            sb.Append("  DestinationUuid: ").Append(DestinationUuid).Append("\n");
            sb.Append("  Email: ").Append(Email).Append("\n");
            sb.Append("  IsList: ").Append(IsList).Append("\n");
            sb.Append("  IsSegment: ").Append(IsSegment).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as EmailDashboardActivity);
        }

        /// <summary>
        /// Returns true if EmailDashboardActivity instances are equal
        /// </summary>
        /// <param name="input">Instance of EmailDashboardActivity to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(EmailDashboardActivity input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Action == input.Action ||
                    (this.Action != null &&
                    this.Action.Equals(input.Action))
                ) && 
                (
                    this.ActivityDts == input.ActivityDts ||
                    (this.ActivityDts != null &&
                    this.ActivityDts.Equals(input.ActivityDts))
                ) && 
                (
                    this.DestinationName == input.DestinationName ||
                    (this.DestinationName != null &&
                    this.DestinationName.Equals(input.DestinationName))
                ) && 
                (
                    this.DestinationUuid == input.DestinationUuid ||
                    (this.DestinationUuid != null &&
                    this.DestinationUuid.Equals(input.DestinationUuid))
                ) && 
                (
                    this.Email == input.Email ||
                    (this.Email != null &&
                    this.Email.Equals(input.Email))
                ) && 
                (
                    this.IsList == input.IsList ||
                    (this.IsList != null &&
                    this.IsList.Equals(input.IsList))
                ) && 
                (
                    this.IsSegment == input.IsSegment ||
                    (this.IsSegment != null &&
                    this.IsSegment.Equals(input.IsSegment))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Action != null)
                    hashCode = hashCode * 59 + this.Action.GetHashCode();
                if (this.ActivityDts != null)
                    hashCode = hashCode * 59 + this.ActivityDts.GetHashCode();
                if (this.DestinationName != null)
                    hashCode = hashCode * 59 + this.DestinationName.GetHashCode();
                if (this.DestinationUuid != null)
                    hashCode = hashCode * 59 + this.DestinationUuid.GetHashCode();
                if (this.Email != null)
                    hashCode = hashCode * 59 + this.Email.GetHashCode();
                if (this.IsList != null)
                    hashCode = hashCode * 59 + this.IsList.GetHashCode();
                if (this.IsSegment != null)
                    hashCode = hashCode * 59 + this.IsSegment.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
