/*
 * UltraCart Rest API V2
 *
 * UltraCart REST API Version 2
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@ultracart.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = com.ultracart.admin.v2.Client.OpenAPIDateConverter;

namespace com.ultracart.admin.v2.Model
{
    /// <summary>
    /// EmailDomain
    /// </summary>
    [DataContract]
    public partial class EmailDomain :  IEquatable<EmailDomain>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EmailDomain" /> class.
        /// </summary>
        /// <param name="comment">comment.</param>
        /// <param name="dkim">dkim.</param>
        /// <param name="dkimStatus">dkimStatus.</param>
        /// <param name="domain">domain.</param>
        /// <param name="espDomainUuid">espDomainUuid.</param>
        /// <param name="identityStatus">identityStatus.</param>
        /// <param name="mailgun">mailgun.</param>
        /// <param name="merchantId">merchantId.</param>
        /// <param name="provider">provider.</param>
        /// <param name="spf">spf.</param>
        /// <param name="startDkimDts">startDkimDts.</param>
        /// <param name="startIdentityDts">startIdentityDts.</param>
        /// <param name="verification">verification.</param>
        public EmailDomain(string comment = default(string), List<VerificationRecord> dkim = default(List<VerificationRecord>), string dkimStatus = default(string), string domain = default(string), string espDomainUuid = default(string), string identityStatus = default(string), Mailgun mailgun = default(Mailgun), string merchantId = default(string), string provider = default(string), VerificationRecord spf = default(VerificationRecord), string startDkimDts = default(string), string startIdentityDts = default(string), VerificationRecord verification = default(VerificationRecord))
        {
            this.Comment = comment;
            this.Dkim = dkim;
            this.DkimStatus = dkimStatus;
            this.Domain = domain;
            this.EspDomainUuid = espDomainUuid;
            this.IdentityStatus = identityStatus;
            this.Mailgun = mailgun;
            this.MerchantId = merchantId;
            this.Provider = provider;
            this.Spf = spf;
            this.StartDkimDts = startDkimDts;
            this.StartIdentityDts = startIdentityDts;
            this.Verification = verification;
        }

        /// <summary>
        /// Gets or Sets Comment
        /// </summary>
        [DataMember(Name="comment", EmitDefaultValue=false)]
        public string Comment { get; set; }

        /// <summary>
        /// Gets or Sets Dkim
        /// </summary>
        [DataMember(Name="dkim", EmitDefaultValue=false)]
        public List<VerificationRecord> Dkim { get; set; }

        /// <summary>
        /// Gets or Sets DkimStatus
        /// </summary>
        [DataMember(Name="dkim_status", EmitDefaultValue=false)]
        public string DkimStatus { get; set; }

        /// <summary>
        /// Gets or Sets Domain
        /// </summary>
        [DataMember(Name="domain", EmitDefaultValue=false)]
        public string Domain { get; set; }

        /// <summary>
        /// Gets or Sets EspDomainUuid
        /// </summary>
        [DataMember(Name="esp_domain_uuid", EmitDefaultValue=false)]
        public string EspDomainUuid { get; set; }

        /// <summary>
        /// Gets or Sets IdentityStatus
        /// </summary>
        [DataMember(Name="identity_status", EmitDefaultValue=false)]
        public string IdentityStatus { get; set; }

        /// <summary>
        /// Gets or Sets Mailgun
        /// </summary>
        [DataMember(Name="mailgun", EmitDefaultValue=false)]
        public Mailgun Mailgun { get; set; }

        /// <summary>
        /// Gets or Sets MerchantId
        /// </summary>
        [DataMember(Name="merchant_id", EmitDefaultValue=false)]
        public string MerchantId { get; set; }

        /// <summary>
        /// Gets or Sets Provider
        /// </summary>
        [DataMember(Name="provider", EmitDefaultValue=false)]
        public string Provider { get; set; }

        /// <summary>
        /// Gets or Sets Spf
        /// </summary>
        [DataMember(Name="spf", EmitDefaultValue=false)]
        public VerificationRecord Spf { get; set; }

        /// <summary>
        /// Gets or Sets StartDkimDts
        /// </summary>
        [DataMember(Name="start_dkim_dts", EmitDefaultValue=false)]
        public string StartDkimDts { get; set; }

        /// <summary>
        /// Gets or Sets StartIdentityDts
        /// </summary>
        [DataMember(Name="start_identity_dts", EmitDefaultValue=false)]
        public string StartIdentityDts { get; set; }

        /// <summary>
        /// Gets or Sets Verification
        /// </summary>
        [DataMember(Name="verification", EmitDefaultValue=false)]
        public VerificationRecord Verification { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class EmailDomain {\n");
            sb.Append("  Comment: ").Append(Comment).Append("\n");
            sb.Append("  Dkim: ").Append(Dkim).Append("\n");
            sb.Append("  DkimStatus: ").Append(DkimStatus).Append("\n");
            sb.Append("  Domain: ").Append(Domain).Append("\n");
            sb.Append("  EspDomainUuid: ").Append(EspDomainUuid).Append("\n");
            sb.Append("  IdentityStatus: ").Append(IdentityStatus).Append("\n");
            sb.Append("  Mailgun: ").Append(Mailgun).Append("\n");
            sb.Append("  MerchantId: ").Append(MerchantId).Append("\n");
            sb.Append("  Provider: ").Append(Provider).Append("\n");
            sb.Append("  Spf: ").Append(Spf).Append("\n");
            sb.Append("  StartDkimDts: ").Append(StartDkimDts).Append("\n");
            sb.Append("  StartIdentityDts: ").Append(StartIdentityDts).Append("\n");
            sb.Append("  Verification: ").Append(Verification).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as EmailDomain);
        }

        /// <summary>
        /// Returns true if EmailDomain instances are equal
        /// </summary>
        /// <param name="input">Instance of EmailDomain to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(EmailDomain input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Comment == input.Comment ||
                    (this.Comment != null &&
                    this.Comment.Equals(input.Comment))
                ) && 
                (
                    this.Dkim == input.Dkim ||
                    this.Dkim != null &&
                    input.Dkim != null &&
                    this.Dkim.SequenceEqual(input.Dkim)
                ) && 
                (
                    this.DkimStatus == input.DkimStatus ||
                    (this.DkimStatus != null &&
                    this.DkimStatus.Equals(input.DkimStatus))
                ) && 
                (
                    this.Domain == input.Domain ||
                    (this.Domain != null &&
                    this.Domain.Equals(input.Domain))
                ) && 
                (
                    this.EspDomainUuid == input.EspDomainUuid ||
                    (this.EspDomainUuid != null &&
                    this.EspDomainUuid.Equals(input.EspDomainUuid))
                ) && 
                (
                    this.IdentityStatus == input.IdentityStatus ||
                    (this.IdentityStatus != null &&
                    this.IdentityStatus.Equals(input.IdentityStatus))
                ) && 
                (
                    this.Mailgun == input.Mailgun ||
                    (this.Mailgun != null &&
                    this.Mailgun.Equals(input.Mailgun))
                ) && 
                (
                    this.MerchantId == input.MerchantId ||
                    (this.MerchantId != null &&
                    this.MerchantId.Equals(input.MerchantId))
                ) && 
                (
                    this.Provider == input.Provider ||
                    (this.Provider != null &&
                    this.Provider.Equals(input.Provider))
                ) && 
                (
                    this.Spf == input.Spf ||
                    (this.Spf != null &&
                    this.Spf.Equals(input.Spf))
                ) && 
                (
                    this.StartDkimDts == input.StartDkimDts ||
                    (this.StartDkimDts != null &&
                    this.StartDkimDts.Equals(input.StartDkimDts))
                ) && 
                (
                    this.StartIdentityDts == input.StartIdentityDts ||
                    (this.StartIdentityDts != null &&
                    this.StartIdentityDts.Equals(input.StartIdentityDts))
                ) && 
                (
                    this.Verification == input.Verification ||
                    (this.Verification != null &&
                    this.Verification.Equals(input.Verification))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Comment != null)
                    hashCode = hashCode * 59 + this.Comment.GetHashCode();
                if (this.Dkim != null)
                    hashCode = hashCode * 59 + this.Dkim.GetHashCode();
                if (this.DkimStatus != null)
                    hashCode = hashCode * 59 + this.DkimStatus.GetHashCode();
                if (this.Domain != null)
                    hashCode = hashCode * 59 + this.Domain.GetHashCode();
                if (this.EspDomainUuid != null)
                    hashCode = hashCode * 59 + this.EspDomainUuid.GetHashCode();
                if (this.IdentityStatus != null)
                    hashCode = hashCode * 59 + this.IdentityStatus.GetHashCode();
                if (this.Mailgun != null)
                    hashCode = hashCode * 59 + this.Mailgun.GetHashCode();
                if (this.MerchantId != null)
                    hashCode = hashCode * 59 + this.MerchantId.GetHashCode();
                if (this.Provider != null)
                    hashCode = hashCode * 59 + this.Provider.GetHashCode();
                if (this.Spf != null)
                    hashCode = hashCode * 59 + this.Spf.GetHashCode();
                if (this.StartDkimDts != null)
                    hashCode = hashCode * 59 + this.StartDkimDts.GetHashCode();
                if (this.StartIdentityDts != null)
                    hashCode = hashCode * 59 + this.StartIdentityDts.GetHashCode();
                if (this.Verification != null)
                    hashCode = hashCode * 59 + this.Verification.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
