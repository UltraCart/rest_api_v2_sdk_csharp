/* 
 * UltraCart Rest API V2
 *
 * UltraCart REST API Version 2
 *
 * OpenAPI spec version: 2.0.0
 * Contact: support@ultracart.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = com.ultracart.admin.v2.Client.SwaggerDateConverter;

namespace com.ultracart.admin.v2.Model
{
    /// <summary>
    /// EmailFlow
    /// </summary>
    [DataContract]
    public partial class EmailFlow :  IEquatable<EmailFlow>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EmailFlow" /> class.
        /// </summary>
        /// <param name="AllowMultipleConcurrentEnrollments">True if a customer may be enrolled in this flow multiple times.</param>
        /// <param name="ClickRateFormatted">Click rate of emails, formatted.</param>
        /// <param name="CreatedDts">Created date.</param>
        /// <param name="Deleted">True if this campaign was deleted.</param>
        /// <param name="EmailCommunicationSequenceUuid">Email communication sequence UUID.</param>
        /// <param name="EmailFlowUuid">Email flow UUID.</param>
        /// <param name="EspDomainUser">Username of sending email.</param>
        /// <param name="EspDomainUuid">UUID of sending domain.</param>
        /// <param name="FilterProfileEquationJson">File profile equation json.</param>
        /// <param name="MerchantId">Merchant ID.</param>
        /// <param name="Name">Name of email flow.</param>
        /// <param name="OpenRateFormatted">Open rate of emails, formatted.</param>
        /// <param name="RevenueFormatted">Revenue, formatted.</param>
        /// <param name="Status">Status of the campaign of draft, archived, active, and inactive.</param>
        /// <param name="StatusDts">Timestamp when the last status change happened.</param>
        /// <param name="StorefrontOid">Storefront oid.</param>
        /// <param name="TriggerParameter">Trigger parameter.</param>
        /// <param name="TriggerParameterName">Trigger parameter name.</param>
        /// <param name="TriggerType">Trigger type.</param>
        public EmailFlow(bool? AllowMultipleConcurrentEnrollments = default(bool?), string ClickRateFormatted = default(string), string CreatedDts = default(string), bool? Deleted = default(bool?), string EmailCommunicationSequenceUuid = default(string), string EmailFlowUuid = default(string), string EspDomainUser = default(string), string EspDomainUuid = default(string), string FilterProfileEquationJson = default(string), string MerchantId = default(string), string Name = default(string), string OpenRateFormatted = default(string), string RevenueFormatted = default(string), string Status = default(string), string StatusDts = default(string), int? StorefrontOid = default(int?), string TriggerParameter = default(string), string TriggerParameterName = default(string), string TriggerType = default(string))
        {
            this.AllowMultipleConcurrentEnrollments = AllowMultipleConcurrentEnrollments;
            this.ClickRateFormatted = ClickRateFormatted;
            this.CreatedDts = CreatedDts;
            this.Deleted = Deleted;
            this.EmailCommunicationSequenceUuid = EmailCommunicationSequenceUuid;
            this.EmailFlowUuid = EmailFlowUuid;
            this.EspDomainUser = EspDomainUser;
            this.EspDomainUuid = EspDomainUuid;
            this.FilterProfileEquationJson = FilterProfileEquationJson;
            this.MerchantId = MerchantId;
            this.Name = Name;
            this.OpenRateFormatted = OpenRateFormatted;
            this.RevenueFormatted = RevenueFormatted;
            this.Status = Status;
            this.StatusDts = StatusDts;
            this.StorefrontOid = StorefrontOid;
            this.TriggerParameter = TriggerParameter;
            this.TriggerParameterName = TriggerParameterName;
            this.TriggerType = TriggerType;
        }
        
        /// <summary>
        /// True if a customer may be enrolled in this flow multiple times
        /// </summary>
        /// <value>True if a customer may be enrolled in this flow multiple times</value>
        [DataMember(Name="allow_multiple_concurrent_enrollments", EmitDefaultValue=false)]
        public bool? AllowMultipleConcurrentEnrollments { get; set; }

        /// <summary>
        /// Click rate of emails, formatted
        /// </summary>
        /// <value>Click rate of emails, formatted</value>
        [DataMember(Name="click_rate_formatted", EmitDefaultValue=false)]
        public string ClickRateFormatted { get; set; }

        /// <summary>
        /// Created date
        /// </summary>
        /// <value>Created date</value>
        [DataMember(Name="created_dts", EmitDefaultValue=false)]
        public string CreatedDts { get; set; }

        /// <summary>
        /// True if this campaign was deleted
        /// </summary>
        /// <value>True if this campaign was deleted</value>
        [DataMember(Name="deleted", EmitDefaultValue=false)]
        public bool? Deleted { get; set; }

        /// <summary>
        /// Email communication sequence UUID
        /// </summary>
        /// <value>Email communication sequence UUID</value>
        [DataMember(Name="email_communication_sequence_uuid", EmitDefaultValue=false)]
        public string EmailCommunicationSequenceUuid { get; set; }

        /// <summary>
        /// Email flow UUID
        /// </summary>
        /// <value>Email flow UUID</value>
        [DataMember(Name="email_flow_uuid", EmitDefaultValue=false)]
        public string EmailFlowUuid { get; set; }

        /// <summary>
        /// Username of sending email
        /// </summary>
        /// <value>Username of sending email</value>
        [DataMember(Name="esp_domain_user", EmitDefaultValue=false)]
        public string EspDomainUser { get; set; }

        /// <summary>
        /// UUID of sending domain
        /// </summary>
        /// <value>UUID of sending domain</value>
        [DataMember(Name="esp_domain_uuid", EmitDefaultValue=false)]
        public string EspDomainUuid { get; set; }

        /// <summary>
        /// File profile equation json
        /// </summary>
        /// <value>File profile equation json</value>
        [DataMember(Name="filter_profile_equation_json", EmitDefaultValue=false)]
        public string FilterProfileEquationJson { get; set; }

        /// <summary>
        /// Merchant ID
        /// </summary>
        /// <value>Merchant ID</value>
        [DataMember(Name="merchant_id", EmitDefaultValue=false)]
        public string MerchantId { get; set; }

        /// <summary>
        /// Name of email flow
        /// </summary>
        /// <value>Name of email flow</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Open rate of emails, formatted
        /// </summary>
        /// <value>Open rate of emails, formatted</value>
        [DataMember(Name="open_rate_formatted", EmitDefaultValue=false)]
        public string OpenRateFormatted { get; set; }

        /// <summary>
        /// Revenue, formatted
        /// </summary>
        /// <value>Revenue, formatted</value>
        [DataMember(Name="revenue_formatted", EmitDefaultValue=false)]
        public string RevenueFormatted { get; set; }

        /// <summary>
        /// Status of the campaign of draft, archived, active, and inactive
        /// </summary>
        /// <value>Status of the campaign of draft, archived, active, and inactive</value>
        [DataMember(Name="status", EmitDefaultValue=false)]
        public string Status { get; set; }

        /// <summary>
        /// Timestamp when the last status change happened
        /// </summary>
        /// <value>Timestamp when the last status change happened</value>
        [DataMember(Name="status_dts", EmitDefaultValue=false)]
        public string StatusDts { get; set; }

        /// <summary>
        /// Storefront oid
        /// </summary>
        /// <value>Storefront oid</value>
        [DataMember(Name="storefront_oid", EmitDefaultValue=false)]
        public int? StorefrontOid { get; set; }

        /// <summary>
        /// Trigger parameter
        /// </summary>
        /// <value>Trigger parameter</value>
        [DataMember(Name="trigger_parameter", EmitDefaultValue=false)]
        public string TriggerParameter { get; set; }

        /// <summary>
        /// Trigger parameter name
        /// </summary>
        /// <value>Trigger parameter name</value>
        [DataMember(Name="trigger_parameter_name", EmitDefaultValue=false)]
        public string TriggerParameterName { get; set; }

        /// <summary>
        /// Trigger type
        /// </summary>
        /// <value>Trigger type</value>
        [DataMember(Name="trigger_type", EmitDefaultValue=false)]
        public string TriggerType { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class EmailFlow {\n");
            sb.Append("  AllowMultipleConcurrentEnrollments: ").Append(AllowMultipleConcurrentEnrollments).Append("\n");
            sb.Append("  ClickRateFormatted: ").Append(ClickRateFormatted).Append("\n");
            sb.Append("  CreatedDts: ").Append(CreatedDts).Append("\n");
            sb.Append("  Deleted: ").Append(Deleted).Append("\n");
            sb.Append("  EmailCommunicationSequenceUuid: ").Append(EmailCommunicationSequenceUuid).Append("\n");
            sb.Append("  EmailFlowUuid: ").Append(EmailFlowUuid).Append("\n");
            sb.Append("  EspDomainUser: ").Append(EspDomainUser).Append("\n");
            sb.Append("  EspDomainUuid: ").Append(EspDomainUuid).Append("\n");
            sb.Append("  FilterProfileEquationJson: ").Append(FilterProfileEquationJson).Append("\n");
            sb.Append("  MerchantId: ").Append(MerchantId).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  OpenRateFormatted: ").Append(OpenRateFormatted).Append("\n");
            sb.Append("  RevenueFormatted: ").Append(RevenueFormatted).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  StatusDts: ").Append(StatusDts).Append("\n");
            sb.Append("  StorefrontOid: ").Append(StorefrontOid).Append("\n");
            sb.Append("  TriggerParameter: ").Append(TriggerParameter).Append("\n");
            sb.Append("  TriggerParameterName: ").Append(TriggerParameterName).Append("\n");
            sb.Append("  TriggerType: ").Append(TriggerType).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as EmailFlow);
        }

        /// <summary>
        /// Returns true if EmailFlow instances are equal
        /// </summary>
        /// <param name="input">Instance of EmailFlow to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(EmailFlow input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.AllowMultipleConcurrentEnrollments == input.AllowMultipleConcurrentEnrollments ||
                    (this.AllowMultipleConcurrentEnrollments != null &&
                    this.AllowMultipleConcurrentEnrollments.Equals(input.AllowMultipleConcurrentEnrollments))
                ) && 
                (
                    this.ClickRateFormatted == input.ClickRateFormatted ||
                    (this.ClickRateFormatted != null &&
                    this.ClickRateFormatted.Equals(input.ClickRateFormatted))
                ) && 
                (
                    this.CreatedDts == input.CreatedDts ||
                    (this.CreatedDts != null &&
                    this.CreatedDts.Equals(input.CreatedDts))
                ) && 
                (
                    this.Deleted == input.Deleted ||
                    (this.Deleted != null &&
                    this.Deleted.Equals(input.Deleted))
                ) && 
                (
                    this.EmailCommunicationSequenceUuid == input.EmailCommunicationSequenceUuid ||
                    (this.EmailCommunicationSequenceUuid != null &&
                    this.EmailCommunicationSequenceUuid.Equals(input.EmailCommunicationSequenceUuid))
                ) && 
                (
                    this.EmailFlowUuid == input.EmailFlowUuid ||
                    (this.EmailFlowUuid != null &&
                    this.EmailFlowUuid.Equals(input.EmailFlowUuid))
                ) && 
                (
                    this.EspDomainUser == input.EspDomainUser ||
                    (this.EspDomainUser != null &&
                    this.EspDomainUser.Equals(input.EspDomainUser))
                ) && 
                (
                    this.EspDomainUuid == input.EspDomainUuid ||
                    (this.EspDomainUuid != null &&
                    this.EspDomainUuid.Equals(input.EspDomainUuid))
                ) && 
                (
                    this.FilterProfileEquationJson == input.FilterProfileEquationJson ||
                    (this.FilterProfileEquationJson != null &&
                    this.FilterProfileEquationJson.Equals(input.FilterProfileEquationJson))
                ) && 
                (
                    this.MerchantId == input.MerchantId ||
                    (this.MerchantId != null &&
                    this.MerchantId.Equals(input.MerchantId))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.OpenRateFormatted == input.OpenRateFormatted ||
                    (this.OpenRateFormatted != null &&
                    this.OpenRateFormatted.Equals(input.OpenRateFormatted))
                ) && 
                (
                    this.RevenueFormatted == input.RevenueFormatted ||
                    (this.RevenueFormatted != null &&
                    this.RevenueFormatted.Equals(input.RevenueFormatted))
                ) && 
                (
                    this.Status == input.Status ||
                    (this.Status != null &&
                    this.Status.Equals(input.Status))
                ) && 
                (
                    this.StatusDts == input.StatusDts ||
                    (this.StatusDts != null &&
                    this.StatusDts.Equals(input.StatusDts))
                ) && 
                (
                    this.StorefrontOid == input.StorefrontOid ||
                    (this.StorefrontOid != null &&
                    this.StorefrontOid.Equals(input.StorefrontOid))
                ) && 
                (
                    this.TriggerParameter == input.TriggerParameter ||
                    (this.TriggerParameter != null &&
                    this.TriggerParameter.Equals(input.TriggerParameter))
                ) && 
                (
                    this.TriggerParameterName == input.TriggerParameterName ||
                    (this.TriggerParameterName != null &&
                    this.TriggerParameterName.Equals(input.TriggerParameterName))
                ) && 
                (
                    this.TriggerType == input.TriggerType ||
                    (this.TriggerType != null &&
                    this.TriggerType.Equals(input.TriggerType))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AllowMultipleConcurrentEnrollments != null)
                    hashCode = hashCode * 59 + this.AllowMultipleConcurrentEnrollments.GetHashCode();
                if (this.ClickRateFormatted != null)
                    hashCode = hashCode * 59 + this.ClickRateFormatted.GetHashCode();
                if (this.CreatedDts != null)
                    hashCode = hashCode * 59 + this.CreatedDts.GetHashCode();
                if (this.Deleted != null)
                    hashCode = hashCode * 59 + this.Deleted.GetHashCode();
                if (this.EmailCommunicationSequenceUuid != null)
                    hashCode = hashCode * 59 + this.EmailCommunicationSequenceUuid.GetHashCode();
                if (this.EmailFlowUuid != null)
                    hashCode = hashCode * 59 + this.EmailFlowUuid.GetHashCode();
                if (this.EspDomainUser != null)
                    hashCode = hashCode * 59 + this.EspDomainUser.GetHashCode();
                if (this.EspDomainUuid != null)
                    hashCode = hashCode * 59 + this.EspDomainUuid.GetHashCode();
                if (this.FilterProfileEquationJson != null)
                    hashCode = hashCode * 59 + this.FilterProfileEquationJson.GetHashCode();
                if (this.MerchantId != null)
                    hashCode = hashCode * 59 + this.MerchantId.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.OpenRateFormatted != null)
                    hashCode = hashCode * 59 + this.OpenRateFormatted.GetHashCode();
                if (this.RevenueFormatted != null)
                    hashCode = hashCode * 59 + this.RevenueFormatted.GetHashCode();
                if (this.Status != null)
                    hashCode = hashCode * 59 + this.Status.GetHashCode();
                if (this.StatusDts != null)
                    hashCode = hashCode * 59 + this.StatusDts.GetHashCode();
                if (this.StorefrontOid != null)
                    hashCode = hashCode * 59 + this.StorefrontOid.GetHashCode();
                if (this.TriggerParameter != null)
                    hashCode = hashCode * 59 + this.TriggerParameter.GetHashCode();
                if (this.TriggerParameterName != null)
                    hashCode = hashCode * 59 + this.TriggerParameterName.GetHashCode();
                if (this.TriggerType != null)
                    hashCode = hashCode * 59 + this.TriggerType.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Name (string) maxLength
            if(this.Name != null && this.Name.Length > 250)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Name, length must be less than 250.", new [] { "Name" });
            }

            yield break;
        }
    }

}
