/*
 * UltraCart Rest API V2
 *
 * UltraCart REST API Version 2
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@ultracart.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = com.ultracart.admin.v2.Client.OpenAPIDateConverter;

namespace com.ultracart.admin.v2.Model
{
    /// <summary>
    /// EmailList
    /// </summary>
    [DataContract]
    public partial class EmailList :  IEquatable<EmailList>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EmailList" /> class.
        /// </summary>
        /// <param name="allowCsvDownload">True if the current user has the rights to download this list..</param>
        /// <param name="createdDts">Created date.</param>
        /// <param name="deleted">True if this campaign was deleted.</param>
        /// <param name="emailListUuid">Email list UUID.</param>
        /// <param name="espListSegmentFolderUuid">List/Segment folder UUID.</param>
        /// <param name="memberCount">Count of members in this list.</param>
        /// <param name="merchantId">Merchant ID.</param>
        /// <param name="name">Name of email list.</param>
        /// <param name="publicDescription">Description of list shown to customer..</param>
        /// <param name="publicList">True if this list is public.</param>
        /// <param name="storefrontOid">Storefront oid.</param>
        /// <param name="usedBy">Details on the flows or campaigns that use this list..</param>
        public EmailList(bool allowCsvDownload = default(bool), string createdDts = default(string), bool deleted = default(bool), string emailListUuid = default(string), string espListSegmentFolderUuid = default(string), int memberCount = default(int), string merchantId = default(string), string name = default(string), string publicDescription = default(string), bool publicList = default(bool), int storefrontOid = default(int), List<EmailListSegmentUsedBy> usedBy = default(List<EmailListSegmentUsedBy>))
        {
            this.AllowCsvDownload = allowCsvDownload;
            this.CreatedDts = createdDts;
            this.Deleted = deleted;
            this.EmailListUuid = emailListUuid;
            this.EspListSegmentFolderUuid = espListSegmentFolderUuid;
            this.MemberCount = memberCount;
            this.MerchantId = merchantId;
            this.Name = name;
            this.PublicDescription = publicDescription;
            this.PublicList = publicList;
            this.StorefrontOid = storefrontOid;
            this.UsedBy = usedBy;
        }

        /// <summary>
        /// True if the current user has the rights to download this list.
        /// </summary>
        /// <value>True if the current user has the rights to download this list.</value>
        [DataMember(Name="allow_csv_download", EmitDefaultValue=false)]
        public bool AllowCsvDownload { get; set; }

        /// <summary>
        /// Created date
        /// </summary>
        /// <value>Created date</value>
        [DataMember(Name="created_dts", EmitDefaultValue=false)]
        public string CreatedDts { get; set; }

        /// <summary>
        /// True if this campaign was deleted
        /// </summary>
        /// <value>True if this campaign was deleted</value>
        [DataMember(Name="deleted", EmitDefaultValue=false)]
        public bool Deleted { get; set; }

        /// <summary>
        /// Email list UUID
        /// </summary>
        /// <value>Email list UUID</value>
        [DataMember(Name="email_list_uuid", EmitDefaultValue=false)]
        public string EmailListUuid { get; set; }

        /// <summary>
        /// List/Segment folder UUID
        /// </summary>
        /// <value>List/Segment folder UUID</value>
        [DataMember(Name="esp_list_segment_folder_uuid", EmitDefaultValue=false)]
        public string EspListSegmentFolderUuid { get; set; }

        /// <summary>
        /// Count of members in this list
        /// </summary>
        /// <value>Count of members in this list</value>
        [DataMember(Name="member_count", EmitDefaultValue=false)]
        public int MemberCount { get; set; }

        /// <summary>
        /// Merchant ID
        /// </summary>
        /// <value>Merchant ID</value>
        [DataMember(Name="merchant_id", EmitDefaultValue=false)]
        public string MerchantId { get; set; }

        /// <summary>
        /// Name of email list
        /// </summary>
        /// <value>Name of email list</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Description of list shown to customer.
        /// </summary>
        /// <value>Description of list shown to customer.</value>
        [DataMember(Name="public_description", EmitDefaultValue=false)]
        public string PublicDescription { get; set; }

        /// <summary>
        /// True if this list is public
        /// </summary>
        /// <value>True if this list is public</value>
        [DataMember(Name="public_list", EmitDefaultValue=false)]
        public bool PublicList { get; set; }

        /// <summary>
        /// Storefront oid
        /// </summary>
        /// <value>Storefront oid</value>
        [DataMember(Name="storefront_oid", EmitDefaultValue=false)]
        public int StorefrontOid { get; set; }

        /// <summary>
        /// Details on the flows or campaigns that use this list.
        /// </summary>
        /// <value>Details on the flows or campaigns that use this list.</value>
        [DataMember(Name="used_by", EmitDefaultValue=false)]
        public List<EmailListSegmentUsedBy> UsedBy { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class EmailList {\n");
            sb.Append("  AllowCsvDownload: ").Append(AllowCsvDownload).Append("\n");
            sb.Append("  CreatedDts: ").Append(CreatedDts).Append("\n");
            sb.Append("  Deleted: ").Append(Deleted).Append("\n");
            sb.Append("  EmailListUuid: ").Append(EmailListUuid).Append("\n");
            sb.Append("  EspListSegmentFolderUuid: ").Append(EspListSegmentFolderUuid).Append("\n");
            sb.Append("  MemberCount: ").Append(MemberCount).Append("\n");
            sb.Append("  MerchantId: ").Append(MerchantId).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  PublicDescription: ").Append(PublicDescription).Append("\n");
            sb.Append("  PublicList: ").Append(PublicList).Append("\n");
            sb.Append("  StorefrontOid: ").Append(StorefrontOid).Append("\n");
            sb.Append("  UsedBy: ").Append(UsedBy).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as EmailList);
        }

        /// <summary>
        /// Returns true if EmailList instances are equal
        /// </summary>
        /// <param name="input">Instance of EmailList to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(EmailList input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.AllowCsvDownload == input.AllowCsvDownload ||
                    (this.AllowCsvDownload != null &&
                    this.AllowCsvDownload.Equals(input.AllowCsvDownload))
                ) && 
                (
                    this.CreatedDts == input.CreatedDts ||
                    (this.CreatedDts != null &&
                    this.CreatedDts.Equals(input.CreatedDts))
                ) && 
                (
                    this.Deleted == input.Deleted ||
                    (this.Deleted != null &&
                    this.Deleted.Equals(input.Deleted))
                ) && 
                (
                    this.EmailListUuid == input.EmailListUuid ||
                    (this.EmailListUuid != null &&
                    this.EmailListUuid.Equals(input.EmailListUuid))
                ) && 
                (
                    this.EspListSegmentFolderUuid == input.EspListSegmentFolderUuid ||
                    (this.EspListSegmentFolderUuid != null &&
                    this.EspListSegmentFolderUuid.Equals(input.EspListSegmentFolderUuid))
                ) && 
                (
                    this.MemberCount == input.MemberCount ||
                    (this.MemberCount != null &&
                    this.MemberCount.Equals(input.MemberCount))
                ) && 
                (
                    this.MerchantId == input.MerchantId ||
                    (this.MerchantId != null &&
                    this.MerchantId.Equals(input.MerchantId))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.PublicDescription == input.PublicDescription ||
                    (this.PublicDescription != null &&
                    this.PublicDescription.Equals(input.PublicDescription))
                ) && 
                (
                    this.PublicList == input.PublicList ||
                    (this.PublicList != null &&
                    this.PublicList.Equals(input.PublicList))
                ) && 
                (
                    this.StorefrontOid == input.StorefrontOid ||
                    (this.StorefrontOid != null &&
                    this.StorefrontOid.Equals(input.StorefrontOid))
                ) && 
                (
                    this.UsedBy == input.UsedBy ||
                    this.UsedBy != null &&
                    input.UsedBy != null &&
                    this.UsedBy.SequenceEqual(input.UsedBy)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AllowCsvDownload != null)
                    hashCode = hashCode * 59 + this.AllowCsvDownload.GetHashCode();
                if (this.CreatedDts != null)
                    hashCode = hashCode * 59 + this.CreatedDts.GetHashCode();
                if (this.Deleted != null)
                    hashCode = hashCode * 59 + this.Deleted.GetHashCode();
                if (this.EmailListUuid != null)
                    hashCode = hashCode * 59 + this.EmailListUuid.GetHashCode();
                if (this.EspListSegmentFolderUuid != null)
                    hashCode = hashCode * 59 + this.EspListSegmentFolderUuid.GetHashCode();
                if (this.MemberCount != null)
                    hashCode = hashCode * 59 + this.MemberCount.GetHashCode();
                if (this.MerchantId != null)
                    hashCode = hashCode * 59 + this.MerchantId.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.PublicDescription != null)
                    hashCode = hashCode * 59 + this.PublicDescription.GetHashCode();
                if (this.PublicList != null)
                    hashCode = hashCode * 59 + this.PublicList.GetHashCode();
                if (this.StorefrontOid != null)
                    hashCode = hashCode * 59 + this.StorefrontOid.GetHashCode();
                if (this.UsedBy != null)
                    hashCode = hashCode * 59 + this.UsedBy.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Name (string) maxLength
            if(this.Name != null && this.Name.Length > 250)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Name, length must be less than 250.", new [] { "Name" });
            }


            yield break;
        }
    }

}
