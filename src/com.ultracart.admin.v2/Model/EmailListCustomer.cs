/* 
 * UltraCart Rest API V2
 *
 * UltraCart REST API Version 2
 *
 * OpenAPI spec version: 2.0.0
 * Contact: support@ultracart.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = com.ultracart.admin.v2.Client.SwaggerDateConverter;

namespace com.ultracart.admin.v2.Model
{
    /// <summary>
    /// EmailListCustomer
    /// </summary>
    [DataContract]
    public partial class EmailListCustomer :  IEquatable<EmailListCustomer>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EmailListCustomer" /> class.
        /// </summary>
        /// <param name="AddDts">Added timestamp.</param>
        /// <param name="Email">Email.</param>
        /// <param name="EmailCustomerUuid">Email customer UUID.</param>
        /// <param name="EmailListMemberUuid">Email list member UUID.</param>
        public EmailListCustomer(string AddDts = default(string), string Email = default(string), string EmailCustomerUuid = default(string), string EmailListMemberUuid = default(string))
        {
            this.AddDts = AddDts;
            this.Email = Email;
            this.EmailCustomerUuid = EmailCustomerUuid;
            this.EmailListMemberUuid = EmailListMemberUuid;
        }
        
        /// <summary>
        /// Added timestamp
        /// </summary>
        /// <value>Added timestamp</value>
        [DataMember(Name="add_dts", EmitDefaultValue=false)]
        public string AddDts { get; set; }

        /// <summary>
        /// Email
        /// </summary>
        /// <value>Email</value>
        [DataMember(Name="email", EmitDefaultValue=false)]
        public string Email { get; set; }

        /// <summary>
        /// Email customer UUID
        /// </summary>
        /// <value>Email customer UUID</value>
        [DataMember(Name="email_customer_uuid", EmitDefaultValue=false)]
        public string EmailCustomerUuid { get; set; }

        /// <summary>
        /// Email list member UUID
        /// </summary>
        /// <value>Email list member UUID</value>
        [DataMember(Name="email_list_member_uuid", EmitDefaultValue=false)]
        public string EmailListMemberUuid { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class EmailListCustomer {\n");
            sb.Append("  AddDts: ").Append(AddDts).Append("\n");
            sb.Append("  Email: ").Append(Email).Append("\n");
            sb.Append("  EmailCustomerUuid: ").Append(EmailCustomerUuid).Append("\n");
            sb.Append("  EmailListMemberUuid: ").Append(EmailListMemberUuid).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as EmailListCustomer);
        }

        /// <summary>
        /// Returns true if EmailListCustomer instances are equal
        /// </summary>
        /// <param name="input">Instance of EmailListCustomer to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(EmailListCustomer input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.AddDts == input.AddDts ||
                    (this.AddDts != null &&
                    this.AddDts.Equals(input.AddDts))
                ) && 
                (
                    this.Email == input.Email ||
                    (this.Email != null &&
                    this.Email.Equals(input.Email))
                ) && 
                (
                    this.EmailCustomerUuid == input.EmailCustomerUuid ||
                    (this.EmailCustomerUuid != null &&
                    this.EmailCustomerUuid.Equals(input.EmailCustomerUuid))
                ) && 
                (
                    this.EmailListMemberUuid == input.EmailListMemberUuid ||
                    (this.EmailListMemberUuid != null &&
                    this.EmailListMemberUuid.Equals(input.EmailListMemberUuid))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AddDts != null)
                    hashCode = hashCode * 59 + this.AddDts.GetHashCode();
                if (this.Email != null)
                    hashCode = hashCode * 59 + this.Email.GetHashCode();
                if (this.EmailCustomerUuid != null)
                    hashCode = hashCode * 59 + this.EmailCustomerUuid.GetHashCode();
                if (this.EmailListMemberUuid != null)
                    hashCode = hashCode * 59 + this.EmailListMemberUuid.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
