/*
 * UltraCart Rest API V2
 *
 * UltraCart REST API Version 2
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@ultracart.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = com.ultracart.admin.v2.Client.OpenAPIDateConverter;

namespace com.ultracart.admin.v2.Model
{
    /// <summary>
    /// EmailListSegmentMembership
    /// </summary>
    [DataContract]
    public partial class EmailListSegmentMembership :  IEquatable<EmailListSegmentMembership>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EmailListSegmentMembership" /> class.
        /// </summary>
        /// <param name="emailListUuid">UUID identifying this email list or null if this is a segment.</param>
        /// <param name="emailSegmentUuid">UUID identifying this email segment or null if this is a list.</param>
        /// <param name="exclude">true if customers from this list/segment is excluded from membership.</param>
        /// <param name="name">Name of this email list or segment.</param>
        public EmailListSegmentMembership(string emailListUuid = default(string), string emailSegmentUuid = default(string), bool exclude = default(bool), string name = default(string))
        {
            this.EmailListUuid = emailListUuid;
            this.EmailSegmentUuid = emailSegmentUuid;
            this.Exclude = exclude;
            this.Name = name;
        }

        /// <summary>
        /// UUID identifying this email list or null if this is a segment
        /// </summary>
        /// <value>UUID identifying this email list or null if this is a segment</value>
        [DataMember(Name="email_list_uuid", EmitDefaultValue=false)]
        public string EmailListUuid { get; set; }

        /// <summary>
        /// UUID identifying this email segment or null if this is a list
        /// </summary>
        /// <value>UUID identifying this email segment or null if this is a list</value>
        [DataMember(Name="email_segment_uuid", EmitDefaultValue=false)]
        public string EmailSegmentUuid { get; set; }

        /// <summary>
        /// true if customers from this list/segment is excluded from membership
        /// </summary>
        /// <value>true if customers from this list/segment is excluded from membership</value>
        [DataMember(Name="exclude", EmitDefaultValue=false)]
        public bool Exclude { get; set; }

        /// <summary>
        /// Name of this email list or segment
        /// </summary>
        /// <value>Name of this email list or segment</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class EmailListSegmentMembership {\n");
            sb.Append("  EmailListUuid: ").Append(EmailListUuid).Append("\n");
            sb.Append("  EmailSegmentUuid: ").Append(EmailSegmentUuid).Append("\n");
            sb.Append("  Exclude: ").Append(Exclude).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as EmailListSegmentMembership);
        }

        /// <summary>
        /// Returns true if EmailListSegmentMembership instances are equal
        /// </summary>
        /// <param name="input">Instance of EmailListSegmentMembership to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(EmailListSegmentMembership input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.EmailListUuid == input.EmailListUuid ||
                    (this.EmailListUuid != null &&
                    this.EmailListUuid.Equals(input.EmailListUuid))
                ) && 
                (
                    this.EmailSegmentUuid == input.EmailSegmentUuid ||
                    (this.EmailSegmentUuid != null &&
                    this.EmailSegmentUuid.Equals(input.EmailSegmentUuid))
                ) && 
                (
                    this.Exclude == input.Exclude ||
                    (this.Exclude != null &&
                    this.Exclude.Equals(input.Exclude))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.EmailListUuid != null)
                    hashCode = hashCode * 59 + this.EmailListUuid.GetHashCode();
                if (this.EmailSegmentUuid != null)
                    hashCode = hashCode * 59 + this.EmailSegmentUuid.GetHashCode();
                if (this.Exclude != null)
                    hashCode = hashCode * 59 + this.Exclude.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
