/* 
 * UltraCart Rest API V2
 *
 * UltraCart REST API Version 2
 *
 * OpenAPI spec version: 2.0.0
 * Contact: support@ultracart.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = com.ultracart.admin.v2.Client.SwaggerDateConverter;

namespace com.ultracart.admin.v2.Model
{
    /// <summary>
    /// EmailPerformance
    /// </summary>
    [DataContract]
    public partial class EmailPerformance :  IEquatable<EmailPerformance>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EmailPerformance" /> class.
        /// </summary>
        /// <param name="activeCustomers">Active customers.  The value will be -1 if calculation is pending..</param>
        /// <param name="actualCustomers">Actual customers that they have regardless of active state.  The value will be -1 if calculation is pending..</param>
        /// <param name="bounceCount">Bounce count.</param>
        /// <param name="bouncePercentage">bounce percentage rate based upon our look back window.  This should be under five percent or the account will be paused for sending..</param>
        /// <param name="bouncePercentageFormatted">bounce percentage rate (formatted) based upon our look back window.  This should be under five percent or the account will be paused for sending..</param>
        /// <param name="customerHistogram">customerHistogram.</param>
        /// <param name="dailyStats">Daily statistics used for charting.</param>
        /// <param name="deliveredCount">Delivered count.</param>
        /// <param name="maxActiveCustomers">Maximum active customers allowed under their billing plan.</param>
        /// <param name="maxEmailsPerDay">Max emails per day.</param>
        /// <param name="maxEmailsPerHour">Max emails per hour.</param>
        /// <param name="maxEmailsPerMonth">Max emails per month.</param>
        /// <param name="pausedForSpam">True if campaign/flow emails are paused due to spam complaints..</param>
        /// <param name="revenue">Revenue.</param>
        /// <param name="sentEmailsPerDay">Sent emails last 24 hours.</param>
        /// <param name="sentEmailsPerHour">Sent emails last hour.</param>
        /// <param name="sentEmailsPerMonth">Sent emails last 31 days.</param>
        /// <param name="sequenceSendCount">Total sequence (campaign/flow) emails sent.</param>
        /// <param name="spamCount">Spam complaints.</param>
        /// <param name="spamPercentage">Spam percentage rate based upon our look back window.  This should be under one half a percent or the account will be paused for sending..</param>
        /// <param name="spamPercentageFormatted">Spam percentage rate (formatted) based upon our look back window.  This should be under one half a percent or the account will be paused for sending..</param>
        /// <param name="transactionalSendCount">Total transactions emails sent.</param>
        public EmailPerformance(int? activeCustomers = default(int?), int? actualCustomers = default(int?), int? bounceCount = default(int?), decimal? bouncePercentage = default(decimal?), string bouncePercentageFormatted = default(string), EmailPerformanceCustomerHistogram customerHistogram = default(EmailPerformanceCustomerHistogram), List<EmailPerformanceDaily> dailyStats = default(List<EmailPerformanceDaily>), int? deliveredCount = default(int?), int? maxActiveCustomers = default(int?), int? maxEmailsPerDay = default(int?), int? maxEmailsPerHour = default(int?), int? maxEmailsPerMonth = default(int?), bool? pausedForSpam = default(bool?), decimal? revenue = default(decimal?), int? sentEmailsPerDay = default(int?), int? sentEmailsPerHour = default(int?), int? sentEmailsPerMonth = default(int?), int? sequenceSendCount = default(int?), int? spamCount = default(int?), decimal? spamPercentage = default(decimal?), string spamPercentageFormatted = default(string), int? transactionalSendCount = default(int?))
        {
            this.ActiveCustomers = activeCustomers;
            this.ActualCustomers = actualCustomers;
            this.BounceCount = bounceCount;
            this.BouncePercentage = bouncePercentage;
            this.BouncePercentageFormatted = bouncePercentageFormatted;
            this.CustomerHistogram = customerHistogram;
            this.DailyStats = dailyStats;
            this.DeliveredCount = deliveredCount;
            this.MaxActiveCustomers = maxActiveCustomers;
            this.MaxEmailsPerDay = maxEmailsPerDay;
            this.MaxEmailsPerHour = maxEmailsPerHour;
            this.MaxEmailsPerMonth = maxEmailsPerMonth;
            this.PausedForSpam = pausedForSpam;
            this.Revenue = revenue;
            this.SentEmailsPerDay = sentEmailsPerDay;
            this.SentEmailsPerHour = sentEmailsPerHour;
            this.SentEmailsPerMonth = sentEmailsPerMonth;
            this.SequenceSendCount = sequenceSendCount;
            this.SpamCount = spamCount;
            this.SpamPercentage = spamPercentage;
            this.SpamPercentageFormatted = spamPercentageFormatted;
            this.TransactionalSendCount = transactionalSendCount;
        }
        
        /// <summary>
        /// Active customers.  The value will be -1 if calculation is pending.
        /// </summary>
        /// <value>Active customers.  The value will be -1 if calculation is pending.</value>
        [DataMember(Name="active_customers", EmitDefaultValue=false)]
        public int? ActiveCustomers { get; set; }

        /// <summary>
        /// Actual customers that they have regardless of active state.  The value will be -1 if calculation is pending.
        /// </summary>
        /// <value>Actual customers that they have regardless of active state.  The value will be -1 if calculation is pending.</value>
        [DataMember(Name="actual_customers", EmitDefaultValue=false)]
        public int? ActualCustomers { get; set; }

        /// <summary>
        /// Bounce count
        /// </summary>
        /// <value>Bounce count</value>
        [DataMember(Name="bounce_count", EmitDefaultValue=false)]
        public int? BounceCount { get; set; }

        /// <summary>
        /// bounce percentage rate based upon our look back window.  This should be under five percent or the account will be paused for sending.
        /// </summary>
        /// <value>bounce percentage rate based upon our look back window.  This should be under five percent or the account will be paused for sending.</value>
        [DataMember(Name="bounce_percentage", EmitDefaultValue=false)]
        public decimal? BouncePercentage { get; set; }

        /// <summary>
        /// bounce percentage rate (formatted) based upon our look back window.  This should be under five percent or the account will be paused for sending.
        /// </summary>
        /// <value>bounce percentage rate (formatted) based upon our look back window.  This should be under five percent or the account will be paused for sending.</value>
        [DataMember(Name="bounce_percentage_formatted", EmitDefaultValue=false)]
        public string BouncePercentageFormatted { get; set; }

        /// <summary>
        /// Gets or Sets CustomerHistogram
        /// </summary>
        [DataMember(Name="customer_histogram", EmitDefaultValue=false)]
        public EmailPerformanceCustomerHistogram CustomerHistogram { get; set; }

        /// <summary>
        /// Daily statistics used for charting
        /// </summary>
        /// <value>Daily statistics used for charting</value>
        [DataMember(Name="daily_stats", EmitDefaultValue=false)]
        public List<EmailPerformanceDaily> DailyStats { get; set; }

        /// <summary>
        /// Delivered count
        /// </summary>
        /// <value>Delivered count</value>
        [DataMember(Name="delivered_count", EmitDefaultValue=false)]
        public int? DeliveredCount { get; set; }

        /// <summary>
        /// Maximum active customers allowed under their billing plan
        /// </summary>
        /// <value>Maximum active customers allowed under their billing plan</value>
        [DataMember(Name="max_active_customers", EmitDefaultValue=false)]
        public int? MaxActiveCustomers { get; set; }

        /// <summary>
        /// Max emails per day
        /// </summary>
        /// <value>Max emails per day</value>
        [DataMember(Name="max_emails_per_day", EmitDefaultValue=false)]
        public int? MaxEmailsPerDay { get; set; }

        /// <summary>
        /// Max emails per hour
        /// </summary>
        /// <value>Max emails per hour</value>
        [DataMember(Name="max_emails_per_hour", EmitDefaultValue=false)]
        public int? MaxEmailsPerHour { get; set; }

        /// <summary>
        /// Max emails per month
        /// </summary>
        /// <value>Max emails per month</value>
        [DataMember(Name="max_emails_per_month", EmitDefaultValue=false)]
        public int? MaxEmailsPerMonth { get; set; }

        /// <summary>
        /// True if campaign/flow emails are paused due to spam complaints.
        /// </summary>
        /// <value>True if campaign/flow emails are paused due to spam complaints.</value>
        [DataMember(Name="paused_for_spam", EmitDefaultValue=false)]
        public bool? PausedForSpam { get; set; }

        /// <summary>
        /// Revenue
        /// </summary>
        /// <value>Revenue</value>
        [DataMember(Name="revenue", EmitDefaultValue=false)]
        public decimal? Revenue { get; set; }

        /// <summary>
        /// Sent emails last 24 hours
        /// </summary>
        /// <value>Sent emails last 24 hours</value>
        [DataMember(Name="sent_emails_per_day", EmitDefaultValue=false)]
        public int? SentEmailsPerDay { get; set; }

        /// <summary>
        /// Sent emails last hour
        /// </summary>
        /// <value>Sent emails last hour</value>
        [DataMember(Name="sent_emails_per_hour", EmitDefaultValue=false)]
        public int? SentEmailsPerHour { get; set; }

        /// <summary>
        /// Sent emails last 31 days
        /// </summary>
        /// <value>Sent emails last 31 days</value>
        [DataMember(Name="sent_emails_per_month", EmitDefaultValue=false)]
        public int? SentEmailsPerMonth { get; set; }

        /// <summary>
        /// Total sequence (campaign/flow) emails sent
        /// </summary>
        /// <value>Total sequence (campaign/flow) emails sent</value>
        [DataMember(Name="sequence_send_count", EmitDefaultValue=false)]
        public int? SequenceSendCount { get; set; }

        /// <summary>
        /// Spam complaints
        /// </summary>
        /// <value>Spam complaints</value>
        [DataMember(Name="spam_count", EmitDefaultValue=false)]
        public int? SpamCount { get; set; }

        /// <summary>
        /// Spam percentage rate based upon our look back window.  This should be under one half a percent or the account will be paused for sending.
        /// </summary>
        /// <value>Spam percentage rate based upon our look back window.  This should be under one half a percent or the account will be paused for sending.</value>
        [DataMember(Name="spam_percentage", EmitDefaultValue=false)]
        public decimal? SpamPercentage { get; set; }

        /// <summary>
        /// Spam percentage rate (formatted) based upon our look back window.  This should be under one half a percent or the account will be paused for sending.
        /// </summary>
        /// <value>Spam percentage rate (formatted) based upon our look back window.  This should be under one half a percent or the account will be paused for sending.</value>
        [DataMember(Name="spam_percentage_formatted", EmitDefaultValue=false)]
        public string SpamPercentageFormatted { get; set; }

        /// <summary>
        /// Total transactions emails sent
        /// </summary>
        /// <value>Total transactions emails sent</value>
        [DataMember(Name="transactional_send_count", EmitDefaultValue=false)]
        public int? TransactionalSendCount { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class EmailPerformance {\n");
            sb.Append("  ActiveCustomers: ").Append(ActiveCustomers).Append("\n");
            sb.Append("  ActualCustomers: ").Append(ActualCustomers).Append("\n");
            sb.Append("  BounceCount: ").Append(BounceCount).Append("\n");
            sb.Append("  BouncePercentage: ").Append(BouncePercentage).Append("\n");
            sb.Append("  BouncePercentageFormatted: ").Append(BouncePercentageFormatted).Append("\n");
            sb.Append("  CustomerHistogram: ").Append(CustomerHistogram).Append("\n");
            sb.Append("  DailyStats: ").Append(DailyStats).Append("\n");
            sb.Append("  DeliveredCount: ").Append(DeliveredCount).Append("\n");
            sb.Append("  MaxActiveCustomers: ").Append(MaxActiveCustomers).Append("\n");
            sb.Append("  MaxEmailsPerDay: ").Append(MaxEmailsPerDay).Append("\n");
            sb.Append("  MaxEmailsPerHour: ").Append(MaxEmailsPerHour).Append("\n");
            sb.Append("  MaxEmailsPerMonth: ").Append(MaxEmailsPerMonth).Append("\n");
            sb.Append("  PausedForSpam: ").Append(PausedForSpam).Append("\n");
            sb.Append("  Revenue: ").Append(Revenue).Append("\n");
            sb.Append("  SentEmailsPerDay: ").Append(SentEmailsPerDay).Append("\n");
            sb.Append("  SentEmailsPerHour: ").Append(SentEmailsPerHour).Append("\n");
            sb.Append("  SentEmailsPerMonth: ").Append(SentEmailsPerMonth).Append("\n");
            sb.Append("  SequenceSendCount: ").Append(SequenceSendCount).Append("\n");
            sb.Append("  SpamCount: ").Append(SpamCount).Append("\n");
            sb.Append("  SpamPercentage: ").Append(SpamPercentage).Append("\n");
            sb.Append("  SpamPercentageFormatted: ").Append(SpamPercentageFormatted).Append("\n");
            sb.Append("  TransactionalSendCount: ").Append(TransactionalSendCount).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as EmailPerformance);
        }

        /// <summary>
        /// Returns true if EmailPerformance instances are equal
        /// </summary>
        /// <param name="input">Instance of EmailPerformance to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(EmailPerformance input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ActiveCustomers == input.ActiveCustomers ||
                    (this.ActiveCustomers != null &&
                    this.ActiveCustomers.Equals(input.ActiveCustomers))
                ) && 
                (
                    this.ActualCustomers == input.ActualCustomers ||
                    (this.ActualCustomers != null &&
                    this.ActualCustomers.Equals(input.ActualCustomers))
                ) && 
                (
                    this.BounceCount == input.BounceCount ||
                    (this.BounceCount != null &&
                    this.BounceCount.Equals(input.BounceCount))
                ) && 
                (
                    this.BouncePercentage == input.BouncePercentage ||
                    (this.BouncePercentage != null &&
                    this.BouncePercentage.Equals(input.BouncePercentage))
                ) && 
                (
                    this.BouncePercentageFormatted == input.BouncePercentageFormatted ||
                    (this.BouncePercentageFormatted != null &&
                    this.BouncePercentageFormatted.Equals(input.BouncePercentageFormatted))
                ) && 
                (
                    this.CustomerHistogram == input.CustomerHistogram ||
                    (this.CustomerHistogram != null &&
                    this.CustomerHistogram.Equals(input.CustomerHistogram))
                ) && 
                (
                    this.DailyStats == input.DailyStats ||
                    this.DailyStats != null &&
                    this.DailyStats.SequenceEqual(input.DailyStats)
                ) && 
                (
                    this.DeliveredCount == input.DeliveredCount ||
                    (this.DeliveredCount != null &&
                    this.DeliveredCount.Equals(input.DeliveredCount))
                ) && 
                (
                    this.MaxActiveCustomers == input.MaxActiveCustomers ||
                    (this.MaxActiveCustomers != null &&
                    this.MaxActiveCustomers.Equals(input.MaxActiveCustomers))
                ) && 
                (
                    this.MaxEmailsPerDay == input.MaxEmailsPerDay ||
                    (this.MaxEmailsPerDay != null &&
                    this.MaxEmailsPerDay.Equals(input.MaxEmailsPerDay))
                ) && 
                (
                    this.MaxEmailsPerHour == input.MaxEmailsPerHour ||
                    (this.MaxEmailsPerHour != null &&
                    this.MaxEmailsPerHour.Equals(input.MaxEmailsPerHour))
                ) && 
                (
                    this.MaxEmailsPerMonth == input.MaxEmailsPerMonth ||
                    (this.MaxEmailsPerMonth != null &&
                    this.MaxEmailsPerMonth.Equals(input.MaxEmailsPerMonth))
                ) && 
                (
                    this.PausedForSpam == input.PausedForSpam ||
                    (this.PausedForSpam != null &&
                    this.PausedForSpam.Equals(input.PausedForSpam))
                ) && 
                (
                    this.Revenue == input.Revenue ||
                    (this.Revenue != null &&
                    this.Revenue.Equals(input.Revenue))
                ) && 
                (
                    this.SentEmailsPerDay == input.SentEmailsPerDay ||
                    (this.SentEmailsPerDay != null &&
                    this.SentEmailsPerDay.Equals(input.SentEmailsPerDay))
                ) && 
                (
                    this.SentEmailsPerHour == input.SentEmailsPerHour ||
                    (this.SentEmailsPerHour != null &&
                    this.SentEmailsPerHour.Equals(input.SentEmailsPerHour))
                ) && 
                (
                    this.SentEmailsPerMonth == input.SentEmailsPerMonth ||
                    (this.SentEmailsPerMonth != null &&
                    this.SentEmailsPerMonth.Equals(input.SentEmailsPerMonth))
                ) && 
                (
                    this.SequenceSendCount == input.SequenceSendCount ||
                    (this.SequenceSendCount != null &&
                    this.SequenceSendCount.Equals(input.SequenceSendCount))
                ) && 
                (
                    this.SpamCount == input.SpamCount ||
                    (this.SpamCount != null &&
                    this.SpamCount.Equals(input.SpamCount))
                ) && 
                (
                    this.SpamPercentage == input.SpamPercentage ||
                    (this.SpamPercentage != null &&
                    this.SpamPercentage.Equals(input.SpamPercentage))
                ) && 
                (
                    this.SpamPercentageFormatted == input.SpamPercentageFormatted ||
                    (this.SpamPercentageFormatted != null &&
                    this.SpamPercentageFormatted.Equals(input.SpamPercentageFormatted))
                ) && 
                (
                    this.TransactionalSendCount == input.TransactionalSendCount ||
                    (this.TransactionalSendCount != null &&
                    this.TransactionalSendCount.Equals(input.TransactionalSendCount))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ActiveCustomers != null)
                    hashCode = hashCode * 59 + this.ActiveCustomers.GetHashCode();
                if (this.ActualCustomers != null)
                    hashCode = hashCode * 59 + this.ActualCustomers.GetHashCode();
                if (this.BounceCount != null)
                    hashCode = hashCode * 59 + this.BounceCount.GetHashCode();
                if (this.BouncePercentage != null)
                    hashCode = hashCode * 59 + this.BouncePercentage.GetHashCode();
                if (this.BouncePercentageFormatted != null)
                    hashCode = hashCode * 59 + this.BouncePercentageFormatted.GetHashCode();
                if (this.CustomerHistogram != null)
                    hashCode = hashCode * 59 + this.CustomerHistogram.GetHashCode();
                if (this.DailyStats != null)
                    hashCode = hashCode * 59 + this.DailyStats.GetHashCode();
                if (this.DeliveredCount != null)
                    hashCode = hashCode * 59 + this.DeliveredCount.GetHashCode();
                if (this.MaxActiveCustomers != null)
                    hashCode = hashCode * 59 + this.MaxActiveCustomers.GetHashCode();
                if (this.MaxEmailsPerDay != null)
                    hashCode = hashCode * 59 + this.MaxEmailsPerDay.GetHashCode();
                if (this.MaxEmailsPerHour != null)
                    hashCode = hashCode * 59 + this.MaxEmailsPerHour.GetHashCode();
                if (this.MaxEmailsPerMonth != null)
                    hashCode = hashCode * 59 + this.MaxEmailsPerMonth.GetHashCode();
                if (this.PausedForSpam != null)
                    hashCode = hashCode * 59 + this.PausedForSpam.GetHashCode();
                if (this.Revenue != null)
                    hashCode = hashCode * 59 + this.Revenue.GetHashCode();
                if (this.SentEmailsPerDay != null)
                    hashCode = hashCode * 59 + this.SentEmailsPerDay.GetHashCode();
                if (this.SentEmailsPerHour != null)
                    hashCode = hashCode * 59 + this.SentEmailsPerHour.GetHashCode();
                if (this.SentEmailsPerMonth != null)
                    hashCode = hashCode * 59 + this.SentEmailsPerMonth.GetHashCode();
                if (this.SequenceSendCount != null)
                    hashCode = hashCode * 59 + this.SequenceSendCount.GetHashCode();
                if (this.SpamCount != null)
                    hashCode = hashCode * 59 + this.SpamCount.GetHashCode();
                if (this.SpamPercentage != null)
                    hashCode = hashCode * 59 + this.SpamPercentage.GetHashCode();
                if (this.SpamPercentageFormatted != null)
                    hashCode = hashCode * 59 + this.SpamPercentageFormatted.GetHashCode();
                if (this.TransactionalSendCount != null)
                    hashCode = hashCode * 59 + this.TransactionalSendCount.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
