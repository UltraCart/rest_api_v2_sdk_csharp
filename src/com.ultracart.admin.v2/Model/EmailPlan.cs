/* 
 * UltraCart Rest API V2
 *
 * UltraCart REST API Version 2
 *
 * OpenAPI spec version: 2.0.0
 * Contact: support@ultracart.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = com.ultracart.admin.v2.Client.SwaggerDateConverter;

namespace com.ultracart.admin.v2.Model
{
    /// <summary>
    /// EmailPlan
    /// </summary>
    [DataContract]
    public partial class EmailPlan :  IEquatable<EmailPlan>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EmailPlan" /> class.
        /// </summary>
        /// <param name="additionalCustomers">additionalCustomers.</param>
        /// <param name="additionalEmails">additionalEmails.</param>
        /// <param name="additionalFee">additionalFee.</param>
        /// <param name="allowListImport">allowListImport.</param>
        /// <param name="allowTrackingEmails">allowTrackingEmails.</param>
        /// <param name="customerTiers">customerTiers.</param>
        /// <param name="initialSendingLimits">initialSendingLimits.</param>
        /// <param name="planCustomers">planCustomers.</param>
        /// <param name="planEmails">planEmails.</param>
        /// <param name="planName">planName.</param>
        /// <param name="planNameFormatted">planNameFormatted.</param>
        /// <param name="requireOrderWithinLastDays">requireOrderWithinLastDays.</param>
        /// <param name="revenuePercent">revenuePercent.</param>
        /// <param name="spamPercentLimit">spamPercentLimit.</param>
        /// <param name="totalCustomers">totalCustomers.</param>
        /// <param name="totalEmails">totalEmails.</param>
        /// <param name="upgradeTo">upgradeTo.</param>
        public EmailPlan(int? additionalCustomers = default(int?), int? additionalEmails = default(int?), decimal? additionalFee = default(decimal?), bool? allowListImport = default(bool?), bool? allowTrackingEmails = default(bool?), List<EmailPlanAdditional> customerTiers = default(List<EmailPlanAdditional>), int? initialSendingLimits = default(int?), int? planCustomers = default(int?), int? planEmails = default(int?), string planName = default(string), string planNameFormatted = default(string), int? requireOrderWithinLastDays = default(int?), int? revenuePercent = default(int?), int? spamPercentLimit = default(int?), int? totalCustomers = default(int?), int? totalEmails = default(int?), int? upgradeTo = default(int?))
        {
            this.AdditionalCustomers = additionalCustomers;
            this.AdditionalEmails = additionalEmails;
            this.AdditionalFee = additionalFee;
            this.AllowListImport = allowListImport;
            this.AllowTrackingEmails = allowTrackingEmails;
            this.CustomerTiers = customerTiers;
            this.InitialSendingLimits = initialSendingLimits;
            this.PlanCustomers = planCustomers;
            this.PlanEmails = planEmails;
            this.PlanName = planName;
            this.PlanNameFormatted = planNameFormatted;
            this.RequireOrderWithinLastDays = requireOrderWithinLastDays;
            this.RevenuePercent = revenuePercent;
            this.SpamPercentLimit = spamPercentLimit;
            this.TotalCustomers = totalCustomers;
            this.TotalEmails = totalEmails;
            this.UpgradeTo = upgradeTo;
        }
        
        /// <summary>
        /// Gets or Sets AdditionalCustomers
        /// </summary>
        [DataMember(Name="additional_customers", EmitDefaultValue=false)]
        public int? AdditionalCustomers { get; set; }

        /// <summary>
        /// Gets or Sets AdditionalEmails
        /// </summary>
        [DataMember(Name="additional_emails", EmitDefaultValue=false)]
        public int? AdditionalEmails { get; set; }

        /// <summary>
        /// Gets or Sets AdditionalFee
        /// </summary>
        [DataMember(Name="additional_fee", EmitDefaultValue=false)]
        public decimal? AdditionalFee { get; set; }

        /// <summary>
        /// Gets or Sets AllowListImport
        /// </summary>
        [DataMember(Name="allow_list_import", EmitDefaultValue=false)]
        public bool? AllowListImport { get; set; }

        /// <summary>
        /// Gets or Sets AllowTrackingEmails
        /// </summary>
        [DataMember(Name="allow_tracking_emails", EmitDefaultValue=false)]
        public bool? AllowTrackingEmails { get; set; }

        /// <summary>
        /// Gets or Sets CustomerTiers
        /// </summary>
        [DataMember(Name="customer_tiers", EmitDefaultValue=false)]
        public List<EmailPlanAdditional> CustomerTiers { get; set; }

        /// <summary>
        /// Gets or Sets InitialSendingLimits
        /// </summary>
        [DataMember(Name="initial_sending_limits", EmitDefaultValue=false)]
        public int? InitialSendingLimits { get; set; }

        /// <summary>
        /// Gets or Sets PlanCustomers
        /// </summary>
        [DataMember(Name="plan_customers", EmitDefaultValue=false)]
        public int? PlanCustomers { get; set; }

        /// <summary>
        /// Gets or Sets PlanEmails
        /// </summary>
        [DataMember(Name="plan_emails", EmitDefaultValue=false)]
        public int? PlanEmails { get; set; }

        /// <summary>
        /// Gets or Sets PlanName
        /// </summary>
        [DataMember(Name="plan_name", EmitDefaultValue=false)]
        public string PlanName { get; set; }

        /// <summary>
        /// Gets or Sets PlanNameFormatted
        /// </summary>
        [DataMember(Name="plan_name_formatted", EmitDefaultValue=false)]
        public string PlanNameFormatted { get; set; }

        /// <summary>
        /// Gets or Sets RequireOrderWithinLastDays
        /// </summary>
        [DataMember(Name="require_order_within_last_days", EmitDefaultValue=false)]
        public int? RequireOrderWithinLastDays { get; set; }

        /// <summary>
        /// Gets or Sets RevenuePercent
        /// </summary>
        [DataMember(Name="revenue_percent", EmitDefaultValue=false)]
        public int? RevenuePercent { get; set; }

        /// <summary>
        /// Gets or Sets SpamPercentLimit
        /// </summary>
        [DataMember(Name="spam_percent_limit", EmitDefaultValue=false)]
        public int? SpamPercentLimit { get; set; }

        /// <summary>
        /// Gets or Sets TotalCustomers
        /// </summary>
        [DataMember(Name="total_customers", EmitDefaultValue=false)]
        public int? TotalCustomers { get; set; }

        /// <summary>
        /// Gets or Sets TotalEmails
        /// </summary>
        [DataMember(Name="total_emails", EmitDefaultValue=false)]
        public int? TotalEmails { get; set; }

        /// <summary>
        /// Gets or Sets UpgradeTo
        /// </summary>
        [DataMember(Name="upgrade_to", EmitDefaultValue=false)]
        public int? UpgradeTo { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class EmailPlan {\n");
            sb.Append("  AdditionalCustomers: ").Append(AdditionalCustomers).Append("\n");
            sb.Append("  AdditionalEmails: ").Append(AdditionalEmails).Append("\n");
            sb.Append("  AdditionalFee: ").Append(AdditionalFee).Append("\n");
            sb.Append("  AllowListImport: ").Append(AllowListImport).Append("\n");
            sb.Append("  AllowTrackingEmails: ").Append(AllowTrackingEmails).Append("\n");
            sb.Append("  CustomerTiers: ").Append(CustomerTiers).Append("\n");
            sb.Append("  InitialSendingLimits: ").Append(InitialSendingLimits).Append("\n");
            sb.Append("  PlanCustomers: ").Append(PlanCustomers).Append("\n");
            sb.Append("  PlanEmails: ").Append(PlanEmails).Append("\n");
            sb.Append("  PlanName: ").Append(PlanName).Append("\n");
            sb.Append("  PlanNameFormatted: ").Append(PlanNameFormatted).Append("\n");
            sb.Append("  RequireOrderWithinLastDays: ").Append(RequireOrderWithinLastDays).Append("\n");
            sb.Append("  RevenuePercent: ").Append(RevenuePercent).Append("\n");
            sb.Append("  SpamPercentLimit: ").Append(SpamPercentLimit).Append("\n");
            sb.Append("  TotalCustomers: ").Append(TotalCustomers).Append("\n");
            sb.Append("  TotalEmails: ").Append(TotalEmails).Append("\n");
            sb.Append("  UpgradeTo: ").Append(UpgradeTo).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as EmailPlan);
        }

        /// <summary>
        /// Returns true if EmailPlan instances are equal
        /// </summary>
        /// <param name="input">Instance of EmailPlan to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(EmailPlan input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.AdditionalCustomers == input.AdditionalCustomers ||
                    (this.AdditionalCustomers != null &&
                    this.AdditionalCustomers.Equals(input.AdditionalCustomers))
                ) && 
                (
                    this.AdditionalEmails == input.AdditionalEmails ||
                    (this.AdditionalEmails != null &&
                    this.AdditionalEmails.Equals(input.AdditionalEmails))
                ) && 
                (
                    this.AdditionalFee == input.AdditionalFee ||
                    (this.AdditionalFee != null &&
                    this.AdditionalFee.Equals(input.AdditionalFee))
                ) && 
                (
                    this.AllowListImport == input.AllowListImport ||
                    (this.AllowListImport != null &&
                    this.AllowListImport.Equals(input.AllowListImport))
                ) && 
                (
                    this.AllowTrackingEmails == input.AllowTrackingEmails ||
                    (this.AllowTrackingEmails != null &&
                    this.AllowTrackingEmails.Equals(input.AllowTrackingEmails))
                ) && 
                (
                    this.CustomerTiers == input.CustomerTiers ||
                    this.CustomerTiers != null &&
                    this.CustomerTiers.SequenceEqual(input.CustomerTiers)
                ) && 
                (
                    this.InitialSendingLimits == input.InitialSendingLimits ||
                    (this.InitialSendingLimits != null &&
                    this.InitialSendingLimits.Equals(input.InitialSendingLimits))
                ) && 
                (
                    this.PlanCustomers == input.PlanCustomers ||
                    (this.PlanCustomers != null &&
                    this.PlanCustomers.Equals(input.PlanCustomers))
                ) && 
                (
                    this.PlanEmails == input.PlanEmails ||
                    (this.PlanEmails != null &&
                    this.PlanEmails.Equals(input.PlanEmails))
                ) && 
                (
                    this.PlanName == input.PlanName ||
                    (this.PlanName != null &&
                    this.PlanName.Equals(input.PlanName))
                ) && 
                (
                    this.PlanNameFormatted == input.PlanNameFormatted ||
                    (this.PlanNameFormatted != null &&
                    this.PlanNameFormatted.Equals(input.PlanNameFormatted))
                ) && 
                (
                    this.RequireOrderWithinLastDays == input.RequireOrderWithinLastDays ||
                    (this.RequireOrderWithinLastDays != null &&
                    this.RequireOrderWithinLastDays.Equals(input.RequireOrderWithinLastDays))
                ) && 
                (
                    this.RevenuePercent == input.RevenuePercent ||
                    (this.RevenuePercent != null &&
                    this.RevenuePercent.Equals(input.RevenuePercent))
                ) && 
                (
                    this.SpamPercentLimit == input.SpamPercentLimit ||
                    (this.SpamPercentLimit != null &&
                    this.SpamPercentLimit.Equals(input.SpamPercentLimit))
                ) && 
                (
                    this.TotalCustomers == input.TotalCustomers ||
                    (this.TotalCustomers != null &&
                    this.TotalCustomers.Equals(input.TotalCustomers))
                ) && 
                (
                    this.TotalEmails == input.TotalEmails ||
                    (this.TotalEmails != null &&
                    this.TotalEmails.Equals(input.TotalEmails))
                ) && 
                (
                    this.UpgradeTo == input.UpgradeTo ||
                    (this.UpgradeTo != null &&
                    this.UpgradeTo.Equals(input.UpgradeTo))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AdditionalCustomers != null)
                    hashCode = hashCode * 59 + this.AdditionalCustomers.GetHashCode();
                if (this.AdditionalEmails != null)
                    hashCode = hashCode * 59 + this.AdditionalEmails.GetHashCode();
                if (this.AdditionalFee != null)
                    hashCode = hashCode * 59 + this.AdditionalFee.GetHashCode();
                if (this.AllowListImport != null)
                    hashCode = hashCode * 59 + this.AllowListImport.GetHashCode();
                if (this.AllowTrackingEmails != null)
                    hashCode = hashCode * 59 + this.AllowTrackingEmails.GetHashCode();
                if (this.CustomerTiers != null)
                    hashCode = hashCode * 59 + this.CustomerTiers.GetHashCode();
                if (this.InitialSendingLimits != null)
                    hashCode = hashCode * 59 + this.InitialSendingLimits.GetHashCode();
                if (this.PlanCustomers != null)
                    hashCode = hashCode * 59 + this.PlanCustomers.GetHashCode();
                if (this.PlanEmails != null)
                    hashCode = hashCode * 59 + this.PlanEmails.GetHashCode();
                if (this.PlanName != null)
                    hashCode = hashCode * 59 + this.PlanName.GetHashCode();
                if (this.PlanNameFormatted != null)
                    hashCode = hashCode * 59 + this.PlanNameFormatted.GetHashCode();
                if (this.RequireOrderWithinLastDays != null)
                    hashCode = hashCode * 59 + this.RequireOrderWithinLastDays.GetHashCode();
                if (this.RevenuePercent != null)
                    hashCode = hashCode * 59 + this.RevenuePercent.GetHashCode();
                if (this.SpamPercentLimit != null)
                    hashCode = hashCode * 59 + this.SpamPercentLimit.GetHashCode();
                if (this.TotalCustomers != null)
                    hashCode = hashCode * 59 + this.TotalCustomers.GetHashCode();
                if (this.TotalEmails != null)
                    hashCode = hashCode * 59 + this.TotalEmails.GetHashCode();
                if (this.UpgradeTo != null)
                    hashCode = hashCode * 59 + this.UpgradeTo.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
