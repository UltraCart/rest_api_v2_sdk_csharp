/* 
 * UltraCart Rest API V2
 *
 * UltraCart REST API Version 2
 *
 * OpenAPI spec version: 2.0.0
 * Contact: support@ultracart.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = com.ultracart.admin.v2.Client.SwaggerDateConverter;

namespace com.ultracart.admin.v2.Model
{
    /// <summary>
    /// EmailSegment
    /// </summary>
    [DataContract]
    public partial class EmailSegment :  IEquatable<EmailSegment>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EmailSegment" /> class.
        /// </summary>
        /// <param name="allowCsvDownload">True if the current user has the rights to download this segment..</param>
        /// <param name="allowFacebookAudiences">True if this StoreFront has the Facebook Analytics app connected and supports them.</param>
        /// <param name="createdDts">Created date.</param>
        /// <param name="deleted">True if this campaign was deleted.</param>
        /// <param name="emailSegmentUuid">Email segment UUID.</param>
        /// <param name="facebookCustomAudience">True if you want to sync to a facebook custom audience.</param>
        /// <param name="filterProfileEquationJson">File profile equation json.</param>
        /// <param name="memberCount">Count of members in this segment.</param>
        /// <param name="merchantId">Merchant ID.</param>
        /// <param name="name">Name of email segment.</param>
        /// <param name="rankJson">Rank settings json.</param>
        /// <param name="rebuildRequired">True if a rebuild is required because some part of the segment has changed.</param>
        /// <param name="storefrontOid">Storefront oid.</param>
        /// <param name="usedBy">Details on the flows or campaigns that use this list..</param>
        public EmailSegment(bool? allowCsvDownload = default(bool?), bool? allowFacebookAudiences = default(bool?), string createdDts = default(string), bool? deleted = default(bool?), string emailSegmentUuid = default(string), bool? facebookCustomAudience = default(bool?), string filterProfileEquationJson = default(string), int? memberCount = default(int?), string merchantId = default(string), string name = default(string), string rankJson = default(string), bool? rebuildRequired = default(bool?), int? storefrontOid = default(int?), List<EmailListSegmentUsedBy> usedBy = default(List<EmailListSegmentUsedBy>))
        {
            this.AllowCsvDownload = allowCsvDownload;
            this.AllowFacebookAudiences = allowFacebookAudiences;
            this.CreatedDts = createdDts;
            this.Deleted = deleted;
            this.EmailSegmentUuid = emailSegmentUuid;
            this.FacebookCustomAudience = facebookCustomAudience;
            this.FilterProfileEquationJson = filterProfileEquationJson;
            this.MemberCount = memberCount;
            this.MerchantId = merchantId;
            this.Name = name;
            this.RankJson = rankJson;
            this.RebuildRequired = rebuildRequired;
            this.StorefrontOid = storefrontOid;
            this.UsedBy = usedBy;
        }
        
        /// <summary>
        /// True if the current user has the rights to download this segment.
        /// </summary>
        /// <value>True if the current user has the rights to download this segment.</value>
        [DataMember(Name="allow_csv_download", EmitDefaultValue=false)]
        public bool? AllowCsvDownload { get; set; }

        /// <summary>
        /// True if this StoreFront has the Facebook Analytics app connected and supports them
        /// </summary>
        /// <value>True if this StoreFront has the Facebook Analytics app connected and supports them</value>
        [DataMember(Name="allow_facebook_audiences", EmitDefaultValue=false)]
        public bool? AllowFacebookAudiences { get; set; }

        /// <summary>
        /// Created date
        /// </summary>
        /// <value>Created date</value>
        [DataMember(Name="created_dts", EmitDefaultValue=false)]
        public string CreatedDts { get; set; }

        /// <summary>
        /// True if this campaign was deleted
        /// </summary>
        /// <value>True if this campaign was deleted</value>
        [DataMember(Name="deleted", EmitDefaultValue=false)]
        public bool? Deleted { get; set; }

        /// <summary>
        /// Email segment UUID
        /// </summary>
        /// <value>Email segment UUID</value>
        [DataMember(Name="email_segment_uuid", EmitDefaultValue=false)]
        public string EmailSegmentUuid { get; set; }

        /// <summary>
        /// True if you want to sync to a facebook custom audience
        /// </summary>
        /// <value>True if you want to sync to a facebook custom audience</value>
        [DataMember(Name="facebook_custom_audience", EmitDefaultValue=false)]
        public bool? FacebookCustomAudience { get; set; }

        /// <summary>
        /// File profile equation json
        /// </summary>
        /// <value>File profile equation json</value>
        [DataMember(Name="filter_profile_equation_json", EmitDefaultValue=false)]
        public string FilterProfileEquationJson { get; set; }

        /// <summary>
        /// Count of members in this segment
        /// </summary>
        /// <value>Count of members in this segment</value>
        [DataMember(Name="member_count", EmitDefaultValue=false)]
        public int? MemberCount { get; set; }

        /// <summary>
        /// Merchant ID
        /// </summary>
        /// <value>Merchant ID</value>
        [DataMember(Name="merchant_id", EmitDefaultValue=false)]
        public string MerchantId { get; set; }

        /// <summary>
        /// Name of email segment
        /// </summary>
        /// <value>Name of email segment</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Rank settings json
        /// </summary>
        /// <value>Rank settings json</value>
        [DataMember(Name="rank_json", EmitDefaultValue=false)]
        public string RankJson { get; set; }

        /// <summary>
        /// True if a rebuild is required because some part of the segment has changed
        /// </summary>
        /// <value>True if a rebuild is required because some part of the segment has changed</value>
        [DataMember(Name="rebuild_required", EmitDefaultValue=false)]
        public bool? RebuildRequired { get; set; }

        /// <summary>
        /// Storefront oid
        /// </summary>
        /// <value>Storefront oid</value>
        [DataMember(Name="storefront_oid", EmitDefaultValue=false)]
        public int? StorefrontOid { get; set; }

        /// <summary>
        /// Details on the flows or campaigns that use this list.
        /// </summary>
        /// <value>Details on the flows or campaigns that use this list.</value>
        [DataMember(Name="used_by", EmitDefaultValue=false)]
        public List<EmailListSegmentUsedBy> UsedBy { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class EmailSegment {\n");
            sb.Append("  AllowCsvDownload: ").Append(AllowCsvDownload).Append("\n");
            sb.Append("  AllowFacebookAudiences: ").Append(AllowFacebookAudiences).Append("\n");
            sb.Append("  CreatedDts: ").Append(CreatedDts).Append("\n");
            sb.Append("  Deleted: ").Append(Deleted).Append("\n");
            sb.Append("  EmailSegmentUuid: ").Append(EmailSegmentUuid).Append("\n");
            sb.Append("  FacebookCustomAudience: ").Append(FacebookCustomAudience).Append("\n");
            sb.Append("  FilterProfileEquationJson: ").Append(FilterProfileEquationJson).Append("\n");
            sb.Append("  MemberCount: ").Append(MemberCount).Append("\n");
            sb.Append("  MerchantId: ").Append(MerchantId).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  RankJson: ").Append(RankJson).Append("\n");
            sb.Append("  RebuildRequired: ").Append(RebuildRequired).Append("\n");
            sb.Append("  StorefrontOid: ").Append(StorefrontOid).Append("\n");
            sb.Append("  UsedBy: ").Append(UsedBy).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as EmailSegment);
        }

        /// <summary>
        /// Returns true if EmailSegment instances are equal
        /// </summary>
        /// <param name="input">Instance of EmailSegment to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(EmailSegment input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.AllowCsvDownload == input.AllowCsvDownload ||
                    (this.AllowCsvDownload != null &&
                    this.AllowCsvDownload.Equals(input.AllowCsvDownload))
                ) && 
                (
                    this.AllowFacebookAudiences == input.AllowFacebookAudiences ||
                    (this.AllowFacebookAudiences != null &&
                    this.AllowFacebookAudiences.Equals(input.AllowFacebookAudiences))
                ) && 
                (
                    this.CreatedDts == input.CreatedDts ||
                    (this.CreatedDts != null &&
                    this.CreatedDts.Equals(input.CreatedDts))
                ) && 
                (
                    this.Deleted == input.Deleted ||
                    (this.Deleted != null &&
                    this.Deleted.Equals(input.Deleted))
                ) && 
                (
                    this.EmailSegmentUuid == input.EmailSegmentUuid ||
                    (this.EmailSegmentUuid != null &&
                    this.EmailSegmentUuid.Equals(input.EmailSegmentUuid))
                ) && 
                (
                    this.FacebookCustomAudience == input.FacebookCustomAudience ||
                    (this.FacebookCustomAudience != null &&
                    this.FacebookCustomAudience.Equals(input.FacebookCustomAudience))
                ) && 
                (
                    this.FilterProfileEquationJson == input.FilterProfileEquationJson ||
                    (this.FilterProfileEquationJson != null &&
                    this.FilterProfileEquationJson.Equals(input.FilterProfileEquationJson))
                ) && 
                (
                    this.MemberCount == input.MemberCount ||
                    (this.MemberCount != null &&
                    this.MemberCount.Equals(input.MemberCount))
                ) && 
                (
                    this.MerchantId == input.MerchantId ||
                    (this.MerchantId != null &&
                    this.MerchantId.Equals(input.MerchantId))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.RankJson == input.RankJson ||
                    (this.RankJson != null &&
                    this.RankJson.Equals(input.RankJson))
                ) && 
                (
                    this.RebuildRequired == input.RebuildRequired ||
                    (this.RebuildRequired != null &&
                    this.RebuildRequired.Equals(input.RebuildRequired))
                ) && 
                (
                    this.StorefrontOid == input.StorefrontOid ||
                    (this.StorefrontOid != null &&
                    this.StorefrontOid.Equals(input.StorefrontOid))
                ) && 
                (
                    this.UsedBy == input.UsedBy ||
                    this.UsedBy != null &&
                    this.UsedBy.SequenceEqual(input.UsedBy)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AllowCsvDownload != null)
                    hashCode = hashCode * 59 + this.AllowCsvDownload.GetHashCode();
                if (this.AllowFacebookAudiences != null)
                    hashCode = hashCode * 59 + this.AllowFacebookAudiences.GetHashCode();
                if (this.CreatedDts != null)
                    hashCode = hashCode * 59 + this.CreatedDts.GetHashCode();
                if (this.Deleted != null)
                    hashCode = hashCode * 59 + this.Deleted.GetHashCode();
                if (this.EmailSegmentUuid != null)
                    hashCode = hashCode * 59 + this.EmailSegmentUuid.GetHashCode();
                if (this.FacebookCustomAudience != null)
                    hashCode = hashCode * 59 + this.FacebookCustomAudience.GetHashCode();
                if (this.FilterProfileEquationJson != null)
                    hashCode = hashCode * 59 + this.FilterProfileEquationJson.GetHashCode();
                if (this.MemberCount != null)
                    hashCode = hashCode * 59 + this.MemberCount.GetHashCode();
                if (this.MerchantId != null)
                    hashCode = hashCode * 59 + this.MerchantId.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.RankJson != null)
                    hashCode = hashCode * 59 + this.RankJson.GetHashCode();
                if (this.RebuildRequired != null)
                    hashCode = hashCode * 59 + this.RebuildRequired.GetHashCode();
                if (this.StorefrontOid != null)
                    hashCode = hashCode * 59 + this.StorefrontOid.GetHashCode();
                if (this.UsedBy != null)
                    hashCode = hashCode * 59 + this.UsedBy.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Name (string) maxLength
            if(this.Name != null && this.Name.Length > 250)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Name, length must be less than 250.", new [] { "Name" });
            }

            yield break;
        }
    }

}
