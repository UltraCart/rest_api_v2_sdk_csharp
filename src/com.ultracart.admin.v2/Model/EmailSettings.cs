/*
 * UltraCart Rest API V2
 *
 * UltraCart REST API Version 2
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@ultracart.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = com.ultracart.admin.v2.Client.OpenAPIDateConverter;

namespace com.ultracart.admin.v2.Model
{
    /// <summary>
    /// EmailSettings
    /// </summary>
    [DataContract]
    public partial class EmailSettings :  IEquatable<EmailSettings>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EmailSettings" /> class.
        /// </summary>
        /// <param name="emailsPerDay">Emails per day allowed.</param>
        /// <param name="emailsPerHour">Emails per hour allowed.</param>
        /// <param name="emailsPerMonth">Emails per month allowed.</param>
        /// <param name="marketingEspDomainUser">marketingEspDomainUser.</param>
        /// <param name="marketingEspDomainUuid">marketingEspDomainUuid.</param>
        /// <param name="marketingEspFriendlyName">marketingEspFriendlyName.</param>
        /// <param name="postcardFromAddress1">postcardFromAddress1.</param>
        /// <param name="postcardFromAddress2">postcardFromAddress2.</param>
        /// <param name="postcardFromCity">postcardFromCity.</param>
        /// <param name="postcardFromName">postcardFromName.</param>
        /// <param name="postcardFromPostalCode">postcardFromPostalCode.</param>
        /// <param name="postcardFromState">postcardFromState.</param>
        /// <param name="requireOrderWithinLast">Require order within last.</param>
        /// <param name="reviewsIoConfigured">True if the Reviews.io integration is configured.</param>
        /// <param name="smsEspTwilioUuid">smsEspTwilioUuid.</param>
        /// <param name="smsPhoneNumber">smsPhoneNumber.</param>
        /// <param name="transactionalEspDomainUser">transactionalEspDomainUser.</param>
        /// <param name="transactionalEspDomainUuid">transactionalEspDomainUuid.</param>
        /// <param name="transactionalEspFriendlyName">transactionalEspFriendlyName.</param>
        public EmailSettings(int emailsPerDay = default(int), int emailsPerHour = default(int), int emailsPerMonth = default(int), string marketingEspDomainUser = default(string), string marketingEspDomainUuid = default(string), string marketingEspFriendlyName = default(string), string postcardFromAddress1 = default(string), string postcardFromAddress2 = default(string), string postcardFromCity = default(string), string postcardFromName = default(string), string postcardFromPostalCode = default(string), string postcardFromState = default(string), int requireOrderWithinLast = default(int), bool reviewsIoConfigured = default(bool), string smsEspTwilioUuid = default(string), string smsPhoneNumber = default(string), string transactionalEspDomainUser = default(string), string transactionalEspDomainUuid = default(string), string transactionalEspFriendlyName = default(string))
        {
            this.EmailsPerDay = emailsPerDay;
            this.EmailsPerHour = emailsPerHour;
            this.EmailsPerMonth = emailsPerMonth;
            this.MarketingEspDomainUser = marketingEspDomainUser;
            this.MarketingEspDomainUuid = marketingEspDomainUuid;
            this.MarketingEspFriendlyName = marketingEspFriendlyName;
            this.PostcardFromAddress1 = postcardFromAddress1;
            this.PostcardFromAddress2 = postcardFromAddress2;
            this.PostcardFromCity = postcardFromCity;
            this.PostcardFromName = postcardFromName;
            this.PostcardFromPostalCode = postcardFromPostalCode;
            this.PostcardFromState = postcardFromState;
            this.RequireOrderWithinLast = requireOrderWithinLast;
            this.ReviewsIoConfigured = reviewsIoConfigured;
            this.SmsEspTwilioUuid = smsEspTwilioUuid;
            this.SmsPhoneNumber = smsPhoneNumber;
            this.TransactionalEspDomainUser = transactionalEspDomainUser;
            this.TransactionalEspDomainUuid = transactionalEspDomainUuid;
            this.TransactionalEspFriendlyName = transactionalEspFriendlyName;
        }

        /// <summary>
        /// Emails per day allowed
        /// </summary>
        /// <value>Emails per day allowed</value>
        [DataMember(Name="emails_per_day", EmitDefaultValue=false)]
        public int EmailsPerDay { get; set; }

        /// <summary>
        /// Emails per hour allowed
        /// </summary>
        /// <value>Emails per hour allowed</value>
        [DataMember(Name="emails_per_hour", EmitDefaultValue=false)]
        public int EmailsPerHour { get; set; }

        /// <summary>
        /// Emails per month allowed
        /// </summary>
        /// <value>Emails per month allowed</value>
        [DataMember(Name="emails_per_month", EmitDefaultValue=false)]
        public int EmailsPerMonth { get; set; }

        /// <summary>
        /// Gets or Sets MarketingEspDomainUser
        /// </summary>
        [DataMember(Name="marketing_esp_domain_user", EmitDefaultValue=false)]
        public string MarketingEspDomainUser { get; set; }

        /// <summary>
        /// Gets or Sets MarketingEspDomainUuid
        /// </summary>
        [DataMember(Name="marketing_esp_domain_uuid", EmitDefaultValue=false)]
        public string MarketingEspDomainUuid { get; set; }

        /// <summary>
        /// Gets or Sets MarketingEspFriendlyName
        /// </summary>
        [DataMember(Name="marketing_esp_friendly_name", EmitDefaultValue=false)]
        public string MarketingEspFriendlyName { get; set; }

        /// <summary>
        /// Gets or Sets PostcardFromAddress1
        /// </summary>
        [DataMember(Name="postcard_from_address1", EmitDefaultValue=false)]
        public string PostcardFromAddress1 { get; set; }

        /// <summary>
        /// Gets or Sets PostcardFromAddress2
        /// </summary>
        [DataMember(Name="postcard_from_address2", EmitDefaultValue=false)]
        public string PostcardFromAddress2 { get; set; }

        /// <summary>
        /// Gets or Sets PostcardFromCity
        /// </summary>
        [DataMember(Name="postcard_from_city", EmitDefaultValue=false)]
        public string PostcardFromCity { get; set; }

        /// <summary>
        /// Gets or Sets PostcardFromName
        /// </summary>
        [DataMember(Name="postcard_from_name", EmitDefaultValue=false)]
        public string PostcardFromName { get; set; }

        /// <summary>
        /// Gets or Sets PostcardFromPostalCode
        /// </summary>
        [DataMember(Name="postcard_from_postal_code", EmitDefaultValue=false)]
        public string PostcardFromPostalCode { get; set; }

        /// <summary>
        /// Gets or Sets PostcardFromState
        /// </summary>
        [DataMember(Name="postcard_from_state", EmitDefaultValue=false)]
        public string PostcardFromState { get; set; }

        /// <summary>
        /// Require order within last
        /// </summary>
        /// <value>Require order within last</value>
        [DataMember(Name="require_order_within_last", EmitDefaultValue=false)]
        public int RequireOrderWithinLast { get; set; }

        /// <summary>
        /// True if the Reviews.io integration is configured
        /// </summary>
        /// <value>True if the Reviews.io integration is configured</value>
        [DataMember(Name="reviews_io_configured", EmitDefaultValue=false)]
        public bool ReviewsIoConfigured { get; set; }

        /// <summary>
        /// Gets or Sets SmsEspTwilioUuid
        /// </summary>
        [DataMember(Name="sms_esp_twilio_uuid", EmitDefaultValue=false)]
        public string SmsEspTwilioUuid { get; set; }

        /// <summary>
        /// Gets or Sets SmsPhoneNumber
        /// </summary>
        [DataMember(Name="sms_phone_number", EmitDefaultValue=false)]
        public string SmsPhoneNumber { get; set; }

        /// <summary>
        /// Gets or Sets TransactionalEspDomainUser
        /// </summary>
        [DataMember(Name="transactional_esp_domain_user", EmitDefaultValue=false)]
        public string TransactionalEspDomainUser { get; set; }

        /// <summary>
        /// Gets or Sets TransactionalEspDomainUuid
        /// </summary>
        [DataMember(Name="transactional_esp_domain_uuid", EmitDefaultValue=false)]
        public string TransactionalEspDomainUuid { get; set; }

        /// <summary>
        /// Gets or Sets TransactionalEspFriendlyName
        /// </summary>
        [DataMember(Name="transactional_esp_friendly_name", EmitDefaultValue=false)]
        public string TransactionalEspFriendlyName { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class EmailSettings {\n");
            sb.Append("  EmailsPerDay: ").Append(EmailsPerDay).Append("\n");
            sb.Append("  EmailsPerHour: ").Append(EmailsPerHour).Append("\n");
            sb.Append("  EmailsPerMonth: ").Append(EmailsPerMonth).Append("\n");
            sb.Append("  MarketingEspDomainUser: ").Append(MarketingEspDomainUser).Append("\n");
            sb.Append("  MarketingEspDomainUuid: ").Append(MarketingEspDomainUuid).Append("\n");
            sb.Append("  MarketingEspFriendlyName: ").Append(MarketingEspFriendlyName).Append("\n");
            sb.Append("  PostcardFromAddress1: ").Append(PostcardFromAddress1).Append("\n");
            sb.Append("  PostcardFromAddress2: ").Append(PostcardFromAddress2).Append("\n");
            sb.Append("  PostcardFromCity: ").Append(PostcardFromCity).Append("\n");
            sb.Append("  PostcardFromName: ").Append(PostcardFromName).Append("\n");
            sb.Append("  PostcardFromPostalCode: ").Append(PostcardFromPostalCode).Append("\n");
            sb.Append("  PostcardFromState: ").Append(PostcardFromState).Append("\n");
            sb.Append("  RequireOrderWithinLast: ").Append(RequireOrderWithinLast).Append("\n");
            sb.Append("  ReviewsIoConfigured: ").Append(ReviewsIoConfigured).Append("\n");
            sb.Append("  SmsEspTwilioUuid: ").Append(SmsEspTwilioUuid).Append("\n");
            sb.Append("  SmsPhoneNumber: ").Append(SmsPhoneNumber).Append("\n");
            sb.Append("  TransactionalEspDomainUser: ").Append(TransactionalEspDomainUser).Append("\n");
            sb.Append("  TransactionalEspDomainUuid: ").Append(TransactionalEspDomainUuid).Append("\n");
            sb.Append("  TransactionalEspFriendlyName: ").Append(TransactionalEspFriendlyName).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as EmailSettings);
        }

        /// <summary>
        /// Returns true if EmailSettings instances are equal
        /// </summary>
        /// <param name="input">Instance of EmailSettings to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(EmailSettings input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.EmailsPerDay == input.EmailsPerDay ||
                    (this.EmailsPerDay != null &&
                    this.EmailsPerDay.Equals(input.EmailsPerDay))
                ) && 
                (
                    this.EmailsPerHour == input.EmailsPerHour ||
                    (this.EmailsPerHour != null &&
                    this.EmailsPerHour.Equals(input.EmailsPerHour))
                ) && 
                (
                    this.EmailsPerMonth == input.EmailsPerMonth ||
                    (this.EmailsPerMonth != null &&
                    this.EmailsPerMonth.Equals(input.EmailsPerMonth))
                ) && 
                (
                    this.MarketingEspDomainUser == input.MarketingEspDomainUser ||
                    (this.MarketingEspDomainUser != null &&
                    this.MarketingEspDomainUser.Equals(input.MarketingEspDomainUser))
                ) && 
                (
                    this.MarketingEspDomainUuid == input.MarketingEspDomainUuid ||
                    (this.MarketingEspDomainUuid != null &&
                    this.MarketingEspDomainUuid.Equals(input.MarketingEspDomainUuid))
                ) && 
                (
                    this.MarketingEspFriendlyName == input.MarketingEspFriendlyName ||
                    (this.MarketingEspFriendlyName != null &&
                    this.MarketingEspFriendlyName.Equals(input.MarketingEspFriendlyName))
                ) && 
                (
                    this.PostcardFromAddress1 == input.PostcardFromAddress1 ||
                    (this.PostcardFromAddress1 != null &&
                    this.PostcardFromAddress1.Equals(input.PostcardFromAddress1))
                ) && 
                (
                    this.PostcardFromAddress2 == input.PostcardFromAddress2 ||
                    (this.PostcardFromAddress2 != null &&
                    this.PostcardFromAddress2.Equals(input.PostcardFromAddress2))
                ) && 
                (
                    this.PostcardFromCity == input.PostcardFromCity ||
                    (this.PostcardFromCity != null &&
                    this.PostcardFromCity.Equals(input.PostcardFromCity))
                ) && 
                (
                    this.PostcardFromName == input.PostcardFromName ||
                    (this.PostcardFromName != null &&
                    this.PostcardFromName.Equals(input.PostcardFromName))
                ) && 
                (
                    this.PostcardFromPostalCode == input.PostcardFromPostalCode ||
                    (this.PostcardFromPostalCode != null &&
                    this.PostcardFromPostalCode.Equals(input.PostcardFromPostalCode))
                ) && 
                (
                    this.PostcardFromState == input.PostcardFromState ||
                    (this.PostcardFromState != null &&
                    this.PostcardFromState.Equals(input.PostcardFromState))
                ) && 
                (
                    this.RequireOrderWithinLast == input.RequireOrderWithinLast ||
                    (this.RequireOrderWithinLast != null &&
                    this.RequireOrderWithinLast.Equals(input.RequireOrderWithinLast))
                ) && 
                (
                    this.ReviewsIoConfigured == input.ReviewsIoConfigured ||
                    (this.ReviewsIoConfigured != null &&
                    this.ReviewsIoConfigured.Equals(input.ReviewsIoConfigured))
                ) && 
                (
                    this.SmsEspTwilioUuid == input.SmsEspTwilioUuid ||
                    (this.SmsEspTwilioUuid != null &&
                    this.SmsEspTwilioUuid.Equals(input.SmsEspTwilioUuid))
                ) && 
                (
                    this.SmsPhoneNumber == input.SmsPhoneNumber ||
                    (this.SmsPhoneNumber != null &&
                    this.SmsPhoneNumber.Equals(input.SmsPhoneNumber))
                ) && 
                (
                    this.TransactionalEspDomainUser == input.TransactionalEspDomainUser ||
                    (this.TransactionalEspDomainUser != null &&
                    this.TransactionalEspDomainUser.Equals(input.TransactionalEspDomainUser))
                ) && 
                (
                    this.TransactionalEspDomainUuid == input.TransactionalEspDomainUuid ||
                    (this.TransactionalEspDomainUuid != null &&
                    this.TransactionalEspDomainUuid.Equals(input.TransactionalEspDomainUuid))
                ) && 
                (
                    this.TransactionalEspFriendlyName == input.TransactionalEspFriendlyName ||
                    (this.TransactionalEspFriendlyName != null &&
                    this.TransactionalEspFriendlyName.Equals(input.TransactionalEspFriendlyName))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.EmailsPerDay != null)
                    hashCode = hashCode * 59 + this.EmailsPerDay.GetHashCode();
                if (this.EmailsPerHour != null)
                    hashCode = hashCode * 59 + this.EmailsPerHour.GetHashCode();
                if (this.EmailsPerMonth != null)
                    hashCode = hashCode * 59 + this.EmailsPerMonth.GetHashCode();
                if (this.MarketingEspDomainUser != null)
                    hashCode = hashCode * 59 + this.MarketingEspDomainUser.GetHashCode();
                if (this.MarketingEspDomainUuid != null)
                    hashCode = hashCode * 59 + this.MarketingEspDomainUuid.GetHashCode();
                if (this.MarketingEspFriendlyName != null)
                    hashCode = hashCode * 59 + this.MarketingEspFriendlyName.GetHashCode();
                if (this.PostcardFromAddress1 != null)
                    hashCode = hashCode * 59 + this.PostcardFromAddress1.GetHashCode();
                if (this.PostcardFromAddress2 != null)
                    hashCode = hashCode * 59 + this.PostcardFromAddress2.GetHashCode();
                if (this.PostcardFromCity != null)
                    hashCode = hashCode * 59 + this.PostcardFromCity.GetHashCode();
                if (this.PostcardFromName != null)
                    hashCode = hashCode * 59 + this.PostcardFromName.GetHashCode();
                if (this.PostcardFromPostalCode != null)
                    hashCode = hashCode * 59 + this.PostcardFromPostalCode.GetHashCode();
                if (this.PostcardFromState != null)
                    hashCode = hashCode * 59 + this.PostcardFromState.GetHashCode();
                if (this.RequireOrderWithinLast != null)
                    hashCode = hashCode * 59 + this.RequireOrderWithinLast.GetHashCode();
                if (this.ReviewsIoConfigured != null)
                    hashCode = hashCode * 59 + this.ReviewsIoConfigured.GetHashCode();
                if (this.SmsEspTwilioUuid != null)
                    hashCode = hashCode * 59 + this.SmsEspTwilioUuid.GetHashCode();
                if (this.SmsPhoneNumber != null)
                    hashCode = hashCode * 59 + this.SmsPhoneNumber.GetHashCode();
                if (this.TransactionalEspDomainUser != null)
                    hashCode = hashCode * 59 + this.TransactionalEspDomainUser.GetHashCode();
                if (this.TransactionalEspDomainUuid != null)
                    hashCode = hashCode * 59 + this.TransactionalEspDomainUuid.GetHashCode();
                if (this.TransactionalEspFriendlyName != null)
                    hashCode = hashCode * 59 + this.TransactionalEspFriendlyName.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
