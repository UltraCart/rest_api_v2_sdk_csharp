/* 
 * UltraCart Rest API V2
 *
 * UltraCart REST API Version 2
 *
 * OpenAPI spec version: 2.0.0
 * Contact: support@ultracart.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = com.ultracart.admin.v2.Client.SwaggerDateConverter;

namespace com.ultracart.admin.v2.Model
{
    /// <summary>
    /// EmailTemplate
    /// </summary>
    [DataContract]
    public partial class EmailTemplate :  IEquatable<EmailTemplate>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EmailTemplate" /> class.
        /// </summary>
        /// <param name="ContainerCjson">Container cjson.</param>
        /// <param name="Description">Description of email template.</param>
        /// <param name="EmailTemplateOid">Email template oid.</param>
        /// <param name="EmailTemplateVmPath">Email Template VM Path.</param>
        /// <param name="MerchantId">Merchant ID.</param>
        /// <param name="Name">Name of email template.</param>
        /// <param name="PreviewAmazonListingKey">Amazon key for preview png image.</param>
        /// <param name="SortOrder">Sort order (optional).</param>
        /// <param name="StorefrontOid">StoreFront oid.</param>
        /// <param name="System">True if this email template is system-wide,false if merchant specific.</param>
        /// <param name="TriggerType">Trigger type.</param>
        public EmailTemplate(string ContainerCjson = default(string), string Description = default(string), int? EmailTemplateOid = default(int?), string EmailTemplateVmPath = default(string), string MerchantId = default(string), string Name = default(string), string PreviewAmazonListingKey = default(string), int? SortOrder = default(int?), int? StorefrontOid = default(int?), bool? System = default(bool?), string TriggerType = default(string))
        {
            this.ContainerCjson = ContainerCjson;
            this.Description = Description;
            this.EmailTemplateOid = EmailTemplateOid;
            this.EmailTemplateVmPath = EmailTemplateVmPath;
            this.MerchantId = MerchantId;
            this.Name = Name;
            this.PreviewAmazonListingKey = PreviewAmazonListingKey;
            this.SortOrder = SortOrder;
            this.StorefrontOid = StorefrontOid;
            this.System = System;
            this.TriggerType = TriggerType;
        }
        
        /// <summary>
        /// Container cjson
        /// </summary>
        /// <value>Container cjson</value>
        [DataMember(Name="container_cjson", EmitDefaultValue=false)]
        public string ContainerCjson { get; set; }

        /// <summary>
        /// Description of email template
        /// </summary>
        /// <value>Description of email template</value>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }

        /// <summary>
        /// Email template oid
        /// </summary>
        /// <value>Email template oid</value>
        [DataMember(Name="email_template_oid", EmitDefaultValue=false)]
        public int? EmailTemplateOid { get; set; }

        /// <summary>
        /// Email Template VM Path
        /// </summary>
        /// <value>Email Template VM Path</value>
        [DataMember(Name="email_template_vm_path", EmitDefaultValue=false)]
        public string EmailTemplateVmPath { get; set; }

        /// <summary>
        /// Merchant ID
        /// </summary>
        /// <value>Merchant ID</value>
        [DataMember(Name="merchant_id", EmitDefaultValue=false)]
        public string MerchantId { get; set; }

        /// <summary>
        /// Name of email template
        /// </summary>
        /// <value>Name of email template</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Amazon key for preview png image
        /// </summary>
        /// <value>Amazon key for preview png image</value>
        [DataMember(Name="preview_amazon_listing_key", EmitDefaultValue=false)]
        public string PreviewAmazonListingKey { get; set; }

        /// <summary>
        /// Sort order (optional)
        /// </summary>
        /// <value>Sort order (optional)</value>
        [DataMember(Name="sort_order", EmitDefaultValue=false)]
        public int? SortOrder { get; set; }

        /// <summary>
        /// StoreFront oid
        /// </summary>
        /// <value>StoreFront oid</value>
        [DataMember(Name="storefront_oid", EmitDefaultValue=false)]
        public int? StorefrontOid { get; set; }

        /// <summary>
        /// True if this email template is system-wide,false if merchant specific
        /// </summary>
        /// <value>True if this email template is system-wide,false if merchant specific</value>
        [DataMember(Name="system", EmitDefaultValue=false)]
        public bool? System { get; set; }

        /// <summary>
        /// Trigger type
        /// </summary>
        /// <value>Trigger type</value>
        [DataMember(Name="trigger_type", EmitDefaultValue=false)]
        public string TriggerType { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class EmailTemplate {\n");
            sb.Append("  ContainerCjson: ").Append(ContainerCjson).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  EmailTemplateOid: ").Append(EmailTemplateOid).Append("\n");
            sb.Append("  EmailTemplateVmPath: ").Append(EmailTemplateVmPath).Append("\n");
            sb.Append("  MerchantId: ").Append(MerchantId).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  PreviewAmazonListingKey: ").Append(PreviewAmazonListingKey).Append("\n");
            sb.Append("  SortOrder: ").Append(SortOrder).Append("\n");
            sb.Append("  StorefrontOid: ").Append(StorefrontOid).Append("\n");
            sb.Append("  System: ").Append(System).Append("\n");
            sb.Append("  TriggerType: ").Append(TriggerType).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as EmailTemplate);
        }

        /// <summary>
        /// Returns true if EmailTemplate instances are equal
        /// </summary>
        /// <param name="input">Instance of EmailTemplate to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(EmailTemplate input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ContainerCjson == input.ContainerCjson ||
                    (this.ContainerCjson != null &&
                    this.ContainerCjson.Equals(input.ContainerCjson))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.EmailTemplateOid == input.EmailTemplateOid ||
                    (this.EmailTemplateOid != null &&
                    this.EmailTemplateOid.Equals(input.EmailTemplateOid))
                ) && 
                (
                    this.EmailTemplateVmPath == input.EmailTemplateVmPath ||
                    (this.EmailTemplateVmPath != null &&
                    this.EmailTemplateVmPath.Equals(input.EmailTemplateVmPath))
                ) && 
                (
                    this.MerchantId == input.MerchantId ||
                    (this.MerchantId != null &&
                    this.MerchantId.Equals(input.MerchantId))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.PreviewAmazonListingKey == input.PreviewAmazonListingKey ||
                    (this.PreviewAmazonListingKey != null &&
                    this.PreviewAmazonListingKey.Equals(input.PreviewAmazonListingKey))
                ) && 
                (
                    this.SortOrder == input.SortOrder ||
                    (this.SortOrder != null &&
                    this.SortOrder.Equals(input.SortOrder))
                ) && 
                (
                    this.StorefrontOid == input.StorefrontOid ||
                    (this.StorefrontOid != null &&
                    this.StorefrontOid.Equals(input.StorefrontOid))
                ) && 
                (
                    this.System == input.System ||
                    (this.System != null &&
                    this.System.Equals(input.System))
                ) && 
                (
                    this.TriggerType == input.TriggerType ||
                    (this.TriggerType != null &&
                    this.TriggerType.Equals(input.TriggerType))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ContainerCjson != null)
                    hashCode = hashCode * 59 + this.ContainerCjson.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                if (this.EmailTemplateOid != null)
                    hashCode = hashCode * 59 + this.EmailTemplateOid.GetHashCode();
                if (this.EmailTemplateVmPath != null)
                    hashCode = hashCode * 59 + this.EmailTemplateVmPath.GetHashCode();
                if (this.MerchantId != null)
                    hashCode = hashCode * 59 + this.MerchantId.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.PreviewAmazonListingKey != null)
                    hashCode = hashCode * 59 + this.PreviewAmazonListingKey.GetHashCode();
                if (this.SortOrder != null)
                    hashCode = hashCode * 59 + this.SortOrder.GetHashCode();
                if (this.StorefrontOid != null)
                    hashCode = hashCode * 59 + this.StorefrontOid.GetHashCode();
                if (this.System != null)
                    hashCode = hashCode * 59 + this.System.GetHashCode();
                if (this.TriggerType != null)
                    hashCode = hashCode * 59 + this.TriggerType.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Name (string) maxLength
            if(this.Name != null && this.Name.Length > 250)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Name, length must be less than 250.", new [] { "Name" });
            }

            // PreviewAmazonListingKey (string) maxLength
            if(this.PreviewAmazonListingKey != null && this.PreviewAmazonListingKey.Length > 250)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for PreviewAmazonListingKey, length must be less than 250.", new [] { "PreviewAmazonListingKey" });
            }

            // TriggerType (string) maxLength
            if(this.TriggerType != null && this.TriggerType.Length > 100)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for TriggerType, length must be less than 100.", new [] { "TriggerType" });
            }

            yield break;
        }
    }

}
