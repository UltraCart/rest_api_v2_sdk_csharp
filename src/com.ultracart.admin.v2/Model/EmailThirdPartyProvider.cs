/* 
 * UltraCart Rest API V2
 *
 * UltraCart REST API Version 2
 *
 * OpenAPI spec version: 2.0.0
 * Contact: support@ultracart.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = com.ultracart.admin.v2.Client.SwaggerDateConverter;

namespace com.ultracart.admin.v2.Model
{
    /// <summary>
    /// EmailThirdPartyProvider
    /// </summary>
    [DataContract]
    public partial class EmailThirdPartyProvider :  IEquatable<EmailThirdPartyProvider>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EmailThirdPartyProvider" /> class.
        /// </summary>
        /// <param name="connectUrl">URL to the settings screen to connect.  Null if the provider is already connected..</param>
        /// <param name="listCount">list_count.</param>
        /// <param name="lists">lists.</param>
        /// <param name="logoUrl">logo_url.</param>
        /// <param name="name">name.</param>
        /// <param name="supportsAddTags">True if this provider can support adding tags.</param>
        /// <param name="supportsListSubscribe">True if this provider can support list subscribe.</param>
        /// <param name="supportsListUnsubscribe">True if this provider can support list unsubscribe.</param>
        /// <param name="supportsRemoveTags">True if this provider can support remove tags.</param>
        /// <param name="tagCount">tag_count.</param>
        /// <param name="tags">tags.</param>
        public EmailThirdPartyProvider(string connectUrl = default(string), int? listCount = default(int?), List<EmailThirdPartyList> lists = default(List<EmailThirdPartyList>), string logoUrl = default(string), string name = default(string), bool? supportsAddTags = default(bool?), bool? supportsListSubscribe = default(bool?), bool? supportsListUnsubscribe = default(bool?), bool? supportsRemoveTags = default(bool?), int? tagCount = default(int?), List<EmailThirdPartyTag> tags = default(List<EmailThirdPartyTag>))
        {
            this.ConnectUrl = connectUrl;
            this.ListCount = listCount;
            this.Lists = lists;
            this.LogoUrl = logoUrl;
            this.Name = name;
            this.SupportsAddTags = supportsAddTags;
            this.SupportsListSubscribe = supportsListSubscribe;
            this.SupportsListUnsubscribe = supportsListUnsubscribe;
            this.SupportsRemoveTags = supportsRemoveTags;
            this.TagCount = tagCount;
            this.Tags = tags;
        }
        
        /// <summary>
        /// URL to the settings screen to connect.  Null if the provider is already connected.
        /// </summary>
        /// <value>URL to the settings screen to connect.  Null if the provider is already connected.</value>
        [DataMember(Name="connect_url", EmitDefaultValue=false)]
        public string ConnectUrl { get; set; }

        /// <summary>
        /// list_count
        /// </summary>
        /// <value>list_count</value>
        [DataMember(Name="list_count", EmitDefaultValue=false)]
        public int? ListCount { get; set; }

        /// <summary>
        /// lists
        /// </summary>
        /// <value>lists</value>
        [DataMember(Name="lists", EmitDefaultValue=false)]
        public List<EmailThirdPartyList> Lists { get; set; }

        /// <summary>
        /// logo_url
        /// </summary>
        /// <value>logo_url</value>
        [DataMember(Name="logo_url", EmitDefaultValue=false)]
        public string LogoUrl { get; set; }

        /// <summary>
        /// name
        /// </summary>
        /// <value>name</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// True if this provider can support adding tags
        /// </summary>
        /// <value>True if this provider can support adding tags</value>
        [DataMember(Name="supports_add_tags", EmitDefaultValue=false)]
        public bool? SupportsAddTags { get; set; }

        /// <summary>
        /// True if this provider can support list subscribe
        /// </summary>
        /// <value>True if this provider can support list subscribe</value>
        [DataMember(Name="supports_list_subscribe", EmitDefaultValue=false)]
        public bool? SupportsListSubscribe { get; set; }

        /// <summary>
        /// True if this provider can support list unsubscribe
        /// </summary>
        /// <value>True if this provider can support list unsubscribe</value>
        [DataMember(Name="supports_list_unsubscribe", EmitDefaultValue=false)]
        public bool? SupportsListUnsubscribe { get; set; }

        /// <summary>
        /// True if this provider can support remove tags
        /// </summary>
        /// <value>True if this provider can support remove tags</value>
        [DataMember(Name="supports_remove_tags", EmitDefaultValue=false)]
        public bool? SupportsRemoveTags { get; set; }

        /// <summary>
        /// tag_count
        /// </summary>
        /// <value>tag_count</value>
        [DataMember(Name="tag_count", EmitDefaultValue=false)]
        public int? TagCount { get; set; }

        /// <summary>
        /// tags
        /// </summary>
        /// <value>tags</value>
        [DataMember(Name="tags", EmitDefaultValue=false)]
        public List<EmailThirdPartyTag> Tags { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class EmailThirdPartyProvider {\n");
            sb.Append("  ConnectUrl: ").Append(ConnectUrl).Append("\n");
            sb.Append("  ListCount: ").Append(ListCount).Append("\n");
            sb.Append("  Lists: ").Append(Lists).Append("\n");
            sb.Append("  LogoUrl: ").Append(LogoUrl).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  SupportsAddTags: ").Append(SupportsAddTags).Append("\n");
            sb.Append("  SupportsListSubscribe: ").Append(SupportsListSubscribe).Append("\n");
            sb.Append("  SupportsListUnsubscribe: ").Append(SupportsListUnsubscribe).Append("\n");
            sb.Append("  SupportsRemoveTags: ").Append(SupportsRemoveTags).Append("\n");
            sb.Append("  TagCount: ").Append(TagCount).Append("\n");
            sb.Append("  Tags: ").Append(Tags).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as EmailThirdPartyProvider);
        }

        /// <summary>
        /// Returns true if EmailThirdPartyProvider instances are equal
        /// </summary>
        /// <param name="input">Instance of EmailThirdPartyProvider to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(EmailThirdPartyProvider input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ConnectUrl == input.ConnectUrl ||
                    (this.ConnectUrl != null &&
                    this.ConnectUrl.Equals(input.ConnectUrl))
                ) && 
                (
                    this.ListCount == input.ListCount ||
                    (this.ListCount != null &&
                    this.ListCount.Equals(input.ListCount))
                ) && 
                (
                    this.Lists == input.Lists ||
                    this.Lists != null &&
                    this.Lists.SequenceEqual(input.Lists)
                ) && 
                (
                    this.LogoUrl == input.LogoUrl ||
                    (this.LogoUrl != null &&
                    this.LogoUrl.Equals(input.LogoUrl))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.SupportsAddTags == input.SupportsAddTags ||
                    (this.SupportsAddTags != null &&
                    this.SupportsAddTags.Equals(input.SupportsAddTags))
                ) && 
                (
                    this.SupportsListSubscribe == input.SupportsListSubscribe ||
                    (this.SupportsListSubscribe != null &&
                    this.SupportsListSubscribe.Equals(input.SupportsListSubscribe))
                ) && 
                (
                    this.SupportsListUnsubscribe == input.SupportsListUnsubscribe ||
                    (this.SupportsListUnsubscribe != null &&
                    this.SupportsListUnsubscribe.Equals(input.SupportsListUnsubscribe))
                ) && 
                (
                    this.SupportsRemoveTags == input.SupportsRemoveTags ||
                    (this.SupportsRemoveTags != null &&
                    this.SupportsRemoveTags.Equals(input.SupportsRemoveTags))
                ) && 
                (
                    this.TagCount == input.TagCount ||
                    (this.TagCount != null &&
                    this.TagCount.Equals(input.TagCount))
                ) && 
                (
                    this.Tags == input.Tags ||
                    this.Tags != null &&
                    this.Tags.SequenceEqual(input.Tags)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ConnectUrl != null)
                    hashCode = hashCode * 59 + this.ConnectUrl.GetHashCode();
                if (this.ListCount != null)
                    hashCode = hashCode * 59 + this.ListCount.GetHashCode();
                if (this.Lists != null)
                    hashCode = hashCode * 59 + this.Lists.GetHashCode();
                if (this.LogoUrl != null)
                    hashCode = hashCode * 59 + this.LogoUrl.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.SupportsAddTags != null)
                    hashCode = hashCode * 59 + this.SupportsAddTags.GetHashCode();
                if (this.SupportsListSubscribe != null)
                    hashCode = hashCode * 59 + this.SupportsListSubscribe.GetHashCode();
                if (this.SupportsListUnsubscribe != null)
                    hashCode = hashCode * 59 + this.SupportsListUnsubscribe.GetHashCode();
                if (this.SupportsRemoveTags != null)
                    hashCode = hashCode * 59 + this.SupportsRemoveTags.GetHashCode();
                if (this.TagCount != null)
                    hashCode = hashCode * 59 + this.TagCount.GetHashCode();
                if (this.Tags != null)
                    hashCode = hashCode * 59 + this.Tags.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
