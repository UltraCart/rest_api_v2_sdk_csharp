/* 
 * UltraCart Rest API V2
 *
 * UltraCart REST API Version 2
 *
 * OpenAPI spec version: 2.0.0
 * Contact: support@ultracart.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = com.ultracart.admin.v2.Client.SwaggerDateConverter;

namespace com.ultracart.admin.v2.Model
{
    /// <summary>
    /// ExperimentVariation
    /// </summary>
    [DataContract]
    public partial class ExperimentVariation :  IEquatable<ExperimentVariation>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ExperimentVariation" /> class.
        /// </summary>
        /// <param name="addToCartCount">Total add to cart count for this variation.</param>
        /// <param name="averageDurationSeconds">Average duration seconds per session for this variation.</param>
        /// <param name="averageObjectivePerSession">Average objective value per session for this variation.</param>
        /// <param name="averageOrderValue">Average order value for this variation.</param>
        /// <param name="bounceCount">Total bounce count for this variation.</param>
        /// <param name="conversionRate">Conversion rate for this variation.</param>
        /// <param name="dailyStatistics">Array of daily statistics for this variation.</param>
        /// <param name="durationSecondsSum">Total number of seconds spent on the site for this variation.</param>
        /// <param name="eventCount">Total event ocunt for this variation.</param>
        /// <param name="initiateCheckoutCount">Total initiate checkout count for this variation.</param>
        /// <param name="orderCount">Total order count for this variation.</param>
        /// <param name="orderItemCount">Total order item count for this variation.</param>
        /// <param name="originalTrafficPercentage">Percentage of the traffic the variation originally started out with.</param>
        /// <param name="pageViewCount">Total page view count for this variation.</param>
        /// <param name="revenue">Total revenue for this variation.</param>
        /// <param name="sessionCount">Total sessions for this variation.</param>
        /// <param name="trafficPercentage">Percentage of the traffic this variation is currently receiving.</param>
        /// <param name="url">Url of the variation if this experiment is a url experiment..</param>
        /// <param name="variationName">Name of the variation.</param>
        /// <param name="variationNumber">Variation number.</param>
        /// <param name="winner">True if this variation has been declared the winner.</param>
        public ExperimentVariation(int? addToCartCount = default(int?), int? averageDurationSeconds = default(int?), decimal? averageObjectivePerSession = default(decimal?), decimal? averageOrderValue = default(decimal?), int? bounceCount = default(int?), decimal? conversionRate = default(decimal?), List<ExperimentVariationStat> dailyStatistics = default(List<ExperimentVariationStat>), long? durationSecondsSum = default(long?), int? eventCount = default(int?), int? initiateCheckoutCount = default(int?), int? orderCount = default(int?), int? orderItemCount = default(int?), decimal? originalTrafficPercentage = default(decimal?), int? pageViewCount = default(int?), decimal? revenue = default(decimal?), int? sessionCount = default(int?), decimal? trafficPercentage = default(decimal?), string url = default(string), string variationName = default(string), int? variationNumber = default(int?), bool? winner = default(bool?))
        {
            this.AddToCartCount = addToCartCount;
            this.AverageDurationSeconds = averageDurationSeconds;
            this.AverageObjectivePerSession = averageObjectivePerSession;
            this.AverageOrderValue = averageOrderValue;
            this.BounceCount = bounceCount;
            this.ConversionRate = conversionRate;
            this.DailyStatistics = dailyStatistics;
            this.DurationSecondsSum = durationSecondsSum;
            this.EventCount = eventCount;
            this.InitiateCheckoutCount = initiateCheckoutCount;
            this.OrderCount = orderCount;
            this.OrderItemCount = orderItemCount;
            this.OriginalTrafficPercentage = originalTrafficPercentage;
            this.PageViewCount = pageViewCount;
            this.Revenue = revenue;
            this.SessionCount = sessionCount;
            this.TrafficPercentage = trafficPercentage;
            this.Url = url;
            this.VariationName = variationName;
            this.VariationNumber = variationNumber;
            this.Winner = winner;
        }
        
        /// <summary>
        /// Total add to cart count for this variation
        /// </summary>
        /// <value>Total add to cart count for this variation</value>
        [DataMember(Name="add_to_cart_count", EmitDefaultValue=false)]
        public int? AddToCartCount { get; set; }

        /// <summary>
        /// Average duration seconds per session for this variation
        /// </summary>
        /// <value>Average duration seconds per session for this variation</value>
        [DataMember(Name="average_duration_seconds", EmitDefaultValue=false)]
        public int? AverageDurationSeconds { get; set; }

        /// <summary>
        /// Average objective value per session for this variation
        /// </summary>
        /// <value>Average objective value per session for this variation</value>
        [DataMember(Name="average_objective_per_session", EmitDefaultValue=false)]
        public decimal? AverageObjectivePerSession { get; set; }

        /// <summary>
        /// Average order value for this variation
        /// </summary>
        /// <value>Average order value for this variation</value>
        [DataMember(Name="average_order_value", EmitDefaultValue=false)]
        public decimal? AverageOrderValue { get; set; }

        /// <summary>
        /// Total bounce count for this variation
        /// </summary>
        /// <value>Total bounce count for this variation</value>
        [DataMember(Name="bounce_count", EmitDefaultValue=false)]
        public int? BounceCount { get; set; }

        /// <summary>
        /// Conversion rate for this variation
        /// </summary>
        /// <value>Conversion rate for this variation</value>
        [DataMember(Name="conversion_rate", EmitDefaultValue=false)]
        public decimal? ConversionRate { get; set; }

        /// <summary>
        /// Array of daily statistics for this variation
        /// </summary>
        /// <value>Array of daily statistics for this variation</value>
        [DataMember(Name="daily_statistics", EmitDefaultValue=false)]
        public List<ExperimentVariationStat> DailyStatistics { get; set; }

        /// <summary>
        /// Total number of seconds spent on the site for this variation
        /// </summary>
        /// <value>Total number of seconds spent on the site for this variation</value>
        [DataMember(Name="duration_seconds_sum", EmitDefaultValue=false)]
        public long? DurationSecondsSum { get; set; }

        /// <summary>
        /// Total event ocunt for this variation
        /// </summary>
        /// <value>Total event ocunt for this variation</value>
        [DataMember(Name="event_count", EmitDefaultValue=false)]
        public int? EventCount { get; set; }

        /// <summary>
        /// Total initiate checkout count for this variation
        /// </summary>
        /// <value>Total initiate checkout count for this variation</value>
        [DataMember(Name="initiate_checkout_count", EmitDefaultValue=false)]
        public int? InitiateCheckoutCount { get; set; }

        /// <summary>
        /// Total order count for this variation
        /// </summary>
        /// <value>Total order count for this variation</value>
        [DataMember(Name="order_count", EmitDefaultValue=false)]
        public int? OrderCount { get; set; }

        /// <summary>
        /// Total order item count for this variation
        /// </summary>
        /// <value>Total order item count for this variation</value>
        [DataMember(Name="order_item_count", EmitDefaultValue=false)]
        public int? OrderItemCount { get; set; }

        /// <summary>
        /// Percentage of the traffic the variation originally started out with
        /// </summary>
        /// <value>Percentage of the traffic the variation originally started out with</value>
        [DataMember(Name="original_traffic_percentage", EmitDefaultValue=false)]
        public decimal? OriginalTrafficPercentage { get; set; }

        /// <summary>
        /// Total page view count for this variation
        /// </summary>
        /// <value>Total page view count for this variation</value>
        [DataMember(Name="page_view_count", EmitDefaultValue=false)]
        public int? PageViewCount { get; set; }

        /// <summary>
        /// Total revenue for this variation
        /// </summary>
        /// <value>Total revenue for this variation</value>
        [DataMember(Name="revenue", EmitDefaultValue=false)]
        public decimal? Revenue { get; set; }

        /// <summary>
        /// Total sessions for this variation
        /// </summary>
        /// <value>Total sessions for this variation</value>
        [DataMember(Name="session_count", EmitDefaultValue=false)]
        public int? SessionCount { get; set; }

        /// <summary>
        /// Percentage of the traffic this variation is currently receiving
        /// </summary>
        /// <value>Percentage of the traffic this variation is currently receiving</value>
        [DataMember(Name="traffic_percentage", EmitDefaultValue=false)]
        public decimal? TrafficPercentage { get; set; }

        /// <summary>
        /// Url of the variation if this experiment is a url experiment.
        /// </summary>
        /// <value>Url of the variation if this experiment is a url experiment.</value>
        [DataMember(Name="url", EmitDefaultValue=false)]
        public string Url { get; set; }

        /// <summary>
        /// Name of the variation
        /// </summary>
        /// <value>Name of the variation</value>
        [DataMember(Name="variation_name", EmitDefaultValue=false)]
        public string VariationName { get; set; }

        /// <summary>
        /// Variation number
        /// </summary>
        /// <value>Variation number</value>
        [DataMember(Name="variation_number", EmitDefaultValue=false)]
        public int? VariationNumber { get; set; }

        /// <summary>
        /// True if this variation has been declared the winner
        /// </summary>
        /// <value>True if this variation has been declared the winner</value>
        [DataMember(Name="winner", EmitDefaultValue=false)]
        public bool? Winner { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ExperimentVariation {\n");
            sb.Append("  AddToCartCount: ").Append(AddToCartCount).Append("\n");
            sb.Append("  AverageDurationSeconds: ").Append(AverageDurationSeconds).Append("\n");
            sb.Append("  AverageObjectivePerSession: ").Append(AverageObjectivePerSession).Append("\n");
            sb.Append("  AverageOrderValue: ").Append(AverageOrderValue).Append("\n");
            sb.Append("  BounceCount: ").Append(BounceCount).Append("\n");
            sb.Append("  ConversionRate: ").Append(ConversionRate).Append("\n");
            sb.Append("  DailyStatistics: ").Append(DailyStatistics).Append("\n");
            sb.Append("  DurationSecondsSum: ").Append(DurationSecondsSum).Append("\n");
            sb.Append("  EventCount: ").Append(EventCount).Append("\n");
            sb.Append("  InitiateCheckoutCount: ").Append(InitiateCheckoutCount).Append("\n");
            sb.Append("  OrderCount: ").Append(OrderCount).Append("\n");
            sb.Append("  OrderItemCount: ").Append(OrderItemCount).Append("\n");
            sb.Append("  OriginalTrafficPercentage: ").Append(OriginalTrafficPercentage).Append("\n");
            sb.Append("  PageViewCount: ").Append(PageViewCount).Append("\n");
            sb.Append("  Revenue: ").Append(Revenue).Append("\n");
            sb.Append("  SessionCount: ").Append(SessionCount).Append("\n");
            sb.Append("  TrafficPercentage: ").Append(TrafficPercentage).Append("\n");
            sb.Append("  Url: ").Append(Url).Append("\n");
            sb.Append("  VariationName: ").Append(VariationName).Append("\n");
            sb.Append("  VariationNumber: ").Append(VariationNumber).Append("\n");
            sb.Append("  Winner: ").Append(Winner).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ExperimentVariation);
        }

        /// <summary>
        /// Returns true if ExperimentVariation instances are equal
        /// </summary>
        /// <param name="input">Instance of ExperimentVariation to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ExperimentVariation input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.AddToCartCount == input.AddToCartCount ||
                    (this.AddToCartCount != null &&
                    this.AddToCartCount.Equals(input.AddToCartCount))
                ) && 
                (
                    this.AverageDurationSeconds == input.AverageDurationSeconds ||
                    (this.AverageDurationSeconds != null &&
                    this.AverageDurationSeconds.Equals(input.AverageDurationSeconds))
                ) && 
                (
                    this.AverageObjectivePerSession == input.AverageObjectivePerSession ||
                    (this.AverageObjectivePerSession != null &&
                    this.AverageObjectivePerSession.Equals(input.AverageObjectivePerSession))
                ) && 
                (
                    this.AverageOrderValue == input.AverageOrderValue ||
                    (this.AverageOrderValue != null &&
                    this.AverageOrderValue.Equals(input.AverageOrderValue))
                ) && 
                (
                    this.BounceCount == input.BounceCount ||
                    (this.BounceCount != null &&
                    this.BounceCount.Equals(input.BounceCount))
                ) && 
                (
                    this.ConversionRate == input.ConversionRate ||
                    (this.ConversionRate != null &&
                    this.ConversionRate.Equals(input.ConversionRate))
                ) && 
                (
                    this.DailyStatistics == input.DailyStatistics ||
                    this.DailyStatistics != null &&
                    this.DailyStatistics.SequenceEqual(input.DailyStatistics)
                ) && 
                (
                    this.DurationSecondsSum == input.DurationSecondsSum ||
                    (this.DurationSecondsSum != null &&
                    this.DurationSecondsSum.Equals(input.DurationSecondsSum))
                ) && 
                (
                    this.EventCount == input.EventCount ||
                    (this.EventCount != null &&
                    this.EventCount.Equals(input.EventCount))
                ) && 
                (
                    this.InitiateCheckoutCount == input.InitiateCheckoutCount ||
                    (this.InitiateCheckoutCount != null &&
                    this.InitiateCheckoutCount.Equals(input.InitiateCheckoutCount))
                ) && 
                (
                    this.OrderCount == input.OrderCount ||
                    (this.OrderCount != null &&
                    this.OrderCount.Equals(input.OrderCount))
                ) && 
                (
                    this.OrderItemCount == input.OrderItemCount ||
                    (this.OrderItemCount != null &&
                    this.OrderItemCount.Equals(input.OrderItemCount))
                ) && 
                (
                    this.OriginalTrafficPercentage == input.OriginalTrafficPercentage ||
                    (this.OriginalTrafficPercentage != null &&
                    this.OriginalTrafficPercentage.Equals(input.OriginalTrafficPercentage))
                ) && 
                (
                    this.PageViewCount == input.PageViewCount ||
                    (this.PageViewCount != null &&
                    this.PageViewCount.Equals(input.PageViewCount))
                ) && 
                (
                    this.Revenue == input.Revenue ||
                    (this.Revenue != null &&
                    this.Revenue.Equals(input.Revenue))
                ) && 
                (
                    this.SessionCount == input.SessionCount ||
                    (this.SessionCount != null &&
                    this.SessionCount.Equals(input.SessionCount))
                ) && 
                (
                    this.TrafficPercentage == input.TrafficPercentage ||
                    (this.TrafficPercentage != null &&
                    this.TrafficPercentage.Equals(input.TrafficPercentage))
                ) && 
                (
                    this.Url == input.Url ||
                    (this.Url != null &&
                    this.Url.Equals(input.Url))
                ) && 
                (
                    this.VariationName == input.VariationName ||
                    (this.VariationName != null &&
                    this.VariationName.Equals(input.VariationName))
                ) && 
                (
                    this.VariationNumber == input.VariationNumber ||
                    (this.VariationNumber != null &&
                    this.VariationNumber.Equals(input.VariationNumber))
                ) && 
                (
                    this.Winner == input.Winner ||
                    (this.Winner != null &&
                    this.Winner.Equals(input.Winner))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AddToCartCount != null)
                    hashCode = hashCode * 59 + this.AddToCartCount.GetHashCode();
                if (this.AverageDurationSeconds != null)
                    hashCode = hashCode * 59 + this.AverageDurationSeconds.GetHashCode();
                if (this.AverageObjectivePerSession != null)
                    hashCode = hashCode * 59 + this.AverageObjectivePerSession.GetHashCode();
                if (this.AverageOrderValue != null)
                    hashCode = hashCode * 59 + this.AverageOrderValue.GetHashCode();
                if (this.BounceCount != null)
                    hashCode = hashCode * 59 + this.BounceCount.GetHashCode();
                if (this.ConversionRate != null)
                    hashCode = hashCode * 59 + this.ConversionRate.GetHashCode();
                if (this.DailyStatistics != null)
                    hashCode = hashCode * 59 + this.DailyStatistics.GetHashCode();
                if (this.DurationSecondsSum != null)
                    hashCode = hashCode * 59 + this.DurationSecondsSum.GetHashCode();
                if (this.EventCount != null)
                    hashCode = hashCode * 59 + this.EventCount.GetHashCode();
                if (this.InitiateCheckoutCount != null)
                    hashCode = hashCode * 59 + this.InitiateCheckoutCount.GetHashCode();
                if (this.OrderCount != null)
                    hashCode = hashCode * 59 + this.OrderCount.GetHashCode();
                if (this.OrderItemCount != null)
                    hashCode = hashCode * 59 + this.OrderItemCount.GetHashCode();
                if (this.OriginalTrafficPercentage != null)
                    hashCode = hashCode * 59 + this.OriginalTrafficPercentage.GetHashCode();
                if (this.PageViewCount != null)
                    hashCode = hashCode * 59 + this.PageViewCount.GetHashCode();
                if (this.Revenue != null)
                    hashCode = hashCode * 59 + this.Revenue.GetHashCode();
                if (this.SessionCount != null)
                    hashCode = hashCode * 59 + this.SessionCount.GetHashCode();
                if (this.TrafficPercentage != null)
                    hashCode = hashCode * 59 + this.TrafficPercentage.GetHashCode();
                if (this.Url != null)
                    hashCode = hashCode * 59 + this.Url.GetHashCode();
                if (this.VariationName != null)
                    hashCode = hashCode * 59 + this.VariationName.GetHashCode();
                if (this.VariationNumber != null)
                    hashCode = hashCode * 59 + this.VariationNumber.GetHashCode();
                if (this.Winner != null)
                    hashCode = hashCode * 59 + this.Winner.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
