/* 
 * UltraCart Rest API V2
 *
 * UltraCart REST API Version 2
 *
 * OpenAPI spec version: 2.0.0
 * Contact: support@ultracart.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = com.ultracart.admin.v2.Client.SwaggerDateConverter;

namespace com.ultracart.admin.v2.Model
{
    /// <summary>
    /// ExperimentVariationStat
    /// </summary>
    [DataContract]
    public partial class ExperimentVariationStat :  IEquatable<ExperimentVariationStat>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ExperimentVariationStat" /> class.
        /// </summary>
        /// <param name="addToCartCount">Total add to cart count for this variation.</param>
        /// <param name="bounceCount">Total bounce count for this variation.</param>
        /// <param name="durationSecondsSum">Total number of seconds spent on the site for this variation.</param>
        /// <param name="eventCount">Total event count for this variation.</param>
        /// <param name="initiateCheckoutCount">Total initiate checkout count for this variation.</param>
        /// <param name="orderCount">Total order count for this variation.</param>
        /// <param name="orderItemCount">Total order item count for this variation.</param>
        /// <param name="pageViewCount">Total page view count for this variation.</param>
        /// <param name="revenue">Total revenue for this variation.</param>
        /// <param name="sessionCount">Total sessions for this variation.</param>
        /// <param name="statDts">Date/time that the statistic was created.</param>
        public ExperimentVariationStat(int? addToCartCount = default(int?), int? bounceCount = default(int?), long? durationSecondsSum = default(long?), int? eventCount = default(int?), int? initiateCheckoutCount = default(int?), int? orderCount = default(int?), int? orderItemCount = default(int?), int? pageViewCount = default(int?), decimal? revenue = default(decimal?), int? sessionCount = default(int?), string statDts = default(string))
        {
            this.AddToCartCount = addToCartCount;
            this.BounceCount = bounceCount;
            this.DurationSecondsSum = durationSecondsSum;
            this.EventCount = eventCount;
            this.InitiateCheckoutCount = initiateCheckoutCount;
            this.OrderCount = orderCount;
            this.OrderItemCount = orderItemCount;
            this.PageViewCount = pageViewCount;
            this.Revenue = revenue;
            this.SessionCount = sessionCount;
            this.StatDts = statDts;
        }
        
        /// <summary>
        /// Total add to cart count for this variation
        /// </summary>
        /// <value>Total add to cart count for this variation</value>
        [DataMember(Name="add_to_cart_count", EmitDefaultValue=false)]
        public int? AddToCartCount { get; set; }

        /// <summary>
        /// Total bounce count for this variation
        /// </summary>
        /// <value>Total bounce count for this variation</value>
        [DataMember(Name="bounce_count", EmitDefaultValue=false)]
        public int? BounceCount { get; set; }

        /// <summary>
        /// Total number of seconds spent on the site for this variation
        /// </summary>
        /// <value>Total number of seconds spent on the site for this variation</value>
        [DataMember(Name="duration_seconds_sum", EmitDefaultValue=false)]
        public long? DurationSecondsSum { get; set; }

        /// <summary>
        /// Total event count for this variation
        /// </summary>
        /// <value>Total event count for this variation</value>
        [DataMember(Name="event_count", EmitDefaultValue=false)]
        public int? EventCount { get; set; }

        /// <summary>
        /// Total initiate checkout count for this variation
        /// </summary>
        /// <value>Total initiate checkout count for this variation</value>
        [DataMember(Name="initiate_checkout_count", EmitDefaultValue=false)]
        public int? InitiateCheckoutCount { get; set; }

        /// <summary>
        /// Total order count for this variation
        /// </summary>
        /// <value>Total order count for this variation</value>
        [DataMember(Name="order_count", EmitDefaultValue=false)]
        public int? OrderCount { get; set; }

        /// <summary>
        /// Total order item count for this variation
        /// </summary>
        /// <value>Total order item count for this variation</value>
        [DataMember(Name="order_item_count", EmitDefaultValue=false)]
        public int? OrderItemCount { get; set; }

        /// <summary>
        /// Total page view count for this variation
        /// </summary>
        /// <value>Total page view count for this variation</value>
        [DataMember(Name="page_view_count", EmitDefaultValue=false)]
        public int? PageViewCount { get; set; }

        /// <summary>
        /// Total revenue for this variation
        /// </summary>
        /// <value>Total revenue for this variation</value>
        [DataMember(Name="revenue", EmitDefaultValue=false)]
        public decimal? Revenue { get; set; }

        /// <summary>
        /// Total sessions for this variation
        /// </summary>
        /// <value>Total sessions for this variation</value>
        [DataMember(Name="session_count", EmitDefaultValue=false)]
        public int? SessionCount { get; set; }

        /// <summary>
        /// Date/time that the statistic was created
        /// </summary>
        /// <value>Date/time that the statistic was created</value>
        [DataMember(Name="stat_dts", EmitDefaultValue=false)]
        public string StatDts { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ExperimentVariationStat {\n");
            sb.Append("  AddToCartCount: ").Append(AddToCartCount).Append("\n");
            sb.Append("  BounceCount: ").Append(BounceCount).Append("\n");
            sb.Append("  DurationSecondsSum: ").Append(DurationSecondsSum).Append("\n");
            sb.Append("  EventCount: ").Append(EventCount).Append("\n");
            sb.Append("  InitiateCheckoutCount: ").Append(InitiateCheckoutCount).Append("\n");
            sb.Append("  OrderCount: ").Append(OrderCount).Append("\n");
            sb.Append("  OrderItemCount: ").Append(OrderItemCount).Append("\n");
            sb.Append("  PageViewCount: ").Append(PageViewCount).Append("\n");
            sb.Append("  Revenue: ").Append(Revenue).Append("\n");
            sb.Append("  SessionCount: ").Append(SessionCount).Append("\n");
            sb.Append("  StatDts: ").Append(StatDts).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ExperimentVariationStat);
        }

        /// <summary>
        /// Returns true if ExperimentVariationStat instances are equal
        /// </summary>
        /// <param name="input">Instance of ExperimentVariationStat to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ExperimentVariationStat input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.AddToCartCount == input.AddToCartCount ||
                    (this.AddToCartCount != null &&
                    this.AddToCartCount.Equals(input.AddToCartCount))
                ) && 
                (
                    this.BounceCount == input.BounceCount ||
                    (this.BounceCount != null &&
                    this.BounceCount.Equals(input.BounceCount))
                ) && 
                (
                    this.DurationSecondsSum == input.DurationSecondsSum ||
                    (this.DurationSecondsSum != null &&
                    this.DurationSecondsSum.Equals(input.DurationSecondsSum))
                ) && 
                (
                    this.EventCount == input.EventCount ||
                    (this.EventCount != null &&
                    this.EventCount.Equals(input.EventCount))
                ) && 
                (
                    this.InitiateCheckoutCount == input.InitiateCheckoutCount ||
                    (this.InitiateCheckoutCount != null &&
                    this.InitiateCheckoutCount.Equals(input.InitiateCheckoutCount))
                ) && 
                (
                    this.OrderCount == input.OrderCount ||
                    (this.OrderCount != null &&
                    this.OrderCount.Equals(input.OrderCount))
                ) && 
                (
                    this.OrderItemCount == input.OrderItemCount ||
                    (this.OrderItemCount != null &&
                    this.OrderItemCount.Equals(input.OrderItemCount))
                ) && 
                (
                    this.PageViewCount == input.PageViewCount ||
                    (this.PageViewCount != null &&
                    this.PageViewCount.Equals(input.PageViewCount))
                ) && 
                (
                    this.Revenue == input.Revenue ||
                    (this.Revenue != null &&
                    this.Revenue.Equals(input.Revenue))
                ) && 
                (
                    this.SessionCount == input.SessionCount ||
                    (this.SessionCount != null &&
                    this.SessionCount.Equals(input.SessionCount))
                ) && 
                (
                    this.StatDts == input.StatDts ||
                    (this.StatDts != null &&
                    this.StatDts.Equals(input.StatDts))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AddToCartCount != null)
                    hashCode = hashCode * 59 + this.AddToCartCount.GetHashCode();
                if (this.BounceCount != null)
                    hashCode = hashCode * 59 + this.BounceCount.GetHashCode();
                if (this.DurationSecondsSum != null)
                    hashCode = hashCode * 59 + this.DurationSecondsSum.GetHashCode();
                if (this.EventCount != null)
                    hashCode = hashCode * 59 + this.EventCount.GetHashCode();
                if (this.InitiateCheckoutCount != null)
                    hashCode = hashCode * 59 + this.InitiateCheckoutCount.GetHashCode();
                if (this.OrderCount != null)
                    hashCode = hashCode * 59 + this.OrderCount.GetHashCode();
                if (this.OrderItemCount != null)
                    hashCode = hashCode * 59 + this.OrderItemCount.GetHashCode();
                if (this.PageViewCount != null)
                    hashCode = hashCode * 59 + this.PageViewCount.GetHashCode();
                if (this.Revenue != null)
                    hashCode = hashCode * 59 + this.Revenue.GetHashCode();
                if (this.SessionCount != null)
                    hashCode = hashCode * 59 + this.SessionCount.GetHashCode();
                if (this.StatDts != null)
                    hashCode = hashCode * 59 + this.StatDts.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
