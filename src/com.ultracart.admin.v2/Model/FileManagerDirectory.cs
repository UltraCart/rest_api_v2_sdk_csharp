/*
 * UltraCart Rest API V2
 *
 * UltraCart REST API Version 2
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@ultracart.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = com.ultracart.admin.v2.Client.OpenAPIDateConverter;

namespace com.ultracart.admin.v2.Model
{
    /// <summary>
    /// FileManagerDirectory
    /// </summary>
    [DataContract]
    public partial class FileManagerDirectory :  IEquatable<FileManagerDirectory>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="FileManagerDirectory" /> class.
        /// </summary>
        /// <param name="activeThemeDirectory">activeThemeDirectory.</param>
        /// <param name="favorite">favorite.</param>
        /// <param name="hostname">hostname.</param>
        /// <param name="icon">icon.</param>
        /// <param name="lastModified">lastModified.</param>
        /// <param name="name">name.</param>
        /// <param name="parentStorefrontFsDirectoryOid">parentStorefrontFsDirectoryOid.</param>
        /// <param name="partOfActiveTheme">partOfActiveTheme.</param>
        /// <param name="selected">selected.</param>
        /// <param name="storefrontFsDirectoryOid">storefrontFsDirectoryOid.</param>
        /// <param name="storefrontFsFileOid">storefrontFsFileOid.</param>
        /// <param name="storefrontOid">storefrontOid.</param>
        /// <param name="type">type.</param>
        public FileManagerDirectory(bool activeThemeDirectory = default(bool), bool favorite = default(bool), string hostname = default(string), string icon = default(string), string lastModified = default(string), string name = default(string), int parentStorefrontFsDirectoryOid = default(int), bool partOfActiveTheme = default(bool), bool selected = default(bool), int storefrontFsDirectoryOid = default(int), int storefrontFsFileOid = default(int), int storefrontOid = default(int), string type = default(string))
        {
            this.ActiveThemeDirectory = activeThemeDirectory;
            this.Favorite = favorite;
            this.Hostname = hostname;
            this.Icon = icon;
            this.LastModified = lastModified;
            this.Name = name;
            this.ParentStorefrontFsDirectoryOid = parentStorefrontFsDirectoryOid;
            this.PartOfActiveTheme = partOfActiveTheme;
            this.Selected = selected;
            this.StorefrontFsDirectoryOid = storefrontFsDirectoryOid;
            this.StorefrontFsFileOid = storefrontFsFileOid;
            this.StorefrontOid = storefrontOid;
            this.Type = type;
        }

        /// <summary>
        /// Gets or Sets ActiveThemeDirectory
        /// </summary>
        [DataMember(Name="active_theme_directory", EmitDefaultValue=false)]
        public bool ActiveThemeDirectory { get; set; }

        /// <summary>
        /// Gets or Sets Favorite
        /// </summary>
        [DataMember(Name="favorite", EmitDefaultValue=false)]
        public bool Favorite { get; set; }

        /// <summary>
        /// Gets or Sets Hostname
        /// </summary>
        [DataMember(Name="hostname", EmitDefaultValue=false)]
        public string Hostname { get; set; }

        /// <summary>
        /// Gets or Sets Icon
        /// </summary>
        [DataMember(Name="icon", EmitDefaultValue=false)]
        public string Icon { get; set; }

        /// <summary>
        /// Gets or Sets LastModified
        /// </summary>
        [DataMember(Name="last_modified", EmitDefaultValue=false)]
        public string LastModified { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets ParentStorefrontFsDirectoryOid
        /// </summary>
        [DataMember(Name="parent_storefront_fs_directory_oid", EmitDefaultValue=false)]
        public int ParentStorefrontFsDirectoryOid { get; set; }

        /// <summary>
        /// Gets or Sets PartOfActiveTheme
        /// </summary>
        [DataMember(Name="part_of_active_theme", EmitDefaultValue=false)]
        public bool PartOfActiveTheme { get; set; }

        /// <summary>
        /// Gets or Sets Selected
        /// </summary>
        [DataMember(Name="selected", EmitDefaultValue=false)]
        public bool Selected { get; set; }

        /// <summary>
        /// Gets or Sets StorefrontFsDirectoryOid
        /// </summary>
        [DataMember(Name="storefront_fs_directory_oid", EmitDefaultValue=false)]
        public int StorefrontFsDirectoryOid { get; set; }

        /// <summary>
        /// Gets or Sets StorefrontFsFileOid
        /// </summary>
        [DataMember(Name="storefront_fs_file_oid", EmitDefaultValue=false)]
        public int StorefrontFsFileOid { get; set; }

        /// <summary>
        /// Gets or Sets StorefrontOid
        /// </summary>
        [DataMember(Name="storefront_oid", EmitDefaultValue=false)]
        public int StorefrontOid { get; set; }

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public string Type { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class FileManagerDirectory {\n");
            sb.Append("  ActiveThemeDirectory: ").Append(ActiveThemeDirectory).Append("\n");
            sb.Append("  Favorite: ").Append(Favorite).Append("\n");
            sb.Append("  Hostname: ").Append(Hostname).Append("\n");
            sb.Append("  Icon: ").Append(Icon).Append("\n");
            sb.Append("  LastModified: ").Append(LastModified).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  ParentStorefrontFsDirectoryOid: ").Append(ParentStorefrontFsDirectoryOid).Append("\n");
            sb.Append("  PartOfActiveTheme: ").Append(PartOfActiveTheme).Append("\n");
            sb.Append("  Selected: ").Append(Selected).Append("\n");
            sb.Append("  StorefrontFsDirectoryOid: ").Append(StorefrontFsDirectoryOid).Append("\n");
            sb.Append("  StorefrontFsFileOid: ").Append(StorefrontFsFileOid).Append("\n");
            sb.Append("  StorefrontOid: ").Append(StorefrontOid).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as FileManagerDirectory);
        }

        /// <summary>
        /// Returns true if FileManagerDirectory instances are equal
        /// </summary>
        /// <param name="input">Instance of FileManagerDirectory to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FileManagerDirectory input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ActiveThemeDirectory == input.ActiveThemeDirectory ||
                    (this.ActiveThemeDirectory != null &&
                    this.ActiveThemeDirectory.Equals(input.ActiveThemeDirectory))
                ) && 
                (
                    this.Favorite == input.Favorite ||
                    (this.Favorite != null &&
                    this.Favorite.Equals(input.Favorite))
                ) && 
                (
                    this.Hostname == input.Hostname ||
                    (this.Hostname != null &&
                    this.Hostname.Equals(input.Hostname))
                ) && 
                (
                    this.Icon == input.Icon ||
                    (this.Icon != null &&
                    this.Icon.Equals(input.Icon))
                ) && 
                (
                    this.LastModified == input.LastModified ||
                    (this.LastModified != null &&
                    this.LastModified.Equals(input.LastModified))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.ParentStorefrontFsDirectoryOid == input.ParentStorefrontFsDirectoryOid ||
                    (this.ParentStorefrontFsDirectoryOid != null &&
                    this.ParentStorefrontFsDirectoryOid.Equals(input.ParentStorefrontFsDirectoryOid))
                ) && 
                (
                    this.PartOfActiveTheme == input.PartOfActiveTheme ||
                    (this.PartOfActiveTheme != null &&
                    this.PartOfActiveTheme.Equals(input.PartOfActiveTheme))
                ) && 
                (
                    this.Selected == input.Selected ||
                    (this.Selected != null &&
                    this.Selected.Equals(input.Selected))
                ) && 
                (
                    this.StorefrontFsDirectoryOid == input.StorefrontFsDirectoryOid ||
                    (this.StorefrontFsDirectoryOid != null &&
                    this.StorefrontFsDirectoryOid.Equals(input.StorefrontFsDirectoryOid))
                ) && 
                (
                    this.StorefrontFsFileOid == input.StorefrontFsFileOid ||
                    (this.StorefrontFsFileOid != null &&
                    this.StorefrontFsFileOid.Equals(input.StorefrontFsFileOid))
                ) && 
                (
                    this.StorefrontOid == input.StorefrontOid ||
                    (this.StorefrontOid != null &&
                    this.StorefrontOid.Equals(input.StorefrontOid))
                ) && 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ActiveThemeDirectory != null)
                    hashCode = hashCode * 59 + this.ActiveThemeDirectory.GetHashCode();
                if (this.Favorite != null)
                    hashCode = hashCode * 59 + this.Favorite.GetHashCode();
                if (this.Hostname != null)
                    hashCode = hashCode * 59 + this.Hostname.GetHashCode();
                if (this.Icon != null)
                    hashCode = hashCode * 59 + this.Icon.GetHashCode();
                if (this.LastModified != null)
                    hashCode = hashCode * 59 + this.LastModified.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.ParentStorefrontFsDirectoryOid != null)
                    hashCode = hashCode * 59 + this.ParentStorefrontFsDirectoryOid.GetHashCode();
                if (this.PartOfActiveTheme != null)
                    hashCode = hashCode * 59 + this.PartOfActiveTheme.GetHashCode();
                if (this.Selected != null)
                    hashCode = hashCode * 59 + this.Selected.GetHashCode();
                if (this.StorefrontFsDirectoryOid != null)
                    hashCode = hashCode * 59 + this.StorefrontFsDirectoryOid.GetHashCode();
                if (this.StorefrontFsFileOid != null)
                    hashCode = hashCode * 59 + this.StorefrontFsFileOid.GetHashCode();
                if (this.StorefrontOid != null)
                    hashCode = hashCode * 59 + this.StorefrontOid.GetHashCode();
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
