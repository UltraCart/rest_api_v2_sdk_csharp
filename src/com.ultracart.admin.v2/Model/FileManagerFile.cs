/* 
 * UltraCart Rest API V2
 *
 * UltraCart REST API Version 2
 *
 * OpenAPI spec version: 2.0.0
 * Contact: support@ultracart.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = com.ultracart.admin.v2.Client.SwaggerDateConverter;

namespace com.ultracart.admin.v2.Model
{
    /// <summary>
    /// FileManagerFile
    /// </summary>
    [DataContract]
    public partial class FileManagerFile :  IEquatable<FileManagerFile>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="FileManagerFile" /> class.
        /// </summary>
        /// <param name="favorite">favorite.</param>
        /// <param name="hostname">hostname.</param>
        /// <param name="i18nViolation">i18nViolation.</param>
        /// <param name="icon">icon.</param>
        /// <param name="internalVersion">internalVersion.</param>
        /// <param name="lastModified">lastModified.</param>
        /// <param name="mergeConflict">mergeConflict.</param>
        /// <param name="name">name.</param>
        /// <param name="parentStorefrontFsDirectoryOid">parentStorefrontFsDirectoryOid.</param>
        /// <param name="partOfActiveTheme">partOfActiveTheme.</param>
        /// <param name="path">path.</param>
        /// <param name="rawSize">rawSize.</param>
        /// <param name="selected">selected.</param>
        /// <param name="size">size.</param>
        /// <param name="storefrontFsDirectoryOid">storefrontFsDirectoryOid.</param>
        /// <param name="storefrontFsFileOid">storefrontFsFileOid.</param>
        /// <param name="storefrontOid">storefrontOid.</param>
        /// <param name="type">type.</param>
        /// <param name="validVelocity">validVelocity.</param>
        public FileManagerFile(bool? favorite = default(bool?), string hostname = default(string), bool? i18nViolation = default(bool?), string icon = default(string), int? internalVersion = default(int?), string lastModified = default(string), bool? mergeConflict = default(bool?), string name = default(string), int? parentStorefrontFsDirectoryOid = default(int?), bool? partOfActiveTheme = default(bool?), string path = default(string), int? rawSize = default(int?), bool? selected = default(bool?), string size = default(string), int? storefrontFsDirectoryOid = default(int?), int? storefrontFsFileOid = default(int?), int? storefrontOid = default(int?), string type = default(string), string validVelocity = default(string))
        {
            this.Favorite = favorite;
            this.Hostname = hostname;
            this.I18nViolation = i18nViolation;
            this.Icon = icon;
            this.InternalVersion = internalVersion;
            this.LastModified = lastModified;
            this.MergeConflict = mergeConflict;
            this.Name = name;
            this.ParentStorefrontFsDirectoryOid = parentStorefrontFsDirectoryOid;
            this.PartOfActiveTheme = partOfActiveTheme;
            this.Path = path;
            this.RawSize = rawSize;
            this.Selected = selected;
            this.Size = size;
            this.StorefrontFsDirectoryOid = storefrontFsDirectoryOid;
            this.StorefrontFsFileOid = storefrontFsFileOid;
            this.StorefrontOid = storefrontOid;
            this.Type = type;
            this.ValidVelocity = validVelocity;
        }
        
        /// <summary>
        /// Gets or Sets Favorite
        /// </summary>
        [DataMember(Name="favorite", EmitDefaultValue=false)]
        public bool? Favorite { get; set; }

        /// <summary>
        /// Gets or Sets Hostname
        /// </summary>
        [DataMember(Name="hostname", EmitDefaultValue=false)]
        public string Hostname { get; set; }

        /// <summary>
        /// Gets or Sets I18nViolation
        /// </summary>
        [DataMember(Name="i18n_violation", EmitDefaultValue=false)]
        public bool? I18nViolation { get; set; }

        /// <summary>
        /// Gets or Sets Icon
        /// </summary>
        [DataMember(Name="icon", EmitDefaultValue=false)]
        public string Icon { get; set; }

        /// <summary>
        /// Gets or Sets InternalVersion
        /// </summary>
        [DataMember(Name="internal_version", EmitDefaultValue=false)]
        public int? InternalVersion { get; set; }

        /// <summary>
        /// Gets or Sets LastModified
        /// </summary>
        [DataMember(Name="last_modified", EmitDefaultValue=false)]
        public string LastModified { get; set; }

        /// <summary>
        /// Gets or Sets MergeConflict
        /// </summary>
        [DataMember(Name="merge_conflict", EmitDefaultValue=false)]
        public bool? MergeConflict { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets ParentStorefrontFsDirectoryOid
        /// </summary>
        [DataMember(Name="parent_storefront_fs_directory_oid", EmitDefaultValue=false)]
        public int? ParentStorefrontFsDirectoryOid { get; set; }

        /// <summary>
        /// Gets or Sets PartOfActiveTheme
        /// </summary>
        [DataMember(Name="part_of_active_theme", EmitDefaultValue=false)]
        public bool? PartOfActiveTheme { get; set; }

        /// <summary>
        /// Gets or Sets Path
        /// </summary>
        [DataMember(Name="path", EmitDefaultValue=false)]
        public string Path { get; set; }

        /// <summary>
        /// Gets or Sets RawSize
        /// </summary>
        [DataMember(Name="raw_size", EmitDefaultValue=false)]
        public int? RawSize { get; set; }

        /// <summary>
        /// Gets or Sets Selected
        /// </summary>
        [DataMember(Name="selected", EmitDefaultValue=false)]
        public bool? Selected { get; set; }

        /// <summary>
        /// Gets or Sets Size
        /// </summary>
        [DataMember(Name="size", EmitDefaultValue=false)]
        public string Size { get; set; }

        /// <summary>
        /// Gets or Sets StorefrontFsDirectoryOid
        /// </summary>
        [DataMember(Name="storefront_fs_directory_oid", EmitDefaultValue=false)]
        public int? StorefrontFsDirectoryOid { get; set; }

        /// <summary>
        /// Gets or Sets StorefrontFsFileOid
        /// </summary>
        [DataMember(Name="storefront_fs_file_oid", EmitDefaultValue=false)]
        public int? StorefrontFsFileOid { get; set; }

        /// <summary>
        /// Gets or Sets StorefrontOid
        /// </summary>
        [DataMember(Name="storefront_oid", EmitDefaultValue=false)]
        public int? StorefrontOid { get; set; }

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public string Type { get; set; }

        /// <summary>
        /// Gets or Sets ValidVelocity
        /// </summary>
        [DataMember(Name="valid_velocity", EmitDefaultValue=false)]
        public string ValidVelocity { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class FileManagerFile {\n");
            sb.Append("  Favorite: ").Append(Favorite).Append("\n");
            sb.Append("  Hostname: ").Append(Hostname).Append("\n");
            sb.Append("  I18nViolation: ").Append(I18nViolation).Append("\n");
            sb.Append("  Icon: ").Append(Icon).Append("\n");
            sb.Append("  InternalVersion: ").Append(InternalVersion).Append("\n");
            sb.Append("  LastModified: ").Append(LastModified).Append("\n");
            sb.Append("  MergeConflict: ").Append(MergeConflict).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  ParentStorefrontFsDirectoryOid: ").Append(ParentStorefrontFsDirectoryOid).Append("\n");
            sb.Append("  PartOfActiveTheme: ").Append(PartOfActiveTheme).Append("\n");
            sb.Append("  Path: ").Append(Path).Append("\n");
            sb.Append("  RawSize: ").Append(RawSize).Append("\n");
            sb.Append("  Selected: ").Append(Selected).Append("\n");
            sb.Append("  Size: ").Append(Size).Append("\n");
            sb.Append("  StorefrontFsDirectoryOid: ").Append(StorefrontFsDirectoryOid).Append("\n");
            sb.Append("  StorefrontFsFileOid: ").Append(StorefrontFsFileOid).Append("\n");
            sb.Append("  StorefrontOid: ").Append(StorefrontOid).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  ValidVelocity: ").Append(ValidVelocity).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as FileManagerFile);
        }

        /// <summary>
        /// Returns true if FileManagerFile instances are equal
        /// </summary>
        /// <param name="input">Instance of FileManagerFile to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FileManagerFile input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Favorite == input.Favorite ||
                    (this.Favorite != null &&
                    this.Favorite.Equals(input.Favorite))
                ) && 
                (
                    this.Hostname == input.Hostname ||
                    (this.Hostname != null &&
                    this.Hostname.Equals(input.Hostname))
                ) && 
                (
                    this.I18nViolation == input.I18nViolation ||
                    (this.I18nViolation != null &&
                    this.I18nViolation.Equals(input.I18nViolation))
                ) && 
                (
                    this.Icon == input.Icon ||
                    (this.Icon != null &&
                    this.Icon.Equals(input.Icon))
                ) && 
                (
                    this.InternalVersion == input.InternalVersion ||
                    (this.InternalVersion != null &&
                    this.InternalVersion.Equals(input.InternalVersion))
                ) && 
                (
                    this.LastModified == input.LastModified ||
                    (this.LastModified != null &&
                    this.LastModified.Equals(input.LastModified))
                ) && 
                (
                    this.MergeConflict == input.MergeConflict ||
                    (this.MergeConflict != null &&
                    this.MergeConflict.Equals(input.MergeConflict))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.ParentStorefrontFsDirectoryOid == input.ParentStorefrontFsDirectoryOid ||
                    (this.ParentStorefrontFsDirectoryOid != null &&
                    this.ParentStorefrontFsDirectoryOid.Equals(input.ParentStorefrontFsDirectoryOid))
                ) && 
                (
                    this.PartOfActiveTheme == input.PartOfActiveTheme ||
                    (this.PartOfActiveTheme != null &&
                    this.PartOfActiveTheme.Equals(input.PartOfActiveTheme))
                ) && 
                (
                    this.Path == input.Path ||
                    (this.Path != null &&
                    this.Path.Equals(input.Path))
                ) && 
                (
                    this.RawSize == input.RawSize ||
                    (this.RawSize != null &&
                    this.RawSize.Equals(input.RawSize))
                ) && 
                (
                    this.Selected == input.Selected ||
                    (this.Selected != null &&
                    this.Selected.Equals(input.Selected))
                ) && 
                (
                    this.Size == input.Size ||
                    (this.Size != null &&
                    this.Size.Equals(input.Size))
                ) && 
                (
                    this.StorefrontFsDirectoryOid == input.StorefrontFsDirectoryOid ||
                    (this.StorefrontFsDirectoryOid != null &&
                    this.StorefrontFsDirectoryOid.Equals(input.StorefrontFsDirectoryOid))
                ) && 
                (
                    this.StorefrontFsFileOid == input.StorefrontFsFileOid ||
                    (this.StorefrontFsFileOid != null &&
                    this.StorefrontFsFileOid.Equals(input.StorefrontFsFileOid))
                ) && 
                (
                    this.StorefrontOid == input.StorefrontOid ||
                    (this.StorefrontOid != null &&
                    this.StorefrontOid.Equals(input.StorefrontOid))
                ) && 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.ValidVelocity == input.ValidVelocity ||
                    (this.ValidVelocity != null &&
                    this.ValidVelocity.Equals(input.ValidVelocity))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Favorite != null)
                    hashCode = hashCode * 59 + this.Favorite.GetHashCode();
                if (this.Hostname != null)
                    hashCode = hashCode * 59 + this.Hostname.GetHashCode();
                if (this.I18nViolation != null)
                    hashCode = hashCode * 59 + this.I18nViolation.GetHashCode();
                if (this.Icon != null)
                    hashCode = hashCode * 59 + this.Icon.GetHashCode();
                if (this.InternalVersion != null)
                    hashCode = hashCode * 59 + this.InternalVersion.GetHashCode();
                if (this.LastModified != null)
                    hashCode = hashCode * 59 + this.LastModified.GetHashCode();
                if (this.MergeConflict != null)
                    hashCode = hashCode * 59 + this.MergeConflict.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.ParentStorefrontFsDirectoryOid != null)
                    hashCode = hashCode * 59 + this.ParentStorefrontFsDirectoryOid.GetHashCode();
                if (this.PartOfActiveTheme != null)
                    hashCode = hashCode * 59 + this.PartOfActiveTheme.GetHashCode();
                if (this.Path != null)
                    hashCode = hashCode * 59 + this.Path.GetHashCode();
                if (this.RawSize != null)
                    hashCode = hashCode * 59 + this.RawSize.GetHashCode();
                if (this.Selected != null)
                    hashCode = hashCode * 59 + this.Selected.GetHashCode();
                if (this.Size != null)
                    hashCode = hashCode * 59 + this.Size.GetHashCode();
                if (this.StorefrontFsDirectoryOid != null)
                    hashCode = hashCode * 59 + this.StorefrontFsDirectoryOid.GetHashCode();
                if (this.StorefrontFsFileOid != null)
                    hashCode = hashCode * 59 + this.StorefrontFsFileOid.GetHashCode();
                if (this.StorefrontOid != null)
                    hashCode = hashCode * 59 + this.StorefrontOid.GetHashCode();
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.ValidVelocity != null)
                    hashCode = hashCode * 59 + this.ValidVelocity.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
