/* 
 * UltraCart Rest API V2
 *
 * UltraCart REST API Version 2
 *
 * OpenAPI spec version: 2.0.0
 * Contact: support@ultracart.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = com.ultracart.admin.v2.Client.SwaggerDateConverter;

namespace com.ultracart.admin.v2.Model
{
    /// <summary>
    /// FileManagerPage
    /// </summary>
    [DataContract]
    public partial class FileManagerPage :  IEquatable<FileManagerPage>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="FileManagerPage" /> class.
        /// </summary>
        /// <param name="currentStorefrontFsDirectoryOid">currentStorefrontFsDirectoryOid.</param>
        /// <param name="directories">directories.</param>
        /// <param name="files">files.</param>
        /// <param name="hostname">hostname.</param>
        /// <param name="parentStorefrontFsDirectoryOid">parentStorefrontFsDirectoryOid.</param>
        /// <param name="path">path.</param>
        /// <param name="pathList">pathList.</param>
        /// <param name="storefrontOid">storefrontOid.</param>
        public FileManagerPage(int? currentStorefrontFsDirectoryOid = default(int?), List<FileManagerDirectory> directories = default(List<FileManagerDirectory>), List<FileManagerFile> files = default(List<FileManagerFile>), string hostname = default(string), int? parentStorefrontFsDirectoryOid = default(int?), string path = default(string), List<FileManagerDirectory> pathList = default(List<FileManagerDirectory>), int? storefrontOid = default(int?))
        {
            this.CurrentStorefrontFsDirectoryOid = currentStorefrontFsDirectoryOid;
            this.Directories = directories;
            this.Files = files;
            this.Hostname = hostname;
            this.ParentStorefrontFsDirectoryOid = parentStorefrontFsDirectoryOid;
            this.Path = path;
            this.PathList = pathList;
            this.StorefrontOid = storefrontOid;
        }
        
        /// <summary>
        /// Gets or Sets CurrentStorefrontFsDirectoryOid
        /// </summary>
        [DataMember(Name="current_storefront_fs_directory_oid", EmitDefaultValue=false)]
        public int? CurrentStorefrontFsDirectoryOid { get; set; }

        /// <summary>
        /// Gets or Sets Directories
        /// </summary>
        [DataMember(Name="directories", EmitDefaultValue=false)]
        public List<FileManagerDirectory> Directories { get; set; }

        /// <summary>
        /// Gets or Sets Files
        /// </summary>
        [DataMember(Name="files", EmitDefaultValue=false)]
        public List<FileManagerFile> Files { get; set; }

        /// <summary>
        /// Gets or Sets Hostname
        /// </summary>
        [DataMember(Name="hostname", EmitDefaultValue=false)]
        public string Hostname { get; set; }

        /// <summary>
        /// Gets or Sets ParentStorefrontFsDirectoryOid
        /// </summary>
        [DataMember(Name="parent_storefront_fs_directory_oid", EmitDefaultValue=false)]
        public int? ParentStorefrontFsDirectoryOid { get; set; }

        /// <summary>
        /// Gets or Sets Path
        /// </summary>
        [DataMember(Name="path", EmitDefaultValue=false)]
        public string Path { get; set; }

        /// <summary>
        /// Gets or Sets PathList
        /// </summary>
        [DataMember(Name="path_list", EmitDefaultValue=false)]
        public List<FileManagerDirectory> PathList { get; set; }

        /// <summary>
        /// Gets or Sets StorefrontOid
        /// </summary>
        [DataMember(Name="storefront_oid", EmitDefaultValue=false)]
        public int? StorefrontOid { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class FileManagerPage {\n");
            sb.Append("  CurrentStorefrontFsDirectoryOid: ").Append(CurrentStorefrontFsDirectoryOid).Append("\n");
            sb.Append("  Directories: ").Append(Directories).Append("\n");
            sb.Append("  Files: ").Append(Files).Append("\n");
            sb.Append("  Hostname: ").Append(Hostname).Append("\n");
            sb.Append("  ParentStorefrontFsDirectoryOid: ").Append(ParentStorefrontFsDirectoryOid).Append("\n");
            sb.Append("  Path: ").Append(Path).Append("\n");
            sb.Append("  PathList: ").Append(PathList).Append("\n");
            sb.Append("  StorefrontOid: ").Append(StorefrontOid).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as FileManagerPage);
        }

        /// <summary>
        /// Returns true if FileManagerPage instances are equal
        /// </summary>
        /// <param name="input">Instance of FileManagerPage to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FileManagerPage input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.CurrentStorefrontFsDirectoryOid == input.CurrentStorefrontFsDirectoryOid ||
                    (this.CurrentStorefrontFsDirectoryOid != null &&
                    this.CurrentStorefrontFsDirectoryOid.Equals(input.CurrentStorefrontFsDirectoryOid))
                ) && 
                (
                    this.Directories == input.Directories ||
                    this.Directories != null &&
                    this.Directories.SequenceEqual(input.Directories)
                ) && 
                (
                    this.Files == input.Files ||
                    this.Files != null &&
                    this.Files.SequenceEqual(input.Files)
                ) && 
                (
                    this.Hostname == input.Hostname ||
                    (this.Hostname != null &&
                    this.Hostname.Equals(input.Hostname))
                ) && 
                (
                    this.ParentStorefrontFsDirectoryOid == input.ParentStorefrontFsDirectoryOid ||
                    (this.ParentStorefrontFsDirectoryOid != null &&
                    this.ParentStorefrontFsDirectoryOid.Equals(input.ParentStorefrontFsDirectoryOid))
                ) && 
                (
                    this.Path == input.Path ||
                    (this.Path != null &&
                    this.Path.Equals(input.Path))
                ) && 
                (
                    this.PathList == input.PathList ||
                    this.PathList != null &&
                    this.PathList.SequenceEqual(input.PathList)
                ) && 
                (
                    this.StorefrontOid == input.StorefrontOid ||
                    (this.StorefrontOid != null &&
                    this.StorefrontOid.Equals(input.StorefrontOid))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.CurrentStorefrontFsDirectoryOid != null)
                    hashCode = hashCode * 59 + this.CurrentStorefrontFsDirectoryOid.GetHashCode();
                if (this.Directories != null)
                    hashCode = hashCode * 59 + this.Directories.GetHashCode();
                if (this.Files != null)
                    hashCode = hashCode * 59 + this.Files.GetHashCode();
                if (this.Hostname != null)
                    hashCode = hashCode * 59 + this.Hostname.GetHashCode();
                if (this.ParentStorefrontFsDirectoryOid != null)
                    hashCode = hashCode * 59 + this.ParentStorefrontFsDirectoryOid.GetHashCode();
                if (this.Path != null)
                    hashCode = hashCode * 59 + this.Path.GetHashCode();
                if (this.PathList != null)
                    hashCode = hashCode * 59 + this.PathList.GetHashCode();
                if (this.StorefrontOid != null)
                    hashCode = hashCode * 59 + this.StorefrontOid.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
