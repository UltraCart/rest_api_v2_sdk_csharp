/* 
 * UltraCart Rest API V2
 *
 * UltraCart REST API Version 2
 *
 * OpenAPI spec version: 2.0.0
 * Contact: support@ultracart.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = com.ultracart.admin.v2.Client.SwaggerDateConverter;

namespace com.ultracart.admin.v2.Model
{
    /// <summary>
    /// GiftCertificate
    /// </summary>
    [DataContract]
    public partial class GiftCertificate :  IEquatable<GiftCertificate>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GiftCertificate" /> class.
        /// </summary>
        /// <param name="activated">True if this gift certificate is activated and ready to apply to purchases..</param>
        /// <param name="code">The code used by the customer to purchase against this gift certificate..</param>
        /// <param name="deleted">True if this gift certificate was deleted..</param>
        /// <param name="email">Email of the customer associated with this gift certificate..</param>
        /// <param name="expirationDts">Expiration date time..</param>
        /// <param name="giftCertificateOid">Gift certificate oid..</param>
        /// <param name="ledgerEntries">A list of all ledger activity for this gift certificate..</param>
        /// <param name="merchantId">Merchant Id.</param>
        /// <param name="merchantNote">A list of all ledger activity for this gift certificate..</param>
        /// <param name="originalBalance">Original balance of the gift certificate..</param>
        /// <param name="referenceOrderId">The order used to purchase this gift certificate.  This value is ONLY set during checkout when a certificate is purchased, not when it is used.  Any usage is recorded in the ledger.</param>
        /// <param name="remainingBalance">The remaining balance on the gift certificate.  This is never set directly, but calculated from the ledger.  To change the remaining balance, add a ledger entry..</param>
        public GiftCertificate(bool? activated = default(bool?), string code = default(string), bool? deleted = default(bool?), string email = default(string), string expirationDts = default(string), int? giftCertificateOid = default(int?), List<GiftCertificateLedgerEntry> ledgerEntries = default(List<GiftCertificateLedgerEntry>), string merchantId = default(string), string merchantNote = default(string), decimal? originalBalance = default(decimal?), string referenceOrderId = default(string), decimal? remainingBalance = default(decimal?))
        {
            this.Activated = activated;
            this.Code = code;
            this.Deleted = deleted;
            this.Email = email;
            this.ExpirationDts = expirationDts;
            this.GiftCertificateOid = giftCertificateOid;
            this.LedgerEntries = ledgerEntries;
            this.MerchantId = merchantId;
            this.MerchantNote = merchantNote;
            this.OriginalBalance = originalBalance;
            this.ReferenceOrderId = referenceOrderId;
            this.RemainingBalance = remainingBalance;
        }
        
        /// <summary>
        /// True if this gift certificate is activated and ready to apply to purchases.
        /// </summary>
        /// <value>True if this gift certificate is activated and ready to apply to purchases.</value>
        [DataMember(Name="activated", EmitDefaultValue=false)]
        public bool? Activated { get; set; }

        /// <summary>
        /// The code used by the customer to purchase against this gift certificate.
        /// </summary>
        /// <value>The code used by the customer to purchase against this gift certificate.</value>
        [DataMember(Name="code", EmitDefaultValue=false)]
        public string Code { get; set; }

        /// <summary>
        /// True if this gift certificate was deleted.
        /// </summary>
        /// <value>True if this gift certificate was deleted.</value>
        [DataMember(Name="deleted", EmitDefaultValue=false)]
        public bool? Deleted { get; set; }

        /// <summary>
        /// Email of the customer associated with this gift certificate.
        /// </summary>
        /// <value>Email of the customer associated with this gift certificate.</value>
        [DataMember(Name="email", EmitDefaultValue=false)]
        public string Email { get; set; }

        /// <summary>
        /// Expiration date time.
        /// </summary>
        /// <value>Expiration date time.</value>
        [DataMember(Name="expiration_dts", EmitDefaultValue=false)]
        public string ExpirationDts { get; set; }

        /// <summary>
        /// Gift certificate oid.
        /// </summary>
        /// <value>Gift certificate oid.</value>
        [DataMember(Name="gift_certificate_oid", EmitDefaultValue=false)]
        public int? GiftCertificateOid { get; set; }

        /// <summary>
        /// A list of all ledger activity for this gift certificate.
        /// </summary>
        /// <value>A list of all ledger activity for this gift certificate.</value>
        [DataMember(Name="ledger_entries", EmitDefaultValue=false)]
        public List<GiftCertificateLedgerEntry> LedgerEntries { get; set; }

        /// <summary>
        /// Merchant Id
        /// </summary>
        /// <value>Merchant Id</value>
        [DataMember(Name="merchant_id", EmitDefaultValue=false)]
        public string MerchantId { get; set; }

        /// <summary>
        /// A list of all ledger activity for this gift certificate.
        /// </summary>
        /// <value>A list of all ledger activity for this gift certificate.</value>
        [DataMember(Name="merchant_note", EmitDefaultValue=false)]
        public string MerchantNote { get; set; }

        /// <summary>
        /// Original balance of the gift certificate.
        /// </summary>
        /// <value>Original balance of the gift certificate.</value>
        [DataMember(Name="original_balance", EmitDefaultValue=false)]
        public decimal? OriginalBalance { get; set; }

        /// <summary>
        /// The order used to purchase this gift certificate.  This value is ONLY set during checkout when a certificate is purchased, not when it is used.  Any usage is recorded in the ledger
        /// </summary>
        /// <value>The order used to purchase this gift certificate.  This value is ONLY set during checkout when a certificate is purchased, not when it is used.  Any usage is recorded in the ledger</value>
        [DataMember(Name="reference_order_id", EmitDefaultValue=false)]
        public string ReferenceOrderId { get; set; }

        /// <summary>
        /// The remaining balance on the gift certificate.  This is never set directly, but calculated from the ledger.  To change the remaining balance, add a ledger entry.
        /// </summary>
        /// <value>The remaining balance on the gift certificate.  This is never set directly, but calculated from the ledger.  To change the remaining balance, add a ledger entry.</value>
        [DataMember(Name="remaining_balance", EmitDefaultValue=false)]
        public decimal? RemainingBalance { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class GiftCertificate {\n");
            sb.Append("  Activated: ").Append(Activated).Append("\n");
            sb.Append("  Code: ").Append(Code).Append("\n");
            sb.Append("  Deleted: ").Append(Deleted).Append("\n");
            sb.Append("  Email: ").Append(Email).Append("\n");
            sb.Append("  ExpirationDts: ").Append(ExpirationDts).Append("\n");
            sb.Append("  GiftCertificateOid: ").Append(GiftCertificateOid).Append("\n");
            sb.Append("  LedgerEntries: ").Append(LedgerEntries).Append("\n");
            sb.Append("  MerchantId: ").Append(MerchantId).Append("\n");
            sb.Append("  MerchantNote: ").Append(MerchantNote).Append("\n");
            sb.Append("  OriginalBalance: ").Append(OriginalBalance).Append("\n");
            sb.Append("  ReferenceOrderId: ").Append(ReferenceOrderId).Append("\n");
            sb.Append("  RemainingBalance: ").Append(RemainingBalance).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as GiftCertificate);
        }

        /// <summary>
        /// Returns true if GiftCertificate instances are equal
        /// </summary>
        /// <param name="input">Instance of GiftCertificate to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(GiftCertificate input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Activated == input.Activated ||
                    (this.Activated != null &&
                    this.Activated.Equals(input.Activated))
                ) && 
                (
                    this.Code == input.Code ||
                    (this.Code != null &&
                    this.Code.Equals(input.Code))
                ) && 
                (
                    this.Deleted == input.Deleted ||
                    (this.Deleted != null &&
                    this.Deleted.Equals(input.Deleted))
                ) && 
                (
                    this.Email == input.Email ||
                    (this.Email != null &&
                    this.Email.Equals(input.Email))
                ) && 
                (
                    this.ExpirationDts == input.ExpirationDts ||
                    (this.ExpirationDts != null &&
                    this.ExpirationDts.Equals(input.ExpirationDts))
                ) && 
                (
                    this.GiftCertificateOid == input.GiftCertificateOid ||
                    (this.GiftCertificateOid != null &&
                    this.GiftCertificateOid.Equals(input.GiftCertificateOid))
                ) && 
                (
                    this.LedgerEntries == input.LedgerEntries ||
                    this.LedgerEntries != null &&
                    this.LedgerEntries.SequenceEqual(input.LedgerEntries)
                ) && 
                (
                    this.MerchantId == input.MerchantId ||
                    (this.MerchantId != null &&
                    this.MerchantId.Equals(input.MerchantId))
                ) && 
                (
                    this.MerchantNote == input.MerchantNote ||
                    (this.MerchantNote != null &&
                    this.MerchantNote.Equals(input.MerchantNote))
                ) && 
                (
                    this.OriginalBalance == input.OriginalBalance ||
                    (this.OriginalBalance != null &&
                    this.OriginalBalance.Equals(input.OriginalBalance))
                ) && 
                (
                    this.ReferenceOrderId == input.ReferenceOrderId ||
                    (this.ReferenceOrderId != null &&
                    this.ReferenceOrderId.Equals(input.ReferenceOrderId))
                ) && 
                (
                    this.RemainingBalance == input.RemainingBalance ||
                    (this.RemainingBalance != null &&
                    this.RemainingBalance.Equals(input.RemainingBalance))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Activated != null)
                    hashCode = hashCode * 59 + this.Activated.GetHashCode();
                if (this.Code != null)
                    hashCode = hashCode * 59 + this.Code.GetHashCode();
                if (this.Deleted != null)
                    hashCode = hashCode * 59 + this.Deleted.GetHashCode();
                if (this.Email != null)
                    hashCode = hashCode * 59 + this.Email.GetHashCode();
                if (this.ExpirationDts != null)
                    hashCode = hashCode * 59 + this.ExpirationDts.GetHashCode();
                if (this.GiftCertificateOid != null)
                    hashCode = hashCode * 59 + this.GiftCertificateOid.GetHashCode();
                if (this.LedgerEntries != null)
                    hashCode = hashCode * 59 + this.LedgerEntries.GetHashCode();
                if (this.MerchantId != null)
                    hashCode = hashCode * 59 + this.MerchantId.GetHashCode();
                if (this.MerchantNote != null)
                    hashCode = hashCode * 59 + this.MerchantNote.GetHashCode();
                if (this.OriginalBalance != null)
                    hashCode = hashCode * 59 + this.OriginalBalance.GetHashCode();
                if (this.ReferenceOrderId != null)
                    hashCode = hashCode * 59 + this.ReferenceOrderId.GetHashCode();
                if (this.RemainingBalance != null)
                    hashCode = hashCode * 59 + this.RemainingBalance.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
