/*
 * UltraCart Rest API V2
 *
 * UltraCart REST API Version 2
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@ultracart.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = com.ultracart.admin.v2.Client.OpenAPIDateConverter;

namespace com.ultracart.admin.v2.Model
{
    /// <summary>
    /// GiftCertificateLedgerEntry
    /// </summary>
    [DataContract]
    public partial class GiftCertificateLedgerEntry :  IEquatable<GiftCertificateLedgerEntry>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GiftCertificateLedgerEntry" /> class.
        /// </summary>
        /// <param name="amount">The amount of the activity..</param>
        /// <param name="description">Description of what this ledger entry is used..</param>
        /// <param name="entryDts">Date time of this ledger activity..</param>
        /// <param name="giftCertificateLedgerOid">Gift certificate ledger oid is a primary key for this object, used internally..</param>
        /// <param name="giftCertificateOid">Gift certificate oid..</param>
        /// <param name="referenceOrderId">The order id if this gift certificate was used as part of the payment..</param>
        public GiftCertificateLedgerEntry(decimal amount = default(decimal), string description = default(string), string entryDts = default(string), int giftCertificateLedgerOid = default(int), int giftCertificateOid = default(int), string referenceOrderId = default(string))
        {
            this.Amount = amount;
            this.Description = description;
            this.EntryDts = entryDts;
            this.GiftCertificateLedgerOid = giftCertificateLedgerOid;
            this.GiftCertificateOid = giftCertificateOid;
            this.ReferenceOrderId = referenceOrderId;
        }

        /// <summary>
        /// The amount of the activity.
        /// </summary>
        /// <value>The amount of the activity.</value>
        [DataMember(Name="amount", EmitDefaultValue=false)]
        public decimal Amount { get; set; }

        /// <summary>
        /// Description of what this ledger entry is used.
        /// </summary>
        /// <value>Description of what this ledger entry is used.</value>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }

        /// <summary>
        /// Date time of this ledger activity.
        /// </summary>
        /// <value>Date time of this ledger activity.</value>
        [DataMember(Name="entry_dts", EmitDefaultValue=false)]
        public string EntryDts { get; set; }

        /// <summary>
        /// Gift certificate ledger oid is a primary key for this object, used internally.
        /// </summary>
        /// <value>Gift certificate ledger oid is a primary key for this object, used internally.</value>
        [DataMember(Name="gift_certificate_ledger_oid", EmitDefaultValue=false)]
        public int GiftCertificateLedgerOid { get; set; }

        /// <summary>
        /// Gift certificate oid.
        /// </summary>
        /// <value>Gift certificate oid.</value>
        [DataMember(Name="gift_certificate_oid", EmitDefaultValue=false)]
        public int GiftCertificateOid { get; set; }

        /// <summary>
        /// The order id if this gift certificate was used as part of the payment.
        /// </summary>
        /// <value>The order id if this gift certificate was used as part of the payment.</value>
        [DataMember(Name="reference_order_id", EmitDefaultValue=false)]
        public string ReferenceOrderId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class GiftCertificateLedgerEntry {\n");
            sb.Append("  Amount: ").Append(Amount).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  EntryDts: ").Append(EntryDts).Append("\n");
            sb.Append("  GiftCertificateLedgerOid: ").Append(GiftCertificateLedgerOid).Append("\n");
            sb.Append("  GiftCertificateOid: ").Append(GiftCertificateOid).Append("\n");
            sb.Append("  ReferenceOrderId: ").Append(ReferenceOrderId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as GiftCertificateLedgerEntry);
        }

        /// <summary>
        /// Returns true if GiftCertificateLedgerEntry instances are equal
        /// </summary>
        /// <param name="input">Instance of GiftCertificateLedgerEntry to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(GiftCertificateLedgerEntry input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Amount == input.Amount ||
                    (this.Amount != null &&
                    this.Amount.Equals(input.Amount))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.EntryDts == input.EntryDts ||
                    (this.EntryDts != null &&
                    this.EntryDts.Equals(input.EntryDts))
                ) && 
                (
                    this.GiftCertificateLedgerOid == input.GiftCertificateLedgerOid ||
                    (this.GiftCertificateLedgerOid != null &&
                    this.GiftCertificateLedgerOid.Equals(input.GiftCertificateLedgerOid))
                ) && 
                (
                    this.GiftCertificateOid == input.GiftCertificateOid ||
                    (this.GiftCertificateOid != null &&
                    this.GiftCertificateOid.Equals(input.GiftCertificateOid))
                ) && 
                (
                    this.ReferenceOrderId == input.ReferenceOrderId ||
                    (this.ReferenceOrderId != null &&
                    this.ReferenceOrderId.Equals(input.ReferenceOrderId))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Amount != null)
                    hashCode = hashCode * 59 + this.Amount.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                if (this.EntryDts != null)
                    hashCode = hashCode * 59 + this.EntryDts.GetHashCode();
                if (this.GiftCertificateLedgerOid != null)
                    hashCode = hashCode * 59 + this.GiftCertificateLedgerOid.GetHashCode();
                if (this.GiftCertificateOid != null)
                    hashCode = hashCode * 59 + this.GiftCertificateOid.GetHashCode();
                if (this.ReferenceOrderId != null)
                    hashCode = hashCode * 59 + this.ReferenceOrderId.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Description (string) maxLength
            if(this.Description != null && this.Description.Length > 50)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Description, length must be less than 50.", new [] { "Description" });
            }


            yield break;
        }
    }

}
