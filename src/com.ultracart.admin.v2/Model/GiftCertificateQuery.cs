/* 
 * UltraCart Rest API V2
 *
 * UltraCart REST API Version 2
 *
 * OpenAPI spec version: 2.0.0
 * Contact: support@ultracart.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = com.ultracart.admin.v2.Client.SwaggerDateConverter;

namespace com.ultracart.admin.v2.Model
{
    /// <summary>
    /// GiftCertificateQuery
    /// </summary>
    [DataContract]
    public partial class GiftCertificateQuery :  IEquatable<GiftCertificateQuery>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GiftCertificateQuery" /> class.
        /// </summary>
        /// <param name="code">Gift certificate code.</param>
        /// <param name="email">Email address of this gift certificate.</param>
        /// <param name="expirationDtsEnd">Expiration date end.</param>
        /// <param name="expirationDtsStart">Expiration date start.</param>
        /// <param name="originalBalanceEnd">Original balance end.</param>
        /// <param name="originalBalanceStart">Original balance start.</param>
        /// <param name="referenceOrderId">Gift certificate reference order id.</param>
        /// <param name="remainingBalanceEnd">Remaining balance end.</param>
        /// <param name="remainingBalanceStart">Remaining balance start.</param>
        public GiftCertificateQuery(string code = default(string), string email = default(string), string expirationDtsEnd = default(string), string expirationDtsStart = default(string), decimal? originalBalanceEnd = default(decimal?), decimal? originalBalanceStart = default(decimal?), string referenceOrderId = default(string), decimal? remainingBalanceEnd = default(decimal?), decimal? remainingBalanceStart = default(decimal?))
        {
            this.Code = code;
            this.Email = email;
            this.ExpirationDtsEnd = expirationDtsEnd;
            this.ExpirationDtsStart = expirationDtsStart;
            this.OriginalBalanceEnd = originalBalanceEnd;
            this.OriginalBalanceStart = originalBalanceStart;
            this.ReferenceOrderId = referenceOrderId;
            this.RemainingBalanceEnd = remainingBalanceEnd;
            this.RemainingBalanceStart = remainingBalanceStart;
        }
        
        /// <summary>
        /// Gift certificate code
        /// </summary>
        /// <value>Gift certificate code</value>
        [DataMember(Name="code", EmitDefaultValue=false)]
        public string Code { get; set; }

        /// <summary>
        /// Email address of this gift certificate
        /// </summary>
        /// <value>Email address of this gift certificate</value>
        [DataMember(Name="email", EmitDefaultValue=false)]
        public string Email { get; set; }

        /// <summary>
        /// Expiration date end
        /// </summary>
        /// <value>Expiration date end</value>
        [DataMember(Name="expiration_dts_end", EmitDefaultValue=false)]
        public string ExpirationDtsEnd { get; set; }

        /// <summary>
        /// Expiration date start
        /// </summary>
        /// <value>Expiration date start</value>
        [DataMember(Name="expiration_dts_start", EmitDefaultValue=false)]
        public string ExpirationDtsStart { get; set; }

        /// <summary>
        /// Original balance end
        /// </summary>
        /// <value>Original balance end</value>
        [DataMember(Name="original_balance_end", EmitDefaultValue=false)]
        public decimal? OriginalBalanceEnd { get; set; }

        /// <summary>
        /// Original balance start
        /// </summary>
        /// <value>Original balance start</value>
        [DataMember(Name="original_balance_start", EmitDefaultValue=false)]
        public decimal? OriginalBalanceStart { get; set; }

        /// <summary>
        /// Gift certificate reference order id
        /// </summary>
        /// <value>Gift certificate reference order id</value>
        [DataMember(Name="reference_order_id", EmitDefaultValue=false)]
        public string ReferenceOrderId { get; set; }

        /// <summary>
        /// Remaining balance end
        /// </summary>
        /// <value>Remaining balance end</value>
        [DataMember(Name="remaining_balance_end", EmitDefaultValue=false)]
        public decimal? RemainingBalanceEnd { get; set; }

        /// <summary>
        /// Remaining balance start
        /// </summary>
        /// <value>Remaining balance start</value>
        [DataMember(Name="remaining_balance_start", EmitDefaultValue=false)]
        public decimal? RemainingBalanceStart { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class GiftCertificateQuery {\n");
            sb.Append("  Code: ").Append(Code).Append("\n");
            sb.Append("  Email: ").Append(Email).Append("\n");
            sb.Append("  ExpirationDtsEnd: ").Append(ExpirationDtsEnd).Append("\n");
            sb.Append("  ExpirationDtsStart: ").Append(ExpirationDtsStart).Append("\n");
            sb.Append("  OriginalBalanceEnd: ").Append(OriginalBalanceEnd).Append("\n");
            sb.Append("  OriginalBalanceStart: ").Append(OriginalBalanceStart).Append("\n");
            sb.Append("  ReferenceOrderId: ").Append(ReferenceOrderId).Append("\n");
            sb.Append("  RemainingBalanceEnd: ").Append(RemainingBalanceEnd).Append("\n");
            sb.Append("  RemainingBalanceStart: ").Append(RemainingBalanceStart).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as GiftCertificateQuery);
        }

        /// <summary>
        /// Returns true if GiftCertificateQuery instances are equal
        /// </summary>
        /// <param name="input">Instance of GiftCertificateQuery to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(GiftCertificateQuery input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Code == input.Code ||
                    (this.Code != null &&
                    this.Code.Equals(input.Code))
                ) && 
                (
                    this.Email == input.Email ||
                    (this.Email != null &&
                    this.Email.Equals(input.Email))
                ) && 
                (
                    this.ExpirationDtsEnd == input.ExpirationDtsEnd ||
                    (this.ExpirationDtsEnd != null &&
                    this.ExpirationDtsEnd.Equals(input.ExpirationDtsEnd))
                ) && 
                (
                    this.ExpirationDtsStart == input.ExpirationDtsStart ||
                    (this.ExpirationDtsStart != null &&
                    this.ExpirationDtsStart.Equals(input.ExpirationDtsStart))
                ) && 
                (
                    this.OriginalBalanceEnd == input.OriginalBalanceEnd ||
                    (this.OriginalBalanceEnd != null &&
                    this.OriginalBalanceEnd.Equals(input.OriginalBalanceEnd))
                ) && 
                (
                    this.OriginalBalanceStart == input.OriginalBalanceStart ||
                    (this.OriginalBalanceStart != null &&
                    this.OriginalBalanceStart.Equals(input.OriginalBalanceStart))
                ) && 
                (
                    this.ReferenceOrderId == input.ReferenceOrderId ||
                    (this.ReferenceOrderId != null &&
                    this.ReferenceOrderId.Equals(input.ReferenceOrderId))
                ) && 
                (
                    this.RemainingBalanceEnd == input.RemainingBalanceEnd ||
                    (this.RemainingBalanceEnd != null &&
                    this.RemainingBalanceEnd.Equals(input.RemainingBalanceEnd))
                ) && 
                (
                    this.RemainingBalanceStart == input.RemainingBalanceStart ||
                    (this.RemainingBalanceStart != null &&
                    this.RemainingBalanceStart.Equals(input.RemainingBalanceStart))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Code != null)
                    hashCode = hashCode * 59 + this.Code.GetHashCode();
                if (this.Email != null)
                    hashCode = hashCode * 59 + this.Email.GetHashCode();
                if (this.ExpirationDtsEnd != null)
                    hashCode = hashCode * 59 + this.ExpirationDtsEnd.GetHashCode();
                if (this.ExpirationDtsStart != null)
                    hashCode = hashCode * 59 + this.ExpirationDtsStart.GetHashCode();
                if (this.OriginalBalanceEnd != null)
                    hashCode = hashCode * 59 + this.OriginalBalanceEnd.GetHashCode();
                if (this.OriginalBalanceStart != null)
                    hashCode = hashCode * 59 + this.OriginalBalanceStart.GetHashCode();
                if (this.ReferenceOrderId != null)
                    hashCode = hashCode * 59 + this.ReferenceOrderId.GetHashCode();
                if (this.RemainingBalanceEnd != null)
                    hashCode = hashCode * 59 + this.RemainingBalanceEnd.GetHashCode();
                if (this.RemainingBalanceStart != null)
                    hashCode = hashCode * 59 + this.RemainingBalanceStart.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
