/* 
 * UltraCart Rest API V2
 *
 * UltraCart REST API Version 2
 *
 * OpenAPI spec version: 2.0.0
 * Contact: support@ultracart.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = com.ultracart.admin.v2.Client.SwaggerDateConverter;

namespace com.ultracart.admin.v2.Model
{
    /// <summary>
    /// Group
    /// </summary>
    [DataContract]
    public partial class Group :  IEquatable<Group>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Group" /> class.
        /// </summary>
        /// <param name="groupOid">The unique object identifier (oid for short) for this group.</param>
        /// <param name="name">The name of this group..</param>
        /// <param name="notifications">A list of notifications the user receives..</param>
        /// <param name="permissions">A list of permissions the user enjoys for accessing the backend of UltraCart..</param>
        /// <param name="users">A list of users that belong to this group..</param>
        public Group(int? groupOid = default(int?), string name = default(string), List<Notification> notifications = default(List<Notification>), List<Permission> permissions = default(List<Permission>), List<GroupUserMembership> users = default(List<GroupUserMembership>))
        {
            this.GroupOid = groupOid;
            this.Name = name;
            this.Notifications = notifications;
            this.Permissions = permissions;
            this.Users = users;
        }
        
        /// <summary>
        /// The unique object identifier (oid for short) for this group
        /// </summary>
        /// <value>The unique object identifier (oid for short) for this group</value>
        [DataMember(Name="group_oid", EmitDefaultValue=false)]
        public int? GroupOid { get; set; }

        /// <summary>
        /// The name of this group.
        /// </summary>
        /// <value>The name of this group.</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// A list of notifications the user receives.
        /// </summary>
        /// <value>A list of notifications the user receives.</value>
        [DataMember(Name="notifications", EmitDefaultValue=false)]
        public List<Notification> Notifications { get; set; }

        /// <summary>
        /// A list of permissions the user enjoys for accessing the backend of UltraCart.
        /// </summary>
        /// <value>A list of permissions the user enjoys for accessing the backend of UltraCart.</value>
        [DataMember(Name="permissions", EmitDefaultValue=false)]
        public List<Permission> Permissions { get; set; }

        /// <summary>
        /// A list of users that belong to this group.
        /// </summary>
        /// <value>A list of users that belong to this group.</value>
        [DataMember(Name="users", EmitDefaultValue=false)]
        public List<GroupUserMembership> Users { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Group {\n");
            sb.Append("  GroupOid: ").Append(GroupOid).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Notifications: ").Append(Notifications).Append("\n");
            sb.Append("  Permissions: ").Append(Permissions).Append("\n");
            sb.Append("  Users: ").Append(Users).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Group);
        }

        /// <summary>
        /// Returns true if Group instances are equal
        /// </summary>
        /// <param name="input">Instance of Group to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Group input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.GroupOid == input.GroupOid ||
                    (this.GroupOid != null &&
                    this.GroupOid.Equals(input.GroupOid))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Notifications == input.Notifications ||
                    this.Notifications != null &&
                    this.Notifications.SequenceEqual(input.Notifications)
                ) && 
                (
                    this.Permissions == input.Permissions ||
                    this.Permissions != null &&
                    this.Permissions.SequenceEqual(input.Permissions)
                ) && 
                (
                    this.Users == input.Users ||
                    this.Users != null &&
                    this.Users.SequenceEqual(input.Users)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.GroupOid != null)
                    hashCode = hashCode * 59 + this.GroupOid.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Notifications != null)
                    hashCode = hashCode * 59 + this.Notifications.GetHashCode();
                if (this.Permissions != null)
                    hashCode = hashCode * 59 + this.Permissions.GetHashCode();
                if (this.Users != null)
                    hashCode = hashCode * 59 + this.Users.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
