/* 
 * UltraCart Rest API V2
 *
 * UltraCart REST API Version 2
 *
 * OpenAPI spec version: 2.0.0
 * Contact: support@ultracart.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = com.ultracart.admin.v2.Client.SwaggerDateConverter;

namespace com.ultracart.admin.v2.Model
{
    /// <summary>
    /// HitSessionStart
    /// </summary>
    [DataContract]
    public partial class HitSessionStart :  IEquatable<HitSessionStart>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="HitSessionStart" /> class.
        /// </summary>
        /// <param name="bot">bot.</param>
        /// <param name="bounce">bounce.</param>
        /// <param name="channel">channel.</param>
        /// <param name="deviceSwitchDetected">deviceSwitchDetected.</param>
        /// <param name="fakeBot">fakeBot.</param>
        /// <param name="geolocationCountry">geolocationCountry.</param>
        /// <param name="geolocationLatitude">geolocationLatitude.</param>
        /// <param name="geolocationLongitude">geolocationLongitude.</param>
        /// <param name="geolocationProvince">geolocationProvince.</param>
        /// <param name="noCookieSupport">noCookieSupport.</param>
        /// <param name="prefetch">prefetch.</param>
        /// <param name="referrer">referrer.</param>
        /// <param name="screenHeight">screenHeight.</param>
        /// <param name="screenWidth">screenWidth.</param>
        /// <param name="timeOnSite">timeOnSite.</param>
        /// <param name="userAgent">userAgent.</param>
        /// <param name="userIp">userIp.</param>
        public HitSessionStart(bool? bot = default(bool?), bool? bounce = default(bool?), string channel = default(string), bool? deviceSwitchDetected = default(bool?), bool? fakeBot = default(bool?), string geolocationCountry = default(string), decimal? geolocationLatitude = default(decimal?), decimal? geolocationLongitude = default(decimal?), string geolocationProvince = default(string), bool? noCookieSupport = default(bool?), bool? prefetch = default(bool?), string referrer = default(string), int? screenHeight = default(int?), int? screenWidth = default(int?), decimal? timeOnSite = default(decimal?), string userAgent = default(string), string userIp = default(string))
        {
            this.Bot = bot;
            this.Bounce = bounce;
            this.Channel = channel;
            this.DeviceSwitchDetected = deviceSwitchDetected;
            this.FakeBot = fakeBot;
            this.GeolocationCountry = geolocationCountry;
            this.GeolocationLatitude = geolocationLatitude;
            this.GeolocationLongitude = geolocationLongitude;
            this.GeolocationProvince = geolocationProvince;
            this.NoCookieSupport = noCookieSupport;
            this.Prefetch = prefetch;
            this.Referrer = referrer;
            this.ScreenHeight = screenHeight;
            this.ScreenWidth = screenWidth;
            this.TimeOnSite = timeOnSite;
            this.UserAgent = userAgent;
            this.UserIp = userIp;
        }
        
        /// <summary>
        /// Gets or Sets Bot
        /// </summary>
        [DataMember(Name="bot", EmitDefaultValue=false)]
        public bool? Bot { get; set; }

        /// <summary>
        /// Gets or Sets Bounce
        /// </summary>
        [DataMember(Name="bounce", EmitDefaultValue=false)]
        public bool? Bounce { get; set; }

        /// <summary>
        /// Gets or Sets Channel
        /// </summary>
        [DataMember(Name="channel", EmitDefaultValue=false)]
        public string Channel { get; set; }

        /// <summary>
        /// Gets or Sets DeviceSwitchDetected
        /// </summary>
        [DataMember(Name="device_switch_detected", EmitDefaultValue=false)]
        public bool? DeviceSwitchDetected { get; set; }

        /// <summary>
        /// Gets or Sets FakeBot
        /// </summary>
        [DataMember(Name="fake_bot", EmitDefaultValue=false)]
        public bool? FakeBot { get; set; }

        /// <summary>
        /// Gets or Sets GeolocationCountry
        /// </summary>
        [DataMember(Name="geolocation_country", EmitDefaultValue=false)]
        public string GeolocationCountry { get; set; }

        /// <summary>
        /// Gets or Sets GeolocationLatitude
        /// </summary>
        [DataMember(Name="geolocation_latitude", EmitDefaultValue=false)]
        public decimal? GeolocationLatitude { get; set; }

        /// <summary>
        /// Gets or Sets GeolocationLongitude
        /// </summary>
        [DataMember(Name="geolocation_longitude", EmitDefaultValue=false)]
        public decimal? GeolocationLongitude { get; set; }

        /// <summary>
        /// Gets or Sets GeolocationProvince
        /// </summary>
        [DataMember(Name="geolocation_province", EmitDefaultValue=false)]
        public string GeolocationProvince { get; set; }

        /// <summary>
        /// Gets or Sets NoCookieSupport
        /// </summary>
        [DataMember(Name="no_cookie_support", EmitDefaultValue=false)]
        public bool? NoCookieSupport { get; set; }

        /// <summary>
        /// Gets or Sets Prefetch
        /// </summary>
        [DataMember(Name="prefetch", EmitDefaultValue=false)]
        public bool? Prefetch { get; set; }

        /// <summary>
        /// Gets or Sets Referrer
        /// </summary>
        [DataMember(Name="referrer", EmitDefaultValue=false)]
        public string Referrer { get; set; }

        /// <summary>
        /// Gets or Sets ScreenHeight
        /// </summary>
        [DataMember(Name="screen_height", EmitDefaultValue=false)]
        public int? ScreenHeight { get; set; }

        /// <summary>
        /// Gets or Sets ScreenWidth
        /// </summary>
        [DataMember(Name="screen_width", EmitDefaultValue=false)]
        public int? ScreenWidth { get; set; }

        /// <summary>
        /// Gets or Sets TimeOnSite
        /// </summary>
        [DataMember(Name="time_on_Site", EmitDefaultValue=false)]
        public decimal? TimeOnSite { get; set; }

        /// <summary>
        /// Gets or Sets UserAgent
        /// </summary>
        [DataMember(Name="user_agent", EmitDefaultValue=false)]
        public string UserAgent { get; set; }

        /// <summary>
        /// Gets or Sets UserIp
        /// </summary>
        [DataMember(Name="user_ip", EmitDefaultValue=false)]
        public string UserIp { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class HitSessionStart {\n");
            sb.Append("  Bot: ").Append(Bot).Append("\n");
            sb.Append("  Bounce: ").Append(Bounce).Append("\n");
            sb.Append("  Channel: ").Append(Channel).Append("\n");
            sb.Append("  DeviceSwitchDetected: ").Append(DeviceSwitchDetected).Append("\n");
            sb.Append("  FakeBot: ").Append(FakeBot).Append("\n");
            sb.Append("  GeolocationCountry: ").Append(GeolocationCountry).Append("\n");
            sb.Append("  GeolocationLatitude: ").Append(GeolocationLatitude).Append("\n");
            sb.Append("  GeolocationLongitude: ").Append(GeolocationLongitude).Append("\n");
            sb.Append("  GeolocationProvince: ").Append(GeolocationProvince).Append("\n");
            sb.Append("  NoCookieSupport: ").Append(NoCookieSupport).Append("\n");
            sb.Append("  Prefetch: ").Append(Prefetch).Append("\n");
            sb.Append("  Referrer: ").Append(Referrer).Append("\n");
            sb.Append("  ScreenHeight: ").Append(ScreenHeight).Append("\n");
            sb.Append("  ScreenWidth: ").Append(ScreenWidth).Append("\n");
            sb.Append("  TimeOnSite: ").Append(TimeOnSite).Append("\n");
            sb.Append("  UserAgent: ").Append(UserAgent).Append("\n");
            sb.Append("  UserIp: ").Append(UserIp).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as HitSessionStart);
        }

        /// <summary>
        /// Returns true if HitSessionStart instances are equal
        /// </summary>
        /// <param name="input">Instance of HitSessionStart to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(HitSessionStart input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Bot == input.Bot ||
                    (this.Bot != null &&
                    this.Bot.Equals(input.Bot))
                ) && 
                (
                    this.Bounce == input.Bounce ||
                    (this.Bounce != null &&
                    this.Bounce.Equals(input.Bounce))
                ) && 
                (
                    this.Channel == input.Channel ||
                    (this.Channel != null &&
                    this.Channel.Equals(input.Channel))
                ) && 
                (
                    this.DeviceSwitchDetected == input.DeviceSwitchDetected ||
                    (this.DeviceSwitchDetected != null &&
                    this.DeviceSwitchDetected.Equals(input.DeviceSwitchDetected))
                ) && 
                (
                    this.FakeBot == input.FakeBot ||
                    (this.FakeBot != null &&
                    this.FakeBot.Equals(input.FakeBot))
                ) && 
                (
                    this.GeolocationCountry == input.GeolocationCountry ||
                    (this.GeolocationCountry != null &&
                    this.GeolocationCountry.Equals(input.GeolocationCountry))
                ) && 
                (
                    this.GeolocationLatitude == input.GeolocationLatitude ||
                    (this.GeolocationLatitude != null &&
                    this.GeolocationLatitude.Equals(input.GeolocationLatitude))
                ) && 
                (
                    this.GeolocationLongitude == input.GeolocationLongitude ||
                    (this.GeolocationLongitude != null &&
                    this.GeolocationLongitude.Equals(input.GeolocationLongitude))
                ) && 
                (
                    this.GeolocationProvince == input.GeolocationProvince ||
                    (this.GeolocationProvince != null &&
                    this.GeolocationProvince.Equals(input.GeolocationProvince))
                ) && 
                (
                    this.NoCookieSupport == input.NoCookieSupport ||
                    (this.NoCookieSupport != null &&
                    this.NoCookieSupport.Equals(input.NoCookieSupport))
                ) && 
                (
                    this.Prefetch == input.Prefetch ||
                    (this.Prefetch != null &&
                    this.Prefetch.Equals(input.Prefetch))
                ) && 
                (
                    this.Referrer == input.Referrer ||
                    (this.Referrer != null &&
                    this.Referrer.Equals(input.Referrer))
                ) && 
                (
                    this.ScreenHeight == input.ScreenHeight ||
                    (this.ScreenHeight != null &&
                    this.ScreenHeight.Equals(input.ScreenHeight))
                ) && 
                (
                    this.ScreenWidth == input.ScreenWidth ||
                    (this.ScreenWidth != null &&
                    this.ScreenWidth.Equals(input.ScreenWidth))
                ) && 
                (
                    this.TimeOnSite == input.TimeOnSite ||
                    (this.TimeOnSite != null &&
                    this.TimeOnSite.Equals(input.TimeOnSite))
                ) && 
                (
                    this.UserAgent == input.UserAgent ||
                    (this.UserAgent != null &&
                    this.UserAgent.Equals(input.UserAgent))
                ) && 
                (
                    this.UserIp == input.UserIp ||
                    (this.UserIp != null &&
                    this.UserIp.Equals(input.UserIp))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Bot != null)
                    hashCode = hashCode * 59 + this.Bot.GetHashCode();
                if (this.Bounce != null)
                    hashCode = hashCode * 59 + this.Bounce.GetHashCode();
                if (this.Channel != null)
                    hashCode = hashCode * 59 + this.Channel.GetHashCode();
                if (this.DeviceSwitchDetected != null)
                    hashCode = hashCode * 59 + this.DeviceSwitchDetected.GetHashCode();
                if (this.FakeBot != null)
                    hashCode = hashCode * 59 + this.FakeBot.GetHashCode();
                if (this.GeolocationCountry != null)
                    hashCode = hashCode * 59 + this.GeolocationCountry.GetHashCode();
                if (this.GeolocationLatitude != null)
                    hashCode = hashCode * 59 + this.GeolocationLatitude.GetHashCode();
                if (this.GeolocationLongitude != null)
                    hashCode = hashCode * 59 + this.GeolocationLongitude.GetHashCode();
                if (this.GeolocationProvince != null)
                    hashCode = hashCode * 59 + this.GeolocationProvince.GetHashCode();
                if (this.NoCookieSupport != null)
                    hashCode = hashCode * 59 + this.NoCookieSupport.GetHashCode();
                if (this.Prefetch != null)
                    hashCode = hashCode * 59 + this.Prefetch.GetHashCode();
                if (this.Referrer != null)
                    hashCode = hashCode * 59 + this.Referrer.GetHashCode();
                if (this.ScreenHeight != null)
                    hashCode = hashCode * 59 + this.ScreenHeight.GetHashCode();
                if (this.ScreenWidth != null)
                    hashCode = hashCode * 59 + this.ScreenWidth.GetHashCode();
                if (this.TimeOnSite != null)
                    hashCode = hashCode * 59 + this.TimeOnSite.GetHashCode();
                if (this.UserAgent != null)
                    hashCode = hashCode * 59 + this.UserAgent.GetHashCode();
                if (this.UserIp != null)
                    hashCode = hashCode * 59 + this.UserIp.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
