/*
 * UltraCart Rest API V2
 *
 * UltraCart REST API Version 2
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@ultracart.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = com.ultracart.admin.v2.Client.OpenAPIDateConverter;

namespace com.ultracart.admin.v2.Model
{
    /// <summary>
    /// IntegrationLogSummary
    /// </summary>
    [DataContract]
    public partial class IntegrationLogSummary :  IEquatable<IntegrationLogSummary>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="IntegrationLogSummary" /> class.
        /// </summary>
        /// <param name="critical">critical.</param>
        /// <param name="error">error.</param>
        /// <param name="events">events.</param>
        /// <param name="logType">logType.</param>
        /// <param name="loggerId">loggerId.</param>
        /// <param name="loggerName">loggerName.</param>
        /// <param name="success">success.</param>
        /// <param name="viewUrl">viewUrl.</param>
        /// <param name="warning">warning.</param>
        public IntegrationLogSummary(int critical = default(int), int error = default(int), int events = default(int), string logType = default(string), string loggerId = default(string), string loggerName = default(string), int success = default(int), string viewUrl = default(string), int warning = default(int))
        {
            this.Critical = critical;
            this.Error = error;
            this.Events = events;
            this.LogType = logType;
            this.LoggerId = loggerId;
            this.LoggerName = loggerName;
            this.Success = success;
            this.ViewUrl = viewUrl;
            this.Warning = warning;
        }

        /// <summary>
        /// Gets or Sets Critical
        /// </summary>
        [DataMember(Name="critical", EmitDefaultValue=false)]
        public int Critical { get; set; }

        /// <summary>
        /// Gets or Sets Error
        /// </summary>
        [DataMember(Name="error", EmitDefaultValue=false)]
        public int Error { get; set; }

        /// <summary>
        /// Gets or Sets Events
        /// </summary>
        [DataMember(Name="events", EmitDefaultValue=false)]
        public int Events { get; set; }

        /// <summary>
        /// Gets or Sets LogType
        /// </summary>
        [DataMember(Name="log_type", EmitDefaultValue=false)]
        public string LogType { get; set; }

        /// <summary>
        /// Gets or Sets LoggerId
        /// </summary>
        [DataMember(Name="logger_id", EmitDefaultValue=false)]
        public string LoggerId { get; set; }

        /// <summary>
        /// Gets or Sets LoggerName
        /// </summary>
        [DataMember(Name="logger_name", EmitDefaultValue=false)]
        public string LoggerName { get; set; }

        /// <summary>
        /// Gets or Sets Success
        /// </summary>
        [DataMember(Name="success", EmitDefaultValue=false)]
        public int Success { get; set; }

        /// <summary>
        /// Gets or Sets ViewUrl
        /// </summary>
        [DataMember(Name="view_url", EmitDefaultValue=false)]
        public string ViewUrl { get; set; }

        /// <summary>
        /// Gets or Sets Warning
        /// </summary>
        [DataMember(Name="warning", EmitDefaultValue=false)]
        public int Warning { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class IntegrationLogSummary {\n");
            sb.Append("  Critical: ").Append(Critical).Append("\n");
            sb.Append("  Error: ").Append(Error).Append("\n");
            sb.Append("  Events: ").Append(Events).Append("\n");
            sb.Append("  LogType: ").Append(LogType).Append("\n");
            sb.Append("  LoggerId: ").Append(LoggerId).Append("\n");
            sb.Append("  LoggerName: ").Append(LoggerName).Append("\n");
            sb.Append("  Success: ").Append(Success).Append("\n");
            sb.Append("  ViewUrl: ").Append(ViewUrl).Append("\n");
            sb.Append("  Warning: ").Append(Warning).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as IntegrationLogSummary);
        }

        /// <summary>
        /// Returns true if IntegrationLogSummary instances are equal
        /// </summary>
        /// <param name="input">Instance of IntegrationLogSummary to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(IntegrationLogSummary input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Critical == input.Critical ||
                    (this.Critical != null &&
                    this.Critical.Equals(input.Critical))
                ) && 
                (
                    this.Error == input.Error ||
                    (this.Error != null &&
                    this.Error.Equals(input.Error))
                ) && 
                (
                    this.Events == input.Events ||
                    (this.Events != null &&
                    this.Events.Equals(input.Events))
                ) && 
                (
                    this.LogType == input.LogType ||
                    (this.LogType != null &&
                    this.LogType.Equals(input.LogType))
                ) && 
                (
                    this.LoggerId == input.LoggerId ||
                    (this.LoggerId != null &&
                    this.LoggerId.Equals(input.LoggerId))
                ) && 
                (
                    this.LoggerName == input.LoggerName ||
                    (this.LoggerName != null &&
                    this.LoggerName.Equals(input.LoggerName))
                ) && 
                (
                    this.Success == input.Success ||
                    (this.Success != null &&
                    this.Success.Equals(input.Success))
                ) && 
                (
                    this.ViewUrl == input.ViewUrl ||
                    (this.ViewUrl != null &&
                    this.ViewUrl.Equals(input.ViewUrl))
                ) && 
                (
                    this.Warning == input.Warning ||
                    (this.Warning != null &&
                    this.Warning.Equals(input.Warning))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Critical != null)
                    hashCode = hashCode * 59 + this.Critical.GetHashCode();
                if (this.Error != null)
                    hashCode = hashCode * 59 + this.Error.GetHashCode();
                if (this.Events != null)
                    hashCode = hashCode * 59 + this.Events.GetHashCode();
                if (this.LogType != null)
                    hashCode = hashCode * 59 + this.LogType.GetHashCode();
                if (this.LoggerId != null)
                    hashCode = hashCode * 59 + this.LoggerId.GetHashCode();
                if (this.LoggerName != null)
                    hashCode = hashCode * 59 + this.LoggerName.GetHashCode();
                if (this.Success != null)
                    hashCode = hashCode * 59 + this.Success.GetHashCode();
                if (this.ViewUrl != null)
                    hashCode = hashCode * 59 + this.ViewUrl.GetHashCode();
                if (this.Warning != null)
                    hashCode = hashCode * 59 + this.Warning.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
