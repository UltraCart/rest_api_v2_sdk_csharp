/* 
 * UltraCart Rest API V2
 *
 * UltraCart REST API Version 2
 *
 * OpenAPI spec version: 2.0.0
 * Contact: support@ultracart.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = com.ultracart.admin.v2.Client.SwaggerDateConverter;

namespace com.ultracart.admin.v2.Model
{
    /// <summary>
    /// Item
    /// </summary>
    [DataContract]
    public partial class Item :  IEquatable<Item>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Item" /> class.
        /// </summary>
        /// <param name="accounting">accounting.</param>
        /// <param name="amember">amember.</param>
        /// <param name="autoOrder">autoOrder.</param>
        /// <param name="ccbill">ccbill.</param>
        /// <param name="channelPartnerItemMappings">Channel Partner Item Mapping.</param>
        /// <param name="chargeback">chargeback.</param>
        /// <param name="checkout">checkout.</param>
        /// <param name="content">content.</param>
        /// <param name="creationDts">Date/time of creation.</param>
        /// <param name="description">Description of the item up to 500 characters..</param>
        /// <param name="descriptionTranslatedTextInstanceOid">Description translated text instance id.</param>
        /// <param name="digitalDelivery">digitalDelivery.</param>
        /// <param name="ebay">ebay.</param>
        /// <param name="emailNotifications">emailNotifications.</param>
        /// <param name="enrollment123">enrollment123.</param>
        /// <param name="fulfillmentAddons">Fulfillment Add-ons.</param>
        /// <param name="giftCertificate">giftCertificate.</param>
        /// <param name="googleProductSearch">googleProductSearch.</param>
        /// <param name="identifiers">identifiers.</param>
        /// <param name="inactive">True if this item is inactive and can not be purchased.</param>
        /// <param name="instantPaymentNotifications">instantPaymentNotifications.</param>
        /// <param name="_internal">_internal.</param>
        /// <param name="kit">True if this item is a kit.</param>
        /// <param name="kitComponentOnly">True if this item can only be usd as a kit component.</param>
        /// <param name="kitDefinition">kitDefinition.</param>
        /// <param name="lastModifiedDts">Date/time of last modification.</param>
        /// <param name="merchantId">UltraCart merchant ID owning item.</param>
        /// <param name="merchantItemId">Unique item id assigned to this item.</param>
        /// <param name="merchantItemOid">Unique object identifier for this item.</param>
        /// <param name="options">Options.</param>
        /// <param name="parentCategoryId">Parent category of the item.  Zero indicates the root folder..</param>
        /// <param name="parentCategoryPath">Parent category path.  / indicates the root folder.  This is the folder structure within item management..</param>
        /// <param name="paymentProcessing">paymentProcessing.</param>
        /// <param name="physical">physical.</param>
        /// <param name="pricing">pricing.</param>
        /// <param name="properties">Properties.</param>
        /// <param name="realtimePricing">realtimePricing.</param>
        /// <param name="recommendReplenishmentDays">Number of days to recommend replenishment after.  Null is not configured.  Set to zero to disable..</param>
        /// <param name="related">related.</param>
        /// <param name="reporting">reporting.</param>
        /// <param name="restriction">restriction.</param>
        /// <param name="revguard">revguard.</param>
        /// <param name="reviews">reviews.</param>
        /// <param name="salesforce">salesforce.</param>
        /// <param name="shipping">shipping.</param>
        /// <param name="tags">tags.</param>
        /// <param name="tax">tax.</param>
        /// <param name="thirdPartyEmailMarketing">3rd Party Email Marketing.</param>
        /// <param name="variantItems">Variant Items.</param>
        /// <param name="variations">Variations.</param>
        /// <param name="wishlistMember">wishlistMember.</param>
        public Item(ItemAccounting accounting = default(ItemAccounting), ItemAmember amember = default(ItemAmember), ItemAutoOrder autoOrder = default(ItemAutoOrder), ItemCCBill ccbill = default(ItemCCBill), List<ItemChannelPartnerMapping> channelPartnerItemMappings = default(List<ItemChannelPartnerMapping>), ItemChargeback chargeback = default(ItemChargeback), ItemCheckout checkout = default(ItemCheckout), ItemContent content = default(ItemContent), string creationDts = default(string), string description = default(string), int? descriptionTranslatedTextInstanceOid = default(int?), ItemDigitalDelivery digitalDelivery = default(ItemDigitalDelivery), ItemEbay ebay = default(ItemEbay), ItemEmailNotifications emailNotifications = default(ItemEmailNotifications), ItemEnrollment123 enrollment123 = default(ItemEnrollment123), List<ItemFulfillmentAddon> fulfillmentAddons = default(List<ItemFulfillmentAddon>), ItemGiftCertificate giftCertificate = default(ItemGiftCertificate), ItemGoogleProductSearch googleProductSearch = default(ItemGoogleProductSearch), ItemIdentifiers identifiers = default(ItemIdentifiers), bool? inactive = default(bool?), ItemInstantPaymentNotifications instantPaymentNotifications = default(ItemInstantPaymentNotifications), ItemInternal _internal = default(ItemInternal), bool? kit = default(bool?), bool? kitComponentOnly = default(bool?), ItemKitDefinition kitDefinition = default(ItemKitDefinition), string lastModifiedDts = default(string), string merchantId = default(string), string merchantItemId = default(string), int? merchantItemOid = default(int?), List<ItemOption> options = default(List<ItemOption>), int? parentCategoryId = default(int?), string parentCategoryPath = default(string), ItemPaymentProcessing paymentProcessing = default(ItemPaymentProcessing), ItemPhysical physical = default(ItemPhysical), ItemPricing pricing = default(ItemPricing), List<ItemProperty> properties = default(List<ItemProperty>), ItemRealtimePricing realtimePricing = default(ItemRealtimePricing), int? recommendReplenishmentDays = default(int?), ItemRelated related = default(ItemRelated), ItemReporting reporting = default(ItemReporting), ItemRestriction restriction = default(ItemRestriction), ItemRevguard revguard = default(ItemRevguard), ItemReviews reviews = default(ItemReviews), ItemSalesforce salesforce = default(ItemSalesforce), ItemShipping shipping = default(ItemShipping), ItemTags tags = default(ItemTags), ItemTax tax = default(ItemTax), List<ItemThirdPartyEmailMarketing> thirdPartyEmailMarketing = default(List<ItemThirdPartyEmailMarketing>), List<ItemVariantItem> variantItems = default(List<ItemVariantItem>), List<ItemVariation> variations = default(List<ItemVariation>), ItemWishlistMember wishlistMember = default(ItemWishlistMember))
        {
            this.Accounting = accounting;
            this.Amember = amember;
            this.AutoOrder = autoOrder;
            this.Ccbill = ccbill;
            this.ChannelPartnerItemMappings = channelPartnerItemMappings;
            this.Chargeback = chargeback;
            this.Checkout = checkout;
            this.Content = content;
            this.CreationDts = creationDts;
            this.Description = description;
            this.DescriptionTranslatedTextInstanceOid = descriptionTranslatedTextInstanceOid;
            this.DigitalDelivery = digitalDelivery;
            this.Ebay = ebay;
            this.EmailNotifications = emailNotifications;
            this.Enrollment123 = enrollment123;
            this.FulfillmentAddons = fulfillmentAddons;
            this.GiftCertificate = giftCertificate;
            this.GoogleProductSearch = googleProductSearch;
            this.Identifiers = identifiers;
            this.Inactive = inactive;
            this.InstantPaymentNotifications = instantPaymentNotifications;
            this.Internal = _internal;
            this.Kit = kit;
            this.KitComponentOnly = kitComponentOnly;
            this.KitDefinition = kitDefinition;
            this.LastModifiedDts = lastModifiedDts;
            this.MerchantId = merchantId;
            this.MerchantItemId = merchantItemId;
            this.MerchantItemOid = merchantItemOid;
            this.Options = options;
            this.ParentCategoryId = parentCategoryId;
            this.ParentCategoryPath = parentCategoryPath;
            this.PaymentProcessing = paymentProcessing;
            this.Physical = physical;
            this.Pricing = pricing;
            this.Properties = properties;
            this.RealtimePricing = realtimePricing;
            this.RecommendReplenishmentDays = recommendReplenishmentDays;
            this.Related = related;
            this.Reporting = reporting;
            this.Restriction = restriction;
            this.Revguard = revguard;
            this.Reviews = reviews;
            this.Salesforce = salesforce;
            this.Shipping = shipping;
            this.Tags = tags;
            this.Tax = tax;
            this.ThirdPartyEmailMarketing = thirdPartyEmailMarketing;
            this.VariantItems = variantItems;
            this.Variations = variations;
            this.WishlistMember = wishlistMember;
        }
        
        /// <summary>
        /// Gets or Sets Accounting
        /// </summary>
        [DataMember(Name="accounting", EmitDefaultValue=false)]
        public ItemAccounting Accounting { get; set; }

        /// <summary>
        /// Gets or Sets Amember
        /// </summary>
        [DataMember(Name="amember", EmitDefaultValue=false)]
        public ItemAmember Amember { get; set; }

        /// <summary>
        /// Gets or Sets AutoOrder
        /// </summary>
        [DataMember(Name="auto_order", EmitDefaultValue=false)]
        public ItemAutoOrder AutoOrder { get; set; }

        /// <summary>
        /// Gets or Sets Ccbill
        /// </summary>
        [DataMember(Name="ccbill", EmitDefaultValue=false)]
        public ItemCCBill Ccbill { get; set; }

        /// <summary>
        /// Channel Partner Item Mapping
        /// </summary>
        /// <value>Channel Partner Item Mapping</value>
        [DataMember(Name="channel_partner_item_mappings", EmitDefaultValue=false)]
        public List<ItemChannelPartnerMapping> ChannelPartnerItemMappings { get; set; }

        /// <summary>
        /// Gets or Sets Chargeback
        /// </summary>
        [DataMember(Name="chargeback", EmitDefaultValue=false)]
        public ItemChargeback Chargeback { get; set; }

        /// <summary>
        /// Gets or Sets Checkout
        /// </summary>
        [DataMember(Name="checkout", EmitDefaultValue=false)]
        public ItemCheckout Checkout { get; set; }

        /// <summary>
        /// Gets or Sets Content
        /// </summary>
        [DataMember(Name="content", EmitDefaultValue=false)]
        public ItemContent Content { get; set; }

        /// <summary>
        /// Date/time of creation
        /// </summary>
        /// <value>Date/time of creation</value>
        [DataMember(Name="creation_dts", EmitDefaultValue=false)]
        public string CreationDts { get; set; }

        /// <summary>
        /// Description of the item up to 500 characters.
        /// </summary>
        /// <value>Description of the item up to 500 characters.</value>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }

        /// <summary>
        /// Description translated text instance id
        /// </summary>
        /// <value>Description translated text instance id</value>
        [DataMember(Name="description_translated_text_instance_oid", EmitDefaultValue=false)]
        public int? DescriptionTranslatedTextInstanceOid { get; set; }

        /// <summary>
        /// Gets or Sets DigitalDelivery
        /// </summary>
        [DataMember(Name="digital_delivery", EmitDefaultValue=false)]
        public ItemDigitalDelivery DigitalDelivery { get; set; }

        /// <summary>
        /// Gets or Sets Ebay
        /// </summary>
        [DataMember(Name="ebay", EmitDefaultValue=false)]
        public ItemEbay Ebay { get; set; }

        /// <summary>
        /// Gets or Sets EmailNotifications
        /// </summary>
        [DataMember(Name="email_notifications", EmitDefaultValue=false)]
        public ItemEmailNotifications EmailNotifications { get; set; }

        /// <summary>
        /// Gets or Sets Enrollment123
        /// </summary>
        [DataMember(Name="enrollment123", EmitDefaultValue=false)]
        public ItemEnrollment123 Enrollment123 { get; set; }

        /// <summary>
        /// Fulfillment Add-ons
        /// </summary>
        /// <value>Fulfillment Add-ons</value>
        [DataMember(Name="fulfillment_addons", EmitDefaultValue=false)]
        public List<ItemFulfillmentAddon> FulfillmentAddons { get; set; }

        /// <summary>
        /// Gets or Sets GiftCertificate
        /// </summary>
        [DataMember(Name="gift_certificate", EmitDefaultValue=false)]
        public ItemGiftCertificate GiftCertificate { get; set; }

        /// <summary>
        /// Gets or Sets GoogleProductSearch
        /// </summary>
        [DataMember(Name="google_product_search", EmitDefaultValue=false)]
        public ItemGoogleProductSearch GoogleProductSearch { get; set; }

        /// <summary>
        /// Gets or Sets Identifiers
        /// </summary>
        [DataMember(Name="identifiers", EmitDefaultValue=false)]
        public ItemIdentifiers Identifiers { get; set; }

        /// <summary>
        /// True if this item is inactive and can not be purchased
        /// </summary>
        /// <value>True if this item is inactive and can not be purchased</value>
        [DataMember(Name="inactive", EmitDefaultValue=false)]
        public bool? Inactive { get; set; }

        /// <summary>
        /// Gets or Sets InstantPaymentNotifications
        /// </summary>
        [DataMember(Name="instant_payment_notifications", EmitDefaultValue=false)]
        public ItemInstantPaymentNotifications InstantPaymentNotifications { get; set; }

        /// <summary>
        /// Gets or Sets Internal
        /// </summary>
        [DataMember(Name="internal", EmitDefaultValue=false)]
        public ItemInternal Internal { get; set; }

        /// <summary>
        /// True if this item is a kit
        /// </summary>
        /// <value>True if this item is a kit</value>
        [DataMember(Name="kit", EmitDefaultValue=false)]
        public bool? Kit { get; set; }

        /// <summary>
        /// True if this item can only be usd as a kit component
        /// </summary>
        /// <value>True if this item can only be usd as a kit component</value>
        [DataMember(Name="kit_component_only", EmitDefaultValue=false)]
        public bool? KitComponentOnly { get; set; }

        /// <summary>
        /// Gets or Sets KitDefinition
        /// </summary>
        [DataMember(Name="kit_definition", EmitDefaultValue=false)]
        public ItemKitDefinition KitDefinition { get; set; }

        /// <summary>
        /// Date/time of last modification
        /// </summary>
        /// <value>Date/time of last modification</value>
        [DataMember(Name="last_modified_dts", EmitDefaultValue=false)]
        public string LastModifiedDts { get; set; }

        /// <summary>
        /// UltraCart merchant ID owning item
        /// </summary>
        /// <value>UltraCart merchant ID owning item</value>
        [DataMember(Name="merchant_id", EmitDefaultValue=false)]
        public string MerchantId { get; set; }

        /// <summary>
        /// Unique item id assigned to this item
        /// </summary>
        /// <value>Unique item id assigned to this item</value>
        [DataMember(Name="merchant_item_id", EmitDefaultValue=false)]
        public string MerchantItemId { get; set; }

        /// <summary>
        /// Unique object identifier for this item
        /// </summary>
        /// <value>Unique object identifier for this item</value>
        [DataMember(Name="merchant_item_oid", EmitDefaultValue=false)]
        public int? MerchantItemOid { get; set; }

        /// <summary>
        /// Options
        /// </summary>
        /// <value>Options</value>
        [DataMember(Name="options", EmitDefaultValue=false)]
        public List<ItemOption> Options { get; set; }

        /// <summary>
        /// Parent category of the item.  Zero indicates the root folder.
        /// </summary>
        /// <value>Parent category of the item.  Zero indicates the root folder.</value>
        [DataMember(Name="parent_category_id", EmitDefaultValue=false)]
        public int? ParentCategoryId { get; set; }

        /// <summary>
        /// Parent category path.  / indicates the root folder.  This is the folder structure within item management.
        /// </summary>
        /// <value>Parent category path.  / indicates the root folder.  This is the folder structure within item management.</value>
        [DataMember(Name="parent_category_path", EmitDefaultValue=false)]
        public string ParentCategoryPath { get; set; }

        /// <summary>
        /// Gets or Sets PaymentProcessing
        /// </summary>
        [DataMember(Name="payment_processing", EmitDefaultValue=false)]
        public ItemPaymentProcessing PaymentProcessing { get; set; }

        /// <summary>
        /// Gets or Sets Physical
        /// </summary>
        [DataMember(Name="physical", EmitDefaultValue=false)]
        public ItemPhysical Physical { get; set; }

        /// <summary>
        /// Gets or Sets Pricing
        /// </summary>
        [DataMember(Name="pricing", EmitDefaultValue=false)]
        public ItemPricing Pricing { get; set; }

        /// <summary>
        /// Properties
        /// </summary>
        /// <value>Properties</value>
        [DataMember(Name="properties", EmitDefaultValue=false)]
        public List<ItemProperty> Properties { get; set; }

        /// <summary>
        /// Gets or Sets RealtimePricing
        /// </summary>
        [DataMember(Name="realtime_pricing", EmitDefaultValue=false)]
        public ItemRealtimePricing RealtimePricing { get; set; }

        /// <summary>
        /// Number of days to recommend replenishment after.  Null is not configured.  Set to zero to disable.
        /// </summary>
        /// <value>Number of days to recommend replenishment after.  Null is not configured.  Set to zero to disable.</value>
        [DataMember(Name="recommend_replenishment_days", EmitDefaultValue=false)]
        public int? RecommendReplenishmentDays { get; set; }

        /// <summary>
        /// Gets or Sets Related
        /// </summary>
        [DataMember(Name="related", EmitDefaultValue=false)]
        public ItemRelated Related { get; set; }

        /// <summary>
        /// Gets or Sets Reporting
        /// </summary>
        [DataMember(Name="reporting", EmitDefaultValue=false)]
        public ItemReporting Reporting { get; set; }

        /// <summary>
        /// Gets or Sets Restriction
        /// </summary>
        [DataMember(Name="restriction", EmitDefaultValue=false)]
        public ItemRestriction Restriction { get; set; }

        /// <summary>
        /// Gets or Sets Revguard
        /// </summary>
        [DataMember(Name="revguard", EmitDefaultValue=false)]
        public ItemRevguard Revguard { get; set; }

        /// <summary>
        /// Gets or Sets Reviews
        /// </summary>
        [DataMember(Name="reviews", EmitDefaultValue=false)]
        public ItemReviews Reviews { get; set; }

        /// <summary>
        /// Gets or Sets Salesforce
        /// </summary>
        [DataMember(Name="salesforce", EmitDefaultValue=false)]
        public ItemSalesforce Salesforce { get; set; }

        /// <summary>
        /// Gets or Sets Shipping
        /// </summary>
        [DataMember(Name="shipping", EmitDefaultValue=false)]
        public ItemShipping Shipping { get; set; }

        /// <summary>
        /// Gets or Sets Tags
        /// </summary>
        [DataMember(Name="tags", EmitDefaultValue=false)]
        public ItemTags Tags { get; set; }

        /// <summary>
        /// Gets or Sets Tax
        /// </summary>
        [DataMember(Name="tax", EmitDefaultValue=false)]
        public ItemTax Tax { get; set; }

        /// <summary>
        /// 3rd Party Email Marketing
        /// </summary>
        /// <value>3rd Party Email Marketing</value>
        [DataMember(Name="third_party_email_marketing", EmitDefaultValue=false)]
        public List<ItemThirdPartyEmailMarketing> ThirdPartyEmailMarketing { get; set; }

        /// <summary>
        /// Variant Items
        /// </summary>
        /// <value>Variant Items</value>
        [DataMember(Name="variant_items", EmitDefaultValue=false)]
        public List<ItemVariantItem> VariantItems { get; set; }

        /// <summary>
        /// Variations
        /// </summary>
        /// <value>Variations</value>
        [DataMember(Name="variations", EmitDefaultValue=false)]
        public List<ItemVariation> Variations { get; set; }

        /// <summary>
        /// Gets or Sets WishlistMember
        /// </summary>
        [DataMember(Name="wishlist_member", EmitDefaultValue=false)]
        public ItemWishlistMember WishlistMember { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Item {\n");
            sb.Append("  Accounting: ").Append(Accounting).Append("\n");
            sb.Append("  Amember: ").Append(Amember).Append("\n");
            sb.Append("  AutoOrder: ").Append(AutoOrder).Append("\n");
            sb.Append("  Ccbill: ").Append(Ccbill).Append("\n");
            sb.Append("  ChannelPartnerItemMappings: ").Append(ChannelPartnerItemMappings).Append("\n");
            sb.Append("  Chargeback: ").Append(Chargeback).Append("\n");
            sb.Append("  Checkout: ").Append(Checkout).Append("\n");
            sb.Append("  Content: ").Append(Content).Append("\n");
            sb.Append("  CreationDts: ").Append(CreationDts).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  DescriptionTranslatedTextInstanceOid: ").Append(DescriptionTranslatedTextInstanceOid).Append("\n");
            sb.Append("  DigitalDelivery: ").Append(DigitalDelivery).Append("\n");
            sb.Append("  Ebay: ").Append(Ebay).Append("\n");
            sb.Append("  EmailNotifications: ").Append(EmailNotifications).Append("\n");
            sb.Append("  Enrollment123: ").Append(Enrollment123).Append("\n");
            sb.Append("  FulfillmentAddons: ").Append(FulfillmentAddons).Append("\n");
            sb.Append("  GiftCertificate: ").Append(GiftCertificate).Append("\n");
            sb.Append("  GoogleProductSearch: ").Append(GoogleProductSearch).Append("\n");
            sb.Append("  Identifiers: ").Append(Identifiers).Append("\n");
            sb.Append("  Inactive: ").Append(Inactive).Append("\n");
            sb.Append("  InstantPaymentNotifications: ").Append(InstantPaymentNotifications).Append("\n");
            sb.Append("  Internal: ").Append(Internal).Append("\n");
            sb.Append("  Kit: ").Append(Kit).Append("\n");
            sb.Append("  KitComponentOnly: ").Append(KitComponentOnly).Append("\n");
            sb.Append("  KitDefinition: ").Append(KitDefinition).Append("\n");
            sb.Append("  LastModifiedDts: ").Append(LastModifiedDts).Append("\n");
            sb.Append("  MerchantId: ").Append(MerchantId).Append("\n");
            sb.Append("  MerchantItemId: ").Append(MerchantItemId).Append("\n");
            sb.Append("  MerchantItemOid: ").Append(MerchantItemOid).Append("\n");
            sb.Append("  Options: ").Append(Options).Append("\n");
            sb.Append("  ParentCategoryId: ").Append(ParentCategoryId).Append("\n");
            sb.Append("  ParentCategoryPath: ").Append(ParentCategoryPath).Append("\n");
            sb.Append("  PaymentProcessing: ").Append(PaymentProcessing).Append("\n");
            sb.Append("  Physical: ").Append(Physical).Append("\n");
            sb.Append("  Pricing: ").Append(Pricing).Append("\n");
            sb.Append("  Properties: ").Append(Properties).Append("\n");
            sb.Append("  RealtimePricing: ").Append(RealtimePricing).Append("\n");
            sb.Append("  RecommendReplenishmentDays: ").Append(RecommendReplenishmentDays).Append("\n");
            sb.Append("  Related: ").Append(Related).Append("\n");
            sb.Append("  Reporting: ").Append(Reporting).Append("\n");
            sb.Append("  Restriction: ").Append(Restriction).Append("\n");
            sb.Append("  Revguard: ").Append(Revguard).Append("\n");
            sb.Append("  Reviews: ").Append(Reviews).Append("\n");
            sb.Append("  Salesforce: ").Append(Salesforce).Append("\n");
            sb.Append("  Shipping: ").Append(Shipping).Append("\n");
            sb.Append("  Tags: ").Append(Tags).Append("\n");
            sb.Append("  Tax: ").Append(Tax).Append("\n");
            sb.Append("  ThirdPartyEmailMarketing: ").Append(ThirdPartyEmailMarketing).Append("\n");
            sb.Append("  VariantItems: ").Append(VariantItems).Append("\n");
            sb.Append("  Variations: ").Append(Variations).Append("\n");
            sb.Append("  WishlistMember: ").Append(WishlistMember).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Item);
        }

        /// <summary>
        /// Returns true if Item instances are equal
        /// </summary>
        /// <param name="input">Instance of Item to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Item input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Accounting == input.Accounting ||
                    (this.Accounting != null &&
                    this.Accounting.Equals(input.Accounting))
                ) && 
                (
                    this.Amember == input.Amember ||
                    (this.Amember != null &&
                    this.Amember.Equals(input.Amember))
                ) && 
                (
                    this.AutoOrder == input.AutoOrder ||
                    (this.AutoOrder != null &&
                    this.AutoOrder.Equals(input.AutoOrder))
                ) && 
                (
                    this.Ccbill == input.Ccbill ||
                    (this.Ccbill != null &&
                    this.Ccbill.Equals(input.Ccbill))
                ) && 
                (
                    this.ChannelPartnerItemMappings == input.ChannelPartnerItemMappings ||
                    this.ChannelPartnerItemMappings != null &&
                    this.ChannelPartnerItemMappings.SequenceEqual(input.ChannelPartnerItemMappings)
                ) && 
                (
                    this.Chargeback == input.Chargeback ||
                    (this.Chargeback != null &&
                    this.Chargeback.Equals(input.Chargeback))
                ) && 
                (
                    this.Checkout == input.Checkout ||
                    (this.Checkout != null &&
                    this.Checkout.Equals(input.Checkout))
                ) && 
                (
                    this.Content == input.Content ||
                    (this.Content != null &&
                    this.Content.Equals(input.Content))
                ) && 
                (
                    this.CreationDts == input.CreationDts ||
                    (this.CreationDts != null &&
                    this.CreationDts.Equals(input.CreationDts))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.DescriptionTranslatedTextInstanceOid == input.DescriptionTranslatedTextInstanceOid ||
                    (this.DescriptionTranslatedTextInstanceOid != null &&
                    this.DescriptionTranslatedTextInstanceOid.Equals(input.DescriptionTranslatedTextInstanceOid))
                ) && 
                (
                    this.DigitalDelivery == input.DigitalDelivery ||
                    (this.DigitalDelivery != null &&
                    this.DigitalDelivery.Equals(input.DigitalDelivery))
                ) && 
                (
                    this.Ebay == input.Ebay ||
                    (this.Ebay != null &&
                    this.Ebay.Equals(input.Ebay))
                ) && 
                (
                    this.EmailNotifications == input.EmailNotifications ||
                    (this.EmailNotifications != null &&
                    this.EmailNotifications.Equals(input.EmailNotifications))
                ) && 
                (
                    this.Enrollment123 == input.Enrollment123 ||
                    (this.Enrollment123 != null &&
                    this.Enrollment123.Equals(input.Enrollment123))
                ) && 
                (
                    this.FulfillmentAddons == input.FulfillmentAddons ||
                    this.FulfillmentAddons != null &&
                    this.FulfillmentAddons.SequenceEqual(input.FulfillmentAddons)
                ) && 
                (
                    this.GiftCertificate == input.GiftCertificate ||
                    (this.GiftCertificate != null &&
                    this.GiftCertificate.Equals(input.GiftCertificate))
                ) && 
                (
                    this.GoogleProductSearch == input.GoogleProductSearch ||
                    (this.GoogleProductSearch != null &&
                    this.GoogleProductSearch.Equals(input.GoogleProductSearch))
                ) && 
                (
                    this.Identifiers == input.Identifiers ||
                    (this.Identifiers != null &&
                    this.Identifiers.Equals(input.Identifiers))
                ) && 
                (
                    this.Inactive == input.Inactive ||
                    (this.Inactive != null &&
                    this.Inactive.Equals(input.Inactive))
                ) && 
                (
                    this.InstantPaymentNotifications == input.InstantPaymentNotifications ||
                    (this.InstantPaymentNotifications != null &&
                    this.InstantPaymentNotifications.Equals(input.InstantPaymentNotifications))
                ) && 
                (
                    this.Internal == input.Internal ||
                    (this.Internal != null &&
                    this.Internal.Equals(input.Internal))
                ) && 
                (
                    this.Kit == input.Kit ||
                    (this.Kit != null &&
                    this.Kit.Equals(input.Kit))
                ) && 
                (
                    this.KitComponentOnly == input.KitComponentOnly ||
                    (this.KitComponentOnly != null &&
                    this.KitComponentOnly.Equals(input.KitComponentOnly))
                ) && 
                (
                    this.KitDefinition == input.KitDefinition ||
                    (this.KitDefinition != null &&
                    this.KitDefinition.Equals(input.KitDefinition))
                ) && 
                (
                    this.LastModifiedDts == input.LastModifiedDts ||
                    (this.LastModifiedDts != null &&
                    this.LastModifiedDts.Equals(input.LastModifiedDts))
                ) && 
                (
                    this.MerchantId == input.MerchantId ||
                    (this.MerchantId != null &&
                    this.MerchantId.Equals(input.MerchantId))
                ) && 
                (
                    this.MerchantItemId == input.MerchantItemId ||
                    (this.MerchantItemId != null &&
                    this.MerchantItemId.Equals(input.MerchantItemId))
                ) && 
                (
                    this.MerchantItemOid == input.MerchantItemOid ||
                    (this.MerchantItemOid != null &&
                    this.MerchantItemOid.Equals(input.MerchantItemOid))
                ) && 
                (
                    this.Options == input.Options ||
                    this.Options != null &&
                    this.Options.SequenceEqual(input.Options)
                ) && 
                (
                    this.ParentCategoryId == input.ParentCategoryId ||
                    (this.ParentCategoryId != null &&
                    this.ParentCategoryId.Equals(input.ParentCategoryId))
                ) && 
                (
                    this.ParentCategoryPath == input.ParentCategoryPath ||
                    (this.ParentCategoryPath != null &&
                    this.ParentCategoryPath.Equals(input.ParentCategoryPath))
                ) && 
                (
                    this.PaymentProcessing == input.PaymentProcessing ||
                    (this.PaymentProcessing != null &&
                    this.PaymentProcessing.Equals(input.PaymentProcessing))
                ) && 
                (
                    this.Physical == input.Physical ||
                    (this.Physical != null &&
                    this.Physical.Equals(input.Physical))
                ) && 
                (
                    this.Pricing == input.Pricing ||
                    (this.Pricing != null &&
                    this.Pricing.Equals(input.Pricing))
                ) && 
                (
                    this.Properties == input.Properties ||
                    this.Properties != null &&
                    this.Properties.SequenceEqual(input.Properties)
                ) && 
                (
                    this.RealtimePricing == input.RealtimePricing ||
                    (this.RealtimePricing != null &&
                    this.RealtimePricing.Equals(input.RealtimePricing))
                ) && 
                (
                    this.RecommendReplenishmentDays == input.RecommendReplenishmentDays ||
                    (this.RecommendReplenishmentDays != null &&
                    this.RecommendReplenishmentDays.Equals(input.RecommendReplenishmentDays))
                ) && 
                (
                    this.Related == input.Related ||
                    (this.Related != null &&
                    this.Related.Equals(input.Related))
                ) && 
                (
                    this.Reporting == input.Reporting ||
                    (this.Reporting != null &&
                    this.Reporting.Equals(input.Reporting))
                ) && 
                (
                    this.Restriction == input.Restriction ||
                    (this.Restriction != null &&
                    this.Restriction.Equals(input.Restriction))
                ) && 
                (
                    this.Revguard == input.Revguard ||
                    (this.Revguard != null &&
                    this.Revguard.Equals(input.Revguard))
                ) && 
                (
                    this.Reviews == input.Reviews ||
                    (this.Reviews != null &&
                    this.Reviews.Equals(input.Reviews))
                ) && 
                (
                    this.Salesforce == input.Salesforce ||
                    (this.Salesforce != null &&
                    this.Salesforce.Equals(input.Salesforce))
                ) && 
                (
                    this.Shipping == input.Shipping ||
                    (this.Shipping != null &&
                    this.Shipping.Equals(input.Shipping))
                ) && 
                (
                    this.Tags == input.Tags ||
                    (this.Tags != null &&
                    this.Tags.Equals(input.Tags))
                ) && 
                (
                    this.Tax == input.Tax ||
                    (this.Tax != null &&
                    this.Tax.Equals(input.Tax))
                ) && 
                (
                    this.ThirdPartyEmailMarketing == input.ThirdPartyEmailMarketing ||
                    this.ThirdPartyEmailMarketing != null &&
                    this.ThirdPartyEmailMarketing.SequenceEqual(input.ThirdPartyEmailMarketing)
                ) && 
                (
                    this.VariantItems == input.VariantItems ||
                    this.VariantItems != null &&
                    this.VariantItems.SequenceEqual(input.VariantItems)
                ) && 
                (
                    this.Variations == input.Variations ||
                    this.Variations != null &&
                    this.Variations.SequenceEqual(input.Variations)
                ) && 
                (
                    this.WishlistMember == input.WishlistMember ||
                    (this.WishlistMember != null &&
                    this.WishlistMember.Equals(input.WishlistMember))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Accounting != null)
                    hashCode = hashCode * 59 + this.Accounting.GetHashCode();
                if (this.Amember != null)
                    hashCode = hashCode * 59 + this.Amember.GetHashCode();
                if (this.AutoOrder != null)
                    hashCode = hashCode * 59 + this.AutoOrder.GetHashCode();
                if (this.Ccbill != null)
                    hashCode = hashCode * 59 + this.Ccbill.GetHashCode();
                if (this.ChannelPartnerItemMappings != null)
                    hashCode = hashCode * 59 + this.ChannelPartnerItemMappings.GetHashCode();
                if (this.Chargeback != null)
                    hashCode = hashCode * 59 + this.Chargeback.GetHashCode();
                if (this.Checkout != null)
                    hashCode = hashCode * 59 + this.Checkout.GetHashCode();
                if (this.Content != null)
                    hashCode = hashCode * 59 + this.Content.GetHashCode();
                if (this.CreationDts != null)
                    hashCode = hashCode * 59 + this.CreationDts.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                if (this.DescriptionTranslatedTextInstanceOid != null)
                    hashCode = hashCode * 59 + this.DescriptionTranslatedTextInstanceOid.GetHashCode();
                if (this.DigitalDelivery != null)
                    hashCode = hashCode * 59 + this.DigitalDelivery.GetHashCode();
                if (this.Ebay != null)
                    hashCode = hashCode * 59 + this.Ebay.GetHashCode();
                if (this.EmailNotifications != null)
                    hashCode = hashCode * 59 + this.EmailNotifications.GetHashCode();
                if (this.Enrollment123 != null)
                    hashCode = hashCode * 59 + this.Enrollment123.GetHashCode();
                if (this.FulfillmentAddons != null)
                    hashCode = hashCode * 59 + this.FulfillmentAddons.GetHashCode();
                if (this.GiftCertificate != null)
                    hashCode = hashCode * 59 + this.GiftCertificate.GetHashCode();
                if (this.GoogleProductSearch != null)
                    hashCode = hashCode * 59 + this.GoogleProductSearch.GetHashCode();
                if (this.Identifiers != null)
                    hashCode = hashCode * 59 + this.Identifiers.GetHashCode();
                if (this.Inactive != null)
                    hashCode = hashCode * 59 + this.Inactive.GetHashCode();
                if (this.InstantPaymentNotifications != null)
                    hashCode = hashCode * 59 + this.InstantPaymentNotifications.GetHashCode();
                if (this.Internal != null)
                    hashCode = hashCode * 59 + this.Internal.GetHashCode();
                if (this.Kit != null)
                    hashCode = hashCode * 59 + this.Kit.GetHashCode();
                if (this.KitComponentOnly != null)
                    hashCode = hashCode * 59 + this.KitComponentOnly.GetHashCode();
                if (this.KitDefinition != null)
                    hashCode = hashCode * 59 + this.KitDefinition.GetHashCode();
                if (this.LastModifiedDts != null)
                    hashCode = hashCode * 59 + this.LastModifiedDts.GetHashCode();
                if (this.MerchantId != null)
                    hashCode = hashCode * 59 + this.MerchantId.GetHashCode();
                if (this.MerchantItemId != null)
                    hashCode = hashCode * 59 + this.MerchantItemId.GetHashCode();
                if (this.MerchantItemOid != null)
                    hashCode = hashCode * 59 + this.MerchantItemOid.GetHashCode();
                if (this.Options != null)
                    hashCode = hashCode * 59 + this.Options.GetHashCode();
                if (this.ParentCategoryId != null)
                    hashCode = hashCode * 59 + this.ParentCategoryId.GetHashCode();
                if (this.ParentCategoryPath != null)
                    hashCode = hashCode * 59 + this.ParentCategoryPath.GetHashCode();
                if (this.PaymentProcessing != null)
                    hashCode = hashCode * 59 + this.PaymentProcessing.GetHashCode();
                if (this.Physical != null)
                    hashCode = hashCode * 59 + this.Physical.GetHashCode();
                if (this.Pricing != null)
                    hashCode = hashCode * 59 + this.Pricing.GetHashCode();
                if (this.Properties != null)
                    hashCode = hashCode * 59 + this.Properties.GetHashCode();
                if (this.RealtimePricing != null)
                    hashCode = hashCode * 59 + this.RealtimePricing.GetHashCode();
                if (this.RecommendReplenishmentDays != null)
                    hashCode = hashCode * 59 + this.RecommendReplenishmentDays.GetHashCode();
                if (this.Related != null)
                    hashCode = hashCode * 59 + this.Related.GetHashCode();
                if (this.Reporting != null)
                    hashCode = hashCode * 59 + this.Reporting.GetHashCode();
                if (this.Restriction != null)
                    hashCode = hashCode * 59 + this.Restriction.GetHashCode();
                if (this.Revguard != null)
                    hashCode = hashCode * 59 + this.Revguard.GetHashCode();
                if (this.Reviews != null)
                    hashCode = hashCode * 59 + this.Reviews.GetHashCode();
                if (this.Salesforce != null)
                    hashCode = hashCode * 59 + this.Salesforce.GetHashCode();
                if (this.Shipping != null)
                    hashCode = hashCode * 59 + this.Shipping.GetHashCode();
                if (this.Tags != null)
                    hashCode = hashCode * 59 + this.Tags.GetHashCode();
                if (this.Tax != null)
                    hashCode = hashCode * 59 + this.Tax.GetHashCode();
                if (this.ThirdPartyEmailMarketing != null)
                    hashCode = hashCode * 59 + this.ThirdPartyEmailMarketing.GetHashCode();
                if (this.VariantItems != null)
                    hashCode = hashCode * 59 + this.VariantItems.GetHashCode();
                if (this.Variations != null)
                    hashCode = hashCode * 59 + this.Variations.GetHashCode();
                if (this.WishlistMember != null)
                    hashCode = hashCode * 59 + this.WishlistMember.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Description (string) maxLength
            if(this.Description != null && this.Description.Length > 512)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Description, length must be less than 512.", new [] { "Description" });
            }

            // MerchantId (string) maxLength
            if(this.MerchantId != null && this.MerchantId.Length > 5)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for MerchantId, length must be less than 5.", new [] { "MerchantId" });
            }

            // MerchantItemId (string) maxLength
            if(this.MerchantItemId != null && this.MerchantItemId.Length > 20)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for MerchantItemId, length must be less than 20.", new [] { "MerchantItemId" });
            }

            yield break;
        }
    }

}
