/* 
 * UltraCart Rest API V2
 *
 * This is the next generation UltraCart REST API...
 *
 * OpenAPI spec version: 2.0.0
 * Contact: support@ultracart.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = com.ultracart.admin.v2.Client.SwaggerDateConverter;

namespace com.ultracart.admin.v2.Model
{
    /// <summary>
    /// Item
    /// </summary>
    [DataContract]
    public partial class Item :  IEquatable<Item>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Item" /> class.
        /// </summary>
        /// <param name="Accounting">Accounting.</param>
        /// <param name="Amember">Amember.</param>
        /// <param name="AutoOrder">AutoOrder.</param>
        /// <param name="Ccbill">Ccbill.</param>
        /// <param name="ChannelPartnerMappings">Channel Partner Item Mapping.</param>
        /// <param name="Chargeback">Chargeback.</param>
        /// <param name="Checkout">Checkout.</param>
        /// <param name="Content">Content.</param>
        /// <param name="CreationDts">Date/time of creation.</param>
        /// <param name="Description">Description of the item up to 500 characters..</param>
        /// <param name="DescriptionTranslatedTextInstanceOid">Description translated text instance id.</param>
        /// <param name="DigitalDelivery">DigitalDelivery.</param>
        /// <param name="Ebay">Ebay.</param>
        /// <param name="EmailNotifications">EmailNotifications.</param>
        /// <param name="Enrollment123">Enrollment123.</param>
        /// <param name="GiftCertificate">GiftCertificate.</param>
        /// <param name="GoogleProductSearch">GoogleProductSearch.</param>
        /// <param name="Identifiers">Identifiers.</param>
        /// <param name="Inactive">True if this item is inactive and can not be purchased.</param>
        /// <param name="InstantPaymentNotifications">InstantPaymentNotifications.</param>
        /// <param name="_Internal">_Internal.</param>
        /// <param name="Kit">True if this item is a kit.</param>
        /// <param name="KitDefinition">KitDefinition.</param>
        /// <param name="LastModifiedDts">Date/time of last modification.</param>
        /// <param name="MerchantId">UltraCart merchant ID owning item.</param>
        /// <param name="MerchantItemId">Unique item id assigned to this item.</param>
        /// <param name="MerchantItemOid">Unique object identifier for this item.</param>
        /// <param name="Options">Options.</param>
        /// <param name="ParentCategoryId">Parent category of the item.  Zero indicates the root folder..</param>
        /// <param name="PaymentProcessing">PaymentProcessing.</param>
        /// <param name="Physical">Physical.</param>
        /// <param name="Pricing">Pricing.</param>
        /// <param name="RealtimePricing">RealtimePricing.</param>
        /// <param name="Related">Related.</param>
        /// <param name="Reporting">Reporting.</param>
        /// <param name="Restriction">Restriction.</param>
        /// <param name="Revguard">Revguard.</param>
        /// <param name="Reviews">Reviews.</param>
        /// <param name="Salesforce">Salesforce.</param>
        /// <param name="Shipping">Shipping.</param>
        /// <param name="Tax">Tax.</param>
        /// <param name="ThirdPartyEmailMarketing">3rd Party Email Marketing.</param>
        /// <param name="VariantItems">Variant Items.</param>
        /// <param name="Variations">Variations.</param>
        /// <param name="WishlistMember">WishlistMember.</param>
        public Item(ItemAccounting Accounting = default(ItemAccounting), ItemAmember Amember = default(ItemAmember), ItemAutoOrder AutoOrder = default(ItemAutoOrder), ItemCCBill Ccbill = default(ItemCCBill), List<ItemChannelPartnerMapping> ChannelPartnerMappings = default(List<ItemChannelPartnerMapping>), ItemChargeback Chargeback = default(ItemChargeback), ItemCheckout Checkout = default(ItemCheckout), ItemContent Content = default(ItemContent), string CreationDts = default(string), string Description = default(string), int? DescriptionTranslatedTextInstanceOid = default(int?), ItemDigitalDelivery DigitalDelivery = default(ItemDigitalDelivery), ItemEbay Ebay = default(ItemEbay), ItemEmailNotifications EmailNotifications = default(ItemEmailNotifications), ItemEnrollment123 Enrollment123 = default(ItemEnrollment123), ItemGiftCertificate GiftCertificate = default(ItemGiftCertificate), ItemGoogleProductSearch GoogleProductSearch = default(ItemGoogleProductSearch), ItemIdentifiers Identifiers = default(ItemIdentifiers), bool? Inactive = default(bool?), ItemInstantPaymentNotifications InstantPaymentNotifications = default(ItemInstantPaymentNotifications), ItemInternal _Internal = default(ItemInternal), bool? Kit = default(bool?), ItemKitDefinition KitDefinition = default(ItemKitDefinition), string LastModifiedDts = default(string), string MerchantId = default(string), string MerchantItemId = default(string), int? MerchantItemOid = default(int?), List<ItemOption> Options = default(List<ItemOption>), int? ParentCategoryId = default(int?), ItemPaymentProcessing PaymentProcessing = default(ItemPaymentProcessing), ItemPhysical Physical = default(ItemPhysical), ItemPricing Pricing = default(ItemPricing), ItemRealtimePricing RealtimePricing = default(ItemRealtimePricing), ItemRelated Related = default(ItemRelated), ItemReporting Reporting = default(ItemReporting), ItemRestriction Restriction = default(ItemRestriction), ItemRevguard Revguard = default(ItemRevguard), ItemReviews Reviews = default(ItemReviews), ItemSalesforce Salesforce = default(ItemSalesforce), ItemShipping Shipping = default(ItemShipping), ItemTax Tax = default(ItemTax), List<ItemThirdPartyEmailMarketing> ThirdPartyEmailMarketing = default(List<ItemThirdPartyEmailMarketing>), List<ItemVariantItem> VariantItems = default(List<ItemVariantItem>), List<ItemVariation> Variations = default(List<ItemVariation>), ItemWishlistMember WishlistMember = default(ItemWishlistMember))
        {
            this.Accounting = Accounting;
            this.Amember = Amember;
            this.AutoOrder = AutoOrder;
            this.Ccbill = Ccbill;
            this.ChannelPartnerMappings = ChannelPartnerMappings;
            this.Chargeback = Chargeback;
            this.Checkout = Checkout;
            this.Content = Content;
            this.CreationDts = CreationDts;
            this.Description = Description;
            this.DescriptionTranslatedTextInstanceOid = DescriptionTranslatedTextInstanceOid;
            this.DigitalDelivery = DigitalDelivery;
            this.Ebay = Ebay;
            this.EmailNotifications = EmailNotifications;
            this.Enrollment123 = Enrollment123;
            this.GiftCertificate = GiftCertificate;
            this.GoogleProductSearch = GoogleProductSearch;
            this.Identifiers = Identifiers;
            this.Inactive = Inactive;
            this.InstantPaymentNotifications = InstantPaymentNotifications;
            this._Internal = _Internal;
            this.Kit = Kit;
            this.KitDefinition = KitDefinition;
            this.LastModifiedDts = LastModifiedDts;
            this.MerchantId = MerchantId;
            this.MerchantItemId = MerchantItemId;
            this.MerchantItemOid = MerchantItemOid;
            this.Options = Options;
            this.ParentCategoryId = ParentCategoryId;
            this.PaymentProcessing = PaymentProcessing;
            this.Physical = Physical;
            this.Pricing = Pricing;
            this.RealtimePricing = RealtimePricing;
            this.Related = Related;
            this.Reporting = Reporting;
            this.Restriction = Restriction;
            this.Revguard = Revguard;
            this.Reviews = Reviews;
            this.Salesforce = Salesforce;
            this.Shipping = Shipping;
            this.Tax = Tax;
            this.ThirdPartyEmailMarketing = ThirdPartyEmailMarketing;
            this.VariantItems = VariantItems;
            this.Variations = Variations;
            this.WishlistMember = WishlistMember;
        }
        
        /// <summary>
        /// Gets or Sets Accounting
        /// </summary>
        [DataMember(Name="accounting", EmitDefaultValue=false)]
        public ItemAccounting Accounting { get; set; }

        /// <summary>
        /// Gets or Sets Amember
        /// </summary>
        [DataMember(Name="amember", EmitDefaultValue=false)]
        public ItemAmember Amember { get; set; }

        /// <summary>
        /// Gets or Sets AutoOrder
        /// </summary>
        [DataMember(Name="auto_order", EmitDefaultValue=false)]
        public ItemAutoOrder AutoOrder { get; set; }

        /// <summary>
        /// Gets or Sets Ccbill
        /// </summary>
        [DataMember(Name="ccbill", EmitDefaultValue=false)]
        public ItemCCBill Ccbill { get; set; }

        /// <summary>
        /// Channel Partner Item Mapping
        /// </summary>
        /// <value>Channel Partner Item Mapping</value>
        [DataMember(Name="channelPartnerMappings", EmitDefaultValue=false)]
        public List<ItemChannelPartnerMapping> ChannelPartnerMappings { get; set; }

        /// <summary>
        /// Gets or Sets Chargeback
        /// </summary>
        [DataMember(Name="chargeback", EmitDefaultValue=false)]
        public ItemChargeback Chargeback { get; set; }

        /// <summary>
        /// Gets or Sets Checkout
        /// </summary>
        [DataMember(Name="checkout", EmitDefaultValue=false)]
        public ItemCheckout Checkout { get; set; }

        /// <summary>
        /// Gets or Sets Content
        /// </summary>
        [DataMember(Name="content", EmitDefaultValue=false)]
        public ItemContent Content { get; set; }

        /// <summary>
        /// Date/time of creation
        /// </summary>
        /// <value>Date/time of creation</value>
        [DataMember(Name="creation_dts", EmitDefaultValue=false)]
        public string CreationDts { get; set; }

        /// <summary>
        /// Description of the item up to 500 characters.
        /// </summary>
        /// <value>Description of the item up to 500 characters.</value>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }

        /// <summary>
        /// Description translated text instance id
        /// </summary>
        /// <value>Description translated text instance id</value>
        [DataMember(Name="description_translated_text_instance_oid", EmitDefaultValue=false)]
        public int? DescriptionTranslatedTextInstanceOid { get; set; }

        /// <summary>
        /// Gets or Sets DigitalDelivery
        /// </summary>
        [DataMember(Name="digital_delivery", EmitDefaultValue=false)]
        public ItemDigitalDelivery DigitalDelivery { get; set; }

        /// <summary>
        /// Gets or Sets Ebay
        /// </summary>
        [DataMember(Name="ebay", EmitDefaultValue=false)]
        public ItemEbay Ebay { get; set; }

        /// <summary>
        /// Gets or Sets EmailNotifications
        /// </summary>
        [DataMember(Name="email_notifications", EmitDefaultValue=false)]
        public ItemEmailNotifications EmailNotifications { get; set; }

        /// <summary>
        /// Gets or Sets Enrollment123
        /// </summary>
        [DataMember(Name="enrollment123", EmitDefaultValue=false)]
        public ItemEnrollment123 Enrollment123 { get; set; }

        /// <summary>
        /// Gets or Sets GiftCertificate
        /// </summary>
        [DataMember(Name="gift_certificate", EmitDefaultValue=false)]
        public ItemGiftCertificate GiftCertificate { get; set; }

        /// <summary>
        /// Gets or Sets GoogleProductSearch
        /// </summary>
        [DataMember(Name="google_product_search", EmitDefaultValue=false)]
        public ItemGoogleProductSearch GoogleProductSearch { get; set; }

        /// <summary>
        /// Gets or Sets Identifiers
        /// </summary>
        [DataMember(Name="identifiers", EmitDefaultValue=false)]
        public ItemIdentifiers Identifiers { get; set; }

        /// <summary>
        /// True if this item is inactive and can not be purchased
        /// </summary>
        /// <value>True if this item is inactive and can not be purchased</value>
        [DataMember(Name="inactive", EmitDefaultValue=false)]
        public bool? Inactive { get; set; }

        /// <summary>
        /// Gets or Sets InstantPaymentNotifications
        /// </summary>
        [DataMember(Name="instant_payment_notifications", EmitDefaultValue=false)]
        public ItemInstantPaymentNotifications InstantPaymentNotifications { get; set; }

        /// <summary>
        /// Gets or Sets _Internal
        /// </summary>
        [DataMember(Name="internal", EmitDefaultValue=false)]
        public ItemInternal _Internal { get; set; }

        /// <summary>
        /// True if this item is a kit
        /// </summary>
        /// <value>True if this item is a kit</value>
        [DataMember(Name="kit", EmitDefaultValue=false)]
        public bool? Kit { get; set; }

        /// <summary>
        /// Gets or Sets KitDefinition
        /// </summary>
        [DataMember(Name="kit_definition", EmitDefaultValue=false)]
        public ItemKitDefinition KitDefinition { get; set; }

        /// <summary>
        /// Date/time of last modification
        /// </summary>
        /// <value>Date/time of last modification</value>
        [DataMember(Name="last_modified_dts", EmitDefaultValue=false)]
        public string LastModifiedDts { get; set; }

        /// <summary>
        /// UltraCart merchant ID owning item
        /// </summary>
        /// <value>UltraCart merchant ID owning item</value>
        [DataMember(Name="merchant_id", EmitDefaultValue=false)]
        public string MerchantId { get; set; }

        /// <summary>
        /// Unique item id assigned to this item
        /// </summary>
        /// <value>Unique item id assigned to this item</value>
        [DataMember(Name="merchant_item_id", EmitDefaultValue=false)]
        public string MerchantItemId { get; set; }

        /// <summary>
        /// Unique object identifier for this item
        /// </summary>
        /// <value>Unique object identifier for this item</value>
        [DataMember(Name="merchant_item_oid", EmitDefaultValue=false)]
        public int? MerchantItemOid { get; set; }

        /// <summary>
        /// Options
        /// </summary>
        /// <value>Options</value>
        [DataMember(Name="options", EmitDefaultValue=false)]
        public List<ItemOption> Options { get; set; }

        /// <summary>
        /// Parent category of the item.  Zero indicates the root folder.
        /// </summary>
        /// <value>Parent category of the item.  Zero indicates the root folder.</value>
        [DataMember(Name="parent_category_id", EmitDefaultValue=false)]
        public int? ParentCategoryId { get; set; }

        /// <summary>
        /// Gets or Sets PaymentProcessing
        /// </summary>
        [DataMember(Name="payment_processing", EmitDefaultValue=false)]
        public ItemPaymentProcessing PaymentProcessing { get; set; }

        /// <summary>
        /// Gets or Sets Physical
        /// </summary>
        [DataMember(Name="physical", EmitDefaultValue=false)]
        public ItemPhysical Physical { get; set; }

        /// <summary>
        /// Gets or Sets Pricing
        /// </summary>
        [DataMember(Name="pricing", EmitDefaultValue=false)]
        public ItemPricing Pricing { get; set; }

        /// <summary>
        /// Gets or Sets RealtimePricing
        /// </summary>
        [DataMember(Name="realtime_pricing", EmitDefaultValue=false)]
        public ItemRealtimePricing RealtimePricing { get; set; }

        /// <summary>
        /// Gets or Sets Related
        /// </summary>
        [DataMember(Name="related", EmitDefaultValue=false)]
        public ItemRelated Related { get; set; }

        /// <summary>
        /// Gets or Sets Reporting
        /// </summary>
        [DataMember(Name="reporting", EmitDefaultValue=false)]
        public ItemReporting Reporting { get; set; }

        /// <summary>
        /// Gets or Sets Restriction
        /// </summary>
        [DataMember(Name="restriction", EmitDefaultValue=false)]
        public ItemRestriction Restriction { get; set; }

        /// <summary>
        /// Gets or Sets Revguard
        /// </summary>
        [DataMember(Name="revguard", EmitDefaultValue=false)]
        public ItemRevguard Revguard { get; set; }

        /// <summary>
        /// Gets or Sets Reviews
        /// </summary>
        [DataMember(Name="reviews", EmitDefaultValue=false)]
        public ItemReviews Reviews { get; set; }

        /// <summary>
        /// Gets or Sets Salesforce
        /// </summary>
        [DataMember(Name="salesforce", EmitDefaultValue=false)]
        public ItemSalesforce Salesforce { get; set; }

        /// <summary>
        /// Gets or Sets Shipping
        /// </summary>
        [DataMember(Name="shipping", EmitDefaultValue=false)]
        public ItemShipping Shipping { get; set; }

        /// <summary>
        /// Gets or Sets Tax
        /// </summary>
        [DataMember(Name="tax", EmitDefaultValue=false)]
        public ItemTax Tax { get; set; }

        /// <summary>
        /// 3rd Party Email Marketing
        /// </summary>
        /// <value>3rd Party Email Marketing</value>
        [DataMember(Name="third_party_email_marketing", EmitDefaultValue=false)]
        public List<ItemThirdPartyEmailMarketing> ThirdPartyEmailMarketing { get; set; }

        /// <summary>
        /// Variant Items
        /// </summary>
        /// <value>Variant Items</value>
        [DataMember(Name="variant_items", EmitDefaultValue=false)]
        public List<ItemVariantItem> VariantItems { get; set; }

        /// <summary>
        /// Variations
        /// </summary>
        /// <value>Variations</value>
        [DataMember(Name="variations", EmitDefaultValue=false)]
        public List<ItemVariation> Variations { get; set; }

        /// <summary>
        /// Gets or Sets WishlistMember
        /// </summary>
        [DataMember(Name="wishlist_member", EmitDefaultValue=false)]
        public ItemWishlistMember WishlistMember { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Item {\n");
            sb.Append("  Accounting: ").Append(Accounting).Append("\n");
            sb.Append("  Amember: ").Append(Amember).Append("\n");
            sb.Append("  AutoOrder: ").Append(AutoOrder).Append("\n");
            sb.Append("  Ccbill: ").Append(Ccbill).Append("\n");
            sb.Append("  ChannelPartnerMappings: ").Append(ChannelPartnerMappings).Append("\n");
            sb.Append("  Chargeback: ").Append(Chargeback).Append("\n");
            sb.Append("  Checkout: ").Append(Checkout).Append("\n");
            sb.Append("  Content: ").Append(Content).Append("\n");
            sb.Append("  CreationDts: ").Append(CreationDts).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  DescriptionTranslatedTextInstanceOid: ").Append(DescriptionTranslatedTextInstanceOid).Append("\n");
            sb.Append("  DigitalDelivery: ").Append(DigitalDelivery).Append("\n");
            sb.Append("  Ebay: ").Append(Ebay).Append("\n");
            sb.Append("  EmailNotifications: ").Append(EmailNotifications).Append("\n");
            sb.Append("  Enrollment123: ").Append(Enrollment123).Append("\n");
            sb.Append("  GiftCertificate: ").Append(GiftCertificate).Append("\n");
            sb.Append("  GoogleProductSearch: ").Append(GoogleProductSearch).Append("\n");
            sb.Append("  Identifiers: ").Append(Identifiers).Append("\n");
            sb.Append("  Inactive: ").Append(Inactive).Append("\n");
            sb.Append("  InstantPaymentNotifications: ").Append(InstantPaymentNotifications).Append("\n");
            sb.Append("  _Internal: ").Append(_Internal).Append("\n");
            sb.Append("  Kit: ").Append(Kit).Append("\n");
            sb.Append("  KitDefinition: ").Append(KitDefinition).Append("\n");
            sb.Append("  LastModifiedDts: ").Append(LastModifiedDts).Append("\n");
            sb.Append("  MerchantId: ").Append(MerchantId).Append("\n");
            sb.Append("  MerchantItemId: ").Append(MerchantItemId).Append("\n");
            sb.Append("  MerchantItemOid: ").Append(MerchantItemOid).Append("\n");
            sb.Append("  Options: ").Append(Options).Append("\n");
            sb.Append("  ParentCategoryId: ").Append(ParentCategoryId).Append("\n");
            sb.Append("  PaymentProcessing: ").Append(PaymentProcessing).Append("\n");
            sb.Append("  Physical: ").Append(Physical).Append("\n");
            sb.Append("  Pricing: ").Append(Pricing).Append("\n");
            sb.Append("  RealtimePricing: ").Append(RealtimePricing).Append("\n");
            sb.Append("  Related: ").Append(Related).Append("\n");
            sb.Append("  Reporting: ").Append(Reporting).Append("\n");
            sb.Append("  Restriction: ").Append(Restriction).Append("\n");
            sb.Append("  Revguard: ").Append(Revguard).Append("\n");
            sb.Append("  Reviews: ").Append(Reviews).Append("\n");
            sb.Append("  Salesforce: ").Append(Salesforce).Append("\n");
            sb.Append("  Shipping: ").Append(Shipping).Append("\n");
            sb.Append("  Tax: ").Append(Tax).Append("\n");
            sb.Append("  ThirdPartyEmailMarketing: ").Append(ThirdPartyEmailMarketing).Append("\n");
            sb.Append("  VariantItems: ").Append(VariantItems).Append("\n");
            sb.Append("  Variations: ").Append(Variations).Append("\n");
            sb.Append("  WishlistMember: ").Append(WishlistMember).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as Item);
        }

        /// <summary>
        /// Returns true if Item instances are equal
        /// </summary>
        /// <param name="other">Instance of Item to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Item other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Accounting == other.Accounting ||
                    this.Accounting != null &&
                    this.Accounting.Equals(other.Accounting)
                ) && 
                (
                    this.Amember == other.Amember ||
                    this.Amember != null &&
                    this.Amember.Equals(other.Amember)
                ) && 
                (
                    this.AutoOrder == other.AutoOrder ||
                    this.AutoOrder != null &&
                    this.AutoOrder.Equals(other.AutoOrder)
                ) && 
                (
                    this.Ccbill == other.Ccbill ||
                    this.Ccbill != null &&
                    this.Ccbill.Equals(other.Ccbill)
                ) && 
                (
                    this.ChannelPartnerMappings == other.ChannelPartnerMappings ||
                    this.ChannelPartnerMappings != null &&
                    this.ChannelPartnerMappings.SequenceEqual(other.ChannelPartnerMappings)
                ) && 
                (
                    this.Chargeback == other.Chargeback ||
                    this.Chargeback != null &&
                    this.Chargeback.Equals(other.Chargeback)
                ) && 
                (
                    this.Checkout == other.Checkout ||
                    this.Checkout != null &&
                    this.Checkout.Equals(other.Checkout)
                ) && 
                (
                    this.Content == other.Content ||
                    this.Content != null &&
                    this.Content.Equals(other.Content)
                ) && 
                (
                    this.CreationDts == other.CreationDts ||
                    this.CreationDts != null &&
                    this.CreationDts.Equals(other.CreationDts)
                ) && 
                (
                    this.Description == other.Description ||
                    this.Description != null &&
                    this.Description.Equals(other.Description)
                ) && 
                (
                    this.DescriptionTranslatedTextInstanceOid == other.DescriptionTranslatedTextInstanceOid ||
                    this.DescriptionTranslatedTextInstanceOid != null &&
                    this.DescriptionTranslatedTextInstanceOid.Equals(other.DescriptionTranslatedTextInstanceOid)
                ) && 
                (
                    this.DigitalDelivery == other.DigitalDelivery ||
                    this.DigitalDelivery != null &&
                    this.DigitalDelivery.Equals(other.DigitalDelivery)
                ) && 
                (
                    this.Ebay == other.Ebay ||
                    this.Ebay != null &&
                    this.Ebay.Equals(other.Ebay)
                ) && 
                (
                    this.EmailNotifications == other.EmailNotifications ||
                    this.EmailNotifications != null &&
                    this.EmailNotifications.Equals(other.EmailNotifications)
                ) && 
                (
                    this.Enrollment123 == other.Enrollment123 ||
                    this.Enrollment123 != null &&
                    this.Enrollment123.Equals(other.Enrollment123)
                ) && 
                (
                    this.GiftCertificate == other.GiftCertificate ||
                    this.GiftCertificate != null &&
                    this.GiftCertificate.Equals(other.GiftCertificate)
                ) && 
                (
                    this.GoogleProductSearch == other.GoogleProductSearch ||
                    this.GoogleProductSearch != null &&
                    this.GoogleProductSearch.Equals(other.GoogleProductSearch)
                ) && 
                (
                    this.Identifiers == other.Identifiers ||
                    this.Identifiers != null &&
                    this.Identifiers.Equals(other.Identifiers)
                ) && 
                (
                    this.Inactive == other.Inactive ||
                    this.Inactive != null &&
                    this.Inactive.Equals(other.Inactive)
                ) && 
                (
                    this.InstantPaymentNotifications == other.InstantPaymentNotifications ||
                    this.InstantPaymentNotifications != null &&
                    this.InstantPaymentNotifications.Equals(other.InstantPaymentNotifications)
                ) && 
                (
                    this._Internal == other._Internal ||
                    this._Internal != null &&
                    this._Internal.Equals(other._Internal)
                ) && 
                (
                    this.Kit == other.Kit ||
                    this.Kit != null &&
                    this.Kit.Equals(other.Kit)
                ) && 
                (
                    this.KitDefinition == other.KitDefinition ||
                    this.KitDefinition != null &&
                    this.KitDefinition.Equals(other.KitDefinition)
                ) && 
                (
                    this.LastModifiedDts == other.LastModifiedDts ||
                    this.LastModifiedDts != null &&
                    this.LastModifiedDts.Equals(other.LastModifiedDts)
                ) && 
                (
                    this.MerchantId == other.MerchantId ||
                    this.MerchantId != null &&
                    this.MerchantId.Equals(other.MerchantId)
                ) && 
                (
                    this.MerchantItemId == other.MerchantItemId ||
                    this.MerchantItemId != null &&
                    this.MerchantItemId.Equals(other.MerchantItemId)
                ) && 
                (
                    this.MerchantItemOid == other.MerchantItemOid ||
                    this.MerchantItemOid != null &&
                    this.MerchantItemOid.Equals(other.MerchantItemOid)
                ) && 
                (
                    this.Options == other.Options ||
                    this.Options != null &&
                    this.Options.SequenceEqual(other.Options)
                ) && 
                (
                    this.ParentCategoryId == other.ParentCategoryId ||
                    this.ParentCategoryId != null &&
                    this.ParentCategoryId.Equals(other.ParentCategoryId)
                ) && 
                (
                    this.PaymentProcessing == other.PaymentProcessing ||
                    this.PaymentProcessing != null &&
                    this.PaymentProcessing.Equals(other.PaymentProcessing)
                ) && 
                (
                    this.Physical == other.Physical ||
                    this.Physical != null &&
                    this.Physical.Equals(other.Physical)
                ) && 
                (
                    this.Pricing == other.Pricing ||
                    this.Pricing != null &&
                    this.Pricing.Equals(other.Pricing)
                ) && 
                (
                    this.RealtimePricing == other.RealtimePricing ||
                    this.RealtimePricing != null &&
                    this.RealtimePricing.Equals(other.RealtimePricing)
                ) && 
                (
                    this.Related == other.Related ||
                    this.Related != null &&
                    this.Related.Equals(other.Related)
                ) && 
                (
                    this.Reporting == other.Reporting ||
                    this.Reporting != null &&
                    this.Reporting.Equals(other.Reporting)
                ) && 
                (
                    this.Restriction == other.Restriction ||
                    this.Restriction != null &&
                    this.Restriction.Equals(other.Restriction)
                ) && 
                (
                    this.Revguard == other.Revguard ||
                    this.Revguard != null &&
                    this.Revguard.Equals(other.Revguard)
                ) && 
                (
                    this.Reviews == other.Reviews ||
                    this.Reviews != null &&
                    this.Reviews.Equals(other.Reviews)
                ) && 
                (
                    this.Salesforce == other.Salesforce ||
                    this.Salesforce != null &&
                    this.Salesforce.Equals(other.Salesforce)
                ) && 
                (
                    this.Shipping == other.Shipping ||
                    this.Shipping != null &&
                    this.Shipping.Equals(other.Shipping)
                ) && 
                (
                    this.Tax == other.Tax ||
                    this.Tax != null &&
                    this.Tax.Equals(other.Tax)
                ) && 
                (
                    this.ThirdPartyEmailMarketing == other.ThirdPartyEmailMarketing ||
                    this.ThirdPartyEmailMarketing != null &&
                    this.ThirdPartyEmailMarketing.SequenceEqual(other.ThirdPartyEmailMarketing)
                ) && 
                (
                    this.VariantItems == other.VariantItems ||
                    this.VariantItems != null &&
                    this.VariantItems.SequenceEqual(other.VariantItems)
                ) && 
                (
                    this.Variations == other.Variations ||
                    this.Variations != null &&
                    this.Variations.SequenceEqual(other.Variations)
                ) && 
                (
                    this.WishlistMember == other.WishlistMember ||
                    this.WishlistMember != null &&
                    this.WishlistMember.Equals(other.WishlistMember)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Accounting != null)
                    hash = hash * 59 + this.Accounting.GetHashCode();
                if (this.Amember != null)
                    hash = hash * 59 + this.Amember.GetHashCode();
                if (this.AutoOrder != null)
                    hash = hash * 59 + this.AutoOrder.GetHashCode();
                if (this.Ccbill != null)
                    hash = hash * 59 + this.Ccbill.GetHashCode();
                if (this.ChannelPartnerMappings != null)
                    hash = hash * 59 + this.ChannelPartnerMappings.GetHashCode();
                if (this.Chargeback != null)
                    hash = hash * 59 + this.Chargeback.GetHashCode();
                if (this.Checkout != null)
                    hash = hash * 59 + this.Checkout.GetHashCode();
                if (this.Content != null)
                    hash = hash * 59 + this.Content.GetHashCode();
                if (this.CreationDts != null)
                    hash = hash * 59 + this.CreationDts.GetHashCode();
                if (this.Description != null)
                    hash = hash * 59 + this.Description.GetHashCode();
                if (this.DescriptionTranslatedTextInstanceOid != null)
                    hash = hash * 59 + this.DescriptionTranslatedTextInstanceOid.GetHashCode();
                if (this.DigitalDelivery != null)
                    hash = hash * 59 + this.DigitalDelivery.GetHashCode();
                if (this.Ebay != null)
                    hash = hash * 59 + this.Ebay.GetHashCode();
                if (this.EmailNotifications != null)
                    hash = hash * 59 + this.EmailNotifications.GetHashCode();
                if (this.Enrollment123 != null)
                    hash = hash * 59 + this.Enrollment123.GetHashCode();
                if (this.GiftCertificate != null)
                    hash = hash * 59 + this.GiftCertificate.GetHashCode();
                if (this.GoogleProductSearch != null)
                    hash = hash * 59 + this.GoogleProductSearch.GetHashCode();
                if (this.Identifiers != null)
                    hash = hash * 59 + this.Identifiers.GetHashCode();
                if (this.Inactive != null)
                    hash = hash * 59 + this.Inactive.GetHashCode();
                if (this.InstantPaymentNotifications != null)
                    hash = hash * 59 + this.InstantPaymentNotifications.GetHashCode();
                if (this._Internal != null)
                    hash = hash * 59 + this._Internal.GetHashCode();
                if (this.Kit != null)
                    hash = hash * 59 + this.Kit.GetHashCode();
                if (this.KitDefinition != null)
                    hash = hash * 59 + this.KitDefinition.GetHashCode();
                if (this.LastModifiedDts != null)
                    hash = hash * 59 + this.LastModifiedDts.GetHashCode();
                if (this.MerchantId != null)
                    hash = hash * 59 + this.MerchantId.GetHashCode();
                if (this.MerchantItemId != null)
                    hash = hash * 59 + this.MerchantItemId.GetHashCode();
                if (this.MerchantItemOid != null)
                    hash = hash * 59 + this.MerchantItemOid.GetHashCode();
                if (this.Options != null)
                    hash = hash * 59 + this.Options.GetHashCode();
                if (this.ParentCategoryId != null)
                    hash = hash * 59 + this.ParentCategoryId.GetHashCode();
                if (this.PaymentProcessing != null)
                    hash = hash * 59 + this.PaymentProcessing.GetHashCode();
                if (this.Physical != null)
                    hash = hash * 59 + this.Physical.GetHashCode();
                if (this.Pricing != null)
                    hash = hash * 59 + this.Pricing.GetHashCode();
                if (this.RealtimePricing != null)
                    hash = hash * 59 + this.RealtimePricing.GetHashCode();
                if (this.Related != null)
                    hash = hash * 59 + this.Related.GetHashCode();
                if (this.Reporting != null)
                    hash = hash * 59 + this.Reporting.GetHashCode();
                if (this.Restriction != null)
                    hash = hash * 59 + this.Restriction.GetHashCode();
                if (this.Revguard != null)
                    hash = hash * 59 + this.Revguard.GetHashCode();
                if (this.Reviews != null)
                    hash = hash * 59 + this.Reviews.GetHashCode();
                if (this.Salesforce != null)
                    hash = hash * 59 + this.Salesforce.GetHashCode();
                if (this.Shipping != null)
                    hash = hash * 59 + this.Shipping.GetHashCode();
                if (this.Tax != null)
                    hash = hash * 59 + this.Tax.GetHashCode();
                if (this.ThirdPartyEmailMarketing != null)
                    hash = hash * 59 + this.ThirdPartyEmailMarketing.GetHashCode();
                if (this.VariantItems != null)
                    hash = hash * 59 + this.VariantItems.GetHashCode();
                if (this.Variations != null)
                    hash = hash * 59 + this.Variations.GetHashCode();
                if (this.WishlistMember != null)
                    hash = hash * 59 + this.WishlistMember.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Description (string) maxLength
            if(this.Description != null && this.Description.Length > 512)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Description, length must be less than 512.", new [] { "Description" });
            }

            // MerchantId (string) maxLength
            if(this.MerchantId != null && this.MerchantId.Length > 5)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for MerchantId, length must be less than 5.", new [] { "MerchantId" });
            }

            // MerchantItemId (string) maxLength
            if(this.MerchantItemId != null && this.MerchantItemId.Length > 20)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for MerchantItemId, length must be less than 20.", new [] { "MerchantItemId" });
            }

            yield break;
        }
    }

}
