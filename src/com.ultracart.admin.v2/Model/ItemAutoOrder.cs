/*
 * UltraCart Rest API V2
 *
 * UltraCart REST API Version 2
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@ultracart.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = com.ultracart.admin.v2.Client.OpenAPIDateConverter;

namespace com.ultracart.admin.v2.Model
{
    /// <summary>
    /// ItemAutoOrder
    /// </summary>
    [DataContract]
    public partial class ItemAutoOrder :  IEquatable<ItemAutoOrder>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ItemAutoOrder" /> class.
        /// </summary>
        /// <param name="authFutureAmount">Amount to try and authorize for the future rebill.</param>
        /// <param name="authTestAmount">Amount to try and test authorize.</param>
        /// <param name="autoOrderCancelChargeMinimumBalance">If true, the cost of the cancel item will be the remaining balance of the minimum rebill or lifetime value.</param>
        /// <param name="autoOrderCancelItemId">Item id to attempt charging the customer for if they cancel.</param>
        /// <param name="autoOrderCancelItemOid">Item object identifier to attempt charging the customer for if they cancel.</param>
        /// <param name="autoOrderCancelMinimumLifeTimeValue">The minimum life time value that must be paid in order to not be charged the cancellation item..</param>
        /// <param name="autoOrderCancelMinimumRebillValue">The minimum rebill value that must be paid in order to not be charged the cancellation item..</param>
        /// <param name="autoOrderDowngradeItems">List of downgrade items presented to customer service representatives.</param>
        /// <param name="autoOrderPaused">True if the rebill processing of this item is paused.</param>
        /// <param name="autoOrderProhibitExpiringCards">Minimum number of months before expiration for the card.  Overrides the account level setting if higher.  Set to zero to disable..</param>
        /// <param name="autoOrderSchedules">The user selectable schedules that are available.</param>
        /// <param name="autoOrderUpgradeItems">List of upgrade items presented to customer service representatives.</param>
        /// <param name="autoOrderUpsell">True if this item uses a fixed upsell step schedule.</param>
        /// <param name="autoOrderUpsellNoEasyCancel">Do not send the easy cancel email to the customer.</param>
        /// <param name="autoOrderUpsellOnePerCustomer">Limit the purchase of this item to one per customer.</param>
        /// <param name="autoOrderable">True if this item can be automatically ordered by the customer.</param>
        /// <param name="cancelOtherAutoOrders">True if other auto orders for this customer should be canceled when this item is ordered.</param>
        /// <param name="freeShippingAutoOrder">True if the customer should be given free shipping.</param>
        /// <param name="refundOtherAutoOrders">True if other auto orders for this customer should refunded if this item is refunded..</param>
        /// <param name="steps">The rebill steps if this auto order is an upsell.</param>
        public ItemAutoOrder(decimal authFutureAmount = default(decimal), decimal authTestAmount = default(decimal), bool autoOrderCancelChargeMinimumBalance = default(bool), string autoOrderCancelItemId = default(string), int autoOrderCancelItemOid = default(int), decimal autoOrderCancelMinimumLifeTimeValue = default(decimal), decimal autoOrderCancelMinimumRebillValue = default(decimal), List<string> autoOrderDowngradeItems = default(List<string>), bool autoOrderPaused = default(bool), int autoOrderProhibitExpiringCards = default(int), List<string> autoOrderSchedules = default(List<string>), List<string> autoOrderUpgradeItems = default(List<string>), bool autoOrderUpsell = default(bool), bool autoOrderUpsellNoEasyCancel = default(bool), bool autoOrderUpsellOnePerCustomer = default(bool), bool autoOrderable = default(bool), bool cancelOtherAutoOrders = default(bool), bool freeShippingAutoOrder = default(bool), bool refundOtherAutoOrders = default(bool), List<ItemAutoOrderStep> steps = default(List<ItemAutoOrderStep>))
        {
            this.AuthFutureAmount = authFutureAmount;
            this.AuthTestAmount = authTestAmount;
            this.AutoOrderCancelChargeMinimumBalance = autoOrderCancelChargeMinimumBalance;
            this.AutoOrderCancelItemId = autoOrderCancelItemId;
            this.AutoOrderCancelItemOid = autoOrderCancelItemOid;
            this.AutoOrderCancelMinimumLifeTimeValue = autoOrderCancelMinimumLifeTimeValue;
            this.AutoOrderCancelMinimumRebillValue = autoOrderCancelMinimumRebillValue;
            this.AutoOrderDowngradeItems = autoOrderDowngradeItems;
            this.AutoOrderPaused = autoOrderPaused;
            this.AutoOrderProhibitExpiringCards = autoOrderProhibitExpiringCards;
            this.AutoOrderSchedules = autoOrderSchedules;
            this.AutoOrderUpgradeItems = autoOrderUpgradeItems;
            this.AutoOrderUpsell = autoOrderUpsell;
            this.AutoOrderUpsellNoEasyCancel = autoOrderUpsellNoEasyCancel;
            this.AutoOrderUpsellOnePerCustomer = autoOrderUpsellOnePerCustomer;
            this.AutoOrderable = autoOrderable;
            this.CancelOtherAutoOrders = cancelOtherAutoOrders;
            this.FreeShippingAutoOrder = freeShippingAutoOrder;
            this.RefundOtherAutoOrders = refundOtherAutoOrders;
            this.Steps = steps;
        }

        /// <summary>
        /// Amount to try and authorize for the future rebill
        /// </summary>
        /// <value>Amount to try and authorize for the future rebill</value>
        [DataMember(Name="auth_future_amount", EmitDefaultValue=false)]
        public decimal AuthFutureAmount { get; set; }

        /// <summary>
        /// Amount to try and test authorize
        /// </summary>
        /// <value>Amount to try and test authorize</value>
        [DataMember(Name="auth_test_amount", EmitDefaultValue=false)]
        public decimal AuthTestAmount { get; set; }

        /// <summary>
        /// If true, the cost of the cancel item will be the remaining balance of the minimum rebill or lifetime value
        /// </summary>
        /// <value>If true, the cost of the cancel item will be the remaining balance of the minimum rebill or lifetime value</value>
        [DataMember(Name="auto_order_cancel_charge_minimum_balance", EmitDefaultValue=false)]
        public bool AutoOrderCancelChargeMinimumBalance { get; set; }

        /// <summary>
        /// Item id to attempt charging the customer for if they cancel
        /// </summary>
        /// <value>Item id to attempt charging the customer for if they cancel</value>
        [DataMember(Name="auto_order_cancel_item_id", EmitDefaultValue=false)]
        public string AutoOrderCancelItemId { get; set; }

        /// <summary>
        /// Item object identifier to attempt charging the customer for if they cancel
        /// </summary>
        /// <value>Item object identifier to attempt charging the customer for if they cancel</value>
        [DataMember(Name="auto_order_cancel_item_oid", EmitDefaultValue=false)]
        public int AutoOrderCancelItemOid { get; set; }

        /// <summary>
        /// The minimum life time value that must be paid in order to not be charged the cancellation item.
        /// </summary>
        /// <value>The minimum life time value that must be paid in order to not be charged the cancellation item.</value>
        [DataMember(Name="auto_order_cancel_minimum_life_time_value", EmitDefaultValue=false)]
        public decimal AutoOrderCancelMinimumLifeTimeValue { get; set; }

        /// <summary>
        /// The minimum rebill value that must be paid in order to not be charged the cancellation item.
        /// </summary>
        /// <value>The minimum rebill value that must be paid in order to not be charged the cancellation item.</value>
        [DataMember(Name="auto_order_cancel_minimum_rebill_value", EmitDefaultValue=false)]
        public decimal AutoOrderCancelMinimumRebillValue { get; set; }

        /// <summary>
        /// List of downgrade items presented to customer service representatives
        /// </summary>
        /// <value>List of downgrade items presented to customer service representatives</value>
        [DataMember(Name="auto_order_downgrade_items", EmitDefaultValue=false)]
        public List<string> AutoOrderDowngradeItems { get; set; }

        /// <summary>
        /// True if the rebill processing of this item is paused
        /// </summary>
        /// <value>True if the rebill processing of this item is paused</value>
        [DataMember(Name="auto_order_paused", EmitDefaultValue=false)]
        public bool AutoOrderPaused { get; set; }

        /// <summary>
        /// Minimum number of months before expiration for the card.  Overrides the account level setting if higher.  Set to zero to disable.
        /// </summary>
        /// <value>Minimum number of months before expiration for the card.  Overrides the account level setting if higher.  Set to zero to disable.</value>
        [DataMember(Name="auto_order_prohibit_expiring_cards", EmitDefaultValue=false)]
        public int AutoOrderProhibitExpiringCards { get; set; }

        /// <summary>
        /// The user selectable schedules that are available
        /// </summary>
        /// <value>The user selectable schedules that are available</value>
        [DataMember(Name="auto_order_schedules", EmitDefaultValue=false)]
        public List<string> AutoOrderSchedules { get; set; }

        /// <summary>
        /// List of upgrade items presented to customer service representatives
        /// </summary>
        /// <value>List of upgrade items presented to customer service representatives</value>
        [DataMember(Name="auto_order_upgrade_items", EmitDefaultValue=false)]
        public List<string> AutoOrderUpgradeItems { get; set; }

        /// <summary>
        /// True if this item uses a fixed upsell step schedule
        /// </summary>
        /// <value>True if this item uses a fixed upsell step schedule</value>
        [DataMember(Name="auto_order_upsell", EmitDefaultValue=false)]
        public bool AutoOrderUpsell { get; set; }

        /// <summary>
        /// Do not send the easy cancel email to the customer
        /// </summary>
        /// <value>Do not send the easy cancel email to the customer</value>
        [DataMember(Name="auto_order_upsell_no_easy_cancel", EmitDefaultValue=false)]
        public bool AutoOrderUpsellNoEasyCancel { get; set; }

        /// <summary>
        /// Limit the purchase of this item to one per customer
        /// </summary>
        /// <value>Limit the purchase of this item to one per customer</value>
        [DataMember(Name="auto_order_upsell_one_per_customer", EmitDefaultValue=false)]
        public bool AutoOrderUpsellOnePerCustomer { get; set; }

        /// <summary>
        /// True if this item can be automatically ordered by the customer
        /// </summary>
        /// <value>True if this item can be automatically ordered by the customer</value>
        [DataMember(Name="auto_orderable", EmitDefaultValue=false)]
        public bool AutoOrderable { get; set; }

        /// <summary>
        /// True if other auto orders for this customer should be canceled when this item is ordered
        /// </summary>
        /// <value>True if other auto orders for this customer should be canceled when this item is ordered</value>
        [DataMember(Name="cancel_other_auto_orders", EmitDefaultValue=false)]
        public bool CancelOtherAutoOrders { get; set; }

        /// <summary>
        /// True if the customer should be given free shipping
        /// </summary>
        /// <value>True if the customer should be given free shipping</value>
        [DataMember(Name="free_shipping_auto_order", EmitDefaultValue=false)]
        public bool FreeShippingAutoOrder { get; set; }

        /// <summary>
        /// True if other auto orders for this customer should refunded if this item is refunded.
        /// </summary>
        /// <value>True if other auto orders for this customer should refunded if this item is refunded.</value>
        [DataMember(Name="refund_other_auto_orders", EmitDefaultValue=false)]
        public bool RefundOtherAutoOrders { get; set; }

        /// <summary>
        /// The rebill steps if this auto order is an upsell
        /// </summary>
        /// <value>The rebill steps if this auto order is an upsell</value>
        [DataMember(Name="steps", EmitDefaultValue=false)]
        public List<ItemAutoOrderStep> Steps { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ItemAutoOrder {\n");
            sb.Append("  AuthFutureAmount: ").Append(AuthFutureAmount).Append("\n");
            sb.Append("  AuthTestAmount: ").Append(AuthTestAmount).Append("\n");
            sb.Append("  AutoOrderCancelChargeMinimumBalance: ").Append(AutoOrderCancelChargeMinimumBalance).Append("\n");
            sb.Append("  AutoOrderCancelItemId: ").Append(AutoOrderCancelItemId).Append("\n");
            sb.Append("  AutoOrderCancelItemOid: ").Append(AutoOrderCancelItemOid).Append("\n");
            sb.Append("  AutoOrderCancelMinimumLifeTimeValue: ").Append(AutoOrderCancelMinimumLifeTimeValue).Append("\n");
            sb.Append("  AutoOrderCancelMinimumRebillValue: ").Append(AutoOrderCancelMinimumRebillValue).Append("\n");
            sb.Append("  AutoOrderDowngradeItems: ").Append(AutoOrderDowngradeItems).Append("\n");
            sb.Append("  AutoOrderPaused: ").Append(AutoOrderPaused).Append("\n");
            sb.Append("  AutoOrderProhibitExpiringCards: ").Append(AutoOrderProhibitExpiringCards).Append("\n");
            sb.Append("  AutoOrderSchedules: ").Append(AutoOrderSchedules).Append("\n");
            sb.Append("  AutoOrderUpgradeItems: ").Append(AutoOrderUpgradeItems).Append("\n");
            sb.Append("  AutoOrderUpsell: ").Append(AutoOrderUpsell).Append("\n");
            sb.Append("  AutoOrderUpsellNoEasyCancel: ").Append(AutoOrderUpsellNoEasyCancel).Append("\n");
            sb.Append("  AutoOrderUpsellOnePerCustomer: ").Append(AutoOrderUpsellOnePerCustomer).Append("\n");
            sb.Append("  AutoOrderable: ").Append(AutoOrderable).Append("\n");
            sb.Append("  CancelOtherAutoOrders: ").Append(CancelOtherAutoOrders).Append("\n");
            sb.Append("  FreeShippingAutoOrder: ").Append(FreeShippingAutoOrder).Append("\n");
            sb.Append("  RefundOtherAutoOrders: ").Append(RefundOtherAutoOrders).Append("\n");
            sb.Append("  Steps: ").Append(Steps).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ItemAutoOrder);
        }

        /// <summary>
        /// Returns true if ItemAutoOrder instances are equal
        /// </summary>
        /// <param name="input">Instance of ItemAutoOrder to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ItemAutoOrder input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.AuthFutureAmount == input.AuthFutureAmount ||
                    (this.AuthFutureAmount != null &&
                    this.AuthFutureAmount.Equals(input.AuthFutureAmount))
                ) && 
                (
                    this.AuthTestAmount == input.AuthTestAmount ||
                    (this.AuthTestAmount != null &&
                    this.AuthTestAmount.Equals(input.AuthTestAmount))
                ) && 
                (
                    this.AutoOrderCancelChargeMinimumBalance == input.AutoOrderCancelChargeMinimumBalance ||
                    (this.AutoOrderCancelChargeMinimumBalance != null &&
                    this.AutoOrderCancelChargeMinimumBalance.Equals(input.AutoOrderCancelChargeMinimumBalance))
                ) && 
                (
                    this.AutoOrderCancelItemId == input.AutoOrderCancelItemId ||
                    (this.AutoOrderCancelItemId != null &&
                    this.AutoOrderCancelItemId.Equals(input.AutoOrderCancelItemId))
                ) && 
                (
                    this.AutoOrderCancelItemOid == input.AutoOrderCancelItemOid ||
                    (this.AutoOrderCancelItemOid != null &&
                    this.AutoOrderCancelItemOid.Equals(input.AutoOrderCancelItemOid))
                ) && 
                (
                    this.AutoOrderCancelMinimumLifeTimeValue == input.AutoOrderCancelMinimumLifeTimeValue ||
                    (this.AutoOrderCancelMinimumLifeTimeValue != null &&
                    this.AutoOrderCancelMinimumLifeTimeValue.Equals(input.AutoOrderCancelMinimumLifeTimeValue))
                ) && 
                (
                    this.AutoOrderCancelMinimumRebillValue == input.AutoOrderCancelMinimumRebillValue ||
                    (this.AutoOrderCancelMinimumRebillValue != null &&
                    this.AutoOrderCancelMinimumRebillValue.Equals(input.AutoOrderCancelMinimumRebillValue))
                ) && 
                (
                    this.AutoOrderDowngradeItems == input.AutoOrderDowngradeItems ||
                    this.AutoOrderDowngradeItems != null &&
                    input.AutoOrderDowngradeItems != null &&
                    this.AutoOrderDowngradeItems.SequenceEqual(input.AutoOrderDowngradeItems)
                ) && 
                (
                    this.AutoOrderPaused == input.AutoOrderPaused ||
                    (this.AutoOrderPaused != null &&
                    this.AutoOrderPaused.Equals(input.AutoOrderPaused))
                ) && 
                (
                    this.AutoOrderProhibitExpiringCards == input.AutoOrderProhibitExpiringCards ||
                    (this.AutoOrderProhibitExpiringCards != null &&
                    this.AutoOrderProhibitExpiringCards.Equals(input.AutoOrderProhibitExpiringCards))
                ) && 
                (
                    this.AutoOrderSchedules == input.AutoOrderSchedules ||
                    this.AutoOrderSchedules != null &&
                    input.AutoOrderSchedules != null &&
                    this.AutoOrderSchedules.SequenceEqual(input.AutoOrderSchedules)
                ) && 
                (
                    this.AutoOrderUpgradeItems == input.AutoOrderUpgradeItems ||
                    this.AutoOrderUpgradeItems != null &&
                    input.AutoOrderUpgradeItems != null &&
                    this.AutoOrderUpgradeItems.SequenceEqual(input.AutoOrderUpgradeItems)
                ) && 
                (
                    this.AutoOrderUpsell == input.AutoOrderUpsell ||
                    (this.AutoOrderUpsell != null &&
                    this.AutoOrderUpsell.Equals(input.AutoOrderUpsell))
                ) && 
                (
                    this.AutoOrderUpsellNoEasyCancel == input.AutoOrderUpsellNoEasyCancel ||
                    (this.AutoOrderUpsellNoEasyCancel != null &&
                    this.AutoOrderUpsellNoEasyCancel.Equals(input.AutoOrderUpsellNoEasyCancel))
                ) && 
                (
                    this.AutoOrderUpsellOnePerCustomer == input.AutoOrderUpsellOnePerCustomer ||
                    (this.AutoOrderUpsellOnePerCustomer != null &&
                    this.AutoOrderUpsellOnePerCustomer.Equals(input.AutoOrderUpsellOnePerCustomer))
                ) && 
                (
                    this.AutoOrderable == input.AutoOrderable ||
                    (this.AutoOrderable != null &&
                    this.AutoOrderable.Equals(input.AutoOrderable))
                ) && 
                (
                    this.CancelOtherAutoOrders == input.CancelOtherAutoOrders ||
                    (this.CancelOtherAutoOrders != null &&
                    this.CancelOtherAutoOrders.Equals(input.CancelOtherAutoOrders))
                ) && 
                (
                    this.FreeShippingAutoOrder == input.FreeShippingAutoOrder ||
                    (this.FreeShippingAutoOrder != null &&
                    this.FreeShippingAutoOrder.Equals(input.FreeShippingAutoOrder))
                ) && 
                (
                    this.RefundOtherAutoOrders == input.RefundOtherAutoOrders ||
                    (this.RefundOtherAutoOrders != null &&
                    this.RefundOtherAutoOrders.Equals(input.RefundOtherAutoOrders))
                ) && 
                (
                    this.Steps == input.Steps ||
                    this.Steps != null &&
                    input.Steps != null &&
                    this.Steps.SequenceEqual(input.Steps)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AuthFutureAmount != null)
                    hashCode = hashCode * 59 + this.AuthFutureAmount.GetHashCode();
                if (this.AuthTestAmount != null)
                    hashCode = hashCode * 59 + this.AuthTestAmount.GetHashCode();
                if (this.AutoOrderCancelChargeMinimumBalance != null)
                    hashCode = hashCode * 59 + this.AutoOrderCancelChargeMinimumBalance.GetHashCode();
                if (this.AutoOrderCancelItemId != null)
                    hashCode = hashCode * 59 + this.AutoOrderCancelItemId.GetHashCode();
                if (this.AutoOrderCancelItemOid != null)
                    hashCode = hashCode * 59 + this.AutoOrderCancelItemOid.GetHashCode();
                if (this.AutoOrderCancelMinimumLifeTimeValue != null)
                    hashCode = hashCode * 59 + this.AutoOrderCancelMinimumLifeTimeValue.GetHashCode();
                if (this.AutoOrderCancelMinimumRebillValue != null)
                    hashCode = hashCode * 59 + this.AutoOrderCancelMinimumRebillValue.GetHashCode();
                if (this.AutoOrderDowngradeItems != null)
                    hashCode = hashCode * 59 + this.AutoOrderDowngradeItems.GetHashCode();
                if (this.AutoOrderPaused != null)
                    hashCode = hashCode * 59 + this.AutoOrderPaused.GetHashCode();
                if (this.AutoOrderProhibitExpiringCards != null)
                    hashCode = hashCode * 59 + this.AutoOrderProhibitExpiringCards.GetHashCode();
                if (this.AutoOrderSchedules != null)
                    hashCode = hashCode * 59 + this.AutoOrderSchedules.GetHashCode();
                if (this.AutoOrderUpgradeItems != null)
                    hashCode = hashCode * 59 + this.AutoOrderUpgradeItems.GetHashCode();
                if (this.AutoOrderUpsell != null)
                    hashCode = hashCode * 59 + this.AutoOrderUpsell.GetHashCode();
                if (this.AutoOrderUpsellNoEasyCancel != null)
                    hashCode = hashCode * 59 + this.AutoOrderUpsellNoEasyCancel.GetHashCode();
                if (this.AutoOrderUpsellOnePerCustomer != null)
                    hashCode = hashCode * 59 + this.AutoOrderUpsellOnePerCustomer.GetHashCode();
                if (this.AutoOrderable != null)
                    hashCode = hashCode * 59 + this.AutoOrderable.GetHashCode();
                if (this.CancelOtherAutoOrders != null)
                    hashCode = hashCode * 59 + this.CancelOtherAutoOrders.GetHashCode();
                if (this.FreeShippingAutoOrder != null)
                    hashCode = hashCode * 59 + this.FreeShippingAutoOrder.GetHashCode();
                if (this.RefundOtherAutoOrders != null)
                    hashCode = hashCode * 59 + this.RefundOtherAutoOrders.GetHashCode();
                if (this.Steps != null)
                    hashCode = hashCode * 59 + this.Steps.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // AutoOrderCancelItemId (string) maxLength
            if(this.AutoOrderCancelItemId != null && this.AutoOrderCancelItemId.Length > 20)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for AutoOrderCancelItemId, length must be less than 20.", new [] { "AutoOrderCancelItemId" });
            }


            yield break;
        }
    }

}
