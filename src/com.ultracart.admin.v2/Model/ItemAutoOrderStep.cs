/* 
 * UltraCart Rest API V2
 *
 * This is the next generation UltraCart REST API...
 *
 * OpenAPI spec version: 2.0.0
 * Contact: support@ultracart.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace com.ultracart.admin.v2.Model
{
    /// <summary>
    /// ItemAutoOrderStep
    /// </summary>
    [DataContract]
    public partial class ItemAutoOrderStep :  IEquatable<ItemAutoOrderStep>
    {
        /// <summary>
        /// Type of step (item or pause)
        /// </summary>
        /// <value>Type of step (item or pause)</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TypeEnum
        {
            
            /// <summary>
            /// Enum Item for "item"
            /// </summary>
            [EnumMember(Value = "item")]
            Item,
            
            /// <summary>
            /// Enum Pause for "pause"
            /// </summary>
            [EnumMember(Value = "pause")]
            Pause
        }

        /// <summary>
        /// Type of step (item or pause)
        /// </summary>
        /// <value>Type of step (item or pause)</value>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public TypeEnum? Type { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="ItemAutoOrderStep" /> class.
        /// </summary>
        /// <param name="ArbitraryScheduleDays">If the schedule is arbitrary, then this is the number of days.</param>
        /// <param name="ArbitraryUnitCost">Arbitrary unit cost used to override the regular item cost.</param>
        /// <param name="ArbitraryUnitCostSchedules">Arbitrary unit costs schedules for more advanced discounting by rebill attempt.</param>
        /// <param name="GrandfatherPricing">Grand-father pricing configuration if the rebill schedule has changed over time.</param>
        /// <param name="ManagedBy">Managed by (defaults to UltraCart).</param>
        /// <param name="PauseDays">Number of days to pause.</param>
        /// <param name="PauseUntilDate">Wait for this step to happen until the specified date.</param>
        /// <param name="PreshipmentNoticeDays">If set, a pre-shipment notice is sent to the customer this many days in advance.</param>
        /// <param name="RecurringMerchantItemId">Item id to rebill.</param>
        /// <param name="RecurringMerchantItemOid">Item object identifier to rebill.</param>
        /// <param name="RepeatCount">Number of times to rebill.  Last step can be null for infinite.</param>
        /// <param name="Schedule">Frequency of the rebill.</param>
        /// <param name="SubscribeEmailListName">Email list name to subscribe the customer to when the rebill occurs.</param>
        /// <param name="SubscribeEmailListOid">Email list identifier to subscribe the customer to when this rebill occurs.</param>
        /// <param name="Type">Type of step (item or pause).</param>
        public ItemAutoOrderStep(int? ArbitraryScheduleDays = null, decimal? ArbitraryUnitCost = null, List<ItemAutoOrderStepArbitraryUnitCostSchedule> ArbitraryUnitCostSchedules = null, List<ItemAutoOrderStepGrandfatherPricing> GrandfatherPricing = null, string ManagedBy = null, int? PauseDays = null, string PauseUntilDate = null, int? PreshipmentNoticeDays = null, string RecurringMerchantItemId = null, int? RecurringMerchantItemOid = null, int? RepeatCount = null, string Schedule = null, string SubscribeEmailListName = null, int? SubscribeEmailListOid = null, TypeEnum? Type = null)
        {
            this.ArbitraryScheduleDays = ArbitraryScheduleDays;
            this.ArbitraryUnitCost = ArbitraryUnitCost;
            this.ArbitraryUnitCostSchedules = ArbitraryUnitCostSchedules;
            this.GrandfatherPricing = GrandfatherPricing;
            this.ManagedBy = ManagedBy;
            this.PauseDays = PauseDays;
            this.PauseUntilDate = PauseUntilDate;
            this.PreshipmentNoticeDays = PreshipmentNoticeDays;
            this.RecurringMerchantItemId = RecurringMerchantItemId;
            this.RecurringMerchantItemOid = RecurringMerchantItemOid;
            this.RepeatCount = RepeatCount;
            this.Schedule = Schedule;
            this.SubscribeEmailListName = SubscribeEmailListName;
            this.SubscribeEmailListOid = SubscribeEmailListOid;
            this.Type = Type;
        }
        
        /// <summary>
        /// If the schedule is arbitrary, then this is the number of days
        /// </summary>
        /// <value>If the schedule is arbitrary, then this is the number of days</value>
        [DataMember(Name="arbitrary_schedule_days", EmitDefaultValue=false)]
        public int? ArbitraryScheduleDays { get; set; }
        /// <summary>
        /// Arbitrary unit cost used to override the regular item cost
        /// </summary>
        /// <value>Arbitrary unit cost used to override the regular item cost</value>
        [DataMember(Name="arbitrary_unit_cost", EmitDefaultValue=false)]
        public decimal? ArbitraryUnitCost { get; set; }
        /// <summary>
        /// Arbitrary unit costs schedules for more advanced discounting by rebill attempt
        /// </summary>
        /// <value>Arbitrary unit costs schedules for more advanced discounting by rebill attempt</value>
        [DataMember(Name="arbitrary_unit_cost_schedules", EmitDefaultValue=false)]
        public List<ItemAutoOrderStepArbitraryUnitCostSchedule> ArbitraryUnitCostSchedules { get; set; }
        /// <summary>
        /// Grand-father pricing configuration if the rebill schedule has changed over time
        /// </summary>
        /// <value>Grand-father pricing configuration if the rebill schedule has changed over time</value>
        [DataMember(Name="grandfather_pricing", EmitDefaultValue=false)]
        public List<ItemAutoOrderStepGrandfatherPricing> GrandfatherPricing { get; set; }
        /// <summary>
        /// Managed by (defaults to UltraCart)
        /// </summary>
        /// <value>Managed by (defaults to UltraCart)</value>
        [DataMember(Name="managed_by", EmitDefaultValue=false)]
        public string ManagedBy { get; set; }
        /// <summary>
        /// Number of days to pause
        /// </summary>
        /// <value>Number of days to pause</value>
        [DataMember(Name="pause_days", EmitDefaultValue=false)]
        public int? PauseDays { get; set; }
        /// <summary>
        /// Wait for this step to happen until the specified date
        /// </summary>
        /// <value>Wait for this step to happen until the specified date</value>
        [DataMember(Name="pause_until_date", EmitDefaultValue=false)]
        public string PauseUntilDate { get; set; }
        /// <summary>
        /// If set, a pre-shipment notice is sent to the customer this many days in advance
        /// </summary>
        /// <value>If set, a pre-shipment notice is sent to the customer this many days in advance</value>
        [DataMember(Name="preshipment_notice_days", EmitDefaultValue=false)]
        public int? PreshipmentNoticeDays { get; set; }
        /// <summary>
        /// Item id to rebill
        /// </summary>
        /// <value>Item id to rebill</value>
        [DataMember(Name="recurring_merchant_item_id", EmitDefaultValue=false)]
        public string RecurringMerchantItemId { get; set; }
        /// <summary>
        /// Item object identifier to rebill
        /// </summary>
        /// <value>Item object identifier to rebill</value>
        [DataMember(Name="recurring_merchant_item_oid", EmitDefaultValue=false)]
        public int? RecurringMerchantItemOid { get; set; }
        /// <summary>
        /// Number of times to rebill.  Last step can be null for infinite
        /// </summary>
        /// <value>Number of times to rebill.  Last step can be null for infinite</value>
        [DataMember(Name="repeat_count", EmitDefaultValue=false)]
        public int? RepeatCount { get; set; }
        /// <summary>
        /// Frequency of the rebill
        /// </summary>
        /// <value>Frequency of the rebill</value>
        [DataMember(Name="schedule", EmitDefaultValue=false)]
        public string Schedule { get; set; }
        /// <summary>
        /// Email list name to subscribe the customer to when the rebill occurs
        /// </summary>
        /// <value>Email list name to subscribe the customer to when the rebill occurs</value>
        [DataMember(Name="subscribe_email_list_name", EmitDefaultValue=false)]
        public string SubscribeEmailListName { get; set; }
        /// <summary>
        /// Email list identifier to subscribe the customer to when this rebill occurs
        /// </summary>
        /// <value>Email list identifier to subscribe the customer to when this rebill occurs</value>
        [DataMember(Name="subscribe_email_list_oid", EmitDefaultValue=false)]
        public int? SubscribeEmailListOid { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ItemAutoOrderStep {\n");
            sb.Append("  ArbitraryScheduleDays: ").Append(ArbitraryScheduleDays).Append("\n");
            sb.Append("  ArbitraryUnitCost: ").Append(ArbitraryUnitCost).Append("\n");
            sb.Append("  ArbitraryUnitCostSchedules: ").Append(ArbitraryUnitCostSchedules).Append("\n");
            sb.Append("  GrandfatherPricing: ").Append(GrandfatherPricing).Append("\n");
            sb.Append("  ManagedBy: ").Append(ManagedBy).Append("\n");
            sb.Append("  PauseDays: ").Append(PauseDays).Append("\n");
            sb.Append("  PauseUntilDate: ").Append(PauseUntilDate).Append("\n");
            sb.Append("  PreshipmentNoticeDays: ").Append(PreshipmentNoticeDays).Append("\n");
            sb.Append("  RecurringMerchantItemId: ").Append(RecurringMerchantItemId).Append("\n");
            sb.Append("  RecurringMerchantItemOid: ").Append(RecurringMerchantItemOid).Append("\n");
            sb.Append("  RepeatCount: ").Append(RepeatCount).Append("\n");
            sb.Append("  Schedule: ").Append(Schedule).Append("\n");
            sb.Append("  SubscribeEmailListName: ").Append(SubscribeEmailListName).Append("\n");
            sb.Append("  SubscribeEmailListOid: ").Append(SubscribeEmailListOid).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as ItemAutoOrderStep);
        }

        /// <summary>
        /// Returns true if ItemAutoOrderStep instances are equal
        /// </summary>
        /// <param name="other">Instance of ItemAutoOrderStep to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ItemAutoOrderStep other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.ArbitraryScheduleDays == other.ArbitraryScheduleDays ||
                    this.ArbitraryScheduleDays != null &&
                    this.ArbitraryScheduleDays.Equals(other.ArbitraryScheduleDays)
                ) && 
                (
                    this.ArbitraryUnitCost == other.ArbitraryUnitCost ||
                    this.ArbitraryUnitCost != null &&
                    this.ArbitraryUnitCost.Equals(other.ArbitraryUnitCost)
                ) && 
                (
                    this.ArbitraryUnitCostSchedules == other.ArbitraryUnitCostSchedules ||
                    this.ArbitraryUnitCostSchedules != null &&
                    this.ArbitraryUnitCostSchedules.SequenceEqual(other.ArbitraryUnitCostSchedules)
                ) && 
                (
                    this.GrandfatherPricing == other.GrandfatherPricing ||
                    this.GrandfatherPricing != null &&
                    this.GrandfatherPricing.SequenceEqual(other.GrandfatherPricing)
                ) && 
                (
                    this.ManagedBy == other.ManagedBy ||
                    this.ManagedBy != null &&
                    this.ManagedBy.Equals(other.ManagedBy)
                ) && 
                (
                    this.PauseDays == other.PauseDays ||
                    this.PauseDays != null &&
                    this.PauseDays.Equals(other.PauseDays)
                ) && 
                (
                    this.PauseUntilDate == other.PauseUntilDate ||
                    this.PauseUntilDate != null &&
                    this.PauseUntilDate.Equals(other.PauseUntilDate)
                ) && 
                (
                    this.PreshipmentNoticeDays == other.PreshipmentNoticeDays ||
                    this.PreshipmentNoticeDays != null &&
                    this.PreshipmentNoticeDays.Equals(other.PreshipmentNoticeDays)
                ) && 
                (
                    this.RecurringMerchantItemId == other.RecurringMerchantItemId ||
                    this.RecurringMerchantItemId != null &&
                    this.RecurringMerchantItemId.Equals(other.RecurringMerchantItemId)
                ) && 
                (
                    this.RecurringMerchantItemOid == other.RecurringMerchantItemOid ||
                    this.RecurringMerchantItemOid != null &&
                    this.RecurringMerchantItemOid.Equals(other.RecurringMerchantItemOid)
                ) && 
                (
                    this.RepeatCount == other.RepeatCount ||
                    this.RepeatCount != null &&
                    this.RepeatCount.Equals(other.RepeatCount)
                ) && 
                (
                    this.Schedule == other.Schedule ||
                    this.Schedule != null &&
                    this.Schedule.Equals(other.Schedule)
                ) && 
                (
                    this.SubscribeEmailListName == other.SubscribeEmailListName ||
                    this.SubscribeEmailListName != null &&
                    this.SubscribeEmailListName.Equals(other.SubscribeEmailListName)
                ) && 
                (
                    this.SubscribeEmailListOid == other.SubscribeEmailListOid ||
                    this.SubscribeEmailListOid != null &&
                    this.SubscribeEmailListOid.Equals(other.SubscribeEmailListOid)
                ) && 
                (
                    this.Type == other.Type ||
                    this.Type != null &&
                    this.Type.Equals(other.Type)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.ArbitraryScheduleDays != null)
                    hash = hash * 59 + this.ArbitraryScheduleDays.GetHashCode();
                if (this.ArbitraryUnitCost != null)
                    hash = hash * 59 + this.ArbitraryUnitCost.GetHashCode();
                if (this.ArbitraryUnitCostSchedules != null)
                    hash = hash * 59 + this.ArbitraryUnitCostSchedules.GetHashCode();
                if (this.GrandfatherPricing != null)
                    hash = hash * 59 + this.GrandfatherPricing.GetHashCode();
                if (this.ManagedBy != null)
                    hash = hash * 59 + this.ManagedBy.GetHashCode();
                if (this.PauseDays != null)
                    hash = hash * 59 + this.PauseDays.GetHashCode();
                if (this.PauseUntilDate != null)
                    hash = hash * 59 + this.PauseUntilDate.GetHashCode();
                if (this.PreshipmentNoticeDays != null)
                    hash = hash * 59 + this.PreshipmentNoticeDays.GetHashCode();
                if (this.RecurringMerchantItemId != null)
                    hash = hash * 59 + this.RecurringMerchantItemId.GetHashCode();
                if (this.RecurringMerchantItemOid != null)
                    hash = hash * 59 + this.RecurringMerchantItemOid.GetHashCode();
                if (this.RepeatCount != null)
                    hash = hash * 59 + this.RepeatCount.GetHashCode();
                if (this.Schedule != null)
                    hash = hash * 59 + this.Schedule.GetHashCode();
                if (this.SubscribeEmailListName != null)
                    hash = hash * 59 + this.SubscribeEmailListName.GetHashCode();
                if (this.SubscribeEmailListOid != null)
                    hash = hash * 59 + this.SubscribeEmailListOid.GetHashCode();
                if (this.Type != null)
                    hash = hash * 59 + this.Type.GetHashCode();
                return hash;
            }
        }
    }

}
