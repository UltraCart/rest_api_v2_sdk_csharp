/* 
 * UltraCart Rest API V2
 *
 * This is the next generation UltraCart REST API...
 *
 * OpenAPI spec version: 2.0.0
 * Contact: support@ultracart.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = com.ultracart.admin.v2.Client.SwaggerDateConverter;

namespace com.ultracart.admin.v2.Model
{
    /// <summary>
    /// ItemAutoOrderStepArbitraryUnitCostSchedule
    /// </summary>
    [DataContract]
    public partial class ItemAutoOrderStepArbitraryUnitCostSchedule :  IEquatable<ItemAutoOrderStepArbitraryUnitCostSchedule>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ItemAutoOrderStepArbitraryUnitCostSchedule" /> class.
        /// </summary>
        /// <param name="ArbitraryUnitCost">Arbitrary unit cost.</param>
        /// <param name="RetryDays">Retry days.</param>
        public ItemAutoOrderStepArbitraryUnitCostSchedule(decimal? ArbitraryUnitCost = default(decimal?), int? RetryDays = default(int?))
        {
            this.ArbitraryUnitCost = ArbitraryUnitCost;
            this.RetryDays = RetryDays;
        }
        
        /// <summary>
        /// Arbitrary unit cost
        /// </summary>
        /// <value>Arbitrary unit cost</value>
        [DataMember(Name="arbitrary_unit_cost", EmitDefaultValue=false)]
        public decimal? ArbitraryUnitCost { get; set; }

        /// <summary>
        /// Retry days
        /// </summary>
        /// <value>Retry days</value>
        [DataMember(Name="retry_days", EmitDefaultValue=false)]
        public int? RetryDays { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ItemAutoOrderStepArbitraryUnitCostSchedule {\n");
            sb.Append("  ArbitraryUnitCost: ").Append(ArbitraryUnitCost).Append("\n");
            sb.Append("  RetryDays: ").Append(RetryDays).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as ItemAutoOrderStepArbitraryUnitCostSchedule);
        }

        /// <summary>
        /// Returns true if ItemAutoOrderStepArbitraryUnitCostSchedule instances are equal
        /// </summary>
        /// <param name="other">Instance of ItemAutoOrderStepArbitraryUnitCostSchedule to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ItemAutoOrderStepArbitraryUnitCostSchedule other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.ArbitraryUnitCost == other.ArbitraryUnitCost ||
                    this.ArbitraryUnitCost != null &&
                    this.ArbitraryUnitCost.Equals(other.ArbitraryUnitCost)
                ) && 
                (
                    this.RetryDays == other.RetryDays ||
                    this.RetryDays != null &&
                    this.RetryDays.Equals(other.RetryDays)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.ArbitraryUnitCost != null)
                    hash = hash * 59 + this.ArbitraryUnitCost.GetHashCode();
                if (this.RetryDays != null)
                    hash = hash * 59 + this.RetryDays.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
