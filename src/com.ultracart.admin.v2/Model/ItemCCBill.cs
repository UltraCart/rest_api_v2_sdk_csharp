/* 
 * UltraCart Rest API V2
 *
 * This is the next generation UltraCart REST API...
 *
 * OpenAPI spec version: 2.0.0
 * Contact: support@ultracart.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace com.ultracart.admin.v2.Model
{
    /// <summary>
    /// ItemCCBill
    /// </summary>
    [DataContract]
    public partial class ItemCCBill :  IEquatable<ItemCCBill>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ItemCCBill" /> class.
        /// </summary>
        /// <param name="CcbillAllowedCurrencies">CcbillAllowedCurrencies.</param>
        /// <param name="CcbillAllowedTypes">CcbillAllowedTypes.</param>
        /// <param name="CcbillCurrencyCode">CcbillCurrencyCode.</param>
        /// <param name="CcbillFormName">CcbillFormName.</param>
        /// <param name="CcbillSubaccountId">CcbillSubaccountId.</param>
        /// <param name="CcbillSubscriptionTypeId">CcbillSubscriptionTypeId.</param>
        public ItemCCBill(string CcbillAllowedCurrencies = null, string CcbillAllowedTypes = null, string CcbillCurrencyCode = null, string CcbillFormName = null, string CcbillSubaccountId = null, string CcbillSubscriptionTypeId = null)
        {
            this.CcbillAllowedCurrencies = CcbillAllowedCurrencies;
            this.CcbillAllowedTypes = CcbillAllowedTypes;
            this.CcbillCurrencyCode = CcbillCurrencyCode;
            this.CcbillFormName = CcbillFormName;
            this.CcbillSubaccountId = CcbillSubaccountId;
            this.CcbillSubscriptionTypeId = CcbillSubscriptionTypeId;
        }
        
        /// <summary>
        /// Gets or Sets CcbillAllowedCurrencies
        /// </summary>
        [DataMember(Name="ccbill_allowed_currencies", EmitDefaultValue=false)]
        public string CcbillAllowedCurrencies { get; set; }
        /// <summary>
        /// Gets or Sets CcbillAllowedTypes
        /// </summary>
        [DataMember(Name="ccbill_allowed_types", EmitDefaultValue=false)]
        public string CcbillAllowedTypes { get; set; }
        /// <summary>
        /// Gets or Sets CcbillCurrencyCode
        /// </summary>
        [DataMember(Name="ccbill_currency_code", EmitDefaultValue=false)]
        public string CcbillCurrencyCode { get; set; }
        /// <summary>
        /// Gets or Sets CcbillFormName
        /// </summary>
        [DataMember(Name="ccbill_form_name", EmitDefaultValue=false)]
        public string CcbillFormName { get; set; }
        /// <summary>
        /// Gets or Sets CcbillSubaccountId
        /// </summary>
        [DataMember(Name="ccbill_subaccount_id", EmitDefaultValue=false)]
        public string CcbillSubaccountId { get; set; }
        /// <summary>
        /// Gets or Sets CcbillSubscriptionTypeId
        /// </summary>
        [DataMember(Name="ccbill_subscription_type_id", EmitDefaultValue=false)]
        public string CcbillSubscriptionTypeId { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ItemCCBill {\n");
            sb.Append("  CcbillAllowedCurrencies: ").Append(CcbillAllowedCurrencies).Append("\n");
            sb.Append("  CcbillAllowedTypes: ").Append(CcbillAllowedTypes).Append("\n");
            sb.Append("  CcbillCurrencyCode: ").Append(CcbillCurrencyCode).Append("\n");
            sb.Append("  CcbillFormName: ").Append(CcbillFormName).Append("\n");
            sb.Append("  CcbillSubaccountId: ").Append(CcbillSubaccountId).Append("\n");
            sb.Append("  CcbillSubscriptionTypeId: ").Append(CcbillSubscriptionTypeId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as ItemCCBill);
        }

        /// <summary>
        /// Returns true if ItemCCBill instances are equal
        /// </summary>
        /// <param name="other">Instance of ItemCCBill to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ItemCCBill other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.CcbillAllowedCurrencies == other.CcbillAllowedCurrencies ||
                    this.CcbillAllowedCurrencies != null &&
                    this.CcbillAllowedCurrencies.Equals(other.CcbillAllowedCurrencies)
                ) && 
                (
                    this.CcbillAllowedTypes == other.CcbillAllowedTypes ||
                    this.CcbillAllowedTypes != null &&
                    this.CcbillAllowedTypes.Equals(other.CcbillAllowedTypes)
                ) && 
                (
                    this.CcbillCurrencyCode == other.CcbillCurrencyCode ||
                    this.CcbillCurrencyCode != null &&
                    this.CcbillCurrencyCode.Equals(other.CcbillCurrencyCode)
                ) && 
                (
                    this.CcbillFormName == other.CcbillFormName ||
                    this.CcbillFormName != null &&
                    this.CcbillFormName.Equals(other.CcbillFormName)
                ) && 
                (
                    this.CcbillSubaccountId == other.CcbillSubaccountId ||
                    this.CcbillSubaccountId != null &&
                    this.CcbillSubaccountId.Equals(other.CcbillSubaccountId)
                ) && 
                (
                    this.CcbillSubscriptionTypeId == other.CcbillSubscriptionTypeId ||
                    this.CcbillSubscriptionTypeId != null &&
                    this.CcbillSubscriptionTypeId.Equals(other.CcbillSubscriptionTypeId)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.CcbillAllowedCurrencies != null)
                    hash = hash * 59 + this.CcbillAllowedCurrencies.GetHashCode();
                if (this.CcbillAllowedTypes != null)
                    hash = hash * 59 + this.CcbillAllowedTypes.GetHashCode();
                if (this.CcbillCurrencyCode != null)
                    hash = hash * 59 + this.CcbillCurrencyCode.GetHashCode();
                if (this.CcbillFormName != null)
                    hash = hash * 59 + this.CcbillFormName.GetHashCode();
                if (this.CcbillSubaccountId != null)
                    hash = hash * 59 + this.CcbillSubaccountId.GetHashCode();
                if (this.CcbillSubscriptionTypeId != null)
                    hash = hash * 59 + this.CcbillSubscriptionTypeId.GetHashCode();
                return hash;
            }
        }
    }

}
