/*
 * UltraCart Rest API V2
 *
 * UltraCart REST API Version 2
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@ultracart.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = com.ultracart.admin.v2.Client.OpenAPIDateConverter;

namespace com.ultracart.admin.v2.Model
{
    /// <summary>
    /// ItemCCBill
    /// </summary>
    [DataContract]
    public partial class ItemCCBill :  IEquatable<ItemCCBill>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ItemCCBill" /> class.
        /// </summary>
        /// <param name="ccbillAllowedCurrencies">Allowed currencies.</param>
        /// <param name="ccbillAllowedTypes">Allowed types.</param>
        /// <param name="ccbillCurrencyCode">Currency code.</param>
        /// <param name="ccbillFormName">Form name.</param>
        /// <param name="ccbillSubaccountId">Sub-account id.</param>
        /// <param name="ccbillSubscriptionTypeId">Subscription type id.</param>
        public ItemCCBill(string ccbillAllowedCurrencies = default(string), string ccbillAllowedTypes = default(string), string ccbillCurrencyCode = default(string), string ccbillFormName = default(string), string ccbillSubaccountId = default(string), string ccbillSubscriptionTypeId = default(string))
        {
            this.CcbillAllowedCurrencies = ccbillAllowedCurrencies;
            this.CcbillAllowedTypes = ccbillAllowedTypes;
            this.CcbillCurrencyCode = ccbillCurrencyCode;
            this.CcbillFormName = ccbillFormName;
            this.CcbillSubaccountId = ccbillSubaccountId;
            this.CcbillSubscriptionTypeId = ccbillSubscriptionTypeId;
        }

        /// <summary>
        /// Allowed currencies
        /// </summary>
        /// <value>Allowed currencies</value>
        [DataMember(Name="ccbill_allowed_currencies", EmitDefaultValue=false)]
        public string CcbillAllowedCurrencies { get; set; }

        /// <summary>
        /// Allowed types
        /// </summary>
        /// <value>Allowed types</value>
        [DataMember(Name="ccbill_allowed_types", EmitDefaultValue=false)]
        public string CcbillAllowedTypes { get; set; }

        /// <summary>
        /// Currency code
        /// </summary>
        /// <value>Currency code</value>
        [DataMember(Name="ccbill_currency_code", EmitDefaultValue=false)]
        public string CcbillCurrencyCode { get; set; }

        /// <summary>
        /// Form name
        /// </summary>
        /// <value>Form name</value>
        [DataMember(Name="ccbill_form_name", EmitDefaultValue=false)]
        public string CcbillFormName { get; set; }

        /// <summary>
        /// Sub-account id
        /// </summary>
        /// <value>Sub-account id</value>
        [DataMember(Name="ccbill_subaccount_id", EmitDefaultValue=false)]
        public string CcbillSubaccountId { get; set; }

        /// <summary>
        /// Subscription type id
        /// </summary>
        /// <value>Subscription type id</value>
        [DataMember(Name="ccbill_subscription_type_id", EmitDefaultValue=false)]
        public string CcbillSubscriptionTypeId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ItemCCBill {\n");
            sb.Append("  CcbillAllowedCurrencies: ").Append(CcbillAllowedCurrencies).Append("\n");
            sb.Append("  CcbillAllowedTypes: ").Append(CcbillAllowedTypes).Append("\n");
            sb.Append("  CcbillCurrencyCode: ").Append(CcbillCurrencyCode).Append("\n");
            sb.Append("  CcbillFormName: ").Append(CcbillFormName).Append("\n");
            sb.Append("  CcbillSubaccountId: ").Append(CcbillSubaccountId).Append("\n");
            sb.Append("  CcbillSubscriptionTypeId: ").Append(CcbillSubscriptionTypeId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ItemCCBill);
        }

        /// <summary>
        /// Returns true if ItemCCBill instances are equal
        /// </summary>
        /// <param name="input">Instance of ItemCCBill to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ItemCCBill input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.CcbillAllowedCurrencies == input.CcbillAllowedCurrencies ||
                    (this.CcbillAllowedCurrencies != null &&
                    this.CcbillAllowedCurrencies.Equals(input.CcbillAllowedCurrencies))
                ) && 
                (
                    this.CcbillAllowedTypes == input.CcbillAllowedTypes ||
                    (this.CcbillAllowedTypes != null &&
                    this.CcbillAllowedTypes.Equals(input.CcbillAllowedTypes))
                ) && 
                (
                    this.CcbillCurrencyCode == input.CcbillCurrencyCode ||
                    (this.CcbillCurrencyCode != null &&
                    this.CcbillCurrencyCode.Equals(input.CcbillCurrencyCode))
                ) && 
                (
                    this.CcbillFormName == input.CcbillFormName ||
                    (this.CcbillFormName != null &&
                    this.CcbillFormName.Equals(input.CcbillFormName))
                ) && 
                (
                    this.CcbillSubaccountId == input.CcbillSubaccountId ||
                    (this.CcbillSubaccountId != null &&
                    this.CcbillSubaccountId.Equals(input.CcbillSubaccountId))
                ) && 
                (
                    this.CcbillSubscriptionTypeId == input.CcbillSubscriptionTypeId ||
                    (this.CcbillSubscriptionTypeId != null &&
                    this.CcbillSubscriptionTypeId.Equals(input.CcbillSubscriptionTypeId))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.CcbillAllowedCurrencies != null)
                    hashCode = hashCode * 59 + this.CcbillAllowedCurrencies.GetHashCode();
                if (this.CcbillAllowedTypes != null)
                    hashCode = hashCode * 59 + this.CcbillAllowedTypes.GetHashCode();
                if (this.CcbillCurrencyCode != null)
                    hashCode = hashCode * 59 + this.CcbillCurrencyCode.GetHashCode();
                if (this.CcbillFormName != null)
                    hashCode = hashCode * 59 + this.CcbillFormName.GetHashCode();
                if (this.CcbillSubaccountId != null)
                    hashCode = hashCode * 59 + this.CcbillSubaccountId.GetHashCode();
                if (this.CcbillSubscriptionTypeId != null)
                    hashCode = hashCode * 59 + this.CcbillSubscriptionTypeId.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
