/* 
 * UltraCart Rest API V2
 *
 * This is the next generation UltraCart REST API...
 *
 * OpenAPI spec version: 2.0.0
 * Contact: support@ultracart.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace com.ultracart.admin.v2.Model
{
    /// <summary>
    /// ItemChargebackAdjustmentRequest
    /// </summary>
    [DataContract]
    public partial class ItemChargebackAdjustmentRequest :  IEquatable<ItemChargebackAdjustmentRequest>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ItemChargebackAdjustmentRequest" /> class.
        /// </summary>
        /// <param name="ChargebackAdjustmentRequestOid">Chargeback adjustment request object identifier.</param>
        /// <param name="Description">Description.</param>
        /// <param name="ReasonCode">Reason code.</param>
        public ItemChargebackAdjustmentRequest(int? ChargebackAdjustmentRequestOid = null, string Description = null, string ReasonCode = null)
        {
            this.ChargebackAdjustmentRequestOid = ChargebackAdjustmentRequestOid;
            this.Description = Description;
            this.ReasonCode = ReasonCode;
        }
        
        /// <summary>
        /// Chargeback adjustment request object identifier
        /// </summary>
        /// <value>Chargeback adjustment request object identifier</value>
        [DataMember(Name="chargeback_adjustment_request_oid", EmitDefaultValue=false)]
        public int? ChargebackAdjustmentRequestOid { get; set; }
        /// <summary>
        /// Description
        /// </summary>
        /// <value>Description</value>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }
        /// <summary>
        /// Reason code
        /// </summary>
        /// <value>Reason code</value>
        [DataMember(Name="reason_code", EmitDefaultValue=false)]
        public string ReasonCode { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ItemChargebackAdjustmentRequest {\n");
            sb.Append("  ChargebackAdjustmentRequestOid: ").Append(ChargebackAdjustmentRequestOid).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  ReasonCode: ").Append(ReasonCode).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as ItemChargebackAdjustmentRequest);
        }

        /// <summary>
        /// Returns true if ItemChargebackAdjustmentRequest instances are equal
        /// </summary>
        /// <param name="other">Instance of ItemChargebackAdjustmentRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ItemChargebackAdjustmentRequest other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.ChargebackAdjustmentRequestOid == other.ChargebackAdjustmentRequestOid ||
                    this.ChargebackAdjustmentRequestOid != null &&
                    this.ChargebackAdjustmentRequestOid.Equals(other.ChargebackAdjustmentRequestOid)
                ) && 
                (
                    this.Description == other.Description ||
                    this.Description != null &&
                    this.Description.Equals(other.Description)
                ) && 
                (
                    this.ReasonCode == other.ReasonCode ||
                    this.ReasonCode != null &&
                    this.ReasonCode.Equals(other.ReasonCode)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.ChargebackAdjustmentRequestOid != null)
                    hash = hash * 59 + this.ChargebackAdjustmentRequestOid.GetHashCode();
                if (this.Description != null)
                    hash = hash * 59 + this.Description.GetHashCode();
                if (this.ReasonCode != null)
                    hash = hash * 59 + this.ReasonCode.GetHashCode();
                return hash;
            }
        }
    }

}
