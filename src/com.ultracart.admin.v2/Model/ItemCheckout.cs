/*
 * UltraCart Rest API V2
 *
 * UltraCart REST API Version 2
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@ultracart.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = com.ultracart.admin.v2.Client.OpenAPIDateConverter;

namespace com.ultracart.admin.v2.Model
{
    /// <summary>
    /// ItemCheckout
    /// </summary>
    [DataContract]
    public partial class ItemCheckout :  IEquatable<ItemCheckout>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ItemCheckout" /> class.
        /// </summary>
        /// <param name="suppressBuysafe">True to suppress buySAFE (deprecated).</param>
        /// <param name="terms">Terms for purchasing this item.</param>
        /// <param name="termsIfAutoOrder">Terms only apply if the item is on auto order.</param>
        /// <param name="termsTranslatedTextInstanceOid">Terms translated text instance identifier.</param>
        public ItemCheckout(bool suppressBuysafe = default(bool), string terms = default(string), bool termsIfAutoOrder = default(bool), int termsTranslatedTextInstanceOid = default(int))
        {
            this.SuppressBuysafe = suppressBuysafe;
            this.Terms = terms;
            this.TermsIfAutoOrder = termsIfAutoOrder;
            this.TermsTranslatedTextInstanceOid = termsTranslatedTextInstanceOid;
        }

        /// <summary>
        /// True to suppress buySAFE (deprecated)
        /// </summary>
        /// <value>True to suppress buySAFE (deprecated)</value>
        [DataMember(Name="suppress_buysafe", EmitDefaultValue=false)]
        public bool SuppressBuysafe { get; set; }

        /// <summary>
        /// Terms for purchasing this item
        /// </summary>
        /// <value>Terms for purchasing this item</value>
        [DataMember(Name="terms", EmitDefaultValue=false)]
        public string Terms { get; set; }

        /// <summary>
        /// Terms only apply if the item is on auto order
        /// </summary>
        /// <value>Terms only apply if the item is on auto order</value>
        [DataMember(Name="terms_if_auto_order", EmitDefaultValue=false)]
        public bool TermsIfAutoOrder { get; set; }

        /// <summary>
        /// Terms translated text instance identifier
        /// </summary>
        /// <value>Terms translated text instance identifier</value>
        [DataMember(Name="terms_translated_text_instance_oid", EmitDefaultValue=false)]
        public int TermsTranslatedTextInstanceOid { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ItemCheckout {\n");
            sb.Append("  SuppressBuysafe: ").Append(SuppressBuysafe).Append("\n");
            sb.Append("  Terms: ").Append(Terms).Append("\n");
            sb.Append("  TermsIfAutoOrder: ").Append(TermsIfAutoOrder).Append("\n");
            sb.Append("  TermsTranslatedTextInstanceOid: ").Append(TermsTranslatedTextInstanceOid).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ItemCheckout);
        }

        /// <summary>
        /// Returns true if ItemCheckout instances are equal
        /// </summary>
        /// <param name="input">Instance of ItemCheckout to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ItemCheckout input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.SuppressBuysafe == input.SuppressBuysafe ||
                    (this.SuppressBuysafe != null &&
                    this.SuppressBuysafe.Equals(input.SuppressBuysafe))
                ) && 
                (
                    this.Terms == input.Terms ||
                    (this.Terms != null &&
                    this.Terms.Equals(input.Terms))
                ) && 
                (
                    this.TermsIfAutoOrder == input.TermsIfAutoOrder ||
                    (this.TermsIfAutoOrder != null &&
                    this.TermsIfAutoOrder.Equals(input.TermsIfAutoOrder))
                ) && 
                (
                    this.TermsTranslatedTextInstanceOid == input.TermsTranslatedTextInstanceOid ||
                    (this.TermsTranslatedTextInstanceOid != null &&
                    this.TermsTranslatedTextInstanceOid.Equals(input.TermsTranslatedTextInstanceOid))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.SuppressBuysafe != null)
                    hashCode = hashCode * 59 + this.SuppressBuysafe.GetHashCode();
                if (this.Terms != null)
                    hashCode = hashCode * 59 + this.Terms.GetHashCode();
                if (this.TermsIfAutoOrder != null)
                    hashCode = hashCode * 59 + this.TermsIfAutoOrder.GetHashCode();
                if (this.TermsTranslatedTextInstanceOid != null)
                    hashCode = hashCode * 59 + this.TermsTranslatedTextInstanceOid.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Terms (string) maxLength
            if(this.Terms != null && this.Terms.Length > 10000)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Terms, length must be less than 10000.", new [] { "Terms" });
            }


            yield break;
        }
    }

}
