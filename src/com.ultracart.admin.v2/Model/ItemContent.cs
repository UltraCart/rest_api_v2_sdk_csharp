/* 
 * UltraCart Rest API V2
 *
 * This is the next generation UltraCart REST API...
 *
 * OpenAPI spec version: 2.0.0
 * Contact: support@ultracart.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace com.ultracart.admin.v2.Model
{
    /// <summary>
    /// ItemContent
    /// </summary>
    [DataContract]
    public partial class ItemContent :  IEquatable<ItemContent>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ItemContent" /> class.
        /// </summary>
        /// <param name="Assignments">Assignments.</param>
        /// <param name="Attributes">Attributes.</param>
        /// <param name="ExcludeFromSearch">ExcludeFromSearch.</param>
        /// <param name="ExcludeFromTopSellers">ExcludeFromTopSellers.</param>
        /// <param name="ExtendedDescription">ExtendedDescription.</param>
        /// <param name="ExtendedDescriptionTranslatedTextInstanceOid">ExtendedDescriptionTranslatedTextInstanceOid.</param>
        /// <param name="Multimedia">Multimedia.</param>
        /// <param name="NewItem">NewItem.</param>
        /// <param name="NewItemEnd">NewItemEnd.</param>
        /// <param name="NewItemStart">NewItemStart.</param>
        /// <param name="ViewUrl">ViewUrl.</param>
        public ItemContent(List<ItemContentAssignment> Assignments = null, List<ItemContentAttribute> Attributes = null, bool? ExcludeFromSearch = null, bool? ExcludeFromTopSellers = null, string ExtendedDescription = null, int? ExtendedDescriptionTranslatedTextInstanceOid = null, List<ItemContentMultimedia> Multimedia = null, bool? NewItem = null, string NewItemEnd = null, string NewItemStart = null, string ViewUrl = null)
        {
            this.Assignments = Assignments;
            this.Attributes = Attributes;
            this.ExcludeFromSearch = ExcludeFromSearch;
            this.ExcludeFromTopSellers = ExcludeFromTopSellers;
            this.ExtendedDescription = ExtendedDescription;
            this.ExtendedDescriptionTranslatedTextInstanceOid = ExtendedDescriptionTranslatedTextInstanceOid;
            this.Multimedia = Multimedia;
            this.NewItem = NewItem;
            this.NewItemEnd = NewItemEnd;
            this.NewItemStart = NewItemStart;
            this.ViewUrl = ViewUrl;
        }
        
        /// <summary>
        /// Gets or Sets Assignments
        /// </summary>
        [DataMember(Name="assignments", EmitDefaultValue=false)]
        public List<ItemContentAssignment> Assignments { get; set; }
        /// <summary>
        /// Gets or Sets Attributes
        /// </summary>
        [DataMember(Name="attributes", EmitDefaultValue=false)]
        public List<ItemContentAttribute> Attributes { get; set; }
        /// <summary>
        /// Gets or Sets ExcludeFromSearch
        /// </summary>
        [DataMember(Name="exclude_from_search", EmitDefaultValue=false)]
        public bool? ExcludeFromSearch { get; set; }
        /// <summary>
        /// Gets or Sets ExcludeFromTopSellers
        /// </summary>
        [DataMember(Name="exclude_from_top_sellers", EmitDefaultValue=false)]
        public bool? ExcludeFromTopSellers { get; set; }
        /// <summary>
        /// Gets or Sets ExtendedDescription
        /// </summary>
        [DataMember(Name="extended_description", EmitDefaultValue=false)]
        public string ExtendedDescription { get; set; }
        /// <summary>
        /// Gets or Sets ExtendedDescriptionTranslatedTextInstanceOid
        /// </summary>
        [DataMember(Name="extended_description_translated_text_instance_oid", EmitDefaultValue=false)]
        public int? ExtendedDescriptionTranslatedTextInstanceOid { get; set; }
        /// <summary>
        /// Gets or Sets Multimedia
        /// </summary>
        [DataMember(Name="multimedia", EmitDefaultValue=false)]
        public List<ItemContentMultimedia> Multimedia { get; set; }
        /// <summary>
        /// Gets or Sets NewItem
        /// </summary>
        [DataMember(Name="new_item", EmitDefaultValue=false)]
        public bool? NewItem { get; set; }
        /// <summary>
        /// Gets or Sets NewItemEnd
        /// </summary>
        [DataMember(Name="new_item_end", EmitDefaultValue=false)]
        public string NewItemEnd { get; set; }
        /// <summary>
        /// Gets or Sets NewItemStart
        /// </summary>
        [DataMember(Name="new_item_start", EmitDefaultValue=false)]
        public string NewItemStart { get; set; }
        /// <summary>
        /// Gets or Sets ViewUrl
        /// </summary>
        [DataMember(Name="view_url", EmitDefaultValue=false)]
        public string ViewUrl { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ItemContent {\n");
            sb.Append("  Assignments: ").Append(Assignments).Append("\n");
            sb.Append("  Attributes: ").Append(Attributes).Append("\n");
            sb.Append("  ExcludeFromSearch: ").Append(ExcludeFromSearch).Append("\n");
            sb.Append("  ExcludeFromTopSellers: ").Append(ExcludeFromTopSellers).Append("\n");
            sb.Append("  ExtendedDescription: ").Append(ExtendedDescription).Append("\n");
            sb.Append("  ExtendedDescriptionTranslatedTextInstanceOid: ").Append(ExtendedDescriptionTranslatedTextInstanceOid).Append("\n");
            sb.Append("  Multimedia: ").Append(Multimedia).Append("\n");
            sb.Append("  NewItem: ").Append(NewItem).Append("\n");
            sb.Append("  NewItemEnd: ").Append(NewItemEnd).Append("\n");
            sb.Append("  NewItemStart: ").Append(NewItemStart).Append("\n");
            sb.Append("  ViewUrl: ").Append(ViewUrl).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as ItemContent);
        }

        /// <summary>
        /// Returns true if ItemContent instances are equal
        /// </summary>
        /// <param name="other">Instance of ItemContent to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ItemContent other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Assignments == other.Assignments ||
                    this.Assignments != null &&
                    this.Assignments.SequenceEqual(other.Assignments)
                ) && 
                (
                    this.Attributes == other.Attributes ||
                    this.Attributes != null &&
                    this.Attributes.SequenceEqual(other.Attributes)
                ) && 
                (
                    this.ExcludeFromSearch == other.ExcludeFromSearch ||
                    this.ExcludeFromSearch != null &&
                    this.ExcludeFromSearch.Equals(other.ExcludeFromSearch)
                ) && 
                (
                    this.ExcludeFromTopSellers == other.ExcludeFromTopSellers ||
                    this.ExcludeFromTopSellers != null &&
                    this.ExcludeFromTopSellers.Equals(other.ExcludeFromTopSellers)
                ) && 
                (
                    this.ExtendedDescription == other.ExtendedDescription ||
                    this.ExtendedDescription != null &&
                    this.ExtendedDescription.Equals(other.ExtendedDescription)
                ) && 
                (
                    this.ExtendedDescriptionTranslatedTextInstanceOid == other.ExtendedDescriptionTranslatedTextInstanceOid ||
                    this.ExtendedDescriptionTranslatedTextInstanceOid != null &&
                    this.ExtendedDescriptionTranslatedTextInstanceOid.Equals(other.ExtendedDescriptionTranslatedTextInstanceOid)
                ) && 
                (
                    this.Multimedia == other.Multimedia ||
                    this.Multimedia != null &&
                    this.Multimedia.SequenceEqual(other.Multimedia)
                ) && 
                (
                    this.NewItem == other.NewItem ||
                    this.NewItem != null &&
                    this.NewItem.Equals(other.NewItem)
                ) && 
                (
                    this.NewItemEnd == other.NewItemEnd ||
                    this.NewItemEnd != null &&
                    this.NewItemEnd.Equals(other.NewItemEnd)
                ) && 
                (
                    this.NewItemStart == other.NewItemStart ||
                    this.NewItemStart != null &&
                    this.NewItemStart.Equals(other.NewItemStart)
                ) && 
                (
                    this.ViewUrl == other.ViewUrl ||
                    this.ViewUrl != null &&
                    this.ViewUrl.Equals(other.ViewUrl)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Assignments != null)
                    hash = hash * 59 + this.Assignments.GetHashCode();
                if (this.Attributes != null)
                    hash = hash * 59 + this.Attributes.GetHashCode();
                if (this.ExcludeFromSearch != null)
                    hash = hash * 59 + this.ExcludeFromSearch.GetHashCode();
                if (this.ExcludeFromTopSellers != null)
                    hash = hash * 59 + this.ExcludeFromTopSellers.GetHashCode();
                if (this.ExtendedDescription != null)
                    hash = hash * 59 + this.ExtendedDescription.GetHashCode();
                if (this.ExtendedDescriptionTranslatedTextInstanceOid != null)
                    hash = hash * 59 + this.ExtendedDescriptionTranslatedTextInstanceOid.GetHashCode();
                if (this.Multimedia != null)
                    hash = hash * 59 + this.Multimedia.GetHashCode();
                if (this.NewItem != null)
                    hash = hash * 59 + this.NewItem.GetHashCode();
                if (this.NewItemEnd != null)
                    hash = hash * 59 + this.NewItemEnd.GetHashCode();
                if (this.NewItemStart != null)
                    hash = hash * 59 + this.NewItemStart.GetHashCode();
                if (this.ViewUrl != null)
                    hash = hash * 59 + this.ViewUrl.GetHashCode();
                return hash;
            }
        }
    }

}
