/* 
 * UltraCart Rest API V2
 *
 * This is the next generation UltraCart REST API...
 *
 * OpenAPI spec version: 2.0.0
 * Contact: support@ultracart.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace com.ultracart.admin.v2.Model
{
    /// <summary>
    /// ItemContentAssignment
    /// </summary>
    [DataContract]
    public partial class ItemContentAssignment :  IEquatable<ItemContentAssignment>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ItemContentAssignment" /> class.
        /// </summary>
        /// <param name="GroupOid">GroupOid.</param>
        /// <param name="GroupPath">GroupPath.</param>
        /// <param name="Host">Host.</param>
        /// <param name="SortOrder">SortOrder.</param>
        /// <param name="UrlPart">UrlPart.</param>
        public ItemContentAssignment(int? GroupOid = null, string GroupPath = null, string Host = null, int? SortOrder = null, string UrlPart = null)
        {
            this.GroupOid = GroupOid;
            this.GroupPath = GroupPath;
            this.Host = Host;
            this.SortOrder = SortOrder;
            this.UrlPart = UrlPart;
        }
        
        /// <summary>
        /// Gets or Sets GroupOid
        /// </summary>
        [DataMember(Name="group_oid", EmitDefaultValue=false)]
        public int? GroupOid { get; set; }
        /// <summary>
        /// Gets or Sets GroupPath
        /// </summary>
        [DataMember(Name="group_path", EmitDefaultValue=false)]
        public string GroupPath { get; set; }
        /// <summary>
        /// Gets or Sets Host
        /// </summary>
        [DataMember(Name="host", EmitDefaultValue=false)]
        public string Host { get; set; }
        /// <summary>
        /// Gets or Sets SortOrder
        /// </summary>
        [DataMember(Name="sort_order", EmitDefaultValue=false)]
        public int? SortOrder { get; set; }
        /// <summary>
        /// Gets or Sets UrlPart
        /// </summary>
        [DataMember(Name="url_part", EmitDefaultValue=false)]
        public string UrlPart { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ItemContentAssignment {\n");
            sb.Append("  GroupOid: ").Append(GroupOid).Append("\n");
            sb.Append("  GroupPath: ").Append(GroupPath).Append("\n");
            sb.Append("  Host: ").Append(Host).Append("\n");
            sb.Append("  SortOrder: ").Append(SortOrder).Append("\n");
            sb.Append("  UrlPart: ").Append(UrlPart).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as ItemContentAssignment);
        }

        /// <summary>
        /// Returns true if ItemContentAssignment instances are equal
        /// </summary>
        /// <param name="other">Instance of ItemContentAssignment to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ItemContentAssignment other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.GroupOid == other.GroupOid ||
                    this.GroupOid != null &&
                    this.GroupOid.Equals(other.GroupOid)
                ) && 
                (
                    this.GroupPath == other.GroupPath ||
                    this.GroupPath != null &&
                    this.GroupPath.Equals(other.GroupPath)
                ) && 
                (
                    this.Host == other.Host ||
                    this.Host != null &&
                    this.Host.Equals(other.Host)
                ) && 
                (
                    this.SortOrder == other.SortOrder ||
                    this.SortOrder != null &&
                    this.SortOrder.Equals(other.SortOrder)
                ) && 
                (
                    this.UrlPart == other.UrlPart ||
                    this.UrlPart != null &&
                    this.UrlPart.Equals(other.UrlPart)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.GroupOid != null)
                    hash = hash * 59 + this.GroupOid.GetHashCode();
                if (this.GroupPath != null)
                    hash = hash * 59 + this.GroupPath.GetHashCode();
                if (this.Host != null)
                    hash = hash * 59 + this.Host.GetHashCode();
                if (this.SortOrder != null)
                    hash = hash * 59 + this.SortOrder.GetHashCode();
                if (this.UrlPart != null)
                    hash = hash * 59 + this.UrlPart.GetHashCode();
                return hash;
            }
        }
    }

}
