/* 
 * UltraCart Rest API V2
 *
 * This is the next generation UltraCart REST API...
 *
 * OpenAPI spec version: 2.0.0
 * Contact: support@ultracart.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace com.ultracart.admin.v2.Model
{
    /// <summary>
    /// ItemContentMultimedia
    /// </summary>
    [DataContract]
    public partial class ItemContentMultimedia :  IEquatable<ItemContentMultimedia>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ItemContentMultimedia" /> class.
        /// </summary>
        /// <param name="CloudUrl">CloudUrl.</param>
        /// <param name="CloudUrlExpiration">CloudUrlExpiration.</param>
        /// <param name="Code">Code.</param>
        /// <param name="Description">Description.</param>
        /// <param name="ExcludeFromGallery">ExcludeFromGallery.</param>
        /// <param name="FileName">FileName.</param>
        /// <param name="Height">Height.</param>
        /// <param name="MerchantItemMultimediaOid">MerchantItemMultimediaOid.</param>
        /// <param name="Orphan">Orphan.</param>
        /// <param name="Placeholder">Placeholder.</param>
        /// <param name="TempMultimediaOid">TempMultimediaOid.</param>
        /// <param name="Thumbnails">Thumbnails.</param>
        /// <param name="Type">Type.</param>
        /// <param name="Url">Url.</param>
        /// <param name="Width">Width.</param>
        public ItemContentMultimedia(string CloudUrl = null, string CloudUrlExpiration = null, string Code = null, string Description = null, bool? ExcludeFromGallery = null, string FileName = null, int? Height = null, int? MerchantItemMultimediaOid = null, bool? Orphan = null, bool? Placeholder = null, int? TempMultimediaOid = null, List<ItemContentMultimediaThumbnail> Thumbnails = null, string Type = null, string Url = null, int? Width = null)
        {
            this.CloudUrl = CloudUrl;
            this.CloudUrlExpiration = CloudUrlExpiration;
            this.Code = Code;
            this.Description = Description;
            this.ExcludeFromGallery = ExcludeFromGallery;
            this.FileName = FileName;
            this.Height = Height;
            this.MerchantItemMultimediaOid = MerchantItemMultimediaOid;
            this.Orphan = Orphan;
            this.Placeholder = Placeholder;
            this.TempMultimediaOid = TempMultimediaOid;
            this.Thumbnails = Thumbnails;
            this.Type = Type;
            this.Url = Url;
            this.Width = Width;
        }
        
        /// <summary>
        /// Gets or Sets CloudUrl
        /// </summary>
        [DataMember(Name="cloud_url", EmitDefaultValue=false)]
        public string CloudUrl { get; set; }
        /// <summary>
        /// Gets or Sets CloudUrlExpiration
        /// </summary>
        [DataMember(Name="cloud_url_expiration", EmitDefaultValue=false)]
        public string CloudUrlExpiration { get; set; }
        /// <summary>
        /// Gets or Sets Code
        /// </summary>
        [DataMember(Name="code", EmitDefaultValue=false)]
        public string Code { get; set; }
        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }
        /// <summary>
        /// Gets or Sets ExcludeFromGallery
        /// </summary>
        [DataMember(Name="exclude_from_gallery", EmitDefaultValue=false)]
        public bool? ExcludeFromGallery { get; set; }
        /// <summary>
        /// Gets or Sets FileName
        /// </summary>
        [DataMember(Name="file_name", EmitDefaultValue=false)]
        public string FileName { get; set; }
        /// <summary>
        /// Gets or Sets Height
        /// </summary>
        [DataMember(Name="height", EmitDefaultValue=false)]
        public int? Height { get; set; }
        /// <summary>
        /// Gets or Sets MerchantItemMultimediaOid
        /// </summary>
        [DataMember(Name="merchant_item_multimedia_oid", EmitDefaultValue=false)]
        public int? MerchantItemMultimediaOid { get; set; }
        /// <summary>
        /// Gets or Sets Orphan
        /// </summary>
        [DataMember(Name="orphan", EmitDefaultValue=false)]
        public bool? Orphan { get; set; }
        /// <summary>
        /// Gets or Sets Placeholder
        /// </summary>
        [DataMember(Name="placeholder", EmitDefaultValue=false)]
        public bool? Placeholder { get; set; }
        /// <summary>
        /// Gets or Sets TempMultimediaOid
        /// </summary>
        [DataMember(Name="temp_multimedia_oid", EmitDefaultValue=false)]
        public int? TempMultimediaOid { get; set; }
        /// <summary>
        /// Gets or Sets Thumbnails
        /// </summary>
        [DataMember(Name="thumbnails", EmitDefaultValue=false)]
        public List<ItemContentMultimediaThumbnail> Thumbnails { get; set; }
        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public string Type { get; set; }
        /// <summary>
        /// Gets or Sets Url
        /// </summary>
        [DataMember(Name="url", EmitDefaultValue=false)]
        public string Url { get; set; }
        /// <summary>
        /// Gets or Sets Width
        /// </summary>
        [DataMember(Name="width", EmitDefaultValue=false)]
        public int? Width { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ItemContentMultimedia {\n");
            sb.Append("  CloudUrl: ").Append(CloudUrl).Append("\n");
            sb.Append("  CloudUrlExpiration: ").Append(CloudUrlExpiration).Append("\n");
            sb.Append("  Code: ").Append(Code).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  ExcludeFromGallery: ").Append(ExcludeFromGallery).Append("\n");
            sb.Append("  FileName: ").Append(FileName).Append("\n");
            sb.Append("  Height: ").Append(Height).Append("\n");
            sb.Append("  MerchantItemMultimediaOid: ").Append(MerchantItemMultimediaOid).Append("\n");
            sb.Append("  Orphan: ").Append(Orphan).Append("\n");
            sb.Append("  Placeholder: ").Append(Placeholder).Append("\n");
            sb.Append("  TempMultimediaOid: ").Append(TempMultimediaOid).Append("\n");
            sb.Append("  Thumbnails: ").Append(Thumbnails).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Url: ").Append(Url).Append("\n");
            sb.Append("  Width: ").Append(Width).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as ItemContentMultimedia);
        }

        /// <summary>
        /// Returns true if ItemContentMultimedia instances are equal
        /// </summary>
        /// <param name="other">Instance of ItemContentMultimedia to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ItemContentMultimedia other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.CloudUrl == other.CloudUrl ||
                    this.CloudUrl != null &&
                    this.CloudUrl.Equals(other.CloudUrl)
                ) && 
                (
                    this.CloudUrlExpiration == other.CloudUrlExpiration ||
                    this.CloudUrlExpiration != null &&
                    this.CloudUrlExpiration.Equals(other.CloudUrlExpiration)
                ) && 
                (
                    this.Code == other.Code ||
                    this.Code != null &&
                    this.Code.Equals(other.Code)
                ) && 
                (
                    this.Description == other.Description ||
                    this.Description != null &&
                    this.Description.Equals(other.Description)
                ) && 
                (
                    this.ExcludeFromGallery == other.ExcludeFromGallery ||
                    this.ExcludeFromGallery != null &&
                    this.ExcludeFromGallery.Equals(other.ExcludeFromGallery)
                ) && 
                (
                    this.FileName == other.FileName ||
                    this.FileName != null &&
                    this.FileName.Equals(other.FileName)
                ) && 
                (
                    this.Height == other.Height ||
                    this.Height != null &&
                    this.Height.Equals(other.Height)
                ) && 
                (
                    this.MerchantItemMultimediaOid == other.MerchantItemMultimediaOid ||
                    this.MerchantItemMultimediaOid != null &&
                    this.MerchantItemMultimediaOid.Equals(other.MerchantItemMultimediaOid)
                ) && 
                (
                    this.Orphan == other.Orphan ||
                    this.Orphan != null &&
                    this.Orphan.Equals(other.Orphan)
                ) && 
                (
                    this.Placeholder == other.Placeholder ||
                    this.Placeholder != null &&
                    this.Placeholder.Equals(other.Placeholder)
                ) && 
                (
                    this.TempMultimediaOid == other.TempMultimediaOid ||
                    this.TempMultimediaOid != null &&
                    this.TempMultimediaOid.Equals(other.TempMultimediaOid)
                ) && 
                (
                    this.Thumbnails == other.Thumbnails ||
                    this.Thumbnails != null &&
                    this.Thumbnails.SequenceEqual(other.Thumbnails)
                ) && 
                (
                    this.Type == other.Type ||
                    this.Type != null &&
                    this.Type.Equals(other.Type)
                ) && 
                (
                    this.Url == other.Url ||
                    this.Url != null &&
                    this.Url.Equals(other.Url)
                ) && 
                (
                    this.Width == other.Width ||
                    this.Width != null &&
                    this.Width.Equals(other.Width)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.CloudUrl != null)
                    hash = hash * 59 + this.CloudUrl.GetHashCode();
                if (this.CloudUrlExpiration != null)
                    hash = hash * 59 + this.CloudUrlExpiration.GetHashCode();
                if (this.Code != null)
                    hash = hash * 59 + this.Code.GetHashCode();
                if (this.Description != null)
                    hash = hash * 59 + this.Description.GetHashCode();
                if (this.ExcludeFromGallery != null)
                    hash = hash * 59 + this.ExcludeFromGallery.GetHashCode();
                if (this.FileName != null)
                    hash = hash * 59 + this.FileName.GetHashCode();
                if (this.Height != null)
                    hash = hash * 59 + this.Height.GetHashCode();
                if (this.MerchantItemMultimediaOid != null)
                    hash = hash * 59 + this.MerchantItemMultimediaOid.GetHashCode();
                if (this.Orphan != null)
                    hash = hash * 59 + this.Orphan.GetHashCode();
                if (this.Placeholder != null)
                    hash = hash * 59 + this.Placeholder.GetHashCode();
                if (this.TempMultimediaOid != null)
                    hash = hash * 59 + this.TempMultimediaOid.GetHashCode();
                if (this.Thumbnails != null)
                    hash = hash * 59 + this.Thumbnails.GetHashCode();
                if (this.Type != null)
                    hash = hash * 59 + this.Type.GetHashCode();
                if (this.Url != null)
                    hash = hash * 59 + this.Url.GetHashCode();
                if (this.Width != null)
                    hash = hash * 59 + this.Width.GetHashCode();
                return hash;
            }
        }
    }

}
