/* 
 * UltraCart Rest API V2
 *
 * This is the next generation UltraCart REST API...
 *
 * OpenAPI spec version: 2.0.0
 * Contact: support@ultracart.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace com.ultracart.admin.v2.Model
{
    /// <summary>
    /// ItemContentMultimediaThumbnail
    /// </summary>
    [DataContract]
    public partial class ItemContentMultimediaThumbnail :  IEquatable<ItemContentMultimediaThumbnail>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ItemContentMultimediaThumbnail" /> class.
        /// </summary>
        /// <param name="Height">Height.</param>
        /// <param name="HttpUrl">HttpUrl.</param>
        /// <param name="HttpsUrl">HttpsUrl.</param>
        /// <param name="PngFormat">PngFormat.</param>
        /// <param name="Square">Square.</param>
        /// <param name="Width">Width.</param>
        public ItemContentMultimediaThumbnail(int? Height = null, string HttpUrl = null, string HttpsUrl = null, bool? PngFormat = null, bool? Square = null, int? Width = null)
        {
            this.Height = Height;
            this.HttpUrl = HttpUrl;
            this.HttpsUrl = HttpsUrl;
            this.PngFormat = PngFormat;
            this.Square = Square;
            this.Width = Width;
        }
        
        /// <summary>
        /// Gets or Sets Height
        /// </summary>
        [DataMember(Name="height", EmitDefaultValue=false)]
        public int? Height { get; set; }
        /// <summary>
        /// Gets or Sets HttpUrl
        /// </summary>
        [DataMember(Name="http_url", EmitDefaultValue=false)]
        public string HttpUrl { get; set; }
        /// <summary>
        /// Gets or Sets HttpsUrl
        /// </summary>
        [DataMember(Name="https_url", EmitDefaultValue=false)]
        public string HttpsUrl { get; set; }
        /// <summary>
        /// Gets or Sets PngFormat
        /// </summary>
        [DataMember(Name="png_format", EmitDefaultValue=false)]
        public bool? PngFormat { get; set; }
        /// <summary>
        /// Gets or Sets Square
        /// </summary>
        [DataMember(Name="square", EmitDefaultValue=false)]
        public bool? Square { get; set; }
        /// <summary>
        /// Gets or Sets Width
        /// </summary>
        [DataMember(Name="width", EmitDefaultValue=false)]
        public int? Width { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ItemContentMultimediaThumbnail {\n");
            sb.Append("  Height: ").Append(Height).Append("\n");
            sb.Append("  HttpUrl: ").Append(HttpUrl).Append("\n");
            sb.Append("  HttpsUrl: ").Append(HttpsUrl).Append("\n");
            sb.Append("  PngFormat: ").Append(PngFormat).Append("\n");
            sb.Append("  Square: ").Append(Square).Append("\n");
            sb.Append("  Width: ").Append(Width).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as ItemContentMultimediaThumbnail);
        }

        /// <summary>
        /// Returns true if ItemContentMultimediaThumbnail instances are equal
        /// </summary>
        /// <param name="other">Instance of ItemContentMultimediaThumbnail to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ItemContentMultimediaThumbnail other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Height == other.Height ||
                    this.Height != null &&
                    this.Height.Equals(other.Height)
                ) && 
                (
                    this.HttpUrl == other.HttpUrl ||
                    this.HttpUrl != null &&
                    this.HttpUrl.Equals(other.HttpUrl)
                ) && 
                (
                    this.HttpsUrl == other.HttpsUrl ||
                    this.HttpsUrl != null &&
                    this.HttpsUrl.Equals(other.HttpsUrl)
                ) && 
                (
                    this.PngFormat == other.PngFormat ||
                    this.PngFormat != null &&
                    this.PngFormat.Equals(other.PngFormat)
                ) && 
                (
                    this.Square == other.Square ||
                    this.Square != null &&
                    this.Square.Equals(other.Square)
                ) && 
                (
                    this.Width == other.Width ||
                    this.Width != null &&
                    this.Width.Equals(other.Width)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Height != null)
                    hash = hash * 59 + this.Height.GetHashCode();
                if (this.HttpUrl != null)
                    hash = hash * 59 + this.HttpUrl.GetHashCode();
                if (this.HttpsUrl != null)
                    hash = hash * 59 + this.HttpsUrl.GetHashCode();
                if (this.PngFormat != null)
                    hash = hash * 59 + this.PngFormat.GetHashCode();
                if (this.Square != null)
                    hash = hash * 59 + this.Square.GetHashCode();
                if (this.Width != null)
                    hash = hash * 59 + this.Width.GetHashCode();
                return hash;
            }
        }
    }

}
