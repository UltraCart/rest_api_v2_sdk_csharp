/* 
 * UltraCart Rest API V2
 *
 * This is the next generation UltraCart REST API...
 *
 * OpenAPI spec version: 2.0.0
 * Contact: support@ultracart.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace com.ultracart.admin.v2.Model
{
    /// <summary>
    /// ItemEbay
    /// </summary>
    [DataContract]
    public partial class ItemEbay :  IEquatable<ItemEbay>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ItemEbay" /> class.
        /// </summary>
        /// <param name="Active">True if the item is active for listing.</param>
        /// <param name="CategoryId">e-Bay category ID.</param>
        /// <param name="CategorySpecifics">Answers to category specific questions.</param>
        /// <param name="ConditionDescription">Description of the condition (e-Bay constant).</param>
        /// <param name="ConditionId">Numerical ID of the condition (e-Bay constant).</param>
        /// <param name="ConsecutiveFailures">Number of consecutive failures trying to list this item.</param>
        /// <param name="CustomCategory1">e-Bay Store category 1.</param>
        /// <param name="CustomCategory2">e-Bay Store category 2.</param>
        /// <param name="DispatchTimeMax">Maximum number of days it will take to ship the item.</param>
        /// <param name="Domestic1AdditionalCost">Domestic 1 method additional item cost.</param>
        /// <param name="Domestic1FirstCost">Domestic 1 method first item cost.</param>
        /// <param name="Domestic2AdditionalCost">Domestic 2 method additional item cost.</param>
        /// <param name="Domestic2FirstCost">Domestic 2 method first item cost.</param>
        /// <param name="Domestic3AdditionalCost">Domestic 3 method additional item cost.</param>
        /// <param name="Domestic3FirstCost">Domestic 3 method first item cost.</param>
        /// <param name="Domestic4AdditionalCost">Domestic 4 method additional item cost.</param>
        /// <param name="Domestic4FirstCost">Domestic 4 method first item cost.</param>
        /// <param name="EbayAuctionId">If listed, this is the e-Bay auction id.</param>
        /// <param name="EbaySpecificInventory">e-Bay specific inventory.</param>
        /// <param name="EbayTemplateName">The template name to use hwen rendering the e-Bay listing.</param>
        /// <param name="EbayTemplateOid">The template object identifier to use when rendering the e-Bay listing.</param>
        /// <param name="EndTime">Date/time of the auction end.</param>
        /// <param name="FreeShipping">True if item receives free shipping.</param>
        /// <param name="FreeShippingMethod">The method that is free for free shipping.</param>
        /// <param name="International1AdditionalCost">International 1 method additional item cost.</param>
        /// <param name="International1FirstCost">International 1 method first item cost.</param>
        /// <param name="International2AdditionalCost">International 2 method additional item cost.</param>
        /// <param name="International2FirstCost">International 2 method first item cost.</param>
        /// <param name="International3AdditionalCost">International 3 method additional item cost.</param>
        /// <param name="International3FirstCost">International 3 method first item cost.</param>
        /// <param name="International4AdditionalCost">International 4 method additional item cost.</param>
        /// <param name="International4FirstCost">International 4 method first item cost.</param>
        /// <param name="LastStatusDts">Date/time of the last status check.</param>
        /// <param name="ListedDispatchTimeMax">Current listing dispatch time maximum.</param>
        /// <param name="ListedEbayTemplateOid">The template object identifier used for the listing.</param>
        /// <param name="ListingDts">Date/time of the listing.</param>
        /// <param name="ListingDuration">The duration of the listing.</param>
        /// <param name="ListingPrice">Price to list the item at.</param>
        /// <param name="ListingPriceOverride">The price to list the item at if different than the regular UltraCart item price.</param>
        /// <param name="ListingType">The type of e-Bay listing.</param>
        /// <param name="MarketplaceAnalysis">MarketplaceAnalysis.</param>
        /// <param name="MarketplaceAnalysisPerform">True if marketplace analysis should be performed.</param>
        /// <param name="MarketplaceFinalValueFeePercentage">Marketplace FVF percentage.</param>
        /// <param name="MarketplaceLastCheckDts">Date/time of the marketplace analysis last check.</param>
        /// <param name="MarketplaceLowest">True if we are the lowest offer in the marketplace.</param>
        /// <param name="MarketplaceMapViolation">True if another seller is violating MAP.</param>
        /// <param name="MarketplaceMultiplier">Marketplace multiplier.</param>
        /// <param name="MarketplaceOtherPrice">Marketplace other price.</param>
        /// <param name="MarketplaceOtherSeller">Marketplace other seller.</param>
        /// <param name="MarketplaceOtherShipping">Marketplace other shipping.</param>
        /// <param name="MarketplaceOtherTotal">Marketplace other total.</param>
        /// <param name="MarketplaceOurAdditionalProfitPotential">Marketplace our additional profit potential.</param>
        /// <param name="MarketplaceOurPrice">Marketplace our price.</param>
        /// <param name="MarketplaceOurProfit">Marketplace our profit.</param>
        /// <param name="MarketplaceOurShipping">Marketplace our shipping.</param>
        /// <param name="MarketplaceOurTotal">Marketplace our total.</param>
        /// <param name="MarketplaceOverhead">Marketplace overhead.</param>
        /// <param name="MarketplaceProfitable">True if our listing is profitable to sell.</param>
        /// <param name="NextAttemptDts">Date/time for the next attempt to list.</param>
        /// <param name="NextListingDuration">The next listing duration to use when the current listing ends..</param>
        /// <param name="NoPromotionalShipping">True if the item should not qualify for promotional shipping.</param>
        /// <param name="PackagingHandlingCosts">Packaging and handling costs.</param>
        /// <param name="PreviousEbayAuctionId">Previous e-Bay auction id.</param>
        /// <param name="Quantity">Quantity available of the item.</param>
        /// <param name="ReservePrice">Reserve price.</param>
        /// <param name="SendDimensionsAndWeight">How to send the item dimensions and weights to e-Bay.</param>
        /// <param name="StartTime">Date/time of the auction start.</param>
        /// <param name="Status">Status of the item&#39;s listing.</param>
        /// <param name="TargetDispatchTimeMax">Typical number of days it will take to ship the item.</param>
        public ItemEbay(bool? Active = null, int? CategoryId = null, List<ItemEbayCategorySpecific> CategorySpecifics = null, string ConditionDescription = null, int? ConditionId = null, int? ConsecutiveFailures = null, long? CustomCategory1 = null, long? CustomCategory2 = null, int? DispatchTimeMax = null, decimal? Domestic1AdditionalCost = null, decimal? Domestic1FirstCost = null, decimal? Domestic2AdditionalCost = null, decimal? Domestic2FirstCost = null, decimal? Domestic3AdditionalCost = null, decimal? Domestic3FirstCost = null, decimal? Domestic4AdditionalCost = null, decimal? Domestic4FirstCost = null, string EbayAuctionId = null, int? EbaySpecificInventory = null, string EbayTemplateName = null, int? EbayTemplateOid = null, string EndTime = null, bool? FreeShipping = null, string FreeShippingMethod = null, decimal? International1AdditionalCost = null, decimal? International1FirstCost = null, decimal? International2AdditionalCost = null, decimal? International2FirstCost = null, decimal? International3AdditionalCost = null, decimal? International3FirstCost = null, decimal? International4AdditionalCost = null, decimal? International4FirstCost = null, string LastStatusDts = null, int? ListedDispatchTimeMax = null, int? ListedEbayTemplateOid = null, string ListingDts = null, string ListingDuration = null, decimal? ListingPrice = null, decimal? ListingPriceOverride = null, string ListingType = null, ItemEbayMarketPlaceAnalysis MarketplaceAnalysis = null, bool? MarketplaceAnalysisPerform = null, decimal? MarketplaceFinalValueFeePercentage = null, string MarketplaceLastCheckDts = null, bool? MarketplaceLowest = null, bool? MarketplaceMapViolation = null, decimal? MarketplaceMultiplier = null, decimal? MarketplaceOtherPrice = null, string MarketplaceOtherSeller = null, decimal? MarketplaceOtherShipping = null, decimal? MarketplaceOtherTotal = null, decimal? MarketplaceOurAdditionalProfitPotential = null, decimal? MarketplaceOurPrice = null, decimal? MarketplaceOurProfit = null, decimal? MarketplaceOurShipping = null, decimal? MarketplaceOurTotal = null, decimal? MarketplaceOverhead = null, bool? MarketplaceProfitable = null, string NextAttemptDts = null, string NextListingDuration = null, bool? NoPromotionalShipping = null, decimal? PackagingHandlingCosts = null, string PreviousEbayAuctionId = null, int? Quantity = null, decimal? ReservePrice = null, string SendDimensionsAndWeight = null, string StartTime = null, string Status = null, int? TargetDispatchTimeMax = null)
        {
            this.Active = Active;
            this.CategoryId = CategoryId;
            this.CategorySpecifics = CategorySpecifics;
            this.ConditionDescription = ConditionDescription;
            this.ConditionId = ConditionId;
            this.ConsecutiveFailures = ConsecutiveFailures;
            this.CustomCategory1 = CustomCategory1;
            this.CustomCategory2 = CustomCategory2;
            this.DispatchTimeMax = DispatchTimeMax;
            this.Domestic1AdditionalCost = Domestic1AdditionalCost;
            this.Domestic1FirstCost = Domestic1FirstCost;
            this.Domestic2AdditionalCost = Domestic2AdditionalCost;
            this.Domestic2FirstCost = Domestic2FirstCost;
            this.Domestic3AdditionalCost = Domestic3AdditionalCost;
            this.Domestic3FirstCost = Domestic3FirstCost;
            this.Domestic4AdditionalCost = Domestic4AdditionalCost;
            this.Domestic4FirstCost = Domestic4FirstCost;
            this.EbayAuctionId = EbayAuctionId;
            this.EbaySpecificInventory = EbaySpecificInventory;
            this.EbayTemplateName = EbayTemplateName;
            this.EbayTemplateOid = EbayTemplateOid;
            this.EndTime = EndTime;
            this.FreeShipping = FreeShipping;
            this.FreeShippingMethod = FreeShippingMethod;
            this.International1AdditionalCost = International1AdditionalCost;
            this.International1FirstCost = International1FirstCost;
            this.International2AdditionalCost = International2AdditionalCost;
            this.International2FirstCost = International2FirstCost;
            this.International3AdditionalCost = International3AdditionalCost;
            this.International3FirstCost = International3FirstCost;
            this.International4AdditionalCost = International4AdditionalCost;
            this.International4FirstCost = International4FirstCost;
            this.LastStatusDts = LastStatusDts;
            this.ListedDispatchTimeMax = ListedDispatchTimeMax;
            this.ListedEbayTemplateOid = ListedEbayTemplateOid;
            this.ListingDts = ListingDts;
            this.ListingDuration = ListingDuration;
            this.ListingPrice = ListingPrice;
            this.ListingPriceOverride = ListingPriceOverride;
            this.ListingType = ListingType;
            this.MarketplaceAnalysis = MarketplaceAnalysis;
            this.MarketplaceAnalysisPerform = MarketplaceAnalysisPerform;
            this.MarketplaceFinalValueFeePercentage = MarketplaceFinalValueFeePercentage;
            this.MarketplaceLastCheckDts = MarketplaceLastCheckDts;
            this.MarketplaceLowest = MarketplaceLowest;
            this.MarketplaceMapViolation = MarketplaceMapViolation;
            this.MarketplaceMultiplier = MarketplaceMultiplier;
            this.MarketplaceOtherPrice = MarketplaceOtherPrice;
            this.MarketplaceOtherSeller = MarketplaceOtherSeller;
            this.MarketplaceOtherShipping = MarketplaceOtherShipping;
            this.MarketplaceOtherTotal = MarketplaceOtherTotal;
            this.MarketplaceOurAdditionalProfitPotential = MarketplaceOurAdditionalProfitPotential;
            this.MarketplaceOurPrice = MarketplaceOurPrice;
            this.MarketplaceOurProfit = MarketplaceOurProfit;
            this.MarketplaceOurShipping = MarketplaceOurShipping;
            this.MarketplaceOurTotal = MarketplaceOurTotal;
            this.MarketplaceOverhead = MarketplaceOverhead;
            this.MarketplaceProfitable = MarketplaceProfitable;
            this.NextAttemptDts = NextAttemptDts;
            this.NextListingDuration = NextListingDuration;
            this.NoPromotionalShipping = NoPromotionalShipping;
            this.PackagingHandlingCosts = PackagingHandlingCosts;
            this.PreviousEbayAuctionId = PreviousEbayAuctionId;
            this.Quantity = Quantity;
            this.ReservePrice = ReservePrice;
            this.SendDimensionsAndWeight = SendDimensionsAndWeight;
            this.StartTime = StartTime;
            this.Status = Status;
            this.TargetDispatchTimeMax = TargetDispatchTimeMax;
        }
        
        /// <summary>
        /// True if the item is active for listing
        /// </summary>
        /// <value>True if the item is active for listing</value>
        [DataMember(Name="active", EmitDefaultValue=false)]
        public bool? Active { get; set; }
        /// <summary>
        /// e-Bay category ID
        /// </summary>
        /// <value>e-Bay category ID</value>
        [DataMember(Name="category_id", EmitDefaultValue=false)]
        public int? CategoryId { get; set; }
        /// <summary>
        /// Answers to category specific questions
        /// </summary>
        /// <value>Answers to category specific questions</value>
        [DataMember(Name="category_specifics", EmitDefaultValue=false)]
        public List<ItemEbayCategorySpecific> CategorySpecifics { get; set; }
        /// <summary>
        /// Description of the condition (e-Bay constant)
        /// </summary>
        /// <value>Description of the condition (e-Bay constant)</value>
        [DataMember(Name="condition_description", EmitDefaultValue=false)]
        public string ConditionDescription { get; set; }
        /// <summary>
        /// Numerical ID of the condition (e-Bay constant)
        /// </summary>
        /// <value>Numerical ID of the condition (e-Bay constant)</value>
        [DataMember(Name="condition_id", EmitDefaultValue=false)]
        public int? ConditionId { get; set; }
        /// <summary>
        /// Number of consecutive failures trying to list this item
        /// </summary>
        /// <value>Number of consecutive failures trying to list this item</value>
        [DataMember(Name="consecutive_failures", EmitDefaultValue=false)]
        public int? ConsecutiveFailures { get; set; }
        /// <summary>
        /// e-Bay Store category 1
        /// </summary>
        /// <value>e-Bay Store category 1</value>
        [DataMember(Name="custom_category1", EmitDefaultValue=false)]
        public long? CustomCategory1 { get; set; }
        /// <summary>
        /// e-Bay Store category 2
        /// </summary>
        /// <value>e-Bay Store category 2</value>
        [DataMember(Name="custom_category2", EmitDefaultValue=false)]
        public long? CustomCategory2 { get; set; }
        /// <summary>
        /// Maximum number of days it will take to ship the item
        /// </summary>
        /// <value>Maximum number of days it will take to ship the item</value>
        [DataMember(Name="dispatch_time_max", EmitDefaultValue=false)]
        public int? DispatchTimeMax { get; set; }
        /// <summary>
        /// Domestic 1 method additional item cost
        /// </summary>
        /// <value>Domestic 1 method additional item cost</value>
        [DataMember(Name="domestic_1_additional_cost", EmitDefaultValue=false)]
        public decimal? Domestic1AdditionalCost { get; set; }
        /// <summary>
        /// Domestic 1 method first item cost
        /// </summary>
        /// <value>Domestic 1 method first item cost</value>
        [DataMember(Name="domestic_1_first_cost", EmitDefaultValue=false)]
        public decimal? Domestic1FirstCost { get; set; }
        /// <summary>
        /// Domestic 2 method additional item cost
        /// </summary>
        /// <value>Domestic 2 method additional item cost</value>
        [DataMember(Name="domestic_2_additional_cost", EmitDefaultValue=false)]
        public decimal? Domestic2AdditionalCost { get; set; }
        /// <summary>
        /// Domestic 2 method first item cost
        /// </summary>
        /// <value>Domestic 2 method first item cost</value>
        [DataMember(Name="domestic_2_first_cost", EmitDefaultValue=false)]
        public decimal? Domestic2FirstCost { get; set; }
        /// <summary>
        /// Domestic 3 method additional item cost
        /// </summary>
        /// <value>Domestic 3 method additional item cost</value>
        [DataMember(Name="domestic_3_additional_cost", EmitDefaultValue=false)]
        public decimal? Domestic3AdditionalCost { get; set; }
        /// <summary>
        /// Domestic 3 method first item cost
        /// </summary>
        /// <value>Domestic 3 method first item cost</value>
        [DataMember(Name="domestic_3_first_cost", EmitDefaultValue=false)]
        public decimal? Domestic3FirstCost { get; set; }
        /// <summary>
        /// Domestic 4 method additional item cost
        /// </summary>
        /// <value>Domestic 4 method additional item cost</value>
        [DataMember(Name="domestic_4_additional_cost", EmitDefaultValue=false)]
        public decimal? Domestic4AdditionalCost { get; set; }
        /// <summary>
        /// Domestic 4 method first item cost
        /// </summary>
        /// <value>Domestic 4 method first item cost</value>
        [DataMember(Name="domestic_4_first_cost", EmitDefaultValue=false)]
        public decimal? Domestic4FirstCost { get; set; }
        /// <summary>
        /// If listed, this is the e-Bay auction id
        /// </summary>
        /// <value>If listed, this is the e-Bay auction id</value>
        [DataMember(Name="ebay_auction_id", EmitDefaultValue=false)]
        public string EbayAuctionId { get; set; }
        /// <summary>
        /// e-Bay specific inventory
        /// </summary>
        /// <value>e-Bay specific inventory</value>
        [DataMember(Name="ebay_specific_inventory", EmitDefaultValue=false)]
        public int? EbaySpecificInventory { get; set; }
        /// <summary>
        /// The template name to use hwen rendering the e-Bay listing
        /// </summary>
        /// <value>The template name to use hwen rendering the e-Bay listing</value>
        [DataMember(Name="ebay_template_name", EmitDefaultValue=false)]
        public string EbayTemplateName { get; set; }
        /// <summary>
        /// The template object identifier to use when rendering the e-Bay listing
        /// </summary>
        /// <value>The template object identifier to use when rendering the e-Bay listing</value>
        [DataMember(Name="ebay_template_oid", EmitDefaultValue=false)]
        public int? EbayTemplateOid { get; set; }
        /// <summary>
        /// Date/time of the auction end
        /// </summary>
        /// <value>Date/time of the auction end</value>
        [DataMember(Name="end_time", EmitDefaultValue=false)]
        public string EndTime { get; set; }
        /// <summary>
        /// True if item receives free shipping
        /// </summary>
        /// <value>True if item receives free shipping</value>
        [DataMember(Name="free_shipping", EmitDefaultValue=false)]
        public bool? FreeShipping { get; set; }
        /// <summary>
        /// The method that is free for free shipping
        /// </summary>
        /// <value>The method that is free for free shipping</value>
        [DataMember(Name="free_shipping_method", EmitDefaultValue=false)]
        public string FreeShippingMethod { get; set; }
        /// <summary>
        /// International 1 method additional item cost
        /// </summary>
        /// <value>International 1 method additional item cost</value>
        [DataMember(Name="international_1_additional_cost", EmitDefaultValue=false)]
        public decimal? International1AdditionalCost { get; set; }
        /// <summary>
        /// International 1 method first item cost
        /// </summary>
        /// <value>International 1 method first item cost</value>
        [DataMember(Name="international_1_first_cost", EmitDefaultValue=false)]
        public decimal? International1FirstCost { get; set; }
        /// <summary>
        /// International 2 method additional item cost
        /// </summary>
        /// <value>International 2 method additional item cost</value>
        [DataMember(Name="international_2_additional_cost", EmitDefaultValue=false)]
        public decimal? International2AdditionalCost { get; set; }
        /// <summary>
        /// International 2 method first item cost
        /// </summary>
        /// <value>International 2 method first item cost</value>
        [DataMember(Name="international_2_first_cost", EmitDefaultValue=false)]
        public decimal? International2FirstCost { get; set; }
        /// <summary>
        /// International 3 method additional item cost
        /// </summary>
        /// <value>International 3 method additional item cost</value>
        [DataMember(Name="international_3_additional_cost", EmitDefaultValue=false)]
        public decimal? International3AdditionalCost { get; set; }
        /// <summary>
        /// International 3 method first item cost
        /// </summary>
        /// <value>International 3 method first item cost</value>
        [DataMember(Name="international_3_first_cost", EmitDefaultValue=false)]
        public decimal? International3FirstCost { get; set; }
        /// <summary>
        /// International 4 method additional item cost
        /// </summary>
        /// <value>International 4 method additional item cost</value>
        [DataMember(Name="international_4_additional_cost", EmitDefaultValue=false)]
        public decimal? International4AdditionalCost { get; set; }
        /// <summary>
        /// International 4 method first item cost
        /// </summary>
        /// <value>International 4 method first item cost</value>
        [DataMember(Name="international_4_first_cost", EmitDefaultValue=false)]
        public decimal? International4FirstCost { get; set; }
        /// <summary>
        /// Date/time of the last status check
        /// </summary>
        /// <value>Date/time of the last status check</value>
        [DataMember(Name="last_status_dts", EmitDefaultValue=false)]
        public string LastStatusDts { get; set; }
        /// <summary>
        /// Current listing dispatch time maximum
        /// </summary>
        /// <value>Current listing dispatch time maximum</value>
        [DataMember(Name="listed_dispatch_time_max", EmitDefaultValue=false)]
        public int? ListedDispatchTimeMax { get; set; }
        /// <summary>
        /// The template object identifier used for the listing
        /// </summary>
        /// <value>The template object identifier used for the listing</value>
        [DataMember(Name="listed_ebay_template_oid", EmitDefaultValue=false)]
        public int? ListedEbayTemplateOid { get; set; }
        /// <summary>
        /// Date/time of the listing
        /// </summary>
        /// <value>Date/time of the listing</value>
        [DataMember(Name="listing_dts", EmitDefaultValue=false)]
        public string ListingDts { get; set; }
        /// <summary>
        /// The duration of the listing
        /// </summary>
        /// <value>The duration of the listing</value>
        [DataMember(Name="listing_duration", EmitDefaultValue=false)]
        public string ListingDuration { get; set; }
        /// <summary>
        /// Price to list the item at
        /// </summary>
        /// <value>Price to list the item at</value>
        [DataMember(Name="listing_price", EmitDefaultValue=false)]
        public decimal? ListingPrice { get; set; }
        /// <summary>
        /// The price to list the item at if different than the regular UltraCart item price
        /// </summary>
        /// <value>The price to list the item at if different than the regular UltraCart item price</value>
        [DataMember(Name="listing_price_override", EmitDefaultValue=false)]
        public decimal? ListingPriceOverride { get; set; }
        /// <summary>
        /// The type of e-Bay listing
        /// </summary>
        /// <value>The type of e-Bay listing</value>
        [DataMember(Name="listing_type", EmitDefaultValue=false)]
        public string ListingType { get; set; }
        /// <summary>
        /// Gets or Sets MarketplaceAnalysis
        /// </summary>
        [DataMember(Name="marketplace_analysis", EmitDefaultValue=false)]
        public ItemEbayMarketPlaceAnalysis MarketplaceAnalysis { get; set; }
        /// <summary>
        /// True if marketplace analysis should be performed
        /// </summary>
        /// <value>True if marketplace analysis should be performed</value>
        [DataMember(Name="marketplace_analysis_perform", EmitDefaultValue=false)]
        public bool? MarketplaceAnalysisPerform { get; set; }
        /// <summary>
        /// Marketplace FVF percentage
        /// </summary>
        /// <value>Marketplace FVF percentage</value>
        [DataMember(Name="marketplace_final_value_fee_percentage", EmitDefaultValue=false)]
        public decimal? MarketplaceFinalValueFeePercentage { get; set; }
        /// <summary>
        /// Date/time of the marketplace analysis last check
        /// </summary>
        /// <value>Date/time of the marketplace analysis last check</value>
        [DataMember(Name="marketplace_last_check_dts", EmitDefaultValue=false)]
        public string MarketplaceLastCheckDts { get; set; }
        /// <summary>
        /// True if we are the lowest offer in the marketplace
        /// </summary>
        /// <value>True if we are the lowest offer in the marketplace</value>
        [DataMember(Name="marketplace_lowest", EmitDefaultValue=false)]
        public bool? MarketplaceLowest { get; set; }
        /// <summary>
        /// True if another seller is violating MAP
        /// </summary>
        /// <value>True if another seller is violating MAP</value>
        [DataMember(Name="marketplace_map_violation", EmitDefaultValue=false)]
        public bool? MarketplaceMapViolation { get; set; }
        /// <summary>
        /// Marketplace multiplier
        /// </summary>
        /// <value>Marketplace multiplier</value>
        [DataMember(Name="marketplace_multiplier", EmitDefaultValue=false)]
        public decimal? MarketplaceMultiplier { get; set; }
        /// <summary>
        /// Marketplace other price
        /// </summary>
        /// <value>Marketplace other price</value>
        [DataMember(Name="marketplace_other_price", EmitDefaultValue=false)]
        public decimal? MarketplaceOtherPrice { get; set; }
        /// <summary>
        /// Marketplace other seller
        /// </summary>
        /// <value>Marketplace other seller</value>
        [DataMember(Name="marketplace_other_seller", EmitDefaultValue=false)]
        public string MarketplaceOtherSeller { get; set; }
        /// <summary>
        /// Marketplace other shipping
        /// </summary>
        /// <value>Marketplace other shipping</value>
        [DataMember(Name="marketplace_other_shipping", EmitDefaultValue=false)]
        public decimal? MarketplaceOtherShipping { get; set; }
        /// <summary>
        /// Marketplace other total
        /// </summary>
        /// <value>Marketplace other total</value>
        [DataMember(Name="marketplace_other_total", EmitDefaultValue=false)]
        public decimal? MarketplaceOtherTotal { get; set; }
        /// <summary>
        /// Marketplace our additional profit potential
        /// </summary>
        /// <value>Marketplace our additional profit potential</value>
        [DataMember(Name="marketplace_our_additional_profit_potential", EmitDefaultValue=false)]
        public decimal? MarketplaceOurAdditionalProfitPotential { get; set; }
        /// <summary>
        /// Marketplace our price
        /// </summary>
        /// <value>Marketplace our price</value>
        [DataMember(Name="marketplace_our_price", EmitDefaultValue=false)]
        public decimal? MarketplaceOurPrice { get; set; }
        /// <summary>
        /// Marketplace our profit
        /// </summary>
        /// <value>Marketplace our profit</value>
        [DataMember(Name="marketplace_our_profit", EmitDefaultValue=false)]
        public decimal? MarketplaceOurProfit { get; set; }
        /// <summary>
        /// Marketplace our shipping
        /// </summary>
        /// <value>Marketplace our shipping</value>
        [DataMember(Name="marketplace_our_shipping", EmitDefaultValue=false)]
        public decimal? MarketplaceOurShipping { get; set; }
        /// <summary>
        /// Marketplace our total
        /// </summary>
        /// <value>Marketplace our total</value>
        [DataMember(Name="marketplace_our_total", EmitDefaultValue=false)]
        public decimal? MarketplaceOurTotal { get; set; }
        /// <summary>
        /// Marketplace overhead
        /// </summary>
        /// <value>Marketplace overhead</value>
        [DataMember(Name="marketplace_overhead", EmitDefaultValue=false)]
        public decimal? MarketplaceOverhead { get; set; }
        /// <summary>
        /// True if our listing is profitable to sell
        /// </summary>
        /// <value>True if our listing is profitable to sell</value>
        [DataMember(Name="marketplace_profitable", EmitDefaultValue=false)]
        public bool? MarketplaceProfitable { get; set; }
        /// <summary>
        /// Date/time for the next attempt to list
        /// </summary>
        /// <value>Date/time for the next attempt to list</value>
        [DataMember(Name="next_attempt_dts", EmitDefaultValue=false)]
        public string NextAttemptDts { get; set; }
        /// <summary>
        /// The next listing duration to use when the current listing ends.
        /// </summary>
        /// <value>The next listing duration to use when the current listing ends.</value>
        [DataMember(Name="next_listing_duration", EmitDefaultValue=false)]
        public string NextListingDuration { get; set; }
        /// <summary>
        /// True if the item should not qualify for promotional shipping
        /// </summary>
        /// <value>True if the item should not qualify for promotional shipping</value>
        [DataMember(Name="no_promotional_shipping", EmitDefaultValue=false)]
        public bool? NoPromotionalShipping { get; set; }
        /// <summary>
        /// Packaging and handling costs
        /// </summary>
        /// <value>Packaging and handling costs</value>
        [DataMember(Name="packaging_handling_costs", EmitDefaultValue=false)]
        public decimal? PackagingHandlingCosts { get; set; }
        /// <summary>
        /// Previous e-Bay auction id
        /// </summary>
        /// <value>Previous e-Bay auction id</value>
        [DataMember(Name="previous_ebay_auction_id", EmitDefaultValue=false)]
        public string PreviousEbayAuctionId { get; set; }
        /// <summary>
        /// Quantity available of the item
        /// </summary>
        /// <value>Quantity available of the item</value>
        [DataMember(Name="quantity", EmitDefaultValue=false)]
        public int? Quantity { get; set; }
        /// <summary>
        /// Reserve price
        /// </summary>
        /// <value>Reserve price</value>
        [DataMember(Name="reserve_price", EmitDefaultValue=false)]
        public decimal? ReservePrice { get; set; }
        /// <summary>
        /// How to send the item dimensions and weights to e-Bay
        /// </summary>
        /// <value>How to send the item dimensions and weights to e-Bay</value>
        [DataMember(Name="send_dimensions_and_weight", EmitDefaultValue=false)]
        public string SendDimensionsAndWeight { get; set; }
        /// <summary>
        /// Date/time of the auction start
        /// </summary>
        /// <value>Date/time of the auction start</value>
        [DataMember(Name="start_time", EmitDefaultValue=false)]
        public string StartTime { get; set; }
        /// <summary>
        /// Status of the item&#39;s listing
        /// </summary>
        /// <value>Status of the item&#39;s listing</value>
        [DataMember(Name="status", EmitDefaultValue=false)]
        public string Status { get; set; }
        /// <summary>
        /// Typical number of days it will take to ship the item
        /// </summary>
        /// <value>Typical number of days it will take to ship the item</value>
        [DataMember(Name="target_dispatch_time_max", EmitDefaultValue=false)]
        public int? TargetDispatchTimeMax { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ItemEbay {\n");
            sb.Append("  Active: ").Append(Active).Append("\n");
            sb.Append("  CategoryId: ").Append(CategoryId).Append("\n");
            sb.Append("  CategorySpecifics: ").Append(CategorySpecifics).Append("\n");
            sb.Append("  ConditionDescription: ").Append(ConditionDescription).Append("\n");
            sb.Append("  ConditionId: ").Append(ConditionId).Append("\n");
            sb.Append("  ConsecutiveFailures: ").Append(ConsecutiveFailures).Append("\n");
            sb.Append("  CustomCategory1: ").Append(CustomCategory1).Append("\n");
            sb.Append("  CustomCategory2: ").Append(CustomCategory2).Append("\n");
            sb.Append("  DispatchTimeMax: ").Append(DispatchTimeMax).Append("\n");
            sb.Append("  Domestic1AdditionalCost: ").Append(Domestic1AdditionalCost).Append("\n");
            sb.Append("  Domestic1FirstCost: ").Append(Domestic1FirstCost).Append("\n");
            sb.Append("  Domestic2AdditionalCost: ").Append(Domestic2AdditionalCost).Append("\n");
            sb.Append("  Domestic2FirstCost: ").Append(Domestic2FirstCost).Append("\n");
            sb.Append("  Domestic3AdditionalCost: ").Append(Domestic3AdditionalCost).Append("\n");
            sb.Append("  Domestic3FirstCost: ").Append(Domestic3FirstCost).Append("\n");
            sb.Append("  Domestic4AdditionalCost: ").Append(Domestic4AdditionalCost).Append("\n");
            sb.Append("  Domestic4FirstCost: ").Append(Domestic4FirstCost).Append("\n");
            sb.Append("  EbayAuctionId: ").Append(EbayAuctionId).Append("\n");
            sb.Append("  EbaySpecificInventory: ").Append(EbaySpecificInventory).Append("\n");
            sb.Append("  EbayTemplateName: ").Append(EbayTemplateName).Append("\n");
            sb.Append("  EbayTemplateOid: ").Append(EbayTemplateOid).Append("\n");
            sb.Append("  EndTime: ").Append(EndTime).Append("\n");
            sb.Append("  FreeShipping: ").Append(FreeShipping).Append("\n");
            sb.Append("  FreeShippingMethod: ").Append(FreeShippingMethod).Append("\n");
            sb.Append("  International1AdditionalCost: ").Append(International1AdditionalCost).Append("\n");
            sb.Append("  International1FirstCost: ").Append(International1FirstCost).Append("\n");
            sb.Append("  International2AdditionalCost: ").Append(International2AdditionalCost).Append("\n");
            sb.Append("  International2FirstCost: ").Append(International2FirstCost).Append("\n");
            sb.Append("  International3AdditionalCost: ").Append(International3AdditionalCost).Append("\n");
            sb.Append("  International3FirstCost: ").Append(International3FirstCost).Append("\n");
            sb.Append("  International4AdditionalCost: ").Append(International4AdditionalCost).Append("\n");
            sb.Append("  International4FirstCost: ").Append(International4FirstCost).Append("\n");
            sb.Append("  LastStatusDts: ").Append(LastStatusDts).Append("\n");
            sb.Append("  ListedDispatchTimeMax: ").Append(ListedDispatchTimeMax).Append("\n");
            sb.Append("  ListedEbayTemplateOid: ").Append(ListedEbayTemplateOid).Append("\n");
            sb.Append("  ListingDts: ").Append(ListingDts).Append("\n");
            sb.Append("  ListingDuration: ").Append(ListingDuration).Append("\n");
            sb.Append("  ListingPrice: ").Append(ListingPrice).Append("\n");
            sb.Append("  ListingPriceOverride: ").Append(ListingPriceOverride).Append("\n");
            sb.Append("  ListingType: ").Append(ListingType).Append("\n");
            sb.Append("  MarketplaceAnalysis: ").Append(MarketplaceAnalysis).Append("\n");
            sb.Append("  MarketplaceAnalysisPerform: ").Append(MarketplaceAnalysisPerform).Append("\n");
            sb.Append("  MarketplaceFinalValueFeePercentage: ").Append(MarketplaceFinalValueFeePercentage).Append("\n");
            sb.Append("  MarketplaceLastCheckDts: ").Append(MarketplaceLastCheckDts).Append("\n");
            sb.Append("  MarketplaceLowest: ").Append(MarketplaceLowest).Append("\n");
            sb.Append("  MarketplaceMapViolation: ").Append(MarketplaceMapViolation).Append("\n");
            sb.Append("  MarketplaceMultiplier: ").Append(MarketplaceMultiplier).Append("\n");
            sb.Append("  MarketplaceOtherPrice: ").Append(MarketplaceOtherPrice).Append("\n");
            sb.Append("  MarketplaceOtherSeller: ").Append(MarketplaceOtherSeller).Append("\n");
            sb.Append("  MarketplaceOtherShipping: ").Append(MarketplaceOtherShipping).Append("\n");
            sb.Append("  MarketplaceOtherTotal: ").Append(MarketplaceOtherTotal).Append("\n");
            sb.Append("  MarketplaceOurAdditionalProfitPotential: ").Append(MarketplaceOurAdditionalProfitPotential).Append("\n");
            sb.Append("  MarketplaceOurPrice: ").Append(MarketplaceOurPrice).Append("\n");
            sb.Append("  MarketplaceOurProfit: ").Append(MarketplaceOurProfit).Append("\n");
            sb.Append("  MarketplaceOurShipping: ").Append(MarketplaceOurShipping).Append("\n");
            sb.Append("  MarketplaceOurTotal: ").Append(MarketplaceOurTotal).Append("\n");
            sb.Append("  MarketplaceOverhead: ").Append(MarketplaceOverhead).Append("\n");
            sb.Append("  MarketplaceProfitable: ").Append(MarketplaceProfitable).Append("\n");
            sb.Append("  NextAttemptDts: ").Append(NextAttemptDts).Append("\n");
            sb.Append("  NextListingDuration: ").Append(NextListingDuration).Append("\n");
            sb.Append("  NoPromotionalShipping: ").Append(NoPromotionalShipping).Append("\n");
            sb.Append("  PackagingHandlingCosts: ").Append(PackagingHandlingCosts).Append("\n");
            sb.Append("  PreviousEbayAuctionId: ").Append(PreviousEbayAuctionId).Append("\n");
            sb.Append("  Quantity: ").Append(Quantity).Append("\n");
            sb.Append("  ReservePrice: ").Append(ReservePrice).Append("\n");
            sb.Append("  SendDimensionsAndWeight: ").Append(SendDimensionsAndWeight).Append("\n");
            sb.Append("  StartTime: ").Append(StartTime).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  TargetDispatchTimeMax: ").Append(TargetDispatchTimeMax).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as ItemEbay);
        }

        /// <summary>
        /// Returns true if ItemEbay instances are equal
        /// </summary>
        /// <param name="other">Instance of ItemEbay to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ItemEbay other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Active == other.Active ||
                    this.Active != null &&
                    this.Active.Equals(other.Active)
                ) && 
                (
                    this.CategoryId == other.CategoryId ||
                    this.CategoryId != null &&
                    this.CategoryId.Equals(other.CategoryId)
                ) && 
                (
                    this.CategorySpecifics == other.CategorySpecifics ||
                    this.CategorySpecifics != null &&
                    this.CategorySpecifics.SequenceEqual(other.CategorySpecifics)
                ) && 
                (
                    this.ConditionDescription == other.ConditionDescription ||
                    this.ConditionDescription != null &&
                    this.ConditionDescription.Equals(other.ConditionDescription)
                ) && 
                (
                    this.ConditionId == other.ConditionId ||
                    this.ConditionId != null &&
                    this.ConditionId.Equals(other.ConditionId)
                ) && 
                (
                    this.ConsecutiveFailures == other.ConsecutiveFailures ||
                    this.ConsecutiveFailures != null &&
                    this.ConsecutiveFailures.Equals(other.ConsecutiveFailures)
                ) && 
                (
                    this.CustomCategory1 == other.CustomCategory1 ||
                    this.CustomCategory1 != null &&
                    this.CustomCategory1.Equals(other.CustomCategory1)
                ) && 
                (
                    this.CustomCategory2 == other.CustomCategory2 ||
                    this.CustomCategory2 != null &&
                    this.CustomCategory2.Equals(other.CustomCategory2)
                ) && 
                (
                    this.DispatchTimeMax == other.DispatchTimeMax ||
                    this.DispatchTimeMax != null &&
                    this.DispatchTimeMax.Equals(other.DispatchTimeMax)
                ) && 
                (
                    this.Domestic1AdditionalCost == other.Domestic1AdditionalCost ||
                    this.Domestic1AdditionalCost != null &&
                    this.Domestic1AdditionalCost.Equals(other.Domestic1AdditionalCost)
                ) && 
                (
                    this.Domestic1FirstCost == other.Domestic1FirstCost ||
                    this.Domestic1FirstCost != null &&
                    this.Domestic1FirstCost.Equals(other.Domestic1FirstCost)
                ) && 
                (
                    this.Domestic2AdditionalCost == other.Domestic2AdditionalCost ||
                    this.Domestic2AdditionalCost != null &&
                    this.Domestic2AdditionalCost.Equals(other.Domestic2AdditionalCost)
                ) && 
                (
                    this.Domestic2FirstCost == other.Domestic2FirstCost ||
                    this.Domestic2FirstCost != null &&
                    this.Domestic2FirstCost.Equals(other.Domestic2FirstCost)
                ) && 
                (
                    this.Domestic3AdditionalCost == other.Domestic3AdditionalCost ||
                    this.Domestic3AdditionalCost != null &&
                    this.Domestic3AdditionalCost.Equals(other.Domestic3AdditionalCost)
                ) && 
                (
                    this.Domestic3FirstCost == other.Domestic3FirstCost ||
                    this.Domestic3FirstCost != null &&
                    this.Domestic3FirstCost.Equals(other.Domestic3FirstCost)
                ) && 
                (
                    this.Domestic4AdditionalCost == other.Domestic4AdditionalCost ||
                    this.Domestic4AdditionalCost != null &&
                    this.Domestic4AdditionalCost.Equals(other.Domestic4AdditionalCost)
                ) && 
                (
                    this.Domestic4FirstCost == other.Domestic4FirstCost ||
                    this.Domestic4FirstCost != null &&
                    this.Domestic4FirstCost.Equals(other.Domestic4FirstCost)
                ) && 
                (
                    this.EbayAuctionId == other.EbayAuctionId ||
                    this.EbayAuctionId != null &&
                    this.EbayAuctionId.Equals(other.EbayAuctionId)
                ) && 
                (
                    this.EbaySpecificInventory == other.EbaySpecificInventory ||
                    this.EbaySpecificInventory != null &&
                    this.EbaySpecificInventory.Equals(other.EbaySpecificInventory)
                ) && 
                (
                    this.EbayTemplateName == other.EbayTemplateName ||
                    this.EbayTemplateName != null &&
                    this.EbayTemplateName.Equals(other.EbayTemplateName)
                ) && 
                (
                    this.EbayTemplateOid == other.EbayTemplateOid ||
                    this.EbayTemplateOid != null &&
                    this.EbayTemplateOid.Equals(other.EbayTemplateOid)
                ) && 
                (
                    this.EndTime == other.EndTime ||
                    this.EndTime != null &&
                    this.EndTime.Equals(other.EndTime)
                ) && 
                (
                    this.FreeShipping == other.FreeShipping ||
                    this.FreeShipping != null &&
                    this.FreeShipping.Equals(other.FreeShipping)
                ) && 
                (
                    this.FreeShippingMethod == other.FreeShippingMethod ||
                    this.FreeShippingMethod != null &&
                    this.FreeShippingMethod.Equals(other.FreeShippingMethod)
                ) && 
                (
                    this.International1AdditionalCost == other.International1AdditionalCost ||
                    this.International1AdditionalCost != null &&
                    this.International1AdditionalCost.Equals(other.International1AdditionalCost)
                ) && 
                (
                    this.International1FirstCost == other.International1FirstCost ||
                    this.International1FirstCost != null &&
                    this.International1FirstCost.Equals(other.International1FirstCost)
                ) && 
                (
                    this.International2AdditionalCost == other.International2AdditionalCost ||
                    this.International2AdditionalCost != null &&
                    this.International2AdditionalCost.Equals(other.International2AdditionalCost)
                ) && 
                (
                    this.International2FirstCost == other.International2FirstCost ||
                    this.International2FirstCost != null &&
                    this.International2FirstCost.Equals(other.International2FirstCost)
                ) && 
                (
                    this.International3AdditionalCost == other.International3AdditionalCost ||
                    this.International3AdditionalCost != null &&
                    this.International3AdditionalCost.Equals(other.International3AdditionalCost)
                ) && 
                (
                    this.International3FirstCost == other.International3FirstCost ||
                    this.International3FirstCost != null &&
                    this.International3FirstCost.Equals(other.International3FirstCost)
                ) && 
                (
                    this.International4AdditionalCost == other.International4AdditionalCost ||
                    this.International4AdditionalCost != null &&
                    this.International4AdditionalCost.Equals(other.International4AdditionalCost)
                ) && 
                (
                    this.International4FirstCost == other.International4FirstCost ||
                    this.International4FirstCost != null &&
                    this.International4FirstCost.Equals(other.International4FirstCost)
                ) && 
                (
                    this.LastStatusDts == other.LastStatusDts ||
                    this.LastStatusDts != null &&
                    this.LastStatusDts.Equals(other.LastStatusDts)
                ) && 
                (
                    this.ListedDispatchTimeMax == other.ListedDispatchTimeMax ||
                    this.ListedDispatchTimeMax != null &&
                    this.ListedDispatchTimeMax.Equals(other.ListedDispatchTimeMax)
                ) && 
                (
                    this.ListedEbayTemplateOid == other.ListedEbayTemplateOid ||
                    this.ListedEbayTemplateOid != null &&
                    this.ListedEbayTemplateOid.Equals(other.ListedEbayTemplateOid)
                ) && 
                (
                    this.ListingDts == other.ListingDts ||
                    this.ListingDts != null &&
                    this.ListingDts.Equals(other.ListingDts)
                ) && 
                (
                    this.ListingDuration == other.ListingDuration ||
                    this.ListingDuration != null &&
                    this.ListingDuration.Equals(other.ListingDuration)
                ) && 
                (
                    this.ListingPrice == other.ListingPrice ||
                    this.ListingPrice != null &&
                    this.ListingPrice.Equals(other.ListingPrice)
                ) && 
                (
                    this.ListingPriceOverride == other.ListingPriceOverride ||
                    this.ListingPriceOverride != null &&
                    this.ListingPriceOverride.Equals(other.ListingPriceOverride)
                ) && 
                (
                    this.ListingType == other.ListingType ||
                    this.ListingType != null &&
                    this.ListingType.Equals(other.ListingType)
                ) && 
                (
                    this.MarketplaceAnalysis == other.MarketplaceAnalysis ||
                    this.MarketplaceAnalysis != null &&
                    this.MarketplaceAnalysis.Equals(other.MarketplaceAnalysis)
                ) && 
                (
                    this.MarketplaceAnalysisPerform == other.MarketplaceAnalysisPerform ||
                    this.MarketplaceAnalysisPerform != null &&
                    this.MarketplaceAnalysisPerform.Equals(other.MarketplaceAnalysisPerform)
                ) && 
                (
                    this.MarketplaceFinalValueFeePercentage == other.MarketplaceFinalValueFeePercentage ||
                    this.MarketplaceFinalValueFeePercentage != null &&
                    this.MarketplaceFinalValueFeePercentage.Equals(other.MarketplaceFinalValueFeePercentage)
                ) && 
                (
                    this.MarketplaceLastCheckDts == other.MarketplaceLastCheckDts ||
                    this.MarketplaceLastCheckDts != null &&
                    this.MarketplaceLastCheckDts.Equals(other.MarketplaceLastCheckDts)
                ) && 
                (
                    this.MarketplaceLowest == other.MarketplaceLowest ||
                    this.MarketplaceLowest != null &&
                    this.MarketplaceLowest.Equals(other.MarketplaceLowest)
                ) && 
                (
                    this.MarketplaceMapViolation == other.MarketplaceMapViolation ||
                    this.MarketplaceMapViolation != null &&
                    this.MarketplaceMapViolation.Equals(other.MarketplaceMapViolation)
                ) && 
                (
                    this.MarketplaceMultiplier == other.MarketplaceMultiplier ||
                    this.MarketplaceMultiplier != null &&
                    this.MarketplaceMultiplier.Equals(other.MarketplaceMultiplier)
                ) && 
                (
                    this.MarketplaceOtherPrice == other.MarketplaceOtherPrice ||
                    this.MarketplaceOtherPrice != null &&
                    this.MarketplaceOtherPrice.Equals(other.MarketplaceOtherPrice)
                ) && 
                (
                    this.MarketplaceOtherSeller == other.MarketplaceOtherSeller ||
                    this.MarketplaceOtherSeller != null &&
                    this.MarketplaceOtherSeller.Equals(other.MarketplaceOtherSeller)
                ) && 
                (
                    this.MarketplaceOtherShipping == other.MarketplaceOtherShipping ||
                    this.MarketplaceOtherShipping != null &&
                    this.MarketplaceOtherShipping.Equals(other.MarketplaceOtherShipping)
                ) && 
                (
                    this.MarketplaceOtherTotal == other.MarketplaceOtherTotal ||
                    this.MarketplaceOtherTotal != null &&
                    this.MarketplaceOtherTotal.Equals(other.MarketplaceOtherTotal)
                ) && 
                (
                    this.MarketplaceOurAdditionalProfitPotential == other.MarketplaceOurAdditionalProfitPotential ||
                    this.MarketplaceOurAdditionalProfitPotential != null &&
                    this.MarketplaceOurAdditionalProfitPotential.Equals(other.MarketplaceOurAdditionalProfitPotential)
                ) && 
                (
                    this.MarketplaceOurPrice == other.MarketplaceOurPrice ||
                    this.MarketplaceOurPrice != null &&
                    this.MarketplaceOurPrice.Equals(other.MarketplaceOurPrice)
                ) && 
                (
                    this.MarketplaceOurProfit == other.MarketplaceOurProfit ||
                    this.MarketplaceOurProfit != null &&
                    this.MarketplaceOurProfit.Equals(other.MarketplaceOurProfit)
                ) && 
                (
                    this.MarketplaceOurShipping == other.MarketplaceOurShipping ||
                    this.MarketplaceOurShipping != null &&
                    this.MarketplaceOurShipping.Equals(other.MarketplaceOurShipping)
                ) && 
                (
                    this.MarketplaceOurTotal == other.MarketplaceOurTotal ||
                    this.MarketplaceOurTotal != null &&
                    this.MarketplaceOurTotal.Equals(other.MarketplaceOurTotal)
                ) && 
                (
                    this.MarketplaceOverhead == other.MarketplaceOverhead ||
                    this.MarketplaceOverhead != null &&
                    this.MarketplaceOverhead.Equals(other.MarketplaceOverhead)
                ) && 
                (
                    this.MarketplaceProfitable == other.MarketplaceProfitable ||
                    this.MarketplaceProfitable != null &&
                    this.MarketplaceProfitable.Equals(other.MarketplaceProfitable)
                ) && 
                (
                    this.NextAttemptDts == other.NextAttemptDts ||
                    this.NextAttemptDts != null &&
                    this.NextAttemptDts.Equals(other.NextAttemptDts)
                ) && 
                (
                    this.NextListingDuration == other.NextListingDuration ||
                    this.NextListingDuration != null &&
                    this.NextListingDuration.Equals(other.NextListingDuration)
                ) && 
                (
                    this.NoPromotionalShipping == other.NoPromotionalShipping ||
                    this.NoPromotionalShipping != null &&
                    this.NoPromotionalShipping.Equals(other.NoPromotionalShipping)
                ) && 
                (
                    this.PackagingHandlingCosts == other.PackagingHandlingCosts ||
                    this.PackagingHandlingCosts != null &&
                    this.PackagingHandlingCosts.Equals(other.PackagingHandlingCosts)
                ) && 
                (
                    this.PreviousEbayAuctionId == other.PreviousEbayAuctionId ||
                    this.PreviousEbayAuctionId != null &&
                    this.PreviousEbayAuctionId.Equals(other.PreviousEbayAuctionId)
                ) && 
                (
                    this.Quantity == other.Quantity ||
                    this.Quantity != null &&
                    this.Quantity.Equals(other.Quantity)
                ) && 
                (
                    this.ReservePrice == other.ReservePrice ||
                    this.ReservePrice != null &&
                    this.ReservePrice.Equals(other.ReservePrice)
                ) && 
                (
                    this.SendDimensionsAndWeight == other.SendDimensionsAndWeight ||
                    this.SendDimensionsAndWeight != null &&
                    this.SendDimensionsAndWeight.Equals(other.SendDimensionsAndWeight)
                ) && 
                (
                    this.StartTime == other.StartTime ||
                    this.StartTime != null &&
                    this.StartTime.Equals(other.StartTime)
                ) && 
                (
                    this.Status == other.Status ||
                    this.Status != null &&
                    this.Status.Equals(other.Status)
                ) && 
                (
                    this.TargetDispatchTimeMax == other.TargetDispatchTimeMax ||
                    this.TargetDispatchTimeMax != null &&
                    this.TargetDispatchTimeMax.Equals(other.TargetDispatchTimeMax)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Active != null)
                    hash = hash * 59 + this.Active.GetHashCode();
                if (this.CategoryId != null)
                    hash = hash * 59 + this.CategoryId.GetHashCode();
                if (this.CategorySpecifics != null)
                    hash = hash * 59 + this.CategorySpecifics.GetHashCode();
                if (this.ConditionDescription != null)
                    hash = hash * 59 + this.ConditionDescription.GetHashCode();
                if (this.ConditionId != null)
                    hash = hash * 59 + this.ConditionId.GetHashCode();
                if (this.ConsecutiveFailures != null)
                    hash = hash * 59 + this.ConsecutiveFailures.GetHashCode();
                if (this.CustomCategory1 != null)
                    hash = hash * 59 + this.CustomCategory1.GetHashCode();
                if (this.CustomCategory2 != null)
                    hash = hash * 59 + this.CustomCategory2.GetHashCode();
                if (this.DispatchTimeMax != null)
                    hash = hash * 59 + this.DispatchTimeMax.GetHashCode();
                if (this.Domestic1AdditionalCost != null)
                    hash = hash * 59 + this.Domestic1AdditionalCost.GetHashCode();
                if (this.Domestic1FirstCost != null)
                    hash = hash * 59 + this.Domestic1FirstCost.GetHashCode();
                if (this.Domestic2AdditionalCost != null)
                    hash = hash * 59 + this.Domestic2AdditionalCost.GetHashCode();
                if (this.Domestic2FirstCost != null)
                    hash = hash * 59 + this.Domestic2FirstCost.GetHashCode();
                if (this.Domestic3AdditionalCost != null)
                    hash = hash * 59 + this.Domestic3AdditionalCost.GetHashCode();
                if (this.Domestic3FirstCost != null)
                    hash = hash * 59 + this.Domestic3FirstCost.GetHashCode();
                if (this.Domestic4AdditionalCost != null)
                    hash = hash * 59 + this.Domestic4AdditionalCost.GetHashCode();
                if (this.Domestic4FirstCost != null)
                    hash = hash * 59 + this.Domestic4FirstCost.GetHashCode();
                if (this.EbayAuctionId != null)
                    hash = hash * 59 + this.EbayAuctionId.GetHashCode();
                if (this.EbaySpecificInventory != null)
                    hash = hash * 59 + this.EbaySpecificInventory.GetHashCode();
                if (this.EbayTemplateName != null)
                    hash = hash * 59 + this.EbayTemplateName.GetHashCode();
                if (this.EbayTemplateOid != null)
                    hash = hash * 59 + this.EbayTemplateOid.GetHashCode();
                if (this.EndTime != null)
                    hash = hash * 59 + this.EndTime.GetHashCode();
                if (this.FreeShipping != null)
                    hash = hash * 59 + this.FreeShipping.GetHashCode();
                if (this.FreeShippingMethod != null)
                    hash = hash * 59 + this.FreeShippingMethod.GetHashCode();
                if (this.International1AdditionalCost != null)
                    hash = hash * 59 + this.International1AdditionalCost.GetHashCode();
                if (this.International1FirstCost != null)
                    hash = hash * 59 + this.International1FirstCost.GetHashCode();
                if (this.International2AdditionalCost != null)
                    hash = hash * 59 + this.International2AdditionalCost.GetHashCode();
                if (this.International2FirstCost != null)
                    hash = hash * 59 + this.International2FirstCost.GetHashCode();
                if (this.International3AdditionalCost != null)
                    hash = hash * 59 + this.International3AdditionalCost.GetHashCode();
                if (this.International3FirstCost != null)
                    hash = hash * 59 + this.International3FirstCost.GetHashCode();
                if (this.International4AdditionalCost != null)
                    hash = hash * 59 + this.International4AdditionalCost.GetHashCode();
                if (this.International4FirstCost != null)
                    hash = hash * 59 + this.International4FirstCost.GetHashCode();
                if (this.LastStatusDts != null)
                    hash = hash * 59 + this.LastStatusDts.GetHashCode();
                if (this.ListedDispatchTimeMax != null)
                    hash = hash * 59 + this.ListedDispatchTimeMax.GetHashCode();
                if (this.ListedEbayTemplateOid != null)
                    hash = hash * 59 + this.ListedEbayTemplateOid.GetHashCode();
                if (this.ListingDts != null)
                    hash = hash * 59 + this.ListingDts.GetHashCode();
                if (this.ListingDuration != null)
                    hash = hash * 59 + this.ListingDuration.GetHashCode();
                if (this.ListingPrice != null)
                    hash = hash * 59 + this.ListingPrice.GetHashCode();
                if (this.ListingPriceOverride != null)
                    hash = hash * 59 + this.ListingPriceOverride.GetHashCode();
                if (this.ListingType != null)
                    hash = hash * 59 + this.ListingType.GetHashCode();
                if (this.MarketplaceAnalysis != null)
                    hash = hash * 59 + this.MarketplaceAnalysis.GetHashCode();
                if (this.MarketplaceAnalysisPerform != null)
                    hash = hash * 59 + this.MarketplaceAnalysisPerform.GetHashCode();
                if (this.MarketplaceFinalValueFeePercentage != null)
                    hash = hash * 59 + this.MarketplaceFinalValueFeePercentage.GetHashCode();
                if (this.MarketplaceLastCheckDts != null)
                    hash = hash * 59 + this.MarketplaceLastCheckDts.GetHashCode();
                if (this.MarketplaceLowest != null)
                    hash = hash * 59 + this.MarketplaceLowest.GetHashCode();
                if (this.MarketplaceMapViolation != null)
                    hash = hash * 59 + this.MarketplaceMapViolation.GetHashCode();
                if (this.MarketplaceMultiplier != null)
                    hash = hash * 59 + this.MarketplaceMultiplier.GetHashCode();
                if (this.MarketplaceOtherPrice != null)
                    hash = hash * 59 + this.MarketplaceOtherPrice.GetHashCode();
                if (this.MarketplaceOtherSeller != null)
                    hash = hash * 59 + this.MarketplaceOtherSeller.GetHashCode();
                if (this.MarketplaceOtherShipping != null)
                    hash = hash * 59 + this.MarketplaceOtherShipping.GetHashCode();
                if (this.MarketplaceOtherTotal != null)
                    hash = hash * 59 + this.MarketplaceOtherTotal.GetHashCode();
                if (this.MarketplaceOurAdditionalProfitPotential != null)
                    hash = hash * 59 + this.MarketplaceOurAdditionalProfitPotential.GetHashCode();
                if (this.MarketplaceOurPrice != null)
                    hash = hash * 59 + this.MarketplaceOurPrice.GetHashCode();
                if (this.MarketplaceOurProfit != null)
                    hash = hash * 59 + this.MarketplaceOurProfit.GetHashCode();
                if (this.MarketplaceOurShipping != null)
                    hash = hash * 59 + this.MarketplaceOurShipping.GetHashCode();
                if (this.MarketplaceOurTotal != null)
                    hash = hash * 59 + this.MarketplaceOurTotal.GetHashCode();
                if (this.MarketplaceOverhead != null)
                    hash = hash * 59 + this.MarketplaceOverhead.GetHashCode();
                if (this.MarketplaceProfitable != null)
                    hash = hash * 59 + this.MarketplaceProfitable.GetHashCode();
                if (this.NextAttemptDts != null)
                    hash = hash * 59 + this.NextAttemptDts.GetHashCode();
                if (this.NextListingDuration != null)
                    hash = hash * 59 + this.NextListingDuration.GetHashCode();
                if (this.NoPromotionalShipping != null)
                    hash = hash * 59 + this.NoPromotionalShipping.GetHashCode();
                if (this.PackagingHandlingCosts != null)
                    hash = hash * 59 + this.PackagingHandlingCosts.GetHashCode();
                if (this.PreviousEbayAuctionId != null)
                    hash = hash * 59 + this.PreviousEbayAuctionId.GetHashCode();
                if (this.Quantity != null)
                    hash = hash * 59 + this.Quantity.GetHashCode();
                if (this.ReservePrice != null)
                    hash = hash * 59 + this.ReservePrice.GetHashCode();
                if (this.SendDimensionsAndWeight != null)
                    hash = hash * 59 + this.SendDimensionsAndWeight.GetHashCode();
                if (this.StartTime != null)
                    hash = hash * 59 + this.StartTime.GetHashCode();
                if (this.Status != null)
                    hash = hash * 59 + this.Status.GetHashCode();
                if (this.TargetDispatchTimeMax != null)
                    hash = hash * 59 + this.TargetDispatchTimeMax.GetHashCode();
                return hash;
            }
        }
    }

}
