/* 
 * UltraCart Rest API V2
 *
 * This is the next generation UltraCart REST API...
 *
 * OpenAPI spec version: 2.0.0
 * Contact: support@ultracart.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace com.ultracart.admin.v2.Model
{
    /// <summary>
    /// ItemEbayMarketListing
    /// </summary>
    [DataContract]
    public partial class ItemEbayMarketListing :  IEquatable<ItemEbayMarketListing>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ItemEbayMarketListing" /> class.
        /// </summary>
        /// <param name="AuctionId">AuctionId.</param>
        /// <param name="Price">Price.</param>
        /// <param name="Seller">Seller.</param>
        /// <param name="Shipping">Shipping.</param>
        /// <param name="Total">Total.</param>
        public ItemEbayMarketListing(string AuctionId = null, double? Price = null, string Seller = null, double? Shipping = null, double? Total = null)
        {
            this.AuctionId = AuctionId;
            this.Price = Price;
            this.Seller = Seller;
            this.Shipping = Shipping;
            this.Total = Total;
        }
        
        /// <summary>
        /// Gets or Sets AuctionId
        /// </summary>
        [DataMember(Name="auction_id", EmitDefaultValue=false)]
        public string AuctionId { get; set; }
        /// <summary>
        /// Gets or Sets Price
        /// </summary>
        [DataMember(Name="price", EmitDefaultValue=false)]
        public double? Price { get; set; }
        /// <summary>
        /// Gets or Sets Seller
        /// </summary>
        [DataMember(Name="seller", EmitDefaultValue=false)]
        public string Seller { get; set; }
        /// <summary>
        /// Gets or Sets Shipping
        /// </summary>
        [DataMember(Name="shipping", EmitDefaultValue=false)]
        public double? Shipping { get; set; }
        /// <summary>
        /// Gets or Sets Total
        /// </summary>
        [DataMember(Name="total", EmitDefaultValue=false)]
        public double? Total { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ItemEbayMarketListing {\n");
            sb.Append("  AuctionId: ").Append(AuctionId).Append("\n");
            sb.Append("  Price: ").Append(Price).Append("\n");
            sb.Append("  Seller: ").Append(Seller).Append("\n");
            sb.Append("  Shipping: ").Append(Shipping).Append("\n");
            sb.Append("  Total: ").Append(Total).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as ItemEbayMarketListing);
        }

        /// <summary>
        /// Returns true if ItemEbayMarketListing instances are equal
        /// </summary>
        /// <param name="other">Instance of ItemEbayMarketListing to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ItemEbayMarketListing other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.AuctionId == other.AuctionId ||
                    this.AuctionId != null &&
                    this.AuctionId.Equals(other.AuctionId)
                ) && 
                (
                    this.Price == other.Price ||
                    this.Price != null &&
                    this.Price.Equals(other.Price)
                ) && 
                (
                    this.Seller == other.Seller ||
                    this.Seller != null &&
                    this.Seller.Equals(other.Seller)
                ) && 
                (
                    this.Shipping == other.Shipping ||
                    this.Shipping != null &&
                    this.Shipping.Equals(other.Shipping)
                ) && 
                (
                    this.Total == other.Total ||
                    this.Total != null &&
                    this.Total.Equals(other.Total)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.AuctionId != null)
                    hash = hash * 59 + this.AuctionId.GetHashCode();
                if (this.Price != null)
                    hash = hash * 59 + this.Price.GetHashCode();
                if (this.Seller != null)
                    hash = hash * 59 + this.Seller.GetHashCode();
                if (this.Shipping != null)
                    hash = hash * 59 + this.Shipping.GetHashCode();
                if (this.Total != null)
                    hash = hash * 59 + this.Total.GetHashCode();
                return hash;
            }
        }
    }

}
