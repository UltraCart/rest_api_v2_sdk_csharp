/* 
 * UltraCart Rest API V2
 *
 * This is the next generation UltraCart REST API...
 *
 * OpenAPI spec version: 2.0.0
 * Contact: support@ultracart.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace com.ultracart.admin.v2.Model
{
    /// <summary>
    /// ItemEbayMarketPlaceAnalysis
    /// </summary>
    [DataContract]
    public partial class ItemEbayMarketPlaceAnalysis :  IEquatable<ItemEbayMarketPlaceAnalysis>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ItemEbayMarketPlaceAnalysis" /> class.
        /// </summary>
        /// <param name="AdjustedPrice">AdjustedPrice.</param>
        /// <param name="AdjustedShipping">AdjustedShipping.</param>
        /// <param name="AdjustedTotal">AdjustedTotal.</param>
        /// <param name="Cogs">Cogs.</param>
        /// <param name="FinalValueFee">FinalValueFee.</param>
        /// <param name="MinimumAdvertisedPrice">MinimumAdvertisedPrice.</param>
        /// <param name="OtherListings">OtherListings.</param>
        /// <param name="OurListing">OurListing.</param>
        /// <param name="Overhead">Overhead.</param>
        /// <param name="ProfitPotential">ProfitPotential.</param>
        public ItemEbayMarketPlaceAnalysis(double? AdjustedPrice = null, double? AdjustedShipping = null, double? AdjustedTotal = null, double? Cogs = null, double? FinalValueFee = null, double? MinimumAdvertisedPrice = null, List<ItemEbayMarketListing> OtherListings = null, ItemEbayMarketListing OurListing = null, double? Overhead = null, double? ProfitPotential = null)
        {
            this.AdjustedPrice = AdjustedPrice;
            this.AdjustedShipping = AdjustedShipping;
            this.AdjustedTotal = AdjustedTotal;
            this.Cogs = Cogs;
            this.FinalValueFee = FinalValueFee;
            this.MinimumAdvertisedPrice = MinimumAdvertisedPrice;
            this.OtherListings = OtherListings;
            this.OurListing = OurListing;
            this.Overhead = Overhead;
            this.ProfitPotential = ProfitPotential;
        }
        
        /// <summary>
        /// Gets or Sets AdjustedPrice
        /// </summary>
        [DataMember(Name="adjusted_price", EmitDefaultValue=false)]
        public double? AdjustedPrice { get; set; }
        /// <summary>
        /// Gets or Sets AdjustedShipping
        /// </summary>
        [DataMember(Name="adjusted_shipping", EmitDefaultValue=false)]
        public double? AdjustedShipping { get; set; }
        /// <summary>
        /// Gets or Sets AdjustedTotal
        /// </summary>
        [DataMember(Name="adjusted_total", EmitDefaultValue=false)]
        public double? AdjustedTotal { get; set; }
        /// <summary>
        /// Gets or Sets Cogs
        /// </summary>
        [DataMember(Name="cogs", EmitDefaultValue=false)]
        public double? Cogs { get; set; }
        /// <summary>
        /// Gets or Sets FinalValueFee
        /// </summary>
        [DataMember(Name="final_value_fee", EmitDefaultValue=false)]
        public double? FinalValueFee { get; set; }
        /// <summary>
        /// Gets or Sets MinimumAdvertisedPrice
        /// </summary>
        [DataMember(Name="minimum_advertised_price", EmitDefaultValue=false)]
        public double? MinimumAdvertisedPrice { get; set; }
        /// <summary>
        /// Gets or Sets OtherListings
        /// </summary>
        [DataMember(Name="other_listings", EmitDefaultValue=false)]
        public List<ItemEbayMarketListing> OtherListings { get; set; }
        /// <summary>
        /// Gets or Sets OurListing
        /// </summary>
        [DataMember(Name="our_listing", EmitDefaultValue=false)]
        public ItemEbayMarketListing OurListing { get; set; }
        /// <summary>
        /// Gets or Sets Overhead
        /// </summary>
        [DataMember(Name="overhead", EmitDefaultValue=false)]
        public double? Overhead { get; set; }
        /// <summary>
        /// Gets or Sets ProfitPotential
        /// </summary>
        [DataMember(Name="profit_potential", EmitDefaultValue=false)]
        public double? ProfitPotential { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ItemEbayMarketPlaceAnalysis {\n");
            sb.Append("  AdjustedPrice: ").Append(AdjustedPrice).Append("\n");
            sb.Append("  AdjustedShipping: ").Append(AdjustedShipping).Append("\n");
            sb.Append("  AdjustedTotal: ").Append(AdjustedTotal).Append("\n");
            sb.Append("  Cogs: ").Append(Cogs).Append("\n");
            sb.Append("  FinalValueFee: ").Append(FinalValueFee).Append("\n");
            sb.Append("  MinimumAdvertisedPrice: ").Append(MinimumAdvertisedPrice).Append("\n");
            sb.Append("  OtherListings: ").Append(OtherListings).Append("\n");
            sb.Append("  OurListing: ").Append(OurListing).Append("\n");
            sb.Append("  Overhead: ").Append(Overhead).Append("\n");
            sb.Append("  ProfitPotential: ").Append(ProfitPotential).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as ItemEbayMarketPlaceAnalysis);
        }

        /// <summary>
        /// Returns true if ItemEbayMarketPlaceAnalysis instances are equal
        /// </summary>
        /// <param name="other">Instance of ItemEbayMarketPlaceAnalysis to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ItemEbayMarketPlaceAnalysis other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.AdjustedPrice == other.AdjustedPrice ||
                    this.AdjustedPrice != null &&
                    this.AdjustedPrice.Equals(other.AdjustedPrice)
                ) && 
                (
                    this.AdjustedShipping == other.AdjustedShipping ||
                    this.AdjustedShipping != null &&
                    this.AdjustedShipping.Equals(other.AdjustedShipping)
                ) && 
                (
                    this.AdjustedTotal == other.AdjustedTotal ||
                    this.AdjustedTotal != null &&
                    this.AdjustedTotal.Equals(other.AdjustedTotal)
                ) && 
                (
                    this.Cogs == other.Cogs ||
                    this.Cogs != null &&
                    this.Cogs.Equals(other.Cogs)
                ) && 
                (
                    this.FinalValueFee == other.FinalValueFee ||
                    this.FinalValueFee != null &&
                    this.FinalValueFee.Equals(other.FinalValueFee)
                ) && 
                (
                    this.MinimumAdvertisedPrice == other.MinimumAdvertisedPrice ||
                    this.MinimumAdvertisedPrice != null &&
                    this.MinimumAdvertisedPrice.Equals(other.MinimumAdvertisedPrice)
                ) && 
                (
                    this.OtherListings == other.OtherListings ||
                    this.OtherListings != null &&
                    this.OtherListings.SequenceEqual(other.OtherListings)
                ) && 
                (
                    this.OurListing == other.OurListing ||
                    this.OurListing != null &&
                    this.OurListing.Equals(other.OurListing)
                ) && 
                (
                    this.Overhead == other.Overhead ||
                    this.Overhead != null &&
                    this.Overhead.Equals(other.Overhead)
                ) && 
                (
                    this.ProfitPotential == other.ProfitPotential ||
                    this.ProfitPotential != null &&
                    this.ProfitPotential.Equals(other.ProfitPotential)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.AdjustedPrice != null)
                    hash = hash * 59 + this.AdjustedPrice.GetHashCode();
                if (this.AdjustedShipping != null)
                    hash = hash * 59 + this.AdjustedShipping.GetHashCode();
                if (this.AdjustedTotal != null)
                    hash = hash * 59 + this.AdjustedTotal.GetHashCode();
                if (this.Cogs != null)
                    hash = hash * 59 + this.Cogs.GetHashCode();
                if (this.FinalValueFee != null)
                    hash = hash * 59 + this.FinalValueFee.GetHashCode();
                if (this.MinimumAdvertisedPrice != null)
                    hash = hash * 59 + this.MinimumAdvertisedPrice.GetHashCode();
                if (this.OtherListings != null)
                    hash = hash * 59 + this.OtherListings.GetHashCode();
                if (this.OurListing != null)
                    hash = hash * 59 + this.OurListing.GetHashCode();
                if (this.Overhead != null)
                    hash = hash * 59 + this.Overhead.GetHashCode();
                if (this.ProfitPotential != null)
                    hash = hash * 59 + this.ProfitPotential.GetHashCode();
                return hash;
            }
        }
    }

}
