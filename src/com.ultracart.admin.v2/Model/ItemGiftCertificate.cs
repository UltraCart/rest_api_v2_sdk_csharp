/* 
 * UltraCart Rest API V2
 *
 * This is the next generation UltraCart REST API...
 *
 * OpenAPI spec version: 2.0.0
 * Contact: support@ultracart.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace com.ultracart.admin.v2.Model
{
    /// <summary>
    /// ItemGiftCertificate
    /// </summary>
    [DataContract]
    public partial class ItemGiftCertificate :  IEquatable<ItemGiftCertificate>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ItemGiftCertificate" /> class.
        /// </summary>
        /// <param name="GiftCertificate">True if the purchase of this item generates a gift certificate.</param>
        /// <param name="GiftCertificateExpirationDays">The number of days that the gift certificate is good for (optional).</param>
        public ItemGiftCertificate(bool? GiftCertificate = null, int? GiftCertificateExpirationDays = null)
        {
            this.GiftCertificate = GiftCertificate;
            this.GiftCertificateExpirationDays = GiftCertificateExpirationDays;
        }
        
        /// <summary>
        /// True if the purchase of this item generates a gift certificate
        /// </summary>
        /// <value>True if the purchase of this item generates a gift certificate</value>
        [DataMember(Name="gift_certificate", EmitDefaultValue=false)]
        public bool? GiftCertificate { get; set; }
        /// <summary>
        /// The number of days that the gift certificate is good for (optional)
        /// </summary>
        /// <value>The number of days that the gift certificate is good for (optional)</value>
        [DataMember(Name="gift_certificate_expiration_days", EmitDefaultValue=false)]
        public int? GiftCertificateExpirationDays { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ItemGiftCertificate {\n");
            sb.Append("  GiftCertificate: ").Append(GiftCertificate).Append("\n");
            sb.Append("  GiftCertificateExpirationDays: ").Append(GiftCertificateExpirationDays).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as ItemGiftCertificate);
        }

        /// <summary>
        /// Returns true if ItemGiftCertificate instances are equal
        /// </summary>
        /// <param name="other">Instance of ItemGiftCertificate to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ItemGiftCertificate other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.GiftCertificate == other.GiftCertificate ||
                    this.GiftCertificate != null &&
                    this.GiftCertificate.Equals(other.GiftCertificate)
                ) && 
                (
                    this.GiftCertificateExpirationDays == other.GiftCertificateExpirationDays ||
                    this.GiftCertificateExpirationDays != null &&
                    this.GiftCertificateExpirationDays.Equals(other.GiftCertificateExpirationDays)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.GiftCertificate != null)
                    hash = hash * 59 + this.GiftCertificate.GetHashCode();
                if (this.GiftCertificateExpirationDays != null)
                    hash = hash * 59 + this.GiftCertificateExpirationDays.GetHashCode();
                return hash;
            }
        }
    }

}
