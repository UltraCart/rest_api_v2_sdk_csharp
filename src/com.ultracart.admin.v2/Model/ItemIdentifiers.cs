/* 
 * UltraCart Rest API V2
 *
 * This is the next generation UltraCart REST API...
 *
 * OpenAPI spec version: 2.0.0
 * Contact: support@ultracart.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace com.ultracart.admin.v2.Model
{
    /// <summary>
    /// ItemIdentifiers
    /// </summary>
    [DataContract]
    public partial class ItemIdentifiers :  IEquatable<ItemIdentifiers>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ItemIdentifiers" /> class.
        /// </summary>
        /// <param name="Barcode">Barcode.</param>
        /// <param name="ManufacturerName">ManufacturerName.</param>
        /// <param name="ManufacturerSku">ManufacturerSku.</param>
        /// <param name="Unspsc">Unspsc.</param>
        public ItemIdentifiers(string Barcode = null, string ManufacturerName = null, string ManufacturerSku = null, string Unspsc = null)
        {
            this.Barcode = Barcode;
            this.ManufacturerName = ManufacturerName;
            this.ManufacturerSku = ManufacturerSku;
            this.Unspsc = Unspsc;
        }
        
        /// <summary>
        /// Gets or Sets Barcode
        /// </summary>
        [DataMember(Name="barcode", EmitDefaultValue=false)]
        public string Barcode { get; set; }
        /// <summary>
        /// Gets or Sets ManufacturerName
        /// </summary>
        [DataMember(Name="manufacturer_name", EmitDefaultValue=false)]
        public string ManufacturerName { get; set; }
        /// <summary>
        /// Gets or Sets ManufacturerSku
        /// </summary>
        [DataMember(Name="manufacturer_sku", EmitDefaultValue=false)]
        public string ManufacturerSku { get; set; }
        /// <summary>
        /// Gets or Sets Unspsc
        /// </summary>
        [DataMember(Name="unspsc", EmitDefaultValue=false)]
        public string Unspsc { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ItemIdentifiers {\n");
            sb.Append("  Barcode: ").Append(Barcode).Append("\n");
            sb.Append("  ManufacturerName: ").Append(ManufacturerName).Append("\n");
            sb.Append("  ManufacturerSku: ").Append(ManufacturerSku).Append("\n");
            sb.Append("  Unspsc: ").Append(Unspsc).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as ItemIdentifiers);
        }

        /// <summary>
        /// Returns true if ItemIdentifiers instances are equal
        /// </summary>
        /// <param name="other">Instance of ItemIdentifiers to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ItemIdentifiers other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Barcode == other.Barcode ||
                    this.Barcode != null &&
                    this.Barcode.Equals(other.Barcode)
                ) && 
                (
                    this.ManufacturerName == other.ManufacturerName ||
                    this.ManufacturerName != null &&
                    this.ManufacturerName.Equals(other.ManufacturerName)
                ) && 
                (
                    this.ManufacturerSku == other.ManufacturerSku ||
                    this.ManufacturerSku != null &&
                    this.ManufacturerSku.Equals(other.ManufacturerSku)
                ) && 
                (
                    this.Unspsc == other.Unspsc ||
                    this.Unspsc != null &&
                    this.Unspsc.Equals(other.Unspsc)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Barcode != null)
                    hash = hash * 59 + this.Barcode.GetHashCode();
                if (this.ManufacturerName != null)
                    hash = hash * 59 + this.ManufacturerName.GetHashCode();
                if (this.ManufacturerSku != null)
                    hash = hash * 59 + this.ManufacturerSku.GetHashCode();
                if (this.Unspsc != null)
                    hash = hash * 59 + this.Unspsc.GetHashCode();
                return hash;
            }
        }
    }

}
