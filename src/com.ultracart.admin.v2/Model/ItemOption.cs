/* 
 * UltraCart Rest API V2
 *
 * This is the next generation UltraCart REST API...
 *
 * OpenAPI spec version: 2.0.0
 * Contact: support@ultracart.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace com.ultracart.admin.v2.Model
{
    /// <summary>
    /// ItemOption
    /// </summary>
    [DataContract]
    public partial class ItemOption :  IEquatable<ItemOption>
    {
        /// <summary>
        /// Type of option
        /// </summary>
        /// <value>Type of option</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TypeEnum
        {
            
            /// <summary>
            /// Enum Dropdown for "dropdown"
            /// </summary>
            [EnumMember(Value = "dropdown")]
            Dropdown,
            
            /// <summary>
            /// Enum Fileattachment for "file attachment"
            /// </summary>
            [EnumMember(Value = "file attachment")]
            Fileattachment,
            
            /// <summary>
            /// Enum Fixed for "fixed"
            /// </summary>
            [EnumMember(Value = "fixed")]
            Fixed,
            
            /// <summary>
            /// Enum Hidden for "hidden"
            /// </summary>
            [EnumMember(Value = "hidden")]
            Hidden,
            
            /// <summary>
            /// Enum Multiline for "multiline"
            /// </summary>
            [EnumMember(Value = "multiline")]
            Multiline,
            
            /// <summary>
            /// Enum Radio for "radio"
            /// </summary>
            [EnumMember(Value = "radio")]
            Radio,
            
            /// <summary>
            /// Enum Single for "single"
            /// </summary>
            [EnumMember(Value = "single")]
            Single
        }

        /// <summary>
        /// Type of option
        /// </summary>
        /// <value>Type of option</value>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public TypeEnum? Type { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="ItemOption" /> class.
        /// </summary>
        /// <param name="CostIfSpecified">Cost if specified.</param>
        /// <param name="CostPerLetter">Cost per letter.</param>
        /// <param name="CostPerLine">Cost per line.</param>
        /// <param name="IgnoreIfDefault">Ignore this option on the order if the default value is selected.</param>
        /// <param name="Label">Label.</param>
        /// <param name="LabelTranslatedTextInstanceOid">Label translated text instance ID.</param>
        /// <param name="Name">Name.</param>
        /// <param name="NameTranslatedTextInstanceOid">Name translated text instance ID.</param>
        /// <param name="OneTimeFee">One time fee.</param>
        /// <param name="OptionOid">Option object identifier.</param>
        /// <param name="Required">True if the customer is required to specify an answer.</param>
        /// <param name="SystemOption">True if this is a system option.</param>
        /// <param name="Type">Type of option.</param>
        /// <param name="Values">Values.</param>
        public ItemOption(decimal? CostIfSpecified = null, decimal? CostPerLetter = null, decimal? CostPerLine = null, bool? IgnoreIfDefault = null, string Label = null, int? LabelTranslatedTextInstanceOid = null, string Name = null, int? NameTranslatedTextInstanceOid = null, bool? OneTimeFee = null, int? OptionOid = null, bool? Required = null, bool? SystemOption = null, TypeEnum? Type = null, List<ItemOptionValue> Values = null)
        {
            this.CostIfSpecified = CostIfSpecified;
            this.CostPerLetter = CostPerLetter;
            this.CostPerLine = CostPerLine;
            this.IgnoreIfDefault = IgnoreIfDefault;
            this.Label = Label;
            this.LabelTranslatedTextInstanceOid = LabelTranslatedTextInstanceOid;
            this.Name = Name;
            this.NameTranslatedTextInstanceOid = NameTranslatedTextInstanceOid;
            this.OneTimeFee = OneTimeFee;
            this.OptionOid = OptionOid;
            this.Required = Required;
            this.SystemOption = SystemOption;
            this.Type = Type;
            this.Values = Values;
        }
        
        /// <summary>
        /// Cost if specified
        /// </summary>
        /// <value>Cost if specified</value>
        [DataMember(Name="cost_if_specified", EmitDefaultValue=false)]
        public decimal? CostIfSpecified { get; set; }
        /// <summary>
        /// Cost per letter
        /// </summary>
        /// <value>Cost per letter</value>
        [DataMember(Name="cost_per_letter", EmitDefaultValue=false)]
        public decimal? CostPerLetter { get; set; }
        /// <summary>
        /// Cost per line
        /// </summary>
        /// <value>Cost per line</value>
        [DataMember(Name="cost_per_line", EmitDefaultValue=false)]
        public decimal? CostPerLine { get; set; }
        /// <summary>
        /// Ignore this option on the order if the default value is selected
        /// </summary>
        /// <value>Ignore this option on the order if the default value is selected</value>
        [DataMember(Name="ignore_if_default", EmitDefaultValue=false)]
        public bool? IgnoreIfDefault { get; set; }
        /// <summary>
        /// Label
        /// </summary>
        /// <value>Label</value>
        [DataMember(Name="label", EmitDefaultValue=false)]
        public string Label { get; set; }
        /// <summary>
        /// Label translated text instance ID
        /// </summary>
        /// <value>Label translated text instance ID</value>
        [DataMember(Name="label_translated_text_instance_oid", EmitDefaultValue=false)]
        public int? LabelTranslatedTextInstanceOid { get; set; }
        /// <summary>
        /// Name
        /// </summary>
        /// <value>Name</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }
        /// <summary>
        /// Name translated text instance ID
        /// </summary>
        /// <value>Name translated text instance ID</value>
        [DataMember(Name="name_translated_text_instance_oid", EmitDefaultValue=false)]
        public int? NameTranslatedTextInstanceOid { get; set; }
        /// <summary>
        /// One time fee
        /// </summary>
        /// <value>One time fee</value>
        [DataMember(Name="one_time_fee", EmitDefaultValue=false)]
        public bool? OneTimeFee { get; set; }
        /// <summary>
        /// Option object identifier
        /// </summary>
        /// <value>Option object identifier</value>
        [DataMember(Name="option_oid", EmitDefaultValue=false)]
        public int? OptionOid { get; set; }
        /// <summary>
        /// True if the customer is required to specify an answer
        /// </summary>
        /// <value>True if the customer is required to specify an answer</value>
        [DataMember(Name="required", EmitDefaultValue=false)]
        public bool? Required { get; set; }
        /// <summary>
        /// True if this is a system option
        /// </summary>
        /// <value>True if this is a system option</value>
        [DataMember(Name="system_option", EmitDefaultValue=false)]
        public bool? SystemOption { get; set; }
        /// <summary>
        /// Values
        /// </summary>
        /// <value>Values</value>
        [DataMember(Name="values", EmitDefaultValue=false)]
        public List<ItemOptionValue> Values { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ItemOption {\n");
            sb.Append("  CostIfSpecified: ").Append(CostIfSpecified).Append("\n");
            sb.Append("  CostPerLetter: ").Append(CostPerLetter).Append("\n");
            sb.Append("  CostPerLine: ").Append(CostPerLine).Append("\n");
            sb.Append("  IgnoreIfDefault: ").Append(IgnoreIfDefault).Append("\n");
            sb.Append("  Label: ").Append(Label).Append("\n");
            sb.Append("  LabelTranslatedTextInstanceOid: ").Append(LabelTranslatedTextInstanceOid).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  NameTranslatedTextInstanceOid: ").Append(NameTranslatedTextInstanceOid).Append("\n");
            sb.Append("  OneTimeFee: ").Append(OneTimeFee).Append("\n");
            sb.Append("  OptionOid: ").Append(OptionOid).Append("\n");
            sb.Append("  Required: ").Append(Required).Append("\n");
            sb.Append("  SystemOption: ").Append(SystemOption).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Values: ").Append(Values).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as ItemOption);
        }

        /// <summary>
        /// Returns true if ItemOption instances are equal
        /// </summary>
        /// <param name="other">Instance of ItemOption to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ItemOption other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.CostIfSpecified == other.CostIfSpecified ||
                    this.CostIfSpecified != null &&
                    this.CostIfSpecified.Equals(other.CostIfSpecified)
                ) && 
                (
                    this.CostPerLetter == other.CostPerLetter ||
                    this.CostPerLetter != null &&
                    this.CostPerLetter.Equals(other.CostPerLetter)
                ) && 
                (
                    this.CostPerLine == other.CostPerLine ||
                    this.CostPerLine != null &&
                    this.CostPerLine.Equals(other.CostPerLine)
                ) && 
                (
                    this.IgnoreIfDefault == other.IgnoreIfDefault ||
                    this.IgnoreIfDefault != null &&
                    this.IgnoreIfDefault.Equals(other.IgnoreIfDefault)
                ) && 
                (
                    this.Label == other.Label ||
                    this.Label != null &&
                    this.Label.Equals(other.Label)
                ) && 
                (
                    this.LabelTranslatedTextInstanceOid == other.LabelTranslatedTextInstanceOid ||
                    this.LabelTranslatedTextInstanceOid != null &&
                    this.LabelTranslatedTextInstanceOid.Equals(other.LabelTranslatedTextInstanceOid)
                ) && 
                (
                    this.Name == other.Name ||
                    this.Name != null &&
                    this.Name.Equals(other.Name)
                ) && 
                (
                    this.NameTranslatedTextInstanceOid == other.NameTranslatedTextInstanceOid ||
                    this.NameTranslatedTextInstanceOid != null &&
                    this.NameTranslatedTextInstanceOid.Equals(other.NameTranslatedTextInstanceOid)
                ) && 
                (
                    this.OneTimeFee == other.OneTimeFee ||
                    this.OneTimeFee != null &&
                    this.OneTimeFee.Equals(other.OneTimeFee)
                ) && 
                (
                    this.OptionOid == other.OptionOid ||
                    this.OptionOid != null &&
                    this.OptionOid.Equals(other.OptionOid)
                ) && 
                (
                    this.Required == other.Required ||
                    this.Required != null &&
                    this.Required.Equals(other.Required)
                ) && 
                (
                    this.SystemOption == other.SystemOption ||
                    this.SystemOption != null &&
                    this.SystemOption.Equals(other.SystemOption)
                ) && 
                (
                    this.Type == other.Type ||
                    this.Type != null &&
                    this.Type.Equals(other.Type)
                ) && 
                (
                    this.Values == other.Values ||
                    this.Values != null &&
                    this.Values.SequenceEqual(other.Values)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.CostIfSpecified != null)
                    hash = hash * 59 + this.CostIfSpecified.GetHashCode();
                if (this.CostPerLetter != null)
                    hash = hash * 59 + this.CostPerLetter.GetHashCode();
                if (this.CostPerLine != null)
                    hash = hash * 59 + this.CostPerLine.GetHashCode();
                if (this.IgnoreIfDefault != null)
                    hash = hash * 59 + this.IgnoreIfDefault.GetHashCode();
                if (this.Label != null)
                    hash = hash * 59 + this.Label.GetHashCode();
                if (this.LabelTranslatedTextInstanceOid != null)
                    hash = hash * 59 + this.LabelTranslatedTextInstanceOid.GetHashCode();
                if (this.Name != null)
                    hash = hash * 59 + this.Name.GetHashCode();
                if (this.NameTranslatedTextInstanceOid != null)
                    hash = hash * 59 + this.NameTranslatedTextInstanceOid.GetHashCode();
                if (this.OneTimeFee != null)
                    hash = hash * 59 + this.OneTimeFee.GetHashCode();
                if (this.OptionOid != null)
                    hash = hash * 59 + this.OptionOid.GetHashCode();
                if (this.Required != null)
                    hash = hash * 59 + this.Required.GetHashCode();
                if (this.SystemOption != null)
                    hash = hash * 59 + this.SystemOption.GetHashCode();
                if (this.Type != null)
                    hash = hash * 59 + this.Type.GetHashCode();
                if (this.Values != null)
                    hash = hash * 59 + this.Values.GetHashCode();
                return hash;
            }
        }
    }

}
