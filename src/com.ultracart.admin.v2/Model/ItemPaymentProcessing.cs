/* 
 * UltraCart Rest API V2
 *
 * This is the next generation UltraCart REST API...
 *
 * OpenAPI spec version: 2.0.0
 * Contact: support@ultracart.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = com.ultracart.admin.v2.Client.SwaggerDateConverter;

namespace com.ultracart.admin.v2.Model
{
    /// <summary>
    /// ItemPaymentProcessing
    /// </summary>
    [DataContract]
    public partial class ItemPaymentProcessing :  IEquatable<ItemPaymentProcessing>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ItemPaymentProcessing" /> class.
        /// </summary>
        /// <param name="BlockPrepaid">True if prepaid cards should be blocked from buying this item.</param>
        /// <param name="CreditCardTransactionType">Credit card transaction type.</param>
        /// <param name="NoRealtimeCharge">True if no real-time charge should be performed on this item..</param>
        /// <param name="PaymentMethodValidity">Payment method validity.</param>
        /// <param name="RotatingTransactionGatewayCodes">Rotating transaction gateway codes.</param>
        public ItemPaymentProcessing(bool? BlockPrepaid = default(bool?), string CreditCardTransactionType = default(string), bool? NoRealtimeCharge = default(bool?), List<string> PaymentMethodValidity = default(List<string>), List<string> RotatingTransactionGatewayCodes = default(List<string>))
        {
            this.BlockPrepaid = BlockPrepaid;
            this.CreditCardTransactionType = CreditCardTransactionType;
            this.NoRealtimeCharge = NoRealtimeCharge;
            this.PaymentMethodValidity = PaymentMethodValidity;
            this.RotatingTransactionGatewayCodes = RotatingTransactionGatewayCodes;
        }
        
        /// <summary>
        /// True if prepaid cards should be blocked from buying this item
        /// </summary>
        /// <value>True if prepaid cards should be blocked from buying this item</value>
        [DataMember(Name="block_prepaid", EmitDefaultValue=false)]
        public bool? BlockPrepaid { get; set; }

        /// <summary>
        /// Credit card transaction type
        /// </summary>
        /// <value>Credit card transaction type</value>
        [DataMember(Name="credit_card_transaction_type", EmitDefaultValue=false)]
        public string CreditCardTransactionType { get; set; }

        /// <summary>
        /// True if no real-time charge should be performed on this item.
        /// </summary>
        /// <value>True if no real-time charge should be performed on this item.</value>
        [DataMember(Name="no_realtime_charge", EmitDefaultValue=false)]
        public bool? NoRealtimeCharge { get; set; }

        /// <summary>
        /// Payment method validity
        /// </summary>
        /// <value>Payment method validity</value>
        [DataMember(Name="payment_method_validity", EmitDefaultValue=false)]
        public List<string> PaymentMethodValidity { get; set; }

        /// <summary>
        /// Rotating transaction gateway codes
        /// </summary>
        /// <value>Rotating transaction gateway codes</value>
        [DataMember(Name="rotating_transaction_gateway_codes", EmitDefaultValue=false)]
        public List<string> RotatingTransactionGatewayCodes { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ItemPaymentProcessing {\n");
            sb.Append("  BlockPrepaid: ").Append(BlockPrepaid).Append("\n");
            sb.Append("  CreditCardTransactionType: ").Append(CreditCardTransactionType).Append("\n");
            sb.Append("  NoRealtimeCharge: ").Append(NoRealtimeCharge).Append("\n");
            sb.Append("  PaymentMethodValidity: ").Append(PaymentMethodValidity).Append("\n");
            sb.Append("  RotatingTransactionGatewayCodes: ").Append(RotatingTransactionGatewayCodes).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as ItemPaymentProcessing);
        }

        /// <summary>
        /// Returns true if ItemPaymentProcessing instances are equal
        /// </summary>
        /// <param name="other">Instance of ItemPaymentProcessing to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ItemPaymentProcessing other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.BlockPrepaid == other.BlockPrepaid ||
                    this.BlockPrepaid != null &&
                    this.BlockPrepaid.Equals(other.BlockPrepaid)
                ) && 
                (
                    this.CreditCardTransactionType == other.CreditCardTransactionType ||
                    this.CreditCardTransactionType != null &&
                    this.CreditCardTransactionType.Equals(other.CreditCardTransactionType)
                ) && 
                (
                    this.NoRealtimeCharge == other.NoRealtimeCharge ||
                    this.NoRealtimeCharge != null &&
                    this.NoRealtimeCharge.Equals(other.NoRealtimeCharge)
                ) && 
                (
                    this.PaymentMethodValidity == other.PaymentMethodValidity ||
                    this.PaymentMethodValidity != null &&
                    this.PaymentMethodValidity.SequenceEqual(other.PaymentMethodValidity)
                ) && 
                (
                    this.RotatingTransactionGatewayCodes == other.RotatingTransactionGatewayCodes ||
                    this.RotatingTransactionGatewayCodes != null &&
                    this.RotatingTransactionGatewayCodes.SequenceEqual(other.RotatingTransactionGatewayCodes)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.BlockPrepaid != null)
                    hash = hash * 59 + this.BlockPrepaid.GetHashCode();
                if (this.CreditCardTransactionType != null)
                    hash = hash * 59 + this.CreditCardTransactionType.GetHashCode();
                if (this.NoRealtimeCharge != null)
                    hash = hash * 59 + this.NoRealtimeCharge.GetHashCode();
                if (this.PaymentMethodValidity != null)
                    hash = hash * 59 + this.PaymentMethodValidity.GetHashCode();
                if (this.RotatingTransactionGatewayCodes != null)
                    hash = hash * 59 + this.RotatingTransactionGatewayCodes.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
