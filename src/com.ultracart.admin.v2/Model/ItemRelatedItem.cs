/* 
 * UltraCart Rest API V2
 *
 * This is the next generation UltraCart REST API...
 *
 * OpenAPI spec version: 2.0.0
 * Contact: support@ultracart.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = com.ultracart.admin.v2.Client.SwaggerDateConverter;

namespace com.ultracart.admin.v2.Model
{
    /// <summary>
    /// ItemRelatedItem
    /// </summary>
    [DataContract]
    public partial class ItemRelatedItem :  IEquatable<ItemRelatedItem>, IValidatableObject
    {
        /// <summary>
        /// Relationship type
        /// </summary>
        /// <value>Relationship type</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TypeEnum
        {
            
            /// <summary>
            /// Enum System for "System"
            /// </summary>
            [EnumMember(Value = "System")]
            System,
            
            /// <summary>
            /// Enum UserDefined for "UserDefined"
            /// </summary>
            [EnumMember(Value = "UserDefined")]
            UserDefined
        }

        /// <summary>
        /// Relationship type
        /// </summary>
        /// <value>Relationship type</value>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public TypeEnum? Type { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="ItemRelatedItem" /> class.
        /// </summary>
        /// <param name="RelatedMerchantItemId">Related item id.</param>
        /// <param name="RelatedMerchantItemOid">Related item object identifier.</param>
        /// <param name="Type">Relationship type.</param>
        public ItemRelatedItem(string RelatedMerchantItemId = default(string), int? RelatedMerchantItemOid = default(int?), TypeEnum? Type = default(TypeEnum?))
        {
            this.RelatedMerchantItemId = RelatedMerchantItemId;
            this.RelatedMerchantItemOid = RelatedMerchantItemOid;
            this.Type = Type;
        }
        
        /// <summary>
        /// Related item id
        /// </summary>
        /// <value>Related item id</value>
        [DataMember(Name="related_merchant_item_id", EmitDefaultValue=false)]
        public string RelatedMerchantItemId { get; set; }

        /// <summary>
        /// Related item object identifier
        /// </summary>
        /// <value>Related item object identifier</value>
        [DataMember(Name="related_merchant_item_oid", EmitDefaultValue=false)]
        public int? RelatedMerchantItemOid { get; set; }


        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ItemRelatedItem {\n");
            sb.Append("  RelatedMerchantItemId: ").Append(RelatedMerchantItemId).Append("\n");
            sb.Append("  RelatedMerchantItemOid: ").Append(RelatedMerchantItemOid).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as ItemRelatedItem);
        }

        /// <summary>
        /// Returns true if ItemRelatedItem instances are equal
        /// </summary>
        /// <param name="other">Instance of ItemRelatedItem to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ItemRelatedItem other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.RelatedMerchantItemId == other.RelatedMerchantItemId ||
                    this.RelatedMerchantItemId != null &&
                    this.RelatedMerchantItemId.Equals(other.RelatedMerchantItemId)
                ) && 
                (
                    this.RelatedMerchantItemOid == other.RelatedMerchantItemOid ||
                    this.RelatedMerchantItemOid != null &&
                    this.RelatedMerchantItemOid.Equals(other.RelatedMerchantItemOid)
                ) && 
                (
                    this.Type == other.Type ||
                    this.Type != null &&
                    this.Type.Equals(other.Type)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.RelatedMerchantItemId != null)
                    hash = hash * 59 + this.RelatedMerchantItemId.GetHashCode();
                if (this.RelatedMerchantItemOid != null)
                    hash = hash * 59 + this.RelatedMerchantItemOid.GetHashCode();
                if (this.Type != null)
                    hash = hash * 59 + this.Type.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
