/* 
 * UltraCart Rest API V2
 *
 * This is the next generation UltraCart REST API...
 *
 * OpenAPI spec version: 2.0.0
 * Contact: support@ultracart.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = com.ultracart.admin.v2.Client.SwaggerDateConverter;

namespace com.ultracart.admin.v2.Model
{
    /// <summary>
    /// ItemReviews
    /// </summary>
    [DataContract]
    public partial class ItemReviews :  IEquatable<ItemReviews>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ItemReviews" /> class.
        /// </summary>
        /// <param name="HasApprovedReview">True if the item has an approved review.</param>
        /// <param name="HasReview">True if the item has a review.</param>
        /// <param name="ReviewCount">Number of approved reviews.</param>
        /// <param name="ReviewOverall">Overall score of reviews.</param>
        /// <param name="ReviewTemplateName">Review template name.</param>
        /// <param name="ReviewTemplateOid">Review template object identifier.</param>
        /// <param name="Reviewable">True if the item is reviewable.</param>
        public ItemReviews(bool? HasApprovedReview = default(bool?), bool? HasReview = default(bool?), int? ReviewCount = default(int?), decimal? ReviewOverall = default(decimal?), string ReviewTemplateName = default(string), int? ReviewTemplateOid = default(int?), bool? Reviewable = default(bool?))
        {
            this.HasApprovedReview = HasApprovedReview;
            this.HasReview = HasReview;
            this.ReviewCount = ReviewCount;
            this.ReviewOverall = ReviewOverall;
            this.ReviewTemplateName = ReviewTemplateName;
            this.ReviewTemplateOid = ReviewTemplateOid;
            this.Reviewable = Reviewable;
        }
        
        /// <summary>
        /// True if the item has an approved review
        /// </summary>
        /// <value>True if the item has an approved review</value>
        [DataMember(Name="has_approved_review", EmitDefaultValue=false)]
        public bool? HasApprovedReview { get; set; }

        /// <summary>
        /// True if the item has a review
        /// </summary>
        /// <value>True if the item has a review</value>
        [DataMember(Name="has_review", EmitDefaultValue=false)]
        public bool? HasReview { get; set; }

        /// <summary>
        /// Number of approved reviews
        /// </summary>
        /// <value>Number of approved reviews</value>
        [DataMember(Name="review_count", EmitDefaultValue=false)]
        public int? ReviewCount { get; set; }

        /// <summary>
        /// Overall score of reviews
        /// </summary>
        /// <value>Overall score of reviews</value>
        [DataMember(Name="review_overall", EmitDefaultValue=false)]
        public decimal? ReviewOverall { get; set; }

        /// <summary>
        /// Review template name
        /// </summary>
        /// <value>Review template name</value>
        [DataMember(Name="review_template_name", EmitDefaultValue=false)]
        public string ReviewTemplateName { get; set; }

        /// <summary>
        /// Review template object identifier
        /// </summary>
        /// <value>Review template object identifier</value>
        [DataMember(Name="review_template_oid", EmitDefaultValue=false)]
        public int? ReviewTemplateOid { get; set; }

        /// <summary>
        /// True if the item is reviewable
        /// </summary>
        /// <value>True if the item is reviewable</value>
        [DataMember(Name="reviewable", EmitDefaultValue=false)]
        public bool? Reviewable { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ItemReviews {\n");
            sb.Append("  HasApprovedReview: ").Append(HasApprovedReview).Append("\n");
            sb.Append("  HasReview: ").Append(HasReview).Append("\n");
            sb.Append("  ReviewCount: ").Append(ReviewCount).Append("\n");
            sb.Append("  ReviewOverall: ").Append(ReviewOverall).Append("\n");
            sb.Append("  ReviewTemplateName: ").Append(ReviewTemplateName).Append("\n");
            sb.Append("  ReviewTemplateOid: ").Append(ReviewTemplateOid).Append("\n");
            sb.Append("  Reviewable: ").Append(Reviewable).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as ItemReviews);
        }

        /// <summary>
        /// Returns true if ItemReviews instances are equal
        /// </summary>
        /// <param name="other">Instance of ItemReviews to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ItemReviews other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.HasApprovedReview == other.HasApprovedReview ||
                    this.HasApprovedReview != null &&
                    this.HasApprovedReview.Equals(other.HasApprovedReview)
                ) && 
                (
                    this.HasReview == other.HasReview ||
                    this.HasReview != null &&
                    this.HasReview.Equals(other.HasReview)
                ) && 
                (
                    this.ReviewCount == other.ReviewCount ||
                    this.ReviewCount != null &&
                    this.ReviewCount.Equals(other.ReviewCount)
                ) && 
                (
                    this.ReviewOverall == other.ReviewOverall ||
                    this.ReviewOverall != null &&
                    this.ReviewOverall.Equals(other.ReviewOverall)
                ) && 
                (
                    this.ReviewTemplateName == other.ReviewTemplateName ||
                    this.ReviewTemplateName != null &&
                    this.ReviewTemplateName.Equals(other.ReviewTemplateName)
                ) && 
                (
                    this.ReviewTemplateOid == other.ReviewTemplateOid ||
                    this.ReviewTemplateOid != null &&
                    this.ReviewTemplateOid.Equals(other.ReviewTemplateOid)
                ) && 
                (
                    this.Reviewable == other.Reviewable ||
                    this.Reviewable != null &&
                    this.Reviewable.Equals(other.Reviewable)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.HasApprovedReview != null)
                    hash = hash * 59 + this.HasApprovedReview.GetHashCode();
                if (this.HasReview != null)
                    hash = hash * 59 + this.HasReview.GetHashCode();
                if (this.ReviewCount != null)
                    hash = hash * 59 + this.ReviewCount.GetHashCode();
                if (this.ReviewOverall != null)
                    hash = hash * 59 + this.ReviewOverall.GetHashCode();
                if (this.ReviewTemplateName != null)
                    hash = hash * 59 + this.ReviewTemplateName.GetHashCode();
                if (this.ReviewTemplateOid != null)
                    hash = hash * 59 + this.ReviewTemplateOid.GetHashCode();
                if (this.Reviewable != null)
                    hash = hash * 59 + this.Reviewable.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
