/*
 * UltraCart Rest API V2
 *
 * UltraCart REST API Version 2
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@ultracart.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = com.ultracart.admin.v2.Client.OpenAPIDateConverter;

namespace com.ultracart.admin.v2.Model
{
    /// <summary>
    /// ItemReviews
    /// </summary>
    [DataContract]
    public partial class ItemReviews :  IEquatable<ItemReviews>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ItemReviews" /> class.
        /// </summary>
        /// <param name="hasApprovedReview">True if the item has an approved review.</param>
        /// <param name="hasReview">True if the item has a review.</param>
        /// <param name="reviewCount">Number of approved reviews.</param>
        /// <param name="reviewOverall">Overall score of reviews.</param>
        /// <param name="reviewTemplateName">Review template name.</param>
        /// <param name="reviewTemplateOid">Review template object identifier.</param>
        /// <param name="reviewable">True if the item is reviewable.</param>
        /// <param name="shareReviewsWithMerchantItemId">Share reviews with item id.  To set, use the share_reviews_with_merchant_item_oid field..</param>
        /// <param name="shareReviewsWithMerchantItemOid">Share reviews with item oid.  To null out this field, set teh value to zero..</param>
        public ItemReviews(bool hasApprovedReview = default(bool), bool hasReview = default(bool), int reviewCount = default(int), decimal reviewOverall = default(decimal), string reviewTemplateName = default(string), int reviewTemplateOid = default(int), bool reviewable = default(bool), string shareReviewsWithMerchantItemId = default(string), int shareReviewsWithMerchantItemOid = default(int))
        {
            this.HasApprovedReview = hasApprovedReview;
            this.HasReview = hasReview;
            this.ReviewCount = reviewCount;
            this.ReviewOverall = reviewOverall;
            this.ReviewTemplateName = reviewTemplateName;
            this.ReviewTemplateOid = reviewTemplateOid;
            this.Reviewable = reviewable;
            this.ShareReviewsWithMerchantItemId = shareReviewsWithMerchantItemId;
            this.ShareReviewsWithMerchantItemOid = shareReviewsWithMerchantItemOid;
        }

        /// <summary>
        /// True if the item has an approved review
        /// </summary>
        /// <value>True if the item has an approved review</value>
        [DataMember(Name="has_approved_review", EmitDefaultValue=false)]
        public bool HasApprovedReview { get; set; }

        /// <summary>
        /// True if the item has a review
        /// </summary>
        /// <value>True if the item has a review</value>
        [DataMember(Name="has_review", EmitDefaultValue=false)]
        public bool HasReview { get; set; }

        /// <summary>
        /// Number of approved reviews
        /// </summary>
        /// <value>Number of approved reviews</value>
        [DataMember(Name="review_count", EmitDefaultValue=false)]
        public int ReviewCount { get; set; }

        /// <summary>
        /// Overall score of reviews
        /// </summary>
        /// <value>Overall score of reviews</value>
        [DataMember(Name="review_overall", EmitDefaultValue=false)]
        public decimal ReviewOverall { get; set; }

        /// <summary>
        /// Review template name
        /// </summary>
        /// <value>Review template name</value>
        [DataMember(Name="review_template_name", EmitDefaultValue=false)]
        public string ReviewTemplateName { get; set; }

        /// <summary>
        /// Review template object identifier
        /// </summary>
        /// <value>Review template object identifier</value>
        [DataMember(Name="review_template_oid", EmitDefaultValue=false)]
        public int ReviewTemplateOid { get; set; }

        /// <summary>
        /// True if the item is reviewable
        /// </summary>
        /// <value>True if the item is reviewable</value>
        [DataMember(Name="reviewable", EmitDefaultValue=false)]
        public bool Reviewable { get; set; }

        /// <summary>
        /// Share reviews with item id.  To set, use the share_reviews_with_merchant_item_oid field.
        /// </summary>
        /// <value>Share reviews with item id.  To set, use the share_reviews_with_merchant_item_oid field.</value>
        [DataMember(Name="share_reviews_with_merchant_item_id", EmitDefaultValue=false)]
        public string ShareReviewsWithMerchantItemId { get; set; }

        /// <summary>
        /// Share reviews with item oid.  To null out this field, set teh value to zero.
        /// </summary>
        /// <value>Share reviews with item oid.  To null out this field, set teh value to zero.</value>
        [DataMember(Name="share_reviews_with_merchant_item_oid", EmitDefaultValue=false)]
        public int ShareReviewsWithMerchantItemOid { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ItemReviews {\n");
            sb.Append("  HasApprovedReview: ").Append(HasApprovedReview).Append("\n");
            sb.Append("  HasReview: ").Append(HasReview).Append("\n");
            sb.Append("  ReviewCount: ").Append(ReviewCount).Append("\n");
            sb.Append("  ReviewOverall: ").Append(ReviewOverall).Append("\n");
            sb.Append("  ReviewTemplateName: ").Append(ReviewTemplateName).Append("\n");
            sb.Append("  ReviewTemplateOid: ").Append(ReviewTemplateOid).Append("\n");
            sb.Append("  Reviewable: ").Append(Reviewable).Append("\n");
            sb.Append("  ShareReviewsWithMerchantItemId: ").Append(ShareReviewsWithMerchantItemId).Append("\n");
            sb.Append("  ShareReviewsWithMerchantItemOid: ").Append(ShareReviewsWithMerchantItemOid).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ItemReviews);
        }

        /// <summary>
        /// Returns true if ItemReviews instances are equal
        /// </summary>
        /// <param name="input">Instance of ItemReviews to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ItemReviews input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.HasApprovedReview == input.HasApprovedReview ||
                    (this.HasApprovedReview != null &&
                    this.HasApprovedReview.Equals(input.HasApprovedReview))
                ) && 
                (
                    this.HasReview == input.HasReview ||
                    (this.HasReview != null &&
                    this.HasReview.Equals(input.HasReview))
                ) && 
                (
                    this.ReviewCount == input.ReviewCount ||
                    (this.ReviewCount != null &&
                    this.ReviewCount.Equals(input.ReviewCount))
                ) && 
                (
                    this.ReviewOverall == input.ReviewOverall ||
                    (this.ReviewOverall != null &&
                    this.ReviewOverall.Equals(input.ReviewOverall))
                ) && 
                (
                    this.ReviewTemplateName == input.ReviewTemplateName ||
                    (this.ReviewTemplateName != null &&
                    this.ReviewTemplateName.Equals(input.ReviewTemplateName))
                ) && 
                (
                    this.ReviewTemplateOid == input.ReviewTemplateOid ||
                    (this.ReviewTemplateOid != null &&
                    this.ReviewTemplateOid.Equals(input.ReviewTemplateOid))
                ) && 
                (
                    this.Reviewable == input.Reviewable ||
                    (this.Reviewable != null &&
                    this.Reviewable.Equals(input.Reviewable))
                ) && 
                (
                    this.ShareReviewsWithMerchantItemId == input.ShareReviewsWithMerchantItemId ||
                    (this.ShareReviewsWithMerchantItemId != null &&
                    this.ShareReviewsWithMerchantItemId.Equals(input.ShareReviewsWithMerchantItemId))
                ) && 
                (
                    this.ShareReviewsWithMerchantItemOid == input.ShareReviewsWithMerchantItemOid ||
                    (this.ShareReviewsWithMerchantItemOid != null &&
                    this.ShareReviewsWithMerchantItemOid.Equals(input.ShareReviewsWithMerchantItemOid))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.HasApprovedReview != null)
                    hashCode = hashCode * 59 + this.HasApprovedReview.GetHashCode();
                if (this.HasReview != null)
                    hashCode = hashCode * 59 + this.HasReview.GetHashCode();
                if (this.ReviewCount != null)
                    hashCode = hashCode * 59 + this.ReviewCount.GetHashCode();
                if (this.ReviewOverall != null)
                    hashCode = hashCode * 59 + this.ReviewOverall.GetHashCode();
                if (this.ReviewTemplateName != null)
                    hashCode = hashCode * 59 + this.ReviewTemplateName.GetHashCode();
                if (this.ReviewTemplateOid != null)
                    hashCode = hashCode * 59 + this.ReviewTemplateOid.GetHashCode();
                if (this.Reviewable != null)
                    hashCode = hashCode * 59 + this.Reviewable.GetHashCode();
                if (this.ShareReviewsWithMerchantItemId != null)
                    hashCode = hashCode * 59 + this.ShareReviewsWithMerchantItemId.GetHashCode();
                if (this.ShareReviewsWithMerchantItemOid != null)
                    hashCode = hashCode * 59 + this.ShareReviewsWithMerchantItemOid.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
