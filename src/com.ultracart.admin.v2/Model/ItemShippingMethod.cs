/* 
 * UltraCart Rest API V2
 *
 * This is the next generation UltraCart REST API...
 *
 * OpenAPI spec version: 2.0.0
 * Contact: support@ultracart.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace com.ultracart.admin.v2.Model
{
    /// <summary>
    /// ItemShippingMethod
    /// </summary>
    [DataContract]
    public partial class ItemShippingMethod :  IEquatable<ItemShippingMethod>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ItemShippingMethod" /> class.
        /// </summary>
        /// <param name="Cost">Cost.</param>
        /// <param name="EachAdditionalItemMarkup">EachAdditionalItemMarkup.</param>
        /// <param name="FilterToIfAvailable">FilterToIfAvailable.</param>
        /// <param name="FirstItemMarkup">FirstItemMarkup.</param>
        /// <param name="FixedShippingCost">FixedShippingCost.</param>
        /// <param name="FlatFeeMarkup">FlatFeeMarkup.</param>
        /// <param name="FreeShipping">FreeShipping.</param>
        /// <param name="PerItemFeeMarkup">PerItemFeeMarkup.</param>
        /// <param name="PercentageMarkup">PercentageMarkup.</param>
        /// <param name="PercentageOfItemMarkup">PercentageOfItemMarkup.</param>
        /// <param name="RelaxRestrictionsOnUpsell">RelaxRestrictionsOnUpsell.</param>
        /// <param name="ShippingMethod">ShippingMethod.</param>
        /// <param name="ShippingMethodOid">ShippingMethodOid.</param>
        /// <param name="ShippingMethodValidity">ShippingMethodValidity.</param>
        /// <param name="SignatureRequired">SignatureRequired.</param>
        public ItemShippingMethod(double? Cost = null, double? EachAdditionalItemMarkup = null, bool? FilterToIfAvailable = null, double? FirstItemMarkup = null, double? FixedShippingCost = null, double? FlatFeeMarkup = null, bool? FreeShipping = null, double? PerItemFeeMarkup = null, double? PercentageMarkup = null, double? PercentageOfItemMarkup = null, bool? RelaxRestrictionsOnUpsell = null, string ShippingMethod = null, int? ShippingMethodOid = null, string ShippingMethodValidity = null, bool? SignatureRequired = null)
        {
            this.Cost = Cost;
            this.EachAdditionalItemMarkup = EachAdditionalItemMarkup;
            this.FilterToIfAvailable = FilterToIfAvailable;
            this.FirstItemMarkup = FirstItemMarkup;
            this.FixedShippingCost = FixedShippingCost;
            this.FlatFeeMarkup = FlatFeeMarkup;
            this.FreeShipping = FreeShipping;
            this.PerItemFeeMarkup = PerItemFeeMarkup;
            this.PercentageMarkup = PercentageMarkup;
            this.PercentageOfItemMarkup = PercentageOfItemMarkup;
            this.RelaxRestrictionsOnUpsell = RelaxRestrictionsOnUpsell;
            this.ShippingMethod = ShippingMethod;
            this.ShippingMethodOid = ShippingMethodOid;
            this.ShippingMethodValidity = ShippingMethodValidity;
            this.SignatureRequired = SignatureRequired;
        }
        
        /// <summary>
        /// Gets or Sets Cost
        /// </summary>
        [DataMember(Name="cost", EmitDefaultValue=false)]
        public double? Cost { get; set; }
        /// <summary>
        /// Gets or Sets EachAdditionalItemMarkup
        /// </summary>
        [DataMember(Name="each_additional_item_markup", EmitDefaultValue=false)]
        public double? EachAdditionalItemMarkup { get; set; }
        /// <summary>
        /// Gets or Sets FilterToIfAvailable
        /// </summary>
        [DataMember(Name="filter_to_if_available", EmitDefaultValue=false)]
        public bool? FilterToIfAvailable { get; set; }
        /// <summary>
        /// Gets or Sets FirstItemMarkup
        /// </summary>
        [DataMember(Name="first_item_markup", EmitDefaultValue=false)]
        public double? FirstItemMarkup { get; set; }
        /// <summary>
        /// Gets or Sets FixedShippingCost
        /// </summary>
        [DataMember(Name="fixed_shipping_cost", EmitDefaultValue=false)]
        public double? FixedShippingCost { get; set; }
        /// <summary>
        /// Gets or Sets FlatFeeMarkup
        /// </summary>
        [DataMember(Name="flat_fee_markup", EmitDefaultValue=false)]
        public double? FlatFeeMarkup { get; set; }
        /// <summary>
        /// Gets or Sets FreeShipping
        /// </summary>
        [DataMember(Name="free_shipping", EmitDefaultValue=false)]
        public bool? FreeShipping { get; set; }
        /// <summary>
        /// Gets or Sets PerItemFeeMarkup
        /// </summary>
        [DataMember(Name="per_item_fee_markup", EmitDefaultValue=false)]
        public double? PerItemFeeMarkup { get; set; }
        /// <summary>
        /// Gets or Sets PercentageMarkup
        /// </summary>
        [DataMember(Name="percentage_markup", EmitDefaultValue=false)]
        public double? PercentageMarkup { get; set; }
        /// <summary>
        /// Gets or Sets PercentageOfItemMarkup
        /// </summary>
        [DataMember(Name="percentage_of_item_markup", EmitDefaultValue=false)]
        public double? PercentageOfItemMarkup { get; set; }
        /// <summary>
        /// Gets or Sets RelaxRestrictionsOnUpsell
        /// </summary>
        [DataMember(Name="relax_restrictions_on_upsell", EmitDefaultValue=false)]
        public bool? RelaxRestrictionsOnUpsell { get; set; }
        /// <summary>
        /// Gets or Sets ShippingMethod
        /// </summary>
        [DataMember(Name="shipping_method", EmitDefaultValue=false)]
        public string ShippingMethod { get; set; }
        /// <summary>
        /// Gets or Sets ShippingMethodOid
        /// </summary>
        [DataMember(Name="shipping_method_oid", EmitDefaultValue=false)]
        public int? ShippingMethodOid { get; set; }
        /// <summary>
        /// Gets or Sets ShippingMethodValidity
        /// </summary>
        [DataMember(Name="shipping_method_validity", EmitDefaultValue=false)]
        public string ShippingMethodValidity { get; set; }
        /// <summary>
        /// Gets or Sets SignatureRequired
        /// </summary>
        [DataMember(Name="signature_required", EmitDefaultValue=false)]
        public bool? SignatureRequired { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ItemShippingMethod {\n");
            sb.Append("  Cost: ").Append(Cost).Append("\n");
            sb.Append("  EachAdditionalItemMarkup: ").Append(EachAdditionalItemMarkup).Append("\n");
            sb.Append("  FilterToIfAvailable: ").Append(FilterToIfAvailable).Append("\n");
            sb.Append("  FirstItemMarkup: ").Append(FirstItemMarkup).Append("\n");
            sb.Append("  FixedShippingCost: ").Append(FixedShippingCost).Append("\n");
            sb.Append("  FlatFeeMarkup: ").Append(FlatFeeMarkup).Append("\n");
            sb.Append("  FreeShipping: ").Append(FreeShipping).Append("\n");
            sb.Append("  PerItemFeeMarkup: ").Append(PerItemFeeMarkup).Append("\n");
            sb.Append("  PercentageMarkup: ").Append(PercentageMarkup).Append("\n");
            sb.Append("  PercentageOfItemMarkup: ").Append(PercentageOfItemMarkup).Append("\n");
            sb.Append("  RelaxRestrictionsOnUpsell: ").Append(RelaxRestrictionsOnUpsell).Append("\n");
            sb.Append("  ShippingMethod: ").Append(ShippingMethod).Append("\n");
            sb.Append("  ShippingMethodOid: ").Append(ShippingMethodOid).Append("\n");
            sb.Append("  ShippingMethodValidity: ").Append(ShippingMethodValidity).Append("\n");
            sb.Append("  SignatureRequired: ").Append(SignatureRequired).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as ItemShippingMethod);
        }

        /// <summary>
        /// Returns true if ItemShippingMethod instances are equal
        /// </summary>
        /// <param name="other">Instance of ItemShippingMethod to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ItemShippingMethod other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Cost == other.Cost ||
                    this.Cost != null &&
                    this.Cost.Equals(other.Cost)
                ) && 
                (
                    this.EachAdditionalItemMarkup == other.EachAdditionalItemMarkup ||
                    this.EachAdditionalItemMarkup != null &&
                    this.EachAdditionalItemMarkup.Equals(other.EachAdditionalItemMarkup)
                ) && 
                (
                    this.FilterToIfAvailable == other.FilterToIfAvailable ||
                    this.FilterToIfAvailable != null &&
                    this.FilterToIfAvailable.Equals(other.FilterToIfAvailable)
                ) && 
                (
                    this.FirstItemMarkup == other.FirstItemMarkup ||
                    this.FirstItemMarkup != null &&
                    this.FirstItemMarkup.Equals(other.FirstItemMarkup)
                ) && 
                (
                    this.FixedShippingCost == other.FixedShippingCost ||
                    this.FixedShippingCost != null &&
                    this.FixedShippingCost.Equals(other.FixedShippingCost)
                ) && 
                (
                    this.FlatFeeMarkup == other.FlatFeeMarkup ||
                    this.FlatFeeMarkup != null &&
                    this.FlatFeeMarkup.Equals(other.FlatFeeMarkup)
                ) && 
                (
                    this.FreeShipping == other.FreeShipping ||
                    this.FreeShipping != null &&
                    this.FreeShipping.Equals(other.FreeShipping)
                ) && 
                (
                    this.PerItemFeeMarkup == other.PerItemFeeMarkup ||
                    this.PerItemFeeMarkup != null &&
                    this.PerItemFeeMarkup.Equals(other.PerItemFeeMarkup)
                ) && 
                (
                    this.PercentageMarkup == other.PercentageMarkup ||
                    this.PercentageMarkup != null &&
                    this.PercentageMarkup.Equals(other.PercentageMarkup)
                ) && 
                (
                    this.PercentageOfItemMarkup == other.PercentageOfItemMarkup ||
                    this.PercentageOfItemMarkup != null &&
                    this.PercentageOfItemMarkup.Equals(other.PercentageOfItemMarkup)
                ) && 
                (
                    this.RelaxRestrictionsOnUpsell == other.RelaxRestrictionsOnUpsell ||
                    this.RelaxRestrictionsOnUpsell != null &&
                    this.RelaxRestrictionsOnUpsell.Equals(other.RelaxRestrictionsOnUpsell)
                ) && 
                (
                    this.ShippingMethod == other.ShippingMethod ||
                    this.ShippingMethod != null &&
                    this.ShippingMethod.Equals(other.ShippingMethod)
                ) && 
                (
                    this.ShippingMethodOid == other.ShippingMethodOid ||
                    this.ShippingMethodOid != null &&
                    this.ShippingMethodOid.Equals(other.ShippingMethodOid)
                ) && 
                (
                    this.ShippingMethodValidity == other.ShippingMethodValidity ||
                    this.ShippingMethodValidity != null &&
                    this.ShippingMethodValidity.Equals(other.ShippingMethodValidity)
                ) && 
                (
                    this.SignatureRequired == other.SignatureRequired ||
                    this.SignatureRequired != null &&
                    this.SignatureRequired.Equals(other.SignatureRequired)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Cost != null)
                    hash = hash * 59 + this.Cost.GetHashCode();
                if (this.EachAdditionalItemMarkup != null)
                    hash = hash * 59 + this.EachAdditionalItemMarkup.GetHashCode();
                if (this.FilterToIfAvailable != null)
                    hash = hash * 59 + this.FilterToIfAvailable.GetHashCode();
                if (this.FirstItemMarkup != null)
                    hash = hash * 59 + this.FirstItemMarkup.GetHashCode();
                if (this.FixedShippingCost != null)
                    hash = hash * 59 + this.FixedShippingCost.GetHashCode();
                if (this.FlatFeeMarkup != null)
                    hash = hash * 59 + this.FlatFeeMarkup.GetHashCode();
                if (this.FreeShipping != null)
                    hash = hash * 59 + this.FreeShipping.GetHashCode();
                if (this.PerItemFeeMarkup != null)
                    hash = hash * 59 + this.PerItemFeeMarkup.GetHashCode();
                if (this.PercentageMarkup != null)
                    hash = hash * 59 + this.PercentageMarkup.GetHashCode();
                if (this.PercentageOfItemMarkup != null)
                    hash = hash * 59 + this.PercentageOfItemMarkup.GetHashCode();
                if (this.RelaxRestrictionsOnUpsell != null)
                    hash = hash * 59 + this.RelaxRestrictionsOnUpsell.GetHashCode();
                if (this.ShippingMethod != null)
                    hash = hash * 59 + this.ShippingMethod.GetHashCode();
                if (this.ShippingMethodOid != null)
                    hash = hash * 59 + this.ShippingMethodOid.GetHashCode();
                if (this.ShippingMethodValidity != null)
                    hash = hash * 59 + this.ShippingMethodValidity.GetHashCode();
                if (this.SignatureRequired != null)
                    hash = hash * 59 + this.SignatureRequired.GetHashCode();
                return hash;
            }
        }
    }

}
