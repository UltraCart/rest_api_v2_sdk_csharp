/* 
 * UltraCart Rest API V2
 *
 * This is the next generation UltraCart REST API...
 *
 * OpenAPI spec version: 2.0.0
 * Contact: support@ultracart.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = com.ultracart.admin.v2.Client.SwaggerDateConverter;

namespace com.ultracart.admin.v2.Model
{
    /// <summary>
    /// ItemTax
    /// </summary>
    [DataContract]
    public partial class ItemTax :  IEquatable<ItemTax>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ItemTax" /> class.
        /// </summary>
        /// <param name="Exemptions">Exemptions.</param>
        /// <param name="TaxFree">True if tax free.</param>
        /// <param name="TaxableCost">Taxable cost if different than regular cost.</param>
        public ItemTax(List<ItemTaxExemption> Exemptions = default(List<ItemTaxExemption>), bool? TaxFree = default(bool?), decimal? TaxableCost = default(decimal?))
        {
            this.Exemptions = Exemptions;
            this.TaxFree = TaxFree;
            this.TaxableCost = TaxableCost;
        }
        
        /// <summary>
        /// Exemptions
        /// </summary>
        /// <value>Exemptions</value>
        [DataMember(Name="exemptions", EmitDefaultValue=false)]
        public List<ItemTaxExemption> Exemptions { get; set; }

        /// <summary>
        /// True if tax free
        /// </summary>
        /// <value>True if tax free</value>
        [DataMember(Name="tax_free", EmitDefaultValue=false)]
        public bool? TaxFree { get; set; }

        /// <summary>
        /// Taxable cost if different than regular cost
        /// </summary>
        /// <value>Taxable cost if different than regular cost</value>
        [DataMember(Name="taxable_cost", EmitDefaultValue=false)]
        public decimal? TaxableCost { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ItemTax {\n");
            sb.Append("  Exemptions: ").Append(Exemptions).Append("\n");
            sb.Append("  TaxFree: ").Append(TaxFree).Append("\n");
            sb.Append("  TaxableCost: ").Append(TaxableCost).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as ItemTax);
        }

        /// <summary>
        /// Returns true if ItemTax instances are equal
        /// </summary>
        /// <param name="other">Instance of ItemTax to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ItemTax other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Exemptions == other.Exemptions ||
                    this.Exemptions != null &&
                    this.Exemptions.SequenceEqual(other.Exemptions)
                ) && 
                (
                    this.TaxFree == other.TaxFree ||
                    this.TaxFree != null &&
                    this.TaxFree.Equals(other.TaxFree)
                ) && 
                (
                    this.TaxableCost == other.TaxableCost ||
                    this.TaxableCost != null &&
                    this.TaxableCost.Equals(other.TaxableCost)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Exemptions != null)
                    hash = hash * 59 + this.Exemptions.GetHashCode();
                if (this.TaxFree != null)
                    hash = hash * 59 + this.TaxFree.GetHashCode();
                if (this.TaxableCost != null)
                    hash = hash * 59 + this.TaxableCost.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
