/*
 * UltraCart Rest API V2
 *
 * UltraCart REST API Version 2
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@ultracart.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = com.ultracart.admin.v2.Client.OpenAPIDateConverter;

namespace com.ultracart.admin.v2.Model
{
    /// <summary>
    /// ItemThirdPartyEmailMarketing
    /// </summary>
    [DataContract]
    public partial class ItemThirdPartyEmailMarketing :  IEquatable<ItemThirdPartyEmailMarketing>, IValidatableObject
    {
        /// <summary>
        /// Provider name
        /// </summary>
        /// <value>Provider name</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ProviderNameEnum
        {
            /// <summary>
            /// Enum ActiveCampaign for value: ActiveCampaign
            /// </summary>
            [EnumMember(Value = "ActiveCampaign")]
            ActiveCampaign = 1,

            /// <summary>
            /// Enum AWeber for value: AWeber
            /// </summary>
            [EnumMember(Value = "AWeber")]
            AWeber = 2,

            /// <summary>
            /// Enum CampaignMonitor for value: Campaign Monitor
            /// </summary>
            [EnumMember(Value = "Campaign Monitor")]
            CampaignMonitor = 3,

            /// <summary>
            /// Enum ConstantContact for value: ConstantContact
            /// </summary>
            [EnumMember(Value = "ConstantContact")]
            ConstantContact = 4,

            /// <summary>
            /// Enum Emma for value: Emma
            /// </summary>
            [EnumMember(Value = "Emma")]
            Emma = 5,

            /// <summary>
            /// Enum GetResponse for value: GetResponse
            /// </summary>
            [EnumMember(Value = "GetResponse")]
            GetResponse = 6,

            /// <summary>
            /// Enum IContact for value: iContact
            /// </summary>
            [EnumMember(Value = "iContact")]
            IContact = 7,

            /// <summary>
            /// Enum Klaviyo for value: Klaviyo
            /// </summary>
            [EnumMember(Value = "Klaviyo")]
            Klaviyo = 8,

            /// <summary>
            /// Enum Lyris for value: Lyris
            /// </summary>
            [EnumMember(Value = "Lyris")]
            Lyris = 9,

            /// <summary>
            /// Enum LyrisHQ for value: LyrisHQ
            /// </summary>
            [EnumMember(Value = "LyrisHQ")]
            LyrisHQ = 10,

            /// <summary>
            /// Enum MailChimp for value: MailChimp
            /// </summary>
            [EnumMember(Value = "MailChimp")]
            MailChimp = 11,

            /// <summary>
            /// Enum SilverPop for value: SilverPop
            /// </summary>
            [EnumMember(Value = "SilverPop")]
            SilverPop = 12

        }

        /// <summary>
        /// Provider name
        /// </summary>
        /// <value>Provider name</value>
        [DataMember(Name="provider_name", EmitDefaultValue=false)]
        public ProviderNameEnum? ProviderName { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="ItemThirdPartyEmailMarketing" /> class.
        /// </summary>
        /// <param name="addTags">Add tags.</param>
        /// <param name="providerName">Provider name.</param>
        /// <param name="removeTags">Remove tags.</param>
        /// <param name="subscribeLists">Subscribe to lists.</param>
        /// <param name="unsubscribeLists">Unsubscribe from lists.</param>
        public ItemThirdPartyEmailMarketing(List<string> addTags = default(List<string>), ProviderNameEnum? providerName = default(ProviderNameEnum?), List<string> removeTags = default(List<string>), List<string> subscribeLists = default(List<string>), List<string> unsubscribeLists = default(List<string>))
        {
            this.AddTags = addTags;
            this.ProviderName = providerName;
            this.RemoveTags = removeTags;
            this.SubscribeLists = subscribeLists;
            this.UnsubscribeLists = unsubscribeLists;
        }

        /// <summary>
        /// Add tags
        /// </summary>
        /// <value>Add tags</value>
        [DataMember(Name="add_tags", EmitDefaultValue=false)]
        public List<string> AddTags { get; set; }


        /// <summary>
        /// Remove tags
        /// </summary>
        /// <value>Remove tags</value>
        [DataMember(Name="remove_tags", EmitDefaultValue=false)]
        public List<string> RemoveTags { get; set; }

        /// <summary>
        /// Subscribe to lists
        /// </summary>
        /// <value>Subscribe to lists</value>
        [DataMember(Name="subscribe_lists", EmitDefaultValue=false)]
        public List<string> SubscribeLists { get; set; }

        /// <summary>
        /// Unsubscribe from lists
        /// </summary>
        /// <value>Unsubscribe from lists</value>
        [DataMember(Name="unsubscribe_lists", EmitDefaultValue=false)]
        public List<string> UnsubscribeLists { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ItemThirdPartyEmailMarketing {\n");
            sb.Append("  AddTags: ").Append(AddTags).Append("\n");
            sb.Append("  ProviderName: ").Append(ProviderName).Append("\n");
            sb.Append("  RemoveTags: ").Append(RemoveTags).Append("\n");
            sb.Append("  SubscribeLists: ").Append(SubscribeLists).Append("\n");
            sb.Append("  UnsubscribeLists: ").Append(UnsubscribeLists).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ItemThirdPartyEmailMarketing);
        }

        /// <summary>
        /// Returns true if ItemThirdPartyEmailMarketing instances are equal
        /// </summary>
        /// <param name="input">Instance of ItemThirdPartyEmailMarketing to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ItemThirdPartyEmailMarketing input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.AddTags == input.AddTags ||
                    this.AddTags != null &&
                    input.AddTags != null &&
                    this.AddTags.SequenceEqual(input.AddTags)
                ) && 
                (
                    this.ProviderName == input.ProviderName ||
                    (this.ProviderName != null &&
                    this.ProviderName.Equals(input.ProviderName))
                ) && 
                (
                    this.RemoveTags == input.RemoveTags ||
                    this.RemoveTags != null &&
                    input.RemoveTags != null &&
                    this.RemoveTags.SequenceEqual(input.RemoveTags)
                ) && 
                (
                    this.SubscribeLists == input.SubscribeLists ||
                    this.SubscribeLists != null &&
                    input.SubscribeLists != null &&
                    this.SubscribeLists.SequenceEqual(input.SubscribeLists)
                ) && 
                (
                    this.UnsubscribeLists == input.UnsubscribeLists ||
                    this.UnsubscribeLists != null &&
                    input.UnsubscribeLists != null &&
                    this.UnsubscribeLists.SequenceEqual(input.UnsubscribeLists)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AddTags != null)
                    hashCode = hashCode * 59 + this.AddTags.GetHashCode();
                if (this.ProviderName != null)
                    hashCode = hashCode * 59 + this.ProviderName.GetHashCode();
                if (this.RemoveTags != null)
                    hashCode = hashCode * 59 + this.RemoveTags.GetHashCode();
                if (this.SubscribeLists != null)
                    hashCode = hashCode * 59 + this.SubscribeLists.GetHashCode();
                if (this.UnsubscribeLists != null)
                    hashCode = hashCode * 59 + this.UnsubscribeLists.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
