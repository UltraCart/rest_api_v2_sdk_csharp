/* 
 * UltraCart Rest API V2
 *
 * This is the next generation UltraCart REST API...
 *
 * OpenAPI spec version: 2.0.0
 * Contact: support@ultracart.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = com.ultracart.admin.v2.Client.SwaggerDateConverter;

namespace com.ultracart.admin.v2.Model
{
    /// <summary>
    /// ItemVariation
    /// </summary>
    [DataContract]
    public partial class ItemVariation :  IEquatable<ItemVariation>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ItemVariation" /> class.
        /// </summary>
        /// <param name="DefaultText">Default text.</param>
        /// <param name="DefaultTextTranslatedTextInstanceOid">Default text translated text instance id.</param>
        /// <param name="Name">Name.</param>
        /// <param name="NameTranslatedTextInstanceOid">Name translated text instance id.</param>
        /// <param name="Options">Options.</param>
        public ItemVariation(string DefaultText = default(string), int? DefaultTextTranslatedTextInstanceOid = default(int?), string Name = default(string), int? NameTranslatedTextInstanceOid = default(int?), List<ItemVariationOption> Options = default(List<ItemVariationOption>))
        {
            this.DefaultText = DefaultText;
            this.DefaultTextTranslatedTextInstanceOid = DefaultTextTranslatedTextInstanceOid;
            this.Name = Name;
            this.NameTranslatedTextInstanceOid = NameTranslatedTextInstanceOid;
            this.Options = Options;
        }
        
        /// <summary>
        /// Default text
        /// </summary>
        /// <value>Default text</value>
        [DataMember(Name="default_text", EmitDefaultValue=false)]
        public string DefaultText { get; set; }

        /// <summary>
        /// Default text translated text instance id
        /// </summary>
        /// <value>Default text translated text instance id</value>
        [DataMember(Name="default_text_translated_text_instance_oid", EmitDefaultValue=false)]
        public int? DefaultTextTranslatedTextInstanceOid { get; set; }

        /// <summary>
        /// Name
        /// </summary>
        /// <value>Name</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Name translated text instance id
        /// </summary>
        /// <value>Name translated text instance id</value>
        [DataMember(Name="name_translated_text_instance_oid", EmitDefaultValue=false)]
        public int? NameTranslatedTextInstanceOid { get; set; }

        /// <summary>
        /// Options
        /// </summary>
        /// <value>Options</value>
        [DataMember(Name="options", EmitDefaultValue=false)]
        public List<ItemVariationOption> Options { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ItemVariation {\n");
            sb.Append("  DefaultText: ").Append(DefaultText).Append("\n");
            sb.Append("  DefaultTextTranslatedTextInstanceOid: ").Append(DefaultTextTranslatedTextInstanceOid).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  NameTranslatedTextInstanceOid: ").Append(NameTranslatedTextInstanceOid).Append("\n");
            sb.Append("  Options: ").Append(Options).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as ItemVariation);
        }

        /// <summary>
        /// Returns true if ItemVariation instances are equal
        /// </summary>
        /// <param name="other">Instance of ItemVariation to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ItemVariation other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.DefaultText == other.DefaultText ||
                    this.DefaultText != null &&
                    this.DefaultText.Equals(other.DefaultText)
                ) && 
                (
                    this.DefaultTextTranslatedTextInstanceOid == other.DefaultTextTranslatedTextInstanceOid ||
                    this.DefaultTextTranslatedTextInstanceOid != null &&
                    this.DefaultTextTranslatedTextInstanceOid.Equals(other.DefaultTextTranslatedTextInstanceOid)
                ) && 
                (
                    this.Name == other.Name ||
                    this.Name != null &&
                    this.Name.Equals(other.Name)
                ) && 
                (
                    this.NameTranslatedTextInstanceOid == other.NameTranslatedTextInstanceOid ||
                    this.NameTranslatedTextInstanceOid != null &&
                    this.NameTranslatedTextInstanceOid.Equals(other.NameTranslatedTextInstanceOid)
                ) && 
                (
                    this.Options == other.Options ||
                    this.Options != null &&
                    this.Options.SequenceEqual(other.Options)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.DefaultText != null)
                    hash = hash * 59 + this.DefaultText.GetHashCode();
                if (this.DefaultTextTranslatedTextInstanceOid != null)
                    hash = hash * 59 + this.DefaultTextTranslatedTextInstanceOid.GetHashCode();
                if (this.Name != null)
                    hash = hash * 59 + this.Name.GetHashCode();
                if (this.NameTranslatedTextInstanceOid != null)
                    hash = hash * 59 + this.NameTranslatedTextInstanceOid.GetHashCode();
                if (this.Options != null)
                    hash = hash * 59 + this.Options.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // DefaultText (string) maxLength
            if(this.DefaultText != null && this.DefaultText.Length > 50)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for DefaultText, length must be less than 50.", new [] { "DefaultText" });
            }

            // Name (string) maxLength
            if(this.Name != null && this.Name.Length > 50)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Name, length must be less than 50.", new [] { "Name" });
            }

            yield break;
        }
    }

}
