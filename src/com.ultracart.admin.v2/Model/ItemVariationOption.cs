/* 
 * UltraCart Rest API V2
 *
 * This is the next generation UltraCart REST API...
 *
 * OpenAPI spec version: 2.0.0
 * Contact: support@ultracart.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = com.ultracart.admin.v2.Client.SwaggerDateConverter;

namespace com.ultracart.admin.v2.Model
{
    /// <summary>
    /// ItemVariationOption
    /// </summary>
    [DataContract]
    public partial class ItemVariationOption :  IEquatable<ItemVariationOption>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ItemVariationOption" /> class.
        /// </summary>
        /// <param name="DefaultOption">True if default option.</param>
        /// <param name="MerchantItemMultimediaOid">Multimedia object identifier.</param>
        /// <param name="TranslatedTextInstanceOid">Translated text instance id.</param>
        /// <param name="Value">Value.</param>
        public ItemVariationOption(bool? DefaultOption = default(bool?), int? MerchantItemMultimediaOid = default(int?), int? TranslatedTextInstanceOid = default(int?), string Value = default(string))
        {
            this.DefaultOption = DefaultOption;
            this.MerchantItemMultimediaOid = MerchantItemMultimediaOid;
            this.TranslatedTextInstanceOid = TranslatedTextInstanceOid;
            this.Value = Value;
        }
        
        /// <summary>
        /// True if default option
        /// </summary>
        /// <value>True if default option</value>
        [DataMember(Name="default_option", EmitDefaultValue=false)]
        public bool? DefaultOption { get; set; }

        /// <summary>
        /// Multimedia object identifier
        /// </summary>
        /// <value>Multimedia object identifier</value>
        [DataMember(Name="merchant_item_multimedia_oid", EmitDefaultValue=false)]
        public int? MerchantItemMultimediaOid { get; set; }

        /// <summary>
        /// Translated text instance id
        /// </summary>
        /// <value>Translated text instance id</value>
        [DataMember(Name="translated_text_instance_oid", EmitDefaultValue=false)]
        public int? TranslatedTextInstanceOid { get; set; }

        /// <summary>
        /// Value
        /// </summary>
        /// <value>Value</value>
        [DataMember(Name="value", EmitDefaultValue=false)]
        public string Value { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ItemVariationOption {\n");
            sb.Append("  DefaultOption: ").Append(DefaultOption).Append("\n");
            sb.Append("  MerchantItemMultimediaOid: ").Append(MerchantItemMultimediaOid).Append("\n");
            sb.Append("  TranslatedTextInstanceOid: ").Append(TranslatedTextInstanceOid).Append("\n");
            sb.Append("  Value: ").Append(Value).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as ItemVariationOption);
        }

        /// <summary>
        /// Returns true if ItemVariationOption instances are equal
        /// </summary>
        /// <param name="other">Instance of ItemVariationOption to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ItemVariationOption other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.DefaultOption == other.DefaultOption ||
                    this.DefaultOption != null &&
                    this.DefaultOption.Equals(other.DefaultOption)
                ) && 
                (
                    this.MerchantItemMultimediaOid == other.MerchantItemMultimediaOid ||
                    this.MerchantItemMultimediaOid != null &&
                    this.MerchantItemMultimediaOid.Equals(other.MerchantItemMultimediaOid)
                ) && 
                (
                    this.TranslatedTextInstanceOid == other.TranslatedTextInstanceOid ||
                    this.TranslatedTextInstanceOid != null &&
                    this.TranslatedTextInstanceOid.Equals(other.TranslatedTextInstanceOid)
                ) && 
                (
                    this.Value == other.Value ||
                    this.Value != null &&
                    this.Value.Equals(other.Value)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.DefaultOption != null)
                    hash = hash * 59 + this.DefaultOption.GetHashCode();
                if (this.MerchantItemMultimediaOid != null)
                    hash = hash * 59 + this.MerchantItemMultimediaOid.GetHashCode();
                if (this.TranslatedTextInstanceOid != null)
                    hash = hash * 59 + this.TranslatedTextInstanceOid.GetHashCode();
                if (this.Value != null)
                    hash = hash * 59 + this.Value.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Value (string) maxLength
            if(this.Value != null && this.Value.Length > 50)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Value, length must be less than 50.", new [] { "Value" });
            }

            yield break;
        }
    }

}
