/*
 * UltraCart Rest API V2
 *
 * UltraCart REST API Version 2
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@ultracart.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = com.ultracart.admin.v2.Client.OpenAPIDateConverter;

namespace com.ultracart.admin.v2.Model
{
    /// <summary>
    /// LibraryFilterValues
    /// </summary>
    [DataContract]
    public partial class LibraryFilterValues :  IEquatable<LibraryFilterValues>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="LibraryFilterValues" /> class.
        /// </summary>
        /// <param name="categories">categories.</param>
        /// <param name="industries">industries.</param>
        /// <param name="styles">styles.</param>
        /// <param name="types">types.</param>
        public LibraryFilterValues(List<string> categories = default(List<string>), List<string> industries = default(List<string>), List<string> styles = default(List<string>), List<string> types = default(List<string>))
        {
            this.Categories = categories;
            this.Industries = industries;
            this.Styles = styles;
            this.Types = types;
        }

        /// <summary>
        /// Gets or Sets Categories
        /// </summary>
        [DataMember(Name="categories", EmitDefaultValue=false)]
        public List<string> Categories { get; set; }

        /// <summary>
        /// Gets or Sets Industries
        /// </summary>
        [DataMember(Name="industries", EmitDefaultValue=false)]
        public List<string> Industries { get; set; }

        /// <summary>
        /// Gets or Sets Styles
        /// </summary>
        [DataMember(Name="styles", EmitDefaultValue=false)]
        public List<string> Styles { get; set; }

        /// <summary>
        /// Gets or Sets Types
        /// </summary>
        [DataMember(Name="types", EmitDefaultValue=false)]
        public List<string> Types { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class LibraryFilterValues {\n");
            sb.Append("  Categories: ").Append(Categories).Append("\n");
            sb.Append("  Industries: ").Append(Industries).Append("\n");
            sb.Append("  Styles: ").Append(Styles).Append("\n");
            sb.Append("  Types: ").Append(Types).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as LibraryFilterValues);
        }

        /// <summary>
        /// Returns true if LibraryFilterValues instances are equal
        /// </summary>
        /// <param name="input">Instance of LibraryFilterValues to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(LibraryFilterValues input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Categories == input.Categories ||
                    this.Categories != null &&
                    input.Categories != null &&
                    this.Categories.SequenceEqual(input.Categories)
                ) && 
                (
                    this.Industries == input.Industries ||
                    this.Industries != null &&
                    input.Industries != null &&
                    this.Industries.SequenceEqual(input.Industries)
                ) && 
                (
                    this.Styles == input.Styles ||
                    this.Styles != null &&
                    input.Styles != null &&
                    this.Styles.SequenceEqual(input.Styles)
                ) && 
                (
                    this.Types == input.Types ||
                    this.Types != null &&
                    input.Types != null &&
                    this.Types.SequenceEqual(input.Types)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Categories != null)
                    hashCode = hashCode * 59 + this.Categories.GetHashCode();
                if (this.Industries != null)
                    hashCode = hashCode * 59 + this.Industries.GetHashCode();
                if (this.Styles != null)
                    hashCode = hashCode * 59 + this.Styles.GetHashCode();
                if (this.Types != null)
                    hashCode = hashCode * 59 + this.Types.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
