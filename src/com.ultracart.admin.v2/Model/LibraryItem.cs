/* 
 * UltraCart Rest API V2
 *
 * UltraCart REST API Version 2
 *
 * OpenAPI spec version: 2.0.0
 * Contact: support@ultracart.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = com.ultracart.admin.v2.Client.SwaggerDateConverter;

namespace com.ultracart.admin.v2.Model
{
    /// <summary>
    /// LibraryItem
    /// </summary>
    [DataContract]
    public partial class LibraryItem :  IEquatable<LibraryItem>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="LibraryItem" /> class.
        /// </summary>
        /// <param name="assets">assets.</param>
        /// <param name="categories">categories.</param>
        /// <param name="content">content.</param>
        /// <param name="contentType">contentType.</param>
        /// <param name="description">description.</param>
        /// <param name="industries">industries.</param>
        /// <param name="libraryItemOid">libraryItemOid.</param>
        /// <param name="merchantId">merchantId.</param>
        /// <param name="publicItem">publicItem.</param>
        /// <param name="publishedDts">publishedDts.</param>
        /// <param name="style">style.</param>
        /// <param name="title">title.</param>
        /// <param name="type">type.</param>
        public LibraryItem(List<LibraryItemAsset> assets = default(List<LibraryItemAsset>), List<string> categories = default(List<string>), string content = default(string), string contentType = default(string), string description = default(string), List<string> industries = default(List<string>), int? libraryItemOid = default(int?), string merchantId = default(string), bool? publicItem = default(bool?), string publishedDts = default(string), string style = default(string), string title = default(string), string type = default(string))
        {
            this.Assets = assets;
            this.Categories = categories;
            this.Content = content;
            this.ContentType = contentType;
            this.Description = description;
            this.Industries = industries;
            this.LibraryItemOid = libraryItemOid;
            this.MerchantId = merchantId;
            this.PublicItem = publicItem;
            this.PublishedDts = publishedDts;
            this.Style = style;
            this.Title = title;
            this.Type = type;
        }
        
        /// <summary>
        /// Gets or Sets Assets
        /// </summary>
        [DataMember(Name="assets", EmitDefaultValue=false)]
        public List<LibraryItemAsset> Assets { get; set; }

        /// <summary>
        /// Gets or Sets Categories
        /// </summary>
        [DataMember(Name="categories", EmitDefaultValue=false)]
        public List<string> Categories { get; set; }

        /// <summary>
        /// Gets or Sets Content
        /// </summary>
        [DataMember(Name="content", EmitDefaultValue=false)]
        public string Content { get; set; }

        /// <summary>
        /// Gets or Sets ContentType
        /// </summary>
        [DataMember(Name="content_type", EmitDefaultValue=false)]
        public string ContentType { get; set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }

        /// <summary>
        /// Gets or Sets Industries
        /// </summary>
        [DataMember(Name="industries", EmitDefaultValue=false)]
        public List<string> Industries { get; set; }

        /// <summary>
        /// Gets or Sets LibraryItemOid
        /// </summary>
        [DataMember(Name="library_item_oid", EmitDefaultValue=false)]
        public int? LibraryItemOid { get; set; }

        /// <summary>
        /// Gets or Sets MerchantId
        /// </summary>
        [DataMember(Name="merchant_id", EmitDefaultValue=false)]
        public string MerchantId { get; set; }

        /// <summary>
        /// Gets or Sets PublicItem
        /// </summary>
        [DataMember(Name="public_item", EmitDefaultValue=false)]
        public bool? PublicItem { get; set; }

        /// <summary>
        /// Gets or Sets PublishedDts
        /// </summary>
        [DataMember(Name="published_dts", EmitDefaultValue=false)]
        public string PublishedDts { get; set; }

        /// <summary>
        /// Gets or Sets Style
        /// </summary>
        [DataMember(Name="style", EmitDefaultValue=false)]
        public string Style { get; set; }

        /// <summary>
        /// Gets or Sets Title
        /// </summary>
        [DataMember(Name="title", EmitDefaultValue=false)]
        public string Title { get; set; }

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public string Type { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class LibraryItem {\n");
            sb.Append("  Assets: ").Append(Assets).Append("\n");
            sb.Append("  Categories: ").Append(Categories).Append("\n");
            sb.Append("  Content: ").Append(Content).Append("\n");
            sb.Append("  ContentType: ").Append(ContentType).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Industries: ").Append(Industries).Append("\n");
            sb.Append("  LibraryItemOid: ").Append(LibraryItemOid).Append("\n");
            sb.Append("  MerchantId: ").Append(MerchantId).Append("\n");
            sb.Append("  PublicItem: ").Append(PublicItem).Append("\n");
            sb.Append("  PublishedDts: ").Append(PublishedDts).Append("\n");
            sb.Append("  Style: ").Append(Style).Append("\n");
            sb.Append("  Title: ").Append(Title).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as LibraryItem);
        }

        /// <summary>
        /// Returns true if LibraryItem instances are equal
        /// </summary>
        /// <param name="input">Instance of LibraryItem to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(LibraryItem input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Assets == input.Assets ||
                    this.Assets != null &&
                    this.Assets.SequenceEqual(input.Assets)
                ) && 
                (
                    this.Categories == input.Categories ||
                    this.Categories != null &&
                    this.Categories.SequenceEqual(input.Categories)
                ) && 
                (
                    this.Content == input.Content ||
                    (this.Content != null &&
                    this.Content.Equals(input.Content))
                ) && 
                (
                    this.ContentType == input.ContentType ||
                    (this.ContentType != null &&
                    this.ContentType.Equals(input.ContentType))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.Industries == input.Industries ||
                    this.Industries != null &&
                    this.Industries.SequenceEqual(input.Industries)
                ) && 
                (
                    this.LibraryItemOid == input.LibraryItemOid ||
                    (this.LibraryItemOid != null &&
                    this.LibraryItemOid.Equals(input.LibraryItemOid))
                ) && 
                (
                    this.MerchantId == input.MerchantId ||
                    (this.MerchantId != null &&
                    this.MerchantId.Equals(input.MerchantId))
                ) && 
                (
                    this.PublicItem == input.PublicItem ||
                    (this.PublicItem != null &&
                    this.PublicItem.Equals(input.PublicItem))
                ) && 
                (
                    this.PublishedDts == input.PublishedDts ||
                    (this.PublishedDts != null &&
                    this.PublishedDts.Equals(input.PublishedDts))
                ) && 
                (
                    this.Style == input.Style ||
                    (this.Style != null &&
                    this.Style.Equals(input.Style))
                ) && 
                (
                    this.Title == input.Title ||
                    (this.Title != null &&
                    this.Title.Equals(input.Title))
                ) && 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Assets != null)
                    hashCode = hashCode * 59 + this.Assets.GetHashCode();
                if (this.Categories != null)
                    hashCode = hashCode * 59 + this.Categories.GetHashCode();
                if (this.Content != null)
                    hashCode = hashCode * 59 + this.Content.GetHashCode();
                if (this.ContentType != null)
                    hashCode = hashCode * 59 + this.ContentType.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                if (this.Industries != null)
                    hashCode = hashCode * 59 + this.Industries.GetHashCode();
                if (this.LibraryItemOid != null)
                    hashCode = hashCode * 59 + this.LibraryItemOid.GetHashCode();
                if (this.MerchantId != null)
                    hashCode = hashCode * 59 + this.MerchantId.GetHashCode();
                if (this.PublicItem != null)
                    hashCode = hashCode * 59 + this.PublicItem.GetHashCode();
                if (this.PublishedDts != null)
                    hashCode = hashCode * 59 + this.PublishedDts.GetHashCode();
                if (this.Style != null)
                    hashCode = hashCode * 59 + this.Style.GetHashCode();
                if (this.Title != null)
                    hashCode = hashCode * 59 + this.Title.GetHashCode();
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
