/*
 * UltraCart Rest API V2
 *
 * UltraCart REST API Version 2
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@ultracart.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = com.ultracart.admin.v2.Client.OpenAPIDateConverter;

namespace com.ultracart.admin.v2.Model
{
    /// <summary>
    /// LibraryItemPublishedMeta
    /// </summary>
    [DataContract]
    public partial class LibraryItemPublishedMeta :  IEquatable<LibraryItemPublishedMeta>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="LibraryItemPublishedMeta" /> class.
        /// </summary>
        /// <param name="countOfVersions">The number of published versions a source item has, or zero if this item is not a source or is private.</param>
        /// <param name="libraryItemPublishedOid">The oid pointing to the most recent published version, or zero if this is not a published source item..</param>
        /// <param name="libraryItemReviewOid">The oid pointing to the review data if this is a source library item and currently under review.</param>
        /// <param name="rejected">True if this is a source item and is under review and was rejected..</param>
        /// <param name="rejectedReason">The reason for rejection if this item is a source item, is under review, and was rejected.  For all other cases, this value will be null or missing..</param>
        /// <param name="releaseVersion">If this library item is a source item and it is published, this is the most recent release version number.</param>
        /// <param name="reviewVersion">If this library item is a source item and has a published item currently under review, this is that version number.</param>
        /// <param name="underReview">True if this library item is a source item and is currently under review.</param>
        public LibraryItemPublishedMeta(int countOfVersions = default(int), int libraryItemPublishedOid = default(int), int libraryItemReviewOid = default(int), bool rejected = default(bool), string rejectedReason = default(string), int releaseVersion = default(int), int reviewVersion = default(int), bool underReview = default(bool))
        {
            this.CountOfVersions = countOfVersions;
            this.LibraryItemPublishedOid = libraryItemPublishedOid;
            this.LibraryItemReviewOid = libraryItemReviewOid;
            this.Rejected = rejected;
            this.RejectedReason = rejectedReason;
            this.ReleaseVersion = releaseVersion;
            this.ReviewVersion = reviewVersion;
            this.UnderReview = underReview;
        }

        /// <summary>
        /// The number of published versions a source item has, or zero if this item is not a source or is private
        /// </summary>
        /// <value>The number of published versions a source item has, or zero if this item is not a source or is private</value>
        [DataMember(Name="count_of_versions", EmitDefaultValue=false)]
        public int CountOfVersions { get; set; }

        /// <summary>
        /// The oid pointing to the most recent published version, or zero if this is not a published source item.
        /// </summary>
        /// <value>The oid pointing to the most recent published version, or zero if this is not a published source item.</value>
        [DataMember(Name="library_item_published_oid", EmitDefaultValue=false)]
        public int LibraryItemPublishedOid { get; set; }

        /// <summary>
        /// The oid pointing to the review data if this is a source library item and currently under review
        /// </summary>
        /// <value>The oid pointing to the review data if this is a source library item and currently under review</value>
        [DataMember(Name="library_item_review_oid", EmitDefaultValue=false)]
        public int LibraryItemReviewOid { get; set; }

        /// <summary>
        /// True if this is a source item and is under review and was rejected.
        /// </summary>
        /// <value>True if this is a source item and is under review and was rejected.</value>
        [DataMember(Name="rejected", EmitDefaultValue=false)]
        public bool Rejected { get; set; }

        /// <summary>
        /// The reason for rejection if this item is a source item, is under review, and was rejected.  For all other cases, this value will be null or missing.
        /// </summary>
        /// <value>The reason for rejection if this item is a source item, is under review, and was rejected.  For all other cases, this value will be null or missing.</value>
        [DataMember(Name="rejected_reason", EmitDefaultValue=false)]
        public string RejectedReason { get; set; }

        /// <summary>
        /// If this library item is a source item and it is published, this is the most recent release version number
        /// </summary>
        /// <value>If this library item is a source item and it is published, this is the most recent release version number</value>
        [DataMember(Name="release_version", EmitDefaultValue=false)]
        public int ReleaseVersion { get; set; }

        /// <summary>
        /// If this library item is a source item and has a published item currently under review, this is that version number
        /// </summary>
        /// <value>If this library item is a source item and has a published item currently under review, this is that version number</value>
        [DataMember(Name="review_version", EmitDefaultValue=false)]
        public int ReviewVersion { get; set; }

        /// <summary>
        /// True if this library item is a source item and is currently under review
        /// </summary>
        /// <value>True if this library item is a source item and is currently under review</value>
        [DataMember(Name="under_review", EmitDefaultValue=false)]
        public bool UnderReview { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class LibraryItemPublishedMeta {\n");
            sb.Append("  CountOfVersions: ").Append(CountOfVersions).Append("\n");
            sb.Append("  LibraryItemPublishedOid: ").Append(LibraryItemPublishedOid).Append("\n");
            sb.Append("  LibraryItemReviewOid: ").Append(LibraryItemReviewOid).Append("\n");
            sb.Append("  Rejected: ").Append(Rejected).Append("\n");
            sb.Append("  RejectedReason: ").Append(RejectedReason).Append("\n");
            sb.Append("  ReleaseVersion: ").Append(ReleaseVersion).Append("\n");
            sb.Append("  ReviewVersion: ").Append(ReviewVersion).Append("\n");
            sb.Append("  UnderReview: ").Append(UnderReview).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as LibraryItemPublishedMeta);
        }

        /// <summary>
        /// Returns true if LibraryItemPublishedMeta instances are equal
        /// </summary>
        /// <param name="input">Instance of LibraryItemPublishedMeta to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(LibraryItemPublishedMeta input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.CountOfVersions == input.CountOfVersions ||
                    (this.CountOfVersions != null &&
                    this.CountOfVersions.Equals(input.CountOfVersions))
                ) && 
                (
                    this.LibraryItemPublishedOid == input.LibraryItemPublishedOid ||
                    (this.LibraryItemPublishedOid != null &&
                    this.LibraryItemPublishedOid.Equals(input.LibraryItemPublishedOid))
                ) && 
                (
                    this.LibraryItemReviewOid == input.LibraryItemReviewOid ||
                    (this.LibraryItemReviewOid != null &&
                    this.LibraryItemReviewOid.Equals(input.LibraryItemReviewOid))
                ) && 
                (
                    this.Rejected == input.Rejected ||
                    (this.Rejected != null &&
                    this.Rejected.Equals(input.Rejected))
                ) && 
                (
                    this.RejectedReason == input.RejectedReason ||
                    (this.RejectedReason != null &&
                    this.RejectedReason.Equals(input.RejectedReason))
                ) && 
                (
                    this.ReleaseVersion == input.ReleaseVersion ||
                    (this.ReleaseVersion != null &&
                    this.ReleaseVersion.Equals(input.ReleaseVersion))
                ) && 
                (
                    this.ReviewVersion == input.ReviewVersion ||
                    (this.ReviewVersion != null &&
                    this.ReviewVersion.Equals(input.ReviewVersion))
                ) && 
                (
                    this.UnderReview == input.UnderReview ||
                    (this.UnderReview != null &&
                    this.UnderReview.Equals(input.UnderReview))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.CountOfVersions != null)
                    hashCode = hashCode * 59 + this.CountOfVersions.GetHashCode();
                if (this.LibraryItemPublishedOid != null)
                    hashCode = hashCode * 59 + this.LibraryItemPublishedOid.GetHashCode();
                if (this.LibraryItemReviewOid != null)
                    hashCode = hashCode * 59 + this.LibraryItemReviewOid.GetHashCode();
                if (this.Rejected != null)
                    hashCode = hashCode * 59 + this.Rejected.GetHashCode();
                if (this.RejectedReason != null)
                    hashCode = hashCode * 59 + this.RejectedReason.GetHashCode();
                if (this.ReleaseVersion != null)
                    hashCode = hashCode * 59 + this.ReleaseVersion.GetHashCode();
                if (this.ReviewVersion != null)
                    hashCode = hashCode * 59 + this.ReviewVersion.GetHashCode();
                if (this.UnderReview != null)
                    hashCode = hashCode * 59 + this.UnderReview.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
