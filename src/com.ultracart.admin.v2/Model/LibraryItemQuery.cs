/*
 * UltraCart Rest API V2
 *
 * UltraCart REST API Version 2
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@ultracart.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = com.ultracart.admin.v2.Client.OpenAPIDateConverter;

namespace com.ultracart.admin.v2.Model
{
    /// <summary>
    /// LibraryItemQuery
    /// </summary>
    [DataContract]
    public partial class LibraryItemQuery :  IEquatable<LibraryItemQuery>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="LibraryItemQuery" /> class.
        /// </summary>
        /// <param name="category">Category.</param>
        /// <param name="contentType">Library item content type such as flow, campaign, cjson, email, or transactional_email.</param>
        /// <param name="description">Description of library item.</param>
        /// <param name="industry">Industry.</param>
        /// <param name="priceHigh">Maximum price.</param>
        /// <param name="priceLow">Minimum price.</param>
        /// <param name="publishedDtsBegin">Minimum published date/time.</param>
        /// <param name="publishedDtsEnd">Maximum published date/time.</param>
        /// <param name="sourceOfPublished">Boolean, true if this library item has been published and is the master copy of that published work.</param>
        /// <param name="style">Library item style.</param>
        /// <param name="title">Title of the library item.</param>
        /// <param name="type">Library item type such as header, footer, shipping block, etc.</param>
        public LibraryItemQuery(string category = default(string), string contentType = default(string), string description = default(string), string industry = default(string), decimal priceHigh = default(decimal), decimal priceLow = default(decimal), string publishedDtsBegin = default(string), string publishedDtsEnd = default(string), bool sourceOfPublished = default(bool), string style = default(string), string title = default(string), string type = default(string))
        {
            this.Category = category;
            this.ContentType = contentType;
            this.Description = description;
            this.Industry = industry;
            this.PriceHigh = priceHigh;
            this.PriceLow = priceLow;
            this.PublishedDtsBegin = publishedDtsBegin;
            this.PublishedDtsEnd = publishedDtsEnd;
            this.SourceOfPublished = sourceOfPublished;
            this.Style = style;
            this.Title = title;
            this.Type = type;
        }

        /// <summary>
        /// Category
        /// </summary>
        /// <value>Category</value>
        [DataMember(Name="category", EmitDefaultValue=false)]
        public string Category { get; set; }

        /// <summary>
        /// Library item content type such as flow, campaign, cjson, email, or transactional_email
        /// </summary>
        /// <value>Library item content type such as flow, campaign, cjson, email, or transactional_email</value>
        [DataMember(Name="content_type", EmitDefaultValue=false)]
        public string ContentType { get; set; }

        /// <summary>
        /// Description of library item
        /// </summary>
        /// <value>Description of library item</value>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }

        /// <summary>
        /// Industry
        /// </summary>
        /// <value>Industry</value>
        [DataMember(Name="industry", EmitDefaultValue=false)]
        public string Industry { get; set; }

        /// <summary>
        /// Maximum price
        /// </summary>
        /// <value>Maximum price</value>
        [DataMember(Name="price_high", EmitDefaultValue=false)]
        public decimal PriceHigh { get; set; }

        /// <summary>
        /// Minimum price
        /// </summary>
        /// <value>Minimum price</value>
        [DataMember(Name="price_low", EmitDefaultValue=false)]
        public decimal PriceLow { get; set; }

        /// <summary>
        /// Minimum published date/time
        /// </summary>
        /// <value>Minimum published date/time</value>
        [DataMember(Name="published_dts_begin", EmitDefaultValue=false)]
        public string PublishedDtsBegin { get; set; }

        /// <summary>
        /// Maximum published date/time
        /// </summary>
        /// <value>Maximum published date/time</value>
        [DataMember(Name="published_dts_end", EmitDefaultValue=false)]
        public string PublishedDtsEnd { get; set; }

        /// <summary>
        /// Boolean, true if this library item has been published and is the master copy of that published work
        /// </summary>
        /// <value>Boolean, true if this library item has been published and is the master copy of that published work</value>
        [DataMember(Name="source_of_published", EmitDefaultValue=false)]
        public bool SourceOfPublished { get; set; }

        /// <summary>
        /// Library item style
        /// </summary>
        /// <value>Library item style</value>
        [DataMember(Name="style", EmitDefaultValue=false)]
        public string Style { get; set; }

        /// <summary>
        /// Title of the library item
        /// </summary>
        /// <value>Title of the library item</value>
        [DataMember(Name="title", EmitDefaultValue=false)]
        public string Title { get; set; }

        /// <summary>
        /// Library item type such as header, footer, shipping block, etc
        /// </summary>
        /// <value>Library item type such as header, footer, shipping block, etc</value>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public string Type { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class LibraryItemQuery {\n");
            sb.Append("  Category: ").Append(Category).Append("\n");
            sb.Append("  ContentType: ").Append(ContentType).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Industry: ").Append(Industry).Append("\n");
            sb.Append("  PriceHigh: ").Append(PriceHigh).Append("\n");
            sb.Append("  PriceLow: ").Append(PriceLow).Append("\n");
            sb.Append("  PublishedDtsBegin: ").Append(PublishedDtsBegin).Append("\n");
            sb.Append("  PublishedDtsEnd: ").Append(PublishedDtsEnd).Append("\n");
            sb.Append("  SourceOfPublished: ").Append(SourceOfPublished).Append("\n");
            sb.Append("  Style: ").Append(Style).Append("\n");
            sb.Append("  Title: ").Append(Title).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as LibraryItemQuery);
        }

        /// <summary>
        /// Returns true if LibraryItemQuery instances are equal
        /// </summary>
        /// <param name="input">Instance of LibraryItemQuery to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(LibraryItemQuery input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Category == input.Category ||
                    (this.Category != null &&
                    this.Category.Equals(input.Category))
                ) && 
                (
                    this.ContentType == input.ContentType ||
                    (this.ContentType != null &&
                    this.ContentType.Equals(input.ContentType))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.Industry == input.Industry ||
                    (this.Industry != null &&
                    this.Industry.Equals(input.Industry))
                ) && 
                (
                    this.PriceHigh == input.PriceHigh ||
                    (this.PriceHigh != null &&
                    this.PriceHigh.Equals(input.PriceHigh))
                ) && 
                (
                    this.PriceLow == input.PriceLow ||
                    (this.PriceLow != null &&
                    this.PriceLow.Equals(input.PriceLow))
                ) && 
                (
                    this.PublishedDtsBegin == input.PublishedDtsBegin ||
                    (this.PublishedDtsBegin != null &&
                    this.PublishedDtsBegin.Equals(input.PublishedDtsBegin))
                ) && 
                (
                    this.PublishedDtsEnd == input.PublishedDtsEnd ||
                    (this.PublishedDtsEnd != null &&
                    this.PublishedDtsEnd.Equals(input.PublishedDtsEnd))
                ) && 
                (
                    this.SourceOfPublished == input.SourceOfPublished ||
                    (this.SourceOfPublished != null &&
                    this.SourceOfPublished.Equals(input.SourceOfPublished))
                ) && 
                (
                    this.Style == input.Style ||
                    (this.Style != null &&
                    this.Style.Equals(input.Style))
                ) && 
                (
                    this.Title == input.Title ||
                    (this.Title != null &&
                    this.Title.Equals(input.Title))
                ) && 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Category != null)
                    hashCode = hashCode * 59 + this.Category.GetHashCode();
                if (this.ContentType != null)
                    hashCode = hashCode * 59 + this.ContentType.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                if (this.Industry != null)
                    hashCode = hashCode * 59 + this.Industry.GetHashCode();
                if (this.PriceHigh != null)
                    hashCode = hashCode * 59 + this.PriceHigh.GetHashCode();
                if (this.PriceLow != null)
                    hashCode = hashCode * 59 + this.PriceLow.GetHashCode();
                if (this.PublishedDtsBegin != null)
                    hashCode = hashCode * 59 + this.PublishedDtsBegin.GetHashCode();
                if (this.PublishedDtsEnd != null)
                    hashCode = hashCode * 59 + this.PublishedDtsEnd.GetHashCode();
                if (this.SourceOfPublished != null)
                    hashCode = hashCode * 59 + this.SourceOfPublished.GetHashCode();
                if (this.Style != null)
                    hashCode = hashCode * 59 + this.Style.GetHashCode();
                if (this.Title != null)
                    hashCode = hashCode * 59 + this.Title.GetHashCode();
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
