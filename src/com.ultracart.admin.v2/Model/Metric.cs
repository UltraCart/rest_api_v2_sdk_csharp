/*
 * UltraCart Rest API V2
 *
 * UltraCart REST API Version 2
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@ultracart.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = com.ultracart.admin.v2.Client.OpenAPIDateConverter;

namespace com.ultracart.admin.v2.Model
{
    /// <summary>
    /// Metric
    /// </summary>
    [DataContract]
    public partial class Metric :  IEquatable<Metric>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Metric" /> class.
        /// </summary>
        /// <param name="allTime">allTime.</param>
        /// <param name="allTimeFormatted">allTimeFormatted.</param>
        /// <param name="last30">last30.</param>
        /// <param name="last30Formatted">last30Formatted.</param>
        /// <param name="name">name.</param>
        /// <param name="prior30">prior30.</param>
        /// <param name="prior30Formatted">prior30Formatted.</param>
        /// <param name="type">type.</param>
        public Metric(decimal allTime = default(decimal), string allTimeFormatted = default(string), decimal last30 = default(decimal), string last30Formatted = default(string), string name = default(string), decimal prior30 = default(decimal), string prior30Formatted = default(string), string type = default(string))
        {
            this.AllTime = allTime;
            this.AllTimeFormatted = allTimeFormatted;
            this.Last30 = last30;
            this.Last30Formatted = last30Formatted;
            this.Name = name;
            this.Prior30 = prior30;
            this.Prior30Formatted = prior30Formatted;
            this.Type = type;
        }

        /// <summary>
        /// Gets or Sets AllTime
        /// </summary>
        [DataMember(Name="all_time", EmitDefaultValue=false)]
        public decimal AllTime { get; set; }

        /// <summary>
        /// Gets or Sets AllTimeFormatted
        /// </summary>
        [DataMember(Name="all_time_formatted", EmitDefaultValue=false)]
        public string AllTimeFormatted { get; set; }

        /// <summary>
        /// Gets or Sets Last30
        /// </summary>
        [DataMember(Name="last_30", EmitDefaultValue=false)]
        public decimal Last30 { get; set; }

        /// <summary>
        /// Gets or Sets Last30Formatted
        /// </summary>
        [DataMember(Name="last_30_formatted", EmitDefaultValue=false)]
        public string Last30Formatted { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Prior30
        /// </summary>
        [DataMember(Name="prior_30", EmitDefaultValue=false)]
        public decimal Prior30 { get; set; }

        /// <summary>
        /// Gets or Sets Prior30Formatted
        /// </summary>
        [DataMember(Name="prior_30_formatted", EmitDefaultValue=false)]
        public string Prior30Formatted { get; set; }

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public string Type { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Metric {\n");
            sb.Append("  AllTime: ").Append(AllTime).Append("\n");
            sb.Append("  AllTimeFormatted: ").Append(AllTimeFormatted).Append("\n");
            sb.Append("  Last30: ").Append(Last30).Append("\n");
            sb.Append("  Last30Formatted: ").Append(Last30Formatted).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Prior30: ").Append(Prior30).Append("\n");
            sb.Append("  Prior30Formatted: ").Append(Prior30Formatted).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Metric);
        }

        /// <summary>
        /// Returns true if Metric instances are equal
        /// </summary>
        /// <param name="input">Instance of Metric to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Metric input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.AllTime == input.AllTime ||
                    (this.AllTime != null &&
                    this.AllTime.Equals(input.AllTime))
                ) && 
                (
                    this.AllTimeFormatted == input.AllTimeFormatted ||
                    (this.AllTimeFormatted != null &&
                    this.AllTimeFormatted.Equals(input.AllTimeFormatted))
                ) && 
                (
                    this.Last30 == input.Last30 ||
                    (this.Last30 != null &&
                    this.Last30.Equals(input.Last30))
                ) && 
                (
                    this.Last30Formatted == input.Last30Formatted ||
                    (this.Last30Formatted != null &&
                    this.Last30Formatted.Equals(input.Last30Formatted))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Prior30 == input.Prior30 ||
                    (this.Prior30 != null &&
                    this.Prior30.Equals(input.Prior30))
                ) && 
                (
                    this.Prior30Formatted == input.Prior30Formatted ||
                    (this.Prior30Formatted != null &&
                    this.Prior30Formatted.Equals(input.Prior30Formatted))
                ) && 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AllTime != null)
                    hashCode = hashCode * 59 + this.AllTime.GetHashCode();
                if (this.AllTimeFormatted != null)
                    hashCode = hashCode * 59 + this.AllTimeFormatted.GetHashCode();
                if (this.Last30 != null)
                    hashCode = hashCode * 59 + this.Last30.GetHashCode();
                if (this.Last30Formatted != null)
                    hashCode = hashCode * 59 + this.Last30Formatted.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Prior30 != null)
                    hashCode = hashCode * 59 + this.Prior30.GetHashCode();
                if (this.Prior30Formatted != null)
                    hashCode = hashCode * 59 + this.Prior30Formatted.GetHashCode();
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
