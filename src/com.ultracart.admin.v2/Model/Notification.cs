/*
 * UltraCart Rest API V2
 *
 * UltraCart REST API Version 2
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@ultracart.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = com.ultracart.admin.v2.Client.OpenAPIDateConverter;

namespace com.ultracart.admin.v2.Model
{
    /// <summary>
    /// Notification
    /// </summary>
    [DataContract]
    public partial class Notification :  IEquatable<Notification>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Notification" /> class.
        /// </summary>
        /// <param name="canFilterByDistributionCenters">True if this notification can be filtered to only send for one or more distribution centers..</param>
        /// <param name="canIncludeAffiliate">True if this notification can include an affiliate information..</param>
        /// <param name="canIncludeOrder">True if this notification can include an order attachment..</param>
        /// <param name="canIncludeOrderPlainText">True if this notification can include a plain text rendering of an order directly within an email.  Some desire this over an attachment.</param>
        /// <param name="distributionCenterFilters">If this notification supports it, this list of distribution center CODES will filter the notification to just those distribution centers..</param>
        /// <param name="includeAffiliate">If true, and this notification supports it, affiliate information will be attached to all notifications of this type.</param>
        /// <param name="includeOrder">If true, and this notification supports it, the order will be attached to all notifications of this type.</param>
        /// <param name="includeOrderPlainText">If true, and this notification supports it, a plain text order will be directly inserted into all notifications of this type.</param>
        /// <param name="name">The name of this notification..</param>
        /// <param name="notificationGroup">A group for this notification.  This name is only used for visual grouping within interfaces..</param>
        /// <param name="selected">True if this user wishes to receive this email notification..</param>
        public Notification(bool canFilterByDistributionCenters = default(bool), bool canIncludeAffiliate = default(bool), bool canIncludeOrder = default(bool), bool canIncludeOrderPlainText = default(bool), List<string> distributionCenterFilters = default(List<string>), bool includeAffiliate = default(bool), bool includeOrder = default(bool), bool includeOrderPlainText = default(bool), string name = default(string), string notificationGroup = default(string), bool selected = default(bool))
        {
            this.CanFilterByDistributionCenters = canFilterByDistributionCenters;
            this.CanIncludeAffiliate = canIncludeAffiliate;
            this.CanIncludeOrder = canIncludeOrder;
            this.CanIncludeOrderPlainText = canIncludeOrderPlainText;
            this.DistributionCenterFilters = distributionCenterFilters;
            this.IncludeAffiliate = includeAffiliate;
            this.IncludeOrder = includeOrder;
            this.IncludeOrderPlainText = includeOrderPlainText;
            this.Name = name;
            this.NotificationGroup = notificationGroup;
            this.Selected = selected;
        }

        /// <summary>
        /// True if this notification can be filtered to only send for one or more distribution centers.
        /// </summary>
        /// <value>True if this notification can be filtered to only send for one or more distribution centers.</value>
        [DataMember(Name="can_filter_by_distribution_centers", EmitDefaultValue=false)]
        public bool CanFilterByDistributionCenters { get; set; }

        /// <summary>
        /// True if this notification can include an affiliate information.
        /// </summary>
        /// <value>True if this notification can include an affiliate information.</value>
        [DataMember(Name="can_include_affiliate", EmitDefaultValue=false)]
        public bool CanIncludeAffiliate { get; set; }

        /// <summary>
        /// True if this notification can include an order attachment.
        /// </summary>
        /// <value>True if this notification can include an order attachment.</value>
        [DataMember(Name="can_include_order", EmitDefaultValue=false)]
        public bool CanIncludeOrder { get; set; }

        /// <summary>
        /// True if this notification can include a plain text rendering of an order directly within an email.  Some desire this over an attachment
        /// </summary>
        /// <value>True if this notification can include a plain text rendering of an order directly within an email.  Some desire this over an attachment</value>
        [DataMember(Name="can_include_order_plain_text", EmitDefaultValue=false)]
        public bool CanIncludeOrderPlainText { get; set; }

        /// <summary>
        /// If this notification supports it, this list of distribution center CODES will filter the notification to just those distribution centers.
        /// </summary>
        /// <value>If this notification supports it, this list of distribution center CODES will filter the notification to just those distribution centers.</value>
        [DataMember(Name="distribution_center_filters", EmitDefaultValue=false)]
        public List<string> DistributionCenterFilters { get; set; }

        /// <summary>
        /// If true, and this notification supports it, affiliate information will be attached to all notifications of this type
        /// </summary>
        /// <value>If true, and this notification supports it, affiliate information will be attached to all notifications of this type</value>
        [DataMember(Name="include_affiliate", EmitDefaultValue=false)]
        public bool IncludeAffiliate { get; set; }

        /// <summary>
        /// If true, and this notification supports it, the order will be attached to all notifications of this type
        /// </summary>
        /// <value>If true, and this notification supports it, the order will be attached to all notifications of this type</value>
        [DataMember(Name="include_order", EmitDefaultValue=false)]
        public bool IncludeOrder { get; set; }

        /// <summary>
        /// If true, and this notification supports it, a plain text order will be directly inserted into all notifications of this type
        /// </summary>
        /// <value>If true, and this notification supports it, a plain text order will be directly inserted into all notifications of this type</value>
        [DataMember(Name="include_order_plain_text", EmitDefaultValue=false)]
        public bool IncludeOrderPlainText { get; set; }

        /// <summary>
        /// The name of this notification.
        /// </summary>
        /// <value>The name of this notification.</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// A group for this notification.  This name is only used for visual grouping within interfaces.
        /// </summary>
        /// <value>A group for this notification.  This name is only used for visual grouping within interfaces.</value>
        [DataMember(Name="notification_group", EmitDefaultValue=false)]
        public string NotificationGroup { get; set; }

        /// <summary>
        /// True if this user wishes to receive this email notification.
        /// </summary>
        /// <value>True if this user wishes to receive this email notification.</value>
        [DataMember(Name="selected", EmitDefaultValue=false)]
        public bool Selected { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Notification {\n");
            sb.Append("  CanFilterByDistributionCenters: ").Append(CanFilterByDistributionCenters).Append("\n");
            sb.Append("  CanIncludeAffiliate: ").Append(CanIncludeAffiliate).Append("\n");
            sb.Append("  CanIncludeOrder: ").Append(CanIncludeOrder).Append("\n");
            sb.Append("  CanIncludeOrderPlainText: ").Append(CanIncludeOrderPlainText).Append("\n");
            sb.Append("  DistributionCenterFilters: ").Append(DistributionCenterFilters).Append("\n");
            sb.Append("  IncludeAffiliate: ").Append(IncludeAffiliate).Append("\n");
            sb.Append("  IncludeOrder: ").Append(IncludeOrder).Append("\n");
            sb.Append("  IncludeOrderPlainText: ").Append(IncludeOrderPlainText).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  NotificationGroup: ").Append(NotificationGroup).Append("\n");
            sb.Append("  Selected: ").Append(Selected).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Notification);
        }

        /// <summary>
        /// Returns true if Notification instances are equal
        /// </summary>
        /// <param name="input">Instance of Notification to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Notification input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.CanFilterByDistributionCenters == input.CanFilterByDistributionCenters ||
                    (this.CanFilterByDistributionCenters != null &&
                    this.CanFilterByDistributionCenters.Equals(input.CanFilterByDistributionCenters))
                ) && 
                (
                    this.CanIncludeAffiliate == input.CanIncludeAffiliate ||
                    (this.CanIncludeAffiliate != null &&
                    this.CanIncludeAffiliate.Equals(input.CanIncludeAffiliate))
                ) && 
                (
                    this.CanIncludeOrder == input.CanIncludeOrder ||
                    (this.CanIncludeOrder != null &&
                    this.CanIncludeOrder.Equals(input.CanIncludeOrder))
                ) && 
                (
                    this.CanIncludeOrderPlainText == input.CanIncludeOrderPlainText ||
                    (this.CanIncludeOrderPlainText != null &&
                    this.CanIncludeOrderPlainText.Equals(input.CanIncludeOrderPlainText))
                ) && 
                (
                    this.DistributionCenterFilters == input.DistributionCenterFilters ||
                    this.DistributionCenterFilters != null &&
                    input.DistributionCenterFilters != null &&
                    this.DistributionCenterFilters.SequenceEqual(input.DistributionCenterFilters)
                ) && 
                (
                    this.IncludeAffiliate == input.IncludeAffiliate ||
                    (this.IncludeAffiliate != null &&
                    this.IncludeAffiliate.Equals(input.IncludeAffiliate))
                ) && 
                (
                    this.IncludeOrder == input.IncludeOrder ||
                    (this.IncludeOrder != null &&
                    this.IncludeOrder.Equals(input.IncludeOrder))
                ) && 
                (
                    this.IncludeOrderPlainText == input.IncludeOrderPlainText ||
                    (this.IncludeOrderPlainText != null &&
                    this.IncludeOrderPlainText.Equals(input.IncludeOrderPlainText))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.NotificationGroup == input.NotificationGroup ||
                    (this.NotificationGroup != null &&
                    this.NotificationGroup.Equals(input.NotificationGroup))
                ) && 
                (
                    this.Selected == input.Selected ||
                    (this.Selected != null &&
                    this.Selected.Equals(input.Selected))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.CanFilterByDistributionCenters != null)
                    hashCode = hashCode * 59 + this.CanFilterByDistributionCenters.GetHashCode();
                if (this.CanIncludeAffiliate != null)
                    hashCode = hashCode * 59 + this.CanIncludeAffiliate.GetHashCode();
                if (this.CanIncludeOrder != null)
                    hashCode = hashCode * 59 + this.CanIncludeOrder.GetHashCode();
                if (this.CanIncludeOrderPlainText != null)
                    hashCode = hashCode * 59 + this.CanIncludeOrderPlainText.GetHashCode();
                if (this.DistributionCenterFilters != null)
                    hashCode = hashCode * 59 + this.DistributionCenterFilters.GetHashCode();
                if (this.IncludeAffiliate != null)
                    hashCode = hashCode * 59 + this.IncludeAffiliate.GetHashCode();
                if (this.IncludeOrder != null)
                    hashCode = hashCode * 59 + this.IncludeOrder.GetHashCode();
                if (this.IncludeOrderPlainText != null)
                    hashCode = hashCode * 59 + this.IncludeOrderPlainText.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.NotificationGroup != null)
                    hashCode = hashCode * 59 + this.NotificationGroup.GetHashCode();
                if (this.Selected != null)
                    hashCode = hashCode * 59 + this.Selected.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
