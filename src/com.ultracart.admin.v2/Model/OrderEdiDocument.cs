/*
 * UltraCart Rest API V2
 *
 * UltraCart REST API Version 2
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@ultracart.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = com.ultracart.admin.v2.Client.OpenAPIDateConverter;

namespace com.ultracart.admin.v2.Model
{
    /// <summary>
    /// OrderEdiDocument
    /// </summary>
    [DataContract]
    public partial class OrderEdiDocument :  IEquatable<OrderEdiDocument>, IValidatableObject
    {
        /// <summary>
        /// Direction the document flowed
        /// </summary>
        /// <value>Direction the document flowed</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum DirectionEnum
        {
            /// <summary>
            /// Enum Inbound for value: inbound
            /// </summary>
            [EnumMember(Value = "inbound")]
            Inbound = 1,

            /// <summary>
            /// Enum Outbound for value: outbound
            /// </summary>
            [EnumMember(Value = "outbound")]
            Outbound = 2

        }

        /// <summary>
        /// Direction the document flowed
        /// </summary>
        /// <value>Direction the document flowed</value>
        [DataMember(Name="direction", EmitDefaultValue=false)]
        public DirectionEnum? Direction { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="OrderEdiDocument" /> class.
        /// </summary>
        /// <param name="direction">Direction the document flowed.</param>
        /// <param name="docDts">Date/time the document was created/received.</param>
        /// <param name="document">document.</param>
        /// <param name="documentTypeDescription">documentTypeDescription.</param>
        /// <param name="documentTypeNumber">documentTypeNumber.</param>
        /// <param name="externalId">externalId.</param>
        /// <param name="functionalAcknowledgement">functionalAcknowledgement.</param>
        /// <param name="functionalAcknowledgementDts">functionalAcknowledgementDts.</param>
        /// <param name="functionalAcknowledgementPending">functionalAcknowledgementPending.</param>
        /// <param name="groupControlNumber">groupControlNumber.</param>
        /// <param name="internalId">internalId.</param>
        /// <param name="merchantId">merchantId.</param>
        /// <param name="orderId">orderId.</param>
        /// <param name="testMode">testMode.</param>
        public OrderEdiDocument(DirectionEnum? direction = default(DirectionEnum?), string docDts = default(string), string document = default(string), string documentTypeDescription = default(string), int documentTypeNumber = default(int), string externalId = default(string), string functionalAcknowledgement = default(string), string functionalAcknowledgementDts = default(string), bool functionalAcknowledgementPending = default(bool), int groupControlNumber = default(int), string internalId = default(string), string merchantId = default(string), string orderId = default(string), bool testMode = default(bool))
        {
            this.Direction = direction;
            this.DocDts = docDts;
            this.Document = document;
            this.DocumentTypeDescription = documentTypeDescription;
            this.DocumentTypeNumber = documentTypeNumber;
            this.ExternalId = externalId;
            this.FunctionalAcknowledgement = functionalAcknowledgement;
            this.FunctionalAcknowledgementDts = functionalAcknowledgementDts;
            this.FunctionalAcknowledgementPending = functionalAcknowledgementPending;
            this.GroupControlNumber = groupControlNumber;
            this.InternalId = internalId;
            this.MerchantId = merchantId;
            this.OrderId = orderId;
            this.TestMode = testMode;
        }


        /// <summary>
        /// Date/time the document was created/received
        /// </summary>
        /// <value>Date/time the document was created/received</value>
        [DataMember(Name="doc_dts", EmitDefaultValue=false)]
        public string DocDts { get; set; }

        /// <summary>
        /// Gets or Sets Document
        /// </summary>
        [DataMember(Name="document", EmitDefaultValue=false)]
        public string Document { get; set; }

        /// <summary>
        /// Gets or Sets DocumentTypeDescription
        /// </summary>
        [DataMember(Name="document_type_description", EmitDefaultValue=false)]
        public string DocumentTypeDescription { get; set; }

        /// <summary>
        /// Gets or Sets DocumentTypeNumber
        /// </summary>
        [DataMember(Name="document_type_number", EmitDefaultValue=false)]
        public int DocumentTypeNumber { get; set; }

        /// <summary>
        /// Gets or Sets ExternalId
        /// </summary>
        [DataMember(Name="external_id", EmitDefaultValue=false)]
        public string ExternalId { get; set; }

        /// <summary>
        /// Gets or Sets FunctionalAcknowledgement
        /// </summary>
        [DataMember(Name="functional_acknowledgement", EmitDefaultValue=false)]
        public string FunctionalAcknowledgement { get; set; }

        /// <summary>
        /// Gets or Sets FunctionalAcknowledgementDts
        /// </summary>
        [DataMember(Name="functional_acknowledgement_dts", EmitDefaultValue=false)]
        public string FunctionalAcknowledgementDts { get; set; }

        /// <summary>
        /// Gets or Sets FunctionalAcknowledgementPending
        /// </summary>
        [DataMember(Name="functional_acknowledgement_pending", EmitDefaultValue=false)]
        public bool FunctionalAcknowledgementPending { get; set; }

        /// <summary>
        /// Gets or Sets GroupControlNumber
        /// </summary>
        [DataMember(Name="group_control_number", EmitDefaultValue=false)]
        public int GroupControlNumber { get; set; }

        /// <summary>
        /// Gets or Sets InternalId
        /// </summary>
        [DataMember(Name="internal_id", EmitDefaultValue=false)]
        public string InternalId { get; set; }

        /// <summary>
        /// Gets or Sets MerchantId
        /// </summary>
        [DataMember(Name="merchant_id", EmitDefaultValue=false)]
        public string MerchantId { get; set; }

        /// <summary>
        /// Gets or Sets OrderId
        /// </summary>
        [DataMember(Name="order_id", EmitDefaultValue=false)]
        public string OrderId { get; set; }

        /// <summary>
        /// Gets or Sets TestMode
        /// </summary>
        [DataMember(Name="test_mode", EmitDefaultValue=false)]
        public bool TestMode { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class OrderEdiDocument {\n");
            sb.Append("  Direction: ").Append(Direction).Append("\n");
            sb.Append("  DocDts: ").Append(DocDts).Append("\n");
            sb.Append("  Document: ").Append(Document).Append("\n");
            sb.Append("  DocumentTypeDescription: ").Append(DocumentTypeDescription).Append("\n");
            sb.Append("  DocumentTypeNumber: ").Append(DocumentTypeNumber).Append("\n");
            sb.Append("  ExternalId: ").Append(ExternalId).Append("\n");
            sb.Append("  FunctionalAcknowledgement: ").Append(FunctionalAcknowledgement).Append("\n");
            sb.Append("  FunctionalAcknowledgementDts: ").Append(FunctionalAcknowledgementDts).Append("\n");
            sb.Append("  FunctionalAcknowledgementPending: ").Append(FunctionalAcknowledgementPending).Append("\n");
            sb.Append("  GroupControlNumber: ").Append(GroupControlNumber).Append("\n");
            sb.Append("  InternalId: ").Append(InternalId).Append("\n");
            sb.Append("  MerchantId: ").Append(MerchantId).Append("\n");
            sb.Append("  OrderId: ").Append(OrderId).Append("\n");
            sb.Append("  TestMode: ").Append(TestMode).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as OrderEdiDocument);
        }

        /// <summary>
        /// Returns true if OrderEdiDocument instances are equal
        /// </summary>
        /// <param name="input">Instance of OrderEdiDocument to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(OrderEdiDocument input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Direction == input.Direction ||
                    (this.Direction != null &&
                    this.Direction.Equals(input.Direction))
                ) && 
                (
                    this.DocDts == input.DocDts ||
                    (this.DocDts != null &&
                    this.DocDts.Equals(input.DocDts))
                ) && 
                (
                    this.Document == input.Document ||
                    (this.Document != null &&
                    this.Document.Equals(input.Document))
                ) && 
                (
                    this.DocumentTypeDescription == input.DocumentTypeDescription ||
                    (this.DocumentTypeDescription != null &&
                    this.DocumentTypeDescription.Equals(input.DocumentTypeDescription))
                ) && 
                (
                    this.DocumentTypeNumber == input.DocumentTypeNumber ||
                    (this.DocumentTypeNumber != null &&
                    this.DocumentTypeNumber.Equals(input.DocumentTypeNumber))
                ) && 
                (
                    this.ExternalId == input.ExternalId ||
                    (this.ExternalId != null &&
                    this.ExternalId.Equals(input.ExternalId))
                ) && 
                (
                    this.FunctionalAcknowledgement == input.FunctionalAcknowledgement ||
                    (this.FunctionalAcknowledgement != null &&
                    this.FunctionalAcknowledgement.Equals(input.FunctionalAcknowledgement))
                ) && 
                (
                    this.FunctionalAcknowledgementDts == input.FunctionalAcknowledgementDts ||
                    (this.FunctionalAcknowledgementDts != null &&
                    this.FunctionalAcknowledgementDts.Equals(input.FunctionalAcknowledgementDts))
                ) && 
                (
                    this.FunctionalAcknowledgementPending == input.FunctionalAcknowledgementPending ||
                    (this.FunctionalAcknowledgementPending != null &&
                    this.FunctionalAcknowledgementPending.Equals(input.FunctionalAcknowledgementPending))
                ) && 
                (
                    this.GroupControlNumber == input.GroupControlNumber ||
                    (this.GroupControlNumber != null &&
                    this.GroupControlNumber.Equals(input.GroupControlNumber))
                ) && 
                (
                    this.InternalId == input.InternalId ||
                    (this.InternalId != null &&
                    this.InternalId.Equals(input.InternalId))
                ) && 
                (
                    this.MerchantId == input.MerchantId ||
                    (this.MerchantId != null &&
                    this.MerchantId.Equals(input.MerchantId))
                ) && 
                (
                    this.OrderId == input.OrderId ||
                    (this.OrderId != null &&
                    this.OrderId.Equals(input.OrderId))
                ) && 
                (
                    this.TestMode == input.TestMode ||
                    (this.TestMode != null &&
                    this.TestMode.Equals(input.TestMode))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Direction != null)
                    hashCode = hashCode * 59 + this.Direction.GetHashCode();
                if (this.DocDts != null)
                    hashCode = hashCode * 59 + this.DocDts.GetHashCode();
                if (this.Document != null)
                    hashCode = hashCode * 59 + this.Document.GetHashCode();
                if (this.DocumentTypeDescription != null)
                    hashCode = hashCode * 59 + this.DocumentTypeDescription.GetHashCode();
                if (this.DocumentTypeNumber != null)
                    hashCode = hashCode * 59 + this.DocumentTypeNumber.GetHashCode();
                if (this.ExternalId != null)
                    hashCode = hashCode * 59 + this.ExternalId.GetHashCode();
                if (this.FunctionalAcknowledgement != null)
                    hashCode = hashCode * 59 + this.FunctionalAcknowledgement.GetHashCode();
                if (this.FunctionalAcknowledgementDts != null)
                    hashCode = hashCode * 59 + this.FunctionalAcknowledgementDts.GetHashCode();
                if (this.FunctionalAcknowledgementPending != null)
                    hashCode = hashCode * 59 + this.FunctionalAcknowledgementPending.GetHashCode();
                if (this.GroupControlNumber != null)
                    hashCode = hashCode * 59 + this.GroupControlNumber.GetHashCode();
                if (this.InternalId != null)
                    hashCode = hashCode * 59 + this.InternalId.GetHashCode();
                if (this.MerchantId != null)
                    hashCode = hashCode * 59 + this.MerchantId.GetHashCode();
                if (this.OrderId != null)
                    hashCode = hashCode * 59 + this.OrderId.GetHashCode();
                if (this.TestMode != null)
                    hashCode = hashCode * 59 + this.TestMode.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
