/* 
 * UltraCart Rest API V2
 *
 * UltraCart REST API Version 2
 *
 * OpenAPI spec version: 2.0.0
 * Contact: support@ultracart.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = com.ultracart.admin.v2.Client.SwaggerDateConverter;

namespace com.ultracart.admin.v2.Model
{
    /// <summary>
    /// OrderItem
    /// </summary>
    [DataContract]
    public partial class OrderItem :  IEquatable<OrderItem>, IValidatableObject
    {
        /// <summary>
        /// Type of product for tax purposes (self or UltraCart Managed taxes)
        /// </summary>
        /// <value>Type of product for tax purposes (self or UltraCart Managed taxes)</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TaxProductTypeEnum
        {
            
            /// <summary>
            /// Enum Empty for value: 
            /// </summary>
            [EnumMember(Value = "")]
            Empty = 1,
            
            /// <summary>
            /// Enum Digital for value: digital
            /// </summary>
            [EnumMember(Value = "digital")]
            Digital = 2,
            
            /// <summary>
            /// Enum Physical for value: physical
            /// </summary>
            [EnumMember(Value = "physical")]
            Physical = 3,
            
            /// <summary>
            /// Enum Service for value: service
            /// </summary>
            [EnumMember(Value = "service")]
            Service = 4
        }

        /// <summary>
        /// Type of product for tax purposes (self or UltraCart Managed taxes)
        /// </summary>
        /// <value>Type of product for tax purposes (self or UltraCart Managed taxes)</value>
        [DataMember(Name="tax_product_type", EmitDefaultValue=false)]
        public TaxProductTypeEnum? TaxProductType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="OrderItem" /> class.
        /// </summary>
        /// <param name="accountingCode">QuickBooks code.</param>
        /// <param name="activationCodes">Activation codes assigned to this item.</param>
        /// <param name="arbitraryUnitCost">arbitraryUnitCost.</param>
        /// <param name="autoOrderLastRebillDts">Date/time of the last rebill, used only during order insert to help project future rebills.</param>
        /// <param name="autoOrderSchedule">Auto order schedule, used only during inserts supplying the recurring schedule.</param>
        /// <param name="barcode">Barcode.</param>
        /// <param name="channelPartnerItemId">Channel partner item id if this order came through a channel partner and the channel partner item id was mapped to an internal item id.</param>
        /// <param name="cogs">Cost of goods sold.</param>
        /// <param name="componentUnitValue">Value of the kit component item.</param>
        /// <param name="cost">cost.</param>
        /// <param name="countryCodeOfOrigin">Country of origin (ISO-3166 two letter code).</param>
        /// <param name="customsDescription">Customs description.</param>
        /// <param name="description">Description.</param>
        /// <param name="discount">discount.</param>
        /// <param name="discountQuantity">Discount quantity.</param>
        /// <param name="discountShippingWeight">discountShippingWeight.</param>
        /// <param name="distributionCenterCode">Distribution center code responsible for shipping this item.</param>
        /// <param name="edi">edi.</param>
        /// <param name="excludeCoupon">True if this item is excluded from coupons.</param>
        /// <param name="freeShipping">True if the item receives free shipping.</param>
        /// <param name="hazmat">Hazardous materials indicator.</param>
        /// <param name="height">height.</param>
        /// <param name="itemIndex">Index of the item on the order (one based index).</param>
        /// <param name="itemReferenceOid">Item reference object identifier used to linked to auto order item record.</param>
        /// <param name="kit">True if this item is a kit.</param>
        /// <param name="kitComponent">True if this item is a kit component.</param>
        /// <param name="length">length.</param>
        /// <param name="manufacturerSku">Manufacturer SKU.</param>
        /// <param name="maxDaysTimeInTransit">Maximum days that the item can be in transit before spoilage (perishable products).</param>
        /// <param name="merchantItemId">Item ID.</param>
        /// <param name="mixAndMatchGroupName">Mix and match group name.</param>
        /// <param name="mixAndMatchGroupOid">Mix and match group object identifier.</param>
        /// <param name="noShippingDiscount">True if this item is excluded from shipping discounts.</param>
        /// <param name="options">Options.</param>
        /// <param name="packedByUser">Packed by user.</param>
        /// <param name="parentItemIndex">If this item is a kit component, this is the item index of the parent item (kit).</param>
        /// <param name="parentMerchantItemId">If this item is a kit component, this is the item id of the parent item (kit).</param>
        /// <param name="perishableClass">Perishable class of the item.</param>
        /// <param name="pricingTierName">Pricing tier that granted the particular price for this item if the customer profile had pricing tiers assigned.</param>
        /// <param name="properties">Properties.</param>
        /// <param name="quantity">Quantity.</param>
        /// <param name="quantityRefunded">Quantity refunded on this item (read only except refund operation).</param>
        /// <param name="quickbooksClass">QuickBooks class.</param>
        /// <param name="shipSeparately">True if this item ships in a separate box.</param>
        /// <param name="shippedByUser">Shipped by user.</param>
        /// <param name="shippedDts">Date/time that this item was marked shipped.</param>
        /// <param name="shippingStatus">Shipping status for this item.  This is the replacement for the old order level shipping status..</param>
        /// <param name="specialProductType">Special product type (USPS Media Mail).</param>
        /// <param name="tags">Tags.</param>
        /// <param name="taxFree">True if the item is tax free.</param>
        /// <param name="taxProductType">Type of product for tax purposes (self or UltraCart Managed taxes).</param>
        /// <param name="taxableCost">taxableCost.</param>
        /// <param name="totalCostWithDiscount">totalCostWithDiscount.</param>
        /// <param name="totalRefunded">totalRefunded.</param>
        /// <param name="transmittedToDistributionCenterDts">Date/time that this item was transmitted to the distribution center.</param>
        /// <param name="unitCostWithDiscount">unitCostWithDiscount.</param>
        /// <param name="upsell">True if this item was added to the order as part of an upsell.</param>
        /// <param name="weight">weight.</param>
        /// <param name="width">width.</param>
        public OrderItem(string accountingCode = default(string), List<string> activationCodes = default(List<string>), Currency arbitraryUnitCost = default(Currency), string autoOrderLastRebillDts = default(string), string autoOrderSchedule = default(string), string barcode = default(string), string channelPartnerItemId = default(string), decimal? cogs = default(decimal?), decimal? componentUnitValue = default(decimal?), Currency cost = default(Currency), string countryCodeOfOrigin = default(string), string customsDescription = default(string), string description = default(string), Currency discount = default(Currency), decimal? discountQuantity = default(decimal?), Weight discountShippingWeight = default(Weight), string distributionCenterCode = default(string), OrderItemEdi edi = default(OrderItemEdi), bool? excludeCoupon = default(bool?), bool? freeShipping = default(bool?), bool? hazmat = default(bool?), Distance height = default(Distance), int? itemIndex = default(int?), int? itemReferenceOid = default(int?), bool? kit = default(bool?), bool? kitComponent = default(bool?), Distance length = default(Distance), string manufacturerSku = default(string), int? maxDaysTimeInTransit = default(int?), string merchantItemId = default(string), string mixAndMatchGroupName = default(string), int? mixAndMatchGroupOid = default(int?), bool? noShippingDiscount = default(bool?), List<OrderItemOption> options = default(List<OrderItemOption>), string packedByUser = default(string), int? parentItemIndex = default(int?), string parentMerchantItemId = default(string), string perishableClass = default(string), string pricingTierName = default(string), List<OrderItemProperty> properties = default(List<OrderItemProperty>), decimal? quantity = default(decimal?), decimal? quantityRefunded = default(decimal?), string quickbooksClass = default(string), bool? shipSeparately = default(bool?), string shippedByUser = default(string), string shippedDts = default(string), string shippingStatus = default(string), string specialProductType = default(string), List<OrderItemTag> tags = default(List<OrderItemTag>), bool? taxFree = default(bool?), TaxProductTypeEnum? taxProductType = default(TaxProductTypeEnum?), Currency taxableCost = default(Currency), Currency totalCostWithDiscount = default(Currency), Currency totalRefunded = default(Currency), string transmittedToDistributionCenterDts = default(string), Currency unitCostWithDiscount = default(Currency), bool? upsell = default(bool?), Weight weight = default(Weight), Distance width = default(Distance))
        {
            this.AccountingCode = accountingCode;
            this.ActivationCodes = activationCodes;
            this.ArbitraryUnitCost = arbitraryUnitCost;
            this.AutoOrderLastRebillDts = autoOrderLastRebillDts;
            this.AutoOrderSchedule = autoOrderSchedule;
            this.Barcode = barcode;
            this.ChannelPartnerItemId = channelPartnerItemId;
            this.Cogs = cogs;
            this.ComponentUnitValue = componentUnitValue;
            this.Cost = cost;
            this.CountryCodeOfOrigin = countryCodeOfOrigin;
            this.CustomsDescription = customsDescription;
            this.Description = description;
            this.Discount = discount;
            this.DiscountQuantity = discountQuantity;
            this.DiscountShippingWeight = discountShippingWeight;
            this.DistributionCenterCode = distributionCenterCode;
            this.Edi = edi;
            this.ExcludeCoupon = excludeCoupon;
            this.FreeShipping = freeShipping;
            this.Hazmat = hazmat;
            this.Height = height;
            this.ItemIndex = itemIndex;
            this.ItemReferenceOid = itemReferenceOid;
            this.Kit = kit;
            this.KitComponent = kitComponent;
            this.Length = length;
            this.ManufacturerSku = manufacturerSku;
            this.MaxDaysTimeInTransit = maxDaysTimeInTransit;
            this.MerchantItemId = merchantItemId;
            this.MixAndMatchGroupName = mixAndMatchGroupName;
            this.MixAndMatchGroupOid = mixAndMatchGroupOid;
            this.NoShippingDiscount = noShippingDiscount;
            this.Options = options;
            this.PackedByUser = packedByUser;
            this.ParentItemIndex = parentItemIndex;
            this.ParentMerchantItemId = parentMerchantItemId;
            this.PerishableClass = perishableClass;
            this.PricingTierName = pricingTierName;
            this.Properties = properties;
            this.Quantity = quantity;
            this.QuantityRefunded = quantityRefunded;
            this.QuickbooksClass = quickbooksClass;
            this.ShipSeparately = shipSeparately;
            this.ShippedByUser = shippedByUser;
            this.ShippedDts = shippedDts;
            this.ShippingStatus = shippingStatus;
            this.SpecialProductType = specialProductType;
            this.Tags = tags;
            this.TaxFree = taxFree;
            this.TaxProductType = taxProductType;
            this.TaxableCost = taxableCost;
            this.TotalCostWithDiscount = totalCostWithDiscount;
            this.TotalRefunded = totalRefunded;
            this.TransmittedToDistributionCenterDts = transmittedToDistributionCenterDts;
            this.UnitCostWithDiscount = unitCostWithDiscount;
            this.Upsell = upsell;
            this.Weight = weight;
            this.Width = width;
        }
        
        /// <summary>
        /// QuickBooks code
        /// </summary>
        /// <value>QuickBooks code</value>
        [DataMember(Name="accounting_code", EmitDefaultValue=false)]
        public string AccountingCode { get; set; }

        /// <summary>
        /// Activation codes assigned to this item
        /// </summary>
        /// <value>Activation codes assigned to this item</value>
        [DataMember(Name="activation_codes", EmitDefaultValue=false)]
        public List<string> ActivationCodes { get; set; }

        /// <summary>
        /// Gets or Sets ArbitraryUnitCost
        /// </summary>
        [DataMember(Name="arbitrary_unit_cost", EmitDefaultValue=false)]
        public Currency ArbitraryUnitCost { get; set; }

        /// <summary>
        /// Date/time of the last rebill, used only during order insert to help project future rebills
        /// </summary>
        /// <value>Date/time of the last rebill, used only during order insert to help project future rebills</value>
        [DataMember(Name="auto_order_last_rebill_dts", EmitDefaultValue=false)]
        public string AutoOrderLastRebillDts { get; set; }

        /// <summary>
        /// Auto order schedule, used only during inserts supplying the recurring schedule
        /// </summary>
        /// <value>Auto order schedule, used only during inserts supplying the recurring schedule</value>
        [DataMember(Name="auto_order_schedule", EmitDefaultValue=false)]
        public string AutoOrderSchedule { get; set; }

        /// <summary>
        /// Barcode
        /// </summary>
        /// <value>Barcode</value>
        [DataMember(Name="barcode", EmitDefaultValue=false)]
        public string Barcode { get; set; }

        /// <summary>
        /// Channel partner item id if this order came through a channel partner and the channel partner item id was mapped to an internal item id
        /// </summary>
        /// <value>Channel partner item id if this order came through a channel partner and the channel partner item id was mapped to an internal item id</value>
        [DataMember(Name="channel_partner_item_id", EmitDefaultValue=false)]
        public string ChannelPartnerItemId { get; set; }

        /// <summary>
        /// Cost of goods sold
        /// </summary>
        /// <value>Cost of goods sold</value>
        [DataMember(Name="cogs", EmitDefaultValue=false)]
        public decimal? Cogs { get; set; }

        /// <summary>
        /// Value of the kit component item
        /// </summary>
        /// <value>Value of the kit component item</value>
        [DataMember(Name="component_unit_value", EmitDefaultValue=false)]
        public decimal? ComponentUnitValue { get; set; }

        /// <summary>
        /// Gets or Sets Cost
        /// </summary>
        [DataMember(Name="cost", EmitDefaultValue=false)]
        public Currency Cost { get; set; }

        /// <summary>
        /// Country of origin (ISO-3166 two letter code)
        /// </summary>
        /// <value>Country of origin (ISO-3166 two letter code)</value>
        [DataMember(Name="country_code_of_origin", EmitDefaultValue=false)]
        public string CountryCodeOfOrigin { get; set; }

        /// <summary>
        /// Customs description
        /// </summary>
        /// <value>Customs description</value>
        [DataMember(Name="customs_description", EmitDefaultValue=false)]
        public string CustomsDescription { get; set; }

        /// <summary>
        /// Description
        /// </summary>
        /// <value>Description</value>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }

        /// <summary>
        /// Gets or Sets Discount
        /// </summary>
        [DataMember(Name="discount", EmitDefaultValue=false)]
        public Currency Discount { get; set; }

        /// <summary>
        /// Discount quantity
        /// </summary>
        /// <value>Discount quantity</value>
        [DataMember(Name="discount_quantity", EmitDefaultValue=false)]
        public decimal? DiscountQuantity { get; set; }

        /// <summary>
        /// Gets or Sets DiscountShippingWeight
        /// </summary>
        [DataMember(Name="discount_shipping_weight", EmitDefaultValue=false)]
        public Weight DiscountShippingWeight { get; set; }

        /// <summary>
        /// Distribution center code responsible for shipping this item
        /// </summary>
        /// <value>Distribution center code responsible for shipping this item</value>
        [DataMember(Name="distribution_center_code", EmitDefaultValue=false)]
        public string DistributionCenterCode { get; set; }

        /// <summary>
        /// Gets or Sets Edi
        /// </summary>
        [DataMember(Name="edi", EmitDefaultValue=false)]
        public OrderItemEdi Edi { get; set; }

        /// <summary>
        /// True if this item is excluded from coupons
        /// </summary>
        /// <value>True if this item is excluded from coupons</value>
        [DataMember(Name="exclude_coupon", EmitDefaultValue=false)]
        public bool? ExcludeCoupon { get; set; }

        /// <summary>
        /// True if the item receives free shipping
        /// </summary>
        /// <value>True if the item receives free shipping</value>
        [DataMember(Name="free_shipping", EmitDefaultValue=false)]
        public bool? FreeShipping { get; set; }

        /// <summary>
        /// Hazardous materials indicator
        /// </summary>
        /// <value>Hazardous materials indicator</value>
        [DataMember(Name="hazmat", EmitDefaultValue=false)]
        public bool? Hazmat { get; set; }

        /// <summary>
        /// Gets or Sets Height
        /// </summary>
        [DataMember(Name="height", EmitDefaultValue=false)]
        public Distance Height { get; set; }

        /// <summary>
        /// Index of the item on the order (one based index)
        /// </summary>
        /// <value>Index of the item on the order (one based index)</value>
        [DataMember(Name="item_index", EmitDefaultValue=false)]
        public int? ItemIndex { get; set; }

        /// <summary>
        /// Item reference object identifier used to linked to auto order item record
        /// </summary>
        /// <value>Item reference object identifier used to linked to auto order item record</value>
        [DataMember(Name="item_reference_oid", EmitDefaultValue=false)]
        public int? ItemReferenceOid { get; set; }

        /// <summary>
        /// True if this item is a kit
        /// </summary>
        /// <value>True if this item is a kit</value>
        [DataMember(Name="kit", EmitDefaultValue=false)]
        public bool? Kit { get; set; }

        /// <summary>
        /// True if this item is a kit component
        /// </summary>
        /// <value>True if this item is a kit component</value>
        [DataMember(Name="kit_component", EmitDefaultValue=false)]
        public bool? KitComponent { get; set; }

        /// <summary>
        /// Gets or Sets Length
        /// </summary>
        [DataMember(Name="length", EmitDefaultValue=false)]
        public Distance Length { get; set; }

        /// <summary>
        /// Manufacturer SKU
        /// </summary>
        /// <value>Manufacturer SKU</value>
        [DataMember(Name="manufacturer_sku", EmitDefaultValue=false)]
        public string ManufacturerSku { get; set; }

        /// <summary>
        /// Maximum days that the item can be in transit before spoilage (perishable products)
        /// </summary>
        /// <value>Maximum days that the item can be in transit before spoilage (perishable products)</value>
        [DataMember(Name="max_days_time_in_transit", EmitDefaultValue=false)]
        public int? MaxDaysTimeInTransit { get; set; }

        /// <summary>
        /// Item ID
        /// </summary>
        /// <value>Item ID</value>
        [DataMember(Name="merchant_item_id", EmitDefaultValue=false)]
        public string MerchantItemId { get; set; }

        /// <summary>
        /// Mix and match group name
        /// </summary>
        /// <value>Mix and match group name</value>
        [DataMember(Name="mix_and_match_group_name", EmitDefaultValue=false)]
        public string MixAndMatchGroupName { get; set; }

        /// <summary>
        /// Mix and match group object identifier
        /// </summary>
        /// <value>Mix and match group object identifier</value>
        [DataMember(Name="mix_and_match_group_oid", EmitDefaultValue=false)]
        public int? MixAndMatchGroupOid { get; set; }

        /// <summary>
        /// True if this item is excluded from shipping discounts
        /// </summary>
        /// <value>True if this item is excluded from shipping discounts</value>
        [DataMember(Name="no_shipping_discount", EmitDefaultValue=false)]
        public bool? NoShippingDiscount { get; set; }

        /// <summary>
        /// Options
        /// </summary>
        /// <value>Options</value>
        [DataMember(Name="options", EmitDefaultValue=false)]
        public List<OrderItemOption> Options { get; set; }

        /// <summary>
        /// Packed by user
        /// </summary>
        /// <value>Packed by user</value>
        [DataMember(Name="packed_by_user", EmitDefaultValue=false)]
        public string PackedByUser { get; set; }

        /// <summary>
        /// If this item is a kit component, this is the item index of the parent item (kit)
        /// </summary>
        /// <value>If this item is a kit component, this is the item index of the parent item (kit)</value>
        [DataMember(Name="parent_item_index", EmitDefaultValue=false)]
        public int? ParentItemIndex { get; set; }

        /// <summary>
        /// If this item is a kit component, this is the item id of the parent item (kit)
        /// </summary>
        /// <value>If this item is a kit component, this is the item id of the parent item (kit)</value>
        [DataMember(Name="parent_merchant_item_id", EmitDefaultValue=false)]
        public string ParentMerchantItemId { get; set; }

        /// <summary>
        /// Perishable class of the item
        /// </summary>
        /// <value>Perishable class of the item</value>
        [DataMember(Name="perishable_class", EmitDefaultValue=false)]
        public string PerishableClass { get; set; }

        /// <summary>
        /// Pricing tier that granted the particular price for this item if the customer profile had pricing tiers assigned
        /// </summary>
        /// <value>Pricing tier that granted the particular price for this item if the customer profile had pricing tiers assigned</value>
        [DataMember(Name="pricing_tier_name", EmitDefaultValue=false)]
        public string PricingTierName { get; set; }

        /// <summary>
        /// Properties
        /// </summary>
        /// <value>Properties</value>
        [DataMember(Name="properties", EmitDefaultValue=false)]
        public List<OrderItemProperty> Properties { get; set; }

        /// <summary>
        /// Quantity
        /// </summary>
        /// <value>Quantity</value>
        [DataMember(Name="quantity", EmitDefaultValue=false)]
        public decimal? Quantity { get; set; }

        /// <summary>
        /// Quantity refunded on this item (read only except refund operation)
        /// </summary>
        /// <value>Quantity refunded on this item (read only except refund operation)</value>
        [DataMember(Name="quantity_refunded", EmitDefaultValue=false)]
        public decimal? QuantityRefunded { get; set; }

        /// <summary>
        /// QuickBooks class
        /// </summary>
        /// <value>QuickBooks class</value>
        [DataMember(Name="quickbooks_class", EmitDefaultValue=false)]
        public string QuickbooksClass { get; set; }

        /// <summary>
        /// True if this item ships in a separate box
        /// </summary>
        /// <value>True if this item ships in a separate box</value>
        [DataMember(Name="ship_separately", EmitDefaultValue=false)]
        public bool? ShipSeparately { get; set; }

        /// <summary>
        /// Shipped by user
        /// </summary>
        /// <value>Shipped by user</value>
        [DataMember(Name="shipped_by_user", EmitDefaultValue=false)]
        public string ShippedByUser { get; set; }

        /// <summary>
        /// Date/time that this item was marked shipped
        /// </summary>
        /// <value>Date/time that this item was marked shipped</value>
        [DataMember(Name="shipped_dts", EmitDefaultValue=false)]
        public string ShippedDts { get; set; }

        /// <summary>
        /// Shipping status for this item.  This is the replacement for the old order level shipping status.
        /// </summary>
        /// <value>Shipping status for this item.  This is the replacement for the old order level shipping status.</value>
        [DataMember(Name="shipping_status", EmitDefaultValue=false)]
        public string ShippingStatus { get; set; }

        /// <summary>
        /// Special product type (USPS Media Mail)
        /// </summary>
        /// <value>Special product type (USPS Media Mail)</value>
        [DataMember(Name="special_product_type", EmitDefaultValue=false)]
        public string SpecialProductType { get; set; }

        /// <summary>
        /// Tags
        /// </summary>
        /// <value>Tags</value>
        [DataMember(Name="tags", EmitDefaultValue=false)]
        public List<OrderItemTag> Tags { get; set; }

        /// <summary>
        /// True if the item is tax free
        /// </summary>
        /// <value>True if the item is tax free</value>
        [DataMember(Name="tax_free", EmitDefaultValue=false)]
        public bool? TaxFree { get; set; }


        /// <summary>
        /// Gets or Sets TaxableCost
        /// </summary>
        [DataMember(Name="taxable_cost", EmitDefaultValue=false)]
        public Currency TaxableCost { get; set; }

        /// <summary>
        /// Gets or Sets TotalCostWithDiscount
        /// </summary>
        [DataMember(Name="total_cost_with_discount", EmitDefaultValue=false)]
        public Currency TotalCostWithDiscount { get; set; }

        /// <summary>
        /// Gets or Sets TotalRefunded
        /// </summary>
        [DataMember(Name="total_refunded", EmitDefaultValue=false)]
        public Currency TotalRefunded { get; set; }

        /// <summary>
        /// Date/time that this item was transmitted to the distribution center
        /// </summary>
        /// <value>Date/time that this item was transmitted to the distribution center</value>
        [DataMember(Name="transmitted_to_distribution_center_dts", EmitDefaultValue=false)]
        public string TransmittedToDistributionCenterDts { get; set; }

        /// <summary>
        /// Gets or Sets UnitCostWithDiscount
        /// </summary>
        [DataMember(Name="unit_cost_with_discount", EmitDefaultValue=false)]
        public Currency UnitCostWithDiscount { get; set; }

        /// <summary>
        /// True if this item was added to the order as part of an upsell
        /// </summary>
        /// <value>True if this item was added to the order as part of an upsell</value>
        [DataMember(Name="upsell", EmitDefaultValue=false)]
        public bool? Upsell { get; set; }

        /// <summary>
        /// Gets or Sets Weight
        /// </summary>
        [DataMember(Name="weight", EmitDefaultValue=false)]
        public Weight Weight { get; set; }

        /// <summary>
        /// Gets or Sets Width
        /// </summary>
        [DataMember(Name="width", EmitDefaultValue=false)]
        public Distance Width { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class OrderItem {\n");
            sb.Append("  AccountingCode: ").Append(AccountingCode).Append("\n");
            sb.Append("  ActivationCodes: ").Append(ActivationCodes).Append("\n");
            sb.Append("  ArbitraryUnitCost: ").Append(ArbitraryUnitCost).Append("\n");
            sb.Append("  AutoOrderLastRebillDts: ").Append(AutoOrderLastRebillDts).Append("\n");
            sb.Append("  AutoOrderSchedule: ").Append(AutoOrderSchedule).Append("\n");
            sb.Append("  Barcode: ").Append(Barcode).Append("\n");
            sb.Append("  ChannelPartnerItemId: ").Append(ChannelPartnerItemId).Append("\n");
            sb.Append("  Cogs: ").Append(Cogs).Append("\n");
            sb.Append("  ComponentUnitValue: ").Append(ComponentUnitValue).Append("\n");
            sb.Append("  Cost: ").Append(Cost).Append("\n");
            sb.Append("  CountryCodeOfOrigin: ").Append(CountryCodeOfOrigin).Append("\n");
            sb.Append("  CustomsDescription: ").Append(CustomsDescription).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Discount: ").Append(Discount).Append("\n");
            sb.Append("  DiscountQuantity: ").Append(DiscountQuantity).Append("\n");
            sb.Append("  DiscountShippingWeight: ").Append(DiscountShippingWeight).Append("\n");
            sb.Append("  DistributionCenterCode: ").Append(DistributionCenterCode).Append("\n");
            sb.Append("  Edi: ").Append(Edi).Append("\n");
            sb.Append("  ExcludeCoupon: ").Append(ExcludeCoupon).Append("\n");
            sb.Append("  FreeShipping: ").Append(FreeShipping).Append("\n");
            sb.Append("  Hazmat: ").Append(Hazmat).Append("\n");
            sb.Append("  Height: ").Append(Height).Append("\n");
            sb.Append("  ItemIndex: ").Append(ItemIndex).Append("\n");
            sb.Append("  ItemReferenceOid: ").Append(ItemReferenceOid).Append("\n");
            sb.Append("  Kit: ").Append(Kit).Append("\n");
            sb.Append("  KitComponent: ").Append(KitComponent).Append("\n");
            sb.Append("  Length: ").Append(Length).Append("\n");
            sb.Append("  ManufacturerSku: ").Append(ManufacturerSku).Append("\n");
            sb.Append("  MaxDaysTimeInTransit: ").Append(MaxDaysTimeInTransit).Append("\n");
            sb.Append("  MerchantItemId: ").Append(MerchantItemId).Append("\n");
            sb.Append("  MixAndMatchGroupName: ").Append(MixAndMatchGroupName).Append("\n");
            sb.Append("  MixAndMatchGroupOid: ").Append(MixAndMatchGroupOid).Append("\n");
            sb.Append("  NoShippingDiscount: ").Append(NoShippingDiscount).Append("\n");
            sb.Append("  Options: ").Append(Options).Append("\n");
            sb.Append("  PackedByUser: ").Append(PackedByUser).Append("\n");
            sb.Append("  ParentItemIndex: ").Append(ParentItemIndex).Append("\n");
            sb.Append("  ParentMerchantItemId: ").Append(ParentMerchantItemId).Append("\n");
            sb.Append("  PerishableClass: ").Append(PerishableClass).Append("\n");
            sb.Append("  PricingTierName: ").Append(PricingTierName).Append("\n");
            sb.Append("  Properties: ").Append(Properties).Append("\n");
            sb.Append("  Quantity: ").Append(Quantity).Append("\n");
            sb.Append("  QuantityRefunded: ").Append(QuantityRefunded).Append("\n");
            sb.Append("  QuickbooksClass: ").Append(QuickbooksClass).Append("\n");
            sb.Append("  ShipSeparately: ").Append(ShipSeparately).Append("\n");
            sb.Append("  ShippedByUser: ").Append(ShippedByUser).Append("\n");
            sb.Append("  ShippedDts: ").Append(ShippedDts).Append("\n");
            sb.Append("  ShippingStatus: ").Append(ShippingStatus).Append("\n");
            sb.Append("  SpecialProductType: ").Append(SpecialProductType).Append("\n");
            sb.Append("  Tags: ").Append(Tags).Append("\n");
            sb.Append("  TaxFree: ").Append(TaxFree).Append("\n");
            sb.Append("  TaxProductType: ").Append(TaxProductType).Append("\n");
            sb.Append("  TaxableCost: ").Append(TaxableCost).Append("\n");
            sb.Append("  TotalCostWithDiscount: ").Append(TotalCostWithDiscount).Append("\n");
            sb.Append("  TotalRefunded: ").Append(TotalRefunded).Append("\n");
            sb.Append("  TransmittedToDistributionCenterDts: ").Append(TransmittedToDistributionCenterDts).Append("\n");
            sb.Append("  UnitCostWithDiscount: ").Append(UnitCostWithDiscount).Append("\n");
            sb.Append("  Upsell: ").Append(Upsell).Append("\n");
            sb.Append("  Weight: ").Append(Weight).Append("\n");
            sb.Append("  Width: ").Append(Width).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as OrderItem);
        }

        /// <summary>
        /// Returns true if OrderItem instances are equal
        /// </summary>
        /// <param name="input">Instance of OrderItem to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(OrderItem input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.AccountingCode == input.AccountingCode ||
                    (this.AccountingCode != null &&
                    this.AccountingCode.Equals(input.AccountingCode))
                ) && 
                (
                    this.ActivationCodes == input.ActivationCodes ||
                    this.ActivationCodes != null &&
                    this.ActivationCodes.SequenceEqual(input.ActivationCodes)
                ) && 
                (
                    this.ArbitraryUnitCost == input.ArbitraryUnitCost ||
                    (this.ArbitraryUnitCost != null &&
                    this.ArbitraryUnitCost.Equals(input.ArbitraryUnitCost))
                ) && 
                (
                    this.AutoOrderLastRebillDts == input.AutoOrderLastRebillDts ||
                    (this.AutoOrderLastRebillDts != null &&
                    this.AutoOrderLastRebillDts.Equals(input.AutoOrderLastRebillDts))
                ) && 
                (
                    this.AutoOrderSchedule == input.AutoOrderSchedule ||
                    (this.AutoOrderSchedule != null &&
                    this.AutoOrderSchedule.Equals(input.AutoOrderSchedule))
                ) && 
                (
                    this.Barcode == input.Barcode ||
                    (this.Barcode != null &&
                    this.Barcode.Equals(input.Barcode))
                ) && 
                (
                    this.ChannelPartnerItemId == input.ChannelPartnerItemId ||
                    (this.ChannelPartnerItemId != null &&
                    this.ChannelPartnerItemId.Equals(input.ChannelPartnerItemId))
                ) && 
                (
                    this.Cogs == input.Cogs ||
                    (this.Cogs != null &&
                    this.Cogs.Equals(input.Cogs))
                ) && 
                (
                    this.ComponentUnitValue == input.ComponentUnitValue ||
                    (this.ComponentUnitValue != null &&
                    this.ComponentUnitValue.Equals(input.ComponentUnitValue))
                ) && 
                (
                    this.Cost == input.Cost ||
                    (this.Cost != null &&
                    this.Cost.Equals(input.Cost))
                ) && 
                (
                    this.CountryCodeOfOrigin == input.CountryCodeOfOrigin ||
                    (this.CountryCodeOfOrigin != null &&
                    this.CountryCodeOfOrigin.Equals(input.CountryCodeOfOrigin))
                ) && 
                (
                    this.CustomsDescription == input.CustomsDescription ||
                    (this.CustomsDescription != null &&
                    this.CustomsDescription.Equals(input.CustomsDescription))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.Discount == input.Discount ||
                    (this.Discount != null &&
                    this.Discount.Equals(input.Discount))
                ) && 
                (
                    this.DiscountQuantity == input.DiscountQuantity ||
                    (this.DiscountQuantity != null &&
                    this.DiscountQuantity.Equals(input.DiscountQuantity))
                ) && 
                (
                    this.DiscountShippingWeight == input.DiscountShippingWeight ||
                    (this.DiscountShippingWeight != null &&
                    this.DiscountShippingWeight.Equals(input.DiscountShippingWeight))
                ) && 
                (
                    this.DistributionCenterCode == input.DistributionCenterCode ||
                    (this.DistributionCenterCode != null &&
                    this.DistributionCenterCode.Equals(input.DistributionCenterCode))
                ) && 
                (
                    this.Edi == input.Edi ||
                    (this.Edi != null &&
                    this.Edi.Equals(input.Edi))
                ) && 
                (
                    this.ExcludeCoupon == input.ExcludeCoupon ||
                    (this.ExcludeCoupon != null &&
                    this.ExcludeCoupon.Equals(input.ExcludeCoupon))
                ) && 
                (
                    this.FreeShipping == input.FreeShipping ||
                    (this.FreeShipping != null &&
                    this.FreeShipping.Equals(input.FreeShipping))
                ) && 
                (
                    this.Hazmat == input.Hazmat ||
                    (this.Hazmat != null &&
                    this.Hazmat.Equals(input.Hazmat))
                ) && 
                (
                    this.Height == input.Height ||
                    (this.Height != null &&
                    this.Height.Equals(input.Height))
                ) && 
                (
                    this.ItemIndex == input.ItemIndex ||
                    (this.ItemIndex != null &&
                    this.ItemIndex.Equals(input.ItemIndex))
                ) && 
                (
                    this.ItemReferenceOid == input.ItemReferenceOid ||
                    (this.ItemReferenceOid != null &&
                    this.ItemReferenceOid.Equals(input.ItemReferenceOid))
                ) && 
                (
                    this.Kit == input.Kit ||
                    (this.Kit != null &&
                    this.Kit.Equals(input.Kit))
                ) && 
                (
                    this.KitComponent == input.KitComponent ||
                    (this.KitComponent != null &&
                    this.KitComponent.Equals(input.KitComponent))
                ) && 
                (
                    this.Length == input.Length ||
                    (this.Length != null &&
                    this.Length.Equals(input.Length))
                ) && 
                (
                    this.ManufacturerSku == input.ManufacturerSku ||
                    (this.ManufacturerSku != null &&
                    this.ManufacturerSku.Equals(input.ManufacturerSku))
                ) && 
                (
                    this.MaxDaysTimeInTransit == input.MaxDaysTimeInTransit ||
                    (this.MaxDaysTimeInTransit != null &&
                    this.MaxDaysTimeInTransit.Equals(input.MaxDaysTimeInTransit))
                ) && 
                (
                    this.MerchantItemId == input.MerchantItemId ||
                    (this.MerchantItemId != null &&
                    this.MerchantItemId.Equals(input.MerchantItemId))
                ) && 
                (
                    this.MixAndMatchGroupName == input.MixAndMatchGroupName ||
                    (this.MixAndMatchGroupName != null &&
                    this.MixAndMatchGroupName.Equals(input.MixAndMatchGroupName))
                ) && 
                (
                    this.MixAndMatchGroupOid == input.MixAndMatchGroupOid ||
                    (this.MixAndMatchGroupOid != null &&
                    this.MixAndMatchGroupOid.Equals(input.MixAndMatchGroupOid))
                ) && 
                (
                    this.NoShippingDiscount == input.NoShippingDiscount ||
                    (this.NoShippingDiscount != null &&
                    this.NoShippingDiscount.Equals(input.NoShippingDiscount))
                ) && 
                (
                    this.Options == input.Options ||
                    this.Options != null &&
                    this.Options.SequenceEqual(input.Options)
                ) && 
                (
                    this.PackedByUser == input.PackedByUser ||
                    (this.PackedByUser != null &&
                    this.PackedByUser.Equals(input.PackedByUser))
                ) && 
                (
                    this.ParentItemIndex == input.ParentItemIndex ||
                    (this.ParentItemIndex != null &&
                    this.ParentItemIndex.Equals(input.ParentItemIndex))
                ) && 
                (
                    this.ParentMerchantItemId == input.ParentMerchantItemId ||
                    (this.ParentMerchantItemId != null &&
                    this.ParentMerchantItemId.Equals(input.ParentMerchantItemId))
                ) && 
                (
                    this.PerishableClass == input.PerishableClass ||
                    (this.PerishableClass != null &&
                    this.PerishableClass.Equals(input.PerishableClass))
                ) && 
                (
                    this.PricingTierName == input.PricingTierName ||
                    (this.PricingTierName != null &&
                    this.PricingTierName.Equals(input.PricingTierName))
                ) && 
                (
                    this.Properties == input.Properties ||
                    this.Properties != null &&
                    this.Properties.SequenceEqual(input.Properties)
                ) && 
                (
                    this.Quantity == input.Quantity ||
                    (this.Quantity != null &&
                    this.Quantity.Equals(input.Quantity))
                ) && 
                (
                    this.QuantityRefunded == input.QuantityRefunded ||
                    (this.QuantityRefunded != null &&
                    this.QuantityRefunded.Equals(input.QuantityRefunded))
                ) && 
                (
                    this.QuickbooksClass == input.QuickbooksClass ||
                    (this.QuickbooksClass != null &&
                    this.QuickbooksClass.Equals(input.QuickbooksClass))
                ) && 
                (
                    this.ShipSeparately == input.ShipSeparately ||
                    (this.ShipSeparately != null &&
                    this.ShipSeparately.Equals(input.ShipSeparately))
                ) && 
                (
                    this.ShippedByUser == input.ShippedByUser ||
                    (this.ShippedByUser != null &&
                    this.ShippedByUser.Equals(input.ShippedByUser))
                ) && 
                (
                    this.ShippedDts == input.ShippedDts ||
                    (this.ShippedDts != null &&
                    this.ShippedDts.Equals(input.ShippedDts))
                ) && 
                (
                    this.ShippingStatus == input.ShippingStatus ||
                    (this.ShippingStatus != null &&
                    this.ShippingStatus.Equals(input.ShippingStatus))
                ) && 
                (
                    this.SpecialProductType == input.SpecialProductType ||
                    (this.SpecialProductType != null &&
                    this.SpecialProductType.Equals(input.SpecialProductType))
                ) && 
                (
                    this.Tags == input.Tags ||
                    this.Tags != null &&
                    this.Tags.SequenceEqual(input.Tags)
                ) && 
                (
                    this.TaxFree == input.TaxFree ||
                    (this.TaxFree != null &&
                    this.TaxFree.Equals(input.TaxFree))
                ) && 
                (
                    this.TaxProductType == input.TaxProductType ||
                    (this.TaxProductType != null &&
                    this.TaxProductType.Equals(input.TaxProductType))
                ) && 
                (
                    this.TaxableCost == input.TaxableCost ||
                    (this.TaxableCost != null &&
                    this.TaxableCost.Equals(input.TaxableCost))
                ) && 
                (
                    this.TotalCostWithDiscount == input.TotalCostWithDiscount ||
                    (this.TotalCostWithDiscount != null &&
                    this.TotalCostWithDiscount.Equals(input.TotalCostWithDiscount))
                ) && 
                (
                    this.TotalRefunded == input.TotalRefunded ||
                    (this.TotalRefunded != null &&
                    this.TotalRefunded.Equals(input.TotalRefunded))
                ) && 
                (
                    this.TransmittedToDistributionCenterDts == input.TransmittedToDistributionCenterDts ||
                    (this.TransmittedToDistributionCenterDts != null &&
                    this.TransmittedToDistributionCenterDts.Equals(input.TransmittedToDistributionCenterDts))
                ) && 
                (
                    this.UnitCostWithDiscount == input.UnitCostWithDiscount ||
                    (this.UnitCostWithDiscount != null &&
                    this.UnitCostWithDiscount.Equals(input.UnitCostWithDiscount))
                ) && 
                (
                    this.Upsell == input.Upsell ||
                    (this.Upsell != null &&
                    this.Upsell.Equals(input.Upsell))
                ) && 
                (
                    this.Weight == input.Weight ||
                    (this.Weight != null &&
                    this.Weight.Equals(input.Weight))
                ) && 
                (
                    this.Width == input.Width ||
                    (this.Width != null &&
                    this.Width.Equals(input.Width))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AccountingCode != null)
                    hashCode = hashCode * 59 + this.AccountingCode.GetHashCode();
                if (this.ActivationCodes != null)
                    hashCode = hashCode * 59 + this.ActivationCodes.GetHashCode();
                if (this.ArbitraryUnitCost != null)
                    hashCode = hashCode * 59 + this.ArbitraryUnitCost.GetHashCode();
                if (this.AutoOrderLastRebillDts != null)
                    hashCode = hashCode * 59 + this.AutoOrderLastRebillDts.GetHashCode();
                if (this.AutoOrderSchedule != null)
                    hashCode = hashCode * 59 + this.AutoOrderSchedule.GetHashCode();
                if (this.Barcode != null)
                    hashCode = hashCode * 59 + this.Barcode.GetHashCode();
                if (this.ChannelPartnerItemId != null)
                    hashCode = hashCode * 59 + this.ChannelPartnerItemId.GetHashCode();
                if (this.Cogs != null)
                    hashCode = hashCode * 59 + this.Cogs.GetHashCode();
                if (this.ComponentUnitValue != null)
                    hashCode = hashCode * 59 + this.ComponentUnitValue.GetHashCode();
                if (this.Cost != null)
                    hashCode = hashCode * 59 + this.Cost.GetHashCode();
                if (this.CountryCodeOfOrigin != null)
                    hashCode = hashCode * 59 + this.CountryCodeOfOrigin.GetHashCode();
                if (this.CustomsDescription != null)
                    hashCode = hashCode * 59 + this.CustomsDescription.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                if (this.Discount != null)
                    hashCode = hashCode * 59 + this.Discount.GetHashCode();
                if (this.DiscountQuantity != null)
                    hashCode = hashCode * 59 + this.DiscountQuantity.GetHashCode();
                if (this.DiscountShippingWeight != null)
                    hashCode = hashCode * 59 + this.DiscountShippingWeight.GetHashCode();
                if (this.DistributionCenterCode != null)
                    hashCode = hashCode * 59 + this.DistributionCenterCode.GetHashCode();
                if (this.Edi != null)
                    hashCode = hashCode * 59 + this.Edi.GetHashCode();
                if (this.ExcludeCoupon != null)
                    hashCode = hashCode * 59 + this.ExcludeCoupon.GetHashCode();
                if (this.FreeShipping != null)
                    hashCode = hashCode * 59 + this.FreeShipping.GetHashCode();
                if (this.Hazmat != null)
                    hashCode = hashCode * 59 + this.Hazmat.GetHashCode();
                if (this.Height != null)
                    hashCode = hashCode * 59 + this.Height.GetHashCode();
                if (this.ItemIndex != null)
                    hashCode = hashCode * 59 + this.ItemIndex.GetHashCode();
                if (this.ItemReferenceOid != null)
                    hashCode = hashCode * 59 + this.ItemReferenceOid.GetHashCode();
                if (this.Kit != null)
                    hashCode = hashCode * 59 + this.Kit.GetHashCode();
                if (this.KitComponent != null)
                    hashCode = hashCode * 59 + this.KitComponent.GetHashCode();
                if (this.Length != null)
                    hashCode = hashCode * 59 + this.Length.GetHashCode();
                if (this.ManufacturerSku != null)
                    hashCode = hashCode * 59 + this.ManufacturerSku.GetHashCode();
                if (this.MaxDaysTimeInTransit != null)
                    hashCode = hashCode * 59 + this.MaxDaysTimeInTransit.GetHashCode();
                if (this.MerchantItemId != null)
                    hashCode = hashCode * 59 + this.MerchantItemId.GetHashCode();
                if (this.MixAndMatchGroupName != null)
                    hashCode = hashCode * 59 + this.MixAndMatchGroupName.GetHashCode();
                if (this.MixAndMatchGroupOid != null)
                    hashCode = hashCode * 59 + this.MixAndMatchGroupOid.GetHashCode();
                if (this.NoShippingDiscount != null)
                    hashCode = hashCode * 59 + this.NoShippingDiscount.GetHashCode();
                if (this.Options != null)
                    hashCode = hashCode * 59 + this.Options.GetHashCode();
                if (this.PackedByUser != null)
                    hashCode = hashCode * 59 + this.PackedByUser.GetHashCode();
                if (this.ParentItemIndex != null)
                    hashCode = hashCode * 59 + this.ParentItemIndex.GetHashCode();
                if (this.ParentMerchantItemId != null)
                    hashCode = hashCode * 59 + this.ParentMerchantItemId.GetHashCode();
                if (this.PerishableClass != null)
                    hashCode = hashCode * 59 + this.PerishableClass.GetHashCode();
                if (this.PricingTierName != null)
                    hashCode = hashCode * 59 + this.PricingTierName.GetHashCode();
                if (this.Properties != null)
                    hashCode = hashCode * 59 + this.Properties.GetHashCode();
                if (this.Quantity != null)
                    hashCode = hashCode * 59 + this.Quantity.GetHashCode();
                if (this.QuantityRefunded != null)
                    hashCode = hashCode * 59 + this.QuantityRefunded.GetHashCode();
                if (this.QuickbooksClass != null)
                    hashCode = hashCode * 59 + this.QuickbooksClass.GetHashCode();
                if (this.ShipSeparately != null)
                    hashCode = hashCode * 59 + this.ShipSeparately.GetHashCode();
                if (this.ShippedByUser != null)
                    hashCode = hashCode * 59 + this.ShippedByUser.GetHashCode();
                if (this.ShippedDts != null)
                    hashCode = hashCode * 59 + this.ShippedDts.GetHashCode();
                if (this.ShippingStatus != null)
                    hashCode = hashCode * 59 + this.ShippingStatus.GetHashCode();
                if (this.SpecialProductType != null)
                    hashCode = hashCode * 59 + this.SpecialProductType.GetHashCode();
                if (this.Tags != null)
                    hashCode = hashCode * 59 + this.Tags.GetHashCode();
                if (this.TaxFree != null)
                    hashCode = hashCode * 59 + this.TaxFree.GetHashCode();
                if (this.TaxProductType != null)
                    hashCode = hashCode * 59 + this.TaxProductType.GetHashCode();
                if (this.TaxableCost != null)
                    hashCode = hashCode * 59 + this.TaxableCost.GetHashCode();
                if (this.TotalCostWithDiscount != null)
                    hashCode = hashCode * 59 + this.TotalCostWithDiscount.GetHashCode();
                if (this.TotalRefunded != null)
                    hashCode = hashCode * 59 + this.TotalRefunded.GetHashCode();
                if (this.TransmittedToDistributionCenterDts != null)
                    hashCode = hashCode * 59 + this.TransmittedToDistributionCenterDts.GetHashCode();
                if (this.UnitCostWithDiscount != null)
                    hashCode = hashCode * 59 + this.UnitCostWithDiscount.GetHashCode();
                if (this.Upsell != null)
                    hashCode = hashCode * 59 + this.Upsell.GetHashCode();
                if (this.Weight != null)
                    hashCode = hashCode * 59 + this.Weight.GetHashCode();
                if (this.Width != null)
                    hashCode = hashCode * 59 + this.Width.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // ChannelPartnerItemId (string) maxLength
            if(this.ChannelPartnerItemId != null && this.ChannelPartnerItemId.Length > 30)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ChannelPartnerItemId, length must be less than 30.", new [] { "ChannelPartnerItemId" });
            }

            // CountryCodeOfOrigin (string) maxLength
            if(this.CountryCodeOfOrigin != null && this.CountryCodeOfOrigin.Length > 2)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for CountryCodeOfOrigin, length must be less than 2.", new [] { "CountryCodeOfOrigin" });
            }

            // Description (string) maxLength
            if(this.Description != null && this.Description.Length > 2000)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Description, length must be less than 2000.", new [] { "Description" });
            }

            // MerchantItemId (string) maxLength
            if(this.MerchantItemId != null && this.MerchantItemId.Length > 20)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for MerchantItemId, length must be less than 20.", new [] { "MerchantItemId" });
            }

            // ParentMerchantItemId (string) maxLength
            if(this.ParentMerchantItemId != null && this.ParentMerchantItemId.Length > 20)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ParentMerchantItemId, length must be less than 20.", new [] { "ParentMerchantItemId" });
            }

            // PerishableClass (string) maxLength
            if(this.PerishableClass != null && this.PerishableClass.Length > 50)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for PerishableClass, length must be less than 50.", new [] { "PerishableClass" });
            }

            // QuickbooksClass (string) maxLength
            if(this.QuickbooksClass != null && this.QuickbooksClass.Length > 31)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for QuickbooksClass, length must be less than 31.", new [] { "QuickbooksClass" });
            }

            yield break;
        }
    }

}
