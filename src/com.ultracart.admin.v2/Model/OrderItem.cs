/* 
 * UltraCart Rest API V2
 *
 * This is the next generation UltraCart REST API...
 *
 * OpenAPI spec version: 2.0.0
 * Contact: support@ultracart.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = com.ultracart.admin.v2.Client.SwaggerDateConverter;

namespace com.ultracart.admin.v2.Model
{
    /// <summary>
    /// OrderItem
    /// </summary>
    [DataContract]
    public partial class OrderItem :  IEquatable<OrderItem>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="OrderItem" /> class.
        /// </summary>
        /// <param name="AccountingCode">QuickBooks code.</param>
        /// <param name="ActivationCodes">Activation codes assigned to this item.</param>
        /// <param name="Barcode">Barcode.</param>
        /// <param name="ChannelPartnerItemId">Channel partner item id if this order came through a channel partner and the channel partner item id was mapped to an internal item id.</param>
        /// <param name="Cogs">Cost of goods sold.</param>
        /// <param name="ComponentUnitValue">Value of the kit component item.</param>
        /// <param name="Cost">Cost.</param>
        /// <param name="CountryCodeOfOrigin">Country of origin (ISO-3166 two letter code).</param>
        /// <param name="CustomsDescription">Customs description.</param>
        /// <param name="Description">Description.</param>
        /// <param name="Discount">Discount.</param>
        /// <param name="DiscountQuantity">Discount quantity.</param>
        /// <param name="DiscountShippingWeight">DiscountShippingWeight.</param>
        /// <param name="DistributionCenterCode">Distribution center code responsible for shipping this item.</param>
        /// <param name="Edi">Edi.</param>
        /// <param name="ExcludeCoupon">True if this item is excluded from coupons.</param>
        /// <param name="FreeShipping">True if the item receives free shipping.</param>
        /// <param name="Hazmat">Hazardous materials indicator.</param>
        /// <param name="Height">Height.</param>
        /// <param name="ItemReferenceOid">Item reference object identifier used to linked to auto order item record.</param>
        /// <param name="Kit">True if this item is a kit.</param>
        /// <param name="KitComponent">True if this item is a kit component.</param>
        /// <param name="Length">Length.</param>
        /// <param name="ManufacturerSku">Manufacturer SKU.</param>
        /// <param name="MaxDaysTimeInTransit">Maximum days that the item can be in transit before spoilage (perishable products).</param>
        /// <param name="MerchantItemId">Item ID.</param>
        /// <param name="MixAndMatchGroupName">Mix and match group name.</param>
        /// <param name="MixAndMatchGroupOid">Mix and match group object identifier.</param>
        /// <param name="NoShippingDiscount">True if this item is excluded from shipping discounts.</param>
        /// <param name="Options">Options.</param>
        /// <param name="PackedByUser">Packed by user.</param>
        /// <param name="PerishableClass">Perishable class of the item.</param>
        /// <param name="PricingTierName">Pricing tier that granted the particular price for this item if the customer profile had pricing tiers assigned.</param>
        /// <param name="Quantity">Quantity.</param>
        /// <param name="QuantityRefunded">Quantity refunded on this item.</param>
        /// <param name="QuickbooksClass">QuickBooks class.</param>
        /// <param name="ShipSeparately">True if this item ships in a separate box.</param>
        /// <param name="ShippedByUser">Shipped by user.</param>
        /// <param name="ShippedDts">Date/time that this item was marked shipped.</param>
        /// <param name="SpecialProductType">Special product type (USPS Media Mail).</param>
        /// <param name="TaxFree">True if the item is tax free.</param>
        /// <param name="TaxableCost">TaxableCost.</param>
        /// <param name="TotalCostWithDiscount">TotalCostWithDiscount.</param>
        /// <param name="TotalRefunded">TotalRefunded.</param>
        /// <param name="TransmittedToDistributionCenterDts">Date/time that this item was transmitted to the distribution center.</param>
        /// <param name="UnitCostWithDiscount">UnitCostWithDiscount.</param>
        /// <param name="Upsell">True if this item was added to the order as part of an upsell.</param>
        /// <param name="Weight">Weight.</param>
        /// <param name="Width">Width.</param>
        public OrderItem(string AccountingCode = default(string), List<string> ActivationCodes = default(List<string>), string Barcode = default(string), string ChannelPartnerItemId = default(string), decimal? Cogs = default(decimal?), decimal? ComponentUnitValue = default(decimal?), Currency Cost = default(Currency), string CountryCodeOfOrigin = default(string), string CustomsDescription = default(string), string Description = default(string), Currency Discount = default(Currency), decimal? DiscountQuantity = default(decimal?), Weight DiscountShippingWeight = default(Weight), string DistributionCenterCode = default(string), OrderItemEdi Edi = default(OrderItemEdi), bool? ExcludeCoupon = default(bool?), bool? FreeShipping = default(bool?), bool? Hazmat = default(bool?), Distance Height = default(Distance), int? ItemReferenceOid = default(int?), bool? Kit = default(bool?), bool? KitComponent = default(bool?), Distance Length = default(Distance), string ManufacturerSku = default(string), int? MaxDaysTimeInTransit = default(int?), string MerchantItemId = default(string), string MixAndMatchGroupName = default(string), int? MixAndMatchGroupOid = default(int?), bool? NoShippingDiscount = default(bool?), List<OrderItemOption> Options = default(List<OrderItemOption>), string PackedByUser = default(string), string PerishableClass = default(string), string PricingTierName = default(string), decimal? Quantity = default(decimal?), decimal? QuantityRefunded = default(decimal?), string QuickbooksClass = default(string), bool? ShipSeparately = default(bool?), string ShippedByUser = default(string), string ShippedDts = default(string), string SpecialProductType = default(string), bool? TaxFree = default(bool?), Currency TaxableCost = default(Currency), Currency TotalCostWithDiscount = default(Currency), Currency TotalRefunded = default(Currency), string TransmittedToDistributionCenterDts = default(string), Currency UnitCostWithDiscount = default(Currency), bool? Upsell = default(bool?), Weight Weight = default(Weight), Distance Width = default(Distance))
        {
            this.AccountingCode = AccountingCode;
            this.ActivationCodes = ActivationCodes;
            this.Barcode = Barcode;
            this.ChannelPartnerItemId = ChannelPartnerItemId;
            this.Cogs = Cogs;
            this.ComponentUnitValue = ComponentUnitValue;
            this.Cost = Cost;
            this.CountryCodeOfOrigin = CountryCodeOfOrigin;
            this.CustomsDescription = CustomsDescription;
            this.Description = Description;
            this.Discount = Discount;
            this.DiscountQuantity = DiscountQuantity;
            this.DiscountShippingWeight = DiscountShippingWeight;
            this.DistributionCenterCode = DistributionCenterCode;
            this.Edi = Edi;
            this.ExcludeCoupon = ExcludeCoupon;
            this.FreeShipping = FreeShipping;
            this.Hazmat = Hazmat;
            this.Height = Height;
            this.ItemReferenceOid = ItemReferenceOid;
            this.Kit = Kit;
            this.KitComponent = KitComponent;
            this.Length = Length;
            this.ManufacturerSku = ManufacturerSku;
            this.MaxDaysTimeInTransit = MaxDaysTimeInTransit;
            this.MerchantItemId = MerchantItemId;
            this.MixAndMatchGroupName = MixAndMatchGroupName;
            this.MixAndMatchGroupOid = MixAndMatchGroupOid;
            this.NoShippingDiscount = NoShippingDiscount;
            this.Options = Options;
            this.PackedByUser = PackedByUser;
            this.PerishableClass = PerishableClass;
            this.PricingTierName = PricingTierName;
            this.Quantity = Quantity;
            this.QuantityRefunded = QuantityRefunded;
            this.QuickbooksClass = QuickbooksClass;
            this.ShipSeparately = ShipSeparately;
            this.ShippedByUser = ShippedByUser;
            this.ShippedDts = ShippedDts;
            this.SpecialProductType = SpecialProductType;
            this.TaxFree = TaxFree;
            this.TaxableCost = TaxableCost;
            this.TotalCostWithDiscount = TotalCostWithDiscount;
            this.TotalRefunded = TotalRefunded;
            this.TransmittedToDistributionCenterDts = TransmittedToDistributionCenterDts;
            this.UnitCostWithDiscount = UnitCostWithDiscount;
            this.Upsell = Upsell;
            this.Weight = Weight;
            this.Width = Width;
        }
        
        /// <summary>
        /// QuickBooks code
        /// </summary>
        /// <value>QuickBooks code</value>
        [DataMember(Name="accounting_code", EmitDefaultValue=false)]
        public string AccountingCode { get; set; }

        /// <summary>
        /// Activation codes assigned to this item
        /// </summary>
        /// <value>Activation codes assigned to this item</value>
        [DataMember(Name="activation_codes", EmitDefaultValue=false)]
        public List<string> ActivationCodes { get; set; }

        /// <summary>
        /// Barcode
        /// </summary>
        /// <value>Barcode</value>
        [DataMember(Name="barcode", EmitDefaultValue=false)]
        public string Barcode { get; set; }

        /// <summary>
        /// Channel partner item id if this order came through a channel partner and the channel partner item id was mapped to an internal item id
        /// </summary>
        /// <value>Channel partner item id if this order came through a channel partner and the channel partner item id was mapped to an internal item id</value>
        [DataMember(Name="channel_partner_item_id", EmitDefaultValue=false)]
        public string ChannelPartnerItemId { get; set; }

        /// <summary>
        /// Cost of goods sold
        /// </summary>
        /// <value>Cost of goods sold</value>
        [DataMember(Name="cogs", EmitDefaultValue=false)]
        public decimal? Cogs { get; set; }

        /// <summary>
        /// Value of the kit component item
        /// </summary>
        /// <value>Value of the kit component item</value>
        [DataMember(Name="component_unit_value", EmitDefaultValue=false)]
        public decimal? ComponentUnitValue { get; set; }

        /// <summary>
        /// Gets or Sets Cost
        /// </summary>
        [DataMember(Name="cost", EmitDefaultValue=false)]
        public Currency Cost { get; set; }

        /// <summary>
        /// Country of origin (ISO-3166 two letter code)
        /// </summary>
        /// <value>Country of origin (ISO-3166 two letter code)</value>
        [DataMember(Name="country_code_of_origin", EmitDefaultValue=false)]
        public string CountryCodeOfOrigin { get; set; }

        /// <summary>
        /// Customs description
        /// </summary>
        /// <value>Customs description</value>
        [DataMember(Name="customs_description", EmitDefaultValue=false)]
        public string CustomsDescription { get; set; }

        /// <summary>
        /// Description
        /// </summary>
        /// <value>Description</value>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }

        /// <summary>
        /// Gets or Sets Discount
        /// </summary>
        [DataMember(Name="discount", EmitDefaultValue=false)]
        public Currency Discount { get; set; }

        /// <summary>
        /// Discount quantity
        /// </summary>
        /// <value>Discount quantity</value>
        [DataMember(Name="discount_quantity", EmitDefaultValue=false)]
        public decimal? DiscountQuantity { get; set; }

        /// <summary>
        /// Gets or Sets DiscountShippingWeight
        /// </summary>
        [DataMember(Name="discount_shipping_weight", EmitDefaultValue=false)]
        public Weight DiscountShippingWeight { get; set; }

        /// <summary>
        /// Distribution center code responsible for shipping this item
        /// </summary>
        /// <value>Distribution center code responsible for shipping this item</value>
        [DataMember(Name="distribution_center_code", EmitDefaultValue=false)]
        public string DistributionCenterCode { get; set; }

        /// <summary>
        /// Gets or Sets Edi
        /// </summary>
        [DataMember(Name="edi", EmitDefaultValue=false)]
        public OrderItemEdi Edi { get; set; }

        /// <summary>
        /// True if this item is excluded from coupons
        /// </summary>
        /// <value>True if this item is excluded from coupons</value>
        [DataMember(Name="exclude_coupon", EmitDefaultValue=false)]
        public bool? ExcludeCoupon { get; set; }

        /// <summary>
        /// True if the item receives free shipping
        /// </summary>
        /// <value>True if the item receives free shipping</value>
        [DataMember(Name="free_shipping", EmitDefaultValue=false)]
        public bool? FreeShipping { get; set; }

        /// <summary>
        /// Hazardous materials indicator
        /// </summary>
        /// <value>Hazardous materials indicator</value>
        [DataMember(Name="hazmat", EmitDefaultValue=false)]
        public bool? Hazmat { get; set; }

        /// <summary>
        /// Gets or Sets Height
        /// </summary>
        [DataMember(Name="height", EmitDefaultValue=false)]
        public Distance Height { get; set; }

        /// <summary>
        /// Item reference object identifier used to linked to auto order item record
        /// </summary>
        /// <value>Item reference object identifier used to linked to auto order item record</value>
        [DataMember(Name="item_reference_oid", EmitDefaultValue=false)]
        public int? ItemReferenceOid { get; set; }

        /// <summary>
        /// True if this item is a kit
        /// </summary>
        /// <value>True if this item is a kit</value>
        [DataMember(Name="kit", EmitDefaultValue=false)]
        public bool? Kit { get; set; }

        /// <summary>
        /// True if this item is a kit component
        /// </summary>
        /// <value>True if this item is a kit component</value>
        [DataMember(Name="kit_component", EmitDefaultValue=false)]
        public bool? KitComponent { get; set; }

        /// <summary>
        /// Gets or Sets Length
        /// </summary>
        [DataMember(Name="length", EmitDefaultValue=false)]
        public Distance Length { get; set; }

        /// <summary>
        /// Manufacturer SKU
        /// </summary>
        /// <value>Manufacturer SKU</value>
        [DataMember(Name="manufacturer_sku", EmitDefaultValue=false)]
        public string ManufacturerSku { get; set; }

        /// <summary>
        /// Maximum days that the item can be in transit before spoilage (perishable products)
        /// </summary>
        /// <value>Maximum days that the item can be in transit before spoilage (perishable products)</value>
        [DataMember(Name="max_days_time_in_transit", EmitDefaultValue=false)]
        public int? MaxDaysTimeInTransit { get; set; }

        /// <summary>
        /// Item ID
        /// </summary>
        /// <value>Item ID</value>
        [DataMember(Name="merchant_item_id", EmitDefaultValue=false)]
        public string MerchantItemId { get; set; }

        /// <summary>
        /// Mix and match group name
        /// </summary>
        /// <value>Mix and match group name</value>
        [DataMember(Name="mix_and_match_group_name", EmitDefaultValue=false)]
        public string MixAndMatchGroupName { get; set; }

        /// <summary>
        /// Mix and match group object identifier
        /// </summary>
        /// <value>Mix and match group object identifier</value>
        [DataMember(Name="mix_and_match_group_oid", EmitDefaultValue=false)]
        public int? MixAndMatchGroupOid { get; set; }

        /// <summary>
        /// True if this item is excluded from shipping discounts
        /// </summary>
        /// <value>True if this item is excluded from shipping discounts</value>
        [DataMember(Name="no_shipping_discount", EmitDefaultValue=false)]
        public bool? NoShippingDiscount { get; set; }

        /// <summary>
        /// Options
        /// </summary>
        /// <value>Options</value>
        [DataMember(Name="options", EmitDefaultValue=false)]
        public List<OrderItemOption> Options { get; set; }

        /// <summary>
        /// Packed by user
        /// </summary>
        /// <value>Packed by user</value>
        [DataMember(Name="packed_by_user", EmitDefaultValue=false)]
        public string PackedByUser { get; set; }

        /// <summary>
        /// Perishable class of the item
        /// </summary>
        /// <value>Perishable class of the item</value>
        [DataMember(Name="perishable_class", EmitDefaultValue=false)]
        public string PerishableClass { get; set; }

        /// <summary>
        /// Pricing tier that granted the particular price for this item if the customer profile had pricing tiers assigned
        /// </summary>
        /// <value>Pricing tier that granted the particular price for this item if the customer profile had pricing tiers assigned</value>
        [DataMember(Name="pricing_tier_name", EmitDefaultValue=false)]
        public string PricingTierName { get; set; }

        /// <summary>
        /// Quantity
        /// </summary>
        /// <value>Quantity</value>
        [DataMember(Name="quantity", EmitDefaultValue=false)]
        public decimal? Quantity { get; set; }

        /// <summary>
        /// Quantity refunded on this item
        /// </summary>
        /// <value>Quantity refunded on this item</value>
        [DataMember(Name="quantity_refunded", EmitDefaultValue=false)]
        public decimal? QuantityRefunded { get; set; }

        /// <summary>
        /// QuickBooks class
        /// </summary>
        /// <value>QuickBooks class</value>
        [DataMember(Name="quickbooks_class", EmitDefaultValue=false)]
        public string QuickbooksClass { get; set; }

        /// <summary>
        /// True if this item ships in a separate box
        /// </summary>
        /// <value>True if this item ships in a separate box</value>
        [DataMember(Name="ship_separately", EmitDefaultValue=false)]
        public bool? ShipSeparately { get; set; }

        /// <summary>
        /// Shipped by user
        /// </summary>
        /// <value>Shipped by user</value>
        [DataMember(Name="shipped_by_user", EmitDefaultValue=false)]
        public string ShippedByUser { get; set; }

        /// <summary>
        /// Date/time that this item was marked shipped
        /// </summary>
        /// <value>Date/time that this item was marked shipped</value>
        [DataMember(Name="shipped_dts", EmitDefaultValue=false)]
        public string ShippedDts { get; set; }

        /// <summary>
        /// Special product type (USPS Media Mail)
        /// </summary>
        /// <value>Special product type (USPS Media Mail)</value>
        [DataMember(Name="special_product_type", EmitDefaultValue=false)]
        public string SpecialProductType { get; set; }

        /// <summary>
        /// True if the item is tax free
        /// </summary>
        /// <value>True if the item is tax free</value>
        [DataMember(Name="tax_free", EmitDefaultValue=false)]
        public bool? TaxFree { get; set; }

        /// <summary>
        /// Gets or Sets TaxableCost
        /// </summary>
        [DataMember(Name="taxable_cost", EmitDefaultValue=false)]
        public Currency TaxableCost { get; set; }

        /// <summary>
        /// Gets or Sets TotalCostWithDiscount
        /// </summary>
        [DataMember(Name="total_cost_with_discount", EmitDefaultValue=false)]
        public Currency TotalCostWithDiscount { get; set; }

        /// <summary>
        /// Gets or Sets TotalRefunded
        /// </summary>
        [DataMember(Name="total_refunded", EmitDefaultValue=false)]
        public Currency TotalRefunded { get; set; }

        /// <summary>
        /// Date/time that this item was transmitted to the distribution center
        /// </summary>
        /// <value>Date/time that this item was transmitted to the distribution center</value>
        [DataMember(Name="transmitted_to_distribution_center_dts", EmitDefaultValue=false)]
        public string TransmittedToDistributionCenterDts { get; set; }

        /// <summary>
        /// Gets or Sets UnitCostWithDiscount
        /// </summary>
        [DataMember(Name="unit_cost_with_discount", EmitDefaultValue=false)]
        public Currency UnitCostWithDiscount { get; set; }

        /// <summary>
        /// True if this item was added to the order as part of an upsell
        /// </summary>
        /// <value>True if this item was added to the order as part of an upsell</value>
        [DataMember(Name="upsell", EmitDefaultValue=false)]
        public bool? Upsell { get; set; }

        /// <summary>
        /// Gets or Sets Weight
        /// </summary>
        [DataMember(Name="weight", EmitDefaultValue=false)]
        public Weight Weight { get; set; }

        /// <summary>
        /// Gets or Sets Width
        /// </summary>
        [DataMember(Name="width", EmitDefaultValue=false)]
        public Distance Width { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class OrderItem {\n");
            sb.Append("  AccountingCode: ").Append(AccountingCode).Append("\n");
            sb.Append("  ActivationCodes: ").Append(ActivationCodes).Append("\n");
            sb.Append("  Barcode: ").Append(Barcode).Append("\n");
            sb.Append("  ChannelPartnerItemId: ").Append(ChannelPartnerItemId).Append("\n");
            sb.Append("  Cogs: ").Append(Cogs).Append("\n");
            sb.Append("  ComponentUnitValue: ").Append(ComponentUnitValue).Append("\n");
            sb.Append("  Cost: ").Append(Cost).Append("\n");
            sb.Append("  CountryCodeOfOrigin: ").Append(CountryCodeOfOrigin).Append("\n");
            sb.Append("  CustomsDescription: ").Append(CustomsDescription).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Discount: ").Append(Discount).Append("\n");
            sb.Append("  DiscountQuantity: ").Append(DiscountQuantity).Append("\n");
            sb.Append("  DiscountShippingWeight: ").Append(DiscountShippingWeight).Append("\n");
            sb.Append("  DistributionCenterCode: ").Append(DistributionCenterCode).Append("\n");
            sb.Append("  Edi: ").Append(Edi).Append("\n");
            sb.Append("  ExcludeCoupon: ").Append(ExcludeCoupon).Append("\n");
            sb.Append("  FreeShipping: ").Append(FreeShipping).Append("\n");
            sb.Append("  Hazmat: ").Append(Hazmat).Append("\n");
            sb.Append("  Height: ").Append(Height).Append("\n");
            sb.Append("  ItemReferenceOid: ").Append(ItemReferenceOid).Append("\n");
            sb.Append("  Kit: ").Append(Kit).Append("\n");
            sb.Append("  KitComponent: ").Append(KitComponent).Append("\n");
            sb.Append("  Length: ").Append(Length).Append("\n");
            sb.Append("  ManufacturerSku: ").Append(ManufacturerSku).Append("\n");
            sb.Append("  MaxDaysTimeInTransit: ").Append(MaxDaysTimeInTransit).Append("\n");
            sb.Append("  MerchantItemId: ").Append(MerchantItemId).Append("\n");
            sb.Append("  MixAndMatchGroupName: ").Append(MixAndMatchGroupName).Append("\n");
            sb.Append("  MixAndMatchGroupOid: ").Append(MixAndMatchGroupOid).Append("\n");
            sb.Append("  NoShippingDiscount: ").Append(NoShippingDiscount).Append("\n");
            sb.Append("  Options: ").Append(Options).Append("\n");
            sb.Append("  PackedByUser: ").Append(PackedByUser).Append("\n");
            sb.Append("  PerishableClass: ").Append(PerishableClass).Append("\n");
            sb.Append("  PricingTierName: ").Append(PricingTierName).Append("\n");
            sb.Append("  Quantity: ").Append(Quantity).Append("\n");
            sb.Append("  QuantityRefunded: ").Append(QuantityRefunded).Append("\n");
            sb.Append("  QuickbooksClass: ").Append(QuickbooksClass).Append("\n");
            sb.Append("  ShipSeparately: ").Append(ShipSeparately).Append("\n");
            sb.Append("  ShippedByUser: ").Append(ShippedByUser).Append("\n");
            sb.Append("  ShippedDts: ").Append(ShippedDts).Append("\n");
            sb.Append("  SpecialProductType: ").Append(SpecialProductType).Append("\n");
            sb.Append("  TaxFree: ").Append(TaxFree).Append("\n");
            sb.Append("  TaxableCost: ").Append(TaxableCost).Append("\n");
            sb.Append("  TotalCostWithDiscount: ").Append(TotalCostWithDiscount).Append("\n");
            sb.Append("  TotalRefunded: ").Append(TotalRefunded).Append("\n");
            sb.Append("  TransmittedToDistributionCenterDts: ").Append(TransmittedToDistributionCenterDts).Append("\n");
            sb.Append("  UnitCostWithDiscount: ").Append(UnitCostWithDiscount).Append("\n");
            sb.Append("  Upsell: ").Append(Upsell).Append("\n");
            sb.Append("  Weight: ").Append(Weight).Append("\n");
            sb.Append("  Width: ").Append(Width).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as OrderItem);
        }

        /// <summary>
        /// Returns true if OrderItem instances are equal
        /// </summary>
        /// <param name="other">Instance of OrderItem to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(OrderItem other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.AccountingCode == other.AccountingCode ||
                    this.AccountingCode != null &&
                    this.AccountingCode.Equals(other.AccountingCode)
                ) && 
                (
                    this.ActivationCodes == other.ActivationCodes ||
                    this.ActivationCodes != null &&
                    this.ActivationCodes.SequenceEqual(other.ActivationCodes)
                ) && 
                (
                    this.Barcode == other.Barcode ||
                    this.Barcode != null &&
                    this.Barcode.Equals(other.Barcode)
                ) && 
                (
                    this.ChannelPartnerItemId == other.ChannelPartnerItemId ||
                    this.ChannelPartnerItemId != null &&
                    this.ChannelPartnerItemId.Equals(other.ChannelPartnerItemId)
                ) && 
                (
                    this.Cogs == other.Cogs ||
                    this.Cogs != null &&
                    this.Cogs.Equals(other.Cogs)
                ) && 
                (
                    this.ComponentUnitValue == other.ComponentUnitValue ||
                    this.ComponentUnitValue != null &&
                    this.ComponentUnitValue.Equals(other.ComponentUnitValue)
                ) && 
                (
                    this.Cost == other.Cost ||
                    this.Cost != null &&
                    this.Cost.Equals(other.Cost)
                ) && 
                (
                    this.CountryCodeOfOrigin == other.CountryCodeOfOrigin ||
                    this.CountryCodeOfOrigin != null &&
                    this.CountryCodeOfOrigin.Equals(other.CountryCodeOfOrigin)
                ) && 
                (
                    this.CustomsDescription == other.CustomsDescription ||
                    this.CustomsDescription != null &&
                    this.CustomsDescription.Equals(other.CustomsDescription)
                ) && 
                (
                    this.Description == other.Description ||
                    this.Description != null &&
                    this.Description.Equals(other.Description)
                ) && 
                (
                    this.Discount == other.Discount ||
                    this.Discount != null &&
                    this.Discount.Equals(other.Discount)
                ) && 
                (
                    this.DiscountQuantity == other.DiscountQuantity ||
                    this.DiscountQuantity != null &&
                    this.DiscountQuantity.Equals(other.DiscountQuantity)
                ) && 
                (
                    this.DiscountShippingWeight == other.DiscountShippingWeight ||
                    this.DiscountShippingWeight != null &&
                    this.DiscountShippingWeight.Equals(other.DiscountShippingWeight)
                ) && 
                (
                    this.DistributionCenterCode == other.DistributionCenterCode ||
                    this.DistributionCenterCode != null &&
                    this.DistributionCenterCode.Equals(other.DistributionCenterCode)
                ) && 
                (
                    this.Edi == other.Edi ||
                    this.Edi != null &&
                    this.Edi.Equals(other.Edi)
                ) && 
                (
                    this.ExcludeCoupon == other.ExcludeCoupon ||
                    this.ExcludeCoupon != null &&
                    this.ExcludeCoupon.Equals(other.ExcludeCoupon)
                ) && 
                (
                    this.FreeShipping == other.FreeShipping ||
                    this.FreeShipping != null &&
                    this.FreeShipping.Equals(other.FreeShipping)
                ) && 
                (
                    this.Hazmat == other.Hazmat ||
                    this.Hazmat != null &&
                    this.Hazmat.Equals(other.Hazmat)
                ) && 
                (
                    this.Height == other.Height ||
                    this.Height != null &&
                    this.Height.Equals(other.Height)
                ) && 
                (
                    this.ItemReferenceOid == other.ItemReferenceOid ||
                    this.ItemReferenceOid != null &&
                    this.ItemReferenceOid.Equals(other.ItemReferenceOid)
                ) && 
                (
                    this.Kit == other.Kit ||
                    this.Kit != null &&
                    this.Kit.Equals(other.Kit)
                ) && 
                (
                    this.KitComponent == other.KitComponent ||
                    this.KitComponent != null &&
                    this.KitComponent.Equals(other.KitComponent)
                ) && 
                (
                    this.Length == other.Length ||
                    this.Length != null &&
                    this.Length.Equals(other.Length)
                ) && 
                (
                    this.ManufacturerSku == other.ManufacturerSku ||
                    this.ManufacturerSku != null &&
                    this.ManufacturerSku.Equals(other.ManufacturerSku)
                ) && 
                (
                    this.MaxDaysTimeInTransit == other.MaxDaysTimeInTransit ||
                    this.MaxDaysTimeInTransit != null &&
                    this.MaxDaysTimeInTransit.Equals(other.MaxDaysTimeInTransit)
                ) && 
                (
                    this.MerchantItemId == other.MerchantItemId ||
                    this.MerchantItemId != null &&
                    this.MerchantItemId.Equals(other.MerchantItemId)
                ) && 
                (
                    this.MixAndMatchGroupName == other.MixAndMatchGroupName ||
                    this.MixAndMatchGroupName != null &&
                    this.MixAndMatchGroupName.Equals(other.MixAndMatchGroupName)
                ) && 
                (
                    this.MixAndMatchGroupOid == other.MixAndMatchGroupOid ||
                    this.MixAndMatchGroupOid != null &&
                    this.MixAndMatchGroupOid.Equals(other.MixAndMatchGroupOid)
                ) && 
                (
                    this.NoShippingDiscount == other.NoShippingDiscount ||
                    this.NoShippingDiscount != null &&
                    this.NoShippingDiscount.Equals(other.NoShippingDiscount)
                ) && 
                (
                    this.Options == other.Options ||
                    this.Options != null &&
                    this.Options.SequenceEqual(other.Options)
                ) && 
                (
                    this.PackedByUser == other.PackedByUser ||
                    this.PackedByUser != null &&
                    this.PackedByUser.Equals(other.PackedByUser)
                ) && 
                (
                    this.PerishableClass == other.PerishableClass ||
                    this.PerishableClass != null &&
                    this.PerishableClass.Equals(other.PerishableClass)
                ) && 
                (
                    this.PricingTierName == other.PricingTierName ||
                    this.PricingTierName != null &&
                    this.PricingTierName.Equals(other.PricingTierName)
                ) && 
                (
                    this.Quantity == other.Quantity ||
                    this.Quantity != null &&
                    this.Quantity.Equals(other.Quantity)
                ) && 
                (
                    this.QuantityRefunded == other.QuantityRefunded ||
                    this.QuantityRefunded != null &&
                    this.QuantityRefunded.Equals(other.QuantityRefunded)
                ) && 
                (
                    this.QuickbooksClass == other.QuickbooksClass ||
                    this.QuickbooksClass != null &&
                    this.QuickbooksClass.Equals(other.QuickbooksClass)
                ) && 
                (
                    this.ShipSeparately == other.ShipSeparately ||
                    this.ShipSeparately != null &&
                    this.ShipSeparately.Equals(other.ShipSeparately)
                ) && 
                (
                    this.ShippedByUser == other.ShippedByUser ||
                    this.ShippedByUser != null &&
                    this.ShippedByUser.Equals(other.ShippedByUser)
                ) && 
                (
                    this.ShippedDts == other.ShippedDts ||
                    this.ShippedDts != null &&
                    this.ShippedDts.Equals(other.ShippedDts)
                ) && 
                (
                    this.SpecialProductType == other.SpecialProductType ||
                    this.SpecialProductType != null &&
                    this.SpecialProductType.Equals(other.SpecialProductType)
                ) && 
                (
                    this.TaxFree == other.TaxFree ||
                    this.TaxFree != null &&
                    this.TaxFree.Equals(other.TaxFree)
                ) && 
                (
                    this.TaxableCost == other.TaxableCost ||
                    this.TaxableCost != null &&
                    this.TaxableCost.Equals(other.TaxableCost)
                ) && 
                (
                    this.TotalCostWithDiscount == other.TotalCostWithDiscount ||
                    this.TotalCostWithDiscount != null &&
                    this.TotalCostWithDiscount.Equals(other.TotalCostWithDiscount)
                ) && 
                (
                    this.TotalRefunded == other.TotalRefunded ||
                    this.TotalRefunded != null &&
                    this.TotalRefunded.Equals(other.TotalRefunded)
                ) && 
                (
                    this.TransmittedToDistributionCenterDts == other.TransmittedToDistributionCenterDts ||
                    this.TransmittedToDistributionCenterDts != null &&
                    this.TransmittedToDistributionCenterDts.Equals(other.TransmittedToDistributionCenterDts)
                ) && 
                (
                    this.UnitCostWithDiscount == other.UnitCostWithDiscount ||
                    this.UnitCostWithDiscount != null &&
                    this.UnitCostWithDiscount.Equals(other.UnitCostWithDiscount)
                ) && 
                (
                    this.Upsell == other.Upsell ||
                    this.Upsell != null &&
                    this.Upsell.Equals(other.Upsell)
                ) && 
                (
                    this.Weight == other.Weight ||
                    this.Weight != null &&
                    this.Weight.Equals(other.Weight)
                ) && 
                (
                    this.Width == other.Width ||
                    this.Width != null &&
                    this.Width.Equals(other.Width)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.AccountingCode != null)
                    hash = hash * 59 + this.AccountingCode.GetHashCode();
                if (this.ActivationCodes != null)
                    hash = hash * 59 + this.ActivationCodes.GetHashCode();
                if (this.Barcode != null)
                    hash = hash * 59 + this.Barcode.GetHashCode();
                if (this.ChannelPartnerItemId != null)
                    hash = hash * 59 + this.ChannelPartnerItemId.GetHashCode();
                if (this.Cogs != null)
                    hash = hash * 59 + this.Cogs.GetHashCode();
                if (this.ComponentUnitValue != null)
                    hash = hash * 59 + this.ComponentUnitValue.GetHashCode();
                if (this.Cost != null)
                    hash = hash * 59 + this.Cost.GetHashCode();
                if (this.CountryCodeOfOrigin != null)
                    hash = hash * 59 + this.CountryCodeOfOrigin.GetHashCode();
                if (this.CustomsDescription != null)
                    hash = hash * 59 + this.CustomsDescription.GetHashCode();
                if (this.Description != null)
                    hash = hash * 59 + this.Description.GetHashCode();
                if (this.Discount != null)
                    hash = hash * 59 + this.Discount.GetHashCode();
                if (this.DiscountQuantity != null)
                    hash = hash * 59 + this.DiscountQuantity.GetHashCode();
                if (this.DiscountShippingWeight != null)
                    hash = hash * 59 + this.DiscountShippingWeight.GetHashCode();
                if (this.DistributionCenterCode != null)
                    hash = hash * 59 + this.DistributionCenterCode.GetHashCode();
                if (this.Edi != null)
                    hash = hash * 59 + this.Edi.GetHashCode();
                if (this.ExcludeCoupon != null)
                    hash = hash * 59 + this.ExcludeCoupon.GetHashCode();
                if (this.FreeShipping != null)
                    hash = hash * 59 + this.FreeShipping.GetHashCode();
                if (this.Hazmat != null)
                    hash = hash * 59 + this.Hazmat.GetHashCode();
                if (this.Height != null)
                    hash = hash * 59 + this.Height.GetHashCode();
                if (this.ItemReferenceOid != null)
                    hash = hash * 59 + this.ItemReferenceOid.GetHashCode();
                if (this.Kit != null)
                    hash = hash * 59 + this.Kit.GetHashCode();
                if (this.KitComponent != null)
                    hash = hash * 59 + this.KitComponent.GetHashCode();
                if (this.Length != null)
                    hash = hash * 59 + this.Length.GetHashCode();
                if (this.ManufacturerSku != null)
                    hash = hash * 59 + this.ManufacturerSku.GetHashCode();
                if (this.MaxDaysTimeInTransit != null)
                    hash = hash * 59 + this.MaxDaysTimeInTransit.GetHashCode();
                if (this.MerchantItemId != null)
                    hash = hash * 59 + this.MerchantItemId.GetHashCode();
                if (this.MixAndMatchGroupName != null)
                    hash = hash * 59 + this.MixAndMatchGroupName.GetHashCode();
                if (this.MixAndMatchGroupOid != null)
                    hash = hash * 59 + this.MixAndMatchGroupOid.GetHashCode();
                if (this.NoShippingDiscount != null)
                    hash = hash * 59 + this.NoShippingDiscount.GetHashCode();
                if (this.Options != null)
                    hash = hash * 59 + this.Options.GetHashCode();
                if (this.PackedByUser != null)
                    hash = hash * 59 + this.PackedByUser.GetHashCode();
                if (this.PerishableClass != null)
                    hash = hash * 59 + this.PerishableClass.GetHashCode();
                if (this.PricingTierName != null)
                    hash = hash * 59 + this.PricingTierName.GetHashCode();
                if (this.Quantity != null)
                    hash = hash * 59 + this.Quantity.GetHashCode();
                if (this.QuantityRefunded != null)
                    hash = hash * 59 + this.QuantityRefunded.GetHashCode();
                if (this.QuickbooksClass != null)
                    hash = hash * 59 + this.QuickbooksClass.GetHashCode();
                if (this.ShipSeparately != null)
                    hash = hash * 59 + this.ShipSeparately.GetHashCode();
                if (this.ShippedByUser != null)
                    hash = hash * 59 + this.ShippedByUser.GetHashCode();
                if (this.ShippedDts != null)
                    hash = hash * 59 + this.ShippedDts.GetHashCode();
                if (this.SpecialProductType != null)
                    hash = hash * 59 + this.SpecialProductType.GetHashCode();
                if (this.TaxFree != null)
                    hash = hash * 59 + this.TaxFree.GetHashCode();
                if (this.TaxableCost != null)
                    hash = hash * 59 + this.TaxableCost.GetHashCode();
                if (this.TotalCostWithDiscount != null)
                    hash = hash * 59 + this.TotalCostWithDiscount.GetHashCode();
                if (this.TotalRefunded != null)
                    hash = hash * 59 + this.TotalRefunded.GetHashCode();
                if (this.TransmittedToDistributionCenterDts != null)
                    hash = hash * 59 + this.TransmittedToDistributionCenterDts.GetHashCode();
                if (this.UnitCostWithDiscount != null)
                    hash = hash * 59 + this.UnitCostWithDiscount.GetHashCode();
                if (this.Upsell != null)
                    hash = hash * 59 + this.Upsell.GetHashCode();
                if (this.Weight != null)
                    hash = hash * 59 + this.Weight.GetHashCode();
                if (this.Width != null)
                    hash = hash * 59 + this.Width.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // ChannelPartnerItemId (string) maxLength
            if(this.ChannelPartnerItemId != null && this.ChannelPartnerItemId.Length > 30)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ChannelPartnerItemId, length must be less than 30.", new [] { "ChannelPartnerItemId" });
            }

            // CountryCodeOfOrigin (string) maxLength
            if(this.CountryCodeOfOrigin != null && this.CountryCodeOfOrigin.Length > 2)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for CountryCodeOfOrigin, length must be less than 2.", new [] { "CountryCodeOfOrigin" });
            }

            // Description (string) maxLength
            if(this.Description != null && this.Description.Length > 2000)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Description, length must be less than 2000.", new [] { "Description" });
            }

            // MerchantItemId (string) maxLength
            if(this.MerchantItemId != null && this.MerchantItemId.Length > 20)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for MerchantItemId, length must be less than 20.", new [] { "MerchantItemId" });
            }

            // PerishableClass (string) maxLength
            if(this.PerishableClass != null && this.PerishableClass.Length > 50)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for PerishableClass, length must be less than 50.", new [] { "PerishableClass" });
            }

            // QuickbooksClass (string) maxLength
            if(this.QuickbooksClass != null && this.QuickbooksClass.Length > 31)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for QuickbooksClass, length must be less than 31.", new [] { "QuickbooksClass" });
            }

            yield break;
        }
    }

}
