/* 
 * UltraCart Rest API V2
 *
 * This is the next generation UltraCart REST API...
 *
 * OpenAPI spec version: 2.0.0
 * Contact: support@ultracart.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace com.ultracart.admin.v2.Model
{
    /// <summary>
    /// OrderItemOption
    /// </summary>
    [DataContract]
    public partial class OrderItemOption :  IEquatable<OrderItemOption>
    {
        /// <summary>
        /// How the additional dimensions are applied to the item.
        /// </summary>
        /// <value>How the additional dimensions are applied to the item.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum AdditionalDimensionApplicationEnum
        {
            
            /// <summary>
            /// Enum None for "none"
            /// </summary>
            [EnumMember(Value = "none")]
            None,
            
            /// <summary>
            /// Enum Setitemto for "set item to"
            /// </summary>
            [EnumMember(Value = "set item to")]
            Setitemto,
            
            /// <summary>
            /// Enum Additem for "add item"
            /// </summary>
            [EnumMember(Value = "add item")]
            Additem
        }

        /// <summary>
        /// How the additional dimensions are applied to the item.
        /// </summary>
        /// <value>How the additional dimensions are applied to the item.</value>
        [DataMember(Name="additional_dimension_application", EmitDefaultValue=false)]
        public AdditionalDimensionApplicationEnum? AdditionalDimensionApplication { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="OrderItemOption" /> class.
        /// </summary>
        /// <param name="AdditionalDimensionApplication">How the additional dimensions are applied to the item..</param>
        /// <param name="CostChange">CostChange.</param>
        /// <param name="FileAttachment">FileAttachment.</param>
        /// <param name="Height">Height.</param>
        /// <param name="Hidden">True if this option is hidden from display on the order.</param>
        /// <param name="Label">Label.</param>
        /// <param name="Length">Length.</param>
        /// <param name="OneTimeFee">True if the cost associated with this option is a one time fee or multiplied by the quantity of the item.</param>
        /// <param name="Value">Value.</param>
        /// <param name="WeightChange">WeightChange.</param>
        /// <param name="Width">Width.</param>
        public OrderItemOption(AdditionalDimensionApplicationEnum? AdditionalDimensionApplication = null, Currency CostChange = null, OrderItemOptionFileAttachment FileAttachment = null, Distance Height = null, bool? Hidden = null, string Label = null, Distance Length = null, bool? OneTimeFee = null, string Value = null, Weight WeightChange = null, Distance Width = null)
        {
            this.AdditionalDimensionApplication = AdditionalDimensionApplication;
            this.CostChange = CostChange;
            this.FileAttachment = FileAttachment;
            this.Height = Height;
            this.Hidden = Hidden;
            this.Label = Label;
            this.Length = Length;
            this.OneTimeFee = OneTimeFee;
            this.Value = Value;
            this.WeightChange = WeightChange;
            this.Width = Width;
        }
        
        /// <summary>
        /// Gets or Sets CostChange
        /// </summary>
        [DataMember(Name="cost_change", EmitDefaultValue=false)]
        public Currency CostChange { get; set; }
        /// <summary>
        /// Gets or Sets FileAttachment
        /// </summary>
        [DataMember(Name="file_attachment", EmitDefaultValue=false)]
        public OrderItemOptionFileAttachment FileAttachment { get; set; }
        /// <summary>
        /// Gets or Sets Height
        /// </summary>
        [DataMember(Name="height", EmitDefaultValue=false)]
        public Distance Height { get; set; }
        /// <summary>
        /// True if this option is hidden from display on the order
        /// </summary>
        /// <value>True if this option is hidden from display on the order</value>
        [DataMember(Name="hidden", EmitDefaultValue=false)]
        public bool? Hidden { get; set; }
        /// <summary>
        /// Label
        /// </summary>
        /// <value>Label</value>
        [DataMember(Name="label", EmitDefaultValue=false)]
        public string Label { get; set; }
        /// <summary>
        /// Gets or Sets Length
        /// </summary>
        [DataMember(Name="length", EmitDefaultValue=false)]
        public Distance Length { get; set; }
        /// <summary>
        /// True if the cost associated with this option is a one time fee or multiplied by the quantity of the item
        /// </summary>
        /// <value>True if the cost associated with this option is a one time fee or multiplied by the quantity of the item</value>
        [DataMember(Name="one_time_fee", EmitDefaultValue=false)]
        public bool? OneTimeFee { get; set; }
        /// <summary>
        /// Value
        /// </summary>
        /// <value>Value</value>
        [DataMember(Name="value", EmitDefaultValue=false)]
        public string Value { get; set; }
        /// <summary>
        /// Gets or Sets WeightChange
        /// </summary>
        [DataMember(Name="weight_change", EmitDefaultValue=false)]
        public Weight WeightChange { get; set; }
        /// <summary>
        /// Gets or Sets Width
        /// </summary>
        [DataMember(Name="width", EmitDefaultValue=false)]
        public Distance Width { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class OrderItemOption {\n");
            sb.Append("  AdditionalDimensionApplication: ").Append(AdditionalDimensionApplication).Append("\n");
            sb.Append("  CostChange: ").Append(CostChange).Append("\n");
            sb.Append("  FileAttachment: ").Append(FileAttachment).Append("\n");
            sb.Append("  Height: ").Append(Height).Append("\n");
            sb.Append("  Hidden: ").Append(Hidden).Append("\n");
            sb.Append("  Label: ").Append(Label).Append("\n");
            sb.Append("  Length: ").Append(Length).Append("\n");
            sb.Append("  OneTimeFee: ").Append(OneTimeFee).Append("\n");
            sb.Append("  Value: ").Append(Value).Append("\n");
            sb.Append("  WeightChange: ").Append(WeightChange).Append("\n");
            sb.Append("  Width: ").Append(Width).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as OrderItemOption);
        }

        /// <summary>
        /// Returns true if OrderItemOption instances are equal
        /// </summary>
        /// <param name="other">Instance of OrderItemOption to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(OrderItemOption other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.AdditionalDimensionApplication == other.AdditionalDimensionApplication ||
                    this.AdditionalDimensionApplication != null &&
                    this.AdditionalDimensionApplication.Equals(other.AdditionalDimensionApplication)
                ) && 
                (
                    this.CostChange == other.CostChange ||
                    this.CostChange != null &&
                    this.CostChange.Equals(other.CostChange)
                ) && 
                (
                    this.FileAttachment == other.FileAttachment ||
                    this.FileAttachment != null &&
                    this.FileAttachment.Equals(other.FileAttachment)
                ) && 
                (
                    this.Height == other.Height ||
                    this.Height != null &&
                    this.Height.Equals(other.Height)
                ) && 
                (
                    this.Hidden == other.Hidden ||
                    this.Hidden != null &&
                    this.Hidden.Equals(other.Hidden)
                ) && 
                (
                    this.Label == other.Label ||
                    this.Label != null &&
                    this.Label.Equals(other.Label)
                ) && 
                (
                    this.Length == other.Length ||
                    this.Length != null &&
                    this.Length.Equals(other.Length)
                ) && 
                (
                    this.OneTimeFee == other.OneTimeFee ||
                    this.OneTimeFee != null &&
                    this.OneTimeFee.Equals(other.OneTimeFee)
                ) && 
                (
                    this.Value == other.Value ||
                    this.Value != null &&
                    this.Value.Equals(other.Value)
                ) && 
                (
                    this.WeightChange == other.WeightChange ||
                    this.WeightChange != null &&
                    this.WeightChange.Equals(other.WeightChange)
                ) && 
                (
                    this.Width == other.Width ||
                    this.Width != null &&
                    this.Width.Equals(other.Width)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.AdditionalDimensionApplication != null)
                    hash = hash * 59 + this.AdditionalDimensionApplication.GetHashCode();
                if (this.CostChange != null)
                    hash = hash * 59 + this.CostChange.GetHashCode();
                if (this.FileAttachment != null)
                    hash = hash * 59 + this.FileAttachment.GetHashCode();
                if (this.Height != null)
                    hash = hash * 59 + this.Height.GetHashCode();
                if (this.Hidden != null)
                    hash = hash * 59 + this.Hidden.GetHashCode();
                if (this.Label != null)
                    hash = hash * 59 + this.Label.GetHashCode();
                if (this.Length != null)
                    hash = hash * 59 + this.Length.GetHashCode();
                if (this.OneTimeFee != null)
                    hash = hash * 59 + this.OneTimeFee.GetHashCode();
                if (this.Value != null)
                    hash = hash * 59 + this.Value.GetHashCode();
                if (this.WeightChange != null)
                    hash = hash * 59 + this.WeightChange.GetHashCode();
                if (this.Width != null)
                    hash = hash * 59 + this.Width.GetHashCode();
                return hash;
            }
        }
    }

}
