/* 
 * UltraCart Rest API V2
 *
 * UltraCart REST API Version 2
 *
 * OpenAPI spec version: 2.0.0
 * Contact: support@ultracart.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = com.ultracart.admin.v2.Client.SwaggerDateConverter;

namespace com.ultracart.admin.v2.Model
{
    /// <summary>
    /// OrderItemOption
    /// </summary>
    [DataContract]
    public partial class OrderItemOption :  IEquatable<OrderItemOption>, IValidatableObject
    {
        /// <summary>
        /// How the additional dimensions are applied to the item.
        /// </summary>
        /// <value>How the additional dimensions are applied to the item.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum AdditionalDimensionApplicationEnum
        {
            
            /// <summary>
            /// Enum None for value: none
            /// </summary>
            [EnumMember(Value = "none")]
            None = 1,
            
            /// <summary>
            /// Enum Setitemto for value: set item to
            /// </summary>
            [EnumMember(Value = "set item to")]
            Setitemto = 2,
            
            /// <summary>
            /// Enum Additem for value: add item
            /// </summary>
            [EnumMember(Value = "add item")]
            Additem = 3
        }

        /// <summary>
        /// How the additional dimensions are applied to the item.
        /// </summary>
        /// <value>How the additional dimensions are applied to the item.</value>
        [DataMember(Name="additional_dimension_application", EmitDefaultValue=false)]
        public AdditionalDimensionApplicationEnum? AdditionalDimensionApplication { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="OrderItemOption" /> class.
        /// </summary>
        /// <param name="additionalDimensionApplication">How the additional dimensions are applied to the item..</param>
        /// <param name="costChange">costChange.</param>
        /// <param name="fileAttachment">fileAttachment.</param>
        /// <param name="height">height.</param>
        /// <param name="hidden">True if this option is hidden from display on the order.</param>
        /// <param name="label">Label.</param>
        /// <param name="length">length.</param>
        /// <param name="oneTimeFee">True if the cost associated with this option is a one time fee or multiplied by the quantity of the item.</param>
        /// <param name="value">Value.</param>
        /// <param name="weightChange">weightChange.</param>
        /// <param name="width">width.</param>
        public OrderItemOption(AdditionalDimensionApplicationEnum? additionalDimensionApplication = default(AdditionalDimensionApplicationEnum?), Currency costChange = default(Currency), OrderItemOptionFileAttachment fileAttachment = default(OrderItemOptionFileAttachment), Distance height = default(Distance), bool? hidden = default(bool?), string label = default(string), Distance length = default(Distance), bool? oneTimeFee = default(bool?), string value = default(string), Weight weightChange = default(Weight), Distance width = default(Distance))
        {
            this.AdditionalDimensionApplication = additionalDimensionApplication;
            this.CostChange = costChange;
            this.FileAttachment = fileAttachment;
            this.Height = height;
            this.Hidden = hidden;
            this.Label = label;
            this.Length = length;
            this.OneTimeFee = oneTimeFee;
            this.Value = value;
            this.WeightChange = weightChange;
            this.Width = width;
        }
        

        /// <summary>
        /// Gets or Sets CostChange
        /// </summary>
        [DataMember(Name="cost_change", EmitDefaultValue=false)]
        public Currency CostChange { get; set; }

        /// <summary>
        /// Gets or Sets FileAttachment
        /// </summary>
        [DataMember(Name="file_attachment", EmitDefaultValue=false)]
        public OrderItemOptionFileAttachment FileAttachment { get; set; }

        /// <summary>
        /// Gets or Sets Height
        /// </summary>
        [DataMember(Name="height", EmitDefaultValue=false)]
        public Distance Height { get; set; }

        /// <summary>
        /// True if this option is hidden from display on the order
        /// </summary>
        /// <value>True if this option is hidden from display on the order</value>
        [DataMember(Name="hidden", EmitDefaultValue=false)]
        public bool? Hidden { get; set; }

        /// <summary>
        /// Label
        /// </summary>
        /// <value>Label</value>
        [DataMember(Name="label", EmitDefaultValue=false)]
        public string Label { get; set; }

        /// <summary>
        /// Gets or Sets Length
        /// </summary>
        [DataMember(Name="length", EmitDefaultValue=false)]
        public Distance Length { get; set; }

        /// <summary>
        /// True if the cost associated with this option is a one time fee or multiplied by the quantity of the item
        /// </summary>
        /// <value>True if the cost associated with this option is a one time fee or multiplied by the quantity of the item</value>
        [DataMember(Name="one_time_fee", EmitDefaultValue=false)]
        public bool? OneTimeFee { get; set; }

        /// <summary>
        /// Value
        /// </summary>
        /// <value>Value</value>
        [DataMember(Name="value", EmitDefaultValue=false)]
        public string Value { get; set; }

        /// <summary>
        /// Gets or Sets WeightChange
        /// </summary>
        [DataMember(Name="weight_change", EmitDefaultValue=false)]
        public Weight WeightChange { get; set; }

        /// <summary>
        /// Gets or Sets Width
        /// </summary>
        [DataMember(Name="width", EmitDefaultValue=false)]
        public Distance Width { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class OrderItemOption {\n");
            sb.Append("  AdditionalDimensionApplication: ").Append(AdditionalDimensionApplication).Append("\n");
            sb.Append("  CostChange: ").Append(CostChange).Append("\n");
            sb.Append("  FileAttachment: ").Append(FileAttachment).Append("\n");
            sb.Append("  Height: ").Append(Height).Append("\n");
            sb.Append("  Hidden: ").Append(Hidden).Append("\n");
            sb.Append("  Label: ").Append(Label).Append("\n");
            sb.Append("  Length: ").Append(Length).Append("\n");
            sb.Append("  OneTimeFee: ").Append(OneTimeFee).Append("\n");
            sb.Append("  Value: ").Append(Value).Append("\n");
            sb.Append("  WeightChange: ").Append(WeightChange).Append("\n");
            sb.Append("  Width: ").Append(Width).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as OrderItemOption);
        }

        /// <summary>
        /// Returns true if OrderItemOption instances are equal
        /// </summary>
        /// <param name="input">Instance of OrderItemOption to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(OrderItemOption input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.AdditionalDimensionApplication == input.AdditionalDimensionApplication ||
                    (this.AdditionalDimensionApplication != null &&
                    this.AdditionalDimensionApplication.Equals(input.AdditionalDimensionApplication))
                ) && 
                (
                    this.CostChange == input.CostChange ||
                    (this.CostChange != null &&
                    this.CostChange.Equals(input.CostChange))
                ) && 
                (
                    this.FileAttachment == input.FileAttachment ||
                    (this.FileAttachment != null &&
                    this.FileAttachment.Equals(input.FileAttachment))
                ) && 
                (
                    this.Height == input.Height ||
                    (this.Height != null &&
                    this.Height.Equals(input.Height))
                ) && 
                (
                    this.Hidden == input.Hidden ||
                    (this.Hidden != null &&
                    this.Hidden.Equals(input.Hidden))
                ) && 
                (
                    this.Label == input.Label ||
                    (this.Label != null &&
                    this.Label.Equals(input.Label))
                ) && 
                (
                    this.Length == input.Length ||
                    (this.Length != null &&
                    this.Length.Equals(input.Length))
                ) && 
                (
                    this.OneTimeFee == input.OneTimeFee ||
                    (this.OneTimeFee != null &&
                    this.OneTimeFee.Equals(input.OneTimeFee))
                ) && 
                (
                    this.Value == input.Value ||
                    (this.Value != null &&
                    this.Value.Equals(input.Value))
                ) && 
                (
                    this.WeightChange == input.WeightChange ||
                    (this.WeightChange != null &&
                    this.WeightChange.Equals(input.WeightChange))
                ) && 
                (
                    this.Width == input.Width ||
                    (this.Width != null &&
                    this.Width.Equals(input.Width))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AdditionalDimensionApplication != null)
                    hashCode = hashCode * 59 + this.AdditionalDimensionApplication.GetHashCode();
                if (this.CostChange != null)
                    hashCode = hashCode * 59 + this.CostChange.GetHashCode();
                if (this.FileAttachment != null)
                    hashCode = hashCode * 59 + this.FileAttachment.GetHashCode();
                if (this.Height != null)
                    hashCode = hashCode * 59 + this.Height.GetHashCode();
                if (this.Hidden != null)
                    hashCode = hashCode * 59 + this.Hidden.GetHashCode();
                if (this.Label != null)
                    hashCode = hashCode * 59 + this.Label.GetHashCode();
                if (this.Length != null)
                    hashCode = hashCode * 59 + this.Length.GetHashCode();
                if (this.OneTimeFee != null)
                    hashCode = hashCode * 59 + this.OneTimeFee.GetHashCode();
                if (this.Value != null)
                    hashCode = hashCode * 59 + this.Value.GetHashCode();
                if (this.WeightChange != null)
                    hashCode = hashCode * 59 + this.WeightChange.GetHashCode();
                if (this.Width != null)
                    hashCode = hashCode * 59 + this.Width.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Label (string) maxLength
            if(this.Label != null && this.Label.Length > 50)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Label, length must be less than 50.", new [] { "Label" });
            }

            // Value (string) maxLength
            if(this.Value != null && this.Value.Length > 1024)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Value, length must be less than 1024.", new [] { "Value" });
            }

            yield break;
        }
    }

}
