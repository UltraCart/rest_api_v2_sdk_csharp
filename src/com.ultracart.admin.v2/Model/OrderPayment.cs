/* 
 * UltraCart Rest API V2
 *
 * UltraCart REST API Version 2
 *
 * OpenAPI spec version: 2.0.0
 * Contact: support@ultracart.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = com.ultracart.admin.v2.Client.SwaggerDateConverter;

namespace com.ultracart.admin.v2.Model
{
    /// <summary>
    /// OrderPayment
    /// </summary>
    [DataContract]
    public partial class OrderPayment :  IEquatable<OrderPayment>, IValidatableObject
    {
        /// <summary>
        /// Payment method
        /// </summary>
        /// <value>Payment method</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum PaymentMethodEnum
        {
            
            /// <summary>
            /// Enum Affirm for value: Affirm
            /// </summary>
            [EnumMember(Value = "Affirm")]
            Affirm = 1,
            
            /// <summary>
            /// Enum Amazon for value: Amazon
            /// </summary>
            [EnumMember(Value = "Amazon")]
            Amazon = 2,
            
            /// <summary>
            /// Enum AmazonSC for value: Amazon SC
            /// </summary>
            [EnumMember(Value = "Amazon SC")]
            AmazonSC = 3,
            
            /// <summary>
            /// Enum Cash for value: Cash
            /// </summary>
            [EnumMember(Value = "Cash")]
            Cash = 4,
            
            /// <summary>
            /// Enum Check for value: Check
            /// </summary>
            [EnumMember(Value = "Check")]
            Check = 5,
            
            /// <summary>
            /// Enum COD for value: COD
            /// </summary>
            [EnumMember(Value = "COD")]
            COD = 6,
            
            /// <summary>
            /// Enum CreditCard for value: Credit Card
            /// </summary>
            [EnumMember(Value = "Credit Card")]
            CreditCard = 7,
            
            /// <summary>
            /// Enum EBay for value: eBay
            /// </summary>
            [EnumMember(Value = "eBay")]
            EBay = 8,
            
            /// <summary>
            /// Enum ECheck for value: eCheck
            /// </summary>
            [EnumMember(Value = "eCheck")]
            ECheck = 9,
            
            /// <summary>
            /// Enum GoogleShopping for value: Google Shopping
            /// </summary>
            [EnumMember(Value = "Google Shopping")]
            GoogleShopping = 10,
            
            /// <summary>
            /// Enum Insurance for value: Insurance
            /// </summary>
            [EnumMember(Value = "Insurance")]
            Insurance = 11,
            
            /// <summary>
            /// Enum LoanHero for value: LoanHero
            /// </summary>
            [EnumMember(Value = "LoanHero")]
            LoanHero = 12,
            
            /// <summary>
            /// Enum MoneyOrder for value: Money Order
            /// </summary>
            [EnumMember(Value = "Money Order")]
            MoneyOrder = 13,
            
            /// <summary>
            /// Enum PayPal for value: PayPal
            /// </summary>
            [EnumMember(Value = "PayPal")]
            PayPal = 14,
            
            /// <summary>
            /// Enum PurchaseOrder for value: Purchase Order
            /// </summary>
            [EnumMember(Value = "Purchase Order")]
            PurchaseOrder = 15,
            
            /// <summary>
            /// Enum QuoteRequest for value: Quote Request
            /// </summary>
            [EnumMember(Value = "Quote Request")]
            QuoteRequest = 16,
            
            /// <summary>
            /// Enum Unknown for value: Unknown
            /// </summary>
            [EnumMember(Value = "Unknown")]
            Unknown = 17,
            
            /// <summary>
            /// Enum WireTransfer for value: Wire Transfer
            /// </summary>
            [EnumMember(Value = "Wire Transfer")]
            WireTransfer = 18,
            
            /// <summary>
            /// Enum Walmart for value: Walmart
            /// </summary>
            [EnumMember(Value = "Walmart")]
            Walmart = 19,
            
            /// <summary>
            /// Enum ShopCom for value: Shop.com
            /// </summary>
            [EnumMember(Value = "Shop.com")]
            ShopCom = 20,
            
            /// <summary>
            /// Enum Sezzle for value: Sezzle
            /// </summary>
            [EnumMember(Value = "Sezzle")]
            Sezzle = 21,
            
            /// <summary>
            /// Enum Venmo for value: Venmo
            /// </summary>
            [EnumMember(Value = "Venmo")]
            Venmo = 22,
            
            /// <summary>
            /// Enum ApplePay for value: Apple Pay
            /// </summary>
            [EnumMember(Value = "Apple Pay")]
            ApplePay = 23,
            
            /// <summary>
            /// Enum GooglePay for value: Google Pay
            /// </summary>
            [EnumMember(Value = "Google Pay")]
            GooglePay = 24
        }

        /// <summary>
        /// Payment method
        /// </summary>
        /// <value>Payment method</value>
        [DataMember(Name="payment_method", EmitDefaultValue=false)]
        public PaymentMethodEnum? PaymentMethod { get; set; }
        /// <summary>
        /// Payment status
        /// </summary>
        /// <value>Payment status</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum PaymentStatusEnum
        {
            
            /// <summary>
            /// Enum Unprocessed for value: Unprocessed
            /// </summary>
            [EnumMember(Value = "Unprocessed")]
            Unprocessed = 1,
            
            /// <summary>
            /// Enum Authorized for value: Authorized
            /// </summary>
            [EnumMember(Value = "Authorized")]
            Authorized = 2,
            
            /// <summary>
            /// Enum CaptureFailed for value: Capture Failed
            /// </summary>
            [EnumMember(Value = "Capture Failed")]
            CaptureFailed = 3,
            
            /// <summary>
            /// Enum Processed for value: Processed
            /// </summary>
            [EnumMember(Value = "Processed")]
            Processed = 4,
            
            /// <summary>
            /// Enum Declined for value: Declined
            /// </summary>
            [EnumMember(Value = "Declined")]
            Declined = 5,
            
            /// <summary>
            /// Enum Voided for value: Voided
            /// </summary>
            [EnumMember(Value = "Voided")]
            Voided = 6,
            
            /// <summary>
            /// Enum Refunded for value: Refunded
            /// </summary>
            [EnumMember(Value = "Refunded")]
            Refunded = 7,
            
            /// <summary>
            /// Enum Skipped for value: Skipped
            /// </summary>
            [EnumMember(Value = "Skipped")]
            Skipped = 8
        }

        /// <summary>
        /// Payment status
        /// </summary>
        /// <value>Payment status</value>
        [DataMember(Name="payment_status", EmitDefaultValue=false)]
        public PaymentStatusEnum? PaymentStatus { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="OrderPayment" /> class.
        /// </summary>
        /// <param name="check">check.</param>
        /// <param name="creditCard">creditCard.</param>
        /// <param name="echeck">echeck.</param>
        /// <param name="holdForFraudReview">True if order has been held for fraud review.</param>
        /// <param name="insurance">insurance.</param>
        /// <param name="paymentDts">Date/time that the payment was successfully processed, for new orders, this field is only considered if channel_partner.skip_payment_processing is true.</param>
        /// <param name="paymentMethod">Payment method.</param>
        /// <param name="paymentMethodAccountingCode">Payment method QuickBooks code.</param>
        /// <param name="paymentMethodDepositToAccount">Payment method QuickBooks deposit account.</param>
        /// <param name="paymentStatus">Payment status.</param>
        /// <param name="purchaseOrder">purchaseOrder.</param>
        /// <param name="rotatingTransactionGatewayCode">Rotating transaction gateway code used to process this order.</param>
        /// <param name="surcharge">surcharge.</param>
        /// <param name="surchargeAccountingCode">Surcharge accounting code.</param>
        /// <param name="surchargeTransactionFee">Surcharge transaction fee.</param>
        /// <param name="surchargeTransactionPercentage">Surcharge transaction percentage.</param>
        /// <param name="testOrder">True if this is a test order.</param>
        /// <param name="transactions">Transactions associated with processing this payment.</param>
        public OrderPayment(OrderPaymentCheck check = default(OrderPaymentCheck), OrderPaymentCreditCard creditCard = default(OrderPaymentCreditCard), OrderPaymentECheck echeck = default(OrderPaymentECheck), bool? holdForFraudReview = default(bool?), OrderPaymentInsurance insurance = default(OrderPaymentInsurance), string paymentDts = default(string), PaymentMethodEnum? paymentMethod = default(PaymentMethodEnum?), string paymentMethodAccountingCode = default(string), string paymentMethodDepositToAccount = default(string), PaymentStatusEnum? paymentStatus = default(PaymentStatusEnum?), OrderPaymentPurchaseOrder purchaseOrder = default(OrderPaymentPurchaseOrder), string rotatingTransactionGatewayCode = default(string), Currency surcharge = default(Currency), string surchargeAccountingCode = default(string), decimal? surchargeTransactionFee = default(decimal?), decimal? surchargeTransactionPercentage = default(decimal?), bool? testOrder = default(bool?), List<OrderPaymentTransaction> transactions = default(List<OrderPaymentTransaction>))
        {
            this.Check = check;
            this.CreditCard = creditCard;
            this.Echeck = echeck;
            this.HoldForFraudReview = holdForFraudReview;
            this.Insurance = insurance;
            this.PaymentDts = paymentDts;
            this.PaymentMethod = paymentMethod;
            this.PaymentMethodAccountingCode = paymentMethodAccountingCode;
            this.PaymentMethodDepositToAccount = paymentMethodDepositToAccount;
            this.PaymentStatus = paymentStatus;
            this.PurchaseOrder = purchaseOrder;
            this.RotatingTransactionGatewayCode = rotatingTransactionGatewayCode;
            this.Surcharge = surcharge;
            this.SurchargeAccountingCode = surchargeAccountingCode;
            this.SurchargeTransactionFee = surchargeTransactionFee;
            this.SurchargeTransactionPercentage = surchargeTransactionPercentage;
            this.TestOrder = testOrder;
            this.Transactions = transactions;
        }
        
        /// <summary>
        /// Gets or Sets Check
        /// </summary>
        [DataMember(Name="check", EmitDefaultValue=false)]
        public OrderPaymentCheck Check { get; set; }

        /// <summary>
        /// Gets or Sets CreditCard
        /// </summary>
        [DataMember(Name="credit_card", EmitDefaultValue=false)]
        public OrderPaymentCreditCard CreditCard { get; set; }

        /// <summary>
        /// Gets or Sets Echeck
        /// </summary>
        [DataMember(Name="echeck", EmitDefaultValue=false)]
        public OrderPaymentECheck Echeck { get; set; }

        /// <summary>
        /// True if order has been held for fraud review
        /// </summary>
        /// <value>True if order has been held for fraud review</value>
        [DataMember(Name="hold_for_fraud_review", EmitDefaultValue=false)]
        public bool? HoldForFraudReview { get; set; }

        /// <summary>
        /// Gets or Sets Insurance
        /// </summary>
        [DataMember(Name="insurance", EmitDefaultValue=false)]
        public OrderPaymentInsurance Insurance { get; set; }

        /// <summary>
        /// Date/time that the payment was successfully processed, for new orders, this field is only considered if channel_partner.skip_payment_processing is true
        /// </summary>
        /// <value>Date/time that the payment was successfully processed, for new orders, this field is only considered if channel_partner.skip_payment_processing is true</value>
        [DataMember(Name="payment_dts", EmitDefaultValue=false)]
        public string PaymentDts { get; set; }


        /// <summary>
        /// Payment method QuickBooks code
        /// </summary>
        /// <value>Payment method QuickBooks code</value>
        [DataMember(Name="payment_method_accounting_code", EmitDefaultValue=false)]
        public string PaymentMethodAccountingCode { get; set; }

        /// <summary>
        /// Payment method QuickBooks deposit account
        /// </summary>
        /// <value>Payment method QuickBooks deposit account</value>
        [DataMember(Name="payment_method_deposit_to_account", EmitDefaultValue=false)]
        public string PaymentMethodDepositToAccount { get; set; }


        /// <summary>
        /// Gets or Sets PurchaseOrder
        /// </summary>
        [DataMember(Name="purchase_order", EmitDefaultValue=false)]
        public OrderPaymentPurchaseOrder PurchaseOrder { get; set; }

        /// <summary>
        /// Rotating transaction gateway code used to process this order
        /// </summary>
        /// <value>Rotating transaction gateway code used to process this order</value>
        [DataMember(Name="rotating_transaction_gateway_code", EmitDefaultValue=false)]
        public string RotatingTransactionGatewayCode { get; set; }

        /// <summary>
        /// Gets or Sets Surcharge
        /// </summary>
        [DataMember(Name="surcharge", EmitDefaultValue=false)]
        public Currency Surcharge { get; set; }

        /// <summary>
        /// Surcharge accounting code
        /// </summary>
        /// <value>Surcharge accounting code</value>
        [DataMember(Name="surcharge_accounting_code", EmitDefaultValue=false)]
        public string SurchargeAccountingCode { get; set; }

        /// <summary>
        /// Surcharge transaction fee
        /// </summary>
        /// <value>Surcharge transaction fee</value>
        [DataMember(Name="surcharge_transaction_fee", EmitDefaultValue=false)]
        public decimal? SurchargeTransactionFee { get; set; }

        /// <summary>
        /// Surcharge transaction percentage
        /// </summary>
        /// <value>Surcharge transaction percentage</value>
        [DataMember(Name="surcharge_transaction_percentage", EmitDefaultValue=false)]
        public decimal? SurchargeTransactionPercentage { get; set; }

        /// <summary>
        /// True if this is a test order
        /// </summary>
        /// <value>True if this is a test order</value>
        [DataMember(Name="test_order", EmitDefaultValue=false)]
        public bool? TestOrder { get; set; }

        /// <summary>
        /// Transactions associated with processing this payment
        /// </summary>
        /// <value>Transactions associated with processing this payment</value>
        [DataMember(Name="transactions", EmitDefaultValue=false)]
        public List<OrderPaymentTransaction> Transactions { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class OrderPayment {\n");
            sb.Append("  Check: ").Append(Check).Append("\n");
            sb.Append("  CreditCard: ").Append(CreditCard).Append("\n");
            sb.Append("  Echeck: ").Append(Echeck).Append("\n");
            sb.Append("  HoldForFraudReview: ").Append(HoldForFraudReview).Append("\n");
            sb.Append("  Insurance: ").Append(Insurance).Append("\n");
            sb.Append("  PaymentDts: ").Append(PaymentDts).Append("\n");
            sb.Append("  PaymentMethod: ").Append(PaymentMethod).Append("\n");
            sb.Append("  PaymentMethodAccountingCode: ").Append(PaymentMethodAccountingCode).Append("\n");
            sb.Append("  PaymentMethodDepositToAccount: ").Append(PaymentMethodDepositToAccount).Append("\n");
            sb.Append("  PaymentStatus: ").Append(PaymentStatus).Append("\n");
            sb.Append("  PurchaseOrder: ").Append(PurchaseOrder).Append("\n");
            sb.Append("  RotatingTransactionGatewayCode: ").Append(RotatingTransactionGatewayCode).Append("\n");
            sb.Append("  Surcharge: ").Append(Surcharge).Append("\n");
            sb.Append("  SurchargeAccountingCode: ").Append(SurchargeAccountingCode).Append("\n");
            sb.Append("  SurchargeTransactionFee: ").Append(SurchargeTransactionFee).Append("\n");
            sb.Append("  SurchargeTransactionPercentage: ").Append(SurchargeTransactionPercentage).Append("\n");
            sb.Append("  TestOrder: ").Append(TestOrder).Append("\n");
            sb.Append("  Transactions: ").Append(Transactions).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as OrderPayment);
        }

        /// <summary>
        /// Returns true if OrderPayment instances are equal
        /// </summary>
        /// <param name="input">Instance of OrderPayment to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(OrderPayment input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Check == input.Check ||
                    (this.Check != null &&
                    this.Check.Equals(input.Check))
                ) && 
                (
                    this.CreditCard == input.CreditCard ||
                    (this.CreditCard != null &&
                    this.CreditCard.Equals(input.CreditCard))
                ) && 
                (
                    this.Echeck == input.Echeck ||
                    (this.Echeck != null &&
                    this.Echeck.Equals(input.Echeck))
                ) && 
                (
                    this.HoldForFraudReview == input.HoldForFraudReview ||
                    (this.HoldForFraudReview != null &&
                    this.HoldForFraudReview.Equals(input.HoldForFraudReview))
                ) && 
                (
                    this.Insurance == input.Insurance ||
                    (this.Insurance != null &&
                    this.Insurance.Equals(input.Insurance))
                ) && 
                (
                    this.PaymentDts == input.PaymentDts ||
                    (this.PaymentDts != null &&
                    this.PaymentDts.Equals(input.PaymentDts))
                ) && 
                (
                    this.PaymentMethod == input.PaymentMethod ||
                    (this.PaymentMethod != null &&
                    this.PaymentMethod.Equals(input.PaymentMethod))
                ) && 
                (
                    this.PaymentMethodAccountingCode == input.PaymentMethodAccountingCode ||
                    (this.PaymentMethodAccountingCode != null &&
                    this.PaymentMethodAccountingCode.Equals(input.PaymentMethodAccountingCode))
                ) && 
                (
                    this.PaymentMethodDepositToAccount == input.PaymentMethodDepositToAccount ||
                    (this.PaymentMethodDepositToAccount != null &&
                    this.PaymentMethodDepositToAccount.Equals(input.PaymentMethodDepositToAccount))
                ) && 
                (
                    this.PaymentStatus == input.PaymentStatus ||
                    (this.PaymentStatus != null &&
                    this.PaymentStatus.Equals(input.PaymentStatus))
                ) && 
                (
                    this.PurchaseOrder == input.PurchaseOrder ||
                    (this.PurchaseOrder != null &&
                    this.PurchaseOrder.Equals(input.PurchaseOrder))
                ) && 
                (
                    this.RotatingTransactionGatewayCode == input.RotatingTransactionGatewayCode ||
                    (this.RotatingTransactionGatewayCode != null &&
                    this.RotatingTransactionGatewayCode.Equals(input.RotatingTransactionGatewayCode))
                ) && 
                (
                    this.Surcharge == input.Surcharge ||
                    (this.Surcharge != null &&
                    this.Surcharge.Equals(input.Surcharge))
                ) && 
                (
                    this.SurchargeAccountingCode == input.SurchargeAccountingCode ||
                    (this.SurchargeAccountingCode != null &&
                    this.SurchargeAccountingCode.Equals(input.SurchargeAccountingCode))
                ) && 
                (
                    this.SurchargeTransactionFee == input.SurchargeTransactionFee ||
                    (this.SurchargeTransactionFee != null &&
                    this.SurchargeTransactionFee.Equals(input.SurchargeTransactionFee))
                ) && 
                (
                    this.SurchargeTransactionPercentage == input.SurchargeTransactionPercentage ||
                    (this.SurchargeTransactionPercentage != null &&
                    this.SurchargeTransactionPercentage.Equals(input.SurchargeTransactionPercentage))
                ) && 
                (
                    this.TestOrder == input.TestOrder ||
                    (this.TestOrder != null &&
                    this.TestOrder.Equals(input.TestOrder))
                ) && 
                (
                    this.Transactions == input.Transactions ||
                    this.Transactions != null &&
                    this.Transactions.SequenceEqual(input.Transactions)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Check != null)
                    hashCode = hashCode * 59 + this.Check.GetHashCode();
                if (this.CreditCard != null)
                    hashCode = hashCode * 59 + this.CreditCard.GetHashCode();
                if (this.Echeck != null)
                    hashCode = hashCode * 59 + this.Echeck.GetHashCode();
                if (this.HoldForFraudReview != null)
                    hashCode = hashCode * 59 + this.HoldForFraudReview.GetHashCode();
                if (this.Insurance != null)
                    hashCode = hashCode * 59 + this.Insurance.GetHashCode();
                if (this.PaymentDts != null)
                    hashCode = hashCode * 59 + this.PaymentDts.GetHashCode();
                if (this.PaymentMethod != null)
                    hashCode = hashCode * 59 + this.PaymentMethod.GetHashCode();
                if (this.PaymentMethodAccountingCode != null)
                    hashCode = hashCode * 59 + this.PaymentMethodAccountingCode.GetHashCode();
                if (this.PaymentMethodDepositToAccount != null)
                    hashCode = hashCode * 59 + this.PaymentMethodDepositToAccount.GetHashCode();
                if (this.PaymentStatus != null)
                    hashCode = hashCode * 59 + this.PaymentStatus.GetHashCode();
                if (this.PurchaseOrder != null)
                    hashCode = hashCode * 59 + this.PurchaseOrder.GetHashCode();
                if (this.RotatingTransactionGatewayCode != null)
                    hashCode = hashCode * 59 + this.RotatingTransactionGatewayCode.GetHashCode();
                if (this.Surcharge != null)
                    hashCode = hashCode * 59 + this.Surcharge.GetHashCode();
                if (this.SurchargeAccountingCode != null)
                    hashCode = hashCode * 59 + this.SurchargeAccountingCode.GetHashCode();
                if (this.SurchargeTransactionFee != null)
                    hashCode = hashCode * 59 + this.SurchargeTransactionFee.GetHashCode();
                if (this.SurchargeTransactionPercentage != null)
                    hashCode = hashCode * 59 + this.SurchargeTransactionPercentage.GetHashCode();
                if (this.TestOrder != null)
                    hashCode = hashCode * 59 + this.TestOrder.GetHashCode();
                if (this.Transactions != null)
                    hashCode = hashCode * 59 + this.Transactions.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
