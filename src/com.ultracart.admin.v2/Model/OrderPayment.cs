/* 
 * UltraCart Rest API V2
 *
 * This is the next generation UltraCart REST API...
 *
 * OpenAPI spec version: 2.0.0
 * Contact: support@ultracart.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace com.ultracart.admin.v2.Model
{
    /// <summary>
    /// OrderPayment
    /// </summary>
    [DataContract]
    public partial class OrderPayment :  IEquatable<OrderPayment>
    {
        /// <summary>
        /// Payment method
        /// </summary>
        /// <value>Payment method</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum PaymentMethodEnum
        {
            
            /// <summary>
            /// Enum Affirm for "Affirm"
            /// </summary>
            [EnumMember(Value = "Affirm")]
            Affirm,
            
            /// <summary>
            /// Enum Amazon for "Amazon"
            /// </summary>
            [EnumMember(Value = "Amazon")]
            Amazon,
            
            /// <summary>
            /// Enum AmazonSC for "Amazon SC"
            /// </summary>
            [EnumMember(Value = "Amazon SC")]
            AmazonSC,
            
            /// <summary>
            /// Enum Cash for "Cash"
            /// </summary>
            [EnumMember(Value = "Cash")]
            Cash,
            
            /// <summary>
            /// Enum Check for "Check"
            /// </summary>
            [EnumMember(Value = "Check")]
            Check,
            
            /// <summary>
            /// Enum COD for "COD"
            /// </summary>
            [EnumMember(Value = "COD")]
            COD,
            
            /// <summary>
            /// Enum Coinbase for "Coinbase"
            /// </summary>
            [EnumMember(Value = "Coinbase")]
            Coinbase,
            
            /// <summary>
            /// Enum CreditCard for "Credit Card"
            /// </summary>
            [EnumMember(Value = "Credit Card")]
            CreditCard,
            
            /// <summary>
            /// Enum ECheck for "eCheck"
            /// </summary>
            [EnumMember(Value = "eCheck")]
            ECheck,
            
            /// <summary>
            /// Enum MoneyOrder for "Money Order"
            /// </summary>
            [EnumMember(Value = "Money Order")]
            MoneyOrder,
            
            /// <summary>
            /// Enum PayPal for "PayPal"
            /// </summary>
            [EnumMember(Value = "PayPal")]
            PayPal,
            
            /// <summary>
            /// Enum PurchaseOrder for "Purchase Order"
            /// </summary>
            [EnumMember(Value = "Purchase Order")]
            PurchaseOrder,
            
            /// <summary>
            /// Enum QuoteRequest for "Quote Request"
            /// </summary>
            [EnumMember(Value = "Quote Request")]
            QuoteRequest,
            
            /// <summary>
            /// Enum Unknown for "Unknown"
            /// </summary>
            [EnumMember(Value = "Unknown")]
            Unknown,
            
            /// <summary>
            /// Enum WireTransfer for "Wire Transfer"
            /// </summary>
            [EnumMember(Value = "Wire Transfer")]
            WireTransfer
        }

        /// <summary>
        /// Payment status
        /// </summary>
        /// <value>Payment status</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum PaymentStatusEnum
        {
            
            /// <summary>
            /// Enum Unprocessed for "Unprocessed"
            /// </summary>
            [EnumMember(Value = "Unprocessed")]
            Unprocessed,
            
            /// <summary>
            /// Enum Authorized for "Authorized"
            /// </summary>
            [EnumMember(Value = "Authorized")]
            Authorized,
            
            /// <summary>
            /// Enum CaptureFailed for "Capture Failed"
            /// </summary>
            [EnumMember(Value = "Capture Failed")]
            CaptureFailed,
            
            /// <summary>
            /// Enum Processed for "Processed"
            /// </summary>
            [EnumMember(Value = "Processed")]
            Processed,
            
            /// <summary>
            /// Enum Declined for "Declined"
            /// </summary>
            [EnumMember(Value = "Declined")]
            Declined,
            
            /// <summary>
            /// Enum Voided for "Voided"
            /// </summary>
            [EnumMember(Value = "Voided")]
            Voided,
            
            /// <summary>
            /// Enum Refunded for "Refunded"
            /// </summary>
            [EnumMember(Value = "Refunded")]
            Refunded,
            
            /// <summary>
            /// Enum Skipped for "Skipped"
            /// </summary>
            [EnumMember(Value = "Skipped")]
            Skipped
        }

        /// <summary>
        /// Payment method
        /// </summary>
        /// <value>Payment method</value>
        [DataMember(Name="payment_method", EmitDefaultValue=false)]
        public PaymentMethodEnum? PaymentMethod { get; set; }
        /// <summary>
        /// Payment status
        /// </summary>
        /// <value>Payment status</value>
        [DataMember(Name="payment_status", EmitDefaultValue=false)]
        public PaymentStatusEnum? PaymentStatus { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="OrderPayment" /> class.
        /// </summary>
        /// <param name="Check">Check.</param>
        /// <param name="CreditCard">CreditCard.</param>
        /// <param name="Echeck">Echeck.</param>
        /// <param name="HoldForFraudReview">True if order has been held for fraud review.</param>
        /// <param name="PaymentDts">Date/time that the payment was successfully processed.</param>
        /// <param name="PaymentMethod">Payment method.</param>
        /// <param name="PaymentMethodAccountingCode">Payment method QuickBooks code.</param>
        /// <param name="PaymentMethodDepositToAccount">Payment method QuickBooks deposit account.</param>
        /// <param name="PaymentStatus">Payment status.</param>
        /// <param name="PurchaseOrder">PurchaseOrder.</param>
        /// <param name="RotatingTransactionGatewayCode">Rotating transaction gateway code used to process this order.</param>
        /// <param name="Surcharge">Surcharge.</param>
        /// <param name="SurchargeAccountingCode">Surcharge accounting code.</param>
        /// <param name="SurchargeTransactionFee">Surcharge transaction fee.</param>
        /// <param name="SurchargeTransactionPercentage">Surcharge transaction percentage.</param>
        /// <param name="TestOrder">True if this is a test order.</param>
        /// <param name="Transactions">Transactions associated with processing this payment.</param>
        public OrderPayment(OrderPaymentCheck Check = null, OrderPaymentCreditCard CreditCard = null, OrderPaymentECheck Echeck = null, bool? HoldForFraudReview = null, string PaymentDts = null, PaymentMethodEnum? PaymentMethod = null, string PaymentMethodAccountingCode = null, string PaymentMethodDepositToAccount = null, PaymentStatusEnum? PaymentStatus = null, OrderPaymentPurchaseOrder PurchaseOrder = null, string RotatingTransactionGatewayCode = null, Currency Surcharge = null, string SurchargeAccountingCode = null, decimal? SurchargeTransactionFee = null, decimal? SurchargeTransactionPercentage = null, bool? TestOrder = null, List<OrderPaymentTransaction> Transactions = null)
        {
            this.Check = Check;
            this.CreditCard = CreditCard;
            this.Echeck = Echeck;
            this.HoldForFraudReview = HoldForFraudReview;
            this.PaymentDts = PaymentDts;
            this.PaymentMethod = PaymentMethod;
            this.PaymentMethodAccountingCode = PaymentMethodAccountingCode;
            this.PaymentMethodDepositToAccount = PaymentMethodDepositToAccount;
            this.PaymentStatus = PaymentStatus;
            this.PurchaseOrder = PurchaseOrder;
            this.RotatingTransactionGatewayCode = RotatingTransactionGatewayCode;
            this.Surcharge = Surcharge;
            this.SurchargeAccountingCode = SurchargeAccountingCode;
            this.SurchargeTransactionFee = SurchargeTransactionFee;
            this.SurchargeTransactionPercentage = SurchargeTransactionPercentage;
            this.TestOrder = TestOrder;
            this.Transactions = Transactions;
        }
        
        /// <summary>
        /// Gets or Sets Check
        /// </summary>
        [DataMember(Name="check", EmitDefaultValue=false)]
        public OrderPaymentCheck Check { get; set; }
        /// <summary>
        /// Gets or Sets CreditCard
        /// </summary>
        [DataMember(Name="credit_card", EmitDefaultValue=false)]
        public OrderPaymentCreditCard CreditCard { get; set; }
        /// <summary>
        /// Gets or Sets Echeck
        /// </summary>
        [DataMember(Name="echeck", EmitDefaultValue=false)]
        public OrderPaymentECheck Echeck { get; set; }
        /// <summary>
        /// True if order has been held for fraud review
        /// </summary>
        /// <value>True if order has been held for fraud review</value>
        [DataMember(Name="hold_for_fraud_review", EmitDefaultValue=false)]
        public bool? HoldForFraudReview { get; set; }
        /// <summary>
        /// Date/time that the payment was successfully processed
        /// </summary>
        /// <value>Date/time that the payment was successfully processed</value>
        [DataMember(Name="payment_dts", EmitDefaultValue=false)]
        public string PaymentDts { get; set; }
        /// <summary>
        /// Payment method QuickBooks code
        /// </summary>
        /// <value>Payment method QuickBooks code</value>
        [DataMember(Name="payment_method_accounting_code", EmitDefaultValue=false)]
        public string PaymentMethodAccountingCode { get; set; }
        /// <summary>
        /// Payment method QuickBooks deposit account
        /// </summary>
        /// <value>Payment method QuickBooks deposit account</value>
        [DataMember(Name="payment_method_deposit_to_account", EmitDefaultValue=false)]
        public string PaymentMethodDepositToAccount { get; set; }
        /// <summary>
        /// Gets or Sets PurchaseOrder
        /// </summary>
        [DataMember(Name="purchase_order", EmitDefaultValue=false)]
        public OrderPaymentPurchaseOrder PurchaseOrder { get; set; }
        /// <summary>
        /// Rotating transaction gateway code used to process this order
        /// </summary>
        /// <value>Rotating transaction gateway code used to process this order</value>
        [DataMember(Name="rotating_transaction_gateway_code", EmitDefaultValue=false)]
        public string RotatingTransactionGatewayCode { get; set; }
        /// <summary>
        /// Gets or Sets Surcharge
        /// </summary>
        [DataMember(Name="surcharge", EmitDefaultValue=false)]
        public Currency Surcharge { get; set; }
        /// <summary>
        /// Surcharge accounting code
        /// </summary>
        /// <value>Surcharge accounting code</value>
        [DataMember(Name="surcharge_accounting_code", EmitDefaultValue=false)]
        public string SurchargeAccountingCode { get; set; }
        /// <summary>
        /// Surcharge transaction fee
        /// </summary>
        /// <value>Surcharge transaction fee</value>
        [DataMember(Name="surcharge_transaction_fee", EmitDefaultValue=false)]
        public decimal? SurchargeTransactionFee { get; set; }
        /// <summary>
        /// Surcharge transaction percentage
        /// </summary>
        /// <value>Surcharge transaction percentage</value>
        [DataMember(Name="surcharge_transaction_percentage", EmitDefaultValue=false)]
        public decimal? SurchargeTransactionPercentage { get; set; }
        /// <summary>
        /// True if this is a test order
        /// </summary>
        /// <value>True if this is a test order</value>
        [DataMember(Name="test_order", EmitDefaultValue=false)]
        public bool? TestOrder { get; set; }
        /// <summary>
        /// Transactions associated with processing this payment
        /// </summary>
        /// <value>Transactions associated with processing this payment</value>
        [DataMember(Name="transactions", EmitDefaultValue=false)]
        public List<OrderPaymentTransaction> Transactions { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class OrderPayment {\n");
            sb.Append("  Check: ").Append(Check).Append("\n");
            sb.Append("  CreditCard: ").Append(CreditCard).Append("\n");
            sb.Append("  Echeck: ").Append(Echeck).Append("\n");
            sb.Append("  HoldForFraudReview: ").Append(HoldForFraudReview).Append("\n");
            sb.Append("  PaymentDts: ").Append(PaymentDts).Append("\n");
            sb.Append("  PaymentMethod: ").Append(PaymentMethod).Append("\n");
            sb.Append("  PaymentMethodAccountingCode: ").Append(PaymentMethodAccountingCode).Append("\n");
            sb.Append("  PaymentMethodDepositToAccount: ").Append(PaymentMethodDepositToAccount).Append("\n");
            sb.Append("  PaymentStatus: ").Append(PaymentStatus).Append("\n");
            sb.Append("  PurchaseOrder: ").Append(PurchaseOrder).Append("\n");
            sb.Append("  RotatingTransactionGatewayCode: ").Append(RotatingTransactionGatewayCode).Append("\n");
            sb.Append("  Surcharge: ").Append(Surcharge).Append("\n");
            sb.Append("  SurchargeAccountingCode: ").Append(SurchargeAccountingCode).Append("\n");
            sb.Append("  SurchargeTransactionFee: ").Append(SurchargeTransactionFee).Append("\n");
            sb.Append("  SurchargeTransactionPercentage: ").Append(SurchargeTransactionPercentage).Append("\n");
            sb.Append("  TestOrder: ").Append(TestOrder).Append("\n");
            sb.Append("  Transactions: ").Append(Transactions).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as OrderPayment);
        }

        /// <summary>
        /// Returns true if OrderPayment instances are equal
        /// </summary>
        /// <param name="other">Instance of OrderPayment to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(OrderPayment other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Check == other.Check ||
                    this.Check != null &&
                    this.Check.Equals(other.Check)
                ) && 
                (
                    this.CreditCard == other.CreditCard ||
                    this.CreditCard != null &&
                    this.CreditCard.Equals(other.CreditCard)
                ) && 
                (
                    this.Echeck == other.Echeck ||
                    this.Echeck != null &&
                    this.Echeck.Equals(other.Echeck)
                ) && 
                (
                    this.HoldForFraudReview == other.HoldForFraudReview ||
                    this.HoldForFraudReview != null &&
                    this.HoldForFraudReview.Equals(other.HoldForFraudReview)
                ) && 
                (
                    this.PaymentDts == other.PaymentDts ||
                    this.PaymentDts != null &&
                    this.PaymentDts.Equals(other.PaymentDts)
                ) && 
                (
                    this.PaymentMethod == other.PaymentMethod ||
                    this.PaymentMethod != null &&
                    this.PaymentMethod.Equals(other.PaymentMethod)
                ) && 
                (
                    this.PaymentMethodAccountingCode == other.PaymentMethodAccountingCode ||
                    this.PaymentMethodAccountingCode != null &&
                    this.PaymentMethodAccountingCode.Equals(other.PaymentMethodAccountingCode)
                ) && 
                (
                    this.PaymentMethodDepositToAccount == other.PaymentMethodDepositToAccount ||
                    this.PaymentMethodDepositToAccount != null &&
                    this.PaymentMethodDepositToAccount.Equals(other.PaymentMethodDepositToAccount)
                ) && 
                (
                    this.PaymentStatus == other.PaymentStatus ||
                    this.PaymentStatus != null &&
                    this.PaymentStatus.Equals(other.PaymentStatus)
                ) && 
                (
                    this.PurchaseOrder == other.PurchaseOrder ||
                    this.PurchaseOrder != null &&
                    this.PurchaseOrder.Equals(other.PurchaseOrder)
                ) && 
                (
                    this.RotatingTransactionGatewayCode == other.RotatingTransactionGatewayCode ||
                    this.RotatingTransactionGatewayCode != null &&
                    this.RotatingTransactionGatewayCode.Equals(other.RotatingTransactionGatewayCode)
                ) && 
                (
                    this.Surcharge == other.Surcharge ||
                    this.Surcharge != null &&
                    this.Surcharge.Equals(other.Surcharge)
                ) && 
                (
                    this.SurchargeAccountingCode == other.SurchargeAccountingCode ||
                    this.SurchargeAccountingCode != null &&
                    this.SurchargeAccountingCode.Equals(other.SurchargeAccountingCode)
                ) && 
                (
                    this.SurchargeTransactionFee == other.SurchargeTransactionFee ||
                    this.SurchargeTransactionFee != null &&
                    this.SurchargeTransactionFee.Equals(other.SurchargeTransactionFee)
                ) && 
                (
                    this.SurchargeTransactionPercentage == other.SurchargeTransactionPercentage ||
                    this.SurchargeTransactionPercentage != null &&
                    this.SurchargeTransactionPercentage.Equals(other.SurchargeTransactionPercentage)
                ) && 
                (
                    this.TestOrder == other.TestOrder ||
                    this.TestOrder != null &&
                    this.TestOrder.Equals(other.TestOrder)
                ) && 
                (
                    this.Transactions == other.Transactions ||
                    this.Transactions != null &&
                    this.Transactions.SequenceEqual(other.Transactions)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Check != null)
                    hash = hash * 59 + this.Check.GetHashCode();
                if (this.CreditCard != null)
                    hash = hash * 59 + this.CreditCard.GetHashCode();
                if (this.Echeck != null)
                    hash = hash * 59 + this.Echeck.GetHashCode();
                if (this.HoldForFraudReview != null)
                    hash = hash * 59 + this.HoldForFraudReview.GetHashCode();
                if (this.PaymentDts != null)
                    hash = hash * 59 + this.PaymentDts.GetHashCode();
                if (this.PaymentMethod != null)
                    hash = hash * 59 + this.PaymentMethod.GetHashCode();
                if (this.PaymentMethodAccountingCode != null)
                    hash = hash * 59 + this.PaymentMethodAccountingCode.GetHashCode();
                if (this.PaymentMethodDepositToAccount != null)
                    hash = hash * 59 + this.PaymentMethodDepositToAccount.GetHashCode();
                if (this.PaymentStatus != null)
                    hash = hash * 59 + this.PaymentStatus.GetHashCode();
                if (this.PurchaseOrder != null)
                    hash = hash * 59 + this.PurchaseOrder.GetHashCode();
                if (this.RotatingTransactionGatewayCode != null)
                    hash = hash * 59 + this.RotatingTransactionGatewayCode.GetHashCode();
                if (this.Surcharge != null)
                    hash = hash * 59 + this.Surcharge.GetHashCode();
                if (this.SurchargeAccountingCode != null)
                    hash = hash * 59 + this.SurchargeAccountingCode.GetHashCode();
                if (this.SurchargeTransactionFee != null)
                    hash = hash * 59 + this.SurchargeTransactionFee.GetHashCode();
                if (this.SurchargeTransactionPercentage != null)
                    hash = hash * 59 + this.SurchargeTransactionPercentage.GetHashCode();
                if (this.TestOrder != null)
                    hash = hash * 59 + this.TestOrder.GetHashCode();
                if (this.Transactions != null)
                    hash = hash * 59 + this.Transactions.GetHashCode();
                return hash;
            }
        }
    }

}
