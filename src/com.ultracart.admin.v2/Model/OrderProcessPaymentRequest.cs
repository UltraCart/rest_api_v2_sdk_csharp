/*
 * UltraCart Rest API V2
 *
 * UltraCart REST API Version 2
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@ultracart.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = com.ultracart.admin.v2.Client.OpenAPIDateConverter;

namespace com.ultracart.admin.v2.Model
{
    /// <summary>
    /// OrderProcessPaymentRequest
    /// </summary>
    [DataContract]
    public partial class OrderProcessPaymentRequest :  IEquatable<OrderProcessPaymentRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="OrderProcessPaymentRequest" /> class.
        /// </summary>
        /// <param name="amount">Specific amount to bill (optional).  If not specified the total of the order is billed..</param>
        /// <param name="cardVerificationNumberToken">Card verification number token from hosted fields used during credit card transaction processing (optional).</param>
        public OrderProcessPaymentRequest(decimal amount = default(decimal), string cardVerificationNumberToken = default(string))
        {
            this.Amount = amount;
            this.CardVerificationNumberToken = cardVerificationNumberToken;
        }

        /// <summary>
        /// Specific amount to bill (optional).  If not specified the total of the order is billed.
        /// </summary>
        /// <value>Specific amount to bill (optional).  If not specified the total of the order is billed.</value>
        [DataMember(Name="amount", EmitDefaultValue=false)]
        public decimal Amount { get; set; }

        /// <summary>
        /// Card verification number token from hosted fields used during credit card transaction processing (optional)
        /// </summary>
        /// <value>Card verification number token from hosted fields used during credit card transaction processing (optional)</value>
        [DataMember(Name="card_verification_number_token", EmitDefaultValue=false)]
        public string CardVerificationNumberToken { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class OrderProcessPaymentRequest {\n");
            sb.Append("  Amount: ").Append(Amount).Append("\n");
            sb.Append("  CardVerificationNumberToken: ").Append(CardVerificationNumberToken).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as OrderProcessPaymentRequest);
        }

        /// <summary>
        /// Returns true if OrderProcessPaymentRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of OrderProcessPaymentRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(OrderProcessPaymentRequest input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Amount == input.Amount ||
                    (this.Amount != null &&
                    this.Amount.Equals(input.Amount))
                ) && 
                (
                    this.CardVerificationNumberToken == input.CardVerificationNumberToken ||
                    (this.CardVerificationNumberToken != null &&
                    this.CardVerificationNumberToken.Equals(input.CardVerificationNumberToken))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Amount != null)
                    hashCode = hashCode * 59 + this.Amount.GetHashCode();
                if (this.CardVerificationNumberToken != null)
                    hashCode = hashCode * 59 + this.CardVerificationNumberToken.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
