/* 
 * UltraCart Rest API V2
 *
 * UltraCart REST API Version 2
 *
 * OpenAPI spec version: 2.0.0
 * Contact: support@ultracart.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = com.ultracart.admin.v2.Client.SwaggerDateConverter;

namespace com.ultracart.admin.v2.Model
{
    /// <summary>
    /// OrderQuery
    /// </summary>
    [DataContract]
    public partial class OrderQuery :  IEquatable<OrderQuery>, IValidatableObject
    {
        /// <summary>
        /// Current stage that the order is in.
        /// </summary>
        /// <value>Current stage that the order is in.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum CurrentStageEnum
        {
            
            /// <summary>
            /// Enum AccountsReceivable for value: Accounts Receivable
            /// </summary>
            [EnumMember(Value = "Accounts Receivable")]
            AccountsReceivable = 1,
            
            /// <summary>
            /// Enum PendingClearance for value: Pending Clearance
            /// </summary>
            [EnumMember(Value = "Pending Clearance")]
            PendingClearance = 2,
            
            /// <summary>
            /// Enum FraudReview for value: Fraud Review
            /// </summary>
            [EnumMember(Value = "Fraud Review")]
            FraudReview = 3,
            
            /// <summary>
            /// Enum Rejected for value: Rejected
            /// </summary>
            [EnumMember(Value = "Rejected")]
            Rejected = 4,
            
            /// <summary>
            /// Enum ShippingDepartment for value: Shipping Department
            /// </summary>
            [EnumMember(Value = "Shipping Department")]
            ShippingDepartment = 5,
            
            /// <summary>
            /// Enum CompletedOrder for value: Completed Order
            /// </summary>
            [EnumMember(Value = "Completed Order")]
            CompletedOrder = 6,
            
            /// <summary>
            /// Enum QuoteRequest for value: Quote Request
            /// </summary>
            [EnumMember(Value = "Quote Request")]
            QuoteRequest = 7,
            
            /// <summary>
            /// Enum QuoteSent for value: Quote Sent
            /// </summary>
            [EnumMember(Value = "Quote Sent")]
            QuoteSent = 8,
            
            /// <summary>
            /// Enum LeastCostRouting for value: Least Cost Routing
            /// </summary>
            [EnumMember(Value = "Least Cost Routing")]
            LeastCostRouting = 9,
            
            /// <summary>
            /// Enum Unknown for value: Unknown
            /// </summary>
            [EnumMember(Value = "Unknown")]
            Unknown = 10
        }

        /// <summary>
        /// Current stage that the order is in.
        /// </summary>
        /// <value>Current stage that the order is in.</value>
        [DataMember(Name="current_stage", EmitDefaultValue=false)]
        public CurrentStageEnum? CurrentStage { get; set; }
        /// <summary>
        /// Payment method
        /// </summary>
        /// <value>Payment method</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum PaymentMethodEnum
        {
            
            /// <summary>
            /// Enum Affirm for value: Affirm
            /// </summary>
            [EnumMember(Value = "Affirm")]
            Affirm = 1,
            
            /// <summary>
            /// Enum Amazon for value: Amazon
            /// </summary>
            [EnumMember(Value = "Amazon")]
            Amazon = 2,
            
            /// <summary>
            /// Enum AmazonSC for value: Amazon SC
            /// </summary>
            [EnumMember(Value = "Amazon SC")]
            AmazonSC = 3,
            
            /// <summary>
            /// Enum Cash for value: Cash
            /// </summary>
            [EnumMember(Value = "Cash")]
            Cash = 4,
            
            /// <summary>
            /// Enum Check for value: Check
            /// </summary>
            [EnumMember(Value = "Check")]
            Check = 5,
            
            /// <summary>
            /// Enum COD for value: COD
            /// </summary>
            [EnumMember(Value = "COD")]
            COD = 6,
            
            /// <summary>
            /// Enum CreditCard for value: Credit Card
            /// </summary>
            [EnumMember(Value = "Credit Card")]
            CreditCard = 7,
            
            /// <summary>
            /// Enum ECheck for value: eCheck
            /// </summary>
            [EnumMember(Value = "eCheck")]
            ECheck = 8,
            
            /// <summary>
            /// Enum LoanHero for value: LoanHero
            /// </summary>
            [EnumMember(Value = "LoanHero")]
            LoanHero = 9,
            
            /// <summary>
            /// Enum MoneyOrder for value: Money Order
            /// </summary>
            [EnumMember(Value = "Money Order")]
            MoneyOrder = 10,
            
            /// <summary>
            /// Enum PayPal for value: PayPal
            /// </summary>
            [EnumMember(Value = "PayPal")]
            PayPal = 11,
            
            /// <summary>
            /// Enum PurchaseOrder for value: Purchase Order
            /// </summary>
            [EnumMember(Value = "Purchase Order")]
            PurchaseOrder = 12,
            
            /// <summary>
            /// Enum QuoteRequest for value: Quote Request
            /// </summary>
            [EnumMember(Value = "Quote Request")]
            QuoteRequest = 13,
            
            /// <summary>
            /// Enum Unknown for value: Unknown
            /// </summary>
            [EnumMember(Value = "Unknown")]
            Unknown = 14,
            
            /// <summary>
            /// Enum WireTransfer for value: Wire Transfer
            /// </summary>
            [EnumMember(Value = "Wire Transfer")]
            WireTransfer = 15,
            
            /// <summary>
            /// Enum Venmo for value: Venmo
            /// </summary>
            [EnumMember(Value = "Venmo")]
            Venmo = 16,
            
            /// <summary>
            /// Enum ApplePay for value: Apple Pay
            /// </summary>
            [EnumMember(Value = "Apple Pay")]
            ApplePay = 17,
            
            /// <summary>
            /// Enum GooglePay for value:  Google Pay
            /// </summary>
            [EnumMember(Value = " Google Pay")]
            GooglePay = 18,
            
            /// <summary>
            /// Enum PayPalFastlane for value: PayPal Fastlane
            /// </summary>
            [EnumMember(Value = "PayPal Fastlane")]
            PayPalFastlane = 19
        }

        /// <summary>
        /// Payment method
        /// </summary>
        /// <value>Payment method</value>
        [DataMember(Name="payment_method", EmitDefaultValue=false)]
        public PaymentMethodEnum? PaymentMethod { get; set; }
        /// <summary>
        /// Query Target
        /// </summary>
        /// <value>Query Target</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum QueryTargetEnum
        {
            
            /// <summary>
            /// Enum Origin for value: origin
            /// </summary>
            [EnumMember(Value = "origin")]
            Origin = 1,
            
            /// <summary>
            /// Enum Cache for value: cache
            /// </summary>
            [EnumMember(Value = "cache")]
            Cache = 2
        }

        /// <summary>
        /// Query Target
        /// </summary>
        /// <value>Query Target</value>
        [DataMember(Name="query_target", EmitDefaultValue=false)]
        public QueryTargetEnum? QueryTarget { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="OrderQuery" /> class.
        /// </summary>
        /// <param name="ccEmail">CC Email.</param>
        /// <param name="channelPartnerCode">The code of the channel partner.</param>
        /// <param name="channelPartnerOrderId">The order ID assigned by the channel partner for this order.</param>
        /// <param name="city">City.</param>
        /// <param name="company">Company.</param>
        /// <param name="countryCode">ISO-3166 two letter country code.</param>
        /// <param name="creationDateBegin">Date/time that the order was created.</param>
        /// <param name="creationDateEnd">Date/time that the order was created.</param>
        /// <param name="currentStage">Current stage that the order is in..</param>
        /// <param name="customField1">Custom field 1.</param>
        /// <param name="customField10">Custom field 10.</param>
        /// <param name="customField2">Custom field 2.</param>
        /// <param name="customField3">Custom field 3.</param>
        /// <param name="customField4">Custom field 4.</param>
        /// <param name="customField5">Custom field 5.</param>
        /// <param name="customField6">Custom field 6.</param>
        /// <param name="customField7">Custom field 7.</param>
        /// <param name="customField8">Custom field 8.</param>
        /// <param name="customField9">Custom field 9.</param>
        /// <param name="customerProfileOid">The customer profile to find associated orders for.</param>
        /// <param name="email">Email.</param>
        /// <param name="firstName">First name.</param>
        /// <param name="itemId">Item ID.</param>
        /// <param name="lastName">Last name.</param>
        /// <param name="orderId">Order ID.</param>
        /// <param name="paymentDateBegin">Date/time that the order was successfully processed.</param>
        /// <param name="paymentDateEnd">Date/time that the order was successfully processed.</param>
        /// <param name="paymentMethod">Payment method.</param>
        /// <param name="phone">Phone.</param>
        /// <param name="postalCode">Postal code.</param>
        /// <param name="purchaseOrderNumber">Purchase order number.</param>
        /// <param name="queryTarget">Query Target.</param>
        /// <param name="refundDateBegin">Date/time that the order was refunded.</param>
        /// <param name="refundDateEnd">Date/time that the order was refunded.</param>
        /// <param name="rma">RMA number.</param>
        /// <param name="screenBrandingThemeCode">Screen branding theme code associated with the order (legacy checkout).</param>
        /// <param name="shipmentDateBegin">Date/time that the order was shipped.</param>
        /// <param name="shipmentDateEnd">Date/time that the order was shipped.</param>
        /// <param name="shippedOnDateBegin">Date/time that the order should ship on.</param>
        /// <param name="shippedOnDateEnd">Date/time that the order should ship on.</param>
        /// <param name="stateRegion">State for United States otherwise region or province for other countries.</param>
        /// <param name="storefrontHostName">StoreFront host name associated with the order.</param>
        /// <param name="total">Total.</param>
        public OrderQuery(string ccEmail = default(string), string channelPartnerCode = default(string), string channelPartnerOrderId = default(string), string city = default(string), string company = default(string), string countryCode = default(string), string creationDateBegin = default(string), string creationDateEnd = default(string), CurrentStageEnum? currentStage = default(CurrentStageEnum?), string customField1 = default(string), string customField10 = default(string), string customField2 = default(string), string customField3 = default(string), string customField4 = default(string), string customField5 = default(string), string customField6 = default(string), string customField7 = default(string), string customField8 = default(string), string customField9 = default(string), int? customerProfileOid = default(int?), string email = default(string), string firstName = default(string), string itemId = default(string), string lastName = default(string), string orderId = default(string), string paymentDateBegin = default(string), string paymentDateEnd = default(string), PaymentMethodEnum? paymentMethod = default(PaymentMethodEnum?), string phone = default(string), string postalCode = default(string), string purchaseOrderNumber = default(string), QueryTargetEnum? queryTarget = default(QueryTargetEnum?), string refundDateBegin = default(string), string refundDateEnd = default(string), string rma = default(string), string screenBrandingThemeCode = default(string), string shipmentDateBegin = default(string), string shipmentDateEnd = default(string), string shippedOnDateBegin = default(string), string shippedOnDateEnd = default(string), string stateRegion = default(string), string storefrontHostName = default(string), decimal? total = default(decimal?))
        {
            this.CcEmail = ccEmail;
            this.ChannelPartnerCode = channelPartnerCode;
            this.ChannelPartnerOrderId = channelPartnerOrderId;
            this.City = city;
            this.Company = company;
            this.CountryCode = countryCode;
            this.CreationDateBegin = creationDateBegin;
            this.CreationDateEnd = creationDateEnd;
            this.CurrentStage = currentStage;
            this.CustomField1 = customField1;
            this.CustomField10 = customField10;
            this.CustomField2 = customField2;
            this.CustomField3 = customField3;
            this.CustomField4 = customField4;
            this.CustomField5 = customField5;
            this.CustomField6 = customField6;
            this.CustomField7 = customField7;
            this.CustomField8 = customField8;
            this.CustomField9 = customField9;
            this.CustomerProfileOid = customerProfileOid;
            this.Email = email;
            this.FirstName = firstName;
            this.ItemId = itemId;
            this.LastName = lastName;
            this.OrderId = orderId;
            this.PaymentDateBegin = paymentDateBegin;
            this.PaymentDateEnd = paymentDateEnd;
            this.PaymentMethod = paymentMethod;
            this.Phone = phone;
            this.PostalCode = postalCode;
            this.PurchaseOrderNumber = purchaseOrderNumber;
            this.QueryTarget = queryTarget;
            this.RefundDateBegin = refundDateBegin;
            this.RefundDateEnd = refundDateEnd;
            this.Rma = rma;
            this.ScreenBrandingThemeCode = screenBrandingThemeCode;
            this.ShipmentDateBegin = shipmentDateBegin;
            this.ShipmentDateEnd = shipmentDateEnd;
            this.ShippedOnDateBegin = shippedOnDateBegin;
            this.ShippedOnDateEnd = shippedOnDateEnd;
            this.StateRegion = stateRegion;
            this.StorefrontHostName = storefrontHostName;
            this.Total = total;
        }
        
        /// <summary>
        /// CC Email
        /// </summary>
        /// <value>CC Email</value>
        [DataMember(Name="cc_email", EmitDefaultValue=false)]
        public string CcEmail { get; set; }

        /// <summary>
        /// The code of the channel partner
        /// </summary>
        /// <value>The code of the channel partner</value>
        [DataMember(Name="channel_partner_code", EmitDefaultValue=false)]
        public string ChannelPartnerCode { get; set; }

        /// <summary>
        /// The order ID assigned by the channel partner for this order
        /// </summary>
        /// <value>The order ID assigned by the channel partner for this order</value>
        [DataMember(Name="channel_partner_order_id", EmitDefaultValue=false)]
        public string ChannelPartnerOrderId { get; set; }

        /// <summary>
        /// City
        /// </summary>
        /// <value>City</value>
        [DataMember(Name="city", EmitDefaultValue=false)]
        public string City { get; set; }

        /// <summary>
        /// Company
        /// </summary>
        /// <value>Company</value>
        [DataMember(Name="company", EmitDefaultValue=false)]
        public string Company { get; set; }

        /// <summary>
        /// ISO-3166 two letter country code
        /// </summary>
        /// <value>ISO-3166 two letter country code</value>
        [DataMember(Name="country_code", EmitDefaultValue=false)]
        public string CountryCode { get; set; }

        /// <summary>
        /// Date/time that the order was created
        /// </summary>
        /// <value>Date/time that the order was created</value>
        [DataMember(Name="creation_date_begin", EmitDefaultValue=false)]
        public string CreationDateBegin { get; set; }

        /// <summary>
        /// Date/time that the order was created
        /// </summary>
        /// <value>Date/time that the order was created</value>
        [DataMember(Name="creation_date_end", EmitDefaultValue=false)]
        public string CreationDateEnd { get; set; }


        /// <summary>
        /// Custom field 1
        /// </summary>
        /// <value>Custom field 1</value>
        [DataMember(Name="custom_field_1", EmitDefaultValue=false)]
        public string CustomField1 { get; set; }

        /// <summary>
        /// Custom field 10
        /// </summary>
        /// <value>Custom field 10</value>
        [DataMember(Name="custom_field_10", EmitDefaultValue=false)]
        public string CustomField10 { get; set; }

        /// <summary>
        /// Custom field 2
        /// </summary>
        /// <value>Custom field 2</value>
        [DataMember(Name="custom_field_2", EmitDefaultValue=false)]
        public string CustomField2 { get; set; }

        /// <summary>
        /// Custom field 3
        /// </summary>
        /// <value>Custom field 3</value>
        [DataMember(Name="custom_field_3", EmitDefaultValue=false)]
        public string CustomField3 { get; set; }

        /// <summary>
        /// Custom field 4
        /// </summary>
        /// <value>Custom field 4</value>
        [DataMember(Name="custom_field_4", EmitDefaultValue=false)]
        public string CustomField4 { get; set; }

        /// <summary>
        /// Custom field 5
        /// </summary>
        /// <value>Custom field 5</value>
        [DataMember(Name="custom_field_5", EmitDefaultValue=false)]
        public string CustomField5 { get; set; }

        /// <summary>
        /// Custom field 6
        /// </summary>
        /// <value>Custom field 6</value>
        [DataMember(Name="custom_field_6", EmitDefaultValue=false)]
        public string CustomField6 { get; set; }

        /// <summary>
        /// Custom field 7
        /// </summary>
        /// <value>Custom field 7</value>
        [DataMember(Name="custom_field_7", EmitDefaultValue=false)]
        public string CustomField7 { get; set; }

        /// <summary>
        /// Custom field 8
        /// </summary>
        /// <value>Custom field 8</value>
        [DataMember(Name="custom_field_8", EmitDefaultValue=false)]
        public string CustomField8 { get; set; }

        /// <summary>
        /// Custom field 9
        /// </summary>
        /// <value>Custom field 9</value>
        [DataMember(Name="custom_field_9", EmitDefaultValue=false)]
        public string CustomField9 { get; set; }

        /// <summary>
        /// The customer profile to find associated orders for
        /// </summary>
        /// <value>The customer profile to find associated orders for</value>
        [DataMember(Name="customer_profile_oid", EmitDefaultValue=false)]
        public int? CustomerProfileOid { get; set; }

        /// <summary>
        /// Email
        /// </summary>
        /// <value>Email</value>
        [DataMember(Name="email", EmitDefaultValue=false)]
        public string Email { get; set; }

        /// <summary>
        /// First name
        /// </summary>
        /// <value>First name</value>
        [DataMember(Name="first_name", EmitDefaultValue=false)]
        public string FirstName { get; set; }

        /// <summary>
        /// Item ID
        /// </summary>
        /// <value>Item ID</value>
        [DataMember(Name="item_id", EmitDefaultValue=false)]
        public string ItemId { get; set; }

        /// <summary>
        /// Last name
        /// </summary>
        /// <value>Last name</value>
        [DataMember(Name="last_name", EmitDefaultValue=false)]
        public string LastName { get; set; }

        /// <summary>
        /// Order ID
        /// </summary>
        /// <value>Order ID</value>
        [DataMember(Name="order_id", EmitDefaultValue=false)]
        public string OrderId { get; set; }

        /// <summary>
        /// Date/time that the order was successfully processed
        /// </summary>
        /// <value>Date/time that the order was successfully processed</value>
        [DataMember(Name="payment_date_begin", EmitDefaultValue=false)]
        public string PaymentDateBegin { get; set; }

        /// <summary>
        /// Date/time that the order was successfully processed
        /// </summary>
        /// <value>Date/time that the order was successfully processed</value>
        [DataMember(Name="payment_date_end", EmitDefaultValue=false)]
        public string PaymentDateEnd { get; set; }


        /// <summary>
        /// Phone
        /// </summary>
        /// <value>Phone</value>
        [DataMember(Name="phone", EmitDefaultValue=false)]
        public string Phone { get; set; }

        /// <summary>
        /// Postal code
        /// </summary>
        /// <value>Postal code</value>
        [DataMember(Name="postal_code", EmitDefaultValue=false)]
        public string PostalCode { get; set; }

        /// <summary>
        /// Purchase order number
        /// </summary>
        /// <value>Purchase order number</value>
        [DataMember(Name="purchase_order_number", EmitDefaultValue=false)]
        public string PurchaseOrderNumber { get; set; }


        /// <summary>
        /// Date/time that the order was refunded
        /// </summary>
        /// <value>Date/time that the order was refunded</value>
        [DataMember(Name="refund_date_begin", EmitDefaultValue=false)]
        public string RefundDateBegin { get; set; }

        /// <summary>
        /// Date/time that the order was refunded
        /// </summary>
        /// <value>Date/time that the order was refunded</value>
        [DataMember(Name="refund_date_end", EmitDefaultValue=false)]
        public string RefundDateEnd { get; set; }

        /// <summary>
        /// RMA number
        /// </summary>
        /// <value>RMA number</value>
        [DataMember(Name="rma", EmitDefaultValue=false)]
        public string Rma { get; set; }

        /// <summary>
        /// Screen branding theme code associated with the order (legacy checkout)
        /// </summary>
        /// <value>Screen branding theme code associated with the order (legacy checkout)</value>
        [DataMember(Name="screen_branding_theme_code", EmitDefaultValue=false)]
        public string ScreenBrandingThemeCode { get; set; }

        /// <summary>
        /// Date/time that the order was shipped
        /// </summary>
        /// <value>Date/time that the order was shipped</value>
        [DataMember(Name="shipment_date_begin", EmitDefaultValue=false)]
        public string ShipmentDateBegin { get; set; }

        /// <summary>
        /// Date/time that the order was shipped
        /// </summary>
        /// <value>Date/time that the order was shipped</value>
        [DataMember(Name="shipment_date_end", EmitDefaultValue=false)]
        public string ShipmentDateEnd { get; set; }

        /// <summary>
        /// Date/time that the order should ship on
        /// </summary>
        /// <value>Date/time that the order should ship on</value>
        [DataMember(Name="shipped_on_date_begin", EmitDefaultValue=false)]
        public string ShippedOnDateBegin { get; set; }

        /// <summary>
        /// Date/time that the order should ship on
        /// </summary>
        /// <value>Date/time that the order should ship on</value>
        [DataMember(Name="shipped_on_date_end", EmitDefaultValue=false)]
        public string ShippedOnDateEnd { get; set; }

        /// <summary>
        /// State for United States otherwise region or province for other countries
        /// </summary>
        /// <value>State for United States otherwise region or province for other countries</value>
        [DataMember(Name="state_region", EmitDefaultValue=false)]
        public string StateRegion { get; set; }

        /// <summary>
        /// StoreFront host name associated with the order
        /// </summary>
        /// <value>StoreFront host name associated with the order</value>
        [DataMember(Name="storefront_host_name", EmitDefaultValue=false)]
        public string StorefrontHostName { get; set; }

        /// <summary>
        /// Total
        /// </summary>
        /// <value>Total</value>
        [DataMember(Name="total", EmitDefaultValue=false)]
        public decimal? Total { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class OrderQuery {\n");
            sb.Append("  CcEmail: ").Append(CcEmail).Append("\n");
            sb.Append("  ChannelPartnerCode: ").Append(ChannelPartnerCode).Append("\n");
            sb.Append("  ChannelPartnerOrderId: ").Append(ChannelPartnerOrderId).Append("\n");
            sb.Append("  City: ").Append(City).Append("\n");
            sb.Append("  Company: ").Append(Company).Append("\n");
            sb.Append("  CountryCode: ").Append(CountryCode).Append("\n");
            sb.Append("  CreationDateBegin: ").Append(CreationDateBegin).Append("\n");
            sb.Append("  CreationDateEnd: ").Append(CreationDateEnd).Append("\n");
            sb.Append("  CurrentStage: ").Append(CurrentStage).Append("\n");
            sb.Append("  CustomField1: ").Append(CustomField1).Append("\n");
            sb.Append("  CustomField10: ").Append(CustomField10).Append("\n");
            sb.Append("  CustomField2: ").Append(CustomField2).Append("\n");
            sb.Append("  CustomField3: ").Append(CustomField3).Append("\n");
            sb.Append("  CustomField4: ").Append(CustomField4).Append("\n");
            sb.Append("  CustomField5: ").Append(CustomField5).Append("\n");
            sb.Append("  CustomField6: ").Append(CustomField6).Append("\n");
            sb.Append("  CustomField7: ").Append(CustomField7).Append("\n");
            sb.Append("  CustomField8: ").Append(CustomField8).Append("\n");
            sb.Append("  CustomField9: ").Append(CustomField9).Append("\n");
            sb.Append("  CustomerProfileOid: ").Append(CustomerProfileOid).Append("\n");
            sb.Append("  Email: ").Append(Email).Append("\n");
            sb.Append("  FirstName: ").Append(FirstName).Append("\n");
            sb.Append("  ItemId: ").Append(ItemId).Append("\n");
            sb.Append("  LastName: ").Append(LastName).Append("\n");
            sb.Append("  OrderId: ").Append(OrderId).Append("\n");
            sb.Append("  PaymentDateBegin: ").Append(PaymentDateBegin).Append("\n");
            sb.Append("  PaymentDateEnd: ").Append(PaymentDateEnd).Append("\n");
            sb.Append("  PaymentMethod: ").Append(PaymentMethod).Append("\n");
            sb.Append("  Phone: ").Append(Phone).Append("\n");
            sb.Append("  PostalCode: ").Append(PostalCode).Append("\n");
            sb.Append("  PurchaseOrderNumber: ").Append(PurchaseOrderNumber).Append("\n");
            sb.Append("  QueryTarget: ").Append(QueryTarget).Append("\n");
            sb.Append("  RefundDateBegin: ").Append(RefundDateBegin).Append("\n");
            sb.Append("  RefundDateEnd: ").Append(RefundDateEnd).Append("\n");
            sb.Append("  Rma: ").Append(Rma).Append("\n");
            sb.Append("  ScreenBrandingThemeCode: ").Append(ScreenBrandingThemeCode).Append("\n");
            sb.Append("  ShipmentDateBegin: ").Append(ShipmentDateBegin).Append("\n");
            sb.Append("  ShipmentDateEnd: ").Append(ShipmentDateEnd).Append("\n");
            sb.Append("  ShippedOnDateBegin: ").Append(ShippedOnDateBegin).Append("\n");
            sb.Append("  ShippedOnDateEnd: ").Append(ShippedOnDateEnd).Append("\n");
            sb.Append("  StateRegion: ").Append(StateRegion).Append("\n");
            sb.Append("  StorefrontHostName: ").Append(StorefrontHostName).Append("\n");
            sb.Append("  Total: ").Append(Total).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as OrderQuery);
        }

        /// <summary>
        /// Returns true if OrderQuery instances are equal
        /// </summary>
        /// <param name="input">Instance of OrderQuery to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(OrderQuery input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.CcEmail == input.CcEmail ||
                    (this.CcEmail != null &&
                    this.CcEmail.Equals(input.CcEmail))
                ) && 
                (
                    this.ChannelPartnerCode == input.ChannelPartnerCode ||
                    (this.ChannelPartnerCode != null &&
                    this.ChannelPartnerCode.Equals(input.ChannelPartnerCode))
                ) && 
                (
                    this.ChannelPartnerOrderId == input.ChannelPartnerOrderId ||
                    (this.ChannelPartnerOrderId != null &&
                    this.ChannelPartnerOrderId.Equals(input.ChannelPartnerOrderId))
                ) && 
                (
                    this.City == input.City ||
                    (this.City != null &&
                    this.City.Equals(input.City))
                ) && 
                (
                    this.Company == input.Company ||
                    (this.Company != null &&
                    this.Company.Equals(input.Company))
                ) && 
                (
                    this.CountryCode == input.CountryCode ||
                    (this.CountryCode != null &&
                    this.CountryCode.Equals(input.CountryCode))
                ) && 
                (
                    this.CreationDateBegin == input.CreationDateBegin ||
                    (this.CreationDateBegin != null &&
                    this.CreationDateBegin.Equals(input.CreationDateBegin))
                ) && 
                (
                    this.CreationDateEnd == input.CreationDateEnd ||
                    (this.CreationDateEnd != null &&
                    this.CreationDateEnd.Equals(input.CreationDateEnd))
                ) && 
                (
                    this.CurrentStage == input.CurrentStage ||
                    (this.CurrentStage != null &&
                    this.CurrentStage.Equals(input.CurrentStage))
                ) && 
                (
                    this.CustomField1 == input.CustomField1 ||
                    (this.CustomField1 != null &&
                    this.CustomField1.Equals(input.CustomField1))
                ) && 
                (
                    this.CustomField10 == input.CustomField10 ||
                    (this.CustomField10 != null &&
                    this.CustomField10.Equals(input.CustomField10))
                ) && 
                (
                    this.CustomField2 == input.CustomField2 ||
                    (this.CustomField2 != null &&
                    this.CustomField2.Equals(input.CustomField2))
                ) && 
                (
                    this.CustomField3 == input.CustomField3 ||
                    (this.CustomField3 != null &&
                    this.CustomField3.Equals(input.CustomField3))
                ) && 
                (
                    this.CustomField4 == input.CustomField4 ||
                    (this.CustomField4 != null &&
                    this.CustomField4.Equals(input.CustomField4))
                ) && 
                (
                    this.CustomField5 == input.CustomField5 ||
                    (this.CustomField5 != null &&
                    this.CustomField5.Equals(input.CustomField5))
                ) && 
                (
                    this.CustomField6 == input.CustomField6 ||
                    (this.CustomField6 != null &&
                    this.CustomField6.Equals(input.CustomField6))
                ) && 
                (
                    this.CustomField7 == input.CustomField7 ||
                    (this.CustomField7 != null &&
                    this.CustomField7.Equals(input.CustomField7))
                ) && 
                (
                    this.CustomField8 == input.CustomField8 ||
                    (this.CustomField8 != null &&
                    this.CustomField8.Equals(input.CustomField8))
                ) && 
                (
                    this.CustomField9 == input.CustomField9 ||
                    (this.CustomField9 != null &&
                    this.CustomField9.Equals(input.CustomField9))
                ) && 
                (
                    this.CustomerProfileOid == input.CustomerProfileOid ||
                    (this.CustomerProfileOid != null &&
                    this.CustomerProfileOid.Equals(input.CustomerProfileOid))
                ) && 
                (
                    this.Email == input.Email ||
                    (this.Email != null &&
                    this.Email.Equals(input.Email))
                ) && 
                (
                    this.FirstName == input.FirstName ||
                    (this.FirstName != null &&
                    this.FirstName.Equals(input.FirstName))
                ) && 
                (
                    this.ItemId == input.ItemId ||
                    (this.ItemId != null &&
                    this.ItemId.Equals(input.ItemId))
                ) && 
                (
                    this.LastName == input.LastName ||
                    (this.LastName != null &&
                    this.LastName.Equals(input.LastName))
                ) && 
                (
                    this.OrderId == input.OrderId ||
                    (this.OrderId != null &&
                    this.OrderId.Equals(input.OrderId))
                ) && 
                (
                    this.PaymentDateBegin == input.PaymentDateBegin ||
                    (this.PaymentDateBegin != null &&
                    this.PaymentDateBegin.Equals(input.PaymentDateBegin))
                ) && 
                (
                    this.PaymentDateEnd == input.PaymentDateEnd ||
                    (this.PaymentDateEnd != null &&
                    this.PaymentDateEnd.Equals(input.PaymentDateEnd))
                ) && 
                (
                    this.PaymentMethod == input.PaymentMethod ||
                    (this.PaymentMethod != null &&
                    this.PaymentMethod.Equals(input.PaymentMethod))
                ) && 
                (
                    this.Phone == input.Phone ||
                    (this.Phone != null &&
                    this.Phone.Equals(input.Phone))
                ) && 
                (
                    this.PostalCode == input.PostalCode ||
                    (this.PostalCode != null &&
                    this.PostalCode.Equals(input.PostalCode))
                ) && 
                (
                    this.PurchaseOrderNumber == input.PurchaseOrderNumber ||
                    (this.PurchaseOrderNumber != null &&
                    this.PurchaseOrderNumber.Equals(input.PurchaseOrderNumber))
                ) && 
                (
                    this.QueryTarget == input.QueryTarget ||
                    (this.QueryTarget != null &&
                    this.QueryTarget.Equals(input.QueryTarget))
                ) && 
                (
                    this.RefundDateBegin == input.RefundDateBegin ||
                    (this.RefundDateBegin != null &&
                    this.RefundDateBegin.Equals(input.RefundDateBegin))
                ) && 
                (
                    this.RefundDateEnd == input.RefundDateEnd ||
                    (this.RefundDateEnd != null &&
                    this.RefundDateEnd.Equals(input.RefundDateEnd))
                ) && 
                (
                    this.Rma == input.Rma ||
                    (this.Rma != null &&
                    this.Rma.Equals(input.Rma))
                ) && 
                (
                    this.ScreenBrandingThemeCode == input.ScreenBrandingThemeCode ||
                    (this.ScreenBrandingThemeCode != null &&
                    this.ScreenBrandingThemeCode.Equals(input.ScreenBrandingThemeCode))
                ) && 
                (
                    this.ShipmentDateBegin == input.ShipmentDateBegin ||
                    (this.ShipmentDateBegin != null &&
                    this.ShipmentDateBegin.Equals(input.ShipmentDateBegin))
                ) && 
                (
                    this.ShipmentDateEnd == input.ShipmentDateEnd ||
                    (this.ShipmentDateEnd != null &&
                    this.ShipmentDateEnd.Equals(input.ShipmentDateEnd))
                ) && 
                (
                    this.ShippedOnDateBegin == input.ShippedOnDateBegin ||
                    (this.ShippedOnDateBegin != null &&
                    this.ShippedOnDateBegin.Equals(input.ShippedOnDateBegin))
                ) && 
                (
                    this.ShippedOnDateEnd == input.ShippedOnDateEnd ||
                    (this.ShippedOnDateEnd != null &&
                    this.ShippedOnDateEnd.Equals(input.ShippedOnDateEnd))
                ) && 
                (
                    this.StateRegion == input.StateRegion ||
                    (this.StateRegion != null &&
                    this.StateRegion.Equals(input.StateRegion))
                ) && 
                (
                    this.StorefrontHostName == input.StorefrontHostName ||
                    (this.StorefrontHostName != null &&
                    this.StorefrontHostName.Equals(input.StorefrontHostName))
                ) && 
                (
                    this.Total == input.Total ||
                    (this.Total != null &&
                    this.Total.Equals(input.Total))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.CcEmail != null)
                    hashCode = hashCode * 59 + this.CcEmail.GetHashCode();
                if (this.ChannelPartnerCode != null)
                    hashCode = hashCode * 59 + this.ChannelPartnerCode.GetHashCode();
                if (this.ChannelPartnerOrderId != null)
                    hashCode = hashCode * 59 + this.ChannelPartnerOrderId.GetHashCode();
                if (this.City != null)
                    hashCode = hashCode * 59 + this.City.GetHashCode();
                if (this.Company != null)
                    hashCode = hashCode * 59 + this.Company.GetHashCode();
                if (this.CountryCode != null)
                    hashCode = hashCode * 59 + this.CountryCode.GetHashCode();
                if (this.CreationDateBegin != null)
                    hashCode = hashCode * 59 + this.CreationDateBegin.GetHashCode();
                if (this.CreationDateEnd != null)
                    hashCode = hashCode * 59 + this.CreationDateEnd.GetHashCode();
                if (this.CurrentStage != null)
                    hashCode = hashCode * 59 + this.CurrentStage.GetHashCode();
                if (this.CustomField1 != null)
                    hashCode = hashCode * 59 + this.CustomField1.GetHashCode();
                if (this.CustomField10 != null)
                    hashCode = hashCode * 59 + this.CustomField10.GetHashCode();
                if (this.CustomField2 != null)
                    hashCode = hashCode * 59 + this.CustomField2.GetHashCode();
                if (this.CustomField3 != null)
                    hashCode = hashCode * 59 + this.CustomField3.GetHashCode();
                if (this.CustomField4 != null)
                    hashCode = hashCode * 59 + this.CustomField4.GetHashCode();
                if (this.CustomField5 != null)
                    hashCode = hashCode * 59 + this.CustomField5.GetHashCode();
                if (this.CustomField6 != null)
                    hashCode = hashCode * 59 + this.CustomField6.GetHashCode();
                if (this.CustomField7 != null)
                    hashCode = hashCode * 59 + this.CustomField7.GetHashCode();
                if (this.CustomField8 != null)
                    hashCode = hashCode * 59 + this.CustomField8.GetHashCode();
                if (this.CustomField9 != null)
                    hashCode = hashCode * 59 + this.CustomField9.GetHashCode();
                if (this.CustomerProfileOid != null)
                    hashCode = hashCode * 59 + this.CustomerProfileOid.GetHashCode();
                if (this.Email != null)
                    hashCode = hashCode * 59 + this.Email.GetHashCode();
                if (this.FirstName != null)
                    hashCode = hashCode * 59 + this.FirstName.GetHashCode();
                if (this.ItemId != null)
                    hashCode = hashCode * 59 + this.ItemId.GetHashCode();
                if (this.LastName != null)
                    hashCode = hashCode * 59 + this.LastName.GetHashCode();
                if (this.OrderId != null)
                    hashCode = hashCode * 59 + this.OrderId.GetHashCode();
                if (this.PaymentDateBegin != null)
                    hashCode = hashCode * 59 + this.PaymentDateBegin.GetHashCode();
                if (this.PaymentDateEnd != null)
                    hashCode = hashCode * 59 + this.PaymentDateEnd.GetHashCode();
                if (this.PaymentMethod != null)
                    hashCode = hashCode * 59 + this.PaymentMethod.GetHashCode();
                if (this.Phone != null)
                    hashCode = hashCode * 59 + this.Phone.GetHashCode();
                if (this.PostalCode != null)
                    hashCode = hashCode * 59 + this.PostalCode.GetHashCode();
                if (this.PurchaseOrderNumber != null)
                    hashCode = hashCode * 59 + this.PurchaseOrderNumber.GetHashCode();
                if (this.QueryTarget != null)
                    hashCode = hashCode * 59 + this.QueryTarget.GetHashCode();
                if (this.RefundDateBegin != null)
                    hashCode = hashCode * 59 + this.RefundDateBegin.GetHashCode();
                if (this.RefundDateEnd != null)
                    hashCode = hashCode * 59 + this.RefundDateEnd.GetHashCode();
                if (this.Rma != null)
                    hashCode = hashCode * 59 + this.Rma.GetHashCode();
                if (this.ScreenBrandingThemeCode != null)
                    hashCode = hashCode * 59 + this.ScreenBrandingThemeCode.GetHashCode();
                if (this.ShipmentDateBegin != null)
                    hashCode = hashCode * 59 + this.ShipmentDateBegin.GetHashCode();
                if (this.ShipmentDateEnd != null)
                    hashCode = hashCode * 59 + this.ShipmentDateEnd.GetHashCode();
                if (this.ShippedOnDateBegin != null)
                    hashCode = hashCode * 59 + this.ShippedOnDateBegin.GetHashCode();
                if (this.ShippedOnDateEnd != null)
                    hashCode = hashCode * 59 + this.ShippedOnDateEnd.GetHashCode();
                if (this.StateRegion != null)
                    hashCode = hashCode * 59 + this.StateRegion.GetHashCode();
                if (this.StorefrontHostName != null)
                    hashCode = hashCode * 59 + this.StorefrontHostName.GetHashCode();
                if (this.Total != null)
                    hashCode = hashCode * 59 + this.Total.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // CcEmail (string) maxLength
            if(this.CcEmail != null && this.CcEmail.Length > 100)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for CcEmail, length must be less than 100.", new [] { "CcEmail" });
            }

            // City (string) maxLength
            if(this.City != null && this.City.Length > 32)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for City, length must be less than 32.", new [] { "City" });
            }

            // Company (string) maxLength
            if(this.Company != null && this.Company.Length > 50)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Company, length must be less than 50.", new [] { "Company" });
            }

            // CountryCode (string) maxLength
            if(this.CountryCode != null && this.CountryCode.Length > 2)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for CountryCode, length must be less than 2.", new [] { "CountryCode" });
            }

            // Email (string) maxLength
            if(this.Email != null && this.Email.Length > 100)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Email, length must be less than 100.", new [] { "Email" });
            }

            // FirstName (string) maxLength
            if(this.FirstName != null && this.FirstName.Length > 30)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for FirstName, length must be less than 30.", new [] { "FirstName" });
            }

            // LastName (string) maxLength
            if(this.LastName != null && this.LastName.Length > 30)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for LastName, length must be less than 30.", new [] { "LastName" });
            }

            // Phone (string) maxLength
            if(this.Phone != null && this.Phone.Length > 25)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Phone, length must be less than 25.", new [] { "Phone" });
            }

            // PostalCode (string) maxLength
            if(this.PostalCode != null && this.PostalCode.Length > 20)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for PostalCode, length must be less than 20.", new [] { "PostalCode" });
            }

            // Rma (string) maxLength
            if(this.Rma != null && this.Rma.Length > 30)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Rma, length must be less than 30.", new [] { "Rma" });
            }

            // ScreenBrandingThemeCode (string) maxLength
            if(this.ScreenBrandingThemeCode != null && this.ScreenBrandingThemeCode.Length > 10)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ScreenBrandingThemeCode, length must be less than 10.", new [] { "ScreenBrandingThemeCode" });
            }

            // StateRegion (string) maxLength
            if(this.StateRegion != null && this.StateRegion.Length > 32)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for StateRegion, length must be less than 32.", new [] { "StateRegion" });
            }

            yield break;
        }
    }

}
