/* 
 * UltraCart Rest API V2
 *
 * This is the next generation UltraCart REST API...
 *
 * OpenAPI spec version: 2.0.0
 * Contact: support@ultracart.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = com.ultracart.admin.v2.Client.SwaggerDateConverter;

namespace com.ultracart.admin.v2.Model
{
    /// <summary>
    /// OrderQuery
    /// </summary>
    [DataContract]
    public partial class OrderQuery :  IEquatable<OrderQuery>, IValidatableObject
    {
        /// <summary>
        /// Current stage that the order is in.
        /// </summary>
        /// <value>Current stage that the order is in.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum CurrentStageEnum
        {
            
            /// <summary>
            /// Enum AccountsReceivable for "Accounts Receivable"
            /// </summary>
            [EnumMember(Value = "Accounts Receivable")]
            AccountsReceivable,
            
            /// <summary>
            /// Enum PendingClearance for "Pending Clearance"
            /// </summary>
            [EnumMember(Value = "Pending Clearance")]
            PendingClearance,
            
            /// <summary>
            /// Enum FraudReview for "Fraud Review"
            /// </summary>
            [EnumMember(Value = "Fraud Review")]
            FraudReview,
            
            /// <summary>
            /// Enum Rejected for "Rejected"
            /// </summary>
            [EnumMember(Value = "Rejected")]
            Rejected,
            
            /// <summary>
            /// Enum ShippingDepartment for "Shipping Department"
            /// </summary>
            [EnumMember(Value = "Shipping Department")]
            ShippingDepartment,
            
            /// <summary>
            /// Enum CompletedOrder for "Completed Order"
            /// </summary>
            [EnumMember(Value = "Completed Order")]
            CompletedOrder,
            
            /// <summary>
            /// Enum QuoteRequest for "Quote Request"
            /// </summary>
            [EnumMember(Value = "Quote Request")]
            QuoteRequest,
            
            /// <summary>
            /// Enum QuoteSent for "Quote Sent"
            /// </summary>
            [EnumMember(Value = "Quote Sent")]
            QuoteSent,
            
            /// <summary>
            /// Enum LeastCostRouting for "Least Cost Routing"
            /// </summary>
            [EnumMember(Value = "Least Cost Routing")]
            LeastCostRouting,
            
            /// <summary>
            /// Enum Unknown for "Unknown"
            /// </summary>
            [EnumMember(Value = "Unknown")]
            Unknown
        }

        /// <summary>
        /// Payment method
        /// </summary>
        /// <value>Payment method</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum PaymentMethodEnum
        {
            
            /// <summary>
            /// Enum Affirm for "Affirm"
            /// </summary>
            [EnumMember(Value = "Affirm")]
            Affirm,
            
            /// <summary>
            /// Enum Amazon for "Amazon"
            /// </summary>
            [EnumMember(Value = "Amazon")]
            Amazon,
            
            /// <summary>
            /// Enum AmazonSC for "Amazon SC"
            /// </summary>
            [EnumMember(Value = "Amazon SC")]
            AmazonSC,
            
            /// <summary>
            /// Enum Cash for "Cash"
            /// </summary>
            [EnumMember(Value = "Cash")]
            Cash,
            
            /// <summary>
            /// Enum Check for "Check"
            /// </summary>
            [EnumMember(Value = "Check")]
            Check,
            
            /// <summary>
            /// Enum COD for "COD"
            /// </summary>
            [EnumMember(Value = "COD")]
            COD,
            
            /// <summary>
            /// Enum Coinbase for "Coinbase"
            /// </summary>
            [EnumMember(Value = "Coinbase")]
            Coinbase,
            
            /// <summary>
            /// Enum CreditCard for "Credit Card"
            /// </summary>
            [EnumMember(Value = "Credit Card")]
            CreditCard,
            
            /// <summary>
            /// Enum ECheck for "eCheck"
            /// </summary>
            [EnumMember(Value = "eCheck")]
            ECheck,
            
            /// <summary>
            /// Enum MoneyOrder for "Money Order"
            /// </summary>
            [EnumMember(Value = "Money Order")]
            MoneyOrder,
            
            /// <summary>
            /// Enum PayPal for "PayPal"
            /// </summary>
            [EnumMember(Value = "PayPal")]
            PayPal,
            
            /// <summary>
            /// Enum PurchaseOrder for "Purchase Order"
            /// </summary>
            [EnumMember(Value = "Purchase Order")]
            PurchaseOrder,
            
            /// <summary>
            /// Enum QuoteRequest for "Quote Request"
            /// </summary>
            [EnumMember(Value = "Quote Request")]
            QuoteRequest,
            
            /// <summary>
            /// Enum Unknown for "Unknown"
            /// </summary>
            [EnumMember(Value = "Unknown")]
            Unknown,
            
            /// <summary>
            /// Enum WireTransfer for "Wire Transfer"
            /// </summary>
            [EnumMember(Value = "Wire Transfer")]
            WireTransfer
        }

        /// <summary>
        /// Current stage that the order is in.
        /// </summary>
        /// <value>Current stage that the order is in.</value>
        [DataMember(Name="current_stage", EmitDefaultValue=false)]
        public CurrentStageEnum? CurrentStage { get; set; }
        /// <summary>
        /// Payment method
        /// </summary>
        /// <value>Payment method</value>
        [DataMember(Name="payment_method", EmitDefaultValue=false)]
        public PaymentMethodEnum? PaymentMethod { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="OrderQuery" /> class.
        /// </summary>
        /// <param name="CcEmail">CC Email.</param>
        /// <param name="ChannelPartnerCode">The code of the channel partner.</param>
        /// <param name="ChannelPartnerOrderId">The order ID assigned by the channel partner for this order.</param>
        /// <param name="City">City.</param>
        /// <param name="Company">Company.</param>
        /// <param name="CountryCode">ISO-3166 two letter country code.</param>
        /// <param name="CreationDateBegin">Date/time that the order was created.</param>
        /// <param name="CreationDateEnd">Date/time that the order was created.</param>
        /// <param name="CurrentStage">Current stage that the order is in..</param>
        /// <param name="Email">Email.</param>
        /// <param name="FirstName">First name.</param>
        /// <param name="ItemId">Item ID.</param>
        /// <param name="LastName">Last name.</param>
        /// <param name="OrderId">Order ID.</param>
        /// <param name="PaymentDateBegin">Date/time that the order was successfully processed.</param>
        /// <param name="PaymentDateEnd">Date/time that the order was successfully processed.</param>
        /// <param name="PaymentMethod">Payment method.</param>
        /// <param name="Phone">Phone.</param>
        /// <param name="PostalCode">Postal code.</param>
        /// <param name="PurchaseOrderNumber">Purchase order number.</param>
        /// <param name="Rma">RMA number.</param>
        /// <param name="ScreenBrandingThemeCode">Screen branding theme code associated with the order (legacy checkout).</param>
        /// <param name="ShipmentDateBegin">Date/time that the order was shipping.</param>
        /// <param name="ShipmentDateEnd">Date/time that the order was shipped.</param>
        /// <param name="StateRegion">State for United States otherwise region or province for other countries.</param>
        /// <param name="StorefrontHostName">StoreFront host name associated with the order.</param>
        /// <param name="Total">Total.</param>
        public OrderQuery(string CcEmail = default(string), string ChannelPartnerCode = default(string), string ChannelPartnerOrderId = default(string), string City = default(string), string Company = default(string), string CountryCode = default(string), string CreationDateBegin = default(string), string CreationDateEnd = default(string), CurrentStageEnum? CurrentStage = default(CurrentStageEnum?), string Email = default(string), string FirstName = default(string), string ItemId = default(string), string LastName = default(string), string OrderId = default(string), string PaymentDateBegin = default(string), string PaymentDateEnd = default(string), PaymentMethodEnum? PaymentMethod = default(PaymentMethodEnum?), string Phone = default(string), string PostalCode = default(string), string PurchaseOrderNumber = default(string), string Rma = default(string), string ScreenBrandingThemeCode = default(string), string ShipmentDateBegin = default(string), string ShipmentDateEnd = default(string), string StateRegion = default(string), string StorefrontHostName = default(string), decimal? Total = default(decimal?))
        {
            this.CcEmail = CcEmail;
            this.ChannelPartnerCode = ChannelPartnerCode;
            this.ChannelPartnerOrderId = ChannelPartnerOrderId;
            this.City = City;
            this.Company = Company;
            this.CountryCode = CountryCode;
            this.CreationDateBegin = CreationDateBegin;
            this.CreationDateEnd = CreationDateEnd;
            this.CurrentStage = CurrentStage;
            this.Email = Email;
            this.FirstName = FirstName;
            this.ItemId = ItemId;
            this.LastName = LastName;
            this.OrderId = OrderId;
            this.PaymentDateBegin = PaymentDateBegin;
            this.PaymentDateEnd = PaymentDateEnd;
            this.PaymentMethod = PaymentMethod;
            this.Phone = Phone;
            this.PostalCode = PostalCode;
            this.PurchaseOrderNumber = PurchaseOrderNumber;
            this.Rma = Rma;
            this.ScreenBrandingThemeCode = ScreenBrandingThemeCode;
            this.ShipmentDateBegin = ShipmentDateBegin;
            this.ShipmentDateEnd = ShipmentDateEnd;
            this.StateRegion = StateRegion;
            this.StorefrontHostName = StorefrontHostName;
            this.Total = Total;
        }
        
        /// <summary>
        /// CC Email
        /// </summary>
        /// <value>CC Email</value>
        [DataMember(Name="cc_email", EmitDefaultValue=false)]
        public string CcEmail { get; set; }

        /// <summary>
        /// The code of the channel partner
        /// </summary>
        /// <value>The code of the channel partner</value>
        [DataMember(Name="channel_partner_code", EmitDefaultValue=false)]
        public string ChannelPartnerCode { get; set; }

        /// <summary>
        /// The order ID assigned by the channel partner for this order
        /// </summary>
        /// <value>The order ID assigned by the channel partner for this order</value>
        [DataMember(Name="channel_partner_order_id", EmitDefaultValue=false)]
        public string ChannelPartnerOrderId { get; set; }

        /// <summary>
        /// City
        /// </summary>
        /// <value>City</value>
        [DataMember(Name="city", EmitDefaultValue=false)]
        public string City { get; set; }

        /// <summary>
        /// Company
        /// </summary>
        /// <value>Company</value>
        [DataMember(Name="company", EmitDefaultValue=false)]
        public string Company { get; set; }

        /// <summary>
        /// ISO-3166 two letter country code
        /// </summary>
        /// <value>ISO-3166 two letter country code</value>
        [DataMember(Name="country_code", EmitDefaultValue=false)]
        public string CountryCode { get; set; }

        /// <summary>
        /// Date/time that the order was created
        /// </summary>
        /// <value>Date/time that the order was created</value>
        [DataMember(Name="creation_date_begin", EmitDefaultValue=false)]
        public string CreationDateBegin { get; set; }

        /// <summary>
        /// Date/time that the order was created
        /// </summary>
        /// <value>Date/time that the order was created</value>
        [DataMember(Name="creation_date_end", EmitDefaultValue=false)]
        public string CreationDateEnd { get; set; }


        /// <summary>
        /// Email
        /// </summary>
        /// <value>Email</value>
        [DataMember(Name="email", EmitDefaultValue=false)]
        public string Email { get; set; }

        /// <summary>
        /// First name
        /// </summary>
        /// <value>First name</value>
        [DataMember(Name="first_name", EmitDefaultValue=false)]
        public string FirstName { get; set; }

        /// <summary>
        /// Item ID
        /// </summary>
        /// <value>Item ID</value>
        [DataMember(Name="item_id", EmitDefaultValue=false)]
        public string ItemId { get; set; }

        /// <summary>
        /// Last name
        /// </summary>
        /// <value>Last name</value>
        [DataMember(Name="last_name", EmitDefaultValue=false)]
        public string LastName { get; set; }

        /// <summary>
        /// Order ID
        /// </summary>
        /// <value>Order ID</value>
        [DataMember(Name="order_id", EmitDefaultValue=false)]
        public string OrderId { get; set; }

        /// <summary>
        /// Date/time that the order was successfully processed
        /// </summary>
        /// <value>Date/time that the order was successfully processed</value>
        [DataMember(Name="payment_date_begin", EmitDefaultValue=false)]
        public string PaymentDateBegin { get; set; }

        /// <summary>
        /// Date/time that the order was successfully processed
        /// </summary>
        /// <value>Date/time that the order was successfully processed</value>
        [DataMember(Name="payment_date_end", EmitDefaultValue=false)]
        public string PaymentDateEnd { get; set; }


        /// <summary>
        /// Phone
        /// </summary>
        /// <value>Phone</value>
        [DataMember(Name="phone", EmitDefaultValue=false)]
        public string Phone { get; set; }

        /// <summary>
        /// Postal code
        /// </summary>
        /// <value>Postal code</value>
        [DataMember(Name="postal_code", EmitDefaultValue=false)]
        public string PostalCode { get; set; }

        /// <summary>
        /// Purchase order number
        /// </summary>
        /// <value>Purchase order number</value>
        [DataMember(Name="purchase_order_number", EmitDefaultValue=false)]
        public string PurchaseOrderNumber { get; set; }

        /// <summary>
        /// RMA number
        /// </summary>
        /// <value>RMA number</value>
        [DataMember(Name="rma", EmitDefaultValue=false)]
        public string Rma { get; set; }

        /// <summary>
        /// Screen branding theme code associated with the order (legacy checkout)
        /// </summary>
        /// <value>Screen branding theme code associated with the order (legacy checkout)</value>
        [DataMember(Name="screen_branding_theme_code", EmitDefaultValue=false)]
        public string ScreenBrandingThemeCode { get; set; }

        /// <summary>
        /// Date/time that the order was shipping
        /// </summary>
        /// <value>Date/time that the order was shipping</value>
        [DataMember(Name="shipment_date_begin", EmitDefaultValue=false)]
        public string ShipmentDateBegin { get; set; }

        /// <summary>
        /// Date/time that the order was shipped
        /// </summary>
        /// <value>Date/time that the order was shipped</value>
        [DataMember(Name="shipment_date_end", EmitDefaultValue=false)]
        public string ShipmentDateEnd { get; set; }

        /// <summary>
        /// State for United States otherwise region or province for other countries
        /// </summary>
        /// <value>State for United States otherwise region or province for other countries</value>
        [DataMember(Name="state_region", EmitDefaultValue=false)]
        public string StateRegion { get; set; }

        /// <summary>
        /// StoreFront host name associated with the order
        /// </summary>
        /// <value>StoreFront host name associated with the order</value>
        [DataMember(Name="storefront_host_name", EmitDefaultValue=false)]
        public string StorefrontHostName { get; set; }

        /// <summary>
        /// Total
        /// </summary>
        /// <value>Total</value>
        [DataMember(Name="total", EmitDefaultValue=false)]
        public decimal? Total { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class OrderQuery {\n");
            sb.Append("  CcEmail: ").Append(CcEmail).Append("\n");
            sb.Append("  ChannelPartnerCode: ").Append(ChannelPartnerCode).Append("\n");
            sb.Append("  ChannelPartnerOrderId: ").Append(ChannelPartnerOrderId).Append("\n");
            sb.Append("  City: ").Append(City).Append("\n");
            sb.Append("  Company: ").Append(Company).Append("\n");
            sb.Append("  CountryCode: ").Append(CountryCode).Append("\n");
            sb.Append("  CreationDateBegin: ").Append(CreationDateBegin).Append("\n");
            sb.Append("  CreationDateEnd: ").Append(CreationDateEnd).Append("\n");
            sb.Append("  CurrentStage: ").Append(CurrentStage).Append("\n");
            sb.Append("  Email: ").Append(Email).Append("\n");
            sb.Append("  FirstName: ").Append(FirstName).Append("\n");
            sb.Append("  ItemId: ").Append(ItemId).Append("\n");
            sb.Append("  LastName: ").Append(LastName).Append("\n");
            sb.Append("  OrderId: ").Append(OrderId).Append("\n");
            sb.Append("  PaymentDateBegin: ").Append(PaymentDateBegin).Append("\n");
            sb.Append("  PaymentDateEnd: ").Append(PaymentDateEnd).Append("\n");
            sb.Append("  PaymentMethod: ").Append(PaymentMethod).Append("\n");
            sb.Append("  Phone: ").Append(Phone).Append("\n");
            sb.Append("  PostalCode: ").Append(PostalCode).Append("\n");
            sb.Append("  PurchaseOrderNumber: ").Append(PurchaseOrderNumber).Append("\n");
            sb.Append("  Rma: ").Append(Rma).Append("\n");
            sb.Append("  ScreenBrandingThemeCode: ").Append(ScreenBrandingThemeCode).Append("\n");
            sb.Append("  ShipmentDateBegin: ").Append(ShipmentDateBegin).Append("\n");
            sb.Append("  ShipmentDateEnd: ").Append(ShipmentDateEnd).Append("\n");
            sb.Append("  StateRegion: ").Append(StateRegion).Append("\n");
            sb.Append("  StorefrontHostName: ").Append(StorefrontHostName).Append("\n");
            sb.Append("  Total: ").Append(Total).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as OrderQuery);
        }

        /// <summary>
        /// Returns true if OrderQuery instances are equal
        /// </summary>
        /// <param name="other">Instance of OrderQuery to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(OrderQuery other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.CcEmail == other.CcEmail ||
                    this.CcEmail != null &&
                    this.CcEmail.Equals(other.CcEmail)
                ) && 
                (
                    this.ChannelPartnerCode == other.ChannelPartnerCode ||
                    this.ChannelPartnerCode != null &&
                    this.ChannelPartnerCode.Equals(other.ChannelPartnerCode)
                ) && 
                (
                    this.ChannelPartnerOrderId == other.ChannelPartnerOrderId ||
                    this.ChannelPartnerOrderId != null &&
                    this.ChannelPartnerOrderId.Equals(other.ChannelPartnerOrderId)
                ) && 
                (
                    this.City == other.City ||
                    this.City != null &&
                    this.City.Equals(other.City)
                ) && 
                (
                    this.Company == other.Company ||
                    this.Company != null &&
                    this.Company.Equals(other.Company)
                ) && 
                (
                    this.CountryCode == other.CountryCode ||
                    this.CountryCode != null &&
                    this.CountryCode.Equals(other.CountryCode)
                ) && 
                (
                    this.CreationDateBegin == other.CreationDateBegin ||
                    this.CreationDateBegin != null &&
                    this.CreationDateBegin.Equals(other.CreationDateBegin)
                ) && 
                (
                    this.CreationDateEnd == other.CreationDateEnd ||
                    this.CreationDateEnd != null &&
                    this.CreationDateEnd.Equals(other.CreationDateEnd)
                ) && 
                (
                    this.CurrentStage == other.CurrentStage ||
                    this.CurrentStage != null &&
                    this.CurrentStage.Equals(other.CurrentStage)
                ) && 
                (
                    this.Email == other.Email ||
                    this.Email != null &&
                    this.Email.Equals(other.Email)
                ) && 
                (
                    this.FirstName == other.FirstName ||
                    this.FirstName != null &&
                    this.FirstName.Equals(other.FirstName)
                ) && 
                (
                    this.ItemId == other.ItemId ||
                    this.ItemId != null &&
                    this.ItemId.Equals(other.ItemId)
                ) && 
                (
                    this.LastName == other.LastName ||
                    this.LastName != null &&
                    this.LastName.Equals(other.LastName)
                ) && 
                (
                    this.OrderId == other.OrderId ||
                    this.OrderId != null &&
                    this.OrderId.Equals(other.OrderId)
                ) && 
                (
                    this.PaymentDateBegin == other.PaymentDateBegin ||
                    this.PaymentDateBegin != null &&
                    this.PaymentDateBegin.Equals(other.PaymentDateBegin)
                ) && 
                (
                    this.PaymentDateEnd == other.PaymentDateEnd ||
                    this.PaymentDateEnd != null &&
                    this.PaymentDateEnd.Equals(other.PaymentDateEnd)
                ) && 
                (
                    this.PaymentMethod == other.PaymentMethod ||
                    this.PaymentMethod != null &&
                    this.PaymentMethod.Equals(other.PaymentMethod)
                ) && 
                (
                    this.Phone == other.Phone ||
                    this.Phone != null &&
                    this.Phone.Equals(other.Phone)
                ) && 
                (
                    this.PostalCode == other.PostalCode ||
                    this.PostalCode != null &&
                    this.PostalCode.Equals(other.PostalCode)
                ) && 
                (
                    this.PurchaseOrderNumber == other.PurchaseOrderNumber ||
                    this.PurchaseOrderNumber != null &&
                    this.PurchaseOrderNumber.Equals(other.PurchaseOrderNumber)
                ) && 
                (
                    this.Rma == other.Rma ||
                    this.Rma != null &&
                    this.Rma.Equals(other.Rma)
                ) && 
                (
                    this.ScreenBrandingThemeCode == other.ScreenBrandingThemeCode ||
                    this.ScreenBrandingThemeCode != null &&
                    this.ScreenBrandingThemeCode.Equals(other.ScreenBrandingThemeCode)
                ) && 
                (
                    this.ShipmentDateBegin == other.ShipmentDateBegin ||
                    this.ShipmentDateBegin != null &&
                    this.ShipmentDateBegin.Equals(other.ShipmentDateBegin)
                ) && 
                (
                    this.ShipmentDateEnd == other.ShipmentDateEnd ||
                    this.ShipmentDateEnd != null &&
                    this.ShipmentDateEnd.Equals(other.ShipmentDateEnd)
                ) && 
                (
                    this.StateRegion == other.StateRegion ||
                    this.StateRegion != null &&
                    this.StateRegion.Equals(other.StateRegion)
                ) && 
                (
                    this.StorefrontHostName == other.StorefrontHostName ||
                    this.StorefrontHostName != null &&
                    this.StorefrontHostName.Equals(other.StorefrontHostName)
                ) && 
                (
                    this.Total == other.Total ||
                    this.Total != null &&
                    this.Total.Equals(other.Total)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.CcEmail != null)
                    hash = hash * 59 + this.CcEmail.GetHashCode();
                if (this.ChannelPartnerCode != null)
                    hash = hash * 59 + this.ChannelPartnerCode.GetHashCode();
                if (this.ChannelPartnerOrderId != null)
                    hash = hash * 59 + this.ChannelPartnerOrderId.GetHashCode();
                if (this.City != null)
                    hash = hash * 59 + this.City.GetHashCode();
                if (this.Company != null)
                    hash = hash * 59 + this.Company.GetHashCode();
                if (this.CountryCode != null)
                    hash = hash * 59 + this.CountryCode.GetHashCode();
                if (this.CreationDateBegin != null)
                    hash = hash * 59 + this.CreationDateBegin.GetHashCode();
                if (this.CreationDateEnd != null)
                    hash = hash * 59 + this.CreationDateEnd.GetHashCode();
                if (this.CurrentStage != null)
                    hash = hash * 59 + this.CurrentStage.GetHashCode();
                if (this.Email != null)
                    hash = hash * 59 + this.Email.GetHashCode();
                if (this.FirstName != null)
                    hash = hash * 59 + this.FirstName.GetHashCode();
                if (this.ItemId != null)
                    hash = hash * 59 + this.ItemId.GetHashCode();
                if (this.LastName != null)
                    hash = hash * 59 + this.LastName.GetHashCode();
                if (this.OrderId != null)
                    hash = hash * 59 + this.OrderId.GetHashCode();
                if (this.PaymentDateBegin != null)
                    hash = hash * 59 + this.PaymentDateBegin.GetHashCode();
                if (this.PaymentDateEnd != null)
                    hash = hash * 59 + this.PaymentDateEnd.GetHashCode();
                if (this.PaymentMethod != null)
                    hash = hash * 59 + this.PaymentMethod.GetHashCode();
                if (this.Phone != null)
                    hash = hash * 59 + this.Phone.GetHashCode();
                if (this.PostalCode != null)
                    hash = hash * 59 + this.PostalCode.GetHashCode();
                if (this.PurchaseOrderNumber != null)
                    hash = hash * 59 + this.PurchaseOrderNumber.GetHashCode();
                if (this.Rma != null)
                    hash = hash * 59 + this.Rma.GetHashCode();
                if (this.ScreenBrandingThemeCode != null)
                    hash = hash * 59 + this.ScreenBrandingThemeCode.GetHashCode();
                if (this.ShipmentDateBegin != null)
                    hash = hash * 59 + this.ShipmentDateBegin.GetHashCode();
                if (this.ShipmentDateEnd != null)
                    hash = hash * 59 + this.ShipmentDateEnd.GetHashCode();
                if (this.StateRegion != null)
                    hash = hash * 59 + this.StateRegion.GetHashCode();
                if (this.StorefrontHostName != null)
                    hash = hash * 59 + this.StorefrontHostName.GetHashCode();
                if (this.Total != null)
                    hash = hash * 59 + this.Total.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // CcEmail (string) maxLength
            if(this.CcEmail != null && this.CcEmail.Length > 100)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for CcEmail, length must be less than 100.", new [] { "CcEmail" });
            }

            // City (string) maxLength
            if(this.City != null && this.City.Length > 32)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for City, length must be less than 32.", new [] { "City" });
            }

            // Company (string) maxLength
            if(this.Company != null && this.Company.Length > 50)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Company, length must be less than 50.", new [] { "Company" });
            }

            // CountryCode (string) maxLength
            if(this.CountryCode != null && this.CountryCode.Length > 2)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for CountryCode, length must be less than 2.", new [] { "CountryCode" });
            }

            // Email (string) maxLength
            if(this.Email != null && this.Email.Length > 100)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Email, length must be less than 100.", new [] { "Email" });
            }

            // FirstName (string) maxLength
            if(this.FirstName != null && this.FirstName.Length > 30)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for FirstName, length must be less than 30.", new [] { "FirstName" });
            }

            // LastName (string) maxLength
            if(this.LastName != null && this.LastName.Length > 30)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for LastName, length must be less than 30.", new [] { "LastName" });
            }

            // Phone (string) maxLength
            if(this.Phone != null && this.Phone.Length > 25)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Phone, length must be less than 25.", new [] { "Phone" });
            }

            // PostalCode (string) maxLength
            if(this.PostalCode != null && this.PostalCode.Length > 20)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for PostalCode, length must be less than 20.", new [] { "PostalCode" });
            }

            // Rma (string) maxLength
            if(this.Rma != null && this.Rma.Length > 30)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Rma, length must be less than 30.", new [] { "Rma" });
            }

            // ScreenBrandingThemeCode (string) maxLength
            if(this.ScreenBrandingThemeCode != null && this.ScreenBrandingThemeCode.Length > 10)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ScreenBrandingThemeCode, length must be less than 10.", new [] { "ScreenBrandingThemeCode" });
            }

            // StateRegion (string) maxLength
            if(this.StateRegion != null && this.StateRegion.Length > 32)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for StateRegion, length must be less than 32.", new [] { "StateRegion" });
            }

            yield break;
        }
    }

}
