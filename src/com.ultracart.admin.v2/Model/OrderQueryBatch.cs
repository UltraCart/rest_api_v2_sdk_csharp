/*
 * UltraCart Rest API V2
 *
 * UltraCart REST API Version 2
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@ultracart.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = com.ultracart.admin.v2.Client.OpenAPIDateConverter;

namespace com.ultracart.admin.v2.Model
{
    /// <summary>
    /// OrderQueryBatch
    /// </summary>
    [DataContract]
    public partial class OrderQueryBatch :  IEquatable<OrderQueryBatch>, IValidatableObject
    {
        /// <summary>
        /// Query Target
        /// </summary>
        /// <value>Query Target</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum QueryTargetEnum
        {
            /// <summary>
            /// Enum Origin for value: origin
            /// </summary>
            [EnumMember(Value = "origin")]
            Origin = 1,

            /// <summary>
            /// Enum Cache for value: cache
            /// </summary>
            [EnumMember(Value = "cache")]
            Cache = 2

        }

        /// <summary>
        /// Query Target
        /// </summary>
        /// <value>Query Target</value>
        [DataMember(Name="query_target", EmitDefaultValue=false)]
        public QueryTargetEnum? QueryTarget { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="OrderQueryBatch" /> class.
        /// </summary>
        /// <param name="orderIds">Order IDs.</param>
        /// <param name="queryTarget">Query Target.</param>
        public OrderQueryBatch(List<string> orderIds = default(List<string>), QueryTargetEnum? queryTarget = default(QueryTargetEnum?))
        {
            this.OrderIds = orderIds;
            this.QueryTarget = queryTarget;
        }

        /// <summary>
        /// Order IDs
        /// </summary>
        /// <value>Order IDs</value>
        [DataMember(Name="order_ids", EmitDefaultValue=false)]
        public List<string> OrderIds { get; set; }


        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class OrderQueryBatch {\n");
            sb.Append("  OrderIds: ").Append(OrderIds).Append("\n");
            sb.Append("  QueryTarget: ").Append(QueryTarget).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as OrderQueryBatch);
        }

        /// <summary>
        /// Returns true if OrderQueryBatch instances are equal
        /// </summary>
        /// <param name="input">Instance of OrderQueryBatch to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(OrderQueryBatch input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.OrderIds == input.OrderIds ||
                    this.OrderIds != null &&
                    input.OrderIds != null &&
                    this.OrderIds.SequenceEqual(input.OrderIds)
                ) && 
                (
                    this.QueryTarget == input.QueryTarget ||
                    (this.QueryTarget != null &&
                    this.QueryTarget.Equals(input.QueryTarget))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.OrderIds != null)
                    hashCode = hashCode * 59 + this.OrderIds.GetHashCode();
                if (this.QueryTarget != null)
                    hashCode = hashCode * 59 + this.QueryTarget.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
