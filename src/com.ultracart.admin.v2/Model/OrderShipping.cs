/*
 * UltraCart Rest API V2
 *
 * UltraCart REST API Version 2
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@ultracart.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = com.ultracart.admin.v2.Client.OpenAPIDateConverter;

namespace com.ultracart.admin.v2.Model
{
    /// <summary>
    /// OrderShipping
    /// </summary>
    [DataContract]
    public partial class OrderShipping :  IEquatable<OrderShipping>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="OrderShipping" /> class.
        /// </summary>
        /// <param name="address1">Address line 1.</param>
        /// <param name="address2">Address line 2.</param>
        /// <param name="city">City.</param>
        /// <param name="company">Company.</param>
        /// <param name="countryCode">ISO-3166 two letter country code.</param>
        /// <param name="dayPhone">Day time phone.</param>
        /// <param name="dayPhoneE164">Day time phone (E164 format).</param>
        /// <param name="deliveryDate">Date the customer is requesting delivery on.  Typically used for perishable product delivery..</param>
        /// <param name="eveningPhone">Evening phone.</param>
        /// <param name="eveningPhoneE164">Evening phone (E164 format).</param>
        /// <param name="firstName">First name.</param>
        /// <param name="lastName">Last name.</param>
        /// <param name="leastCostRoute">If true, instructs UltraCart to apply the cheapest shipping method to this order.  Used only for channel partner order inserts..</param>
        /// <param name="leastCostRouteShippingMethods">List of shipping methods to consider if least_code_route is true. Used only for channel parter order inserts..</param>
        /// <param name="liftGate">Lift gate requested (LTL shipping methods only).</param>
        /// <param name="pickupDts">Date/time the order should be picked up locally..</param>
        /// <param name="postalCode">Postal code.</param>
        /// <param name="rma">RMA number.</param>
        /// <param name="shipOnDate">Date the customer is requesting that the order ship on.  Typically used for perishable product delivery..</param>
        /// <param name="shipToResidential">True if the shipping address is residential.  Effects the methods that are available to the customer as well as the price of the shipping method..</param>
        /// <param name="shipping3rdPartyAccountNumber">Shipping 3rd party account number.</param>
        /// <param name="shippingDate">Date/time the order shipped on.  This date is set once the first shipment is sent to the customer..</param>
        /// <param name="shippingDepartmentStatus">Shipping department status.</param>
        /// <param name="shippingMethod">Shipping method.</param>
        /// <param name="shippingMethodAccountingCode">Shipping method accounting code.</param>
        /// <param name="specialInstructions">Special instructions from the customer regarding shipping.</param>
        /// <param name="stateRegion">State.</param>
        /// <param name="title">Title.</param>
        /// <param name="trackingNumberDetails">Tracking number details.</param>
        /// <param name="trackingNumbers">Tracking numbers.</param>
        /// <param name="weight">weight.</param>
        public OrderShipping(string address1 = default(string), string address2 = default(string), string city = default(string), string company = default(string), string countryCode = default(string), string dayPhone = default(string), string dayPhoneE164 = default(string), string deliveryDate = default(string), string eveningPhone = default(string), string eveningPhoneE164 = default(string), string firstName = default(string), string lastName = default(string), bool leastCostRoute = default(bool), List<string> leastCostRouteShippingMethods = default(List<string>), bool liftGate = default(bool), string pickupDts = default(string), string postalCode = default(string), string rma = default(string), string shipOnDate = default(string), bool shipToResidential = default(bool), string shipping3rdPartyAccountNumber = default(string), string shippingDate = default(string), string shippingDepartmentStatus = default(string), string shippingMethod = default(string), string shippingMethodAccountingCode = default(string), string specialInstructions = default(string), string stateRegion = default(string), string title = default(string), List<OrderTrackingNumberDetails> trackingNumberDetails = default(List<OrderTrackingNumberDetails>), List<string> trackingNumbers = default(List<string>), Weight weight = default(Weight))
        {
            this.Address1 = address1;
            this.Address2 = address2;
            this.City = city;
            this.Company = company;
            this.CountryCode = countryCode;
            this.DayPhone = dayPhone;
            this.DayPhoneE164 = dayPhoneE164;
            this.DeliveryDate = deliveryDate;
            this.EveningPhone = eveningPhone;
            this.EveningPhoneE164 = eveningPhoneE164;
            this.FirstName = firstName;
            this.LastName = lastName;
            this.LeastCostRoute = leastCostRoute;
            this.LeastCostRouteShippingMethods = leastCostRouteShippingMethods;
            this.LiftGate = liftGate;
            this.PickupDts = pickupDts;
            this.PostalCode = postalCode;
            this.Rma = rma;
            this.ShipOnDate = shipOnDate;
            this.ShipToResidential = shipToResidential;
            this.Shipping3rdPartyAccountNumber = shipping3rdPartyAccountNumber;
            this.ShippingDate = shippingDate;
            this.ShippingDepartmentStatus = shippingDepartmentStatus;
            this.ShippingMethod = shippingMethod;
            this.ShippingMethodAccountingCode = shippingMethodAccountingCode;
            this.SpecialInstructions = specialInstructions;
            this.StateRegion = stateRegion;
            this.Title = title;
            this.TrackingNumberDetails = trackingNumberDetails;
            this.TrackingNumbers = trackingNumbers;
            this.Weight = weight;
        }

        /// <summary>
        /// Address line 1
        /// </summary>
        /// <value>Address line 1</value>
        [DataMember(Name="address1", EmitDefaultValue=false)]
        public string Address1 { get; set; }

        /// <summary>
        /// Address line 2
        /// </summary>
        /// <value>Address line 2</value>
        [DataMember(Name="address2", EmitDefaultValue=false)]
        public string Address2 { get; set; }

        /// <summary>
        /// City
        /// </summary>
        /// <value>City</value>
        [DataMember(Name="city", EmitDefaultValue=false)]
        public string City { get; set; }

        /// <summary>
        /// Company
        /// </summary>
        /// <value>Company</value>
        [DataMember(Name="company", EmitDefaultValue=false)]
        public string Company { get; set; }

        /// <summary>
        /// ISO-3166 two letter country code
        /// </summary>
        /// <value>ISO-3166 two letter country code</value>
        [DataMember(Name="country_code", EmitDefaultValue=false)]
        public string CountryCode { get; set; }

        /// <summary>
        /// Day time phone
        /// </summary>
        /// <value>Day time phone</value>
        [DataMember(Name="day_phone", EmitDefaultValue=false)]
        public string DayPhone { get; set; }

        /// <summary>
        /// Day time phone (E164 format)
        /// </summary>
        /// <value>Day time phone (E164 format)</value>
        [DataMember(Name="day_phone_e164", EmitDefaultValue=false)]
        public string DayPhoneE164 { get; set; }

        /// <summary>
        /// Date the customer is requesting delivery on.  Typically used for perishable product delivery.
        /// </summary>
        /// <value>Date the customer is requesting delivery on.  Typically used for perishable product delivery.</value>
        [DataMember(Name="delivery_date", EmitDefaultValue=false)]
        public string DeliveryDate { get; set; }

        /// <summary>
        /// Evening phone
        /// </summary>
        /// <value>Evening phone</value>
        [DataMember(Name="evening_phone", EmitDefaultValue=false)]
        public string EveningPhone { get; set; }

        /// <summary>
        /// Evening phone (E164 format)
        /// </summary>
        /// <value>Evening phone (E164 format)</value>
        [DataMember(Name="evening_phone_e164", EmitDefaultValue=false)]
        public string EveningPhoneE164 { get; set; }

        /// <summary>
        /// First name
        /// </summary>
        /// <value>First name</value>
        [DataMember(Name="first_name", EmitDefaultValue=false)]
        public string FirstName { get; set; }

        /// <summary>
        /// Last name
        /// </summary>
        /// <value>Last name</value>
        [DataMember(Name="last_name", EmitDefaultValue=false)]
        public string LastName { get; set; }

        /// <summary>
        /// If true, instructs UltraCart to apply the cheapest shipping method to this order.  Used only for channel partner order inserts.
        /// </summary>
        /// <value>If true, instructs UltraCart to apply the cheapest shipping method to this order.  Used only for channel partner order inserts.</value>
        [DataMember(Name="least_cost_route", EmitDefaultValue=false)]
        public bool LeastCostRoute { get; set; }

        /// <summary>
        /// List of shipping methods to consider if least_code_route is true. Used only for channel parter order inserts.
        /// </summary>
        /// <value>List of shipping methods to consider if least_code_route is true. Used only for channel parter order inserts.</value>
        [DataMember(Name="least_cost_route_shipping_methods", EmitDefaultValue=false)]
        public List<string> LeastCostRouteShippingMethods { get; set; }

        /// <summary>
        /// Lift gate requested (LTL shipping methods only)
        /// </summary>
        /// <value>Lift gate requested (LTL shipping methods only)</value>
        [DataMember(Name="lift_gate", EmitDefaultValue=false)]
        public bool LiftGate { get; set; }

        /// <summary>
        /// Date/time the order should be picked up locally.
        /// </summary>
        /// <value>Date/time the order should be picked up locally.</value>
        [DataMember(Name="pickup_dts", EmitDefaultValue=false)]
        public string PickupDts { get; set; }

        /// <summary>
        /// Postal code
        /// </summary>
        /// <value>Postal code</value>
        [DataMember(Name="postal_code", EmitDefaultValue=false)]
        public string PostalCode { get; set; }

        /// <summary>
        /// RMA number
        /// </summary>
        /// <value>RMA number</value>
        [DataMember(Name="rma", EmitDefaultValue=false)]
        public string Rma { get; set; }

        /// <summary>
        /// Date the customer is requesting that the order ship on.  Typically used for perishable product delivery.
        /// </summary>
        /// <value>Date the customer is requesting that the order ship on.  Typically used for perishable product delivery.</value>
        [DataMember(Name="ship_on_date", EmitDefaultValue=false)]
        public string ShipOnDate { get; set; }

        /// <summary>
        /// True if the shipping address is residential.  Effects the methods that are available to the customer as well as the price of the shipping method.
        /// </summary>
        /// <value>True if the shipping address is residential.  Effects the methods that are available to the customer as well as the price of the shipping method.</value>
        [DataMember(Name="ship_to_residential", EmitDefaultValue=false)]
        public bool ShipToResidential { get; set; }

        /// <summary>
        /// Shipping 3rd party account number
        /// </summary>
        /// <value>Shipping 3rd party account number</value>
        [DataMember(Name="shipping_3rd_party_account_number", EmitDefaultValue=false)]
        public string Shipping3rdPartyAccountNumber { get; set; }

        /// <summary>
        /// Date/time the order shipped on.  This date is set once the first shipment is sent to the customer.
        /// </summary>
        /// <value>Date/time the order shipped on.  This date is set once the first shipment is sent to the customer.</value>
        [DataMember(Name="shipping_date", EmitDefaultValue=false)]
        public string ShippingDate { get; set; }

        /// <summary>
        /// Shipping department status
        /// </summary>
        /// <value>Shipping department status</value>
        [DataMember(Name="shipping_department_status", EmitDefaultValue=false)]
        public string ShippingDepartmentStatus { get; set; }

        /// <summary>
        /// Shipping method
        /// </summary>
        /// <value>Shipping method</value>
        [DataMember(Name="shipping_method", EmitDefaultValue=false)]
        public string ShippingMethod { get; set; }

        /// <summary>
        /// Shipping method accounting code
        /// </summary>
        /// <value>Shipping method accounting code</value>
        [DataMember(Name="shipping_method_accounting_code", EmitDefaultValue=false)]
        public string ShippingMethodAccountingCode { get; set; }

        /// <summary>
        /// Special instructions from the customer regarding shipping
        /// </summary>
        /// <value>Special instructions from the customer regarding shipping</value>
        [DataMember(Name="special_instructions", EmitDefaultValue=false)]
        public string SpecialInstructions { get; set; }

        /// <summary>
        /// State
        /// </summary>
        /// <value>State</value>
        [DataMember(Name="state_region", EmitDefaultValue=false)]
        public string StateRegion { get; set; }

        /// <summary>
        /// Title
        /// </summary>
        /// <value>Title</value>
        [DataMember(Name="title", EmitDefaultValue=false)]
        public string Title { get; set; }

        /// <summary>
        /// Tracking number details
        /// </summary>
        /// <value>Tracking number details</value>
        [DataMember(Name="tracking_number_details", EmitDefaultValue=false)]
        public List<OrderTrackingNumberDetails> TrackingNumberDetails { get; set; }

        /// <summary>
        /// Tracking numbers
        /// </summary>
        /// <value>Tracking numbers</value>
        [DataMember(Name="tracking_numbers", EmitDefaultValue=false)]
        public List<string> TrackingNumbers { get; set; }

        /// <summary>
        /// Gets or Sets Weight
        /// </summary>
        [DataMember(Name="weight", EmitDefaultValue=false)]
        public Weight Weight { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class OrderShipping {\n");
            sb.Append("  Address1: ").Append(Address1).Append("\n");
            sb.Append("  Address2: ").Append(Address2).Append("\n");
            sb.Append("  City: ").Append(City).Append("\n");
            sb.Append("  Company: ").Append(Company).Append("\n");
            sb.Append("  CountryCode: ").Append(CountryCode).Append("\n");
            sb.Append("  DayPhone: ").Append(DayPhone).Append("\n");
            sb.Append("  DayPhoneE164: ").Append(DayPhoneE164).Append("\n");
            sb.Append("  DeliveryDate: ").Append(DeliveryDate).Append("\n");
            sb.Append("  EveningPhone: ").Append(EveningPhone).Append("\n");
            sb.Append("  EveningPhoneE164: ").Append(EveningPhoneE164).Append("\n");
            sb.Append("  FirstName: ").Append(FirstName).Append("\n");
            sb.Append("  LastName: ").Append(LastName).Append("\n");
            sb.Append("  LeastCostRoute: ").Append(LeastCostRoute).Append("\n");
            sb.Append("  LeastCostRouteShippingMethods: ").Append(LeastCostRouteShippingMethods).Append("\n");
            sb.Append("  LiftGate: ").Append(LiftGate).Append("\n");
            sb.Append("  PickupDts: ").Append(PickupDts).Append("\n");
            sb.Append("  PostalCode: ").Append(PostalCode).Append("\n");
            sb.Append("  Rma: ").Append(Rma).Append("\n");
            sb.Append("  ShipOnDate: ").Append(ShipOnDate).Append("\n");
            sb.Append("  ShipToResidential: ").Append(ShipToResidential).Append("\n");
            sb.Append("  Shipping3rdPartyAccountNumber: ").Append(Shipping3rdPartyAccountNumber).Append("\n");
            sb.Append("  ShippingDate: ").Append(ShippingDate).Append("\n");
            sb.Append("  ShippingDepartmentStatus: ").Append(ShippingDepartmentStatus).Append("\n");
            sb.Append("  ShippingMethod: ").Append(ShippingMethod).Append("\n");
            sb.Append("  ShippingMethodAccountingCode: ").Append(ShippingMethodAccountingCode).Append("\n");
            sb.Append("  SpecialInstructions: ").Append(SpecialInstructions).Append("\n");
            sb.Append("  StateRegion: ").Append(StateRegion).Append("\n");
            sb.Append("  Title: ").Append(Title).Append("\n");
            sb.Append("  TrackingNumberDetails: ").Append(TrackingNumberDetails).Append("\n");
            sb.Append("  TrackingNumbers: ").Append(TrackingNumbers).Append("\n");
            sb.Append("  Weight: ").Append(Weight).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as OrderShipping);
        }

        /// <summary>
        /// Returns true if OrderShipping instances are equal
        /// </summary>
        /// <param name="input">Instance of OrderShipping to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(OrderShipping input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Address1 == input.Address1 ||
                    (this.Address1 != null &&
                    this.Address1.Equals(input.Address1))
                ) && 
                (
                    this.Address2 == input.Address2 ||
                    (this.Address2 != null &&
                    this.Address2.Equals(input.Address2))
                ) && 
                (
                    this.City == input.City ||
                    (this.City != null &&
                    this.City.Equals(input.City))
                ) && 
                (
                    this.Company == input.Company ||
                    (this.Company != null &&
                    this.Company.Equals(input.Company))
                ) && 
                (
                    this.CountryCode == input.CountryCode ||
                    (this.CountryCode != null &&
                    this.CountryCode.Equals(input.CountryCode))
                ) && 
                (
                    this.DayPhone == input.DayPhone ||
                    (this.DayPhone != null &&
                    this.DayPhone.Equals(input.DayPhone))
                ) && 
                (
                    this.DayPhoneE164 == input.DayPhoneE164 ||
                    (this.DayPhoneE164 != null &&
                    this.DayPhoneE164.Equals(input.DayPhoneE164))
                ) && 
                (
                    this.DeliveryDate == input.DeliveryDate ||
                    (this.DeliveryDate != null &&
                    this.DeliveryDate.Equals(input.DeliveryDate))
                ) && 
                (
                    this.EveningPhone == input.EveningPhone ||
                    (this.EveningPhone != null &&
                    this.EveningPhone.Equals(input.EveningPhone))
                ) && 
                (
                    this.EveningPhoneE164 == input.EveningPhoneE164 ||
                    (this.EveningPhoneE164 != null &&
                    this.EveningPhoneE164.Equals(input.EveningPhoneE164))
                ) && 
                (
                    this.FirstName == input.FirstName ||
                    (this.FirstName != null &&
                    this.FirstName.Equals(input.FirstName))
                ) && 
                (
                    this.LastName == input.LastName ||
                    (this.LastName != null &&
                    this.LastName.Equals(input.LastName))
                ) && 
                (
                    this.LeastCostRoute == input.LeastCostRoute ||
                    (this.LeastCostRoute != null &&
                    this.LeastCostRoute.Equals(input.LeastCostRoute))
                ) && 
                (
                    this.LeastCostRouteShippingMethods == input.LeastCostRouteShippingMethods ||
                    this.LeastCostRouteShippingMethods != null &&
                    input.LeastCostRouteShippingMethods != null &&
                    this.LeastCostRouteShippingMethods.SequenceEqual(input.LeastCostRouteShippingMethods)
                ) && 
                (
                    this.LiftGate == input.LiftGate ||
                    (this.LiftGate != null &&
                    this.LiftGate.Equals(input.LiftGate))
                ) && 
                (
                    this.PickupDts == input.PickupDts ||
                    (this.PickupDts != null &&
                    this.PickupDts.Equals(input.PickupDts))
                ) && 
                (
                    this.PostalCode == input.PostalCode ||
                    (this.PostalCode != null &&
                    this.PostalCode.Equals(input.PostalCode))
                ) && 
                (
                    this.Rma == input.Rma ||
                    (this.Rma != null &&
                    this.Rma.Equals(input.Rma))
                ) && 
                (
                    this.ShipOnDate == input.ShipOnDate ||
                    (this.ShipOnDate != null &&
                    this.ShipOnDate.Equals(input.ShipOnDate))
                ) && 
                (
                    this.ShipToResidential == input.ShipToResidential ||
                    (this.ShipToResidential != null &&
                    this.ShipToResidential.Equals(input.ShipToResidential))
                ) && 
                (
                    this.Shipping3rdPartyAccountNumber == input.Shipping3rdPartyAccountNumber ||
                    (this.Shipping3rdPartyAccountNumber != null &&
                    this.Shipping3rdPartyAccountNumber.Equals(input.Shipping3rdPartyAccountNumber))
                ) && 
                (
                    this.ShippingDate == input.ShippingDate ||
                    (this.ShippingDate != null &&
                    this.ShippingDate.Equals(input.ShippingDate))
                ) && 
                (
                    this.ShippingDepartmentStatus == input.ShippingDepartmentStatus ||
                    (this.ShippingDepartmentStatus != null &&
                    this.ShippingDepartmentStatus.Equals(input.ShippingDepartmentStatus))
                ) && 
                (
                    this.ShippingMethod == input.ShippingMethod ||
                    (this.ShippingMethod != null &&
                    this.ShippingMethod.Equals(input.ShippingMethod))
                ) && 
                (
                    this.ShippingMethodAccountingCode == input.ShippingMethodAccountingCode ||
                    (this.ShippingMethodAccountingCode != null &&
                    this.ShippingMethodAccountingCode.Equals(input.ShippingMethodAccountingCode))
                ) && 
                (
                    this.SpecialInstructions == input.SpecialInstructions ||
                    (this.SpecialInstructions != null &&
                    this.SpecialInstructions.Equals(input.SpecialInstructions))
                ) && 
                (
                    this.StateRegion == input.StateRegion ||
                    (this.StateRegion != null &&
                    this.StateRegion.Equals(input.StateRegion))
                ) && 
                (
                    this.Title == input.Title ||
                    (this.Title != null &&
                    this.Title.Equals(input.Title))
                ) && 
                (
                    this.TrackingNumberDetails == input.TrackingNumberDetails ||
                    this.TrackingNumberDetails != null &&
                    input.TrackingNumberDetails != null &&
                    this.TrackingNumberDetails.SequenceEqual(input.TrackingNumberDetails)
                ) && 
                (
                    this.TrackingNumbers == input.TrackingNumbers ||
                    this.TrackingNumbers != null &&
                    input.TrackingNumbers != null &&
                    this.TrackingNumbers.SequenceEqual(input.TrackingNumbers)
                ) && 
                (
                    this.Weight == input.Weight ||
                    (this.Weight != null &&
                    this.Weight.Equals(input.Weight))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Address1 != null)
                    hashCode = hashCode * 59 + this.Address1.GetHashCode();
                if (this.Address2 != null)
                    hashCode = hashCode * 59 + this.Address2.GetHashCode();
                if (this.City != null)
                    hashCode = hashCode * 59 + this.City.GetHashCode();
                if (this.Company != null)
                    hashCode = hashCode * 59 + this.Company.GetHashCode();
                if (this.CountryCode != null)
                    hashCode = hashCode * 59 + this.CountryCode.GetHashCode();
                if (this.DayPhone != null)
                    hashCode = hashCode * 59 + this.DayPhone.GetHashCode();
                if (this.DayPhoneE164 != null)
                    hashCode = hashCode * 59 + this.DayPhoneE164.GetHashCode();
                if (this.DeliveryDate != null)
                    hashCode = hashCode * 59 + this.DeliveryDate.GetHashCode();
                if (this.EveningPhone != null)
                    hashCode = hashCode * 59 + this.EveningPhone.GetHashCode();
                if (this.EveningPhoneE164 != null)
                    hashCode = hashCode * 59 + this.EveningPhoneE164.GetHashCode();
                if (this.FirstName != null)
                    hashCode = hashCode * 59 + this.FirstName.GetHashCode();
                if (this.LastName != null)
                    hashCode = hashCode * 59 + this.LastName.GetHashCode();
                if (this.LeastCostRoute != null)
                    hashCode = hashCode * 59 + this.LeastCostRoute.GetHashCode();
                if (this.LeastCostRouteShippingMethods != null)
                    hashCode = hashCode * 59 + this.LeastCostRouteShippingMethods.GetHashCode();
                if (this.LiftGate != null)
                    hashCode = hashCode * 59 + this.LiftGate.GetHashCode();
                if (this.PickupDts != null)
                    hashCode = hashCode * 59 + this.PickupDts.GetHashCode();
                if (this.PostalCode != null)
                    hashCode = hashCode * 59 + this.PostalCode.GetHashCode();
                if (this.Rma != null)
                    hashCode = hashCode * 59 + this.Rma.GetHashCode();
                if (this.ShipOnDate != null)
                    hashCode = hashCode * 59 + this.ShipOnDate.GetHashCode();
                if (this.ShipToResidential != null)
                    hashCode = hashCode * 59 + this.ShipToResidential.GetHashCode();
                if (this.Shipping3rdPartyAccountNumber != null)
                    hashCode = hashCode * 59 + this.Shipping3rdPartyAccountNumber.GetHashCode();
                if (this.ShippingDate != null)
                    hashCode = hashCode * 59 + this.ShippingDate.GetHashCode();
                if (this.ShippingDepartmentStatus != null)
                    hashCode = hashCode * 59 + this.ShippingDepartmentStatus.GetHashCode();
                if (this.ShippingMethod != null)
                    hashCode = hashCode * 59 + this.ShippingMethod.GetHashCode();
                if (this.ShippingMethodAccountingCode != null)
                    hashCode = hashCode * 59 + this.ShippingMethodAccountingCode.GetHashCode();
                if (this.SpecialInstructions != null)
                    hashCode = hashCode * 59 + this.SpecialInstructions.GetHashCode();
                if (this.StateRegion != null)
                    hashCode = hashCode * 59 + this.StateRegion.GetHashCode();
                if (this.Title != null)
                    hashCode = hashCode * 59 + this.Title.GetHashCode();
                if (this.TrackingNumberDetails != null)
                    hashCode = hashCode * 59 + this.TrackingNumberDetails.GetHashCode();
                if (this.TrackingNumbers != null)
                    hashCode = hashCode * 59 + this.TrackingNumbers.GetHashCode();
                if (this.Weight != null)
                    hashCode = hashCode * 59 + this.Weight.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Address1 (string) maxLength
            if(this.Address1 != null && this.Address1.Length > 50)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Address1, length must be less than 50.", new [] { "Address1" });
            }


            // Address2 (string) maxLength
            if(this.Address2 != null && this.Address2.Length > 50)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Address2, length must be less than 50.", new [] { "Address2" });
            }


            // City (string) maxLength
            if(this.City != null && this.City.Length > 32)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for City, length must be less than 32.", new [] { "City" });
            }


            // Company (string) maxLength
            if(this.Company != null && this.Company.Length > 50)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Company, length must be less than 50.", new [] { "Company" });
            }


            // CountryCode (string) maxLength
            if(this.CountryCode != null && this.CountryCode.Length > 2)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for CountryCode, length must be less than 2.", new [] { "CountryCode" });
            }


            // DayPhone (string) maxLength
            if(this.DayPhone != null && this.DayPhone.Length > 25)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for DayPhone, length must be less than 25.", new [] { "DayPhone" });
            }


            // DayPhoneE164 (string) maxLength
            if(this.DayPhoneE164 != null && this.DayPhoneE164.Length > 25)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for DayPhoneE164, length must be less than 25.", new [] { "DayPhoneE164" });
            }


            // EveningPhone (string) maxLength
            if(this.EveningPhone != null && this.EveningPhone.Length > 25)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for EveningPhone, length must be less than 25.", new [] { "EveningPhone" });
            }


            // EveningPhoneE164 (string) maxLength
            if(this.EveningPhoneE164 != null && this.EveningPhoneE164.Length > 25)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for EveningPhoneE164, length must be less than 25.", new [] { "EveningPhoneE164" });
            }


            // FirstName (string) maxLength
            if(this.FirstName != null && this.FirstName.Length > 30)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for FirstName, length must be less than 30.", new [] { "FirstName" });
            }


            // LastName (string) maxLength
            if(this.LastName != null && this.LastName.Length > 30)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for LastName, length must be less than 30.", new [] { "LastName" });
            }


            // PostalCode (string) maxLength
            if(this.PostalCode != null && this.PostalCode.Length > 20)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for PostalCode, length must be less than 20.", new [] { "PostalCode" });
            }


            // Rma (string) maxLength
            if(this.Rma != null && this.Rma.Length > 30)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Rma, length must be less than 30.", new [] { "Rma" });
            }


            // Shipping3rdPartyAccountNumber (string) maxLength
            if(this.Shipping3rdPartyAccountNumber != null && this.Shipping3rdPartyAccountNumber.Length > 20)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Shipping3rdPartyAccountNumber, length must be less than 20.", new [] { "Shipping3rdPartyAccountNumber" });
            }


            // ShippingDepartmentStatus (string) maxLength
            if(this.ShippingDepartmentStatus != null && this.ShippingDepartmentStatus.Length > 30)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ShippingDepartmentStatus, length must be less than 30.", new [] { "ShippingDepartmentStatus" });
            }


            // StateRegion (string) maxLength
            if(this.StateRegion != null && this.StateRegion.Length > 32)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for StateRegion, length must be less than 32.", new [] { "StateRegion" });
            }


            // Title (string) maxLength
            if(this.Title != null && this.Title.Length > 50)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Title, length must be less than 50.", new [] { "Title" });
            }


            yield break;
        }
    }

}
