/* 
 * UltraCart Rest API V2
 *
 * This is the next generation UltraCart REST API...
 *
 * OpenAPI spec version: 2.0.0
 * Contact: support@ultracart.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace com.ultracart.admin.v2.Model
{
    /// <summary>
    /// OrderTaxes
    /// </summary>
    [DataContract]
    public partial class OrderTaxes :  IEquatable<OrderTaxes>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="OrderTaxes" /> class.
        /// </summary>
        /// <param name="TaxCityAccountingCode">QuickBooks tax city code.</param>
        /// <param name="TaxCountryAccountingCode">QuickBooks tax country code.</param>
        /// <param name="TaxCounty">County used for tax calculation purposes (only in the United States).</param>
        /// <param name="TaxCountyAccountingCode">QuickBooks tax county code.</param>
        /// <param name="TaxPostalCodeAccountingCode">QuickBooks tax postal code code.</param>
        /// <param name="TaxRate">Tax rate.</param>
        /// <param name="TaxRateCity">Tax rate at the city level.</param>
        /// <param name="TaxRateCountry">Tax rate at the country level.</param>
        /// <param name="TaxRateCounty">Tax rate at the county level.</param>
        /// <param name="TaxRatePostalCode">Tax rate at the postal code level.</param>
        /// <param name="TaxRateState">Tax rate at the state level.</param>
        /// <param name="TaxStateAccountingCode">QuickBOoks tax state code.</param>
        public OrderTaxes(string TaxCityAccountingCode = null, string TaxCountryAccountingCode = null, string TaxCounty = null, string TaxCountyAccountingCode = null, string TaxPostalCodeAccountingCode = null, decimal? TaxRate = null, decimal? TaxRateCity = null, decimal? TaxRateCountry = null, decimal? TaxRateCounty = null, decimal? TaxRatePostalCode = null, decimal? TaxRateState = null, string TaxStateAccountingCode = null)
        {
            this.TaxCityAccountingCode = TaxCityAccountingCode;
            this.TaxCountryAccountingCode = TaxCountryAccountingCode;
            this.TaxCounty = TaxCounty;
            this.TaxCountyAccountingCode = TaxCountyAccountingCode;
            this.TaxPostalCodeAccountingCode = TaxPostalCodeAccountingCode;
            this.TaxRate = TaxRate;
            this.TaxRateCity = TaxRateCity;
            this.TaxRateCountry = TaxRateCountry;
            this.TaxRateCounty = TaxRateCounty;
            this.TaxRatePostalCode = TaxRatePostalCode;
            this.TaxRateState = TaxRateState;
            this.TaxStateAccountingCode = TaxStateAccountingCode;
        }
        
        /// <summary>
        /// QuickBooks tax city code
        /// </summary>
        /// <value>QuickBooks tax city code</value>
        [DataMember(Name="tax_city_accounting_code", EmitDefaultValue=false)]
        public string TaxCityAccountingCode { get; set; }
        /// <summary>
        /// QuickBooks tax country code
        /// </summary>
        /// <value>QuickBooks tax country code</value>
        [DataMember(Name="tax_country_accounting_code", EmitDefaultValue=false)]
        public string TaxCountryAccountingCode { get; set; }
        /// <summary>
        /// County used for tax calculation purposes (only in the United States)
        /// </summary>
        /// <value>County used for tax calculation purposes (only in the United States)</value>
        [DataMember(Name="tax_county", EmitDefaultValue=false)]
        public string TaxCounty { get; set; }
        /// <summary>
        /// QuickBooks tax county code
        /// </summary>
        /// <value>QuickBooks tax county code</value>
        [DataMember(Name="tax_county_accounting_code", EmitDefaultValue=false)]
        public string TaxCountyAccountingCode { get; set; }
        /// <summary>
        /// QuickBooks tax postal code code
        /// </summary>
        /// <value>QuickBooks tax postal code code</value>
        [DataMember(Name="tax_postal_code_accounting_code", EmitDefaultValue=false)]
        public string TaxPostalCodeAccountingCode { get; set; }
        /// <summary>
        /// Tax rate
        /// </summary>
        /// <value>Tax rate</value>
        [DataMember(Name="tax_rate", EmitDefaultValue=false)]
        public decimal? TaxRate { get; set; }
        /// <summary>
        /// Tax rate at the city level
        /// </summary>
        /// <value>Tax rate at the city level</value>
        [DataMember(Name="tax_rate_city", EmitDefaultValue=false)]
        public decimal? TaxRateCity { get; set; }
        /// <summary>
        /// Tax rate at the country level
        /// </summary>
        /// <value>Tax rate at the country level</value>
        [DataMember(Name="tax_rate_country", EmitDefaultValue=false)]
        public decimal? TaxRateCountry { get; set; }
        /// <summary>
        /// Tax rate at the county level
        /// </summary>
        /// <value>Tax rate at the county level</value>
        [DataMember(Name="tax_rate_county", EmitDefaultValue=false)]
        public decimal? TaxRateCounty { get; set; }
        /// <summary>
        /// Tax rate at the postal code level
        /// </summary>
        /// <value>Tax rate at the postal code level</value>
        [DataMember(Name="tax_rate_postal_code", EmitDefaultValue=false)]
        public decimal? TaxRatePostalCode { get; set; }
        /// <summary>
        /// Tax rate at the state level
        /// </summary>
        /// <value>Tax rate at the state level</value>
        [DataMember(Name="tax_rate_state", EmitDefaultValue=false)]
        public decimal? TaxRateState { get; set; }
        /// <summary>
        /// QuickBOoks tax state code
        /// </summary>
        /// <value>QuickBOoks tax state code</value>
        [DataMember(Name="tax_state_accounting_code", EmitDefaultValue=false)]
        public string TaxStateAccountingCode { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class OrderTaxes {\n");
            sb.Append("  TaxCityAccountingCode: ").Append(TaxCityAccountingCode).Append("\n");
            sb.Append("  TaxCountryAccountingCode: ").Append(TaxCountryAccountingCode).Append("\n");
            sb.Append("  TaxCounty: ").Append(TaxCounty).Append("\n");
            sb.Append("  TaxCountyAccountingCode: ").Append(TaxCountyAccountingCode).Append("\n");
            sb.Append("  TaxPostalCodeAccountingCode: ").Append(TaxPostalCodeAccountingCode).Append("\n");
            sb.Append("  TaxRate: ").Append(TaxRate).Append("\n");
            sb.Append("  TaxRateCity: ").Append(TaxRateCity).Append("\n");
            sb.Append("  TaxRateCountry: ").Append(TaxRateCountry).Append("\n");
            sb.Append("  TaxRateCounty: ").Append(TaxRateCounty).Append("\n");
            sb.Append("  TaxRatePostalCode: ").Append(TaxRatePostalCode).Append("\n");
            sb.Append("  TaxRateState: ").Append(TaxRateState).Append("\n");
            sb.Append("  TaxStateAccountingCode: ").Append(TaxStateAccountingCode).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as OrderTaxes);
        }

        /// <summary>
        /// Returns true if OrderTaxes instances are equal
        /// </summary>
        /// <param name="other">Instance of OrderTaxes to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(OrderTaxes other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.TaxCityAccountingCode == other.TaxCityAccountingCode ||
                    this.TaxCityAccountingCode != null &&
                    this.TaxCityAccountingCode.Equals(other.TaxCityAccountingCode)
                ) && 
                (
                    this.TaxCountryAccountingCode == other.TaxCountryAccountingCode ||
                    this.TaxCountryAccountingCode != null &&
                    this.TaxCountryAccountingCode.Equals(other.TaxCountryAccountingCode)
                ) && 
                (
                    this.TaxCounty == other.TaxCounty ||
                    this.TaxCounty != null &&
                    this.TaxCounty.Equals(other.TaxCounty)
                ) && 
                (
                    this.TaxCountyAccountingCode == other.TaxCountyAccountingCode ||
                    this.TaxCountyAccountingCode != null &&
                    this.TaxCountyAccountingCode.Equals(other.TaxCountyAccountingCode)
                ) && 
                (
                    this.TaxPostalCodeAccountingCode == other.TaxPostalCodeAccountingCode ||
                    this.TaxPostalCodeAccountingCode != null &&
                    this.TaxPostalCodeAccountingCode.Equals(other.TaxPostalCodeAccountingCode)
                ) && 
                (
                    this.TaxRate == other.TaxRate ||
                    this.TaxRate != null &&
                    this.TaxRate.Equals(other.TaxRate)
                ) && 
                (
                    this.TaxRateCity == other.TaxRateCity ||
                    this.TaxRateCity != null &&
                    this.TaxRateCity.Equals(other.TaxRateCity)
                ) && 
                (
                    this.TaxRateCountry == other.TaxRateCountry ||
                    this.TaxRateCountry != null &&
                    this.TaxRateCountry.Equals(other.TaxRateCountry)
                ) && 
                (
                    this.TaxRateCounty == other.TaxRateCounty ||
                    this.TaxRateCounty != null &&
                    this.TaxRateCounty.Equals(other.TaxRateCounty)
                ) && 
                (
                    this.TaxRatePostalCode == other.TaxRatePostalCode ||
                    this.TaxRatePostalCode != null &&
                    this.TaxRatePostalCode.Equals(other.TaxRatePostalCode)
                ) && 
                (
                    this.TaxRateState == other.TaxRateState ||
                    this.TaxRateState != null &&
                    this.TaxRateState.Equals(other.TaxRateState)
                ) && 
                (
                    this.TaxStateAccountingCode == other.TaxStateAccountingCode ||
                    this.TaxStateAccountingCode != null &&
                    this.TaxStateAccountingCode.Equals(other.TaxStateAccountingCode)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.TaxCityAccountingCode != null)
                    hash = hash * 59 + this.TaxCityAccountingCode.GetHashCode();
                if (this.TaxCountryAccountingCode != null)
                    hash = hash * 59 + this.TaxCountryAccountingCode.GetHashCode();
                if (this.TaxCounty != null)
                    hash = hash * 59 + this.TaxCounty.GetHashCode();
                if (this.TaxCountyAccountingCode != null)
                    hash = hash * 59 + this.TaxCountyAccountingCode.GetHashCode();
                if (this.TaxPostalCodeAccountingCode != null)
                    hash = hash * 59 + this.TaxPostalCodeAccountingCode.GetHashCode();
                if (this.TaxRate != null)
                    hash = hash * 59 + this.TaxRate.GetHashCode();
                if (this.TaxRateCity != null)
                    hash = hash * 59 + this.TaxRateCity.GetHashCode();
                if (this.TaxRateCountry != null)
                    hash = hash * 59 + this.TaxRateCountry.GetHashCode();
                if (this.TaxRateCounty != null)
                    hash = hash * 59 + this.TaxRateCounty.GetHashCode();
                if (this.TaxRatePostalCode != null)
                    hash = hash * 59 + this.TaxRatePostalCode.GetHashCode();
                if (this.TaxRateState != null)
                    hash = hash * 59 + this.TaxRateState.GetHashCode();
                if (this.TaxStateAccountingCode != null)
                    hash = hash * 59 + this.TaxStateAccountingCode.GetHashCode();
                return hash;
            }
        }
    }

}
