/* 
 * UltraCart Rest API V2
 *
 * UltraCart REST API Version 2
 *
 * OpenAPI spec version: 2.0.0
 * Contact: support@ultracart.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = com.ultracart.admin.v2.Client.SwaggerDateConverter;

namespace com.ultracart.admin.v2.Model
{
    /// <summary>
    /// OrderTaxes
    /// </summary>
    [DataContract]
    public partial class OrderTaxes :  IEquatable<OrderTaxes>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="OrderTaxes" /> class.
        /// </summary>
        /// <param name="arbitraryTax">Arbitrary Tax, this is meaningless for updating an order.  For inserting a new order, this will override any internal tax calculations and should only be used for orders completed outside the system..</param>
        /// <param name="arbitraryTaxRate">Arbitrary tax rate, this is meaningless for updating an order.  For inserting a new order, this will override any internal tax calculations and should only be used for orders completed outside the system..</param>
        /// <param name="arbitraryTaxableSubtotal">Arbitrary taxable subtotal, this is meaningless for updating an order.  For inserting a new order, this will override any internal tax calculations and should only be used for orders completed outside the system..</param>
        /// <param name="taxCityAccountingCode">QuickBooks tax city code.</param>
        /// <param name="taxCountryAccountingCode">QuickBooks tax country code.</param>
        /// <param name="taxCounty">County used for tax calculation purposes (only in the United States).</param>
        /// <param name="taxCountyAccountingCode">QuickBooks tax county code.</param>
        /// <param name="taxGiftCharge">True if gift charge is taxed.</param>
        /// <param name="taxPostalCodeAccountingCode">QuickBooks tax postal code code.</param>
        /// <param name="taxRate">Tax rate, this is meaningless for updating an order.  For inserting a new order, if you need to override internal tax calculations, use the arbitrary fields..</param>
        /// <param name="taxRateCity">Tax rate at the city level.</param>
        /// <param name="taxRateCountry">Tax rate at the country level.</param>
        /// <param name="taxRateCounty">Tax rate at the county level.</param>
        /// <param name="taxRatePostalCode">Tax rate at the postal code level.</param>
        /// <param name="taxRateState">Tax rate at the state level.</param>
        /// <param name="taxShipping">True if shipping is taxed.</param>
        /// <param name="taxStateAccountingCode">QuickBooks tax state code.</param>
        public OrderTaxes(decimal? arbitraryTax = default(decimal?), decimal? arbitraryTaxRate = default(decimal?), decimal? arbitraryTaxableSubtotal = default(decimal?), string taxCityAccountingCode = default(string), string taxCountryAccountingCode = default(string), string taxCounty = default(string), string taxCountyAccountingCode = default(string), bool? taxGiftCharge = default(bool?), string taxPostalCodeAccountingCode = default(string), decimal? taxRate = default(decimal?), decimal? taxRateCity = default(decimal?), decimal? taxRateCountry = default(decimal?), decimal? taxRateCounty = default(decimal?), decimal? taxRatePostalCode = default(decimal?), decimal? taxRateState = default(decimal?), bool? taxShipping = default(bool?), string taxStateAccountingCode = default(string))
        {
            this.ArbitraryTax = arbitraryTax;
            this.ArbitraryTaxRate = arbitraryTaxRate;
            this.ArbitraryTaxableSubtotal = arbitraryTaxableSubtotal;
            this.TaxCityAccountingCode = taxCityAccountingCode;
            this.TaxCountryAccountingCode = taxCountryAccountingCode;
            this.TaxCounty = taxCounty;
            this.TaxCountyAccountingCode = taxCountyAccountingCode;
            this.TaxGiftCharge = taxGiftCharge;
            this.TaxPostalCodeAccountingCode = taxPostalCodeAccountingCode;
            this.TaxRate = taxRate;
            this.TaxRateCity = taxRateCity;
            this.TaxRateCountry = taxRateCountry;
            this.TaxRateCounty = taxRateCounty;
            this.TaxRatePostalCode = taxRatePostalCode;
            this.TaxRateState = taxRateState;
            this.TaxShipping = taxShipping;
            this.TaxStateAccountingCode = taxStateAccountingCode;
        }
        
        /// <summary>
        /// Arbitrary Tax, this is meaningless for updating an order.  For inserting a new order, this will override any internal tax calculations and should only be used for orders completed outside the system.
        /// </summary>
        /// <value>Arbitrary Tax, this is meaningless for updating an order.  For inserting a new order, this will override any internal tax calculations and should only be used for orders completed outside the system.</value>
        [DataMember(Name="arbitrary_tax", EmitDefaultValue=false)]
        public decimal? ArbitraryTax { get; set; }

        /// <summary>
        /// Arbitrary tax rate, this is meaningless for updating an order.  For inserting a new order, this will override any internal tax calculations and should only be used for orders completed outside the system.
        /// </summary>
        /// <value>Arbitrary tax rate, this is meaningless for updating an order.  For inserting a new order, this will override any internal tax calculations and should only be used for orders completed outside the system.</value>
        [DataMember(Name="arbitrary_tax_rate", EmitDefaultValue=false)]
        public decimal? ArbitraryTaxRate { get; set; }

        /// <summary>
        /// Arbitrary taxable subtotal, this is meaningless for updating an order.  For inserting a new order, this will override any internal tax calculations and should only be used for orders completed outside the system.
        /// </summary>
        /// <value>Arbitrary taxable subtotal, this is meaningless for updating an order.  For inserting a new order, this will override any internal tax calculations and should only be used for orders completed outside the system.</value>
        [DataMember(Name="arbitrary_taxable_subtotal", EmitDefaultValue=false)]
        public decimal? ArbitraryTaxableSubtotal { get; set; }

        /// <summary>
        /// QuickBooks tax city code
        /// </summary>
        /// <value>QuickBooks tax city code</value>
        [DataMember(Name="tax_city_accounting_code", EmitDefaultValue=false)]
        public string TaxCityAccountingCode { get; set; }

        /// <summary>
        /// QuickBooks tax country code
        /// </summary>
        /// <value>QuickBooks tax country code</value>
        [DataMember(Name="tax_country_accounting_code", EmitDefaultValue=false)]
        public string TaxCountryAccountingCode { get; set; }

        /// <summary>
        /// County used for tax calculation purposes (only in the United States)
        /// </summary>
        /// <value>County used for tax calculation purposes (only in the United States)</value>
        [DataMember(Name="tax_county", EmitDefaultValue=false)]
        public string TaxCounty { get; set; }

        /// <summary>
        /// QuickBooks tax county code
        /// </summary>
        /// <value>QuickBooks tax county code</value>
        [DataMember(Name="tax_county_accounting_code", EmitDefaultValue=false)]
        public string TaxCountyAccountingCode { get; set; }

        /// <summary>
        /// True if gift charge is taxed
        /// </summary>
        /// <value>True if gift charge is taxed</value>
        [DataMember(Name="tax_gift_charge", EmitDefaultValue=false)]
        public bool? TaxGiftCharge { get; set; }

        /// <summary>
        /// QuickBooks tax postal code code
        /// </summary>
        /// <value>QuickBooks tax postal code code</value>
        [DataMember(Name="tax_postal_code_accounting_code", EmitDefaultValue=false)]
        public string TaxPostalCodeAccountingCode { get; set; }

        /// <summary>
        /// Tax rate, this is meaningless for updating an order.  For inserting a new order, if you need to override internal tax calculations, use the arbitrary fields.
        /// </summary>
        /// <value>Tax rate, this is meaningless for updating an order.  For inserting a new order, if you need to override internal tax calculations, use the arbitrary fields.</value>
        [DataMember(Name="tax_rate", EmitDefaultValue=false)]
        public decimal? TaxRate { get; set; }

        /// <summary>
        /// Tax rate at the city level
        /// </summary>
        /// <value>Tax rate at the city level</value>
        [DataMember(Name="tax_rate_city", EmitDefaultValue=false)]
        public decimal? TaxRateCity { get; set; }

        /// <summary>
        /// Tax rate at the country level
        /// </summary>
        /// <value>Tax rate at the country level</value>
        [DataMember(Name="tax_rate_country", EmitDefaultValue=false)]
        public decimal? TaxRateCountry { get; set; }

        /// <summary>
        /// Tax rate at the county level
        /// </summary>
        /// <value>Tax rate at the county level</value>
        [DataMember(Name="tax_rate_county", EmitDefaultValue=false)]
        public decimal? TaxRateCounty { get; set; }

        /// <summary>
        /// Tax rate at the postal code level
        /// </summary>
        /// <value>Tax rate at the postal code level</value>
        [DataMember(Name="tax_rate_postal_code", EmitDefaultValue=false)]
        public decimal? TaxRatePostalCode { get; set; }

        /// <summary>
        /// Tax rate at the state level
        /// </summary>
        /// <value>Tax rate at the state level</value>
        [DataMember(Name="tax_rate_state", EmitDefaultValue=false)]
        public decimal? TaxRateState { get; set; }

        /// <summary>
        /// True if shipping is taxed
        /// </summary>
        /// <value>True if shipping is taxed</value>
        [DataMember(Name="tax_shipping", EmitDefaultValue=false)]
        public bool? TaxShipping { get; set; }

        /// <summary>
        /// QuickBooks tax state code
        /// </summary>
        /// <value>QuickBooks tax state code</value>
        [DataMember(Name="tax_state_accounting_code", EmitDefaultValue=false)]
        public string TaxStateAccountingCode { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class OrderTaxes {\n");
            sb.Append("  ArbitraryTax: ").Append(ArbitraryTax).Append("\n");
            sb.Append("  ArbitraryTaxRate: ").Append(ArbitraryTaxRate).Append("\n");
            sb.Append("  ArbitraryTaxableSubtotal: ").Append(ArbitraryTaxableSubtotal).Append("\n");
            sb.Append("  TaxCityAccountingCode: ").Append(TaxCityAccountingCode).Append("\n");
            sb.Append("  TaxCountryAccountingCode: ").Append(TaxCountryAccountingCode).Append("\n");
            sb.Append("  TaxCounty: ").Append(TaxCounty).Append("\n");
            sb.Append("  TaxCountyAccountingCode: ").Append(TaxCountyAccountingCode).Append("\n");
            sb.Append("  TaxGiftCharge: ").Append(TaxGiftCharge).Append("\n");
            sb.Append("  TaxPostalCodeAccountingCode: ").Append(TaxPostalCodeAccountingCode).Append("\n");
            sb.Append("  TaxRate: ").Append(TaxRate).Append("\n");
            sb.Append("  TaxRateCity: ").Append(TaxRateCity).Append("\n");
            sb.Append("  TaxRateCountry: ").Append(TaxRateCountry).Append("\n");
            sb.Append("  TaxRateCounty: ").Append(TaxRateCounty).Append("\n");
            sb.Append("  TaxRatePostalCode: ").Append(TaxRatePostalCode).Append("\n");
            sb.Append("  TaxRateState: ").Append(TaxRateState).Append("\n");
            sb.Append("  TaxShipping: ").Append(TaxShipping).Append("\n");
            sb.Append("  TaxStateAccountingCode: ").Append(TaxStateAccountingCode).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as OrderTaxes);
        }

        /// <summary>
        /// Returns true if OrderTaxes instances are equal
        /// </summary>
        /// <param name="input">Instance of OrderTaxes to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(OrderTaxes input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ArbitraryTax == input.ArbitraryTax ||
                    (this.ArbitraryTax != null &&
                    this.ArbitraryTax.Equals(input.ArbitraryTax))
                ) && 
                (
                    this.ArbitraryTaxRate == input.ArbitraryTaxRate ||
                    (this.ArbitraryTaxRate != null &&
                    this.ArbitraryTaxRate.Equals(input.ArbitraryTaxRate))
                ) && 
                (
                    this.ArbitraryTaxableSubtotal == input.ArbitraryTaxableSubtotal ||
                    (this.ArbitraryTaxableSubtotal != null &&
                    this.ArbitraryTaxableSubtotal.Equals(input.ArbitraryTaxableSubtotal))
                ) && 
                (
                    this.TaxCityAccountingCode == input.TaxCityAccountingCode ||
                    (this.TaxCityAccountingCode != null &&
                    this.TaxCityAccountingCode.Equals(input.TaxCityAccountingCode))
                ) && 
                (
                    this.TaxCountryAccountingCode == input.TaxCountryAccountingCode ||
                    (this.TaxCountryAccountingCode != null &&
                    this.TaxCountryAccountingCode.Equals(input.TaxCountryAccountingCode))
                ) && 
                (
                    this.TaxCounty == input.TaxCounty ||
                    (this.TaxCounty != null &&
                    this.TaxCounty.Equals(input.TaxCounty))
                ) && 
                (
                    this.TaxCountyAccountingCode == input.TaxCountyAccountingCode ||
                    (this.TaxCountyAccountingCode != null &&
                    this.TaxCountyAccountingCode.Equals(input.TaxCountyAccountingCode))
                ) && 
                (
                    this.TaxGiftCharge == input.TaxGiftCharge ||
                    (this.TaxGiftCharge != null &&
                    this.TaxGiftCharge.Equals(input.TaxGiftCharge))
                ) && 
                (
                    this.TaxPostalCodeAccountingCode == input.TaxPostalCodeAccountingCode ||
                    (this.TaxPostalCodeAccountingCode != null &&
                    this.TaxPostalCodeAccountingCode.Equals(input.TaxPostalCodeAccountingCode))
                ) && 
                (
                    this.TaxRate == input.TaxRate ||
                    (this.TaxRate != null &&
                    this.TaxRate.Equals(input.TaxRate))
                ) && 
                (
                    this.TaxRateCity == input.TaxRateCity ||
                    (this.TaxRateCity != null &&
                    this.TaxRateCity.Equals(input.TaxRateCity))
                ) && 
                (
                    this.TaxRateCountry == input.TaxRateCountry ||
                    (this.TaxRateCountry != null &&
                    this.TaxRateCountry.Equals(input.TaxRateCountry))
                ) && 
                (
                    this.TaxRateCounty == input.TaxRateCounty ||
                    (this.TaxRateCounty != null &&
                    this.TaxRateCounty.Equals(input.TaxRateCounty))
                ) && 
                (
                    this.TaxRatePostalCode == input.TaxRatePostalCode ||
                    (this.TaxRatePostalCode != null &&
                    this.TaxRatePostalCode.Equals(input.TaxRatePostalCode))
                ) && 
                (
                    this.TaxRateState == input.TaxRateState ||
                    (this.TaxRateState != null &&
                    this.TaxRateState.Equals(input.TaxRateState))
                ) && 
                (
                    this.TaxShipping == input.TaxShipping ||
                    (this.TaxShipping != null &&
                    this.TaxShipping.Equals(input.TaxShipping))
                ) && 
                (
                    this.TaxStateAccountingCode == input.TaxStateAccountingCode ||
                    (this.TaxStateAccountingCode != null &&
                    this.TaxStateAccountingCode.Equals(input.TaxStateAccountingCode))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ArbitraryTax != null)
                    hashCode = hashCode * 59 + this.ArbitraryTax.GetHashCode();
                if (this.ArbitraryTaxRate != null)
                    hashCode = hashCode * 59 + this.ArbitraryTaxRate.GetHashCode();
                if (this.ArbitraryTaxableSubtotal != null)
                    hashCode = hashCode * 59 + this.ArbitraryTaxableSubtotal.GetHashCode();
                if (this.TaxCityAccountingCode != null)
                    hashCode = hashCode * 59 + this.TaxCityAccountingCode.GetHashCode();
                if (this.TaxCountryAccountingCode != null)
                    hashCode = hashCode * 59 + this.TaxCountryAccountingCode.GetHashCode();
                if (this.TaxCounty != null)
                    hashCode = hashCode * 59 + this.TaxCounty.GetHashCode();
                if (this.TaxCountyAccountingCode != null)
                    hashCode = hashCode * 59 + this.TaxCountyAccountingCode.GetHashCode();
                if (this.TaxGiftCharge != null)
                    hashCode = hashCode * 59 + this.TaxGiftCharge.GetHashCode();
                if (this.TaxPostalCodeAccountingCode != null)
                    hashCode = hashCode * 59 + this.TaxPostalCodeAccountingCode.GetHashCode();
                if (this.TaxRate != null)
                    hashCode = hashCode * 59 + this.TaxRate.GetHashCode();
                if (this.TaxRateCity != null)
                    hashCode = hashCode * 59 + this.TaxRateCity.GetHashCode();
                if (this.TaxRateCountry != null)
                    hashCode = hashCode * 59 + this.TaxRateCountry.GetHashCode();
                if (this.TaxRateCounty != null)
                    hashCode = hashCode * 59 + this.TaxRateCounty.GetHashCode();
                if (this.TaxRatePostalCode != null)
                    hashCode = hashCode * 59 + this.TaxRatePostalCode.GetHashCode();
                if (this.TaxRateState != null)
                    hashCode = hashCode * 59 + this.TaxRateState.GetHashCode();
                if (this.TaxShipping != null)
                    hashCode = hashCode * 59 + this.TaxShipping.GetHashCode();
                if (this.TaxStateAccountingCode != null)
                    hashCode = hashCode * 59 + this.TaxStateAccountingCode.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // TaxCounty (string) maxLength
            if(this.TaxCounty != null && this.TaxCounty.Length > 32)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for TaxCounty, length must be less than 32.", new [] { "TaxCounty" });
            }

            yield break;
        }
    }

}
