/* 
 * UltraCart Rest API V2
 *
 * UltraCart REST API Version 2
 *
 * OpenAPI spec version: 2.0.0
 * Contact: support@ultracart.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = com.ultracart.admin.v2.Client.SwaggerDateConverter;

namespace com.ultracart.admin.v2.Model
{
    /// <summary>
    /// OrderTrackingNumberDetail
    /// </summary>
    [DataContract]
    public partial class OrderTrackingNumberDetail :  IEquatable<OrderTrackingNumberDetail>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="OrderTrackingNumberDetail" /> class.
        /// </summary>
        /// <param name="city">city.</param>
        /// <param name="eventDts">ISO 8601 timestamp that the event occurred.</param>
        /// <param name="eventLocalDate">eventLocalDate.</param>
        /// <param name="eventLocalTime">eventLocalTime.</param>
        /// <param name="eventTimezoneId">Timezone the event occurred in.  Use this in conjunction with event_dts to format a local date/time..</param>
        /// <param name="state">state.</param>
        /// <param name="subtag">subtag.</param>
        /// <param name="subtagMessage">subtagMessage.</param>
        /// <param name="tag">tag.</param>
        /// <param name="tagDescription">tagDescription.</param>
        /// <param name="tagIcon">tagIcon.</param>
        /// <param name="zip">zip.</param>
        public OrderTrackingNumberDetail(string city = default(string), string eventDts = default(string), string eventLocalDate = default(string), string eventLocalTime = default(string), string eventTimezoneId = default(string), string state = default(string), string subtag = default(string), string subtagMessage = default(string), string tag = default(string), string tagDescription = default(string), string tagIcon = default(string), string zip = default(string))
        {
            this.City = city;
            this.EventDts = eventDts;
            this.EventLocalDate = eventLocalDate;
            this.EventLocalTime = eventLocalTime;
            this.EventTimezoneId = eventTimezoneId;
            this.State = state;
            this.Subtag = subtag;
            this.SubtagMessage = subtagMessage;
            this.Tag = tag;
            this.TagDescription = tagDescription;
            this.TagIcon = tagIcon;
            this.Zip = zip;
        }
        
        /// <summary>
        /// Gets or Sets City
        /// </summary>
        [DataMember(Name="city", EmitDefaultValue=false)]
        public string City { get; set; }

        /// <summary>
        /// ISO 8601 timestamp that the event occurred
        /// </summary>
        /// <value>ISO 8601 timestamp that the event occurred</value>
        [DataMember(Name="event_dts", EmitDefaultValue=false)]
        public string EventDts { get; set; }

        /// <summary>
        /// Gets or Sets EventLocalDate
        /// </summary>
        [DataMember(Name="event_local_date", EmitDefaultValue=false)]
        public string EventLocalDate { get; set; }

        /// <summary>
        /// Gets or Sets EventLocalTime
        /// </summary>
        [DataMember(Name="event_local_time", EmitDefaultValue=false)]
        public string EventLocalTime { get; set; }

        /// <summary>
        /// Timezone the event occurred in.  Use this in conjunction with event_dts to format a local date/time.
        /// </summary>
        /// <value>Timezone the event occurred in.  Use this in conjunction with event_dts to format a local date/time.</value>
        [DataMember(Name="event_timezone_id", EmitDefaultValue=false)]
        public string EventTimezoneId { get; set; }

        /// <summary>
        /// Gets or Sets State
        /// </summary>
        [DataMember(Name="state", EmitDefaultValue=false)]
        public string State { get; set; }

        /// <summary>
        /// Gets or Sets Subtag
        /// </summary>
        [DataMember(Name="subtag", EmitDefaultValue=false)]
        public string Subtag { get; set; }

        /// <summary>
        /// Gets or Sets SubtagMessage
        /// </summary>
        [DataMember(Name="subtag_message", EmitDefaultValue=false)]
        public string SubtagMessage { get; set; }

        /// <summary>
        /// Gets or Sets Tag
        /// </summary>
        [DataMember(Name="tag", EmitDefaultValue=false)]
        public string Tag { get; set; }

        /// <summary>
        /// Gets or Sets TagDescription
        /// </summary>
        [DataMember(Name="tag_description", EmitDefaultValue=false)]
        public string TagDescription { get; set; }

        /// <summary>
        /// Gets or Sets TagIcon
        /// </summary>
        [DataMember(Name="tag_icon", EmitDefaultValue=false)]
        public string TagIcon { get; set; }

        /// <summary>
        /// Gets or Sets Zip
        /// </summary>
        [DataMember(Name="zip", EmitDefaultValue=false)]
        public string Zip { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class OrderTrackingNumberDetail {\n");
            sb.Append("  City: ").Append(City).Append("\n");
            sb.Append("  EventDts: ").Append(EventDts).Append("\n");
            sb.Append("  EventLocalDate: ").Append(EventLocalDate).Append("\n");
            sb.Append("  EventLocalTime: ").Append(EventLocalTime).Append("\n");
            sb.Append("  EventTimezoneId: ").Append(EventTimezoneId).Append("\n");
            sb.Append("  State: ").Append(State).Append("\n");
            sb.Append("  Subtag: ").Append(Subtag).Append("\n");
            sb.Append("  SubtagMessage: ").Append(SubtagMessage).Append("\n");
            sb.Append("  Tag: ").Append(Tag).Append("\n");
            sb.Append("  TagDescription: ").Append(TagDescription).Append("\n");
            sb.Append("  TagIcon: ").Append(TagIcon).Append("\n");
            sb.Append("  Zip: ").Append(Zip).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as OrderTrackingNumberDetail);
        }

        /// <summary>
        /// Returns true if OrderTrackingNumberDetail instances are equal
        /// </summary>
        /// <param name="input">Instance of OrderTrackingNumberDetail to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(OrderTrackingNumberDetail input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.City == input.City ||
                    (this.City != null &&
                    this.City.Equals(input.City))
                ) && 
                (
                    this.EventDts == input.EventDts ||
                    (this.EventDts != null &&
                    this.EventDts.Equals(input.EventDts))
                ) && 
                (
                    this.EventLocalDate == input.EventLocalDate ||
                    (this.EventLocalDate != null &&
                    this.EventLocalDate.Equals(input.EventLocalDate))
                ) && 
                (
                    this.EventLocalTime == input.EventLocalTime ||
                    (this.EventLocalTime != null &&
                    this.EventLocalTime.Equals(input.EventLocalTime))
                ) && 
                (
                    this.EventTimezoneId == input.EventTimezoneId ||
                    (this.EventTimezoneId != null &&
                    this.EventTimezoneId.Equals(input.EventTimezoneId))
                ) && 
                (
                    this.State == input.State ||
                    (this.State != null &&
                    this.State.Equals(input.State))
                ) && 
                (
                    this.Subtag == input.Subtag ||
                    (this.Subtag != null &&
                    this.Subtag.Equals(input.Subtag))
                ) && 
                (
                    this.SubtagMessage == input.SubtagMessage ||
                    (this.SubtagMessage != null &&
                    this.SubtagMessage.Equals(input.SubtagMessage))
                ) && 
                (
                    this.Tag == input.Tag ||
                    (this.Tag != null &&
                    this.Tag.Equals(input.Tag))
                ) && 
                (
                    this.TagDescription == input.TagDescription ||
                    (this.TagDescription != null &&
                    this.TagDescription.Equals(input.TagDescription))
                ) && 
                (
                    this.TagIcon == input.TagIcon ||
                    (this.TagIcon != null &&
                    this.TagIcon.Equals(input.TagIcon))
                ) && 
                (
                    this.Zip == input.Zip ||
                    (this.Zip != null &&
                    this.Zip.Equals(input.Zip))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.City != null)
                    hashCode = hashCode * 59 + this.City.GetHashCode();
                if (this.EventDts != null)
                    hashCode = hashCode * 59 + this.EventDts.GetHashCode();
                if (this.EventLocalDate != null)
                    hashCode = hashCode * 59 + this.EventLocalDate.GetHashCode();
                if (this.EventLocalTime != null)
                    hashCode = hashCode * 59 + this.EventLocalTime.GetHashCode();
                if (this.EventTimezoneId != null)
                    hashCode = hashCode * 59 + this.EventTimezoneId.GetHashCode();
                if (this.State != null)
                    hashCode = hashCode * 59 + this.State.GetHashCode();
                if (this.Subtag != null)
                    hashCode = hashCode * 59 + this.Subtag.GetHashCode();
                if (this.SubtagMessage != null)
                    hashCode = hashCode * 59 + this.SubtagMessage.GetHashCode();
                if (this.Tag != null)
                    hashCode = hashCode * 59 + this.Tag.GetHashCode();
                if (this.TagDescription != null)
                    hashCode = hashCode * 59 + this.TagDescription.GetHashCode();
                if (this.TagIcon != null)
                    hashCode = hashCode * 59 + this.TagIcon.GetHashCode();
                if (this.Zip != null)
                    hashCode = hashCode * 59 + this.Zip.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
