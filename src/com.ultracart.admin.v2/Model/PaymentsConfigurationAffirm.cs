/* 
 * UltraCart Rest API V2
 *
 * UltraCart REST API Version 2
 *
 * OpenAPI spec version: 2.0.0
 * Contact: support@ultracart.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = com.ultracart.admin.v2.Client.SwaggerDateConverter;

namespace com.ultracart.admin.v2.Model
{
    /// <summary>
    /// PaymentsConfigurationAffirm
    /// </summary>
    [DataContract]
    public partial class PaymentsConfigurationAffirm :  IEquatable<PaymentsConfigurationAffirm>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PaymentsConfigurationAffirm" /> class.
        /// </summary>
        /// <param name="acceptAffirm">acceptAffirm.</param>
        /// <param name="affirmAccountingCode">affirmAccountingCode.</param>
        /// <param name="affirmDepositToAccount">affirmDepositToAccount.</param>
        /// <param name="affirmEnvironment">affirmEnvironment.</param>
        /// <param name="affirmFinancialProductKey">affirmFinancialProductKey.</param>
        /// <param name="affirmPrivateApiKey">affirmPrivateApiKey.</param>
        /// <param name="affirmPublicApiKey">affirmPublicApiKey.</param>
        /// <param name="restrictions">restrictions.</param>
        public PaymentsConfigurationAffirm(bool? acceptAffirm = default(bool?), string affirmAccountingCode = default(string), string affirmDepositToAccount = default(string), string affirmEnvironment = default(string), string affirmFinancialProductKey = default(string), string affirmPrivateApiKey = default(string), string affirmPublicApiKey = default(string), PaymentsConfigurationRestrictions restrictions = default(PaymentsConfigurationRestrictions))
        {
            this.AcceptAffirm = acceptAffirm;
            this.AffirmAccountingCode = affirmAccountingCode;
            this.AffirmDepositToAccount = affirmDepositToAccount;
            this.AffirmEnvironment = affirmEnvironment;
            this.AffirmFinancialProductKey = affirmFinancialProductKey;
            this.AffirmPrivateApiKey = affirmPrivateApiKey;
            this.AffirmPublicApiKey = affirmPublicApiKey;
            this.Restrictions = restrictions;
        }
        
        /// <summary>
        /// Gets or Sets AcceptAffirm
        /// </summary>
        [DataMember(Name="acceptAffirm", EmitDefaultValue=false)]
        public bool? AcceptAffirm { get; set; }

        /// <summary>
        /// Gets or Sets AffirmAccountingCode
        /// </summary>
        [DataMember(Name="affirmAccountingCode", EmitDefaultValue=false)]
        public string AffirmAccountingCode { get; set; }

        /// <summary>
        /// Gets or Sets AffirmDepositToAccount
        /// </summary>
        [DataMember(Name="affirmDepositToAccount", EmitDefaultValue=false)]
        public string AffirmDepositToAccount { get; set; }

        /// <summary>
        /// Gets or Sets AffirmEnvironment
        /// </summary>
        [DataMember(Name="affirmEnvironment", EmitDefaultValue=false)]
        public string AffirmEnvironment { get; set; }

        /// <summary>
        /// Gets or Sets AffirmFinancialProductKey
        /// </summary>
        [DataMember(Name="affirmFinancialProductKey", EmitDefaultValue=false)]
        public string AffirmFinancialProductKey { get; set; }

        /// <summary>
        /// Gets or Sets AffirmPrivateApiKey
        /// </summary>
        [DataMember(Name="affirmPrivateApiKey", EmitDefaultValue=false)]
        public string AffirmPrivateApiKey { get; set; }

        /// <summary>
        /// Gets or Sets AffirmPublicApiKey
        /// </summary>
        [DataMember(Name="affirmPublicApiKey", EmitDefaultValue=false)]
        public string AffirmPublicApiKey { get; set; }

        /// <summary>
        /// Gets or Sets Restrictions
        /// </summary>
        [DataMember(Name="restrictions", EmitDefaultValue=false)]
        public PaymentsConfigurationRestrictions Restrictions { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PaymentsConfigurationAffirm {\n");
            sb.Append("  AcceptAffirm: ").Append(AcceptAffirm).Append("\n");
            sb.Append("  AffirmAccountingCode: ").Append(AffirmAccountingCode).Append("\n");
            sb.Append("  AffirmDepositToAccount: ").Append(AffirmDepositToAccount).Append("\n");
            sb.Append("  AffirmEnvironment: ").Append(AffirmEnvironment).Append("\n");
            sb.Append("  AffirmFinancialProductKey: ").Append(AffirmFinancialProductKey).Append("\n");
            sb.Append("  AffirmPrivateApiKey: ").Append(AffirmPrivateApiKey).Append("\n");
            sb.Append("  AffirmPublicApiKey: ").Append(AffirmPublicApiKey).Append("\n");
            sb.Append("  Restrictions: ").Append(Restrictions).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PaymentsConfigurationAffirm);
        }

        /// <summary>
        /// Returns true if PaymentsConfigurationAffirm instances are equal
        /// </summary>
        /// <param name="input">Instance of PaymentsConfigurationAffirm to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PaymentsConfigurationAffirm input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.AcceptAffirm == input.AcceptAffirm ||
                    (this.AcceptAffirm != null &&
                    this.AcceptAffirm.Equals(input.AcceptAffirm))
                ) && 
                (
                    this.AffirmAccountingCode == input.AffirmAccountingCode ||
                    (this.AffirmAccountingCode != null &&
                    this.AffirmAccountingCode.Equals(input.AffirmAccountingCode))
                ) && 
                (
                    this.AffirmDepositToAccount == input.AffirmDepositToAccount ||
                    (this.AffirmDepositToAccount != null &&
                    this.AffirmDepositToAccount.Equals(input.AffirmDepositToAccount))
                ) && 
                (
                    this.AffirmEnvironment == input.AffirmEnvironment ||
                    (this.AffirmEnvironment != null &&
                    this.AffirmEnvironment.Equals(input.AffirmEnvironment))
                ) && 
                (
                    this.AffirmFinancialProductKey == input.AffirmFinancialProductKey ||
                    (this.AffirmFinancialProductKey != null &&
                    this.AffirmFinancialProductKey.Equals(input.AffirmFinancialProductKey))
                ) && 
                (
                    this.AffirmPrivateApiKey == input.AffirmPrivateApiKey ||
                    (this.AffirmPrivateApiKey != null &&
                    this.AffirmPrivateApiKey.Equals(input.AffirmPrivateApiKey))
                ) && 
                (
                    this.AffirmPublicApiKey == input.AffirmPublicApiKey ||
                    (this.AffirmPublicApiKey != null &&
                    this.AffirmPublicApiKey.Equals(input.AffirmPublicApiKey))
                ) && 
                (
                    this.Restrictions == input.Restrictions ||
                    (this.Restrictions != null &&
                    this.Restrictions.Equals(input.Restrictions))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AcceptAffirm != null)
                    hashCode = hashCode * 59 + this.AcceptAffirm.GetHashCode();
                if (this.AffirmAccountingCode != null)
                    hashCode = hashCode * 59 + this.AffirmAccountingCode.GetHashCode();
                if (this.AffirmDepositToAccount != null)
                    hashCode = hashCode * 59 + this.AffirmDepositToAccount.GetHashCode();
                if (this.AffirmEnvironment != null)
                    hashCode = hashCode * 59 + this.AffirmEnvironment.GetHashCode();
                if (this.AffirmFinancialProductKey != null)
                    hashCode = hashCode * 59 + this.AffirmFinancialProductKey.GetHashCode();
                if (this.AffirmPrivateApiKey != null)
                    hashCode = hashCode * 59 + this.AffirmPrivateApiKey.GetHashCode();
                if (this.AffirmPublicApiKey != null)
                    hashCode = hashCode * 59 + this.AffirmPublicApiKey.GetHashCode();
                if (this.Restrictions != null)
                    hashCode = hashCode * 59 + this.Restrictions.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
