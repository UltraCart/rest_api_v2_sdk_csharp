/* 
 * UltraCart Rest API V2
 *
 * UltraCart REST API Version 2
 *
 * OpenAPI spec version: 2.0.0
 * Contact: support@ultracart.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = com.ultracart.admin.v2.Client.SwaggerDateConverter;

namespace com.ultracart.admin.v2.Model
{
    /// <summary>
    /// PaymentsConfigurationAffirm
    /// </summary>
    [DataContract]
    public partial class PaymentsConfigurationAffirm :  IEquatable<PaymentsConfigurationAffirm>, IValidatableObject
    {
        /// <summary>
        /// Environment
        /// </summary>
        /// <value>Environment</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum EnvironmentEnum
        {
            
            /// <summary>
            /// Enum Live for value: Live
            /// </summary>
            [EnumMember(Value = "Live")]
            Live = 1,
            
            /// <summary>
            /// Enum Sandbox for value: Sandbox
            /// </summary>
            [EnumMember(Value = "Sandbox")]
            Sandbox = 2
        }

        /// <summary>
        /// Environment
        /// </summary>
        /// <value>Environment</value>
        [DataMember(Name="environment", EmitDefaultValue=false)]
        public EnvironmentEnum? Environment { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="PaymentsConfigurationAffirm" /> class.
        /// </summary>
        /// <param name="acceptAffirm">Master flag indicating this merchant accepts Affirm payments.</param>
        /// <param name="accountingCode">Optional Quickbooks code for this payment method.</param>
        /// <param name="depositToAccount">Optional Quickbooks Deposit to Account value.</param>
        /// <param name="environment">Environment.</param>
        /// <param name="financialProductKey">Financial product key.</param>
        /// <param name="privateApiKey">Private API key.</param>
        /// <param name="publicApiKey">Public API key.</param>
        /// <param name="restrictions">restrictions.</param>
        public PaymentsConfigurationAffirm(bool? acceptAffirm = default(bool?), string accountingCode = default(string), string depositToAccount = default(string), EnvironmentEnum? environment = default(EnvironmentEnum?), string financialProductKey = default(string), string privateApiKey = default(string), string publicApiKey = default(string), PaymentsConfigurationRestrictions restrictions = default(PaymentsConfigurationRestrictions))
        {
            this.AcceptAffirm = acceptAffirm;
            this.AccountingCode = accountingCode;
            this.DepositToAccount = depositToAccount;
            this.Environment = environment;
            this.FinancialProductKey = financialProductKey;
            this.PrivateApiKey = privateApiKey;
            this.PublicApiKey = publicApiKey;
            this.Restrictions = restrictions;
        }
        
        /// <summary>
        /// Master flag indicating this merchant accepts Affirm payments
        /// </summary>
        /// <value>Master flag indicating this merchant accepts Affirm payments</value>
        [DataMember(Name="accept_affirm", EmitDefaultValue=false)]
        public bool? AcceptAffirm { get; set; }

        /// <summary>
        /// Optional Quickbooks code for this payment method
        /// </summary>
        /// <value>Optional Quickbooks code for this payment method</value>
        [DataMember(Name="accounting_code", EmitDefaultValue=false)]
        public string AccountingCode { get; set; }

        /// <summary>
        /// Optional Quickbooks Deposit to Account value
        /// </summary>
        /// <value>Optional Quickbooks Deposit to Account value</value>
        [DataMember(Name="deposit_to_account", EmitDefaultValue=false)]
        public string DepositToAccount { get; set; }


        /// <summary>
        /// Financial product key
        /// </summary>
        /// <value>Financial product key</value>
        [DataMember(Name="financial_product_key", EmitDefaultValue=false)]
        public string FinancialProductKey { get; set; }

        /// <summary>
        /// Private API key
        /// </summary>
        /// <value>Private API key</value>
        [DataMember(Name="private_api_key", EmitDefaultValue=false)]
        public string PrivateApiKey { get; set; }

        /// <summary>
        /// Public API key
        /// </summary>
        /// <value>Public API key</value>
        [DataMember(Name="public_api_key", EmitDefaultValue=false)]
        public string PublicApiKey { get; set; }

        /// <summary>
        /// Gets or Sets Restrictions
        /// </summary>
        [DataMember(Name="restrictions", EmitDefaultValue=false)]
        public PaymentsConfigurationRestrictions Restrictions { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PaymentsConfigurationAffirm {\n");
            sb.Append("  AcceptAffirm: ").Append(AcceptAffirm).Append("\n");
            sb.Append("  AccountingCode: ").Append(AccountingCode).Append("\n");
            sb.Append("  DepositToAccount: ").Append(DepositToAccount).Append("\n");
            sb.Append("  Environment: ").Append(Environment).Append("\n");
            sb.Append("  FinancialProductKey: ").Append(FinancialProductKey).Append("\n");
            sb.Append("  PrivateApiKey: ").Append(PrivateApiKey).Append("\n");
            sb.Append("  PublicApiKey: ").Append(PublicApiKey).Append("\n");
            sb.Append("  Restrictions: ").Append(Restrictions).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PaymentsConfigurationAffirm);
        }

        /// <summary>
        /// Returns true if PaymentsConfigurationAffirm instances are equal
        /// </summary>
        /// <param name="input">Instance of PaymentsConfigurationAffirm to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PaymentsConfigurationAffirm input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.AcceptAffirm == input.AcceptAffirm ||
                    (this.AcceptAffirm != null &&
                    this.AcceptAffirm.Equals(input.AcceptAffirm))
                ) && 
                (
                    this.AccountingCode == input.AccountingCode ||
                    (this.AccountingCode != null &&
                    this.AccountingCode.Equals(input.AccountingCode))
                ) && 
                (
                    this.DepositToAccount == input.DepositToAccount ||
                    (this.DepositToAccount != null &&
                    this.DepositToAccount.Equals(input.DepositToAccount))
                ) && 
                (
                    this.Environment == input.Environment ||
                    (this.Environment != null &&
                    this.Environment.Equals(input.Environment))
                ) && 
                (
                    this.FinancialProductKey == input.FinancialProductKey ||
                    (this.FinancialProductKey != null &&
                    this.FinancialProductKey.Equals(input.FinancialProductKey))
                ) && 
                (
                    this.PrivateApiKey == input.PrivateApiKey ||
                    (this.PrivateApiKey != null &&
                    this.PrivateApiKey.Equals(input.PrivateApiKey))
                ) && 
                (
                    this.PublicApiKey == input.PublicApiKey ||
                    (this.PublicApiKey != null &&
                    this.PublicApiKey.Equals(input.PublicApiKey))
                ) && 
                (
                    this.Restrictions == input.Restrictions ||
                    (this.Restrictions != null &&
                    this.Restrictions.Equals(input.Restrictions))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AcceptAffirm != null)
                    hashCode = hashCode * 59 + this.AcceptAffirm.GetHashCode();
                if (this.AccountingCode != null)
                    hashCode = hashCode * 59 + this.AccountingCode.GetHashCode();
                if (this.DepositToAccount != null)
                    hashCode = hashCode * 59 + this.DepositToAccount.GetHashCode();
                if (this.Environment != null)
                    hashCode = hashCode * 59 + this.Environment.GetHashCode();
                if (this.FinancialProductKey != null)
                    hashCode = hashCode * 59 + this.FinancialProductKey.GetHashCode();
                if (this.PrivateApiKey != null)
                    hashCode = hashCode * 59 + this.PrivateApiKey.GetHashCode();
                if (this.PublicApiKey != null)
                    hashCode = hashCode * 59 + this.PublicApiKey.GetHashCode();
                if (this.Restrictions != null)
                    hashCode = hashCode * 59 + this.Restrictions.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
