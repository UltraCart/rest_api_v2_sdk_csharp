/* 
 * UltraCart Rest API V2
 *
 * UltraCart REST API Version 2
 *
 * OpenAPI spec version: 2.0.0
 * Contact: support@ultracart.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = com.ultracart.admin.v2.Client.SwaggerDateConverter;

namespace com.ultracart.admin.v2.Model
{
    /// <summary>
    /// PaymentsConfigurationCOD
    /// </summary>
    [DataContract]
    public partial class PaymentsConfigurationCOD :  IEquatable<PaymentsConfigurationCOD>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PaymentsConfigurationCOD" /> class.
        /// </summary>
        /// <param name="acceptCod">Master flag indicating this merchant accepts COD.</param>
        /// <param name="approvedCustomersOnly">If true, only approved customers may pay with COD.</param>
        /// <param name="restrictions">restrictions.</param>
        /// <param name="surchargeAccountingCode">Optional field, if surcharge is set, this is the accounting code the surcharge is tagged with when sent to Quickbooks.</param>
        /// <param name="surchargeFee">Additional cost for using COD.</param>
        /// <param name="surchargePercentage">Additional percentage cost for using COD.</param>
        public PaymentsConfigurationCOD(bool? acceptCod = default(bool?), bool? approvedCustomersOnly = default(bool?), PaymentsConfigurationRestrictions restrictions = default(PaymentsConfigurationRestrictions), string surchargeAccountingCode = default(string), decimal? surchargeFee = default(decimal?), decimal? surchargePercentage = default(decimal?))
        {
            this.AcceptCod = acceptCod;
            this.ApprovedCustomersOnly = approvedCustomersOnly;
            this.Restrictions = restrictions;
            this.SurchargeAccountingCode = surchargeAccountingCode;
            this.SurchargeFee = surchargeFee;
            this.SurchargePercentage = surchargePercentage;
        }
        
        /// <summary>
        /// Master flag indicating this merchant accepts COD
        /// </summary>
        /// <value>Master flag indicating this merchant accepts COD</value>
        [DataMember(Name="accept_cod", EmitDefaultValue=false)]
        public bool? AcceptCod { get; set; }

        /// <summary>
        /// If true, only approved customers may pay with COD
        /// </summary>
        /// <value>If true, only approved customers may pay with COD</value>
        [DataMember(Name="approved_customers_only", EmitDefaultValue=false)]
        public bool? ApprovedCustomersOnly { get; set; }

        /// <summary>
        /// Gets or Sets Restrictions
        /// </summary>
        [DataMember(Name="restrictions", EmitDefaultValue=false)]
        public PaymentsConfigurationRestrictions Restrictions { get; set; }

        /// <summary>
        /// Optional field, if surcharge is set, this is the accounting code the surcharge is tagged with when sent to Quickbooks
        /// </summary>
        /// <value>Optional field, if surcharge is set, this is the accounting code the surcharge is tagged with when sent to Quickbooks</value>
        [DataMember(Name="surcharge_accounting_code", EmitDefaultValue=false)]
        public string SurchargeAccountingCode { get; set; }

        /// <summary>
        /// Additional cost for using COD
        /// </summary>
        /// <value>Additional cost for using COD</value>
        [DataMember(Name="surcharge_fee", EmitDefaultValue=false)]
        public decimal? SurchargeFee { get; set; }

        /// <summary>
        /// Additional percentage cost for using COD
        /// </summary>
        /// <value>Additional percentage cost for using COD</value>
        [DataMember(Name="surcharge_percentage", EmitDefaultValue=false)]
        public decimal? SurchargePercentage { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PaymentsConfigurationCOD {\n");
            sb.Append("  AcceptCod: ").Append(AcceptCod).Append("\n");
            sb.Append("  ApprovedCustomersOnly: ").Append(ApprovedCustomersOnly).Append("\n");
            sb.Append("  Restrictions: ").Append(Restrictions).Append("\n");
            sb.Append("  SurchargeAccountingCode: ").Append(SurchargeAccountingCode).Append("\n");
            sb.Append("  SurchargeFee: ").Append(SurchargeFee).Append("\n");
            sb.Append("  SurchargePercentage: ").Append(SurchargePercentage).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PaymentsConfigurationCOD);
        }

        /// <summary>
        /// Returns true if PaymentsConfigurationCOD instances are equal
        /// </summary>
        /// <param name="input">Instance of PaymentsConfigurationCOD to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PaymentsConfigurationCOD input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.AcceptCod == input.AcceptCod ||
                    (this.AcceptCod != null &&
                    this.AcceptCod.Equals(input.AcceptCod))
                ) && 
                (
                    this.ApprovedCustomersOnly == input.ApprovedCustomersOnly ||
                    (this.ApprovedCustomersOnly != null &&
                    this.ApprovedCustomersOnly.Equals(input.ApprovedCustomersOnly))
                ) && 
                (
                    this.Restrictions == input.Restrictions ||
                    (this.Restrictions != null &&
                    this.Restrictions.Equals(input.Restrictions))
                ) && 
                (
                    this.SurchargeAccountingCode == input.SurchargeAccountingCode ||
                    (this.SurchargeAccountingCode != null &&
                    this.SurchargeAccountingCode.Equals(input.SurchargeAccountingCode))
                ) && 
                (
                    this.SurchargeFee == input.SurchargeFee ||
                    (this.SurchargeFee != null &&
                    this.SurchargeFee.Equals(input.SurchargeFee))
                ) && 
                (
                    this.SurchargePercentage == input.SurchargePercentage ||
                    (this.SurchargePercentage != null &&
                    this.SurchargePercentage.Equals(input.SurchargePercentage))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AcceptCod != null)
                    hashCode = hashCode * 59 + this.AcceptCod.GetHashCode();
                if (this.ApprovedCustomersOnly != null)
                    hashCode = hashCode * 59 + this.ApprovedCustomersOnly.GetHashCode();
                if (this.Restrictions != null)
                    hashCode = hashCode * 59 + this.Restrictions.GetHashCode();
                if (this.SurchargeAccountingCode != null)
                    hashCode = hashCode * 59 + this.SurchargeAccountingCode.GetHashCode();
                if (this.SurchargeFee != null)
                    hashCode = hashCode * 59 + this.SurchargeFee.GetHashCode();
                if (this.SurchargePercentage != null)
                    hashCode = hashCode * 59 + this.SurchargePercentage.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
