/* 
 * UltraCart Rest API V2
 *
 * UltraCart REST API Version 2
 *
 * OpenAPI spec version: 2.0.0
 * Contact: support@ultracart.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = com.ultracart.admin.v2.Client.SwaggerDateConverter;

namespace com.ultracart.admin.v2.Model
{
    /// <summary>
    /// PaymentsConfigurationCheck
    /// </summary>
    [DataContract]
    public partial class PaymentsConfigurationCheck :  IEquatable<PaymentsConfigurationCheck>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PaymentsConfigurationCheck" /> class.
        /// </summary>
        /// <param name="acceptCheckOrders">acceptCheckOrders.</param>
        /// <param name="acceptECheck">acceptECheck.</param>
        /// <param name="acceptMoneyOrders">acceptMoneyOrders.</param>
        /// <param name="checkAccountingCode">checkAccountingCode.</param>
        /// <param name="checkDepositToAccount">checkDepositToAccount.</param>
        /// <param name="checksPayableTo">checksPayableTo.</param>
        /// <param name="eCheckAccountingCode">eCheckAccountingCode.</param>
        /// <param name="eCheckDepositToAccount">eCheckDepositToAccount.</param>
        /// <param name="mailToAddress1">mailToAddress1.</param>
        /// <param name="mailToAddress2">mailToAddress2.</param>
        /// <param name="mailToCity">mailToCity.</param>
        /// <param name="mailToCountry">mailToCountry.</param>
        /// <param name="mailToName">mailToName.</param>
        /// <param name="mailToState">mailToState.</param>
        /// <param name="mailToZip">mailToZip.</param>
        /// <param name="moneyOrderAccountingCode">moneyOrderAccountingCode.</param>
        /// <param name="moneyOrderDepositToAccount">moneyOrderDepositToAccount.</param>
        /// <param name="restrictions">restrictions.</param>
        public PaymentsConfigurationCheck(bool? acceptCheckOrders = default(bool?), bool? acceptECheck = default(bool?), bool? acceptMoneyOrders = default(bool?), string checkAccountingCode = default(string), string checkDepositToAccount = default(string), string checksPayableTo = default(string), string eCheckAccountingCode = default(string), string eCheckDepositToAccount = default(string), string mailToAddress1 = default(string), string mailToAddress2 = default(string), string mailToCity = default(string), string mailToCountry = default(string), string mailToName = default(string), string mailToState = default(string), string mailToZip = default(string), string moneyOrderAccountingCode = default(string), string moneyOrderDepositToAccount = default(string), PaymentsConfigurationRestrictions restrictions = default(PaymentsConfigurationRestrictions))
        {
            this.AcceptCheckOrders = acceptCheckOrders;
            this.AcceptECheck = acceptECheck;
            this.AcceptMoneyOrders = acceptMoneyOrders;
            this.CheckAccountingCode = checkAccountingCode;
            this.CheckDepositToAccount = checkDepositToAccount;
            this.ChecksPayableTo = checksPayableTo;
            this.ECheckAccountingCode = eCheckAccountingCode;
            this.ECheckDepositToAccount = eCheckDepositToAccount;
            this.MailToAddress1 = mailToAddress1;
            this.MailToAddress2 = mailToAddress2;
            this.MailToCity = mailToCity;
            this.MailToCountry = mailToCountry;
            this.MailToName = mailToName;
            this.MailToState = mailToState;
            this.MailToZip = mailToZip;
            this.MoneyOrderAccountingCode = moneyOrderAccountingCode;
            this.MoneyOrderDepositToAccount = moneyOrderDepositToAccount;
            this.Restrictions = restrictions;
        }
        
        /// <summary>
        /// Gets or Sets AcceptCheckOrders
        /// </summary>
        [DataMember(Name="acceptCheckOrders", EmitDefaultValue=false)]
        public bool? AcceptCheckOrders { get; set; }

        /// <summary>
        /// Gets or Sets AcceptECheck
        /// </summary>
        [DataMember(Name="acceptECheck", EmitDefaultValue=false)]
        public bool? AcceptECheck { get; set; }

        /// <summary>
        /// Gets or Sets AcceptMoneyOrders
        /// </summary>
        [DataMember(Name="acceptMoneyOrders", EmitDefaultValue=false)]
        public bool? AcceptMoneyOrders { get; set; }

        /// <summary>
        /// Gets or Sets CheckAccountingCode
        /// </summary>
        [DataMember(Name="checkAccountingCode", EmitDefaultValue=false)]
        public string CheckAccountingCode { get; set; }

        /// <summary>
        /// Gets or Sets CheckDepositToAccount
        /// </summary>
        [DataMember(Name="checkDepositToAccount", EmitDefaultValue=false)]
        public string CheckDepositToAccount { get; set; }

        /// <summary>
        /// Gets or Sets ChecksPayableTo
        /// </summary>
        [DataMember(Name="checksPayableTo", EmitDefaultValue=false)]
        public string ChecksPayableTo { get; set; }

        /// <summary>
        /// Gets or Sets ECheckAccountingCode
        /// </summary>
        [DataMember(Name="eCheckAccountingCode", EmitDefaultValue=false)]
        public string ECheckAccountingCode { get; set; }

        /// <summary>
        /// Gets or Sets ECheckDepositToAccount
        /// </summary>
        [DataMember(Name="eCheckDepositToAccount", EmitDefaultValue=false)]
        public string ECheckDepositToAccount { get; set; }

        /// <summary>
        /// Gets or Sets MailToAddress1
        /// </summary>
        [DataMember(Name="mailToAddress1", EmitDefaultValue=false)]
        public string MailToAddress1 { get; set; }

        /// <summary>
        /// Gets or Sets MailToAddress2
        /// </summary>
        [DataMember(Name="mailToAddress2", EmitDefaultValue=false)]
        public string MailToAddress2 { get; set; }

        /// <summary>
        /// Gets or Sets MailToCity
        /// </summary>
        [DataMember(Name="mailToCity", EmitDefaultValue=false)]
        public string MailToCity { get; set; }

        /// <summary>
        /// Gets or Sets MailToCountry
        /// </summary>
        [DataMember(Name="mailToCountry", EmitDefaultValue=false)]
        public string MailToCountry { get; set; }

        /// <summary>
        /// Gets or Sets MailToName
        /// </summary>
        [DataMember(Name="mailToName", EmitDefaultValue=false)]
        public string MailToName { get; set; }

        /// <summary>
        /// Gets or Sets MailToState
        /// </summary>
        [DataMember(Name="mailToState", EmitDefaultValue=false)]
        public string MailToState { get; set; }

        /// <summary>
        /// Gets or Sets MailToZip
        /// </summary>
        [DataMember(Name="mailToZip", EmitDefaultValue=false)]
        public string MailToZip { get; set; }

        /// <summary>
        /// Gets or Sets MoneyOrderAccountingCode
        /// </summary>
        [DataMember(Name="moneyOrderAccountingCode", EmitDefaultValue=false)]
        public string MoneyOrderAccountingCode { get; set; }

        /// <summary>
        /// Gets or Sets MoneyOrderDepositToAccount
        /// </summary>
        [DataMember(Name="moneyOrderDepositToAccount", EmitDefaultValue=false)]
        public string MoneyOrderDepositToAccount { get; set; }

        /// <summary>
        /// Gets or Sets Restrictions
        /// </summary>
        [DataMember(Name="restrictions", EmitDefaultValue=false)]
        public PaymentsConfigurationRestrictions Restrictions { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PaymentsConfigurationCheck {\n");
            sb.Append("  AcceptCheckOrders: ").Append(AcceptCheckOrders).Append("\n");
            sb.Append("  AcceptECheck: ").Append(AcceptECheck).Append("\n");
            sb.Append("  AcceptMoneyOrders: ").Append(AcceptMoneyOrders).Append("\n");
            sb.Append("  CheckAccountingCode: ").Append(CheckAccountingCode).Append("\n");
            sb.Append("  CheckDepositToAccount: ").Append(CheckDepositToAccount).Append("\n");
            sb.Append("  ChecksPayableTo: ").Append(ChecksPayableTo).Append("\n");
            sb.Append("  ECheckAccountingCode: ").Append(ECheckAccountingCode).Append("\n");
            sb.Append("  ECheckDepositToAccount: ").Append(ECheckDepositToAccount).Append("\n");
            sb.Append("  MailToAddress1: ").Append(MailToAddress1).Append("\n");
            sb.Append("  MailToAddress2: ").Append(MailToAddress2).Append("\n");
            sb.Append("  MailToCity: ").Append(MailToCity).Append("\n");
            sb.Append("  MailToCountry: ").Append(MailToCountry).Append("\n");
            sb.Append("  MailToName: ").Append(MailToName).Append("\n");
            sb.Append("  MailToState: ").Append(MailToState).Append("\n");
            sb.Append("  MailToZip: ").Append(MailToZip).Append("\n");
            sb.Append("  MoneyOrderAccountingCode: ").Append(MoneyOrderAccountingCode).Append("\n");
            sb.Append("  MoneyOrderDepositToAccount: ").Append(MoneyOrderDepositToAccount).Append("\n");
            sb.Append("  Restrictions: ").Append(Restrictions).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PaymentsConfigurationCheck);
        }

        /// <summary>
        /// Returns true if PaymentsConfigurationCheck instances are equal
        /// </summary>
        /// <param name="input">Instance of PaymentsConfigurationCheck to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PaymentsConfigurationCheck input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.AcceptCheckOrders == input.AcceptCheckOrders ||
                    (this.AcceptCheckOrders != null &&
                    this.AcceptCheckOrders.Equals(input.AcceptCheckOrders))
                ) && 
                (
                    this.AcceptECheck == input.AcceptECheck ||
                    (this.AcceptECheck != null &&
                    this.AcceptECheck.Equals(input.AcceptECheck))
                ) && 
                (
                    this.AcceptMoneyOrders == input.AcceptMoneyOrders ||
                    (this.AcceptMoneyOrders != null &&
                    this.AcceptMoneyOrders.Equals(input.AcceptMoneyOrders))
                ) && 
                (
                    this.CheckAccountingCode == input.CheckAccountingCode ||
                    (this.CheckAccountingCode != null &&
                    this.CheckAccountingCode.Equals(input.CheckAccountingCode))
                ) && 
                (
                    this.CheckDepositToAccount == input.CheckDepositToAccount ||
                    (this.CheckDepositToAccount != null &&
                    this.CheckDepositToAccount.Equals(input.CheckDepositToAccount))
                ) && 
                (
                    this.ChecksPayableTo == input.ChecksPayableTo ||
                    (this.ChecksPayableTo != null &&
                    this.ChecksPayableTo.Equals(input.ChecksPayableTo))
                ) && 
                (
                    this.ECheckAccountingCode == input.ECheckAccountingCode ||
                    (this.ECheckAccountingCode != null &&
                    this.ECheckAccountingCode.Equals(input.ECheckAccountingCode))
                ) && 
                (
                    this.ECheckDepositToAccount == input.ECheckDepositToAccount ||
                    (this.ECheckDepositToAccount != null &&
                    this.ECheckDepositToAccount.Equals(input.ECheckDepositToAccount))
                ) && 
                (
                    this.MailToAddress1 == input.MailToAddress1 ||
                    (this.MailToAddress1 != null &&
                    this.MailToAddress1.Equals(input.MailToAddress1))
                ) && 
                (
                    this.MailToAddress2 == input.MailToAddress2 ||
                    (this.MailToAddress2 != null &&
                    this.MailToAddress2.Equals(input.MailToAddress2))
                ) && 
                (
                    this.MailToCity == input.MailToCity ||
                    (this.MailToCity != null &&
                    this.MailToCity.Equals(input.MailToCity))
                ) && 
                (
                    this.MailToCountry == input.MailToCountry ||
                    (this.MailToCountry != null &&
                    this.MailToCountry.Equals(input.MailToCountry))
                ) && 
                (
                    this.MailToName == input.MailToName ||
                    (this.MailToName != null &&
                    this.MailToName.Equals(input.MailToName))
                ) && 
                (
                    this.MailToState == input.MailToState ||
                    (this.MailToState != null &&
                    this.MailToState.Equals(input.MailToState))
                ) && 
                (
                    this.MailToZip == input.MailToZip ||
                    (this.MailToZip != null &&
                    this.MailToZip.Equals(input.MailToZip))
                ) && 
                (
                    this.MoneyOrderAccountingCode == input.MoneyOrderAccountingCode ||
                    (this.MoneyOrderAccountingCode != null &&
                    this.MoneyOrderAccountingCode.Equals(input.MoneyOrderAccountingCode))
                ) && 
                (
                    this.MoneyOrderDepositToAccount == input.MoneyOrderDepositToAccount ||
                    (this.MoneyOrderDepositToAccount != null &&
                    this.MoneyOrderDepositToAccount.Equals(input.MoneyOrderDepositToAccount))
                ) && 
                (
                    this.Restrictions == input.Restrictions ||
                    (this.Restrictions != null &&
                    this.Restrictions.Equals(input.Restrictions))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AcceptCheckOrders != null)
                    hashCode = hashCode * 59 + this.AcceptCheckOrders.GetHashCode();
                if (this.AcceptECheck != null)
                    hashCode = hashCode * 59 + this.AcceptECheck.GetHashCode();
                if (this.AcceptMoneyOrders != null)
                    hashCode = hashCode * 59 + this.AcceptMoneyOrders.GetHashCode();
                if (this.CheckAccountingCode != null)
                    hashCode = hashCode * 59 + this.CheckAccountingCode.GetHashCode();
                if (this.CheckDepositToAccount != null)
                    hashCode = hashCode * 59 + this.CheckDepositToAccount.GetHashCode();
                if (this.ChecksPayableTo != null)
                    hashCode = hashCode * 59 + this.ChecksPayableTo.GetHashCode();
                if (this.ECheckAccountingCode != null)
                    hashCode = hashCode * 59 + this.ECheckAccountingCode.GetHashCode();
                if (this.ECheckDepositToAccount != null)
                    hashCode = hashCode * 59 + this.ECheckDepositToAccount.GetHashCode();
                if (this.MailToAddress1 != null)
                    hashCode = hashCode * 59 + this.MailToAddress1.GetHashCode();
                if (this.MailToAddress2 != null)
                    hashCode = hashCode * 59 + this.MailToAddress2.GetHashCode();
                if (this.MailToCity != null)
                    hashCode = hashCode * 59 + this.MailToCity.GetHashCode();
                if (this.MailToCountry != null)
                    hashCode = hashCode * 59 + this.MailToCountry.GetHashCode();
                if (this.MailToName != null)
                    hashCode = hashCode * 59 + this.MailToName.GetHashCode();
                if (this.MailToState != null)
                    hashCode = hashCode * 59 + this.MailToState.GetHashCode();
                if (this.MailToZip != null)
                    hashCode = hashCode * 59 + this.MailToZip.GetHashCode();
                if (this.MoneyOrderAccountingCode != null)
                    hashCode = hashCode * 59 + this.MoneyOrderAccountingCode.GetHashCode();
                if (this.MoneyOrderDepositToAccount != null)
                    hashCode = hashCode * 59 + this.MoneyOrderDepositToAccount.GetHashCode();
                if (this.Restrictions != null)
                    hashCode = hashCode * 59 + this.Restrictions.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
