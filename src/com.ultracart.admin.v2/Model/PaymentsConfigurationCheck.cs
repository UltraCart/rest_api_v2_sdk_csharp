/* 
 * UltraCart Rest API V2
 *
 * UltraCart REST API Version 2
 *
 * OpenAPI spec version: 2.0.0
 * Contact: support@ultracart.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = com.ultracart.admin.v2.Client.SwaggerDateConverter;

namespace com.ultracart.admin.v2.Model
{
    /// <summary>
    /// PaymentsConfigurationCheck
    /// </summary>
    [DataContract]
    public partial class PaymentsConfigurationCheck :  IEquatable<PaymentsConfigurationCheck>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PaymentsConfigurationCheck" /> class.
        /// </summary>
        /// <param name="acceptCheckOrders">Master flag indicating this merchant accepts paper checks.</param>
        /// <param name="accountingCode">Optional Quickbooks accounting code.</param>
        /// <param name="checksPayableTo">This is who the customer makes the check out to.</param>
        /// <param name="depositToAccount">Optional Quickbooks deposit to account.</param>
        /// <param name="mailToAddress1">MailTo address line 1.</param>
        /// <param name="mailToAddress2">MailTo address line 2.</param>
        /// <param name="mailToCity">MailTo city.</param>
        /// <param name="mailToCountry">MailTo country.</param>
        /// <param name="mailToName">MailTo name.</param>
        /// <param name="mailToPostalCode">MailTo postal code.</param>
        /// <param name="mailToStore">MailTo store.</param>
        /// <param name="restrictions">restrictions.</param>
        /// <param name="testMethods">Test methods for this payment method.</param>
        public PaymentsConfigurationCheck(bool? acceptCheckOrders = default(bool?), string accountingCode = default(string), string checksPayableTo = default(string), string depositToAccount = default(string), string mailToAddress1 = default(string), string mailToAddress2 = default(string), string mailToCity = default(string), string mailToCountry = default(string), string mailToName = default(string), string mailToPostalCode = default(string), string mailToStore = default(string), PaymentsConfigurationRestrictions restrictions = default(PaymentsConfigurationRestrictions), Object testMethods = default(Object))
        {
            this.AcceptCheckOrders = acceptCheckOrders;
            this.AccountingCode = accountingCode;
            this.ChecksPayableTo = checksPayableTo;
            this.DepositToAccount = depositToAccount;
            this.MailToAddress1 = mailToAddress1;
            this.MailToAddress2 = mailToAddress2;
            this.MailToCity = mailToCity;
            this.MailToCountry = mailToCountry;
            this.MailToName = mailToName;
            this.MailToPostalCode = mailToPostalCode;
            this.MailToStore = mailToStore;
            this.Restrictions = restrictions;
            this.TestMethods = testMethods;
        }
        
        /// <summary>
        /// Master flag indicating this merchant accepts paper checks
        /// </summary>
        /// <value>Master flag indicating this merchant accepts paper checks</value>
        [DataMember(Name="accept_check_orders", EmitDefaultValue=false)]
        public bool? AcceptCheckOrders { get; set; }

        /// <summary>
        /// Optional Quickbooks accounting code
        /// </summary>
        /// <value>Optional Quickbooks accounting code</value>
        [DataMember(Name="accounting_code", EmitDefaultValue=false)]
        public string AccountingCode { get; set; }

        /// <summary>
        /// This is who the customer makes the check out to
        /// </summary>
        /// <value>This is who the customer makes the check out to</value>
        [DataMember(Name="checks_payable_to", EmitDefaultValue=false)]
        public string ChecksPayableTo { get; set; }

        /// <summary>
        /// Optional Quickbooks deposit to account
        /// </summary>
        /// <value>Optional Quickbooks deposit to account</value>
        [DataMember(Name="deposit_to_account", EmitDefaultValue=false)]
        public string DepositToAccount { get; set; }

        /// <summary>
        /// MailTo address line 1
        /// </summary>
        /// <value>MailTo address line 1</value>
        [DataMember(Name="mail_to_address1", EmitDefaultValue=false)]
        public string MailToAddress1 { get; set; }

        /// <summary>
        /// MailTo address line 2
        /// </summary>
        /// <value>MailTo address line 2</value>
        [DataMember(Name="mail_to_address2", EmitDefaultValue=false)]
        public string MailToAddress2 { get; set; }

        /// <summary>
        /// MailTo city
        /// </summary>
        /// <value>MailTo city</value>
        [DataMember(Name="mail_to_city", EmitDefaultValue=false)]
        public string MailToCity { get; set; }

        /// <summary>
        /// MailTo country
        /// </summary>
        /// <value>MailTo country</value>
        [DataMember(Name="mail_to_country", EmitDefaultValue=false)]
        public string MailToCountry { get; set; }

        /// <summary>
        /// MailTo name
        /// </summary>
        /// <value>MailTo name</value>
        [DataMember(Name="mail_to_name", EmitDefaultValue=false)]
        public string MailToName { get; set; }

        /// <summary>
        /// MailTo postal code
        /// </summary>
        /// <value>MailTo postal code</value>
        [DataMember(Name="mail_to_postal_code", EmitDefaultValue=false)]
        public string MailToPostalCode { get; set; }

        /// <summary>
        /// MailTo store
        /// </summary>
        /// <value>MailTo store</value>
        [DataMember(Name="mail_to_store", EmitDefaultValue=false)]
        public string MailToStore { get; set; }

        /// <summary>
        /// Gets or Sets Restrictions
        /// </summary>
        [DataMember(Name="restrictions", EmitDefaultValue=false)]
        public PaymentsConfigurationRestrictions Restrictions { get; set; }

        /// <summary>
        /// Test methods for this payment method
        /// </summary>
        /// <value>Test methods for this payment method</value>
        [DataMember(Name="test_methods", EmitDefaultValue=false)]
        public Object TestMethods { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PaymentsConfigurationCheck {\n");
            sb.Append("  AcceptCheckOrders: ").Append(AcceptCheckOrders).Append("\n");
            sb.Append("  AccountingCode: ").Append(AccountingCode).Append("\n");
            sb.Append("  ChecksPayableTo: ").Append(ChecksPayableTo).Append("\n");
            sb.Append("  DepositToAccount: ").Append(DepositToAccount).Append("\n");
            sb.Append("  MailToAddress1: ").Append(MailToAddress1).Append("\n");
            sb.Append("  MailToAddress2: ").Append(MailToAddress2).Append("\n");
            sb.Append("  MailToCity: ").Append(MailToCity).Append("\n");
            sb.Append("  MailToCountry: ").Append(MailToCountry).Append("\n");
            sb.Append("  MailToName: ").Append(MailToName).Append("\n");
            sb.Append("  MailToPostalCode: ").Append(MailToPostalCode).Append("\n");
            sb.Append("  MailToStore: ").Append(MailToStore).Append("\n");
            sb.Append("  Restrictions: ").Append(Restrictions).Append("\n");
            sb.Append("  TestMethods: ").Append(TestMethods).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PaymentsConfigurationCheck);
        }

        /// <summary>
        /// Returns true if PaymentsConfigurationCheck instances are equal
        /// </summary>
        /// <param name="input">Instance of PaymentsConfigurationCheck to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PaymentsConfigurationCheck input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.AcceptCheckOrders == input.AcceptCheckOrders ||
                    (this.AcceptCheckOrders != null &&
                    this.AcceptCheckOrders.Equals(input.AcceptCheckOrders))
                ) && 
                (
                    this.AccountingCode == input.AccountingCode ||
                    (this.AccountingCode != null &&
                    this.AccountingCode.Equals(input.AccountingCode))
                ) && 
                (
                    this.ChecksPayableTo == input.ChecksPayableTo ||
                    (this.ChecksPayableTo != null &&
                    this.ChecksPayableTo.Equals(input.ChecksPayableTo))
                ) && 
                (
                    this.DepositToAccount == input.DepositToAccount ||
                    (this.DepositToAccount != null &&
                    this.DepositToAccount.Equals(input.DepositToAccount))
                ) && 
                (
                    this.MailToAddress1 == input.MailToAddress1 ||
                    (this.MailToAddress1 != null &&
                    this.MailToAddress1.Equals(input.MailToAddress1))
                ) && 
                (
                    this.MailToAddress2 == input.MailToAddress2 ||
                    (this.MailToAddress2 != null &&
                    this.MailToAddress2.Equals(input.MailToAddress2))
                ) && 
                (
                    this.MailToCity == input.MailToCity ||
                    (this.MailToCity != null &&
                    this.MailToCity.Equals(input.MailToCity))
                ) && 
                (
                    this.MailToCountry == input.MailToCountry ||
                    (this.MailToCountry != null &&
                    this.MailToCountry.Equals(input.MailToCountry))
                ) && 
                (
                    this.MailToName == input.MailToName ||
                    (this.MailToName != null &&
                    this.MailToName.Equals(input.MailToName))
                ) && 
                (
                    this.MailToPostalCode == input.MailToPostalCode ||
                    (this.MailToPostalCode != null &&
                    this.MailToPostalCode.Equals(input.MailToPostalCode))
                ) && 
                (
                    this.MailToStore == input.MailToStore ||
                    (this.MailToStore != null &&
                    this.MailToStore.Equals(input.MailToStore))
                ) && 
                (
                    this.Restrictions == input.Restrictions ||
                    (this.Restrictions != null &&
                    this.Restrictions.Equals(input.Restrictions))
                ) && 
                (
                    this.TestMethods == input.TestMethods ||
                    (this.TestMethods != null &&
                    this.TestMethods.Equals(input.TestMethods))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AcceptCheckOrders != null)
                    hashCode = hashCode * 59 + this.AcceptCheckOrders.GetHashCode();
                if (this.AccountingCode != null)
                    hashCode = hashCode * 59 + this.AccountingCode.GetHashCode();
                if (this.ChecksPayableTo != null)
                    hashCode = hashCode * 59 + this.ChecksPayableTo.GetHashCode();
                if (this.DepositToAccount != null)
                    hashCode = hashCode * 59 + this.DepositToAccount.GetHashCode();
                if (this.MailToAddress1 != null)
                    hashCode = hashCode * 59 + this.MailToAddress1.GetHashCode();
                if (this.MailToAddress2 != null)
                    hashCode = hashCode * 59 + this.MailToAddress2.GetHashCode();
                if (this.MailToCity != null)
                    hashCode = hashCode * 59 + this.MailToCity.GetHashCode();
                if (this.MailToCountry != null)
                    hashCode = hashCode * 59 + this.MailToCountry.GetHashCode();
                if (this.MailToName != null)
                    hashCode = hashCode * 59 + this.MailToName.GetHashCode();
                if (this.MailToPostalCode != null)
                    hashCode = hashCode * 59 + this.MailToPostalCode.GetHashCode();
                if (this.MailToStore != null)
                    hashCode = hashCode * 59 + this.MailToStore.GetHashCode();
                if (this.Restrictions != null)
                    hashCode = hashCode * 59 + this.Restrictions.GetHashCode();
                if (this.TestMethods != null)
                    hashCode = hashCode * 59 + this.TestMethods.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
