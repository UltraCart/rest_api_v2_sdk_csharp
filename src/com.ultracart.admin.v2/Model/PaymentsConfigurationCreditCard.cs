/* 
 * UltraCart Rest API V2
 *
 * UltraCart REST API Version 2
 *
 * OpenAPI spec version: 2.0.0
 * Contact: support@ultracart.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = com.ultracart.admin.v2.Client.SwaggerDateConverter;

namespace com.ultracart.admin.v2.Model
{
    /// <summary>
    /// PaymentsConfigurationCreditCard
    /// </summary>
    [DataContract]
    public partial class PaymentsConfigurationCreditCard :  IEquatable<PaymentsConfigurationCreditCard>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PaymentsConfigurationCreditCard" /> class.
        /// </summary>
        /// <param name="acceptCreditCard">Master flag indicating whether this merchant accepts credit card payments.</param>
        /// <param name="billedBy">Description that appears on customer statements.</param>
        /// <param name="chargeDuringCheckout">If false, order will be accepted and placed into Accounts Receivable without charging card first.</param>
        /// <param name="collectCvv2">UltraCart will require customer to enter cvv if this is true.</param>
        /// <param name="configuredGatewayDetails">Human readable description of the credit card gateway currently configured.</param>
        /// <param name="failedAttempts">The number of failed attempts before the order is placed into Accounts Receivable for manual intervention.</param>
        /// <param name="hideConnectSingleGateway">This internal flag aids the UI in determining which buttons to show..</param>
        /// <param name="restrictions">Restrictions for this payment method.</param>
        /// <param name="sendCustomerBillingUpdateOnDecline">UltraCart will send customers emails to update their credit card if the card is declined.</param>
        /// <param name="supportedCards">A list of credit cards the merchant wishes to accept..</param>
        /// <param name="testMethods">An array of test methods for placing test orders.  The cards defined here may be real or fake, but any order placed with them will be marked as Test orders.</param>
        public PaymentsConfigurationCreditCard(bool? acceptCreditCard = default(bool?), string billedBy = default(string), bool? chargeDuringCheckout = default(bool?), bool? collectCvv2 = default(bool?), string configuredGatewayDetails = default(string), string failedAttempts = default(string), bool? hideConnectSingleGateway = default(bool?), Object restrictions = default(Object), bool? sendCustomerBillingUpdateOnDecline = default(bool?), Object supportedCards = default(Object), Object testMethods = default(Object))
        {
            this.AcceptCreditCard = acceptCreditCard;
            this.BilledBy = billedBy;
            this.ChargeDuringCheckout = chargeDuringCheckout;
            this.CollectCvv2 = collectCvv2;
            this.ConfiguredGatewayDetails = configuredGatewayDetails;
            this.FailedAttempts = failedAttempts;
            this.HideConnectSingleGateway = hideConnectSingleGateway;
            this.Restrictions = restrictions;
            this.SendCustomerBillingUpdateOnDecline = sendCustomerBillingUpdateOnDecline;
            this.SupportedCards = supportedCards;
            this.TestMethods = testMethods;
        }
        
        /// <summary>
        /// Master flag indicating whether this merchant accepts credit card payments
        /// </summary>
        /// <value>Master flag indicating whether this merchant accepts credit card payments</value>
        [DataMember(Name="accept_credit_card", EmitDefaultValue=false)]
        public bool? AcceptCreditCard { get; set; }

        /// <summary>
        /// Description that appears on customer statements
        /// </summary>
        /// <value>Description that appears on customer statements</value>
        [DataMember(Name="billed_by", EmitDefaultValue=false)]
        public string BilledBy { get; set; }

        /// <summary>
        /// If false, order will be accepted and placed into Accounts Receivable without charging card first
        /// </summary>
        /// <value>If false, order will be accepted and placed into Accounts Receivable without charging card first</value>
        [DataMember(Name="charge_during_checkout", EmitDefaultValue=false)]
        public bool? ChargeDuringCheckout { get; set; }

        /// <summary>
        /// UltraCart will require customer to enter cvv if this is true
        /// </summary>
        /// <value>UltraCart will require customer to enter cvv if this is true</value>
        [DataMember(Name="collect_cvv2", EmitDefaultValue=false)]
        public bool? CollectCvv2 { get; set; }

        /// <summary>
        /// Human readable description of the credit card gateway currently configured
        /// </summary>
        /// <value>Human readable description of the credit card gateway currently configured</value>
        [DataMember(Name="configured_gateway_details", EmitDefaultValue=false)]
        public string ConfiguredGatewayDetails { get; set; }

        /// <summary>
        /// The number of failed attempts before the order is placed into Accounts Receivable for manual intervention
        /// </summary>
        /// <value>The number of failed attempts before the order is placed into Accounts Receivable for manual intervention</value>
        [DataMember(Name="failed_attempts", EmitDefaultValue=false)]
        public string FailedAttempts { get; set; }

        /// <summary>
        /// This internal flag aids the UI in determining which buttons to show.
        /// </summary>
        /// <value>This internal flag aids the UI in determining which buttons to show.</value>
        [DataMember(Name="hide_connect_single_gateway", EmitDefaultValue=false)]
        public bool? HideConnectSingleGateway { get; set; }

        /// <summary>
        /// Restrictions for this payment method
        /// </summary>
        /// <value>Restrictions for this payment method</value>
        [DataMember(Name="restrictions", EmitDefaultValue=false)]
        public Object Restrictions { get; set; }

        /// <summary>
        /// UltraCart will send customers emails to update their credit card if the card is declined
        /// </summary>
        /// <value>UltraCart will send customers emails to update their credit card if the card is declined</value>
        [DataMember(Name="send_customer_billing_update_on_decline", EmitDefaultValue=false)]
        public bool? SendCustomerBillingUpdateOnDecline { get; set; }

        /// <summary>
        /// A list of credit cards the merchant wishes to accept.
        /// </summary>
        /// <value>A list of credit cards the merchant wishes to accept.</value>
        [DataMember(Name="supported_cards", EmitDefaultValue=false)]
        public Object SupportedCards { get; set; }

        /// <summary>
        /// An array of test methods for placing test orders.  The cards defined here may be real or fake, but any order placed with them will be marked as Test orders
        /// </summary>
        /// <value>An array of test methods for placing test orders.  The cards defined here may be real or fake, but any order placed with them will be marked as Test orders</value>
        [DataMember(Name="test_methods", EmitDefaultValue=false)]
        public Object TestMethods { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PaymentsConfigurationCreditCard {\n");
            sb.Append("  AcceptCreditCard: ").Append(AcceptCreditCard).Append("\n");
            sb.Append("  BilledBy: ").Append(BilledBy).Append("\n");
            sb.Append("  ChargeDuringCheckout: ").Append(ChargeDuringCheckout).Append("\n");
            sb.Append("  CollectCvv2: ").Append(CollectCvv2).Append("\n");
            sb.Append("  ConfiguredGatewayDetails: ").Append(ConfiguredGatewayDetails).Append("\n");
            sb.Append("  FailedAttempts: ").Append(FailedAttempts).Append("\n");
            sb.Append("  HideConnectSingleGateway: ").Append(HideConnectSingleGateway).Append("\n");
            sb.Append("  Restrictions: ").Append(Restrictions).Append("\n");
            sb.Append("  SendCustomerBillingUpdateOnDecline: ").Append(SendCustomerBillingUpdateOnDecline).Append("\n");
            sb.Append("  SupportedCards: ").Append(SupportedCards).Append("\n");
            sb.Append("  TestMethods: ").Append(TestMethods).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PaymentsConfigurationCreditCard);
        }

        /// <summary>
        /// Returns true if PaymentsConfigurationCreditCard instances are equal
        /// </summary>
        /// <param name="input">Instance of PaymentsConfigurationCreditCard to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PaymentsConfigurationCreditCard input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.AcceptCreditCard == input.AcceptCreditCard ||
                    (this.AcceptCreditCard != null &&
                    this.AcceptCreditCard.Equals(input.AcceptCreditCard))
                ) && 
                (
                    this.BilledBy == input.BilledBy ||
                    (this.BilledBy != null &&
                    this.BilledBy.Equals(input.BilledBy))
                ) && 
                (
                    this.ChargeDuringCheckout == input.ChargeDuringCheckout ||
                    (this.ChargeDuringCheckout != null &&
                    this.ChargeDuringCheckout.Equals(input.ChargeDuringCheckout))
                ) && 
                (
                    this.CollectCvv2 == input.CollectCvv2 ||
                    (this.CollectCvv2 != null &&
                    this.CollectCvv2.Equals(input.CollectCvv2))
                ) && 
                (
                    this.ConfiguredGatewayDetails == input.ConfiguredGatewayDetails ||
                    (this.ConfiguredGatewayDetails != null &&
                    this.ConfiguredGatewayDetails.Equals(input.ConfiguredGatewayDetails))
                ) && 
                (
                    this.FailedAttempts == input.FailedAttempts ||
                    (this.FailedAttempts != null &&
                    this.FailedAttempts.Equals(input.FailedAttempts))
                ) && 
                (
                    this.HideConnectSingleGateway == input.HideConnectSingleGateway ||
                    (this.HideConnectSingleGateway != null &&
                    this.HideConnectSingleGateway.Equals(input.HideConnectSingleGateway))
                ) && 
                (
                    this.Restrictions == input.Restrictions ||
                    (this.Restrictions != null &&
                    this.Restrictions.Equals(input.Restrictions))
                ) && 
                (
                    this.SendCustomerBillingUpdateOnDecline == input.SendCustomerBillingUpdateOnDecline ||
                    (this.SendCustomerBillingUpdateOnDecline != null &&
                    this.SendCustomerBillingUpdateOnDecline.Equals(input.SendCustomerBillingUpdateOnDecline))
                ) && 
                (
                    this.SupportedCards == input.SupportedCards ||
                    (this.SupportedCards != null &&
                    this.SupportedCards.Equals(input.SupportedCards))
                ) && 
                (
                    this.TestMethods == input.TestMethods ||
                    (this.TestMethods != null &&
                    this.TestMethods.Equals(input.TestMethods))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AcceptCreditCard != null)
                    hashCode = hashCode * 59 + this.AcceptCreditCard.GetHashCode();
                if (this.BilledBy != null)
                    hashCode = hashCode * 59 + this.BilledBy.GetHashCode();
                if (this.ChargeDuringCheckout != null)
                    hashCode = hashCode * 59 + this.ChargeDuringCheckout.GetHashCode();
                if (this.CollectCvv2 != null)
                    hashCode = hashCode * 59 + this.CollectCvv2.GetHashCode();
                if (this.ConfiguredGatewayDetails != null)
                    hashCode = hashCode * 59 + this.ConfiguredGatewayDetails.GetHashCode();
                if (this.FailedAttempts != null)
                    hashCode = hashCode * 59 + this.FailedAttempts.GetHashCode();
                if (this.HideConnectSingleGateway != null)
                    hashCode = hashCode * 59 + this.HideConnectSingleGateway.GetHashCode();
                if (this.Restrictions != null)
                    hashCode = hashCode * 59 + this.Restrictions.GetHashCode();
                if (this.SendCustomerBillingUpdateOnDecline != null)
                    hashCode = hashCode * 59 + this.SendCustomerBillingUpdateOnDecline.GetHashCode();
                if (this.SupportedCards != null)
                    hashCode = hashCode * 59 + this.SupportedCards.GetHashCode();
                if (this.TestMethods != null)
                    hashCode = hashCode * 59 + this.TestMethods.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
