/* 
 * UltraCart Rest API V2
 *
 * UltraCart REST API Version 2
 *
 * OpenAPI spec version: 2.0.0
 * Contact: support@ultracart.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = com.ultracart.admin.v2.Client.SwaggerDateConverter;

namespace com.ultracart.admin.v2.Model
{
    /// <summary>
    /// PaymentsConfigurationCreditCardType
    /// </summary>
    [DataContract]
    public partial class PaymentsConfigurationCreditCardType :  IEquatable<PaymentsConfigurationCreditCardType>, IValidatableObject
    {
        /// <summary>
        /// Credit card type
        /// </summary>
        /// <value>Credit card type</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum CreditCardEnum
        {
            
            /// <summary>
            /// Enum AMEX for value: AMEX
            /// </summary>
            [EnumMember(Value = "AMEX")]
            AMEX = 1,
            
            /// <summary>
            /// Enum DinersClub for value: Diners Club
            /// </summary>
            [EnumMember(Value = "Diners Club")]
            DinersClub = 2,
            
            /// <summary>
            /// Enum Discover for value: Discover
            /// </summary>
            [EnumMember(Value = "Discover")]
            Discover = 3,
            
            /// <summary>
            /// Enum MasterCard for value: MasterCard
            /// </summary>
            [EnumMember(Value = "MasterCard")]
            MasterCard = 4,
            
            /// <summary>
            /// Enum JCB for value: JCB
            /// </summary>
            [EnumMember(Value = "JCB")]
            JCB = 5,
            
            /// <summary>
            /// Enum VISA for value: VISA
            /// </summary>
            [EnumMember(Value = "VISA")]
            VISA = 6
        }

        /// <summary>
        /// Credit card type
        /// </summary>
        /// <value>Credit card type</value>
        [DataMember(Name="credit_card", EmitDefaultValue=false)]
        public CreditCardEnum? CreditCard { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="PaymentsConfigurationCreditCardType" /> class.
        /// </summary>
        /// <param name="accountingCode">Optional field used for Quickbooks integrations to match this credit card with the corresponding payment type in Quickbooks.</param>
        /// <param name="cardTypeIcon">Internally used icon information for this card type.</param>
        /// <param name="creditCard">Credit card type.</param>
        /// <param name="depositToAccount">The name of the account to deposit funds.</param>
        /// <param name="enabled">If true, this card type will be accepted during checkout.</param>
        /// <param name="processingFee">Optional additional fee applied to order for this card.</param>
        /// <param name="processingPercentage">Optional additional fee applied to order for this card.</param>
        /// <param name="restrictions">restrictions.</param>
        /// <param name="surchargeAccountingCode">Optional field. If integrated with Quickbooks, this code will be used when informing Quickbooks about any surcharges applied to orders.</param>
        /// <param name="transactionFee">An optional additional fee to charge the customer for using this card..</param>
        /// <param name="transactionPercentage">An optional transaction percentage to charge the customer for using this card.</param>
        public PaymentsConfigurationCreditCardType(string accountingCode = default(string), string cardTypeIcon = default(string), CreditCardEnum? creditCard = default(CreditCardEnum?), string depositToAccount = default(string), bool? enabled = default(bool?), decimal? processingFee = default(decimal?), decimal? processingPercentage = default(decimal?), PaymentsConfigurationRestrictions restrictions = default(PaymentsConfigurationRestrictions), string surchargeAccountingCode = default(string), decimal? transactionFee = default(decimal?), decimal? transactionPercentage = default(decimal?))
        {
            this.AccountingCode = accountingCode;
            this.CardTypeIcon = cardTypeIcon;
            this.CreditCard = creditCard;
            this.DepositToAccount = depositToAccount;
            this.Enabled = enabled;
            this.ProcessingFee = processingFee;
            this.ProcessingPercentage = processingPercentage;
            this.Restrictions = restrictions;
            this.SurchargeAccountingCode = surchargeAccountingCode;
            this.TransactionFee = transactionFee;
            this.TransactionPercentage = transactionPercentage;
        }
        
        /// <summary>
        /// Optional field used for Quickbooks integrations to match this credit card with the corresponding payment type in Quickbooks
        /// </summary>
        /// <value>Optional field used for Quickbooks integrations to match this credit card with the corresponding payment type in Quickbooks</value>
        [DataMember(Name="accounting_code", EmitDefaultValue=false)]
        public string AccountingCode { get; set; }

        /// <summary>
        /// Internally used icon information for this card type
        /// </summary>
        /// <value>Internally used icon information for this card type</value>
        [DataMember(Name="card_type_icon", EmitDefaultValue=false)]
        public string CardTypeIcon { get; set; }


        /// <summary>
        /// The name of the account to deposit funds
        /// </summary>
        /// <value>The name of the account to deposit funds</value>
        [DataMember(Name="deposit_to_account", EmitDefaultValue=false)]
        public string DepositToAccount { get; set; }

        /// <summary>
        /// If true, this card type will be accepted during checkout
        /// </summary>
        /// <value>If true, this card type will be accepted during checkout</value>
        [DataMember(Name="enabled", EmitDefaultValue=false)]
        public bool? Enabled { get; set; }

        /// <summary>
        /// Optional additional fee applied to order for this card
        /// </summary>
        /// <value>Optional additional fee applied to order for this card</value>
        [DataMember(Name="processing_fee", EmitDefaultValue=false)]
        public decimal? ProcessingFee { get; set; }

        /// <summary>
        /// Optional additional fee applied to order for this card
        /// </summary>
        /// <value>Optional additional fee applied to order for this card</value>
        [DataMember(Name="processing_percentage", EmitDefaultValue=false)]
        public decimal? ProcessingPercentage { get; set; }

        /// <summary>
        /// Gets or Sets Restrictions
        /// </summary>
        [DataMember(Name="restrictions", EmitDefaultValue=false)]
        public PaymentsConfigurationRestrictions Restrictions { get; set; }

        /// <summary>
        /// Optional field. If integrated with Quickbooks, this code will be used when informing Quickbooks about any surcharges applied to orders
        /// </summary>
        /// <value>Optional field. If integrated with Quickbooks, this code will be used when informing Quickbooks about any surcharges applied to orders</value>
        [DataMember(Name="surcharge_accounting_code", EmitDefaultValue=false)]
        public string SurchargeAccountingCode { get; set; }

        /// <summary>
        /// An optional additional fee to charge the customer for using this card.
        /// </summary>
        /// <value>An optional additional fee to charge the customer for using this card.</value>
        [DataMember(Name="transaction_fee", EmitDefaultValue=false)]
        public decimal? TransactionFee { get; set; }

        /// <summary>
        /// An optional transaction percentage to charge the customer for using this card
        /// </summary>
        /// <value>An optional transaction percentage to charge the customer for using this card</value>
        [DataMember(Name="transaction_percentage", EmitDefaultValue=false)]
        public decimal? TransactionPercentage { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PaymentsConfigurationCreditCardType {\n");
            sb.Append("  AccountingCode: ").Append(AccountingCode).Append("\n");
            sb.Append("  CardTypeIcon: ").Append(CardTypeIcon).Append("\n");
            sb.Append("  CreditCard: ").Append(CreditCard).Append("\n");
            sb.Append("  DepositToAccount: ").Append(DepositToAccount).Append("\n");
            sb.Append("  Enabled: ").Append(Enabled).Append("\n");
            sb.Append("  ProcessingFee: ").Append(ProcessingFee).Append("\n");
            sb.Append("  ProcessingPercentage: ").Append(ProcessingPercentage).Append("\n");
            sb.Append("  Restrictions: ").Append(Restrictions).Append("\n");
            sb.Append("  SurchargeAccountingCode: ").Append(SurchargeAccountingCode).Append("\n");
            sb.Append("  TransactionFee: ").Append(TransactionFee).Append("\n");
            sb.Append("  TransactionPercentage: ").Append(TransactionPercentage).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PaymentsConfigurationCreditCardType);
        }

        /// <summary>
        /// Returns true if PaymentsConfigurationCreditCardType instances are equal
        /// </summary>
        /// <param name="input">Instance of PaymentsConfigurationCreditCardType to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PaymentsConfigurationCreditCardType input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.AccountingCode == input.AccountingCode ||
                    (this.AccountingCode != null &&
                    this.AccountingCode.Equals(input.AccountingCode))
                ) && 
                (
                    this.CardTypeIcon == input.CardTypeIcon ||
                    (this.CardTypeIcon != null &&
                    this.CardTypeIcon.Equals(input.CardTypeIcon))
                ) && 
                (
                    this.CreditCard == input.CreditCard ||
                    (this.CreditCard != null &&
                    this.CreditCard.Equals(input.CreditCard))
                ) && 
                (
                    this.DepositToAccount == input.DepositToAccount ||
                    (this.DepositToAccount != null &&
                    this.DepositToAccount.Equals(input.DepositToAccount))
                ) && 
                (
                    this.Enabled == input.Enabled ||
                    (this.Enabled != null &&
                    this.Enabled.Equals(input.Enabled))
                ) && 
                (
                    this.ProcessingFee == input.ProcessingFee ||
                    (this.ProcessingFee != null &&
                    this.ProcessingFee.Equals(input.ProcessingFee))
                ) && 
                (
                    this.ProcessingPercentage == input.ProcessingPercentage ||
                    (this.ProcessingPercentage != null &&
                    this.ProcessingPercentage.Equals(input.ProcessingPercentage))
                ) && 
                (
                    this.Restrictions == input.Restrictions ||
                    (this.Restrictions != null &&
                    this.Restrictions.Equals(input.Restrictions))
                ) && 
                (
                    this.SurchargeAccountingCode == input.SurchargeAccountingCode ||
                    (this.SurchargeAccountingCode != null &&
                    this.SurchargeAccountingCode.Equals(input.SurchargeAccountingCode))
                ) && 
                (
                    this.TransactionFee == input.TransactionFee ||
                    (this.TransactionFee != null &&
                    this.TransactionFee.Equals(input.TransactionFee))
                ) && 
                (
                    this.TransactionPercentage == input.TransactionPercentage ||
                    (this.TransactionPercentage != null &&
                    this.TransactionPercentage.Equals(input.TransactionPercentage))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AccountingCode != null)
                    hashCode = hashCode * 59 + this.AccountingCode.GetHashCode();
                if (this.CardTypeIcon != null)
                    hashCode = hashCode * 59 + this.CardTypeIcon.GetHashCode();
                if (this.CreditCard != null)
                    hashCode = hashCode * 59 + this.CreditCard.GetHashCode();
                if (this.DepositToAccount != null)
                    hashCode = hashCode * 59 + this.DepositToAccount.GetHashCode();
                if (this.Enabled != null)
                    hashCode = hashCode * 59 + this.Enabled.GetHashCode();
                if (this.ProcessingFee != null)
                    hashCode = hashCode * 59 + this.ProcessingFee.GetHashCode();
                if (this.ProcessingPercentage != null)
                    hashCode = hashCode * 59 + this.ProcessingPercentage.GetHashCode();
                if (this.Restrictions != null)
                    hashCode = hashCode * 59 + this.Restrictions.GetHashCode();
                if (this.SurchargeAccountingCode != null)
                    hashCode = hashCode * 59 + this.SurchargeAccountingCode.GetHashCode();
                if (this.TransactionFee != null)
                    hashCode = hashCode * 59 + this.TransactionFee.GetHashCode();
                if (this.TransactionPercentage != null)
                    hashCode = hashCode * 59 + this.TransactionPercentage.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
