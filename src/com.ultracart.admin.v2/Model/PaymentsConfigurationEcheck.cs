/* 
 * UltraCart Rest API V2
 *
 * UltraCart REST API Version 2
 *
 * OpenAPI spec version: 2.0.0
 * Contact: support@ultracart.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = com.ultracart.admin.v2.Client.SwaggerDateConverter;

namespace com.ultracart.admin.v2.Model
{
    /// <summary>
    /// PaymentsConfigurationEcheck
    /// </summary>
    [DataContract]
    public partial class PaymentsConfigurationEcheck :  IEquatable<PaymentsConfigurationEcheck>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PaymentsConfigurationEcheck" /> class.
        /// </summary>
        /// <param name="acceptEcheck">Master flag indicating this merchant accepts eChecks.</param>
        /// <param name="accountingCode">Optional Quickbooks accounting code.</param>
        /// <param name="depositToAccount">Optional Quickbooks deposit to account.</param>
        /// <param name="restrictions">restrictions.</param>
        public PaymentsConfigurationEcheck(bool? acceptEcheck = default(bool?), string accountingCode = default(string), string depositToAccount = default(string), PaymentsConfigurationRestrictions restrictions = default(PaymentsConfigurationRestrictions))
        {
            this.AcceptEcheck = acceptEcheck;
            this.AccountingCode = accountingCode;
            this.DepositToAccount = depositToAccount;
            this.Restrictions = restrictions;
        }
        
        /// <summary>
        /// Master flag indicating this merchant accepts eChecks
        /// </summary>
        /// <value>Master flag indicating this merchant accepts eChecks</value>
        [DataMember(Name="accept_echeck", EmitDefaultValue=false)]
        public bool? AcceptEcheck { get; set; }

        /// <summary>
        /// Optional Quickbooks accounting code
        /// </summary>
        /// <value>Optional Quickbooks accounting code</value>
        [DataMember(Name="accounting_code", EmitDefaultValue=false)]
        public string AccountingCode { get; set; }

        /// <summary>
        /// Optional Quickbooks deposit to account
        /// </summary>
        /// <value>Optional Quickbooks deposit to account</value>
        [DataMember(Name="deposit_to_account", EmitDefaultValue=false)]
        public string DepositToAccount { get; set; }

        /// <summary>
        /// Gets or Sets Restrictions
        /// </summary>
        [DataMember(Name="restrictions", EmitDefaultValue=false)]
        public PaymentsConfigurationRestrictions Restrictions { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PaymentsConfigurationEcheck {\n");
            sb.Append("  AcceptEcheck: ").Append(AcceptEcheck).Append("\n");
            sb.Append("  AccountingCode: ").Append(AccountingCode).Append("\n");
            sb.Append("  DepositToAccount: ").Append(DepositToAccount).Append("\n");
            sb.Append("  Restrictions: ").Append(Restrictions).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PaymentsConfigurationEcheck);
        }

        /// <summary>
        /// Returns true if PaymentsConfigurationEcheck instances are equal
        /// </summary>
        /// <param name="input">Instance of PaymentsConfigurationEcheck to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PaymentsConfigurationEcheck input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.AcceptEcheck == input.AcceptEcheck ||
                    (this.AcceptEcheck != null &&
                    this.AcceptEcheck.Equals(input.AcceptEcheck))
                ) && 
                (
                    this.AccountingCode == input.AccountingCode ||
                    (this.AccountingCode != null &&
                    this.AccountingCode.Equals(input.AccountingCode))
                ) && 
                (
                    this.DepositToAccount == input.DepositToAccount ||
                    (this.DepositToAccount != null &&
                    this.DepositToAccount.Equals(input.DepositToAccount))
                ) && 
                (
                    this.Restrictions == input.Restrictions ||
                    (this.Restrictions != null &&
                    this.Restrictions.Equals(input.Restrictions))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AcceptEcheck != null)
                    hashCode = hashCode * 59 + this.AcceptEcheck.GetHashCode();
                if (this.AccountingCode != null)
                    hashCode = hashCode * 59 + this.AccountingCode.GetHashCode();
                if (this.DepositToAccount != null)
                    hashCode = hashCode * 59 + this.DepositToAccount.GetHashCode();
                if (this.Restrictions != null)
                    hashCode = hashCode * 59 + this.Restrictions.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
