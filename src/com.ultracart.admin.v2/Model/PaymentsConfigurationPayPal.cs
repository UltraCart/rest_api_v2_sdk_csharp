/* 
 * UltraCart Rest API V2
 *
 * UltraCart REST API Version 2
 *
 * OpenAPI spec version: 2.0.0
 * Contact: support@ultracart.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = com.ultracart.admin.v2.Client.SwaggerDateConverter;

namespace com.ultracart.admin.v2.Model
{
    /// <summary>
    /// PaymentsConfigurationPayPal
    /// </summary>
    [DataContract]
    public partial class PaymentsConfigurationPayPal :  IEquatable<PaymentsConfigurationPayPal>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PaymentsConfigurationPayPal" /> class.
        /// </summary>
        /// <param name="acceptPayPal">acceptPayPal.</param>
        /// <param name="paypalAccountingCode">paypalAccountingCode.</param>
        /// <param name="paypalApiPassword">paypalApiPassword.</param>
        /// <param name="paypalApiUserName">paypalApiUserName.</param>
        /// <param name="paypalCertificateOnFile">paypalCertificateOnFile.</param>
        /// <param name="paypalDepositToAccount">paypalDepositToAccount.</param>
        /// <param name="paypalEmail">paypalEmail.</param>
        /// <param name="paypalEnvironment">paypalEnvironment.</param>
        /// <param name="paypalHeaderImageUrl">paypalHeaderImageUrl.</param>
        /// <param name="paypalHideBillMeLater">paypalHideBillMeLater.</param>
        /// <param name="paypalHideExpressCheckoutOnViewCart">paypalHideExpressCheckoutOnViewCart.</param>
        /// <param name="paypalHideForUnshippedOrders">paypalHideForUnshippedOrders.</param>
        /// <param name="paypalHoldInAR">paypalHoldInAR.</param>
        /// <param name="paypalLandingPage">paypalLandingPage.</param>
        /// <param name="paypalMode">paypalMode.</param>
        /// <param name="paypalPrivateKeyPassword">paypalPrivateKeyPassword.</param>
        /// <param name="paypalProcessingFee">paypalProcessingFee.</param>
        /// <param name="paypalProcessingPerc">paypalProcessingPerc.</param>
        /// <param name="paypalSendRecurring">paypalSendRecurring.</param>
        /// <param name="paypalShowCardLogosNotDirectlySupported">paypalShowCardLogosNotDirectlySupported.</param>
        /// <param name="paypalShowSignature">paypalShowSignature.</param>
        /// <param name="paypalSignature">paypalSignature.</param>
        /// <param name="paypalSolutionType">paypalSolutionType.</param>
        /// <param name="paypalSummaryEmail">paypalSummaryEmail.</param>
        /// <param name="paypalSummaryMode">paypalSummaryMode.</param>
        /// <param name="paypalZeroDollarPenny">paypalZeroDollarPenny.</param>
        /// <param name="pushPayPal">pushPayPal.</param>
        /// <param name="restrictions">restrictions.</param>
        /// <param name="shortPayPalMarketingText">shortPayPalMarketingText.</param>
        public PaymentsConfigurationPayPal(bool? acceptPayPal = default(bool?), string paypalAccountingCode = default(string), string paypalApiPassword = default(string), string paypalApiUserName = default(string), bool? paypalCertificateOnFile = default(bool?), string paypalDepositToAccount = default(string), string paypalEmail = default(string), string paypalEnvironment = default(string), string paypalHeaderImageUrl = default(string), bool? paypalHideBillMeLater = default(bool?), bool? paypalHideExpressCheckoutOnViewCart = default(bool?), bool? paypalHideForUnshippedOrders = default(bool?), bool? paypalHoldInAR = default(bool?), string paypalLandingPage = default(string), string paypalMode = default(string), string paypalPrivateKeyPassword = default(string), string paypalProcessingFee = default(string), string paypalProcessingPerc = default(string), string paypalSendRecurring = default(string), bool? paypalShowCardLogosNotDirectlySupported = default(bool?), bool? paypalShowSignature = default(bool?), string paypalSignature = default(string), string paypalSolutionType = default(string), string paypalSummaryEmail = default(string), string paypalSummaryMode = default(string), bool? paypalZeroDollarPenny = default(bool?), bool? pushPayPal = default(bool?), PaymentsConfigurationRestrictions restrictions = default(PaymentsConfigurationRestrictions), bool? shortPayPalMarketingText = default(bool?))
        {
            this.AcceptPayPal = acceptPayPal;
            this.PaypalAccountingCode = paypalAccountingCode;
            this.PaypalApiPassword = paypalApiPassword;
            this.PaypalApiUserName = paypalApiUserName;
            this.PaypalCertificateOnFile = paypalCertificateOnFile;
            this.PaypalDepositToAccount = paypalDepositToAccount;
            this.PaypalEmail = paypalEmail;
            this.PaypalEnvironment = paypalEnvironment;
            this.PaypalHeaderImageUrl = paypalHeaderImageUrl;
            this.PaypalHideBillMeLater = paypalHideBillMeLater;
            this.PaypalHideExpressCheckoutOnViewCart = paypalHideExpressCheckoutOnViewCart;
            this.PaypalHideForUnshippedOrders = paypalHideForUnshippedOrders;
            this.PaypalHoldInAR = paypalHoldInAR;
            this.PaypalLandingPage = paypalLandingPage;
            this.PaypalMode = paypalMode;
            this.PaypalPrivateKeyPassword = paypalPrivateKeyPassword;
            this.PaypalProcessingFee = paypalProcessingFee;
            this.PaypalProcessingPerc = paypalProcessingPerc;
            this.PaypalSendRecurring = paypalSendRecurring;
            this.PaypalShowCardLogosNotDirectlySupported = paypalShowCardLogosNotDirectlySupported;
            this.PaypalShowSignature = paypalShowSignature;
            this.PaypalSignature = paypalSignature;
            this.PaypalSolutionType = paypalSolutionType;
            this.PaypalSummaryEmail = paypalSummaryEmail;
            this.PaypalSummaryMode = paypalSummaryMode;
            this.PaypalZeroDollarPenny = paypalZeroDollarPenny;
            this.PushPayPal = pushPayPal;
            this.Restrictions = restrictions;
            this.ShortPayPalMarketingText = shortPayPalMarketingText;
        }
        
        /// <summary>
        /// Gets or Sets AcceptPayPal
        /// </summary>
        [DataMember(Name="acceptPayPal", EmitDefaultValue=false)]
        public bool? AcceptPayPal { get; set; }

        /// <summary>
        /// Gets or Sets PaypalAccountingCode
        /// </summary>
        [DataMember(Name="paypalAccountingCode", EmitDefaultValue=false)]
        public string PaypalAccountingCode { get; set; }

        /// <summary>
        /// Gets or Sets PaypalApiPassword
        /// </summary>
        [DataMember(Name="paypalApiPassword", EmitDefaultValue=false)]
        public string PaypalApiPassword { get; set; }

        /// <summary>
        /// Gets or Sets PaypalApiUserName
        /// </summary>
        [DataMember(Name="paypalApiUserName", EmitDefaultValue=false)]
        public string PaypalApiUserName { get; set; }

        /// <summary>
        /// Gets or Sets PaypalCertificateOnFile
        /// </summary>
        [DataMember(Name="paypalCertificateOnFile", EmitDefaultValue=false)]
        public bool? PaypalCertificateOnFile { get; set; }

        /// <summary>
        /// Gets or Sets PaypalDepositToAccount
        /// </summary>
        [DataMember(Name="paypalDepositToAccount", EmitDefaultValue=false)]
        public string PaypalDepositToAccount { get; set; }

        /// <summary>
        /// Gets or Sets PaypalEmail
        /// </summary>
        [DataMember(Name="paypalEmail", EmitDefaultValue=false)]
        public string PaypalEmail { get; set; }

        /// <summary>
        /// Gets or Sets PaypalEnvironment
        /// </summary>
        [DataMember(Name="paypalEnvironment", EmitDefaultValue=false)]
        public string PaypalEnvironment { get; set; }

        /// <summary>
        /// Gets or Sets PaypalHeaderImageUrl
        /// </summary>
        [DataMember(Name="paypalHeaderImageUrl", EmitDefaultValue=false)]
        public string PaypalHeaderImageUrl { get; set; }

        /// <summary>
        /// Gets or Sets PaypalHideBillMeLater
        /// </summary>
        [DataMember(Name="paypalHideBillMeLater", EmitDefaultValue=false)]
        public bool? PaypalHideBillMeLater { get; set; }

        /// <summary>
        /// Gets or Sets PaypalHideExpressCheckoutOnViewCart
        /// </summary>
        [DataMember(Name="paypalHideExpressCheckoutOnViewCart", EmitDefaultValue=false)]
        public bool? PaypalHideExpressCheckoutOnViewCart { get; set; }

        /// <summary>
        /// Gets or Sets PaypalHideForUnshippedOrders
        /// </summary>
        [DataMember(Name="paypalHideForUnshippedOrders", EmitDefaultValue=false)]
        public bool? PaypalHideForUnshippedOrders { get; set; }

        /// <summary>
        /// Gets or Sets PaypalHoldInAR
        /// </summary>
        [DataMember(Name="paypalHoldInAR", EmitDefaultValue=false)]
        public bool? PaypalHoldInAR { get; set; }

        /// <summary>
        /// Gets or Sets PaypalLandingPage
        /// </summary>
        [DataMember(Name="paypalLandingPage", EmitDefaultValue=false)]
        public string PaypalLandingPage { get; set; }

        /// <summary>
        /// Gets or Sets PaypalMode
        /// </summary>
        [DataMember(Name="paypalMode", EmitDefaultValue=false)]
        public string PaypalMode { get; set; }

        /// <summary>
        /// Gets or Sets PaypalPrivateKeyPassword
        /// </summary>
        [DataMember(Name="paypalPrivateKeyPassword", EmitDefaultValue=false)]
        public string PaypalPrivateKeyPassword { get; set; }

        /// <summary>
        /// Gets or Sets PaypalProcessingFee
        /// </summary>
        [DataMember(Name="paypalProcessingFee", EmitDefaultValue=false)]
        public string PaypalProcessingFee { get; set; }

        /// <summary>
        /// Gets or Sets PaypalProcessingPerc
        /// </summary>
        [DataMember(Name="paypalProcessingPerc", EmitDefaultValue=false)]
        public string PaypalProcessingPerc { get; set; }

        /// <summary>
        /// Gets or Sets PaypalSendRecurring
        /// </summary>
        [DataMember(Name="paypalSendRecurring", EmitDefaultValue=false)]
        public string PaypalSendRecurring { get; set; }

        /// <summary>
        /// Gets or Sets PaypalShowCardLogosNotDirectlySupported
        /// </summary>
        [DataMember(Name="paypalShowCardLogosNotDirectlySupported", EmitDefaultValue=false)]
        public bool? PaypalShowCardLogosNotDirectlySupported { get; set; }

        /// <summary>
        /// Gets or Sets PaypalShowSignature
        /// </summary>
        [DataMember(Name="paypalShowSignature", EmitDefaultValue=false)]
        public bool? PaypalShowSignature { get; set; }

        /// <summary>
        /// Gets or Sets PaypalSignature
        /// </summary>
        [DataMember(Name="paypalSignature", EmitDefaultValue=false)]
        public string PaypalSignature { get; set; }

        /// <summary>
        /// Gets or Sets PaypalSolutionType
        /// </summary>
        [DataMember(Name="paypalSolutionType", EmitDefaultValue=false)]
        public string PaypalSolutionType { get; set; }

        /// <summary>
        /// Gets or Sets PaypalSummaryEmail
        /// </summary>
        [DataMember(Name="paypalSummaryEmail", EmitDefaultValue=false)]
        public string PaypalSummaryEmail { get; set; }

        /// <summary>
        /// Gets or Sets PaypalSummaryMode
        /// </summary>
        [DataMember(Name="paypalSummaryMode", EmitDefaultValue=false)]
        public string PaypalSummaryMode { get; set; }

        /// <summary>
        /// Gets or Sets PaypalZeroDollarPenny
        /// </summary>
        [DataMember(Name="paypalZeroDollarPenny", EmitDefaultValue=false)]
        public bool? PaypalZeroDollarPenny { get; set; }

        /// <summary>
        /// Gets or Sets PushPayPal
        /// </summary>
        [DataMember(Name="pushPayPal", EmitDefaultValue=false)]
        public bool? PushPayPal { get; set; }

        /// <summary>
        /// Gets or Sets Restrictions
        /// </summary>
        [DataMember(Name="restrictions", EmitDefaultValue=false)]
        public PaymentsConfigurationRestrictions Restrictions { get; set; }

        /// <summary>
        /// Gets or Sets ShortPayPalMarketingText
        /// </summary>
        [DataMember(Name="shortPayPalMarketingText", EmitDefaultValue=false)]
        public bool? ShortPayPalMarketingText { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PaymentsConfigurationPayPal {\n");
            sb.Append("  AcceptPayPal: ").Append(AcceptPayPal).Append("\n");
            sb.Append("  PaypalAccountingCode: ").Append(PaypalAccountingCode).Append("\n");
            sb.Append("  PaypalApiPassword: ").Append(PaypalApiPassword).Append("\n");
            sb.Append("  PaypalApiUserName: ").Append(PaypalApiUserName).Append("\n");
            sb.Append("  PaypalCertificateOnFile: ").Append(PaypalCertificateOnFile).Append("\n");
            sb.Append("  PaypalDepositToAccount: ").Append(PaypalDepositToAccount).Append("\n");
            sb.Append("  PaypalEmail: ").Append(PaypalEmail).Append("\n");
            sb.Append("  PaypalEnvironment: ").Append(PaypalEnvironment).Append("\n");
            sb.Append("  PaypalHeaderImageUrl: ").Append(PaypalHeaderImageUrl).Append("\n");
            sb.Append("  PaypalHideBillMeLater: ").Append(PaypalHideBillMeLater).Append("\n");
            sb.Append("  PaypalHideExpressCheckoutOnViewCart: ").Append(PaypalHideExpressCheckoutOnViewCart).Append("\n");
            sb.Append("  PaypalHideForUnshippedOrders: ").Append(PaypalHideForUnshippedOrders).Append("\n");
            sb.Append("  PaypalHoldInAR: ").Append(PaypalHoldInAR).Append("\n");
            sb.Append("  PaypalLandingPage: ").Append(PaypalLandingPage).Append("\n");
            sb.Append("  PaypalMode: ").Append(PaypalMode).Append("\n");
            sb.Append("  PaypalPrivateKeyPassword: ").Append(PaypalPrivateKeyPassword).Append("\n");
            sb.Append("  PaypalProcessingFee: ").Append(PaypalProcessingFee).Append("\n");
            sb.Append("  PaypalProcessingPerc: ").Append(PaypalProcessingPerc).Append("\n");
            sb.Append("  PaypalSendRecurring: ").Append(PaypalSendRecurring).Append("\n");
            sb.Append("  PaypalShowCardLogosNotDirectlySupported: ").Append(PaypalShowCardLogosNotDirectlySupported).Append("\n");
            sb.Append("  PaypalShowSignature: ").Append(PaypalShowSignature).Append("\n");
            sb.Append("  PaypalSignature: ").Append(PaypalSignature).Append("\n");
            sb.Append("  PaypalSolutionType: ").Append(PaypalSolutionType).Append("\n");
            sb.Append("  PaypalSummaryEmail: ").Append(PaypalSummaryEmail).Append("\n");
            sb.Append("  PaypalSummaryMode: ").Append(PaypalSummaryMode).Append("\n");
            sb.Append("  PaypalZeroDollarPenny: ").Append(PaypalZeroDollarPenny).Append("\n");
            sb.Append("  PushPayPal: ").Append(PushPayPal).Append("\n");
            sb.Append("  Restrictions: ").Append(Restrictions).Append("\n");
            sb.Append("  ShortPayPalMarketingText: ").Append(ShortPayPalMarketingText).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PaymentsConfigurationPayPal);
        }

        /// <summary>
        /// Returns true if PaymentsConfigurationPayPal instances are equal
        /// </summary>
        /// <param name="input">Instance of PaymentsConfigurationPayPal to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PaymentsConfigurationPayPal input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.AcceptPayPal == input.AcceptPayPal ||
                    (this.AcceptPayPal != null &&
                    this.AcceptPayPal.Equals(input.AcceptPayPal))
                ) && 
                (
                    this.PaypalAccountingCode == input.PaypalAccountingCode ||
                    (this.PaypalAccountingCode != null &&
                    this.PaypalAccountingCode.Equals(input.PaypalAccountingCode))
                ) && 
                (
                    this.PaypalApiPassword == input.PaypalApiPassword ||
                    (this.PaypalApiPassword != null &&
                    this.PaypalApiPassword.Equals(input.PaypalApiPassword))
                ) && 
                (
                    this.PaypalApiUserName == input.PaypalApiUserName ||
                    (this.PaypalApiUserName != null &&
                    this.PaypalApiUserName.Equals(input.PaypalApiUserName))
                ) && 
                (
                    this.PaypalCertificateOnFile == input.PaypalCertificateOnFile ||
                    (this.PaypalCertificateOnFile != null &&
                    this.PaypalCertificateOnFile.Equals(input.PaypalCertificateOnFile))
                ) && 
                (
                    this.PaypalDepositToAccount == input.PaypalDepositToAccount ||
                    (this.PaypalDepositToAccount != null &&
                    this.PaypalDepositToAccount.Equals(input.PaypalDepositToAccount))
                ) && 
                (
                    this.PaypalEmail == input.PaypalEmail ||
                    (this.PaypalEmail != null &&
                    this.PaypalEmail.Equals(input.PaypalEmail))
                ) && 
                (
                    this.PaypalEnvironment == input.PaypalEnvironment ||
                    (this.PaypalEnvironment != null &&
                    this.PaypalEnvironment.Equals(input.PaypalEnvironment))
                ) && 
                (
                    this.PaypalHeaderImageUrl == input.PaypalHeaderImageUrl ||
                    (this.PaypalHeaderImageUrl != null &&
                    this.PaypalHeaderImageUrl.Equals(input.PaypalHeaderImageUrl))
                ) && 
                (
                    this.PaypalHideBillMeLater == input.PaypalHideBillMeLater ||
                    (this.PaypalHideBillMeLater != null &&
                    this.PaypalHideBillMeLater.Equals(input.PaypalHideBillMeLater))
                ) && 
                (
                    this.PaypalHideExpressCheckoutOnViewCart == input.PaypalHideExpressCheckoutOnViewCart ||
                    (this.PaypalHideExpressCheckoutOnViewCart != null &&
                    this.PaypalHideExpressCheckoutOnViewCart.Equals(input.PaypalHideExpressCheckoutOnViewCart))
                ) && 
                (
                    this.PaypalHideForUnshippedOrders == input.PaypalHideForUnshippedOrders ||
                    (this.PaypalHideForUnshippedOrders != null &&
                    this.PaypalHideForUnshippedOrders.Equals(input.PaypalHideForUnshippedOrders))
                ) && 
                (
                    this.PaypalHoldInAR == input.PaypalHoldInAR ||
                    (this.PaypalHoldInAR != null &&
                    this.PaypalHoldInAR.Equals(input.PaypalHoldInAR))
                ) && 
                (
                    this.PaypalLandingPage == input.PaypalLandingPage ||
                    (this.PaypalLandingPage != null &&
                    this.PaypalLandingPage.Equals(input.PaypalLandingPage))
                ) && 
                (
                    this.PaypalMode == input.PaypalMode ||
                    (this.PaypalMode != null &&
                    this.PaypalMode.Equals(input.PaypalMode))
                ) && 
                (
                    this.PaypalPrivateKeyPassword == input.PaypalPrivateKeyPassword ||
                    (this.PaypalPrivateKeyPassword != null &&
                    this.PaypalPrivateKeyPassword.Equals(input.PaypalPrivateKeyPassword))
                ) && 
                (
                    this.PaypalProcessingFee == input.PaypalProcessingFee ||
                    (this.PaypalProcessingFee != null &&
                    this.PaypalProcessingFee.Equals(input.PaypalProcessingFee))
                ) && 
                (
                    this.PaypalProcessingPerc == input.PaypalProcessingPerc ||
                    (this.PaypalProcessingPerc != null &&
                    this.PaypalProcessingPerc.Equals(input.PaypalProcessingPerc))
                ) && 
                (
                    this.PaypalSendRecurring == input.PaypalSendRecurring ||
                    (this.PaypalSendRecurring != null &&
                    this.PaypalSendRecurring.Equals(input.PaypalSendRecurring))
                ) && 
                (
                    this.PaypalShowCardLogosNotDirectlySupported == input.PaypalShowCardLogosNotDirectlySupported ||
                    (this.PaypalShowCardLogosNotDirectlySupported != null &&
                    this.PaypalShowCardLogosNotDirectlySupported.Equals(input.PaypalShowCardLogosNotDirectlySupported))
                ) && 
                (
                    this.PaypalShowSignature == input.PaypalShowSignature ||
                    (this.PaypalShowSignature != null &&
                    this.PaypalShowSignature.Equals(input.PaypalShowSignature))
                ) && 
                (
                    this.PaypalSignature == input.PaypalSignature ||
                    (this.PaypalSignature != null &&
                    this.PaypalSignature.Equals(input.PaypalSignature))
                ) && 
                (
                    this.PaypalSolutionType == input.PaypalSolutionType ||
                    (this.PaypalSolutionType != null &&
                    this.PaypalSolutionType.Equals(input.PaypalSolutionType))
                ) && 
                (
                    this.PaypalSummaryEmail == input.PaypalSummaryEmail ||
                    (this.PaypalSummaryEmail != null &&
                    this.PaypalSummaryEmail.Equals(input.PaypalSummaryEmail))
                ) && 
                (
                    this.PaypalSummaryMode == input.PaypalSummaryMode ||
                    (this.PaypalSummaryMode != null &&
                    this.PaypalSummaryMode.Equals(input.PaypalSummaryMode))
                ) && 
                (
                    this.PaypalZeroDollarPenny == input.PaypalZeroDollarPenny ||
                    (this.PaypalZeroDollarPenny != null &&
                    this.PaypalZeroDollarPenny.Equals(input.PaypalZeroDollarPenny))
                ) && 
                (
                    this.PushPayPal == input.PushPayPal ||
                    (this.PushPayPal != null &&
                    this.PushPayPal.Equals(input.PushPayPal))
                ) && 
                (
                    this.Restrictions == input.Restrictions ||
                    (this.Restrictions != null &&
                    this.Restrictions.Equals(input.Restrictions))
                ) && 
                (
                    this.ShortPayPalMarketingText == input.ShortPayPalMarketingText ||
                    (this.ShortPayPalMarketingText != null &&
                    this.ShortPayPalMarketingText.Equals(input.ShortPayPalMarketingText))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AcceptPayPal != null)
                    hashCode = hashCode * 59 + this.AcceptPayPal.GetHashCode();
                if (this.PaypalAccountingCode != null)
                    hashCode = hashCode * 59 + this.PaypalAccountingCode.GetHashCode();
                if (this.PaypalApiPassword != null)
                    hashCode = hashCode * 59 + this.PaypalApiPassword.GetHashCode();
                if (this.PaypalApiUserName != null)
                    hashCode = hashCode * 59 + this.PaypalApiUserName.GetHashCode();
                if (this.PaypalCertificateOnFile != null)
                    hashCode = hashCode * 59 + this.PaypalCertificateOnFile.GetHashCode();
                if (this.PaypalDepositToAccount != null)
                    hashCode = hashCode * 59 + this.PaypalDepositToAccount.GetHashCode();
                if (this.PaypalEmail != null)
                    hashCode = hashCode * 59 + this.PaypalEmail.GetHashCode();
                if (this.PaypalEnvironment != null)
                    hashCode = hashCode * 59 + this.PaypalEnvironment.GetHashCode();
                if (this.PaypalHeaderImageUrl != null)
                    hashCode = hashCode * 59 + this.PaypalHeaderImageUrl.GetHashCode();
                if (this.PaypalHideBillMeLater != null)
                    hashCode = hashCode * 59 + this.PaypalHideBillMeLater.GetHashCode();
                if (this.PaypalHideExpressCheckoutOnViewCart != null)
                    hashCode = hashCode * 59 + this.PaypalHideExpressCheckoutOnViewCart.GetHashCode();
                if (this.PaypalHideForUnshippedOrders != null)
                    hashCode = hashCode * 59 + this.PaypalHideForUnshippedOrders.GetHashCode();
                if (this.PaypalHoldInAR != null)
                    hashCode = hashCode * 59 + this.PaypalHoldInAR.GetHashCode();
                if (this.PaypalLandingPage != null)
                    hashCode = hashCode * 59 + this.PaypalLandingPage.GetHashCode();
                if (this.PaypalMode != null)
                    hashCode = hashCode * 59 + this.PaypalMode.GetHashCode();
                if (this.PaypalPrivateKeyPassword != null)
                    hashCode = hashCode * 59 + this.PaypalPrivateKeyPassword.GetHashCode();
                if (this.PaypalProcessingFee != null)
                    hashCode = hashCode * 59 + this.PaypalProcessingFee.GetHashCode();
                if (this.PaypalProcessingPerc != null)
                    hashCode = hashCode * 59 + this.PaypalProcessingPerc.GetHashCode();
                if (this.PaypalSendRecurring != null)
                    hashCode = hashCode * 59 + this.PaypalSendRecurring.GetHashCode();
                if (this.PaypalShowCardLogosNotDirectlySupported != null)
                    hashCode = hashCode * 59 + this.PaypalShowCardLogosNotDirectlySupported.GetHashCode();
                if (this.PaypalShowSignature != null)
                    hashCode = hashCode * 59 + this.PaypalShowSignature.GetHashCode();
                if (this.PaypalSignature != null)
                    hashCode = hashCode * 59 + this.PaypalSignature.GetHashCode();
                if (this.PaypalSolutionType != null)
                    hashCode = hashCode * 59 + this.PaypalSolutionType.GetHashCode();
                if (this.PaypalSummaryEmail != null)
                    hashCode = hashCode * 59 + this.PaypalSummaryEmail.GetHashCode();
                if (this.PaypalSummaryMode != null)
                    hashCode = hashCode * 59 + this.PaypalSummaryMode.GetHashCode();
                if (this.PaypalZeroDollarPenny != null)
                    hashCode = hashCode * 59 + this.PaypalZeroDollarPenny.GetHashCode();
                if (this.PushPayPal != null)
                    hashCode = hashCode * 59 + this.PushPayPal.GetHashCode();
                if (this.Restrictions != null)
                    hashCode = hashCode * 59 + this.Restrictions.GetHashCode();
                if (this.ShortPayPalMarketingText != null)
                    hashCode = hashCode * 59 + this.ShortPayPalMarketingText.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
