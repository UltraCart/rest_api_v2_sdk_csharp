/* 
 * UltraCart Rest API V2
 *
 * UltraCart REST API Version 2
 *
 * OpenAPI spec version: 2.0.0
 * Contact: support@ultracart.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = com.ultracart.admin.v2.Client.SwaggerDateConverter;

namespace com.ultracart.admin.v2.Model
{
    /// <summary>
    /// PaymentsConfigurationRestrictions
    /// </summary>
    [DataContract]
    public partial class PaymentsConfigurationRestrictions :  IEquatable<PaymentsConfigurationRestrictions>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PaymentsConfigurationRestrictions" /> class.
        /// </summary>
        /// <param name="maximumSubtotal">maximumSubtotal.</param>
        /// <param name="minimumSubtotal">minimumSubtotal.</param>
        /// <param name="paymentMethod">paymentMethod.</param>
        /// <param name="restrictionAlaskaHawaii">restrictionAlaskaHawaii.</param>
        /// <param name="restrictionApoFpo">restrictionApoFpo.</param>
        /// <param name="restrictionCanada">restrictionCanada.</param>
        /// <param name="restrictionContinentalUS">restrictionContinentalUS.</param>
        /// <param name="restrictionDomesticOnly">restrictionDomesticOnly.</param>
        /// <param name="restrictionInternationalOnly">restrictionInternationalOnly.</param>
        /// <param name="restrictionPoBox">restrictionPoBox.</param>
        /// <param name="restrictionPuertoRico">restrictionPuertoRico.</param>
        /// <param name="restrictionUSTerritories">restrictionUSTerritories.</param>
        public PaymentsConfigurationRestrictions(string maximumSubtotal = default(string), string minimumSubtotal = default(string), string paymentMethod = default(string), string restrictionAlaskaHawaii = default(string), string restrictionApoFpo = default(string), string restrictionCanada = default(string), string restrictionContinentalUS = default(string), string restrictionDomesticOnly = default(string), string restrictionInternationalOnly = default(string), string restrictionPoBox = default(string), string restrictionPuertoRico = default(string), string restrictionUSTerritories = default(string))
        {
            this.MaximumSubtotal = maximumSubtotal;
            this.MinimumSubtotal = minimumSubtotal;
            this.PaymentMethod = paymentMethod;
            this.RestrictionAlaskaHawaii = restrictionAlaskaHawaii;
            this.RestrictionApoFpo = restrictionApoFpo;
            this.RestrictionCanada = restrictionCanada;
            this.RestrictionContinentalUS = restrictionContinentalUS;
            this.RestrictionDomesticOnly = restrictionDomesticOnly;
            this.RestrictionInternationalOnly = restrictionInternationalOnly;
            this.RestrictionPoBox = restrictionPoBox;
            this.RestrictionPuertoRico = restrictionPuertoRico;
            this.RestrictionUSTerritories = restrictionUSTerritories;
        }
        
        /// <summary>
        /// Gets or Sets MaximumSubtotal
        /// </summary>
        [DataMember(Name="maximumSubtotal", EmitDefaultValue=false)]
        public string MaximumSubtotal { get; set; }

        /// <summary>
        /// Gets or Sets MinimumSubtotal
        /// </summary>
        [DataMember(Name="minimumSubtotal", EmitDefaultValue=false)]
        public string MinimumSubtotal { get; set; }

        /// <summary>
        /// Gets or Sets PaymentMethod
        /// </summary>
        [DataMember(Name="paymentMethod", EmitDefaultValue=false)]
        public string PaymentMethod { get; set; }

        /// <summary>
        /// Gets or Sets RestrictionAlaskaHawaii
        /// </summary>
        [DataMember(Name="restrictionAlaskaHawaii", EmitDefaultValue=false)]
        public string RestrictionAlaskaHawaii { get; set; }

        /// <summary>
        /// Gets or Sets RestrictionApoFpo
        /// </summary>
        [DataMember(Name="restrictionApoFpo", EmitDefaultValue=false)]
        public string RestrictionApoFpo { get; set; }

        /// <summary>
        /// Gets or Sets RestrictionCanada
        /// </summary>
        [DataMember(Name="restrictionCanada", EmitDefaultValue=false)]
        public string RestrictionCanada { get; set; }

        /// <summary>
        /// Gets or Sets RestrictionContinentalUS
        /// </summary>
        [DataMember(Name="restrictionContinentalUS", EmitDefaultValue=false)]
        public string RestrictionContinentalUS { get; set; }

        /// <summary>
        /// Gets or Sets RestrictionDomesticOnly
        /// </summary>
        [DataMember(Name="restrictionDomesticOnly", EmitDefaultValue=false)]
        public string RestrictionDomesticOnly { get; set; }

        /// <summary>
        /// Gets or Sets RestrictionInternationalOnly
        /// </summary>
        [DataMember(Name="restrictionInternationalOnly", EmitDefaultValue=false)]
        public string RestrictionInternationalOnly { get; set; }

        /// <summary>
        /// Gets or Sets RestrictionPoBox
        /// </summary>
        [DataMember(Name="restrictionPoBox", EmitDefaultValue=false)]
        public string RestrictionPoBox { get; set; }

        /// <summary>
        /// Gets or Sets RestrictionPuertoRico
        /// </summary>
        [DataMember(Name="restrictionPuertoRico", EmitDefaultValue=false)]
        public string RestrictionPuertoRico { get; set; }

        /// <summary>
        /// Gets or Sets RestrictionUSTerritories
        /// </summary>
        [DataMember(Name="restrictionUSTerritories", EmitDefaultValue=false)]
        public string RestrictionUSTerritories { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PaymentsConfigurationRestrictions {\n");
            sb.Append("  MaximumSubtotal: ").Append(MaximumSubtotal).Append("\n");
            sb.Append("  MinimumSubtotal: ").Append(MinimumSubtotal).Append("\n");
            sb.Append("  PaymentMethod: ").Append(PaymentMethod).Append("\n");
            sb.Append("  RestrictionAlaskaHawaii: ").Append(RestrictionAlaskaHawaii).Append("\n");
            sb.Append("  RestrictionApoFpo: ").Append(RestrictionApoFpo).Append("\n");
            sb.Append("  RestrictionCanada: ").Append(RestrictionCanada).Append("\n");
            sb.Append("  RestrictionContinentalUS: ").Append(RestrictionContinentalUS).Append("\n");
            sb.Append("  RestrictionDomesticOnly: ").Append(RestrictionDomesticOnly).Append("\n");
            sb.Append("  RestrictionInternationalOnly: ").Append(RestrictionInternationalOnly).Append("\n");
            sb.Append("  RestrictionPoBox: ").Append(RestrictionPoBox).Append("\n");
            sb.Append("  RestrictionPuertoRico: ").Append(RestrictionPuertoRico).Append("\n");
            sb.Append("  RestrictionUSTerritories: ").Append(RestrictionUSTerritories).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PaymentsConfigurationRestrictions);
        }

        /// <summary>
        /// Returns true if PaymentsConfigurationRestrictions instances are equal
        /// </summary>
        /// <param name="input">Instance of PaymentsConfigurationRestrictions to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PaymentsConfigurationRestrictions input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.MaximumSubtotal == input.MaximumSubtotal ||
                    (this.MaximumSubtotal != null &&
                    this.MaximumSubtotal.Equals(input.MaximumSubtotal))
                ) && 
                (
                    this.MinimumSubtotal == input.MinimumSubtotal ||
                    (this.MinimumSubtotal != null &&
                    this.MinimumSubtotal.Equals(input.MinimumSubtotal))
                ) && 
                (
                    this.PaymentMethod == input.PaymentMethod ||
                    (this.PaymentMethod != null &&
                    this.PaymentMethod.Equals(input.PaymentMethod))
                ) && 
                (
                    this.RestrictionAlaskaHawaii == input.RestrictionAlaskaHawaii ||
                    (this.RestrictionAlaskaHawaii != null &&
                    this.RestrictionAlaskaHawaii.Equals(input.RestrictionAlaskaHawaii))
                ) && 
                (
                    this.RestrictionApoFpo == input.RestrictionApoFpo ||
                    (this.RestrictionApoFpo != null &&
                    this.RestrictionApoFpo.Equals(input.RestrictionApoFpo))
                ) && 
                (
                    this.RestrictionCanada == input.RestrictionCanada ||
                    (this.RestrictionCanada != null &&
                    this.RestrictionCanada.Equals(input.RestrictionCanada))
                ) && 
                (
                    this.RestrictionContinentalUS == input.RestrictionContinentalUS ||
                    (this.RestrictionContinentalUS != null &&
                    this.RestrictionContinentalUS.Equals(input.RestrictionContinentalUS))
                ) && 
                (
                    this.RestrictionDomesticOnly == input.RestrictionDomesticOnly ||
                    (this.RestrictionDomesticOnly != null &&
                    this.RestrictionDomesticOnly.Equals(input.RestrictionDomesticOnly))
                ) && 
                (
                    this.RestrictionInternationalOnly == input.RestrictionInternationalOnly ||
                    (this.RestrictionInternationalOnly != null &&
                    this.RestrictionInternationalOnly.Equals(input.RestrictionInternationalOnly))
                ) && 
                (
                    this.RestrictionPoBox == input.RestrictionPoBox ||
                    (this.RestrictionPoBox != null &&
                    this.RestrictionPoBox.Equals(input.RestrictionPoBox))
                ) && 
                (
                    this.RestrictionPuertoRico == input.RestrictionPuertoRico ||
                    (this.RestrictionPuertoRico != null &&
                    this.RestrictionPuertoRico.Equals(input.RestrictionPuertoRico))
                ) && 
                (
                    this.RestrictionUSTerritories == input.RestrictionUSTerritories ||
                    (this.RestrictionUSTerritories != null &&
                    this.RestrictionUSTerritories.Equals(input.RestrictionUSTerritories))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.MaximumSubtotal != null)
                    hashCode = hashCode * 59 + this.MaximumSubtotal.GetHashCode();
                if (this.MinimumSubtotal != null)
                    hashCode = hashCode * 59 + this.MinimumSubtotal.GetHashCode();
                if (this.PaymentMethod != null)
                    hashCode = hashCode * 59 + this.PaymentMethod.GetHashCode();
                if (this.RestrictionAlaskaHawaii != null)
                    hashCode = hashCode * 59 + this.RestrictionAlaskaHawaii.GetHashCode();
                if (this.RestrictionApoFpo != null)
                    hashCode = hashCode * 59 + this.RestrictionApoFpo.GetHashCode();
                if (this.RestrictionCanada != null)
                    hashCode = hashCode * 59 + this.RestrictionCanada.GetHashCode();
                if (this.RestrictionContinentalUS != null)
                    hashCode = hashCode * 59 + this.RestrictionContinentalUS.GetHashCode();
                if (this.RestrictionDomesticOnly != null)
                    hashCode = hashCode * 59 + this.RestrictionDomesticOnly.GetHashCode();
                if (this.RestrictionInternationalOnly != null)
                    hashCode = hashCode * 59 + this.RestrictionInternationalOnly.GetHashCode();
                if (this.RestrictionPoBox != null)
                    hashCode = hashCode * 59 + this.RestrictionPoBox.GetHashCode();
                if (this.RestrictionPuertoRico != null)
                    hashCode = hashCode * 59 + this.RestrictionPuertoRico.GetHashCode();
                if (this.RestrictionUSTerritories != null)
                    hashCode = hashCode * 59 + this.RestrictionUSTerritories.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
