/* 
 * UltraCart Rest API V2
 *
 * UltraCart REST API Version 2
 *
 * OpenAPI spec version: 2.0.0
 * Contact: support@ultracart.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = com.ultracart.admin.v2.Client.SwaggerDateConverter;

namespace com.ultracart.admin.v2.Model
{
    /// <summary>
    /// PaymentsConfigurationTestMethod
    /// </summary>
    [DataContract]
    public partial class PaymentsConfigurationTestMethod :  IEquatable<PaymentsConfigurationTestMethod>, IValidatableObject
    {
        /// <summary>
        /// Payment action
        /// </summary>
        /// <value>Payment action</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum PaymentActionEnum
        {
            
            /// <summary>
            /// Enum Skippayment for value: skip payment
            /// </summary>
            [EnumMember(Value = "skip payment")]
            Skippayment = 1,
            
            /// <summary>
            /// Enum Skippmtrej for value: skip pmt rej
            /// </summary>
            [EnumMember(Value = "skip pmt rej")]
            Skippmtrej = 2,
            
            /// <summary>
            /// Enum Skippmtco for value: skip pmt co
            /// </summary>
            [EnumMember(Value = "skip pmt co")]
            Skippmtco = 3,
            
            /// <summary>
            /// Enum Holdinar for value: hold in ar
            /// </summary>
            [EnumMember(Value = "hold in ar")]
            Holdinar = 4
        }

        /// <summary>
        /// Payment action
        /// </summary>
        /// <value>Payment action</value>
        [DataMember(Name="payment_action", EmitDefaultValue=false)]
        public PaymentActionEnum? PaymentAction { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="PaymentsConfigurationTestMethod" /> class.
        /// </summary>
        /// <param name="bankAccountNumber">Bank account number.</param>
        /// <param name="bankRoutingNumber">Bank routing number.</param>
        /// <param name="creditCardNumber">Credit card number.</param>
        /// <param name="creditCardNumberExisting">The existing credit card number.</param>
        /// <param name="description">Description.</param>
        /// <param name="paymentAction">Payment action.</param>
        /// <param name="paymentMethod">Payment method.</param>
        /// <param name="paymentMethodTestOid">Payment method test oid.</param>
        /// <param name="skipAffiliateTransaction">Skip affiliate transaction.</param>
        /// <param name="skipConversionPixels">If true, skips recording any conversion pixels to avoid sending test orders to your analysis sites.</param>
        /// <param name="skipFraudFilter">Skip fraud filter.</param>
        public PaymentsConfigurationTestMethod(string bankAccountNumber = default(string), string bankRoutingNumber = default(string), string creditCardNumber = default(string), string creditCardNumberExisting = default(string), string description = default(string), PaymentActionEnum? paymentAction = default(PaymentActionEnum?), string paymentMethod = default(string), int? paymentMethodTestOid = default(int?), bool? skipAffiliateTransaction = default(bool?), bool? skipConversionPixels = default(bool?), bool? skipFraudFilter = default(bool?))
        {
            this.BankAccountNumber = bankAccountNumber;
            this.BankRoutingNumber = bankRoutingNumber;
            this.CreditCardNumber = creditCardNumber;
            this.CreditCardNumberExisting = creditCardNumberExisting;
            this.Description = description;
            this.PaymentAction = paymentAction;
            this.PaymentMethod = paymentMethod;
            this.PaymentMethodTestOid = paymentMethodTestOid;
            this.SkipAffiliateTransaction = skipAffiliateTransaction;
            this.SkipConversionPixels = skipConversionPixels;
            this.SkipFraudFilter = skipFraudFilter;
        }
        
        /// <summary>
        /// Bank account number
        /// </summary>
        /// <value>Bank account number</value>
        [DataMember(Name="bank_account_number", EmitDefaultValue=false)]
        public string BankAccountNumber { get; set; }

        /// <summary>
        /// Bank routing number
        /// </summary>
        /// <value>Bank routing number</value>
        [DataMember(Name="bank_routing_number", EmitDefaultValue=false)]
        public string BankRoutingNumber { get; set; }

        /// <summary>
        /// Credit card number
        /// </summary>
        /// <value>Credit card number</value>
        [DataMember(Name="credit_card_number", EmitDefaultValue=false)]
        public string CreditCardNumber { get; set; }

        /// <summary>
        /// The existing credit card number
        /// </summary>
        /// <value>The existing credit card number</value>
        [DataMember(Name="credit_card_number_existing", EmitDefaultValue=false)]
        public string CreditCardNumberExisting { get; set; }

        /// <summary>
        /// Description
        /// </summary>
        /// <value>Description</value>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }


        /// <summary>
        /// Payment method
        /// </summary>
        /// <value>Payment method</value>
        [DataMember(Name="payment_method", EmitDefaultValue=false)]
        public string PaymentMethod { get; set; }

        /// <summary>
        /// Payment method test oid
        /// </summary>
        /// <value>Payment method test oid</value>
        [DataMember(Name="payment_method_test_oid", EmitDefaultValue=false)]
        public int? PaymentMethodTestOid { get; set; }

        /// <summary>
        /// Skip affiliate transaction
        /// </summary>
        /// <value>Skip affiliate transaction</value>
        [DataMember(Name="skip_affiliate_transaction", EmitDefaultValue=false)]
        public bool? SkipAffiliateTransaction { get; set; }

        /// <summary>
        /// If true, skips recording any conversion pixels to avoid sending test orders to your analysis sites
        /// </summary>
        /// <value>If true, skips recording any conversion pixels to avoid sending test orders to your analysis sites</value>
        [DataMember(Name="skip_conversion_pixels", EmitDefaultValue=false)]
        public bool? SkipConversionPixels { get; set; }

        /// <summary>
        /// Skip fraud filter
        /// </summary>
        /// <value>Skip fraud filter</value>
        [DataMember(Name="skip_fraud_filter", EmitDefaultValue=false)]
        public bool? SkipFraudFilter { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PaymentsConfigurationTestMethod {\n");
            sb.Append("  BankAccountNumber: ").Append(BankAccountNumber).Append("\n");
            sb.Append("  BankRoutingNumber: ").Append(BankRoutingNumber).Append("\n");
            sb.Append("  CreditCardNumber: ").Append(CreditCardNumber).Append("\n");
            sb.Append("  CreditCardNumberExisting: ").Append(CreditCardNumberExisting).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  PaymentAction: ").Append(PaymentAction).Append("\n");
            sb.Append("  PaymentMethod: ").Append(PaymentMethod).Append("\n");
            sb.Append("  PaymentMethodTestOid: ").Append(PaymentMethodTestOid).Append("\n");
            sb.Append("  SkipAffiliateTransaction: ").Append(SkipAffiliateTransaction).Append("\n");
            sb.Append("  SkipConversionPixels: ").Append(SkipConversionPixels).Append("\n");
            sb.Append("  SkipFraudFilter: ").Append(SkipFraudFilter).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PaymentsConfigurationTestMethod);
        }

        /// <summary>
        /// Returns true if PaymentsConfigurationTestMethod instances are equal
        /// </summary>
        /// <param name="input">Instance of PaymentsConfigurationTestMethod to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PaymentsConfigurationTestMethod input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.BankAccountNumber == input.BankAccountNumber ||
                    (this.BankAccountNumber != null &&
                    this.BankAccountNumber.Equals(input.BankAccountNumber))
                ) && 
                (
                    this.BankRoutingNumber == input.BankRoutingNumber ||
                    (this.BankRoutingNumber != null &&
                    this.BankRoutingNumber.Equals(input.BankRoutingNumber))
                ) && 
                (
                    this.CreditCardNumber == input.CreditCardNumber ||
                    (this.CreditCardNumber != null &&
                    this.CreditCardNumber.Equals(input.CreditCardNumber))
                ) && 
                (
                    this.CreditCardNumberExisting == input.CreditCardNumberExisting ||
                    (this.CreditCardNumberExisting != null &&
                    this.CreditCardNumberExisting.Equals(input.CreditCardNumberExisting))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.PaymentAction == input.PaymentAction ||
                    (this.PaymentAction != null &&
                    this.PaymentAction.Equals(input.PaymentAction))
                ) && 
                (
                    this.PaymentMethod == input.PaymentMethod ||
                    (this.PaymentMethod != null &&
                    this.PaymentMethod.Equals(input.PaymentMethod))
                ) && 
                (
                    this.PaymentMethodTestOid == input.PaymentMethodTestOid ||
                    (this.PaymentMethodTestOid != null &&
                    this.PaymentMethodTestOid.Equals(input.PaymentMethodTestOid))
                ) && 
                (
                    this.SkipAffiliateTransaction == input.SkipAffiliateTransaction ||
                    (this.SkipAffiliateTransaction != null &&
                    this.SkipAffiliateTransaction.Equals(input.SkipAffiliateTransaction))
                ) && 
                (
                    this.SkipConversionPixels == input.SkipConversionPixels ||
                    (this.SkipConversionPixels != null &&
                    this.SkipConversionPixels.Equals(input.SkipConversionPixels))
                ) && 
                (
                    this.SkipFraudFilter == input.SkipFraudFilter ||
                    (this.SkipFraudFilter != null &&
                    this.SkipFraudFilter.Equals(input.SkipFraudFilter))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.BankAccountNumber != null)
                    hashCode = hashCode * 59 + this.BankAccountNumber.GetHashCode();
                if (this.BankRoutingNumber != null)
                    hashCode = hashCode * 59 + this.BankRoutingNumber.GetHashCode();
                if (this.CreditCardNumber != null)
                    hashCode = hashCode * 59 + this.CreditCardNumber.GetHashCode();
                if (this.CreditCardNumberExisting != null)
                    hashCode = hashCode * 59 + this.CreditCardNumberExisting.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                if (this.PaymentAction != null)
                    hashCode = hashCode * 59 + this.PaymentAction.GetHashCode();
                if (this.PaymentMethod != null)
                    hashCode = hashCode * 59 + this.PaymentMethod.GetHashCode();
                if (this.PaymentMethodTestOid != null)
                    hashCode = hashCode * 59 + this.PaymentMethodTestOid.GetHashCode();
                if (this.SkipAffiliateTransaction != null)
                    hashCode = hashCode * 59 + this.SkipAffiliateTransaction.GetHashCode();
                if (this.SkipConversionPixels != null)
                    hashCode = hashCode * 59 + this.SkipConversionPixels.GetHashCode();
                if (this.SkipFraudFilter != null)
                    hashCode = hashCode * 59 + this.SkipFraudFilter.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
