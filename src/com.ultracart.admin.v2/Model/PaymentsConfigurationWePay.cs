/* 
 * UltraCart Rest API V2
 *
 * UltraCart REST API Version 2
 *
 * OpenAPI spec version: 2.0.0
 * Contact: support@ultracart.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = com.ultracart.admin.v2.Client.SwaggerDateConverter;

namespace com.ultracart.admin.v2.Model
{
    /// <summary>
    /// PaymentsConfigurationWePay
    /// </summary>
    [DataContract]
    public partial class PaymentsConfigurationWePay :  IEquatable<PaymentsConfigurationWePay>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PaymentsConfigurationWePay" /> class.
        /// </summary>
        /// <param name="acceptWepay">Master flag indicating this merchant accepts UltraCart Payments WePay.</param>
        /// <param name="accountUpdateUri">URI for updating the WePay account.</param>
        /// <param name="address1">Address line 1.</param>
        /// <param name="address2">Address line 2.</param>
        /// <param name="canadaAcceptDebitCards">For Canadian merchants, true if they wish to accept debit cards.</param>
        /// <param name="city">City.</param>
        /// <param name="company">Company.</param>
        /// <param name="companyDescription">Company description.</param>
        /// <param name="consoleHostname">Console hostname.</param>
        /// <param name="country">Country.</param>
        /// <param name="currency">Base currency for transactions.</param>
        /// <param name="expectedRevenue">Expected Revenue.</param>
        /// <param name="hideCreditCardNonUltracartPayments">Internal flag to aid UI.</param>
        /// <param name="hideSurchargeAmount">Internal flag to aid UI.</param>
        /// <param name="industry">Industry.</param>
        /// <param name="ownerEmail">Owner email.</param>
        /// <param name="ownerName">Owner name.</param>
        /// <param name="ownerPhone">Owner phone.</param>
        /// <param name="postalCode">Postal code.</param>
        /// <param name="removePayPalPro">removePayPalPro.</param>
        /// <param name="restrictions">restrictions.</param>
        /// <param name="shortPaypalMarketingText">Internal UI aid.</param>
        /// <param name="showUltracartPaymentsDisabled">Internal flag to aid UI.</param>
        /// <param name="showUltracartPaymentsIntro">Internal flag to aid UI.</param>
        /// <param name="showUltracartPaymentsVerification">Internal flag to aid UI.</param>
        /// <param name="showUltracartPaymentsVerified">Internal flag to aid UI.</param>
        /// <param name="state">State.</param>
        /// <param name="websiteUrl">Website URL.</param>
        public PaymentsConfigurationWePay(bool? acceptWepay = default(bool?), string accountUpdateUri = default(string), string address1 = default(string), string address2 = default(string), bool? canadaAcceptDebitCards = default(bool?), string city = default(string), string company = default(string), string companyDescription = default(string), string consoleHostname = default(string), string country = default(string), string currency = default(string), string expectedRevenue = default(string), bool? hideCreditCardNonUltracartPayments = default(bool?), bool? hideSurchargeAmount = default(bool?), string industry = default(string), string ownerEmail = default(string), string ownerName = default(string), string ownerPhone = default(string), string postalCode = default(string), bool? removePayPalPro = default(bool?), PaymentsConfigurationRestrictions restrictions = default(PaymentsConfigurationRestrictions), bool? shortPaypalMarketingText = default(bool?), bool? showUltracartPaymentsDisabled = default(bool?), bool? showUltracartPaymentsIntro = default(bool?), bool? showUltracartPaymentsVerification = default(bool?), bool? showUltracartPaymentsVerified = default(bool?), string state = default(string), string websiteUrl = default(string))
        {
            this.AcceptWepay = acceptWepay;
            this.AccountUpdateUri = accountUpdateUri;
            this.Address1 = address1;
            this.Address2 = address2;
            this.CanadaAcceptDebitCards = canadaAcceptDebitCards;
            this.City = city;
            this.Company = company;
            this.CompanyDescription = companyDescription;
            this.ConsoleHostname = consoleHostname;
            this.Country = country;
            this.Currency = currency;
            this.ExpectedRevenue = expectedRevenue;
            this.HideCreditCardNonUltracartPayments = hideCreditCardNonUltracartPayments;
            this.HideSurchargeAmount = hideSurchargeAmount;
            this.Industry = industry;
            this.OwnerEmail = ownerEmail;
            this.OwnerName = ownerName;
            this.OwnerPhone = ownerPhone;
            this.PostalCode = postalCode;
            this.RemovePayPalPro = removePayPalPro;
            this.Restrictions = restrictions;
            this.ShortPaypalMarketingText = shortPaypalMarketingText;
            this.ShowUltracartPaymentsDisabled = showUltracartPaymentsDisabled;
            this.ShowUltracartPaymentsIntro = showUltracartPaymentsIntro;
            this.ShowUltracartPaymentsVerification = showUltracartPaymentsVerification;
            this.ShowUltracartPaymentsVerified = showUltracartPaymentsVerified;
            this.State = state;
            this.WebsiteUrl = websiteUrl;
        }
        
        /// <summary>
        /// Master flag indicating this merchant accepts UltraCart Payments WePay
        /// </summary>
        /// <value>Master flag indicating this merchant accepts UltraCart Payments WePay</value>
        [DataMember(Name="accept_wepay", EmitDefaultValue=false)]
        public bool? AcceptWepay { get; set; }

        /// <summary>
        /// URI for updating the WePay account
        /// </summary>
        /// <value>URI for updating the WePay account</value>
        [DataMember(Name="account_update_uri", EmitDefaultValue=false)]
        public string AccountUpdateUri { get; set; }

        /// <summary>
        /// Address line 1
        /// </summary>
        /// <value>Address line 1</value>
        [DataMember(Name="address1", EmitDefaultValue=false)]
        public string Address1 { get; set; }

        /// <summary>
        /// Address line 2
        /// </summary>
        /// <value>Address line 2</value>
        [DataMember(Name="address2", EmitDefaultValue=false)]
        public string Address2 { get; set; }

        /// <summary>
        /// For Canadian merchants, true if they wish to accept debit cards
        /// </summary>
        /// <value>For Canadian merchants, true if they wish to accept debit cards</value>
        [DataMember(Name="canada_accept_debit_cards", EmitDefaultValue=false)]
        public bool? CanadaAcceptDebitCards { get; set; }

        /// <summary>
        /// City
        /// </summary>
        /// <value>City</value>
        [DataMember(Name="city", EmitDefaultValue=false)]
        public string City { get; set; }

        /// <summary>
        /// Company
        /// </summary>
        /// <value>Company</value>
        [DataMember(Name="company", EmitDefaultValue=false)]
        public string Company { get; set; }

        /// <summary>
        /// Company description
        /// </summary>
        /// <value>Company description</value>
        [DataMember(Name="company_description", EmitDefaultValue=false)]
        public string CompanyDescription { get; set; }

        /// <summary>
        /// Console hostname
        /// </summary>
        /// <value>Console hostname</value>
        [DataMember(Name="console_hostname", EmitDefaultValue=false)]
        public string ConsoleHostname { get; set; }

        /// <summary>
        /// Country
        /// </summary>
        /// <value>Country</value>
        [DataMember(Name="country", EmitDefaultValue=false)]
        public string Country { get; set; }

        /// <summary>
        /// Base currency for transactions
        /// </summary>
        /// <value>Base currency for transactions</value>
        [DataMember(Name="currency", EmitDefaultValue=false)]
        public string Currency { get; set; }

        /// <summary>
        /// Expected Revenue
        /// </summary>
        /// <value>Expected Revenue</value>
        [DataMember(Name="expected_revenue", EmitDefaultValue=false)]
        public string ExpectedRevenue { get; set; }

        /// <summary>
        /// Internal flag to aid UI
        /// </summary>
        /// <value>Internal flag to aid UI</value>
        [DataMember(Name="hide_credit_card_non_ultracart_payments", EmitDefaultValue=false)]
        public bool? HideCreditCardNonUltracartPayments { get; set; }

        /// <summary>
        /// Internal flag to aid UI
        /// </summary>
        /// <value>Internal flag to aid UI</value>
        [DataMember(Name="hide_surcharge_amount", EmitDefaultValue=false)]
        public bool? HideSurchargeAmount { get; set; }

        /// <summary>
        /// Industry
        /// </summary>
        /// <value>Industry</value>
        [DataMember(Name="industry", EmitDefaultValue=false)]
        public string Industry { get; set; }

        /// <summary>
        /// Owner email
        /// </summary>
        /// <value>Owner email</value>
        [DataMember(Name="owner_email", EmitDefaultValue=false)]
        public string OwnerEmail { get; set; }

        /// <summary>
        /// Owner name
        /// </summary>
        /// <value>Owner name</value>
        [DataMember(Name="owner_name", EmitDefaultValue=false)]
        public string OwnerName { get; set; }

        /// <summary>
        /// Owner phone
        /// </summary>
        /// <value>Owner phone</value>
        [DataMember(Name="owner_phone", EmitDefaultValue=false)]
        public string OwnerPhone { get; set; }

        /// <summary>
        /// Postal code
        /// </summary>
        /// <value>Postal code</value>
        [DataMember(Name="postal_code", EmitDefaultValue=false)]
        public string PostalCode { get; set; }

        /// <summary>
        /// Gets or Sets RemovePayPalPro
        /// </summary>
        [DataMember(Name="removePayPalPro", EmitDefaultValue=false)]
        public bool? RemovePayPalPro { get; set; }

        /// <summary>
        /// Gets or Sets Restrictions
        /// </summary>
        [DataMember(Name="restrictions", EmitDefaultValue=false)]
        public PaymentsConfigurationRestrictions Restrictions { get; set; }

        /// <summary>
        /// Internal UI aid
        /// </summary>
        /// <value>Internal UI aid</value>
        [DataMember(Name="short_paypal_marketing_text", EmitDefaultValue=false)]
        public bool? ShortPaypalMarketingText { get; set; }

        /// <summary>
        /// Internal flag to aid UI
        /// </summary>
        /// <value>Internal flag to aid UI</value>
        [DataMember(Name="show_ultracart_payments_disabled", EmitDefaultValue=false)]
        public bool? ShowUltracartPaymentsDisabled { get; set; }

        /// <summary>
        /// Internal flag to aid UI
        /// </summary>
        /// <value>Internal flag to aid UI</value>
        [DataMember(Name="show_ultracart_payments_intro", EmitDefaultValue=false)]
        public bool? ShowUltracartPaymentsIntro { get; set; }

        /// <summary>
        /// Internal flag to aid UI
        /// </summary>
        /// <value>Internal flag to aid UI</value>
        [DataMember(Name="show_ultracart_payments_verification", EmitDefaultValue=false)]
        public bool? ShowUltracartPaymentsVerification { get; set; }

        /// <summary>
        /// Internal flag to aid UI
        /// </summary>
        /// <value>Internal flag to aid UI</value>
        [DataMember(Name="show_ultracart_payments_verified", EmitDefaultValue=false)]
        public bool? ShowUltracartPaymentsVerified { get; set; }

        /// <summary>
        /// State
        /// </summary>
        /// <value>State</value>
        [DataMember(Name="state", EmitDefaultValue=false)]
        public string State { get; set; }

        /// <summary>
        /// Website URL
        /// </summary>
        /// <value>Website URL</value>
        [DataMember(Name="website_url", EmitDefaultValue=false)]
        public string WebsiteUrl { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PaymentsConfigurationWePay {\n");
            sb.Append("  AcceptWepay: ").Append(AcceptWepay).Append("\n");
            sb.Append("  AccountUpdateUri: ").Append(AccountUpdateUri).Append("\n");
            sb.Append("  Address1: ").Append(Address1).Append("\n");
            sb.Append("  Address2: ").Append(Address2).Append("\n");
            sb.Append("  CanadaAcceptDebitCards: ").Append(CanadaAcceptDebitCards).Append("\n");
            sb.Append("  City: ").Append(City).Append("\n");
            sb.Append("  Company: ").Append(Company).Append("\n");
            sb.Append("  CompanyDescription: ").Append(CompanyDescription).Append("\n");
            sb.Append("  ConsoleHostname: ").Append(ConsoleHostname).Append("\n");
            sb.Append("  Country: ").Append(Country).Append("\n");
            sb.Append("  Currency: ").Append(Currency).Append("\n");
            sb.Append("  ExpectedRevenue: ").Append(ExpectedRevenue).Append("\n");
            sb.Append("  HideCreditCardNonUltracartPayments: ").Append(HideCreditCardNonUltracartPayments).Append("\n");
            sb.Append("  HideSurchargeAmount: ").Append(HideSurchargeAmount).Append("\n");
            sb.Append("  Industry: ").Append(Industry).Append("\n");
            sb.Append("  OwnerEmail: ").Append(OwnerEmail).Append("\n");
            sb.Append("  OwnerName: ").Append(OwnerName).Append("\n");
            sb.Append("  OwnerPhone: ").Append(OwnerPhone).Append("\n");
            sb.Append("  PostalCode: ").Append(PostalCode).Append("\n");
            sb.Append("  RemovePayPalPro: ").Append(RemovePayPalPro).Append("\n");
            sb.Append("  Restrictions: ").Append(Restrictions).Append("\n");
            sb.Append("  ShortPaypalMarketingText: ").Append(ShortPaypalMarketingText).Append("\n");
            sb.Append("  ShowUltracartPaymentsDisabled: ").Append(ShowUltracartPaymentsDisabled).Append("\n");
            sb.Append("  ShowUltracartPaymentsIntro: ").Append(ShowUltracartPaymentsIntro).Append("\n");
            sb.Append("  ShowUltracartPaymentsVerification: ").Append(ShowUltracartPaymentsVerification).Append("\n");
            sb.Append("  ShowUltracartPaymentsVerified: ").Append(ShowUltracartPaymentsVerified).Append("\n");
            sb.Append("  State: ").Append(State).Append("\n");
            sb.Append("  WebsiteUrl: ").Append(WebsiteUrl).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PaymentsConfigurationWePay);
        }

        /// <summary>
        /// Returns true if PaymentsConfigurationWePay instances are equal
        /// </summary>
        /// <param name="input">Instance of PaymentsConfigurationWePay to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PaymentsConfigurationWePay input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.AcceptWepay == input.AcceptWepay ||
                    (this.AcceptWepay != null &&
                    this.AcceptWepay.Equals(input.AcceptWepay))
                ) && 
                (
                    this.AccountUpdateUri == input.AccountUpdateUri ||
                    (this.AccountUpdateUri != null &&
                    this.AccountUpdateUri.Equals(input.AccountUpdateUri))
                ) && 
                (
                    this.Address1 == input.Address1 ||
                    (this.Address1 != null &&
                    this.Address1.Equals(input.Address1))
                ) && 
                (
                    this.Address2 == input.Address2 ||
                    (this.Address2 != null &&
                    this.Address2.Equals(input.Address2))
                ) && 
                (
                    this.CanadaAcceptDebitCards == input.CanadaAcceptDebitCards ||
                    (this.CanadaAcceptDebitCards != null &&
                    this.CanadaAcceptDebitCards.Equals(input.CanadaAcceptDebitCards))
                ) && 
                (
                    this.City == input.City ||
                    (this.City != null &&
                    this.City.Equals(input.City))
                ) && 
                (
                    this.Company == input.Company ||
                    (this.Company != null &&
                    this.Company.Equals(input.Company))
                ) && 
                (
                    this.CompanyDescription == input.CompanyDescription ||
                    (this.CompanyDescription != null &&
                    this.CompanyDescription.Equals(input.CompanyDescription))
                ) && 
                (
                    this.ConsoleHostname == input.ConsoleHostname ||
                    (this.ConsoleHostname != null &&
                    this.ConsoleHostname.Equals(input.ConsoleHostname))
                ) && 
                (
                    this.Country == input.Country ||
                    (this.Country != null &&
                    this.Country.Equals(input.Country))
                ) && 
                (
                    this.Currency == input.Currency ||
                    (this.Currency != null &&
                    this.Currency.Equals(input.Currency))
                ) && 
                (
                    this.ExpectedRevenue == input.ExpectedRevenue ||
                    (this.ExpectedRevenue != null &&
                    this.ExpectedRevenue.Equals(input.ExpectedRevenue))
                ) && 
                (
                    this.HideCreditCardNonUltracartPayments == input.HideCreditCardNonUltracartPayments ||
                    (this.HideCreditCardNonUltracartPayments != null &&
                    this.HideCreditCardNonUltracartPayments.Equals(input.HideCreditCardNonUltracartPayments))
                ) && 
                (
                    this.HideSurchargeAmount == input.HideSurchargeAmount ||
                    (this.HideSurchargeAmount != null &&
                    this.HideSurchargeAmount.Equals(input.HideSurchargeAmount))
                ) && 
                (
                    this.Industry == input.Industry ||
                    (this.Industry != null &&
                    this.Industry.Equals(input.Industry))
                ) && 
                (
                    this.OwnerEmail == input.OwnerEmail ||
                    (this.OwnerEmail != null &&
                    this.OwnerEmail.Equals(input.OwnerEmail))
                ) && 
                (
                    this.OwnerName == input.OwnerName ||
                    (this.OwnerName != null &&
                    this.OwnerName.Equals(input.OwnerName))
                ) && 
                (
                    this.OwnerPhone == input.OwnerPhone ||
                    (this.OwnerPhone != null &&
                    this.OwnerPhone.Equals(input.OwnerPhone))
                ) && 
                (
                    this.PostalCode == input.PostalCode ||
                    (this.PostalCode != null &&
                    this.PostalCode.Equals(input.PostalCode))
                ) && 
                (
                    this.RemovePayPalPro == input.RemovePayPalPro ||
                    (this.RemovePayPalPro != null &&
                    this.RemovePayPalPro.Equals(input.RemovePayPalPro))
                ) && 
                (
                    this.Restrictions == input.Restrictions ||
                    (this.Restrictions != null &&
                    this.Restrictions.Equals(input.Restrictions))
                ) && 
                (
                    this.ShortPaypalMarketingText == input.ShortPaypalMarketingText ||
                    (this.ShortPaypalMarketingText != null &&
                    this.ShortPaypalMarketingText.Equals(input.ShortPaypalMarketingText))
                ) && 
                (
                    this.ShowUltracartPaymentsDisabled == input.ShowUltracartPaymentsDisabled ||
                    (this.ShowUltracartPaymentsDisabled != null &&
                    this.ShowUltracartPaymentsDisabled.Equals(input.ShowUltracartPaymentsDisabled))
                ) && 
                (
                    this.ShowUltracartPaymentsIntro == input.ShowUltracartPaymentsIntro ||
                    (this.ShowUltracartPaymentsIntro != null &&
                    this.ShowUltracartPaymentsIntro.Equals(input.ShowUltracartPaymentsIntro))
                ) && 
                (
                    this.ShowUltracartPaymentsVerification == input.ShowUltracartPaymentsVerification ||
                    (this.ShowUltracartPaymentsVerification != null &&
                    this.ShowUltracartPaymentsVerification.Equals(input.ShowUltracartPaymentsVerification))
                ) && 
                (
                    this.ShowUltracartPaymentsVerified == input.ShowUltracartPaymentsVerified ||
                    (this.ShowUltracartPaymentsVerified != null &&
                    this.ShowUltracartPaymentsVerified.Equals(input.ShowUltracartPaymentsVerified))
                ) && 
                (
                    this.State == input.State ||
                    (this.State != null &&
                    this.State.Equals(input.State))
                ) && 
                (
                    this.WebsiteUrl == input.WebsiteUrl ||
                    (this.WebsiteUrl != null &&
                    this.WebsiteUrl.Equals(input.WebsiteUrl))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AcceptWepay != null)
                    hashCode = hashCode * 59 + this.AcceptWepay.GetHashCode();
                if (this.AccountUpdateUri != null)
                    hashCode = hashCode * 59 + this.AccountUpdateUri.GetHashCode();
                if (this.Address1 != null)
                    hashCode = hashCode * 59 + this.Address1.GetHashCode();
                if (this.Address2 != null)
                    hashCode = hashCode * 59 + this.Address2.GetHashCode();
                if (this.CanadaAcceptDebitCards != null)
                    hashCode = hashCode * 59 + this.CanadaAcceptDebitCards.GetHashCode();
                if (this.City != null)
                    hashCode = hashCode * 59 + this.City.GetHashCode();
                if (this.Company != null)
                    hashCode = hashCode * 59 + this.Company.GetHashCode();
                if (this.CompanyDescription != null)
                    hashCode = hashCode * 59 + this.CompanyDescription.GetHashCode();
                if (this.ConsoleHostname != null)
                    hashCode = hashCode * 59 + this.ConsoleHostname.GetHashCode();
                if (this.Country != null)
                    hashCode = hashCode * 59 + this.Country.GetHashCode();
                if (this.Currency != null)
                    hashCode = hashCode * 59 + this.Currency.GetHashCode();
                if (this.ExpectedRevenue != null)
                    hashCode = hashCode * 59 + this.ExpectedRevenue.GetHashCode();
                if (this.HideCreditCardNonUltracartPayments != null)
                    hashCode = hashCode * 59 + this.HideCreditCardNonUltracartPayments.GetHashCode();
                if (this.HideSurchargeAmount != null)
                    hashCode = hashCode * 59 + this.HideSurchargeAmount.GetHashCode();
                if (this.Industry != null)
                    hashCode = hashCode * 59 + this.Industry.GetHashCode();
                if (this.OwnerEmail != null)
                    hashCode = hashCode * 59 + this.OwnerEmail.GetHashCode();
                if (this.OwnerName != null)
                    hashCode = hashCode * 59 + this.OwnerName.GetHashCode();
                if (this.OwnerPhone != null)
                    hashCode = hashCode * 59 + this.OwnerPhone.GetHashCode();
                if (this.PostalCode != null)
                    hashCode = hashCode * 59 + this.PostalCode.GetHashCode();
                if (this.RemovePayPalPro != null)
                    hashCode = hashCode * 59 + this.RemovePayPalPro.GetHashCode();
                if (this.Restrictions != null)
                    hashCode = hashCode * 59 + this.Restrictions.GetHashCode();
                if (this.ShortPaypalMarketingText != null)
                    hashCode = hashCode * 59 + this.ShortPaypalMarketingText.GetHashCode();
                if (this.ShowUltracartPaymentsDisabled != null)
                    hashCode = hashCode * 59 + this.ShowUltracartPaymentsDisabled.GetHashCode();
                if (this.ShowUltracartPaymentsIntro != null)
                    hashCode = hashCode * 59 + this.ShowUltracartPaymentsIntro.GetHashCode();
                if (this.ShowUltracartPaymentsVerification != null)
                    hashCode = hashCode * 59 + this.ShowUltracartPaymentsVerification.GetHashCode();
                if (this.ShowUltracartPaymentsVerified != null)
                    hashCode = hashCode * 59 + this.ShowUltracartPaymentsVerified.GetHashCode();
                if (this.State != null)
                    hashCode = hashCode * 59 + this.State.GetHashCode();
                if (this.WebsiteUrl != null)
                    hashCode = hashCode * 59 + this.WebsiteUrl.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
