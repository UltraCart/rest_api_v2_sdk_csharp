/* 
 * UltraCart Rest API V2
 *
 * UltraCart REST API Version 2
 *
 * OpenAPI spec version: 2.0.0
 * Contact: support@ultracart.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = com.ultracart.admin.v2.Client.SwaggerDateConverter;

namespace com.ultracart.admin.v2.Model
{
    /// <summary>
    /// PaymentsConfigurationWireTransfer
    /// </summary>
    [DataContract]
    public partial class PaymentsConfigurationWireTransfer :  IEquatable<PaymentsConfigurationWireTransfer>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PaymentsConfigurationWireTransfer" /> class.
        /// </summary>
        /// <param name="acceptWireTransfer">Master flag indicating this merchant accepts wire transfers.</param>
        /// <param name="accountNumber">account_number.</param>
        /// <param name="accountingCode">Optional Quickbooks accounting code.</param>
        /// <param name="bankAddress">Bank address.</param>
        /// <param name="depositToAccount">Optional Quickbooks deposit to account.</param>
        /// <param name="intermediateRoutingNumber">Intermediate routing number.</param>
        /// <param name="restrictions">restrictions.</param>
        /// <param name="routingNumber">Routing number.</param>
        /// <param name="surchargeAccountingCode">If a surcharge is present and this merchant is integrated with Quickbooks, this is the accounting code for the surcharge amount.</param>
        /// <param name="surchargeFee">surcharge_fee.</param>
        /// <param name="surchargePercentage">surcharge_percentage.</param>
        public PaymentsConfigurationWireTransfer(bool? acceptWireTransfer = default(bool?), string accountNumber = default(string), string accountingCode = default(string), string bankAddress = default(string), string depositToAccount = default(string), string intermediateRoutingNumber = default(string), PaymentsConfigurationRestrictions restrictions = default(PaymentsConfigurationRestrictions), string routingNumber = default(string), string surchargeAccountingCode = default(string), string surchargeFee = default(string), string surchargePercentage = default(string))
        {
            this.AcceptWireTransfer = acceptWireTransfer;
            this.AccountNumber = accountNumber;
            this.AccountingCode = accountingCode;
            this.BankAddress = bankAddress;
            this.DepositToAccount = depositToAccount;
            this.IntermediateRoutingNumber = intermediateRoutingNumber;
            this.Restrictions = restrictions;
            this.RoutingNumber = routingNumber;
            this.SurchargeAccountingCode = surchargeAccountingCode;
            this.SurchargeFee = surchargeFee;
            this.SurchargePercentage = surchargePercentage;
        }
        
        /// <summary>
        /// Master flag indicating this merchant accepts wire transfers
        /// </summary>
        /// <value>Master flag indicating this merchant accepts wire transfers</value>
        [DataMember(Name="accept_wire_transfer", EmitDefaultValue=false)]
        public bool? AcceptWireTransfer { get; set; }

        /// <summary>
        /// account_number
        /// </summary>
        /// <value>account_number</value>
        [DataMember(Name="account_number", EmitDefaultValue=false)]
        public string AccountNumber { get; set; }

        /// <summary>
        /// Optional Quickbooks accounting code
        /// </summary>
        /// <value>Optional Quickbooks accounting code</value>
        [DataMember(Name="accounting_code", EmitDefaultValue=false)]
        public string AccountingCode { get; set; }

        /// <summary>
        /// Bank address
        /// </summary>
        /// <value>Bank address</value>
        [DataMember(Name="bank_address", EmitDefaultValue=false)]
        public string BankAddress { get; set; }

        /// <summary>
        /// Optional Quickbooks deposit to account
        /// </summary>
        /// <value>Optional Quickbooks deposit to account</value>
        [DataMember(Name="deposit_to_account", EmitDefaultValue=false)]
        public string DepositToAccount { get; set; }

        /// <summary>
        /// Intermediate routing number
        /// </summary>
        /// <value>Intermediate routing number</value>
        [DataMember(Name="intermediate_routing_number", EmitDefaultValue=false)]
        public string IntermediateRoutingNumber { get; set; }

        /// <summary>
        /// Gets or Sets Restrictions
        /// </summary>
        [DataMember(Name="restrictions", EmitDefaultValue=false)]
        public PaymentsConfigurationRestrictions Restrictions { get; set; }

        /// <summary>
        /// Routing number
        /// </summary>
        /// <value>Routing number</value>
        [DataMember(Name="routing_number", EmitDefaultValue=false)]
        public string RoutingNumber { get; set; }

        /// <summary>
        /// If a surcharge is present and this merchant is integrated with Quickbooks, this is the accounting code for the surcharge amount
        /// </summary>
        /// <value>If a surcharge is present and this merchant is integrated with Quickbooks, this is the accounting code for the surcharge amount</value>
        [DataMember(Name="surcharge_accounting_code", EmitDefaultValue=false)]
        public string SurchargeAccountingCode { get; set; }

        /// <summary>
        /// surcharge_fee
        /// </summary>
        /// <value>surcharge_fee</value>
        [DataMember(Name="surcharge_fee", EmitDefaultValue=false)]
        public string SurchargeFee { get; set; }

        /// <summary>
        /// surcharge_percentage
        /// </summary>
        /// <value>surcharge_percentage</value>
        [DataMember(Name="surcharge_percentage", EmitDefaultValue=false)]
        public string SurchargePercentage { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PaymentsConfigurationWireTransfer {\n");
            sb.Append("  AcceptWireTransfer: ").Append(AcceptWireTransfer).Append("\n");
            sb.Append("  AccountNumber: ").Append(AccountNumber).Append("\n");
            sb.Append("  AccountingCode: ").Append(AccountingCode).Append("\n");
            sb.Append("  BankAddress: ").Append(BankAddress).Append("\n");
            sb.Append("  DepositToAccount: ").Append(DepositToAccount).Append("\n");
            sb.Append("  IntermediateRoutingNumber: ").Append(IntermediateRoutingNumber).Append("\n");
            sb.Append("  Restrictions: ").Append(Restrictions).Append("\n");
            sb.Append("  RoutingNumber: ").Append(RoutingNumber).Append("\n");
            sb.Append("  SurchargeAccountingCode: ").Append(SurchargeAccountingCode).Append("\n");
            sb.Append("  SurchargeFee: ").Append(SurchargeFee).Append("\n");
            sb.Append("  SurchargePercentage: ").Append(SurchargePercentage).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PaymentsConfigurationWireTransfer);
        }

        /// <summary>
        /// Returns true if PaymentsConfigurationWireTransfer instances are equal
        /// </summary>
        /// <param name="input">Instance of PaymentsConfigurationWireTransfer to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PaymentsConfigurationWireTransfer input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.AcceptWireTransfer == input.AcceptWireTransfer ||
                    (this.AcceptWireTransfer != null &&
                    this.AcceptWireTransfer.Equals(input.AcceptWireTransfer))
                ) && 
                (
                    this.AccountNumber == input.AccountNumber ||
                    (this.AccountNumber != null &&
                    this.AccountNumber.Equals(input.AccountNumber))
                ) && 
                (
                    this.AccountingCode == input.AccountingCode ||
                    (this.AccountingCode != null &&
                    this.AccountingCode.Equals(input.AccountingCode))
                ) && 
                (
                    this.BankAddress == input.BankAddress ||
                    (this.BankAddress != null &&
                    this.BankAddress.Equals(input.BankAddress))
                ) && 
                (
                    this.DepositToAccount == input.DepositToAccount ||
                    (this.DepositToAccount != null &&
                    this.DepositToAccount.Equals(input.DepositToAccount))
                ) && 
                (
                    this.IntermediateRoutingNumber == input.IntermediateRoutingNumber ||
                    (this.IntermediateRoutingNumber != null &&
                    this.IntermediateRoutingNumber.Equals(input.IntermediateRoutingNumber))
                ) && 
                (
                    this.Restrictions == input.Restrictions ||
                    (this.Restrictions != null &&
                    this.Restrictions.Equals(input.Restrictions))
                ) && 
                (
                    this.RoutingNumber == input.RoutingNumber ||
                    (this.RoutingNumber != null &&
                    this.RoutingNumber.Equals(input.RoutingNumber))
                ) && 
                (
                    this.SurchargeAccountingCode == input.SurchargeAccountingCode ||
                    (this.SurchargeAccountingCode != null &&
                    this.SurchargeAccountingCode.Equals(input.SurchargeAccountingCode))
                ) && 
                (
                    this.SurchargeFee == input.SurchargeFee ||
                    (this.SurchargeFee != null &&
                    this.SurchargeFee.Equals(input.SurchargeFee))
                ) && 
                (
                    this.SurchargePercentage == input.SurchargePercentage ||
                    (this.SurchargePercentage != null &&
                    this.SurchargePercentage.Equals(input.SurchargePercentage))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AcceptWireTransfer != null)
                    hashCode = hashCode * 59 + this.AcceptWireTransfer.GetHashCode();
                if (this.AccountNumber != null)
                    hashCode = hashCode * 59 + this.AccountNumber.GetHashCode();
                if (this.AccountingCode != null)
                    hashCode = hashCode * 59 + this.AccountingCode.GetHashCode();
                if (this.BankAddress != null)
                    hashCode = hashCode * 59 + this.BankAddress.GetHashCode();
                if (this.DepositToAccount != null)
                    hashCode = hashCode * 59 + this.DepositToAccount.GetHashCode();
                if (this.IntermediateRoutingNumber != null)
                    hashCode = hashCode * 59 + this.IntermediateRoutingNumber.GetHashCode();
                if (this.Restrictions != null)
                    hashCode = hashCode * 59 + this.Restrictions.GetHashCode();
                if (this.RoutingNumber != null)
                    hashCode = hashCode * 59 + this.RoutingNumber.GetHashCode();
                if (this.SurchargeAccountingCode != null)
                    hashCode = hashCode * 59 + this.SurchargeAccountingCode.GetHashCode();
                if (this.SurchargeFee != null)
                    hashCode = hashCode * 59 + this.SurchargeFee.GetHashCode();
                if (this.SurchargePercentage != null)
                    hashCode = hashCode * 59 + this.SurchargePercentage.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
