/* 
 * UltraCart Rest API V2
 *
 * UltraCart REST API Version 2
 *
 * OpenAPI spec version: 2.0.0
 * Contact: support@ultracart.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = com.ultracart.admin.v2.Client.SwaggerDateConverter;

namespace com.ultracart.admin.v2.Model
{
    /// <summary>
    /// PaymentsThemeTransactionType
    /// </summary>
    [DataContract]
    public partial class PaymentsThemeTransactionType :  IEquatable<PaymentsThemeTransactionType>, IValidatableObject
    {
        /// <summary>
        /// The credit card transaction type for this theme
        /// </summary>
        /// <value>The credit card transaction type for this theme</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum CreditCardTransactionTypeEnum
        {
            
            /// <summary>
            /// Enum Andcapture for value: auth and capture
            /// </summary>
            [EnumMember(Value = "auth and capture")]
            Andcapture = 1,
            
            /// <summary>
            /// Enum Thencapture for value: auth then capture
            /// </summary>
            [EnumMember(Value = "auth then capture")]
            Thencapture = 2,
            
            /// <summary>
            /// Enum Only for value: auth only
            /// </summary>
            [EnumMember(Value = "auth only")]
            Only = 3
        }

        /// <summary>
        /// The credit card transaction type for this theme
        /// </summary>
        /// <value>The credit card transaction type for this theme</value>
        [DataMember(Name="credit_card_transaction_type", EmitDefaultValue=false)]
        public CreditCardTransactionTypeEnum? CreditCardTransactionType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="PaymentsThemeTransactionType" /> class.
        /// </summary>
        /// <param name="code">External human readable identifier for a theme.</param>
        /// <param name="creditCardTransactionType">The credit card transaction type for this theme.</param>
        /// <param name="screenBrandingThemeOid">Internal identifier for a theme.</param>
        public PaymentsThemeTransactionType(string code = default(string), CreditCardTransactionTypeEnum? creditCardTransactionType = default(CreditCardTransactionTypeEnum?), int? screenBrandingThemeOid = default(int?))
        {
            this.Code = code;
            this.CreditCardTransactionType = creditCardTransactionType;
            this.ScreenBrandingThemeOid = screenBrandingThemeOid;
        }
        
        /// <summary>
        /// External human readable identifier for a theme
        /// </summary>
        /// <value>External human readable identifier for a theme</value>
        [DataMember(Name="code", EmitDefaultValue=false)]
        public string Code { get; set; }


        /// <summary>
        /// Internal identifier for a theme
        /// </summary>
        /// <value>Internal identifier for a theme</value>
        [DataMember(Name="screen_branding_theme_oid", EmitDefaultValue=false)]
        public int? ScreenBrandingThemeOid { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PaymentsThemeTransactionType {\n");
            sb.Append("  Code: ").Append(Code).Append("\n");
            sb.Append("  CreditCardTransactionType: ").Append(CreditCardTransactionType).Append("\n");
            sb.Append("  ScreenBrandingThemeOid: ").Append(ScreenBrandingThemeOid).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PaymentsThemeTransactionType);
        }

        /// <summary>
        /// Returns true if PaymentsThemeTransactionType instances are equal
        /// </summary>
        /// <param name="input">Instance of PaymentsThemeTransactionType to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PaymentsThemeTransactionType input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Code == input.Code ||
                    (this.Code != null &&
                    this.Code.Equals(input.Code))
                ) && 
                (
                    this.CreditCardTransactionType == input.CreditCardTransactionType ||
                    (this.CreditCardTransactionType != null &&
                    this.CreditCardTransactionType.Equals(input.CreditCardTransactionType))
                ) && 
                (
                    this.ScreenBrandingThemeOid == input.ScreenBrandingThemeOid ||
                    (this.ScreenBrandingThemeOid != null &&
                    this.ScreenBrandingThemeOid.Equals(input.ScreenBrandingThemeOid))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Code != null)
                    hashCode = hashCode * 59 + this.Code.GetHashCode();
                if (this.CreditCardTransactionType != null)
                    hashCode = hashCode * 59 + this.CreditCardTransactionType.GetHashCode();
                if (this.ScreenBrandingThemeOid != null)
                    hashCode = hashCode * 59 + this.ScreenBrandingThemeOid.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
