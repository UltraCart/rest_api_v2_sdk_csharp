/*
 * UltraCart Rest API V2
 *
 * UltraCart REST API Version 2
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@ultracart.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = com.ultracart.admin.v2.Client.OpenAPIDateConverter;

namespace com.ultracart.admin.v2.Model
{
    /// <summary>
    /// PointOfSaleLocation
    /// </summary>
    [DataContract]
    public partial class PointOfSaleLocation :  IEquatable<PointOfSaleLocation>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PointOfSaleLocation" /> class.
        /// </summary>
        /// <param name="adddress2">Address line 2.</param>
        /// <param name="address1">Address line 1.</param>
        /// <param name="city">City.</param>
        /// <param name="country">Country.</param>
        /// <param name="distributionCenterCode">The distribution center code where inventory is reduced from for this sale..</param>
        /// <param name="externalId">External Id useful for syncing with a remote filesystem, this may be an MD5 hash or whatever suits your needs..</param>
        /// <param name="merchantId">Merchant ID that owns this location.</param>
        /// <param name="posLocationOid">Object identifier of the point of sale location..</param>
        /// <param name="postalCode">Postal code.</param>
        /// <param name="stateProvince">State/province.</param>
        public PointOfSaleLocation(string adddress2 = default(string), string address1 = default(string), string city = default(string), string country = default(string), string distributionCenterCode = default(string), string externalId = default(string), string merchantId = default(string), int posLocationOid = default(int), string postalCode = default(string), string stateProvince = default(string))
        {
            this.Adddress2 = adddress2;
            this.Address1 = address1;
            this.City = city;
            this.Country = country;
            this.DistributionCenterCode = distributionCenterCode;
            this.ExternalId = externalId;
            this.MerchantId = merchantId;
            this.PosLocationOid = posLocationOid;
            this.PostalCode = postalCode;
            this.StateProvince = stateProvince;
        }

        /// <summary>
        /// Address line 2
        /// </summary>
        /// <value>Address line 2</value>
        [DataMember(Name="adddress2", EmitDefaultValue=false)]
        public string Adddress2 { get; set; }

        /// <summary>
        /// Address line 1
        /// </summary>
        /// <value>Address line 1</value>
        [DataMember(Name="address1", EmitDefaultValue=false)]
        public string Address1 { get; set; }

        /// <summary>
        /// City
        /// </summary>
        /// <value>City</value>
        [DataMember(Name="city", EmitDefaultValue=false)]
        public string City { get; set; }

        /// <summary>
        /// Country
        /// </summary>
        /// <value>Country</value>
        [DataMember(Name="country", EmitDefaultValue=false)]
        public string Country { get; set; }

        /// <summary>
        /// The distribution center code where inventory is reduced from for this sale.
        /// </summary>
        /// <value>The distribution center code where inventory is reduced from for this sale.</value>
        [DataMember(Name="distribution_center_code", EmitDefaultValue=false)]
        public string DistributionCenterCode { get; set; }

        /// <summary>
        /// External Id useful for syncing with a remote filesystem, this may be an MD5 hash or whatever suits your needs.
        /// </summary>
        /// <value>External Id useful for syncing with a remote filesystem, this may be an MD5 hash or whatever suits your needs.</value>
        [DataMember(Name="external_id", EmitDefaultValue=false)]
        public string ExternalId { get; set; }

        /// <summary>
        /// Merchant ID that owns this location
        /// </summary>
        /// <value>Merchant ID that owns this location</value>
        [DataMember(Name="merchant_id", EmitDefaultValue=false)]
        public string MerchantId { get; set; }

        /// <summary>
        /// Object identifier of the point of sale location.
        /// </summary>
        /// <value>Object identifier of the point of sale location.</value>
        [DataMember(Name="pos_location_oid", EmitDefaultValue=false)]
        public int PosLocationOid { get; set; }

        /// <summary>
        /// Postal code
        /// </summary>
        /// <value>Postal code</value>
        [DataMember(Name="postal_code", EmitDefaultValue=false)]
        public string PostalCode { get; set; }

        /// <summary>
        /// State/province
        /// </summary>
        /// <value>State/province</value>
        [DataMember(Name="state_province", EmitDefaultValue=false)]
        public string StateProvince { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PointOfSaleLocation {\n");
            sb.Append("  Adddress2: ").Append(Adddress2).Append("\n");
            sb.Append("  Address1: ").Append(Address1).Append("\n");
            sb.Append("  City: ").Append(City).Append("\n");
            sb.Append("  Country: ").Append(Country).Append("\n");
            sb.Append("  DistributionCenterCode: ").Append(DistributionCenterCode).Append("\n");
            sb.Append("  ExternalId: ").Append(ExternalId).Append("\n");
            sb.Append("  MerchantId: ").Append(MerchantId).Append("\n");
            sb.Append("  PosLocationOid: ").Append(PosLocationOid).Append("\n");
            sb.Append("  PostalCode: ").Append(PostalCode).Append("\n");
            sb.Append("  StateProvince: ").Append(StateProvince).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PointOfSaleLocation);
        }

        /// <summary>
        /// Returns true if PointOfSaleLocation instances are equal
        /// </summary>
        /// <param name="input">Instance of PointOfSaleLocation to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PointOfSaleLocation input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Adddress2 == input.Adddress2 ||
                    (this.Adddress2 != null &&
                    this.Adddress2.Equals(input.Adddress2))
                ) && 
                (
                    this.Address1 == input.Address1 ||
                    (this.Address1 != null &&
                    this.Address1.Equals(input.Address1))
                ) && 
                (
                    this.City == input.City ||
                    (this.City != null &&
                    this.City.Equals(input.City))
                ) && 
                (
                    this.Country == input.Country ||
                    (this.Country != null &&
                    this.Country.Equals(input.Country))
                ) && 
                (
                    this.DistributionCenterCode == input.DistributionCenterCode ||
                    (this.DistributionCenterCode != null &&
                    this.DistributionCenterCode.Equals(input.DistributionCenterCode))
                ) && 
                (
                    this.ExternalId == input.ExternalId ||
                    (this.ExternalId != null &&
                    this.ExternalId.Equals(input.ExternalId))
                ) && 
                (
                    this.MerchantId == input.MerchantId ||
                    (this.MerchantId != null &&
                    this.MerchantId.Equals(input.MerchantId))
                ) && 
                (
                    this.PosLocationOid == input.PosLocationOid ||
                    (this.PosLocationOid != null &&
                    this.PosLocationOid.Equals(input.PosLocationOid))
                ) && 
                (
                    this.PostalCode == input.PostalCode ||
                    (this.PostalCode != null &&
                    this.PostalCode.Equals(input.PostalCode))
                ) && 
                (
                    this.StateProvince == input.StateProvince ||
                    (this.StateProvince != null &&
                    this.StateProvince.Equals(input.StateProvince))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Adddress2 != null)
                    hashCode = hashCode * 59 + this.Adddress2.GetHashCode();
                if (this.Address1 != null)
                    hashCode = hashCode * 59 + this.Address1.GetHashCode();
                if (this.City != null)
                    hashCode = hashCode * 59 + this.City.GetHashCode();
                if (this.Country != null)
                    hashCode = hashCode * 59 + this.Country.GetHashCode();
                if (this.DistributionCenterCode != null)
                    hashCode = hashCode * 59 + this.DistributionCenterCode.GetHashCode();
                if (this.ExternalId != null)
                    hashCode = hashCode * 59 + this.ExternalId.GetHashCode();
                if (this.MerchantId != null)
                    hashCode = hashCode * 59 + this.MerchantId.GetHashCode();
                if (this.PosLocationOid != null)
                    hashCode = hashCode * 59 + this.PosLocationOid.GetHashCode();
                if (this.PostalCode != null)
                    hashCode = hashCode * 59 + this.PostalCode.GetHashCode();
                if (this.StateProvince != null)
                    hashCode = hashCode * 59 + this.StateProvince.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // ExternalId (string) maxLength
            if(this.ExternalId != null && this.ExternalId.Length > 100)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ExternalId, length must be less than 100.", new [] { "ExternalId" });
            }


            yield break;
        }
    }

}
