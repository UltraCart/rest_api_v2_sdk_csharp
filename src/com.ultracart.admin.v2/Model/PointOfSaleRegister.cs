/*
 * UltraCart Rest API V2
 *
 * UltraCart REST API Version 2
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@ultracart.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = com.ultracart.admin.v2.Client.OpenAPIDateConverter;

namespace com.ultracart.admin.v2.Model
{
    /// <summary>
    /// PointOfSaleRegister
    /// </summary>
    [DataContract]
    public partial class PointOfSaleRegister :  IEquatable<PointOfSaleRegister>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PointOfSaleRegister" /> class.
        /// </summary>
        /// <param name="merchantId">The merchant id that owns this point of sale register..</param>
        /// <param name="name">Name of the register..</param>
        /// <param name="posLocationOid">Object identifier of the point of sale location where this register is located..</param>
        /// <param name="posRegisterOid">Object identifier of the point of sale register..</param>
        public PointOfSaleRegister(string merchantId = default(string), string name = default(string), int posLocationOid = default(int), int posRegisterOid = default(int))
        {
            this.MerchantId = merchantId;
            this.Name = name;
            this.PosLocationOid = posLocationOid;
            this.PosRegisterOid = posRegisterOid;
        }

        /// <summary>
        /// The merchant id that owns this point of sale register.
        /// </summary>
        /// <value>The merchant id that owns this point of sale register.</value>
        [DataMember(Name="merchant_id", EmitDefaultValue=false)]
        public string MerchantId { get; set; }

        /// <summary>
        /// Name of the register.
        /// </summary>
        /// <value>Name of the register.</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Object identifier of the point of sale location where this register is located.
        /// </summary>
        /// <value>Object identifier of the point of sale location where this register is located.</value>
        [DataMember(Name="pos_location_oid", EmitDefaultValue=false)]
        public int PosLocationOid { get; set; }

        /// <summary>
        /// Object identifier of the point of sale register.
        /// </summary>
        /// <value>Object identifier of the point of sale register.</value>
        [DataMember(Name="pos_register_oid", EmitDefaultValue=false)]
        public int PosRegisterOid { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PointOfSaleRegister {\n");
            sb.Append("  MerchantId: ").Append(MerchantId).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  PosLocationOid: ").Append(PosLocationOid).Append("\n");
            sb.Append("  PosRegisterOid: ").Append(PosRegisterOid).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PointOfSaleRegister);
        }

        /// <summary>
        /// Returns true if PointOfSaleRegister instances are equal
        /// </summary>
        /// <param name="input">Instance of PointOfSaleRegister to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PointOfSaleRegister input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.MerchantId == input.MerchantId ||
                    (this.MerchantId != null &&
                    this.MerchantId.Equals(input.MerchantId))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.PosLocationOid == input.PosLocationOid ||
                    (this.PosLocationOid != null &&
                    this.PosLocationOid.Equals(input.PosLocationOid))
                ) && 
                (
                    this.PosRegisterOid == input.PosRegisterOid ||
                    (this.PosRegisterOid != null &&
                    this.PosRegisterOid.Equals(input.PosRegisterOid))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.MerchantId != null)
                    hashCode = hashCode * 59 + this.MerchantId.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.PosLocationOid != null)
                    hashCode = hashCode * 59 + this.PosLocationOid.GetHashCode();
                if (this.PosRegisterOid != null)
                    hashCode = hashCode * 59 + this.PosRegisterOid.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
