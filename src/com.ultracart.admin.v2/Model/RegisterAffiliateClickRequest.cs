/*
 * UltraCart Rest API V2
 *
 * UltraCart REST API Version 2
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@ultracart.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = com.ultracart.admin.v2.Client.OpenAPIDateConverter;

namespace com.ultracart.admin.v2.Model
{
    /// <summary>
    /// RegisterAffiliateClickRequest
    /// </summary>
    [DataContract]
    public partial class RegisterAffiliateClickRequest :  IEquatable<RegisterAffiliateClickRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="RegisterAffiliateClickRequest" /> class.
        /// </summary>
        /// <param name="affid">Affiliate Id (must be specified if landing_page_url is not).</param>
        /// <param name="ipAddress">IP Address (must be specified for non-browser key authenticated).</param>
        /// <param name="landingPageUrl">Landing Page URL.</param>
        /// <param name="referrerUrl">Referrer URL (used for detecting invisible linking).</param>
        /// <param name="subid">Sub Id (optional value if affid is specified..</param>
        /// <param name="userAgent">User agent of the browser (must be specified for non-browser key authenticated).</param>
        public RegisterAffiliateClickRequest(int affid = default(int), string ipAddress = default(string), string landingPageUrl = default(string), string referrerUrl = default(string), string subid = default(string), string userAgent = default(string))
        {
            this.Affid = affid;
            this.IpAddress = ipAddress;
            this.LandingPageUrl = landingPageUrl;
            this.ReferrerUrl = referrerUrl;
            this.Subid = subid;
            this.UserAgent = userAgent;
        }

        /// <summary>
        /// Affiliate Id (must be specified if landing_page_url is not)
        /// </summary>
        /// <value>Affiliate Id (must be specified if landing_page_url is not)</value>
        [DataMember(Name="affid", EmitDefaultValue=false)]
        public int Affid { get; set; }

        /// <summary>
        /// IP Address (must be specified for non-browser key authenticated)
        /// </summary>
        /// <value>IP Address (must be specified for non-browser key authenticated)</value>
        [DataMember(Name="ip_address", EmitDefaultValue=false)]
        public string IpAddress { get; set; }

        /// <summary>
        /// Landing Page URL
        /// </summary>
        /// <value>Landing Page URL</value>
        [DataMember(Name="landing_page_url", EmitDefaultValue=false)]
        public string LandingPageUrl { get; set; }

        /// <summary>
        /// Referrer URL (used for detecting invisible linking)
        /// </summary>
        /// <value>Referrer URL (used for detecting invisible linking)</value>
        [DataMember(Name="referrer_url", EmitDefaultValue=false)]
        public string ReferrerUrl { get; set; }

        /// <summary>
        /// Sub Id (optional value if affid is specified.
        /// </summary>
        /// <value>Sub Id (optional value if affid is specified.</value>
        [DataMember(Name="subid", EmitDefaultValue=false)]
        public string Subid { get; set; }

        /// <summary>
        /// User agent of the browser (must be specified for non-browser key authenticated)
        /// </summary>
        /// <value>User agent of the browser (must be specified for non-browser key authenticated)</value>
        [DataMember(Name="user_agent", EmitDefaultValue=false)]
        public string UserAgent { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class RegisterAffiliateClickRequest {\n");
            sb.Append("  Affid: ").Append(Affid).Append("\n");
            sb.Append("  IpAddress: ").Append(IpAddress).Append("\n");
            sb.Append("  LandingPageUrl: ").Append(LandingPageUrl).Append("\n");
            sb.Append("  ReferrerUrl: ").Append(ReferrerUrl).Append("\n");
            sb.Append("  Subid: ").Append(Subid).Append("\n");
            sb.Append("  UserAgent: ").Append(UserAgent).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as RegisterAffiliateClickRequest);
        }

        /// <summary>
        /// Returns true if RegisterAffiliateClickRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of RegisterAffiliateClickRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(RegisterAffiliateClickRequest input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Affid == input.Affid ||
                    (this.Affid != null &&
                    this.Affid.Equals(input.Affid))
                ) && 
                (
                    this.IpAddress == input.IpAddress ||
                    (this.IpAddress != null &&
                    this.IpAddress.Equals(input.IpAddress))
                ) && 
                (
                    this.LandingPageUrl == input.LandingPageUrl ||
                    (this.LandingPageUrl != null &&
                    this.LandingPageUrl.Equals(input.LandingPageUrl))
                ) && 
                (
                    this.ReferrerUrl == input.ReferrerUrl ||
                    (this.ReferrerUrl != null &&
                    this.ReferrerUrl.Equals(input.ReferrerUrl))
                ) && 
                (
                    this.Subid == input.Subid ||
                    (this.Subid != null &&
                    this.Subid.Equals(input.Subid))
                ) && 
                (
                    this.UserAgent == input.UserAgent ||
                    (this.UserAgent != null &&
                    this.UserAgent.Equals(input.UserAgent))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Affid != null)
                    hashCode = hashCode * 59 + this.Affid.GetHashCode();
                if (this.IpAddress != null)
                    hashCode = hashCode * 59 + this.IpAddress.GetHashCode();
                if (this.LandingPageUrl != null)
                    hashCode = hashCode * 59 + this.LandingPageUrl.GetHashCode();
                if (this.ReferrerUrl != null)
                    hashCode = hashCode * 59 + this.ReferrerUrl.GetHashCode();
                if (this.Subid != null)
                    hashCode = hashCode * 59 + this.Subid.GetHashCode();
                if (this.UserAgent != null)
                    hashCode = hashCode * 59 + this.UserAgent.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
