/* 
 * UltraCart Rest API V2
 *
 * UltraCart REST API Version 2
 *
 * OpenAPI spec version: 2.0.0
 * Contact: support@ultracart.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = com.ultracart.admin.v2.Client.SwaggerDateConverter;

namespace com.ultracart.admin.v2.Model
{
    /// <summary>
    /// ReplaceOrderItemIdRequest
    /// </summary>
    [DataContract]
    public partial class ReplaceOrderItemIdRequest :  IEquatable<ReplaceOrderItemIdRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ReplaceOrderItemIdRequest" /> class.
        /// </summary>
        /// <param name="itemIndex">Index of the item on the order (one based index).</param>
        /// <param name="merchantItemId">Item ID.</param>
        /// <param name="orderId">Order ID.</param>
        /// <param name="replacementMerchantItemId">Replacement Item ID.</param>
        public ReplaceOrderItemIdRequest(int? itemIndex = default(int?), string merchantItemId = default(string), string orderId = default(string), string replacementMerchantItemId = default(string))
        {
            this.ItemIndex = itemIndex;
            this.MerchantItemId = merchantItemId;
            this.OrderId = orderId;
            this.ReplacementMerchantItemId = replacementMerchantItemId;
        }
        
        /// <summary>
        /// Index of the item on the order (one based index)
        /// </summary>
        /// <value>Index of the item on the order (one based index)</value>
        [DataMember(Name="item_index", EmitDefaultValue=false)]
        public int? ItemIndex { get; set; }

        /// <summary>
        /// Item ID
        /// </summary>
        /// <value>Item ID</value>
        [DataMember(Name="merchant_item_id", EmitDefaultValue=false)]
        public string MerchantItemId { get; set; }

        /// <summary>
        /// Order ID
        /// </summary>
        /// <value>Order ID</value>
        [DataMember(Name="order_id", EmitDefaultValue=false)]
        public string OrderId { get; set; }

        /// <summary>
        /// Replacement Item ID
        /// </summary>
        /// <value>Replacement Item ID</value>
        [DataMember(Name="replacement_merchant_item_id", EmitDefaultValue=false)]
        public string ReplacementMerchantItemId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ReplaceOrderItemIdRequest {\n");
            sb.Append("  ItemIndex: ").Append(ItemIndex).Append("\n");
            sb.Append("  MerchantItemId: ").Append(MerchantItemId).Append("\n");
            sb.Append("  OrderId: ").Append(OrderId).Append("\n");
            sb.Append("  ReplacementMerchantItemId: ").Append(ReplacementMerchantItemId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ReplaceOrderItemIdRequest);
        }

        /// <summary>
        /// Returns true if ReplaceOrderItemIdRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of ReplaceOrderItemIdRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ReplaceOrderItemIdRequest input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ItemIndex == input.ItemIndex ||
                    (this.ItemIndex != null &&
                    this.ItemIndex.Equals(input.ItemIndex))
                ) && 
                (
                    this.MerchantItemId == input.MerchantItemId ||
                    (this.MerchantItemId != null &&
                    this.MerchantItemId.Equals(input.MerchantItemId))
                ) && 
                (
                    this.OrderId == input.OrderId ||
                    (this.OrderId != null &&
                    this.OrderId.Equals(input.OrderId))
                ) && 
                (
                    this.ReplacementMerchantItemId == input.ReplacementMerchantItemId ||
                    (this.ReplacementMerchantItemId != null &&
                    this.ReplacementMerchantItemId.Equals(input.ReplacementMerchantItemId))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ItemIndex != null)
                    hashCode = hashCode * 59 + this.ItemIndex.GetHashCode();
                if (this.MerchantItemId != null)
                    hashCode = hashCode * 59 + this.MerchantItemId.GetHashCode();
                if (this.OrderId != null)
                    hashCode = hashCode * 59 + this.OrderId.GetHashCode();
                if (this.ReplacementMerchantItemId != null)
                    hashCode = hashCode * 59 + this.ReplacementMerchantItemId.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // MerchantItemId (string) maxLength
            if(this.MerchantItemId != null && this.MerchantItemId.Length > 20)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for MerchantItemId, length must be less than 20.", new [] { "MerchantItemId" });
            }

            // ReplacementMerchantItemId (string) maxLength
            if(this.ReplacementMerchantItemId != null && this.ReplacementMerchantItemId.Length > 20)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ReplacementMerchantItemId, length must be less than 20.", new [] { "ReplacementMerchantItemId" });
            }

            yield break;
        }
    }

}
