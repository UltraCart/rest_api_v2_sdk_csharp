/*
 * UltraCart Rest API V2
 *
 * UltraCart REST API Version 2
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@ultracart.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = com.ultracart.admin.v2.Client.OpenAPIDateConverter;

namespace com.ultracart.admin.v2.Model
{
    /// <summary>
    /// ReportDataSetPage
    /// </summary>
    [DataContract]
    public partial class ReportDataSetPage :  IEquatable<ReportDataSetPage>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ReportDataSetPage" /> class.
        /// </summary>
        /// <param name="dataSetUuid">A unique identifier assigned to the data set that is returned..</param>
        /// <param name="merchantId">Merchant that owns this data set.</param>
        /// <param name="nextPageToken">nextPageToken.</param>
        /// <param name="nextStartIndex">nextStartIndex.</param>
        /// <param name="pageNumber">pageNumber.</param>
        /// <param name="rowCount">rowCount.</param>
        /// <param name="rows">Rows returned for the data set.</param>
        /// <param name="rowsS3Url">Signed S3 URL where the page rows can be downloaded from.</param>
        /// <param name="startIndex">Zero based index of the starting row.</param>
        /// <param name="tableId">The BigQuery destination table id that contains the result..</param>
        public ReportDataSetPage(string dataSetUuid = default(string), string merchantId = default(string), string nextPageToken = default(string), int nextStartIndex = default(int), int pageNumber = default(int), int rowCount = default(int), List<ReportDataSetRow> rows = default(List<ReportDataSetRow>), string rowsS3Url = default(string), int startIndex = default(int), string tableId = default(string))
        {
            this.DataSetUuid = dataSetUuid;
            this.MerchantId = merchantId;
            this.NextPageToken = nextPageToken;
            this.NextStartIndex = nextStartIndex;
            this.PageNumber = pageNumber;
            this.RowCount = rowCount;
            this.Rows = rows;
            this.RowsS3Url = rowsS3Url;
            this.StartIndex = startIndex;
            this.TableId = tableId;
        }

        /// <summary>
        /// A unique identifier assigned to the data set that is returned.
        /// </summary>
        /// <value>A unique identifier assigned to the data set that is returned.</value>
        [DataMember(Name="data_set_uuid", EmitDefaultValue=false)]
        public string DataSetUuid { get; set; }

        /// <summary>
        /// Merchant that owns this data set
        /// </summary>
        /// <value>Merchant that owns this data set</value>
        [DataMember(Name="merchant_id", EmitDefaultValue=false)]
        public string MerchantId { get; set; }

        /// <summary>
        /// Gets or Sets NextPageToken
        /// </summary>
        [DataMember(Name="next_page_token", EmitDefaultValue=false)]
        public string NextPageToken { get; set; }

        /// <summary>
        /// Gets or Sets NextStartIndex
        /// </summary>
        [DataMember(Name="next_start_index", EmitDefaultValue=false)]
        public int NextStartIndex { get; set; }

        /// <summary>
        /// Gets or Sets PageNumber
        /// </summary>
        [DataMember(Name="page_number", EmitDefaultValue=false)]
        public int PageNumber { get; set; }

        /// <summary>
        /// Gets or Sets RowCount
        /// </summary>
        [DataMember(Name="row_count", EmitDefaultValue=false)]
        public int RowCount { get; set; }

        /// <summary>
        /// Rows returned for the data set
        /// </summary>
        /// <value>Rows returned for the data set</value>
        [DataMember(Name="rows", EmitDefaultValue=false)]
        public List<ReportDataSetRow> Rows { get; set; }

        /// <summary>
        /// Signed S3 URL where the page rows can be downloaded from
        /// </summary>
        /// <value>Signed S3 URL where the page rows can be downloaded from</value>
        [DataMember(Name="rows_s3_url", EmitDefaultValue=false)]
        public string RowsS3Url { get; set; }

        /// <summary>
        /// Zero based index of the starting row
        /// </summary>
        /// <value>Zero based index of the starting row</value>
        [DataMember(Name="start_index", EmitDefaultValue=false)]
        public int StartIndex { get; set; }

        /// <summary>
        /// The BigQuery destination table id that contains the result.
        /// </summary>
        /// <value>The BigQuery destination table id that contains the result.</value>
        [DataMember(Name="table_id", EmitDefaultValue=false)]
        public string TableId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ReportDataSetPage {\n");
            sb.Append("  DataSetUuid: ").Append(DataSetUuid).Append("\n");
            sb.Append("  MerchantId: ").Append(MerchantId).Append("\n");
            sb.Append("  NextPageToken: ").Append(NextPageToken).Append("\n");
            sb.Append("  NextStartIndex: ").Append(NextStartIndex).Append("\n");
            sb.Append("  PageNumber: ").Append(PageNumber).Append("\n");
            sb.Append("  RowCount: ").Append(RowCount).Append("\n");
            sb.Append("  Rows: ").Append(Rows).Append("\n");
            sb.Append("  RowsS3Url: ").Append(RowsS3Url).Append("\n");
            sb.Append("  StartIndex: ").Append(StartIndex).Append("\n");
            sb.Append("  TableId: ").Append(TableId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ReportDataSetPage);
        }

        /// <summary>
        /// Returns true if ReportDataSetPage instances are equal
        /// </summary>
        /// <param name="input">Instance of ReportDataSetPage to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ReportDataSetPage input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.DataSetUuid == input.DataSetUuid ||
                    (this.DataSetUuid != null &&
                    this.DataSetUuid.Equals(input.DataSetUuid))
                ) && 
                (
                    this.MerchantId == input.MerchantId ||
                    (this.MerchantId != null &&
                    this.MerchantId.Equals(input.MerchantId))
                ) && 
                (
                    this.NextPageToken == input.NextPageToken ||
                    (this.NextPageToken != null &&
                    this.NextPageToken.Equals(input.NextPageToken))
                ) && 
                (
                    this.NextStartIndex == input.NextStartIndex ||
                    (this.NextStartIndex != null &&
                    this.NextStartIndex.Equals(input.NextStartIndex))
                ) && 
                (
                    this.PageNumber == input.PageNumber ||
                    (this.PageNumber != null &&
                    this.PageNumber.Equals(input.PageNumber))
                ) && 
                (
                    this.RowCount == input.RowCount ||
                    (this.RowCount != null &&
                    this.RowCount.Equals(input.RowCount))
                ) && 
                (
                    this.Rows == input.Rows ||
                    this.Rows != null &&
                    input.Rows != null &&
                    this.Rows.SequenceEqual(input.Rows)
                ) && 
                (
                    this.RowsS3Url == input.RowsS3Url ||
                    (this.RowsS3Url != null &&
                    this.RowsS3Url.Equals(input.RowsS3Url))
                ) && 
                (
                    this.StartIndex == input.StartIndex ||
                    (this.StartIndex != null &&
                    this.StartIndex.Equals(input.StartIndex))
                ) && 
                (
                    this.TableId == input.TableId ||
                    (this.TableId != null &&
                    this.TableId.Equals(input.TableId))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.DataSetUuid != null)
                    hashCode = hashCode * 59 + this.DataSetUuid.GetHashCode();
                if (this.MerchantId != null)
                    hashCode = hashCode * 59 + this.MerchantId.GetHashCode();
                if (this.NextPageToken != null)
                    hashCode = hashCode * 59 + this.NextPageToken.GetHashCode();
                if (this.NextStartIndex != null)
                    hashCode = hashCode * 59 + this.NextStartIndex.GetHashCode();
                if (this.PageNumber != null)
                    hashCode = hashCode * 59 + this.PageNumber.GetHashCode();
                if (this.RowCount != null)
                    hashCode = hashCode * 59 + this.RowCount.GetHashCode();
                if (this.Rows != null)
                    hashCode = hashCode * 59 + this.Rows.GetHashCode();
                if (this.RowsS3Url != null)
                    hashCode = hashCode * 59 + this.RowsS3Url.GetHashCode();
                if (this.StartIndex != null)
                    hashCode = hashCode * 59 + this.StartIndex.GetHashCode();
                if (this.TableId != null)
                    hashCode = hashCode * 59 + this.TableId.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
