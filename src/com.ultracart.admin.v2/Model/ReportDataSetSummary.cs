/* 
 * UltraCart Rest API V2
 *
 * UltraCart REST API Version 2
 *
 * OpenAPI spec version: 2.0.0
 * Contact: support@ultracart.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = com.ultracart.admin.v2.Client.SwaggerDateConverter;

namespace com.ultracart.admin.v2.Model
{
    /// <summary>
    /// ReportDataSetSummary
    /// </summary>
    [DataContract]
    public partial class ReportDataSetSummary :  IEquatable<ReportDataSetSummary>, IValidatableObject
    {
        /// <summary>
        /// The type of object this data set is for
        /// </summary>
        /// <value>The type of object this data set is for</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ForObjectTypeEnum
        {
            
            /// <summary>
            /// Enum Schema for value: schema
            /// </summary>
            [EnumMember(Value = "schema")]
            Schema = 1,
            
            /// <summary>
            /// Enum Filter for value: filter
            /// </summary>
            [EnumMember(Value = "filter")]
            Filter = 2,
            
            /// <summary>
            /// Enum Visualization for value: visualization
            /// </summary>
            [EnumMember(Value = "visualization")]
            Visualization = 3
        }

        /// <summary>
        /// The type of object this data set is for
        /// </summary>
        /// <value>The type of object this data set is for</value>
        [DataMember(Name="for_object_type", EmitDefaultValue=false)]
        public ForObjectTypeEnum? ForObjectType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="ReportDataSetSummary" /> class.
        /// </summary>
        /// <param name="dataSetUuid">A unique identifier assigned to the data set that is returned..</param>
        /// <param name="errorMessage">Error message if the query failed..</param>
        /// <param name="forObjectId">An identifier that can be used to help match up the returned data set.</param>
        /// <param name="forObjectType">The type of object this data set is for.</param>
        /// <param name="maxResults">The total number of results.</param>
        /// <param name="schema">The schema associated with the data set..</param>
        /// <param name="userData">Any other data that needs to be returned with the response to help the UI.</param>
        public ReportDataSetSummary(string dataSetUuid = default(string), string errorMessage = default(string), string forObjectId = default(string), ForObjectTypeEnum? forObjectType = default(ForObjectTypeEnum?), int? maxResults = default(int?), List<ReportDataSetSchema> schema = default(List<ReportDataSetSchema>), string userData = default(string))
        {
            this.DataSetUuid = dataSetUuid;
            this.ErrorMessage = errorMessage;
            this.ForObjectId = forObjectId;
            this.ForObjectType = forObjectType;
            this.MaxResults = maxResults;
            this.Schema = schema;
            this.UserData = userData;
        }
        
        /// <summary>
        /// A unique identifier assigned to the data set that is returned.
        /// </summary>
        /// <value>A unique identifier assigned to the data set that is returned.</value>
        [DataMember(Name="data_set_uuid", EmitDefaultValue=false)]
        public string DataSetUuid { get; set; }

        /// <summary>
        /// Error message if the query failed.
        /// </summary>
        /// <value>Error message if the query failed.</value>
        [DataMember(Name="error_message", EmitDefaultValue=false)]
        public string ErrorMessage { get; set; }

        /// <summary>
        /// An identifier that can be used to help match up the returned data set
        /// </summary>
        /// <value>An identifier that can be used to help match up the returned data set</value>
        [DataMember(Name="for_object_id", EmitDefaultValue=false)]
        public string ForObjectId { get; set; }


        /// <summary>
        /// The total number of results
        /// </summary>
        /// <value>The total number of results</value>
        [DataMember(Name="max_results", EmitDefaultValue=false)]
        public int? MaxResults { get; set; }

        /// <summary>
        /// The schema associated with the data set.
        /// </summary>
        /// <value>The schema associated with the data set.</value>
        [DataMember(Name="schema", EmitDefaultValue=false)]
        public List<ReportDataSetSchema> Schema { get; set; }

        /// <summary>
        /// Any other data that needs to be returned with the response to help the UI
        /// </summary>
        /// <value>Any other data that needs to be returned with the response to help the UI</value>
        [DataMember(Name="user_data", EmitDefaultValue=false)]
        public string UserData { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ReportDataSetSummary {\n");
            sb.Append("  DataSetUuid: ").Append(DataSetUuid).Append("\n");
            sb.Append("  ErrorMessage: ").Append(ErrorMessage).Append("\n");
            sb.Append("  ForObjectId: ").Append(ForObjectId).Append("\n");
            sb.Append("  ForObjectType: ").Append(ForObjectType).Append("\n");
            sb.Append("  MaxResults: ").Append(MaxResults).Append("\n");
            sb.Append("  Schema: ").Append(Schema).Append("\n");
            sb.Append("  UserData: ").Append(UserData).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ReportDataSetSummary);
        }

        /// <summary>
        /// Returns true if ReportDataSetSummary instances are equal
        /// </summary>
        /// <param name="input">Instance of ReportDataSetSummary to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ReportDataSetSummary input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.DataSetUuid == input.DataSetUuid ||
                    (this.DataSetUuid != null &&
                    this.DataSetUuid.Equals(input.DataSetUuid))
                ) && 
                (
                    this.ErrorMessage == input.ErrorMessage ||
                    (this.ErrorMessage != null &&
                    this.ErrorMessage.Equals(input.ErrorMessage))
                ) && 
                (
                    this.ForObjectId == input.ForObjectId ||
                    (this.ForObjectId != null &&
                    this.ForObjectId.Equals(input.ForObjectId))
                ) && 
                (
                    this.ForObjectType == input.ForObjectType ||
                    (this.ForObjectType != null &&
                    this.ForObjectType.Equals(input.ForObjectType))
                ) && 
                (
                    this.MaxResults == input.MaxResults ||
                    (this.MaxResults != null &&
                    this.MaxResults.Equals(input.MaxResults))
                ) && 
                (
                    this.Schema == input.Schema ||
                    this.Schema != null &&
                    this.Schema.SequenceEqual(input.Schema)
                ) && 
                (
                    this.UserData == input.UserData ||
                    (this.UserData != null &&
                    this.UserData.Equals(input.UserData))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.DataSetUuid != null)
                    hashCode = hashCode * 59 + this.DataSetUuid.GetHashCode();
                if (this.ErrorMessage != null)
                    hashCode = hashCode * 59 + this.ErrorMessage.GetHashCode();
                if (this.ForObjectId != null)
                    hashCode = hashCode * 59 + this.ForObjectId.GetHashCode();
                if (this.ForObjectType != null)
                    hashCode = hashCode * 59 + this.ForObjectType.GetHashCode();
                if (this.MaxResults != null)
                    hashCode = hashCode * 59 + this.MaxResults.GetHashCode();
                if (this.Schema != null)
                    hashCode = hashCode * 59 + this.Schema.GetHashCode();
                if (this.UserData != null)
                    hashCode = hashCode * 59 + this.UserData.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
