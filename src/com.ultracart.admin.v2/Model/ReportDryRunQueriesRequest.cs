/* 
 * UltraCart Rest API V2
 *
 * UltraCart REST API Version 2
 *
 * OpenAPI spec version: 2.0.0
 * Contact: support@ultracart.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = com.ultracart.admin.v2.Client.SwaggerDateConverter;

namespace com.ultracart.admin.v2.Model
{
    /// <summary>
    /// ReportDryRunQueriesRequest
    /// </summary>
    [DataContract]
    public partial class ReportDryRunQueriesRequest :  IEquatable<ReportDryRunQueriesRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ReportDryRunQueriesRequest" /> class.
        /// </summary>
        /// <param name="connectionId">connectionId.</param>
        /// <param name="defaultDatasetId">defaultDatasetId.</param>
        /// <param name="defaultProjectId">defaultProjectId.</param>
        /// <param name="merchantId">merchantId.</param>
        /// <param name="queries">queries.</param>
        /// <param name="securityLevel">securityLevel.</param>
        public ReportDryRunQueriesRequest(string connectionId = default(string), string defaultDatasetId = default(string), string defaultProjectId = default(string), string merchantId = default(string), List<ReportDataSetQuery> queries = default(List<ReportDataSetQuery>), string securityLevel = default(string))
        {
            this.ConnectionId = connectionId;
            this.DefaultDatasetId = defaultDatasetId;
            this.DefaultProjectId = defaultProjectId;
            this.MerchantId = merchantId;
            this.Queries = queries;
            this.SecurityLevel = securityLevel;
        }
        
        /// <summary>
        /// Gets or Sets ConnectionId
        /// </summary>
        [DataMember(Name="connection_id", EmitDefaultValue=false)]
        public string ConnectionId { get; set; }

        /// <summary>
        /// Gets or Sets DefaultDatasetId
        /// </summary>
        [DataMember(Name="default_dataset_id", EmitDefaultValue=false)]
        public string DefaultDatasetId { get; set; }

        /// <summary>
        /// Gets or Sets DefaultProjectId
        /// </summary>
        [DataMember(Name="default_project_id", EmitDefaultValue=false)]
        public string DefaultProjectId { get; set; }

        /// <summary>
        /// Gets or Sets MerchantId
        /// </summary>
        [DataMember(Name="merchant_id", EmitDefaultValue=false)]
        public string MerchantId { get; set; }

        /// <summary>
        /// Gets or Sets Queries
        /// </summary>
        [DataMember(Name="queries", EmitDefaultValue=false)]
        public List<ReportDataSetQuery> Queries { get; set; }

        /// <summary>
        /// Gets or Sets SecurityLevel
        /// </summary>
        [DataMember(Name="security_level", EmitDefaultValue=false)]
        public string SecurityLevel { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ReportDryRunQueriesRequest {\n");
            sb.Append("  ConnectionId: ").Append(ConnectionId).Append("\n");
            sb.Append("  DefaultDatasetId: ").Append(DefaultDatasetId).Append("\n");
            sb.Append("  DefaultProjectId: ").Append(DefaultProjectId).Append("\n");
            sb.Append("  MerchantId: ").Append(MerchantId).Append("\n");
            sb.Append("  Queries: ").Append(Queries).Append("\n");
            sb.Append("  SecurityLevel: ").Append(SecurityLevel).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ReportDryRunQueriesRequest);
        }

        /// <summary>
        /// Returns true if ReportDryRunQueriesRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of ReportDryRunQueriesRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ReportDryRunQueriesRequest input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ConnectionId == input.ConnectionId ||
                    (this.ConnectionId != null &&
                    this.ConnectionId.Equals(input.ConnectionId))
                ) && 
                (
                    this.DefaultDatasetId == input.DefaultDatasetId ||
                    (this.DefaultDatasetId != null &&
                    this.DefaultDatasetId.Equals(input.DefaultDatasetId))
                ) && 
                (
                    this.DefaultProjectId == input.DefaultProjectId ||
                    (this.DefaultProjectId != null &&
                    this.DefaultProjectId.Equals(input.DefaultProjectId))
                ) && 
                (
                    this.MerchantId == input.MerchantId ||
                    (this.MerchantId != null &&
                    this.MerchantId.Equals(input.MerchantId))
                ) && 
                (
                    this.Queries == input.Queries ||
                    this.Queries != null &&
                    this.Queries.SequenceEqual(input.Queries)
                ) && 
                (
                    this.SecurityLevel == input.SecurityLevel ||
                    (this.SecurityLevel != null &&
                    this.SecurityLevel.Equals(input.SecurityLevel))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ConnectionId != null)
                    hashCode = hashCode * 59 + this.ConnectionId.GetHashCode();
                if (this.DefaultDatasetId != null)
                    hashCode = hashCode * 59 + this.DefaultDatasetId.GetHashCode();
                if (this.DefaultProjectId != null)
                    hashCode = hashCode * 59 + this.DefaultProjectId.GetHashCode();
                if (this.MerchantId != null)
                    hashCode = hashCode * 59 + this.MerchantId.GetHashCode();
                if (this.Queries != null)
                    hashCode = hashCode * 59 + this.Queries.GetHashCode();
                if (this.SecurityLevel != null)
                    hashCode = hashCode * 59 + this.SecurityLevel.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
