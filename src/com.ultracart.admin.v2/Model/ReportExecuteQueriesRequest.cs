/*
 * UltraCart Rest API V2
 *
 * UltraCart REST API Version 2
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@ultracart.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = com.ultracart.admin.v2.Client.OpenAPIDateConverter;

namespace com.ultracart.admin.v2.Model
{
    /// <summary>
    /// ReportExecuteQueriesRequest
    /// </summary>
    [DataContract]
    public partial class ReportExecuteQueriesRequest :  IEquatable<ReportExecuteQueriesRequest>, IValidatableObject
    {
        /// <summary>
        /// Security level to execute report under
        /// </summary>
        /// <value>Security level to execute report under</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum SecurityLevelEnum
        {
            /// <summary>
            /// Enum Standard for value: standard
            /// </summary>
            [EnumMember(Value = "standard")]
            Standard = 1,

            /// <summary>
            /// Enum Low for value: low
            /// </summary>
            [EnumMember(Value = "low")]
            Low = 2,

            /// <summary>
            /// Enum Medium for value: medium
            /// </summary>
            [EnumMember(Value = "medium")]
            Medium = 3,

            /// <summary>
            /// Enum High for value: high
            /// </summary>
            [EnumMember(Value = "high")]
            High = 4

        }

        /// <summary>
        /// Security level to execute report under
        /// </summary>
        /// <value>Security level to execute report under</value>
        [DataMember(Name="security_level", EmitDefaultValue=false)]
        public SecurityLevelEnum? SecurityLevel { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="ReportExecuteQueriesRequest" /> class.
        /// </summary>
        /// <param name="clientUuid">Unique UUID assigned to this client during the auth.  This will be used to locate the websocket connect id..</param>
        /// <param name="connectionId">The websocket connection id that should receive back notices of query completion..</param>
        /// <param name="defaultDatasetId">defaultDatasetId.</param>
        /// <param name="defaultProjectId">defaultProjectId.</param>
        /// <param name="merchantId">merchantId.</param>
        /// <param name="queries">An array of queries that we want the lambda function to execute..</param>
        /// <param name="securityLevel">Security level to execute report under.</param>
        public ReportExecuteQueriesRequest(string clientUuid = default(string), string connectionId = default(string), string defaultDatasetId = default(string), string defaultProjectId = default(string), string merchantId = default(string), List<ReportDataSetQuery> queries = default(List<ReportDataSetQuery>), SecurityLevelEnum? securityLevel = default(SecurityLevelEnum?))
        {
            this.ClientUuid = clientUuid;
            this.ConnectionId = connectionId;
            this.DefaultDatasetId = defaultDatasetId;
            this.DefaultProjectId = defaultProjectId;
            this.MerchantId = merchantId;
            this.Queries = queries;
            this.SecurityLevel = securityLevel;
        }

        /// <summary>
        /// Unique UUID assigned to this client during the auth.  This will be used to locate the websocket connect id.
        /// </summary>
        /// <value>Unique UUID assigned to this client during the auth.  This will be used to locate the websocket connect id.</value>
        [DataMember(Name="client_uuid", EmitDefaultValue=false)]
        public string ClientUuid { get; set; }

        /// <summary>
        /// The websocket connection id that should receive back notices of query completion.
        /// </summary>
        /// <value>The websocket connection id that should receive back notices of query completion.</value>
        [DataMember(Name="connection_id", EmitDefaultValue=false)]
        public string ConnectionId { get; set; }

        /// <summary>
        /// Gets or Sets DefaultDatasetId
        /// </summary>
        [DataMember(Name="default_dataset_id", EmitDefaultValue=false)]
        public string DefaultDatasetId { get; set; }

        /// <summary>
        /// Gets or Sets DefaultProjectId
        /// </summary>
        [DataMember(Name="default_project_id", EmitDefaultValue=false)]
        public string DefaultProjectId { get; set; }

        /// <summary>
        /// Gets or Sets MerchantId
        /// </summary>
        [DataMember(Name="merchant_id", EmitDefaultValue=false)]
        public string MerchantId { get; set; }

        /// <summary>
        /// An array of queries that we want the lambda function to execute.
        /// </summary>
        /// <value>An array of queries that we want the lambda function to execute.</value>
        [DataMember(Name="queries", EmitDefaultValue=false)]
        public List<ReportDataSetQuery> Queries { get; set; }


        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ReportExecuteQueriesRequest {\n");
            sb.Append("  ClientUuid: ").Append(ClientUuid).Append("\n");
            sb.Append("  ConnectionId: ").Append(ConnectionId).Append("\n");
            sb.Append("  DefaultDatasetId: ").Append(DefaultDatasetId).Append("\n");
            sb.Append("  DefaultProjectId: ").Append(DefaultProjectId).Append("\n");
            sb.Append("  MerchantId: ").Append(MerchantId).Append("\n");
            sb.Append("  Queries: ").Append(Queries).Append("\n");
            sb.Append("  SecurityLevel: ").Append(SecurityLevel).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ReportExecuteQueriesRequest);
        }

        /// <summary>
        /// Returns true if ReportExecuteQueriesRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of ReportExecuteQueriesRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ReportExecuteQueriesRequest input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ClientUuid == input.ClientUuid ||
                    (this.ClientUuid != null &&
                    this.ClientUuid.Equals(input.ClientUuid))
                ) && 
                (
                    this.ConnectionId == input.ConnectionId ||
                    (this.ConnectionId != null &&
                    this.ConnectionId.Equals(input.ConnectionId))
                ) && 
                (
                    this.DefaultDatasetId == input.DefaultDatasetId ||
                    (this.DefaultDatasetId != null &&
                    this.DefaultDatasetId.Equals(input.DefaultDatasetId))
                ) && 
                (
                    this.DefaultProjectId == input.DefaultProjectId ||
                    (this.DefaultProjectId != null &&
                    this.DefaultProjectId.Equals(input.DefaultProjectId))
                ) && 
                (
                    this.MerchantId == input.MerchantId ||
                    (this.MerchantId != null &&
                    this.MerchantId.Equals(input.MerchantId))
                ) && 
                (
                    this.Queries == input.Queries ||
                    this.Queries != null &&
                    input.Queries != null &&
                    this.Queries.SequenceEqual(input.Queries)
                ) && 
                (
                    this.SecurityLevel == input.SecurityLevel ||
                    (this.SecurityLevel != null &&
                    this.SecurityLevel.Equals(input.SecurityLevel))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ClientUuid != null)
                    hashCode = hashCode * 59 + this.ClientUuid.GetHashCode();
                if (this.ConnectionId != null)
                    hashCode = hashCode * 59 + this.ConnectionId.GetHashCode();
                if (this.DefaultDatasetId != null)
                    hashCode = hashCode * 59 + this.DefaultDatasetId.GetHashCode();
                if (this.DefaultProjectId != null)
                    hashCode = hashCode * 59 + this.DefaultProjectId.GetHashCode();
                if (this.MerchantId != null)
                    hashCode = hashCode * 59 + this.MerchantId.GetHashCode();
                if (this.Queries != null)
                    hashCode = hashCode * 59 + this.Queries.GetHashCode();
                if (this.SecurityLevel != null)
                    hashCode = hashCode * 59 + this.SecurityLevel.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
