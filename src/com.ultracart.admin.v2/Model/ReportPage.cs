/*
 * UltraCart Rest API V2
 *
 * UltraCart REST API Version 2
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@ultracart.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = com.ultracart.admin.v2.Client.OpenAPIDateConverter;

namespace com.ultracart.admin.v2.Model
{
    /// <summary>
    /// ReportPage
    /// </summary>
    [DataContract]
    public partial class ReportPage :  IEquatable<ReportPage>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ReportPage" /> class.
        /// </summary>
        /// <param name="filters">filters.</param>
        /// <param name="height">Height of the report page in inches.</param>
        /// <param name="title">title.</param>
        /// <param name="visualizations">Visualizations on the report page..</param>
        /// <param name="width">Width of the report page in inches.</param>
        public ReportPage(List<ReportFilter> filters = default(List<ReportFilter>), decimal height = default(decimal), string title = default(string), List<ReportPageVisualization> visualizations = default(List<ReportPageVisualization>), decimal width = default(decimal))
        {
            this.Filters = filters;
            this.Height = height;
            this.Title = title;
            this.Visualizations = visualizations;
            this.Width = width;
        }

        /// <summary>
        /// Gets or Sets Filters
        /// </summary>
        [DataMember(Name="filters", EmitDefaultValue=false)]
        public List<ReportFilter> Filters { get; set; }

        /// <summary>
        /// Height of the report page in inches
        /// </summary>
        /// <value>Height of the report page in inches</value>
        [DataMember(Name="height", EmitDefaultValue=false)]
        public decimal Height { get; set; }

        /// <summary>
        /// Gets or Sets Title
        /// </summary>
        [DataMember(Name="title", EmitDefaultValue=false)]
        public string Title { get; set; }

        /// <summary>
        /// Visualizations on the report page.
        /// </summary>
        /// <value>Visualizations on the report page.</value>
        [DataMember(Name="visualizations", EmitDefaultValue=false)]
        public List<ReportPageVisualization> Visualizations { get; set; }

        /// <summary>
        /// Width of the report page in inches
        /// </summary>
        /// <value>Width of the report page in inches</value>
        [DataMember(Name="width", EmitDefaultValue=false)]
        public decimal Width { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ReportPage {\n");
            sb.Append("  Filters: ").Append(Filters).Append("\n");
            sb.Append("  Height: ").Append(Height).Append("\n");
            sb.Append("  Title: ").Append(Title).Append("\n");
            sb.Append("  Visualizations: ").Append(Visualizations).Append("\n");
            sb.Append("  Width: ").Append(Width).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ReportPage);
        }

        /// <summary>
        /// Returns true if ReportPage instances are equal
        /// </summary>
        /// <param name="input">Instance of ReportPage to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ReportPage input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Filters == input.Filters ||
                    this.Filters != null &&
                    input.Filters != null &&
                    this.Filters.SequenceEqual(input.Filters)
                ) && 
                (
                    this.Height == input.Height ||
                    (this.Height != null &&
                    this.Height.Equals(input.Height))
                ) && 
                (
                    this.Title == input.Title ||
                    (this.Title != null &&
                    this.Title.Equals(input.Title))
                ) && 
                (
                    this.Visualizations == input.Visualizations ||
                    this.Visualizations != null &&
                    input.Visualizations != null &&
                    this.Visualizations.SequenceEqual(input.Visualizations)
                ) && 
                (
                    this.Width == input.Width ||
                    (this.Width != null &&
                    this.Width.Equals(input.Width))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Filters != null)
                    hashCode = hashCode * 59 + this.Filters.GetHashCode();
                if (this.Height != null)
                    hashCode = hashCode * 59 + this.Height.GetHashCode();
                if (this.Title != null)
                    hashCode = hashCode * 59 + this.Title.GetHashCode();
                if (this.Visualizations != null)
                    hashCode = hashCode * 59 + this.Visualizations.GetHashCode();
                if (this.Width != null)
                    hashCode = hashCode * 59 + this.Width.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
