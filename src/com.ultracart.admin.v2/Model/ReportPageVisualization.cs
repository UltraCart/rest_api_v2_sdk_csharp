/* 
 * UltraCart Rest API V2
 *
 * UltraCart REST API Version 2
 *
 * OpenAPI spec version: 2.0.0
 * Contact: support@ultracart.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = com.ultracart.admin.v2.Client.SwaggerDateConverter;

namespace com.ultracart.admin.v2.Model
{
    /// <summary>
    /// ReportPageVisualization
    /// </summary>
    [DataContract]
    public partial class ReportPageVisualization :  IEquatable<ReportPageVisualization>, IValidatableObject
    {
        /// <summary>
        /// Type of visualization
        /// </summary>
        /// <value>Type of visualization</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TypeEnum
        {
            
            /// <summary>
            /// Enum Scorecard for value: score card
            /// </summary>
            [EnumMember(Value = "score card")]
            Scorecard = 1,
            
            /// <summary>
            /// Enum Linechart for value: line chart
            /// </summary>
            [EnumMember(Value = "line chart")]
            Linechart = 2,
            
            /// <summary>
            /// Enum Barchart for value: bar chart
            /// </summary>
            [EnumMember(Value = "bar chart")]
            Barchart = 3,
            
            /// <summary>
            /// Enum Text for value: text
            /// </summary>
            [EnumMember(Value = "text")]
            Text = 4,
            
            /// <summary>
            /// Enum Table for value: table
            /// </summary>
            [EnumMember(Value = "table")]
            Table = 5,
            
            /// <summary>
            /// Enum Gauge for value: gauge
            /// </summary>
            [EnumMember(Value = "gauge")]
            Gauge = 6,
            
            /// <summary>
            /// Enum Piechart for value: pie chart
            /// </summary>
            [EnumMember(Value = "pie chart")]
            Piechart = 7
        }

        /// <summary>
        /// Type of visualization
        /// </summary>
        /// <value>Type of visualization</value>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public TypeEnum? Type { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="ReportPageVisualization" /> class.
        /// </summary>
        /// <param name="config">A JSON representation of the configuration for this visualization.</param>
        /// <param name="dataSourceName">dataSourceName.</param>
        /// <param name="dataSourceUuid">A unique identifier assigned to the data source..</param>
        /// <param name="dimensions">dimensions.</param>
        /// <param name="metrics">metrics.</param>
        /// <param name="name">name.</param>
        /// <param name="showComparison">True if the visualization should show a comparison based upon the date range.</param>
        /// <param name="styles">A JSON representation of the style configuration for this visualization.</param>
        /// <param name="type">Type of visualization.</param>
        /// <param name="visualizationUuid">A UUID for the visualization.</param>
        public ReportPageVisualization(string config = default(string), string dataSourceName = default(string), string dataSourceUuid = default(string), List<ReportPageVisualizationDimension> dimensions = default(List<ReportPageVisualizationDimension>), List<ReportPageVisualizationMetric> metrics = default(List<ReportPageVisualizationMetric>), string name = default(string), bool? showComparison = default(bool?), string styles = default(string), TypeEnum? type = default(TypeEnum?), string visualizationUuid = default(string))
        {
            this.Config = config;
            this.DataSourceName = dataSourceName;
            this.DataSourceUuid = dataSourceUuid;
            this.Dimensions = dimensions;
            this.Metrics = metrics;
            this.Name = name;
            this.ShowComparison = showComparison;
            this.Styles = styles;
            this.Type = type;
            this.VisualizationUuid = visualizationUuid;
        }
        
        /// <summary>
        /// A JSON representation of the configuration for this visualization
        /// </summary>
        /// <value>A JSON representation of the configuration for this visualization</value>
        [DataMember(Name="config", EmitDefaultValue=false)]
        public string Config { get; set; }

        /// <summary>
        /// Gets or Sets DataSourceName
        /// </summary>
        [DataMember(Name="data_source_name", EmitDefaultValue=false)]
        public string DataSourceName { get; set; }

        /// <summary>
        /// A unique identifier assigned to the data source.
        /// </summary>
        /// <value>A unique identifier assigned to the data source.</value>
        [DataMember(Name="data_source_uuid", EmitDefaultValue=false)]
        public string DataSourceUuid { get; set; }

        /// <summary>
        /// Gets or Sets Dimensions
        /// </summary>
        [DataMember(Name="dimensions", EmitDefaultValue=false)]
        public List<ReportPageVisualizationDimension> Dimensions { get; set; }

        /// <summary>
        /// Gets or Sets Metrics
        /// </summary>
        [DataMember(Name="metrics", EmitDefaultValue=false)]
        public List<ReportPageVisualizationMetric> Metrics { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// True if the visualization should show a comparison based upon the date range
        /// </summary>
        /// <value>True if the visualization should show a comparison based upon the date range</value>
        [DataMember(Name="show_comparison", EmitDefaultValue=false)]
        public bool? ShowComparison { get; set; }

        /// <summary>
        /// A JSON representation of the style configuration for this visualization
        /// </summary>
        /// <value>A JSON representation of the style configuration for this visualization</value>
        [DataMember(Name="styles", EmitDefaultValue=false)]
        public string Styles { get; set; }


        /// <summary>
        /// A UUID for the visualization
        /// </summary>
        /// <value>A UUID for the visualization</value>
        [DataMember(Name="visualization_uuid", EmitDefaultValue=false)]
        public string VisualizationUuid { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ReportPageVisualization {\n");
            sb.Append("  Config: ").Append(Config).Append("\n");
            sb.Append("  DataSourceName: ").Append(DataSourceName).Append("\n");
            sb.Append("  DataSourceUuid: ").Append(DataSourceUuid).Append("\n");
            sb.Append("  Dimensions: ").Append(Dimensions).Append("\n");
            sb.Append("  Metrics: ").Append(Metrics).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  ShowComparison: ").Append(ShowComparison).Append("\n");
            sb.Append("  Styles: ").Append(Styles).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  VisualizationUuid: ").Append(VisualizationUuid).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ReportPageVisualization);
        }

        /// <summary>
        /// Returns true if ReportPageVisualization instances are equal
        /// </summary>
        /// <param name="input">Instance of ReportPageVisualization to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ReportPageVisualization input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Config == input.Config ||
                    (this.Config != null &&
                    this.Config.Equals(input.Config))
                ) && 
                (
                    this.DataSourceName == input.DataSourceName ||
                    (this.DataSourceName != null &&
                    this.DataSourceName.Equals(input.DataSourceName))
                ) && 
                (
                    this.DataSourceUuid == input.DataSourceUuid ||
                    (this.DataSourceUuid != null &&
                    this.DataSourceUuid.Equals(input.DataSourceUuid))
                ) && 
                (
                    this.Dimensions == input.Dimensions ||
                    this.Dimensions != null &&
                    this.Dimensions.SequenceEqual(input.Dimensions)
                ) && 
                (
                    this.Metrics == input.Metrics ||
                    this.Metrics != null &&
                    this.Metrics.SequenceEqual(input.Metrics)
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.ShowComparison == input.ShowComparison ||
                    (this.ShowComparison != null &&
                    this.ShowComparison.Equals(input.ShowComparison))
                ) && 
                (
                    this.Styles == input.Styles ||
                    (this.Styles != null &&
                    this.Styles.Equals(input.Styles))
                ) && 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.VisualizationUuid == input.VisualizationUuid ||
                    (this.VisualizationUuid != null &&
                    this.VisualizationUuid.Equals(input.VisualizationUuid))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Config != null)
                    hashCode = hashCode * 59 + this.Config.GetHashCode();
                if (this.DataSourceName != null)
                    hashCode = hashCode * 59 + this.DataSourceName.GetHashCode();
                if (this.DataSourceUuid != null)
                    hashCode = hashCode * 59 + this.DataSourceUuid.GetHashCode();
                if (this.Dimensions != null)
                    hashCode = hashCode * 59 + this.Dimensions.GetHashCode();
                if (this.Metrics != null)
                    hashCode = hashCode * 59 + this.Metrics.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.ShowComparison != null)
                    hashCode = hashCode * 59 + this.ShowComparison.GetHashCode();
                if (this.Styles != null)
                    hashCode = hashCode * 59 + this.Styles.GetHashCode();
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.VisualizationUuid != null)
                    hashCode = hashCode * 59 + this.VisualizationUuid.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
