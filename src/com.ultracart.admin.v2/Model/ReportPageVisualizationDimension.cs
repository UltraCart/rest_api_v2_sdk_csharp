/* 
 * UltraCart Rest API V2
 *
 * UltraCart REST API Version 2
 *
 * OpenAPI spec version: 2.0.0
 * Contact: support@ultracart.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = com.ultracart.admin.v2.Client.SwaggerDateConverter;

namespace com.ultracart.admin.v2.Model
{
    /// <summary>
    /// ReportPageVisualizationDimension
    /// </summary>
    [DataContract]
    public partial class ReportPageVisualizationDimension :  IEquatable<ReportPageVisualizationDimension>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ReportPageVisualizationDimension" /> class.
        /// </summary>
        /// <param name="_as">Return the column as a different name.</param>
        /// <param name="cast">Cast the column to a different data type such as DATETIME -&gt; DATE.</param>
        /// <param name="column">column.</param>
        /// <param name="datetimeTimezone">The timezone to shift the date to.</param>
        /// <param name="datetimeTrunc">The type of truncation to perform on the date, DAY, WEEK(MONDAY), etc..</param>
        /// <param name="extract">Part of a datetime to extract.</param>
        /// <param name="function">The function to perform around the column such as DATE_TRUNC(@column, day).</param>
        public ReportPageVisualizationDimension(string _as = default(string), string cast = default(string), string column = default(string), string datetimeTimezone = default(string), string datetimeTrunc = default(string), string extract = default(string), string function = default(string))
        {
            this.As = _as;
            this.Cast = cast;
            this.Column = column;
            this.DatetimeTimezone = datetimeTimezone;
            this.DatetimeTrunc = datetimeTrunc;
            this.Extract = extract;
            this.Function = function;
        }
        
        /// <summary>
        /// Return the column as a different name
        /// </summary>
        /// <value>Return the column as a different name</value>
        [DataMember(Name="as", EmitDefaultValue=false)]
        public string As { get; set; }

        /// <summary>
        /// Cast the column to a different data type such as DATETIME -&gt; DATE
        /// </summary>
        /// <value>Cast the column to a different data type such as DATETIME -&gt; DATE</value>
        [DataMember(Name="cast", EmitDefaultValue=false)]
        public string Cast { get; set; }

        /// <summary>
        /// Gets or Sets Column
        /// </summary>
        [DataMember(Name="column", EmitDefaultValue=false)]
        public string Column { get; set; }

        /// <summary>
        /// The timezone to shift the date to
        /// </summary>
        /// <value>The timezone to shift the date to</value>
        [DataMember(Name="datetime_timezone", EmitDefaultValue=false)]
        public string DatetimeTimezone { get; set; }

        /// <summary>
        /// The type of truncation to perform on the date, DAY, WEEK(MONDAY), etc.
        /// </summary>
        /// <value>The type of truncation to perform on the date, DAY, WEEK(MONDAY), etc.</value>
        [DataMember(Name="datetime_trunc", EmitDefaultValue=false)]
        public string DatetimeTrunc { get; set; }

        /// <summary>
        /// Part of a datetime to extract
        /// </summary>
        /// <value>Part of a datetime to extract</value>
        [DataMember(Name="extract", EmitDefaultValue=false)]
        public string Extract { get; set; }

        /// <summary>
        /// The function to perform around the column such as DATE_TRUNC(@column, day)
        /// </summary>
        /// <value>The function to perform around the column such as DATE_TRUNC(@column, day)</value>
        [DataMember(Name="function", EmitDefaultValue=false)]
        public string Function { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ReportPageVisualizationDimension {\n");
            sb.Append("  As: ").Append(As).Append("\n");
            sb.Append("  Cast: ").Append(Cast).Append("\n");
            sb.Append("  Column: ").Append(Column).Append("\n");
            sb.Append("  DatetimeTimezone: ").Append(DatetimeTimezone).Append("\n");
            sb.Append("  DatetimeTrunc: ").Append(DatetimeTrunc).Append("\n");
            sb.Append("  Extract: ").Append(Extract).Append("\n");
            sb.Append("  Function: ").Append(Function).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ReportPageVisualizationDimension);
        }

        /// <summary>
        /// Returns true if ReportPageVisualizationDimension instances are equal
        /// </summary>
        /// <param name="input">Instance of ReportPageVisualizationDimension to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ReportPageVisualizationDimension input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.As == input.As ||
                    (this.As != null &&
                    this.As.Equals(input.As))
                ) && 
                (
                    this.Cast == input.Cast ||
                    (this.Cast != null &&
                    this.Cast.Equals(input.Cast))
                ) && 
                (
                    this.Column == input.Column ||
                    (this.Column != null &&
                    this.Column.Equals(input.Column))
                ) && 
                (
                    this.DatetimeTimezone == input.DatetimeTimezone ||
                    (this.DatetimeTimezone != null &&
                    this.DatetimeTimezone.Equals(input.DatetimeTimezone))
                ) && 
                (
                    this.DatetimeTrunc == input.DatetimeTrunc ||
                    (this.DatetimeTrunc != null &&
                    this.DatetimeTrunc.Equals(input.DatetimeTrunc))
                ) && 
                (
                    this.Extract == input.Extract ||
                    (this.Extract != null &&
                    this.Extract.Equals(input.Extract))
                ) && 
                (
                    this.Function == input.Function ||
                    (this.Function != null &&
                    this.Function.Equals(input.Function))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.As != null)
                    hashCode = hashCode * 59 + this.As.GetHashCode();
                if (this.Cast != null)
                    hashCode = hashCode * 59 + this.Cast.GetHashCode();
                if (this.Column != null)
                    hashCode = hashCode * 59 + this.Column.GetHashCode();
                if (this.DatetimeTimezone != null)
                    hashCode = hashCode * 59 + this.DatetimeTimezone.GetHashCode();
                if (this.DatetimeTrunc != null)
                    hashCode = hashCode * 59 + this.DatetimeTrunc.GetHashCode();
                if (this.Extract != null)
                    hashCode = hashCode * 59 + this.Extract.GetHashCode();
                if (this.Function != null)
                    hashCode = hashCode * 59 + this.Function.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
