/* 
 * UltraCart Rest API V2
 *
 * UltraCart REST API Version 2
 *
 * OpenAPI spec version: 2.0.0
 * Contact: support@ultracart.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = com.ultracart.admin.v2.Client.SwaggerDateConverter;

namespace com.ultracart.admin.v2.Model
{
    /// <summary>
    /// RotatingTransactionGateway
    /// </summary>
    [DataContract]
    public partial class RotatingTransactionGateway :  IEquatable<RotatingTransactionGateway>, IValidatableObject
    {
        /// <summary>
        /// The math operator used to determine if the order total is allowed to process through this gateway.
        /// </summary>
        /// <value>The math operator used to determine if the order total is allowed to process through this gateway.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum OrderTotalComparisonEnum
        {
            
            /// <summary>
            /// Enum LessThan for value: <
            /// </summary>
            [EnumMember(Value = "<")]
            LessThan = 1,
            
            /// <summary>
            /// Enum LessThanOrEqualTo for value: <=
            /// </summary>
            [EnumMember(Value = "<=")]
            LessThanOrEqualTo = 2,
            
            /// <summary>
            /// Enum Equal for value: =
            /// </summary>
            [EnumMember(Value = "=")]
            Equal = 3,
            
            /// <summary>
            /// Enum GreaterThan for value: >
            /// </summary>
            [EnumMember(Value = ">")]
            GreaterThan = 4,
            
            /// <summary>
            /// Enum GreaterThanOrEqualTo for value: >=
            /// </summary>
            [EnumMember(Value = ">=")]
            GreaterThanOrEqualTo = 5
        }

        /// <summary>
        /// The math operator used to determine if the order total is allowed to process through this gateway.
        /// </summary>
        /// <value>The math operator used to determine if the order total is allowed to process through this gateway.</value>
        [DataMember(Name="order_total_comparison", EmitDefaultValue=false)]
        public OrderTotalComparisonEnum? OrderTotalComparison { get; set; }
        /// <summary>
        /// A field used to take a gateway offline without removing/deleting the configuration. Inactive marks the gateway as completely unusable.  Standby takes the gateway offline and will not be used unless all other active gateways fail.
        /// </summary>
        /// <value>A field used to take a gateway offline without removing/deleting the configuration. Inactive marks the gateway as completely unusable.  Standby takes the gateway offline and will not be used unless all other active gateways fail.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum StatusEnum
        {
            
            /// <summary>
            /// Enum Active for value: active
            /// </summary>
            [EnumMember(Value = "active")]
            Active = 1,
            
            /// <summary>
            /// Enum Inactive for value: inactive
            /// </summary>
            [EnumMember(Value = "inactive")]
            Inactive = 2,
            
            /// <summary>
            /// Enum Standby for value: standby
            /// </summary>
            [EnumMember(Value = "standby")]
            Standby = 3
        }

        /// <summary>
        /// A field used to take a gateway offline without removing/deleting the configuration. Inactive marks the gateway as completely unusable.  Standby takes the gateway offline and will not be used unless all other active gateways fail.
        /// </summary>
        /// <value>A field used to take a gateway offline without removing/deleting the configuration. Inactive marks the gateway as completely unusable.  Standby takes the gateway offline and will not be used unless all other active gateways fail.</value>
        [DataMember(Name="status", EmitDefaultValue=false)]
        public StatusEnum? Status { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="RotatingTransactionGateway" /> class.
        /// </summary>
        /// <param name="additionalNativeCurrencyCodes">An array of all currencies known to the UltraCart system and a boolean indicating whether this gateway supports that currency..</param>
        /// <param name="autoOrderCancelUnlessResponseName">Advanced feature for canceling an auto order unless the transaction gateway response contains a field with this name.  If specified, this field must exist and the value must equal a value in the auto_order_cancel_unless_response_values array.</param>
        /// <param name="autoOrderCancelUnlessResponseValues">Advanced feature for canceling an auto order unless the transaction gateway response contains a field with the name specified in auto_order_cancel_unless_response_name.  If specified, this field must exist and the value must equal a value in this array.  If nothing matches, the auto order is canceled..</param>
        /// <param name="baseCurrencyCode">The base currency code for your gateway.  For example, USD..</param>
        /// <param name="cascadeCode">Optional field specifying a different rotating gateway to use if this gateway fails to process the transaction..</param>
        /// <param name="cascadeCodes">A list of other rotating transaction gateways that can be used as a lookup to assign actions based on failures of this gateway.</param>
        /// <param name="cascadeDailyAutoOrderCode">The code for the next rotating gateway that should be used when this gateway reaches a daily limit.</param>
        /// <param name="chargeAppearsOnStatementAs">Optional field providing an alternate Charge Appears As value for this rotating gateway.</param>
        /// <param name="code">A human friendly short code used to recognize and differentiate this rotating gateway with other rotating gateways.</param>
        /// <param name="currentDaily">The current daily dollar amount this gateway has processed.  Providing this will allow UltraCart to track the monthly amount going forward..</param>
        /// <param name="currentDailyAutoOrder">The current daily dollar amount of auto orders (recurring) this gateway has processed.  Providing this will allow UltraCart to track the monthly amount going forward..</param>
        /// <param name="currentMonthly">The current monthly dollar amount this gateway has processed.  Providing this will allow UltraCart to track the monthly amount going forward..</param>
        /// <param name="customerServiceEmail">The customer service email address for this gateway.</param>
        /// <param name="customerServicePhone">The customer service phone number for this gateway.</param>
        /// <param name="dayOfMonthRestrictions">Array containing all 31 (possible) days and any optional restrictions for one or more days..</param>
        /// <param name="dayOfWeekRestrictions">Array containing all seven days of the week and any optional restrictions for one or more days.</param>
        /// <param name="deactivateAfterFailures">If non-zero, this gateway will be deactivated after reaching this amount of consecutive failures..</param>
        /// <param name="endDate">Optional field to specify an absolute date when this gateway should stop accepting transactions.</param>
        /// <param name="gateways">An array of all transaction gateways, not just the one currently configured for this rotating gateway. This allows for easy switching to another gateway.  The enabled property on the transaction gateway indicates which one is actually being used..</param>
        /// <param name="maximumDaily">The maximum daily dollar amount this gateway may process.</param>
        /// <param name="maximumDailyAutoOrder">The maximum daily dollar amount of auto orders (recurring) this gateway may process.</param>
        /// <param name="maximumMonthly">The maximum monthly dollar amount this gateway may process..</param>
        /// <param name="nextDailyAutoOrderReset">The date and time when this gateway daily limit for auto orders will reset.</param>
        /// <param name="nextDailyReset">The date and time when this gateway daily limit will reset.</param>
        /// <param name="nextMonthlyReset">The date and time when this gateway monthly limit will reset.</param>
        /// <param name="orderTotal">This optional field is combined with order_total_comparison to determine if an order should be processed thorugh this gateway..</param>
        /// <param name="orderTotalComparison">The math operator used to determine if the order total is allowed to process through this gateway..</param>
        /// <param name="rebillAutoOrdersAgainstThisRtgCode">If specified auto orders (rebills) are routed to this rotating gateway.  This may be needed because rebills lack a credit card cvv..</param>
        /// <param name="reserveDays">The number of days that your gateway holds any reserves.  This aids in profitability reporting..</param>
        /// <param name="reservePercentage">The percentage of an order which your gateway is holding in reserve.  This aids in profitability reporting..</param>
        /// <param name="reserveRefunded">If true, reserves are refunded when an order is refunded.  This aids in profitability reporting..</param>
        /// <param name="reservesReleasedThrough">An optional date specifying the date up to which your gateway has released all reserve funds.  This aids in profitability reporting..</param>
        /// <param name="rotatingTransactionGatewayOid">Internal identifier used to store and retrieve this gateway information.</param>
        /// <param name="selectedGatewayName">The name of the currently selected transaction gateway used by this rotating gateway.</param>
        /// <param name="showCascadeCodes">A boolean used by the builtin UltraCart UI to determine if cascading rtg codes should be shown.</param>
        /// <param name="showMerchantAccountProfiles">A flag to help the UltraCart UI to know whether to show merchant account profiles or not..</param>
        /// <param name="startDate">Optional field to specify an absolute date when this gateway should begin accepting transactions.</param>
        /// <param name="status">A field used to take a gateway offline without removing/deleting the configuration. Inactive marks the gateway as completely unusable.  Standby takes the gateway offline and will not be used unless all other active gateways fail..</param>
        /// <param name="themeRestrictions">Optional restrictions by theme/storefront.</param>
        /// <param name="trafficPercentage">Required field between 0 and 1 that dictates the percentage of traffic that should flow through this gateway.</param>
        /// <param name="trialDailyAmount">If specified, limits the total daily count of trial orders.</param>
        /// <param name="trialDailyLimit">If specified, limits the total daily dollar amount of trial orders.</param>
        /// <param name="trialMonthlyAmount">If specified, limits the total month dollar amount of trial orders.</param>
        /// <param name="trialMonthlyLimit">If specified, limits the total month count of trial orders.</param>
        public RotatingTransactionGateway(List<RtgCurrency> additionalNativeCurrencyCodes = default(List<RtgCurrency>), string autoOrderCancelUnlessResponseName = default(string), List<string> autoOrderCancelUnlessResponseValues = default(List<string>), string baseCurrencyCode = default(string), string cascadeCode = default(string), List<string> cascadeCodes = default(List<string>), string cascadeDailyAutoOrderCode = default(string), string chargeAppearsOnStatementAs = default(string), string code = default(string), decimal? currentDaily = default(decimal?), decimal? currentDailyAutoOrder = default(decimal?), decimal? currentMonthly = default(decimal?), string customerServiceEmail = default(string), string customerServicePhone = default(string), List<RtgDayOfMonthRestriction> dayOfMonthRestrictions = default(List<RtgDayOfMonthRestriction>), List<RtgDayOfWeekRestriction> dayOfWeekRestrictions = default(List<RtgDayOfWeekRestriction>), int? deactivateAfterFailures = default(int?), string endDate = default(string), List<TransactionGateway> gateways = default(List<TransactionGateway>), decimal? maximumDaily = default(decimal?), decimal? maximumDailyAutoOrder = default(decimal?), decimal? maximumMonthly = default(decimal?), string nextDailyAutoOrderReset = default(string), string nextDailyReset = default(string), string nextMonthlyReset = default(string), decimal? orderTotal = default(decimal?), OrderTotalComparisonEnum? orderTotalComparison = default(OrderTotalComparisonEnum?), string rebillAutoOrdersAgainstThisRtgCode = default(string), int? reserveDays = default(int?), decimal? reservePercentage = default(decimal?), bool? reserveRefunded = default(bool?), string reservesReleasedThrough = default(string), int? rotatingTransactionGatewayOid = default(int?), string selectedGatewayName = default(string), bool? showCascadeCodes = default(bool?), bool? showMerchantAccountProfiles = default(bool?), string startDate = default(string), StatusEnum? status = default(StatusEnum?), List<RtgThemeRestriction> themeRestrictions = default(List<RtgThemeRestriction>), decimal? trafficPercentage = default(decimal?), int? trialDailyAmount = default(int?), int? trialDailyLimit = default(int?), int? trialMonthlyAmount = default(int?), int? trialMonthlyLimit = default(int?))
        {
            this.AdditionalNativeCurrencyCodes = additionalNativeCurrencyCodes;
            this.AutoOrderCancelUnlessResponseName = autoOrderCancelUnlessResponseName;
            this.AutoOrderCancelUnlessResponseValues = autoOrderCancelUnlessResponseValues;
            this.BaseCurrencyCode = baseCurrencyCode;
            this.CascadeCode = cascadeCode;
            this.CascadeCodes = cascadeCodes;
            this.CascadeDailyAutoOrderCode = cascadeDailyAutoOrderCode;
            this.ChargeAppearsOnStatementAs = chargeAppearsOnStatementAs;
            this.Code = code;
            this.CurrentDaily = currentDaily;
            this.CurrentDailyAutoOrder = currentDailyAutoOrder;
            this.CurrentMonthly = currentMonthly;
            this.CustomerServiceEmail = customerServiceEmail;
            this.CustomerServicePhone = customerServicePhone;
            this.DayOfMonthRestrictions = dayOfMonthRestrictions;
            this.DayOfWeekRestrictions = dayOfWeekRestrictions;
            this.DeactivateAfterFailures = deactivateAfterFailures;
            this.EndDate = endDate;
            this.Gateways = gateways;
            this.MaximumDaily = maximumDaily;
            this.MaximumDailyAutoOrder = maximumDailyAutoOrder;
            this.MaximumMonthly = maximumMonthly;
            this.NextDailyAutoOrderReset = nextDailyAutoOrderReset;
            this.NextDailyReset = nextDailyReset;
            this.NextMonthlyReset = nextMonthlyReset;
            this.OrderTotal = orderTotal;
            this.OrderTotalComparison = orderTotalComparison;
            this.RebillAutoOrdersAgainstThisRtgCode = rebillAutoOrdersAgainstThisRtgCode;
            this.ReserveDays = reserveDays;
            this.ReservePercentage = reservePercentage;
            this.ReserveRefunded = reserveRefunded;
            this.ReservesReleasedThrough = reservesReleasedThrough;
            this.RotatingTransactionGatewayOid = rotatingTransactionGatewayOid;
            this.SelectedGatewayName = selectedGatewayName;
            this.ShowCascadeCodes = showCascadeCodes;
            this.ShowMerchantAccountProfiles = showMerchantAccountProfiles;
            this.StartDate = startDate;
            this.Status = status;
            this.ThemeRestrictions = themeRestrictions;
            this.TrafficPercentage = trafficPercentage;
            this.TrialDailyAmount = trialDailyAmount;
            this.TrialDailyLimit = trialDailyLimit;
            this.TrialMonthlyAmount = trialMonthlyAmount;
            this.TrialMonthlyLimit = trialMonthlyLimit;
        }
        
        /// <summary>
        /// An array of all currencies known to the UltraCart system and a boolean indicating whether this gateway supports that currency.
        /// </summary>
        /// <value>An array of all currencies known to the UltraCart system and a boolean indicating whether this gateway supports that currency.</value>
        [DataMember(Name="additional_native_currency_codes", EmitDefaultValue=false)]
        public List<RtgCurrency> AdditionalNativeCurrencyCodes { get; set; }

        /// <summary>
        /// Advanced feature for canceling an auto order unless the transaction gateway response contains a field with this name.  If specified, this field must exist and the value must equal a value in the auto_order_cancel_unless_response_values array
        /// </summary>
        /// <value>Advanced feature for canceling an auto order unless the transaction gateway response contains a field with this name.  If specified, this field must exist and the value must equal a value in the auto_order_cancel_unless_response_values array</value>
        [DataMember(Name="auto_order_cancel_unless_response_name", EmitDefaultValue=false)]
        public string AutoOrderCancelUnlessResponseName { get; set; }

        /// <summary>
        /// Advanced feature for canceling an auto order unless the transaction gateway response contains a field with the name specified in auto_order_cancel_unless_response_name.  If specified, this field must exist and the value must equal a value in this array.  If nothing matches, the auto order is canceled.
        /// </summary>
        /// <value>Advanced feature for canceling an auto order unless the transaction gateway response contains a field with the name specified in auto_order_cancel_unless_response_name.  If specified, this field must exist and the value must equal a value in this array.  If nothing matches, the auto order is canceled.</value>
        [DataMember(Name="auto_order_cancel_unless_response_values", EmitDefaultValue=false)]
        public List<string> AutoOrderCancelUnlessResponseValues { get; set; }

        /// <summary>
        /// The base currency code for your gateway.  For example, USD.
        /// </summary>
        /// <value>The base currency code for your gateway.  For example, USD.</value>
        [DataMember(Name="base_currency_code", EmitDefaultValue=false)]
        public string BaseCurrencyCode { get; set; }

        /// <summary>
        /// Optional field specifying a different rotating gateway to use if this gateway fails to process the transaction.
        /// </summary>
        /// <value>Optional field specifying a different rotating gateway to use if this gateway fails to process the transaction.</value>
        [DataMember(Name="cascade_code", EmitDefaultValue=false)]
        public string CascadeCode { get; set; }

        /// <summary>
        /// A list of other rotating transaction gateways that can be used as a lookup to assign actions based on failures of this gateway
        /// </summary>
        /// <value>A list of other rotating transaction gateways that can be used as a lookup to assign actions based on failures of this gateway</value>
        [DataMember(Name="cascade_codes", EmitDefaultValue=false)]
        public List<string> CascadeCodes { get; set; }

        /// <summary>
        /// The code for the next rotating gateway that should be used when this gateway reaches a daily limit
        /// </summary>
        /// <value>The code for the next rotating gateway that should be used when this gateway reaches a daily limit</value>
        [DataMember(Name="cascade_daily_auto_order_code", EmitDefaultValue=false)]
        public string CascadeDailyAutoOrderCode { get; set; }

        /// <summary>
        /// Optional field providing an alternate Charge Appears As value for this rotating gateway
        /// </summary>
        /// <value>Optional field providing an alternate Charge Appears As value for this rotating gateway</value>
        [DataMember(Name="charge_appears_on_statement_as", EmitDefaultValue=false)]
        public string ChargeAppearsOnStatementAs { get; set; }

        /// <summary>
        /// A human friendly short code used to recognize and differentiate this rotating gateway with other rotating gateways
        /// </summary>
        /// <value>A human friendly short code used to recognize and differentiate this rotating gateway with other rotating gateways</value>
        [DataMember(Name="code", EmitDefaultValue=false)]
        public string Code { get; set; }

        /// <summary>
        /// The current daily dollar amount this gateway has processed.  Providing this will allow UltraCart to track the monthly amount going forward.
        /// </summary>
        /// <value>The current daily dollar amount this gateway has processed.  Providing this will allow UltraCart to track the monthly amount going forward.</value>
        [DataMember(Name="current_daily", EmitDefaultValue=false)]
        public decimal? CurrentDaily { get; set; }

        /// <summary>
        /// The current daily dollar amount of auto orders (recurring) this gateway has processed.  Providing this will allow UltraCart to track the monthly amount going forward.
        /// </summary>
        /// <value>The current daily dollar amount of auto orders (recurring) this gateway has processed.  Providing this will allow UltraCart to track the monthly amount going forward.</value>
        [DataMember(Name="current_daily_auto_order", EmitDefaultValue=false)]
        public decimal? CurrentDailyAutoOrder { get; set; }

        /// <summary>
        /// The current monthly dollar amount this gateway has processed.  Providing this will allow UltraCart to track the monthly amount going forward.
        /// </summary>
        /// <value>The current monthly dollar amount this gateway has processed.  Providing this will allow UltraCart to track the monthly amount going forward.</value>
        [DataMember(Name="current_monthly", EmitDefaultValue=false)]
        public decimal? CurrentMonthly { get; set; }

        /// <summary>
        /// The customer service email address for this gateway
        /// </summary>
        /// <value>The customer service email address for this gateway</value>
        [DataMember(Name="customer_service_email", EmitDefaultValue=false)]
        public string CustomerServiceEmail { get; set; }

        /// <summary>
        /// The customer service phone number for this gateway
        /// </summary>
        /// <value>The customer service phone number for this gateway</value>
        [DataMember(Name="customer_service_phone", EmitDefaultValue=false)]
        public string CustomerServicePhone { get; set; }

        /// <summary>
        /// Array containing all 31 (possible) days and any optional restrictions for one or more days.
        /// </summary>
        /// <value>Array containing all 31 (possible) days and any optional restrictions for one or more days.</value>
        [DataMember(Name="day_of_month_restrictions", EmitDefaultValue=false)]
        public List<RtgDayOfMonthRestriction> DayOfMonthRestrictions { get; set; }

        /// <summary>
        /// Array containing all seven days of the week and any optional restrictions for one or more days
        /// </summary>
        /// <value>Array containing all seven days of the week and any optional restrictions for one or more days</value>
        [DataMember(Name="day_of_week_restrictions", EmitDefaultValue=false)]
        public List<RtgDayOfWeekRestriction> DayOfWeekRestrictions { get; set; }

        /// <summary>
        /// If non-zero, this gateway will be deactivated after reaching this amount of consecutive failures.
        /// </summary>
        /// <value>If non-zero, this gateway will be deactivated after reaching this amount of consecutive failures.</value>
        [DataMember(Name="deactivate_after_failures", EmitDefaultValue=false)]
        public int? DeactivateAfterFailures { get; set; }

        /// <summary>
        /// Optional field to specify an absolute date when this gateway should stop accepting transactions
        /// </summary>
        /// <value>Optional field to specify an absolute date when this gateway should stop accepting transactions</value>
        [DataMember(Name="end_date", EmitDefaultValue=false)]
        public string EndDate { get; set; }

        /// <summary>
        /// An array of all transaction gateways, not just the one currently configured for this rotating gateway. This allows for easy switching to another gateway.  The enabled property on the transaction gateway indicates which one is actually being used.
        /// </summary>
        /// <value>An array of all transaction gateways, not just the one currently configured for this rotating gateway. This allows for easy switching to another gateway.  The enabled property on the transaction gateway indicates which one is actually being used.</value>
        [DataMember(Name="gateways", EmitDefaultValue=false)]
        public List<TransactionGateway> Gateways { get; set; }

        /// <summary>
        /// The maximum daily dollar amount this gateway may process
        /// </summary>
        /// <value>The maximum daily dollar amount this gateway may process</value>
        [DataMember(Name="maximum_daily", EmitDefaultValue=false)]
        public decimal? MaximumDaily { get; set; }

        /// <summary>
        /// The maximum daily dollar amount of auto orders (recurring) this gateway may process
        /// </summary>
        /// <value>The maximum daily dollar amount of auto orders (recurring) this gateway may process</value>
        [DataMember(Name="maximum_daily_auto_order", EmitDefaultValue=false)]
        public decimal? MaximumDailyAutoOrder { get; set; }

        /// <summary>
        /// The maximum monthly dollar amount this gateway may process.
        /// </summary>
        /// <value>The maximum monthly dollar amount this gateway may process.</value>
        [DataMember(Name="maximum_monthly", EmitDefaultValue=false)]
        public decimal? MaximumMonthly { get; set; }

        /// <summary>
        /// The date and time when this gateway daily limit for auto orders will reset
        /// </summary>
        /// <value>The date and time when this gateway daily limit for auto orders will reset</value>
        [DataMember(Name="next_daily_auto_order_reset", EmitDefaultValue=false)]
        public string NextDailyAutoOrderReset { get; set; }

        /// <summary>
        /// The date and time when this gateway daily limit will reset
        /// </summary>
        /// <value>The date and time when this gateway daily limit will reset</value>
        [DataMember(Name="next_daily_reset", EmitDefaultValue=false)]
        public string NextDailyReset { get; set; }

        /// <summary>
        /// The date and time when this gateway monthly limit will reset
        /// </summary>
        /// <value>The date and time when this gateway monthly limit will reset</value>
        [DataMember(Name="next_monthly_reset", EmitDefaultValue=false)]
        public string NextMonthlyReset { get; set; }

        /// <summary>
        /// This optional field is combined with order_total_comparison to determine if an order should be processed thorugh this gateway.
        /// </summary>
        /// <value>This optional field is combined with order_total_comparison to determine if an order should be processed thorugh this gateway.</value>
        [DataMember(Name="order_total", EmitDefaultValue=false)]
        public decimal? OrderTotal { get; set; }


        /// <summary>
        /// If specified auto orders (rebills) are routed to this rotating gateway.  This may be needed because rebills lack a credit card cvv.
        /// </summary>
        /// <value>If specified auto orders (rebills) are routed to this rotating gateway.  This may be needed because rebills lack a credit card cvv.</value>
        [DataMember(Name="rebill_auto_orders_against_this_rtg_code", EmitDefaultValue=false)]
        public string RebillAutoOrdersAgainstThisRtgCode { get; set; }

        /// <summary>
        /// The number of days that your gateway holds any reserves.  This aids in profitability reporting.
        /// </summary>
        /// <value>The number of days that your gateway holds any reserves.  This aids in profitability reporting.</value>
        [DataMember(Name="reserve_days", EmitDefaultValue=false)]
        public int? ReserveDays { get; set; }

        /// <summary>
        /// The percentage of an order which your gateway is holding in reserve.  This aids in profitability reporting.
        /// </summary>
        /// <value>The percentage of an order which your gateway is holding in reserve.  This aids in profitability reporting.</value>
        [DataMember(Name="reserve_percentage", EmitDefaultValue=false)]
        public decimal? ReservePercentage { get; set; }

        /// <summary>
        /// If true, reserves are refunded when an order is refunded.  This aids in profitability reporting.
        /// </summary>
        /// <value>If true, reserves are refunded when an order is refunded.  This aids in profitability reporting.</value>
        [DataMember(Name="reserve_refunded", EmitDefaultValue=false)]
        public bool? ReserveRefunded { get; set; }

        /// <summary>
        /// An optional date specifying the date up to which your gateway has released all reserve funds.  This aids in profitability reporting.
        /// </summary>
        /// <value>An optional date specifying the date up to which your gateway has released all reserve funds.  This aids in profitability reporting.</value>
        [DataMember(Name="reserves_released_through", EmitDefaultValue=false)]
        public string ReservesReleasedThrough { get; set; }

        /// <summary>
        /// Internal identifier used to store and retrieve this gateway information
        /// </summary>
        /// <value>Internal identifier used to store and retrieve this gateway information</value>
        [DataMember(Name="rotating_transaction_gateway_oid", EmitDefaultValue=false)]
        public int? RotatingTransactionGatewayOid { get; set; }

        /// <summary>
        /// The name of the currently selected transaction gateway used by this rotating gateway
        /// </summary>
        /// <value>The name of the currently selected transaction gateway used by this rotating gateway</value>
        [DataMember(Name="selected_gateway_name", EmitDefaultValue=false)]
        public string SelectedGatewayName { get; set; }

        /// <summary>
        /// A boolean used by the builtin UltraCart UI to determine if cascading rtg codes should be shown
        /// </summary>
        /// <value>A boolean used by the builtin UltraCart UI to determine if cascading rtg codes should be shown</value>
        [DataMember(Name="show_cascade_codes", EmitDefaultValue=false)]
        public bool? ShowCascadeCodes { get; set; }

        /// <summary>
        /// A flag to help the UltraCart UI to know whether to show merchant account profiles or not.
        /// </summary>
        /// <value>A flag to help the UltraCart UI to know whether to show merchant account profiles or not.</value>
        [DataMember(Name="show_merchant_account_profiles", EmitDefaultValue=false)]
        public bool? ShowMerchantAccountProfiles { get; set; }

        /// <summary>
        /// Optional field to specify an absolute date when this gateway should begin accepting transactions
        /// </summary>
        /// <value>Optional field to specify an absolute date when this gateway should begin accepting transactions</value>
        [DataMember(Name="start_date", EmitDefaultValue=false)]
        public string StartDate { get; set; }


        /// <summary>
        /// Optional restrictions by theme/storefront
        /// </summary>
        /// <value>Optional restrictions by theme/storefront</value>
        [DataMember(Name="theme_restrictions", EmitDefaultValue=false)]
        public List<RtgThemeRestriction> ThemeRestrictions { get; set; }

        /// <summary>
        /// Required field between 0 and 1 that dictates the percentage of traffic that should flow through this gateway
        /// </summary>
        /// <value>Required field between 0 and 1 that dictates the percentage of traffic that should flow through this gateway</value>
        [DataMember(Name="traffic_percentage", EmitDefaultValue=false)]
        public decimal? TrafficPercentage { get; set; }

        /// <summary>
        /// If specified, limits the total daily count of trial orders
        /// </summary>
        /// <value>If specified, limits the total daily count of trial orders</value>
        [DataMember(Name="trial_daily_amount", EmitDefaultValue=false)]
        public int? TrialDailyAmount { get; set; }

        /// <summary>
        /// If specified, limits the total daily dollar amount of trial orders
        /// </summary>
        /// <value>If specified, limits the total daily dollar amount of trial orders</value>
        [DataMember(Name="trial_daily_limit", EmitDefaultValue=false)]
        public int? TrialDailyLimit { get; set; }

        /// <summary>
        /// If specified, limits the total month dollar amount of trial orders
        /// </summary>
        /// <value>If specified, limits the total month dollar amount of trial orders</value>
        [DataMember(Name="trial_monthly_amount", EmitDefaultValue=false)]
        public int? TrialMonthlyAmount { get; set; }

        /// <summary>
        /// If specified, limits the total month count of trial orders
        /// </summary>
        /// <value>If specified, limits the total month count of trial orders</value>
        [DataMember(Name="trial_monthly_limit", EmitDefaultValue=false)]
        public int? TrialMonthlyLimit { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class RotatingTransactionGateway {\n");
            sb.Append("  AdditionalNativeCurrencyCodes: ").Append(AdditionalNativeCurrencyCodes).Append("\n");
            sb.Append("  AutoOrderCancelUnlessResponseName: ").Append(AutoOrderCancelUnlessResponseName).Append("\n");
            sb.Append("  AutoOrderCancelUnlessResponseValues: ").Append(AutoOrderCancelUnlessResponseValues).Append("\n");
            sb.Append("  BaseCurrencyCode: ").Append(BaseCurrencyCode).Append("\n");
            sb.Append("  CascadeCode: ").Append(CascadeCode).Append("\n");
            sb.Append("  CascadeCodes: ").Append(CascadeCodes).Append("\n");
            sb.Append("  CascadeDailyAutoOrderCode: ").Append(CascadeDailyAutoOrderCode).Append("\n");
            sb.Append("  ChargeAppearsOnStatementAs: ").Append(ChargeAppearsOnStatementAs).Append("\n");
            sb.Append("  Code: ").Append(Code).Append("\n");
            sb.Append("  CurrentDaily: ").Append(CurrentDaily).Append("\n");
            sb.Append("  CurrentDailyAutoOrder: ").Append(CurrentDailyAutoOrder).Append("\n");
            sb.Append("  CurrentMonthly: ").Append(CurrentMonthly).Append("\n");
            sb.Append("  CustomerServiceEmail: ").Append(CustomerServiceEmail).Append("\n");
            sb.Append("  CustomerServicePhone: ").Append(CustomerServicePhone).Append("\n");
            sb.Append("  DayOfMonthRestrictions: ").Append(DayOfMonthRestrictions).Append("\n");
            sb.Append("  DayOfWeekRestrictions: ").Append(DayOfWeekRestrictions).Append("\n");
            sb.Append("  DeactivateAfterFailures: ").Append(DeactivateAfterFailures).Append("\n");
            sb.Append("  EndDate: ").Append(EndDate).Append("\n");
            sb.Append("  Gateways: ").Append(Gateways).Append("\n");
            sb.Append("  MaximumDaily: ").Append(MaximumDaily).Append("\n");
            sb.Append("  MaximumDailyAutoOrder: ").Append(MaximumDailyAutoOrder).Append("\n");
            sb.Append("  MaximumMonthly: ").Append(MaximumMonthly).Append("\n");
            sb.Append("  NextDailyAutoOrderReset: ").Append(NextDailyAutoOrderReset).Append("\n");
            sb.Append("  NextDailyReset: ").Append(NextDailyReset).Append("\n");
            sb.Append("  NextMonthlyReset: ").Append(NextMonthlyReset).Append("\n");
            sb.Append("  OrderTotal: ").Append(OrderTotal).Append("\n");
            sb.Append("  OrderTotalComparison: ").Append(OrderTotalComparison).Append("\n");
            sb.Append("  RebillAutoOrdersAgainstThisRtgCode: ").Append(RebillAutoOrdersAgainstThisRtgCode).Append("\n");
            sb.Append("  ReserveDays: ").Append(ReserveDays).Append("\n");
            sb.Append("  ReservePercentage: ").Append(ReservePercentage).Append("\n");
            sb.Append("  ReserveRefunded: ").Append(ReserveRefunded).Append("\n");
            sb.Append("  ReservesReleasedThrough: ").Append(ReservesReleasedThrough).Append("\n");
            sb.Append("  RotatingTransactionGatewayOid: ").Append(RotatingTransactionGatewayOid).Append("\n");
            sb.Append("  SelectedGatewayName: ").Append(SelectedGatewayName).Append("\n");
            sb.Append("  ShowCascadeCodes: ").Append(ShowCascadeCodes).Append("\n");
            sb.Append("  ShowMerchantAccountProfiles: ").Append(ShowMerchantAccountProfiles).Append("\n");
            sb.Append("  StartDate: ").Append(StartDate).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  ThemeRestrictions: ").Append(ThemeRestrictions).Append("\n");
            sb.Append("  TrafficPercentage: ").Append(TrafficPercentage).Append("\n");
            sb.Append("  TrialDailyAmount: ").Append(TrialDailyAmount).Append("\n");
            sb.Append("  TrialDailyLimit: ").Append(TrialDailyLimit).Append("\n");
            sb.Append("  TrialMonthlyAmount: ").Append(TrialMonthlyAmount).Append("\n");
            sb.Append("  TrialMonthlyLimit: ").Append(TrialMonthlyLimit).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as RotatingTransactionGateway);
        }

        /// <summary>
        /// Returns true if RotatingTransactionGateway instances are equal
        /// </summary>
        /// <param name="input">Instance of RotatingTransactionGateway to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(RotatingTransactionGateway input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.AdditionalNativeCurrencyCodes == input.AdditionalNativeCurrencyCodes ||
                    this.AdditionalNativeCurrencyCodes != null &&
                    this.AdditionalNativeCurrencyCodes.SequenceEqual(input.AdditionalNativeCurrencyCodes)
                ) && 
                (
                    this.AutoOrderCancelUnlessResponseName == input.AutoOrderCancelUnlessResponseName ||
                    (this.AutoOrderCancelUnlessResponseName != null &&
                    this.AutoOrderCancelUnlessResponseName.Equals(input.AutoOrderCancelUnlessResponseName))
                ) && 
                (
                    this.AutoOrderCancelUnlessResponseValues == input.AutoOrderCancelUnlessResponseValues ||
                    this.AutoOrderCancelUnlessResponseValues != null &&
                    this.AutoOrderCancelUnlessResponseValues.SequenceEqual(input.AutoOrderCancelUnlessResponseValues)
                ) && 
                (
                    this.BaseCurrencyCode == input.BaseCurrencyCode ||
                    (this.BaseCurrencyCode != null &&
                    this.BaseCurrencyCode.Equals(input.BaseCurrencyCode))
                ) && 
                (
                    this.CascadeCode == input.CascadeCode ||
                    (this.CascadeCode != null &&
                    this.CascadeCode.Equals(input.CascadeCode))
                ) && 
                (
                    this.CascadeCodes == input.CascadeCodes ||
                    this.CascadeCodes != null &&
                    this.CascadeCodes.SequenceEqual(input.CascadeCodes)
                ) && 
                (
                    this.CascadeDailyAutoOrderCode == input.CascadeDailyAutoOrderCode ||
                    (this.CascadeDailyAutoOrderCode != null &&
                    this.CascadeDailyAutoOrderCode.Equals(input.CascadeDailyAutoOrderCode))
                ) && 
                (
                    this.ChargeAppearsOnStatementAs == input.ChargeAppearsOnStatementAs ||
                    (this.ChargeAppearsOnStatementAs != null &&
                    this.ChargeAppearsOnStatementAs.Equals(input.ChargeAppearsOnStatementAs))
                ) && 
                (
                    this.Code == input.Code ||
                    (this.Code != null &&
                    this.Code.Equals(input.Code))
                ) && 
                (
                    this.CurrentDaily == input.CurrentDaily ||
                    (this.CurrentDaily != null &&
                    this.CurrentDaily.Equals(input.CurrentDaily))
                ) && 
                (
                    this.CurrentDailyAutoOrder == input.CurrentDailyAutoOrder ||
                    (this.CurrentDailyAutoOrder != null &&
                    this.CurrentDailyAutoOrder.Equals(input.CurrentDailyAutoOrder))
                ) && 
                (
                    this.CurrentMonthly == input.CurrentMonthly ||
                    (this.CurrentMonthly != null &&
                    this.CurrentMonthly.Equals(input.CurrentMonthly))
                ) && 
                (
                    this.CustomerServiceEmail == input.CustomerServiceEmail ||
                    (this.CustomerServiceEmail != null &&
                    this.CustomerServiceEmail.Equals(input.CustomerServiceEmail))
                ) && 
                (
                    this.CustomerServicePhone == input.CustomerServicePhone ||
                    (this.CustomerServicePhone != null &&
                    this.CustomerServicePhone.Equals(input.CustomerServicePhone))
                ) && 
                (
                    this.DayOfMonthRestrictions == input.DayOfMonthRestrictions ||
                    this.DayOfMonthRestrictions != null &&
                    this.DayOfMonthRestrictions.SequenceEqual(input.DayOfMonthRestrictions)
                ) && 
                (
                    this.DayOfWeekRestrictions == input.DayOfWeekRestrictions ||
                    this.DayOfWeekRestrictions != null &&
                    this.DayOfWeekRestrictions.SequenceEqual(input.DayOfWeekRestrictions)
                ) && 
                (
                    this.DeactivateAfterFailures == input.DeactivateAfterFailures ||
                    (this.DeactivateAfterFailures != null &&
                    this.DeactivateAfterFailures.Equals(input.DeactivateAfterFailures))
                ) && 
                (
                    this.EndDate == input.EndDate ||
                    (this.EndDate != null &&
                    this.EndDate.Equals(input.EndDate))
                ) && 
                (
                    this.Gateways == input.Gateways ||
                    this.Gateways != null &&
                    this.Gateways.SequenceEqual(input.Gateways)
                ) && 
                (
                    this.MaximumDaily == input.MaximumDaily ||
                    (this.MaximumDaily != null &&
                    this.MaximumDaily.Equals(input.MaximumDaily))
                ) && 
                (
                    this.MaximumDailyAutoOrder == input.MaximumDailyAutoOrder ||
                    (this.MaximumDailyAutoOrder != null &&
                    this.MaximumDailyAutoOrder.Equals(input.MaximumDailyAutoOrder))
                ) && 
                (
                    this.MaximumMonthly == input.MaximumMonthly ||
                    (this.MaximumMonthly != null &&
                    this.MaximumMonthly.Equals(input.MaximumMonthly))
                ) && 
                (
                    this.NextDailyAutoOrderReset == input.NextDailyAutoOrderReset ||
                    (this.NextDailyAutoOrderReset != null &&
                    this.NextDailyAutoOrderReset.Equals(input.NextDailyAutoOrderReset))
                ) && 
                (
                    this.NextDailyReset == input.NextDailyReset ||
                    (this.NextDailyReset != null &&
                    this.NextDailyReset.Equals(input.NextDailyReset))
                ) && 
                (
                    this.NextMonthlyReset == input.NextMonthlyReset ||
                    (this.NextMonthlyReset != null &&
                    this.NextMonthlyReset.Equals(input.NextMonthlyReset))
                ) && 
                (
                    this.OrderTotal == input.OrderTotal ||
                    (this.OrderTotal != null &&
                    this.OrderTotal.Equals(input.OrderTotal))
                ) && 
                (
                    this.OrderTotalComparison == input.OrderTotalComparison ||
                    (this.OrderTotalComparison != null &&
                    this.OrderTotalComparison.Equals(input.OrderTotalComparison))
                ) && 
                (
                    this.RebillAutoOrdersAgainstThisRtgCode == input.RebillAutoOrdersAgainstThisRtgCode ||
                    (this.RebillAutoOrdersAgainstThisRtgCode != null &&
                    this.RebillAutoOrdersAgainstThisRtgCode.Equals(input.RebillAutoOrdersAgainstThisRtgCode))
                ) && 
                (
                    this.ReserveDays == input.ReserveDays ||
                    (this.ReserveDays != null &&
                    this.ReserveDays.Equals(input.ReserveDays))
                ) && 
                (
                    this.ReservePercentage == input.ReservePercentage ||
                    (this.ReservePercentage != null &&
                    this.ReservePercentage.Equals(input.ReservePercentage))
                ) && 
                (
                    this.ReserveRefunded == input.ReserveRefunded ||
                    (this.ReserveRefunded != null &&
                    this.ReserveRefunded.Equals(input.ReserveRefunded))
                ) && 
                (
                    this.ReservesReleasedThrough == input.ReservesReleasedThrough ||
                    (this.ReservesReleasedThrough != null &&
                    this.ReservesReleasedThrough.Equals(input.ReservesReleasedThrough))
                ) && 
                (
                    this.RotatingTransactionGatewayOid == input.RotatingTransactionGatewayOid ||
                    (this.RotatingTransactionGatewayOid != null &&
                    this.RotatingTransactionGatewayOid.Equals(input.RotatingTransactionGatewayOid))
                ) && 
                (
                    this.SelectedGatewayName == input.SelectedGatewayName ||
                    (this.SelectedGatewayName != null &&
                    this.SelectedGatewayName.Equals(input.SelectedGatewayName))
                ) && 
                (
                    this.ShowCascadeCodes == input.ShowCascadeCodes ||
                    (this.ShowCascadeCodes != null &&
                    this.ShowCascadeCodes.Equals(input.ShowCascadeCodes))
                ) && 
                (
                    this.ShowMerchantAccountProfiles == input.ShowMerchantAccountProfiles ||
                    (this.ShowMerchantAccountProfiles != null &&
                    this.ShowMerchantAccountProfiles.Equals(input.ShowMerchantAccountProfiles))
                ) && 
                (
                    this.StartDate == input.StartDate ||
                    (this.StartDate != null &&
                    this.StartDate.Equals(input.StartDate))
                ) && 
                (
                    this.Status == input.Status ||
                    (this.Status != null &&
                    this.Status.Equals(input.Status))
                ) && 
                (
                    this.ThemeRestrictions == input.ThemeRestrictions ||
                    this.ThemeRestrictions != null &&
                    this.ThemeRestrictions.SequenceEqual(input.ThemeRestrictions)
                ) && 
                (
                    this.TrafficPercentage == input.TrafficPercentage ||
                    (this.TrafficPercentage != null &&
                    this.TrafficPercentage.Equals(input.TrafficPercentage))
                ) && 
                (
                    this.TrialDailyAmount == input.TrialDailyAmount ||
                    (this.TrialDailyAmount != null &&
                    this.TrialDailyAmount.Equals(input.TrialDailyAmount))
                ) && 
                (
                    this.TrialDailyLimit == input.TrialDailyLimit ||
                    (this.TrialDailyLimit != null &&
                    this.TrialDailyLimit.Equals(input.TrialDailyLimit))
                ) && 
                (
                    this.TrialMonthlyAmount == input.TrialMonthlyAmount ||
                    (this.TrialMonthlyAmount != null &&
                    this.TrialMonthlyAmount.Equals(input.TrialMonthlyAmount))
                ) && 
                (
                    this.TrialMonthlyLimit == input.TrialMonthlyLimit ||
                    (this.TrialMonthlyLimit != null &&
                    this.TrialMonthlyLimit.Equals(input.TrialMonthlyLimit))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AdditionalNativeCurrencyCodes != null)
                    hashCode = hashCode * 59 + this.AdditionalNativeCurrencyCodes.GetHashCode();
                if (this.AutoOrderCancelUnlessResponseName != null)
                    hashCode = hashCode * 59 + this.AutoOrderCancelUnlessResponseName.GetHashCode();
                if (this.AutoOrderCancelUnlessResponseValues != null)
                    hashCode = hashCode * 59 + this.AutoOrderCancelUnlessResponseValues.GetHashCode();
                if (this.BaseCurrencyCode != null)
                    hashCode = hashCode * 59 + this.BaseCurrencyCode.GetHashCode();
                if (this.CascadeCode != null)
                    hashCode = hashCode * 59 + this.CascadeCode.GetHashCode();
                if (this.CascadeCodes != null)
                    hashCode = hashCode * 59 + this.CascadeCodes.GetHashCode();
                if (this.CascadeDailyAutoOrderCode != null)
                    hashCode = hashCode * 59 + this.CascadeDailyAutoOrderCode.GetHashCode();
                if (this.ChargeAppearsOnStatementAs != null)
                    hashCode = hashCode * 59 + this.ChargeAppearsOnStatementAs.GetHashCode();
                if (this.Code != null)
                    hashCode = hashCode * 59 + this.Code.GetHashCode();
                if (this.CurrentDaily != null)
                    hashCode = hashCode * 59 + this.CurrentDaily.GetHashCode();
                if (this.CurrentDailyAutoOrder != null)
                    hashCode = hashCode * 59 + this.CurrentDailyAutoOrder.GetHashCode();
                if (this.CurrentMonthly != null)
                    hashCode = hashCode * 59 + this.CurrentMonthly.GetHashCode();
                if (this.CustomerServiceEmail != null)
                    hashCode = hashCode * 59 + this.CustomerServiceEmail.GetHashCode();
                if (this.CustomerServicePhone != null)
                    hashCode = hashCode * 59 + this.CustomerServicePhone.GetHashCode();
                if (this.DayOfMonthRestrictions != null)
                    hashCode = hashCode * 59 + this.DayOfMonthRestrictions.GetHashCode();
                if (this.DayOfWeekRestrictions != null)
                    hashCode = hashCode * 59 + this.DayOfWeekRestrictions.GetHashCode();
                if (this.DeactivateAfterFailures != null)
                    hashCode = hashCode * 59 + this.DeactivateAfterFailures.GetHashCode();
                if (this.EndDate != null)
                    hashCode = hashCode * 59 + this.EndDate.GetHashCode();
                if (this.Gateways != null)
                    hashCode = hashCode * 59 + this.Gateways.GetHashCode();
                if (this.MaximumDaily != null)
                    hashCode = hashCode * 59 + this.MaximumDaily.GetHashCode();
                if (this.MaximumDailyAutoOrder != null)
                    hashCode = hashCode * 59 + this.MaximumDailyAutoOrder.GetHashCode();
                if (this.MaximumMonthly != null)
                    hashCode = hashCode * 59 + this.MaximumMonthly.GetHashCode();
                if (this.NextDailyAutoOrderReset != null)
                    hashCode = hashCode * 59 + this.NextDailyAutoOrderReset.GetHashCode();
                if (this.NextDailyReset != null)
                    hashCode = hashCode * 59 + this.NextDailyReset.GetHashCode();
                if (this.NextMonthlyReset != null)
                    hashCode = hashCode * 59 + this.NextMonthlyReset.GetHashCode();
                if (this.OrderTotal != null)
                    hashCode = hashCode * 59 + this.OrderTotal.GetHashCode();
                if (this.OrderTotalComparison != null)
                    hashCode = hashCode * 59 + this.OrderTotalComparison.GetHashCode();
                if (this.RebillAutoOrdersAgainstThisRtgCode != null)
                    hashCode = hashCode * 59 + this.RebillAutoOrdersAgainstThisRtgCode.GetHashCode();
                if (this.ReserveDays != null)
                    hashCode = hashCode * 59 + this.ReserveDays.GetHashCode();
                if (this.ReservePercentage != null)
                    hashCode = hashCode * 59 + this.ReservePercentage.GetHashCode();
                if (this.ReserveRefunded != null)
                    hashCode = hashCode * 59 + this.ReserveRefunded.GetHashCode();
                if (this.ReservesReleasedThrough != null)
                    hashCode = hashCode * 59 + this.ReservesReleasedThrough.GetHashCode();
                if (this.RotatingTransactionGatewayOid != null)
                    hashCode = hashCode * 59 + this.RotatingTransactionGatewayOid.GetHashCode();
                if (this.SelectedGatewayName != null)
                    hashCode = hashCode * 59 + this.SelectedGatewayName.GetHashCode();
                if (this.ShowCascadeCodes != null)
                    hashCode = hashCode * 59 + this.ShowCascadeCodes.GetHashCode();
                if (this.ShowMerchantAccountProfiles != null)
                    hashCode = hashCode * 59 + this.ShowMerchantAccountProfiles.GetHashCode();
                if (this.StartDate != null)
                    hashCode = hashCode * 59 + this.StartDate.GetHashCode();
                if (this.Status != null)
                    hashCode = hashCode * 59 + this.Status.GetHashCode();
                if (this.ThemeRestrictions != null)
                    hashCode = hashCode * 59 + this.ThemeRestrictions.GetHashCode();
                if (this.TrafficPercentage != null)
                    hashCode = hashCode * 59 + this.TrafficPercentage.GetHashCode();
                if (this.TrialDailyAmount != null)
                    hashCode = hashCode * 59 + this.TrialDailyAmount.GetHashCode();
                if (this.TrialDailyLimit != null)
                    hashCode = hashCode * 59 + this.TrialDailyLimit.GetHashCode();
                if (this.TrialMonthlyAmount != null)
                    hashCode = hashCode * 59 + this.TrialMonthlyAmount.GetHashCode();
                if (this.TrialMonthlyLimit != null)
                    hashCode = hashCode * 59 + this.TrialMonthlyLimit.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
