/* 
 * UltraCart Rest API V2
 *
 * UltraCart REST API Version 2
 *
 * OpenAPI spec version: 2.0.0
 * Contact: support@ultracart.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = com.ultracart.admin.v2.Client.SwaggerDateConverter;

namespace com.ultracart.admin.v2.Model
{
    /// <summary>
    /// RtgSummaryGateway
    /// </summary>
    [DataContract]
    public partial class RtgSummaryGateway :  IEquatable<RtgSummaryGateway>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="RtgSummaryGateway" /> class.
        /// </summary>
        /// <param name="cascadeCode">cascadeCode.</param>
        /// <param name="code">code.</param>
        /// <param name="delayAutoOrders">delayAutoOrders.</param>
        /// <param name="name">name.</param>
        /// <param name="reservePercentage">reservePercentage.</param>
        /// <param name="reservesReleasedThrough">An optional date specifying the date up to which your gateway has released all reserve funds.  This aids in profitability reporting..</param>
        /// <param name="rotatingTransactionGatewayOid">rotatingTransactionGatewayOid.</param>
        /// <param name="showUltracartPaymentsVerification">showUltracartPaymentsVerification.</param>
        /// <param name="showUltracartPaymentsVerified">showUltracartPaymentsVerified.</param>
        /// <param name="status">status.</param>
        /// <param name="supportsAuth">supportsAuth.</param>
        /// <param name="supportsRefund">supportsRefund.</param>
        /// <param name="thirdParty">thirdParty.</param>
        /// <param name="trafficPercentage">trafficPercentage.</param>
        /// <param name="warning">warning.</param>
        /// <param name="wepayAccountUpdateUri">wepayAccountUpdateUri.</param>
        /// <param name="wepayConsoleHostname">wepayConsoleHostname.</param>
        public RtgSummaryGateway(string cascadeCode = default(string), string code = default(string), string delayAutoOrders = default(string), string name = default(string), decimal? reservePercentage = default(decimal?), string reservesReleasedThrough = default(string), int? rotatingTransactionGatewayOid = default(int?), bool? showUltracartPaymentsVerification = default(bool?), bool? showUltracartPaymentsVerified = default(bool?), string status = default(string), string supportsAuth = default(string), string supportsRefund = default(string), string thirdParty = default(string), decimal? trafficPercentage = default(decimal?), string warning = default(string), string wepayAccountUpdateUri = default(string), string wepayConsoleHostname = default(string))
        {
            this.CascadeCode = cascadeCode;
            this.Code = code;
            this.DelayAutoOrders = delayAutoOrders;
            this.Name = name;
            this.ReservePercentage = reservePercentage;
            this.ReservesReleasedThrough = reservesReleasedThrough;
            this.RotatingTransactionGatewayOid = rotatingTransactionGatewayOid;
            this.ShowUltracartPaymentsVerification = showUltracartPaymentsVerification;
            this.ShowUltracartPaymentsVerified = showUltracartPaymentsVerified;
            this.Status = status;
            this.SupportsAuth = supportsAuth;
            this.SupportsRefund = supportsRefund;
            this.ThirdParty = thirdParty;
            this.TrafficPercentage = trafficPercentage;
            this.Warning = warning;
            this.WepayAccountUpdateUri = wepayAccountUpdateUri;
            this.WepayConsoleHostname = wepayConsoleHostname;
        }
        
        /// <summary>
        /// Gets or Sets CascadeCode
        /// </summary>
        [DataMember(Name="cascade_code", EmitDefaultValue=false)]
        public string CascadeCode { get; set; }

        /// <summary>
        /// Gets or Sets Code
        /// </summary>
        [DataMember(Name="code", EmitDefaultValue=false)]
        public string Code { get; set; }

        /// <summary>
        /// Gets or Sets DelayAutoOrders
        /// </summary>
        [DataMember(Name="delay_auto_orders", EmitDefaultValue=false)]
        public string DelayAutoOrders { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets ReservePercentage
        /// </summary>
        [DataMember(Name="reserve_percentage", EmitDefaultValue=false)]
        public decimal? ReservePercentage { get; set; }

        /// <summary>
        /// An optional date specifying the date up to which your gateway has released all reserve funds.  This aids in profitability reporting.
        /// </summary>
        /// <value>An optional date specifying the date up to which your gateway has released all reserve funds.  This aids in profitability reporting.</value>
        [DataMember(Name="reserves_released_through", EmitDefaultValue=false)]
        public string ReservesReleasedThrough { get; set; }

        /// <summary>
        /// Gets or Sets RotatingTransactionGatewayOid
        /// </summary>
        [DataMember(Name="rotating_transaction_gateway_oid", EmitDefaultValue=false)]
        public int? RotatingTransactionGatewayOid { get; set; }

        /// <summary>
        /// Gets or Sets ShowUltracartPaymentsVerification
        /// </summary>
        [DataMember(Name="show_ultracart_payments_verification", EmitDefaultValue=false)]
        public bool? ShowUltracartPaymentsVerification { get; set; }

        /// <summary>
        /// Gets or Sets ShowUltracartPaymentsVerified
        /// </summary>
        [DataMember(Name="show_ultracart_payments_verified", EmitDefaultValue=false)]
        public bool? ShowUltracartPaymentsVerified { get; set; }

        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [DataMember(Name="status", EmitDefaultValue=false)]
        public string Status { get; set; }

        /// <summary>
        /// Gets or Sets SupportsAuth
        /// </summary>
        [DataMember(Name="supports_auth", EmitDefaultValue=false)]
        public string SupportsAuth { get; set; }

        /// <summary>
        /// Gets or Sets SupportsRefund
        /// </summary>
        [DataMember(Name="supports_refund", EmitDefaultValue=false)]
        public string SupportsRefund { get; set; }

        /// <summary>
        /// Gets or Sets ThirdParty
        /// </summary>
        [DataMember(Name="third_party", EmitDefaultValue=false)]
        public string ThirdParty { get; set; }

        /// <summary>
        /// Gets or Sets TrafficPercentage
        /// </summary>
        [DataMember(Name="traffic_percentage", EmitDefaultValue=false)]
        public decimal? TrafficPercentage { get; set; }

        /// <summary>
        /// Gets or Sets Warning
        /// </summary>
        [DataMember(Name="warning", EmitDefaultValue=false)]
        public string Warning { get; set; }

        /// <summary>
        /// Gets or Sets WepayAccountUpdateUri
        /// </summary>
        [DataMember(Name="wepay_account_update_uri", EmitDefaultValue=false)]
        public string WepayAccountUpdateUri { get; set; }

        /// <summary>
        /// Gets or Sets WepayConsoleHostname
        /// </summary>
        [DataMember(Name="wepay_console_hostname", EmitDefaultValue=false)]
        public string WepayConsoleHostname { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class RtgSummaryGateway {\n");
            sb.Append("  CascadeCode: ").Append(CascadeCode).Append("\n");
            sb.Append("  Code: ").Append(Code).Append("\n");
            sb.Append("  DelayAutoOrders: ").Append(DelayAutoOrders).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  ReservePercentage: ").Append(ReservePercentage).Append("\n");
            sb.Append("  ReservesReleasedThrough: ").Append(ReservesReleasedThrough).Append("\n");
            sb.Append("  RotatingTransactionGatewayOid: ").Append(RotatingTransactionGatewayOid).Append("\n");
            sb.Append("  ShowUltracartPaymentsVerification: ").Append(ShowUltracartPaymentsVerification).Append("\n");
            sb.Append("  ShowUltracartPaymentsVerified: ").Append(ShowUltracartPaymentsVerified).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  SupportsAuth: ").Append(SupportsAuth).Append("\n");
            sb.Append("  SupportsRefund: ").Append(SupportsRefund).Append("\n");
            sb.Append("  ThirdParty: ").Append(ThirdParty).Append("\n");
            sb.Append("  TrafficPercentage: ").Append(TrafficPercentage).Append("\n");
            sb.Append("  Warning: ").Append(Warning).Append("\n");
            sb.Append("  WepayAccountUpdateUri: ").Append(WepayAccountUpdateUri).Append("\n");
            sb.Append("  WepayConsoleHostname: ").Append(WepayConsoleHostname).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as RtgSummaryGateway);
        }

        /// <summary>
        /// Returns true if RtgSummaryGateway instances are equal
        /// </summary>
        /// <param name="input">Instance of RtgSummaryGateway to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(RtgSummaryGateway input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.CascadeCode == input.CascadeCode ||
                    (this.CascadeCode != null &&
                    this.CascadeCode.Equals(input.CascadeCode))
                ) && 
                (
                    this.Code == input.Code ||
                    (this.Code != null &&
                    this.Code.Equals(input.Code))
                ) && 
                (
                    this.DelayAutoOrders == input.DelayAutoOrders ||
                    (this.DelayAutoOrders != null &&
                    this.DelayAutoOrders.Equals(input.DelayAutoOrders))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.ReservePercentage == input.ReservePercentage ||
                    (this.ReservePercentage != null &&
                    this.ReservePercentage.Equals(input.ReservePercentage))
                ) && 
                (
                    this.ReservesReleasedThrough == input.ReservesReleasedThrough ||
                    (this.ReservesReleasedThrough != null &&
                    this.ReservesReleasedThrough.Equals(input.ReservesReleasedThrough))
                ) && 
                (
                    this.RotatingTransactionGatewayOid == input.RotatingTransactionGatewayOid ||
                    (this.RotatingTransactionGatewayOid != null &&
                    this.RotatingTransactionGatewayOid.Equals(input.RotatingTransactionGatewayOid))
                ) && 
                (
                    this.ShowUltracartPaymentsVerification == input.ShowUltracartPaymentsVerification ||
                    (this.ShowUltracartPaymentsVerification != null &&
                    this.ShowUltracartPaymentsVerification.Equals(input.ShowUltracartPaymentsVerification))
                ) && 
                (
                    this.ShowUltracartPaymentsVerified == input.ShowUltracartPaymentsVerified ||
                    (this.ShowUltracartPaymentsVerified != null &&
                    this.ShowUltracartPaymentsVerified.Equals(input.ShowUltracartPaymentsVerified))
                ) && 
                (
                    this.Status == input.Status ||
                    (this.Status != null &&
                    this.Status.Equals(input.Status))
                ) && 
                (
                    this.SupportsAuth == input.SupportsAuth ||
                    (this.SupportsAuth != null &&
                    this.SupportsAuth.Equals(input.SupportsAuth))
                ) && 
                (
                    this.SupportsRefund == input.SupportsRefund ||
                    (this.SupportsRefund != null &&
                    this.SupportsRefund.Equals(input.SupportsRefund))
                ) && 
                (
                    this.ThirdParty == input.ThirdParty ||
                    (this.ThirdParty != null &&
                    this.ThirdParty.Equals(input.ThirdParty))
                ) && 
                (
                    this.TrafficPercentage == input.TrafficPercentage ||
                    (this.TrafficPercentage != null &&
                    this.TrafficPercentage.Equals(input.TrafficPercentage))
                ) && 
                (
                    this.Warning == input.Warning ||
                    (this.Warning != null &&
                    this.Warning.Equals(input.Warning))
                ) && 
                (
                    this.WepayAccountUpdateUri == input.WepayAccountUpdateUri ||
                    (this.WepayAccountUpdateUri != null &&
                    this.WepayAccountUpdateUri.Equals(input.WepayAccountUpdateUri))
                ) && 
                (
                    this.WepayConsoleHostname == input.WepayConsoleHostname ||
                    (this.WepayConsoleHostname != null &&
                    this.WepayConsoleHostname.Equals(input.WepayConsoleHostname))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.CascadeCode != null)
                    hashCode = hashCode * 59 + this.CascadeCode.GetHashCode();
                if (this.Code != null)
                    hashCode = hashCode * 59 + this.Code.GetHashCode();
                if (this.DelayAutoOrders != null)
                    hashCode = hashCode * 59 + this.DelayAutoOrders.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.ReservePercentage != null)
                    hashCode = hashCode * 59 + this.ReservePercentage.GetHashCode();
                if (this.ReservesReleasedThrough != null)
                    hashCode = hashCode * 59 + this.ReservesReleasedThrough.GetHashCode();
                if (this.RotatingTransactionGatewayOid != null)
                    hashCode = hashCode * 59 + this.RotatingTransactionGatewayOid.GetHashCode();
                if (this.ShowUltracartPaymentsVerification != null)
                    hashCode = hashCode * 59 + this.ShowUltracartPaymentsVerification.GetHashCode();
                if (this.ShowUltracartPaymentsVerified != null)
                    hashCode = hashCode * 59 + this.ShowUltracartPaymentsVerified.GetHashCode();
                if (this.Status != null)
                    hashCode = hashCode * 59 + this.Status.GetHashCode();
                if (this.SupportsAuth != null)
                    hashCode = hashCode * 59 + this.SupportsAuth.GetHashCode();
                if (this.SupportsRefund != null)
                    hashCode = hashCode * 59 + this.SupportsRefund.GetHashCode();
                if (this.ThirdParty != null)
                    hashCode = hashCode * 59 + this.ThirdParty.GetHashCode();
                if (this.TrafficPercentage != null)
                    hashCode = hashCode * 59 + this.TrafficPercentage.GetHashCode();
                if (this.Warning != null)
                    hashCode = hashCode * 59 + this.Warning.GetHashCode();
                if (this.WepayAccountUpdateUri != null)
                    hashCode = hashCode * 59 + this.WepayAccountUpdateUri.GetHashCode();
                if (this.WepayConsoleHostname != null)
                    hashCode = hashCode * 59 + this.WepayConsoleHostname.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
