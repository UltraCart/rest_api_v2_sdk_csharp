/* 
 * UltraCart Rest API V2
 *
 * UltraCart REST API Version 2
 *
 * OpenAPI spec version: 2.0.0
 * Contact: support@ultracart.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = com.ultracart.admin.v2.Client.SwaggerDateConverter;

namespace com.ultracart.admin.v2.Model
{
    /// <summary>
    /// ScreenRecordingFilterPageView
    /// </summary>
    [DataContract]
    public partial class ScreenRecordingFilterPageView :  IEquatable<ScreenRecordingFilterPageView>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ScreenRecordingFilterPageView" /> class.
        /// </summary>
        /// <param name="domain">domain.</param>
        /// <param name="events">events.</param>
        /// <param name="_params">_params.</param>
        /// <param name="referrer">referrer.</param>
        /// <param name="referrerParams">referrerParams.</param>
        /// <param name="referrerRaw">referrerRaw.</param>
        /// <param name="returnFilterValues">returnFilterValues.</param>
        /// <param name="timeOnPage">timeOnPage.</param>
        /// <param name="url">url.</param>
        public ScreenRecordingFilterPageView(ScreenRecordingFilterStringSearch domain = default(ScreenRecordingFilterStringSearch), List<ScreenRecordingFilterPageViewEvent> events = default(List<ScreenRecordingFilterPageViewEvent>), List<ScreenRecordingFilterPageViewParam> _params = default(List<ScreenRecordingFilterPageViewParam>), ScreenRecordingFilterStringSearch referrer = default(ScreenRecordingFilterStringSearch), List<ScreenRecordingFilterPageViewReferrerParam> referrerParams = default(List<ScreenRecordingFilterPageViewReferrerParam>), ScreenRecordingFilterStringSearch referrerRaw = default(ScreenRecordingFilterStringSearch), List<string> returnFilterValues = default(List<string>), ScreenRecordingFilterRangeInteger timeOnPage = default(ScreenRecordingFilterRangeInteger), ScreenRecordingFilterStringSearch url = default(ScreenRecordingFilterStringSearch))
        {
            this.Domain = domain;
            this.Events = events;
            this.Params = _params;
            this.Referrer = referrer;
            this.ReferrerParams = referrerParams;
            this.ReferrerRaw = referrerRaw;
            this.ReturnFilterValues = returnFilterValues;
            this.TimeOnPage = timeOnPage;
            this.Url = url;
        }
        
        /// <summary>
        /// Gets or Sets Domain
        /// </summary>
        [DataMember(Name="domain", EmitDefaultValue=false)]
        public ScreenRecordingFilterStringSearch Domain { get; set; }

        /// <summary>
        /// Gets or Sets Events
        /// </summary>
        [DataMember(Name="events", EmitDefaultValue=false)]
        public List<ScreenRecordingFilterPageViewEvent> Events { get; set; }

        /// <summary>
        /// Gets or Sets Params
        /// </summary>
        [DataMember(Name="params", EmitDefaultValue=false)]
        public List<ScreenRecordingFilterPageViewParam> Params { get; set; }

        /// <summary>
        /// Gets or Sets Referrer
        /// </summary>
        [DataMember(Name="referrer", EmitDefaultValue=false)]
        public ScreenRecordingFilterStringSearch Referrer { get; set; }

        /// <summary>
        /// Gets or Sets ReferrerParams
        /// </summary>
        [DataMember(Name="referrer_params", EmitDefaultValue=false)]
        public List<ScreenRecordingFilterPageViewReferrerParam> ReferrerParams { get; set; }

        /// <summary>
        /// Gets or Sets ReferrerRaw
        /// </summary>
        [DataMember(Name="referrer_raw", EmitDefaultValue=false)]
        public ScreenRecordingFilterStringSearch ReferrerRaw { get; set; }

        /// <summary>
        /// Gets or Sets ReturnFilterValues
        /// </summary>
        [DataMember(Name="return_filter_values", EmitDefaultValue=false)]
        public List<string> ReturnFilterValues { get; set; }

        /// <summary>
        /// Gets or Sets TimeOnPage
        /// </summary>
        [DataMember(Name="time_on_page", EmitDefaultValue=false)]
        public ScreenRecordingFilterRangeInteger TimeOnPage { get; set; }

        /// <summary>
        /// Gets or Sets Url
        /// </summary>
        [DataMember(Name="url", EmitDefaultValue=false)]
        public ScreenRecordingFilterStringSearch Url { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ScreenRecordingFilterPageView {\n");
            sb.Append("  Domain: ").Append(Domain).Append("\n");
            sb.Append("  Events: ").Append(Events).Append("\n");
            sb.Append("  Params: ").Append(Params).Append("\n");
            sb.Append("  Referrer: ").Append(Referrer).Append("\n");
            sb.Append("  ReferrerParams: ").Append(ReferrerParams).Append("\n");
            sb.Append("  ReferrerRaw: ").Append(ReferrerRaw).Append("\n");
            sb.Append("  ReturnFilterValues: ").Append(ReturnFilterValues).Append("\n");
            sb.Append("  TimeOnPage: ").Append(TimeOnPage).Append("\n");
            sb.Append("  Url: ").Append(Url).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ScreenRecordingFilterPageView);
        }

        /// <summary>
        /// Returns true if ScreenRecordingFilterPageView instances are equal
        /// </summary>
        /// <param name="input">Instance of ScreenRecordingFilterPageView to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ScreenRecordingFilterPageView input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Domain == input.Domain ||
                    (this.Domain != null &&
                    this.Domain.Equals(input.Domain))
                ) && 
                (
                    this.Events == input.Events ||
                    this.Events != null &&
                    this.Events.SequenceEqual(input.Events)
                ) && 
                (
                    this.Params == input.Params ||
                    this.Params != null &&
                    this.Params.SequenceEqual(input.Params)
                ) && 
                (
                    this.Referrer == input.Referrer ||
                    (this.Referrer != null &&
                    this.Referrer.Equals(input.Referrer))
                ) && 
                (
                    this.ReferrerParams == input.ReferrerParams ||
                    this.ReferrerParams != null &&
                    this.ReferrerParams.SequenceEqual(input.ReferrerParams)
                ) && 
                (
                    this.ReferrerRaw == input.ReferrerRaw ||
                    (this.ReferrerRaw != null &&
                    this.ReferrerRaw.Equals(input.ReferrerRaw))
                ) && 
                (
                    this.ReturnFilterValues == input.ReturnFilterValues ||
                    this.ReturnFilterValues != null &&
                    this.ReturnFilterValues.SequenceEqual(input.ReturnFilterValues)
                ) && 
                (
                    this.TimeOnPage == input.TimeOnPage ||
                    (this.TimeOnPage != null &&
                    this.TimeOnPage.Equals(input.TimeOnPage))
                ) && 
                (
                    this.Url == input.Url ||
                    (this.Url != null &&
                    this.Url.Equals(input.Url))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Domain != null)
                    hashCode = hashCode * 59 + this.Domain.GetHashCode();
                if (this.Events != null)
                    hashCode = hashCode * 59 + this.Events.GetHashCode();
                if (this.Params != null)
                    hashCode = hashCode * 59 + this.Params.GetHashCode();
                if (this.Referrer != null)
                    hashCode = hashCode * 59 + this.Referrer.GetHashCode();
                if (this.ReferrerParams != null)
                    hashCode = hashCode * 59 + this.ReferrerParams.GetHashCode();
                if (this.ReferrerRaw != null)
                    hashCode = hashCode * 59 + this.ReferrerRaw.GetHashCode();
                if (this.ReturnFilterValues != null)
                    hashCode = hashCode * 59 + this.ReturnFilterValues.GetHashCode();
                if (this.TimeOnPage != null)
                    hashCode = hashCode * 59 + this.TimeOnPage.GetHashCode();
                if (this.Url != null)
                    hashCode = hashCode * 59 + this.Url.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
