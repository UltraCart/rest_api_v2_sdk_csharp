/*
 * UltraCart Rest API V2
 *
 * UltraCart REST API Version 2
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@ultracart.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = com.ultracart.admin.v2.Client.OpenAPIDateConverter;

namespace com.ultracart.admin.v2.Model
{
    /// <summary>
    /// ScreenRecordingFilterPageView
    /// </summary>
    [DataContract]
    public partial class ScreenRecordingFilterPageView :  IEquatable<ScreenRecordingFilterPageView>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ScreenRecordingFilterPageView" /> class.
        /// </summary>
        /// <param name="domain">domain.</param>
        /// <param name="domainFilter">domainFilter.</param>
        /// <param name="eventNameFilter">eventNameFilter.</param>
        /// <param name="eventParamNameFilter">eventParamNameFilter.</param>
        /// <param name="eventParamValueFilter">eventParamValueFilter.</param>
        /// <param name="events">events.</param>
        /// <param name="paramNameFilter">paramNameFilter.</param>
        /// <param name="paramValueFilter">paramValueFilter.</param>
        /// <param name="_params">_params.</param>
        /// <param name="referrer">referrer.</param>
        /// <param name="referrerParams">referrerParams.</param>
        /// <param name="referrerRaw">referrerRaw.</param>
        /// <param name="timeOnPage">timeOnPage.</param>
        /// <param name="timeOnPageMaxFilter">timeOnPageMaxFilter.</param>
        /// <param name="timeOnPageMinFilter">timeOnPageMinFilter.</param>
        /// <param name="url">url.</param>
        /// <param name="urlFilter">urlFilter.</param>
        public ScreenRecordingFilterPageView(ScreenRecordingFilterStringSearch domain = default(ScreenRecordingFilterStringSearch), bool domainFilter = default(bool), bool eventNameFilter = default(bool), bool eventParamNameFilter = default(bool), bool eventParamValueFilter = default(bool), List<ScreenRecordingFilterPageViewEvent> events = default(List<ScreenRecordingFilterPageViewEvent>), bool paramNameFilter = default(bool), bool paramValueFilter = default(bool), List<ScreenRecordingFilterPageViewParam> _params = default(List<ScreenRecordingFilterPageViewParam>), ScreenRecordingFilterStringSearch referrer = default(ScreenRecordingFilterStringSearch), List<ScreenRecordingFilterPageViewReferrerParam> referrerParams = default(List<ScreenRecordingFilterPageViewReferrerParam>), ScreenRecordingFilterStringSearch referrerRaw = default(ScreenRecordingFilterStringSearch), ScreenRecordingFilterRangeInteger timeOnPage = default(ScreenRecordingFilterRangeInteger), bool timeOnPageMaxFilter = default(bool), bool timeOnPageMinFilter = default(bool), ScreenRecordingFilterStringSearch url = default(ScreenRecordingFilterStringSearch), bool urlFilter = default(bool))
        {
            this.Domain = domain;
            this.DomainFilter = domainFilter;
            this.EventNameFilter = eventNameFilter;
            this.EventParamNameFilter = eventParamNameFilter;
            this.EventParamValueFilter = eventParamValueFilter;
            this.Events = events;
            this.ParamNameFilter = paramNameFilter;
            this.ParamValueFilter = paramValueFilter;
            this.Params = _params;
            this.Referrer = referrer;
            this.ReferrerParams = referrerParams;
            this.ReferrerRaw = referrerRaw;
            this.TimeOnPage = timeOnPage;
            this.TimeOnPageMaxFilter = timeOnPageMaxFilter;
            this.TimeOnPageMinFilter = timeOnPageMinFilter;
            this.Url = url;
            this.UrlFilter = urlFilter;
        }

        /// <summary>
        /// Gets or Sets Domain
        /// </summary>
        [DataMember(Name="domain", EmitDefaultValue=false)]
        public ScreenRecordingFilterStringSearch Domain { get; set; }

        /// <summary>
        /// Gets or Sets DomainFilter
        /// </summary>
        [DataMember(Name="domain_filter", EmitDefaultValue=false)]
        public bool DomainFilter { get; set; }

        /// <summary>
        /// Gets or Sets EventNameFilter
        /// </summary>
        [DataMember(Name="event_name_filter", EmitDefaultValue=false)]
        public bool EventNameFilter { get; set; }

        /// <summary>
        /// Gets or Sets EventParamNameFilter
        /// </summary>
        [DataMember(Name="event_param_name_filter", EmitDefaultValue=false)]
        public bool EventParamNameFilter { get; set; }

        /// <summary>
        /// Gets or Sets EventParamValueFilter
        /// </summary>
        [DataMember(Name="event_param_value_filter", EmitDefaultValue=false)]
        public bool EventParamValueFilter { get; set; }

        /// <summary>
        /// Gets or Sets Events
        /// </summary>
        [DataMember(Name="events", EmitDefaultValue=false)]
        public List<ScreenRecordingFilterPageViewEvent> Events { get; set; }

        /// <summary>
        /// Gets or Sets ParamNameFilter
        /// </summary>
        [DataMember(Name="param_name_filter", EmitDefaultValue=false)]
        public bool ParamNameFilter { get; set; }

        /// <summary>
        /// Gets or Sets ParamValueFilter
        /// </summary>
        [DataMember(Name="param_value_filter", EmitDefaultValue=false)]
        public bool ParamValueFilter { get; set; }

        /// <summary>
        /// Gets or Sets Params
        /// </summary>
        [DataMember(Name="params", EmitDefaultValue=false)]
        public List<ScreenRecordingFilterPageViewParam> Params { get; set; }

        /// <summary>
        /// Gets or Sets Referrer
        /// </summary>
        [DataMember(Name="referrer", EmitDefaultValue=false)]
        public ScreenRecordingFilterStringSearch Referrer { get; set; }

        /// <summary>
        /// Gets or Sets ReferrerParams
        /// </summary>
        [DataMember(Name="referrer_params", EmitDefaultValue=false)]
        public List<ScreenRecordingFilterPageViewReferrerParam> ReferrerParams { get; set; }

        /// <summary>
        /// Gets or Sets ReferrerRaw
        /// </summary>
        [DataMember(Name="referrer_raw", EmitDefaultValue=false)]
        public ScreenRecordingFilterStringSearch ReferrerRaw { get; set; }

        /// <summary>
        /// Gets or Sets TimeOnPage
        /// </summary>
        [DataMember(Name="time_on_page", EmitDefaultValue=false)]
        public ScreenRecordingFilterRangeInteger TimeOnPage { get; set; }

        /// <summary>
        /// Gets or Sets TimeOnPageMaxFilter
        /// </summary>
        [DataMember(Name="time_on_page_max_filter", EmitDefaultValue=false)]
        public bool TimeOnPageMaxFilter { get; set; }

        /// <summary>
        /// Gets or Sets TimeOnPageMinFilter
        /// </summary>
        [DataMember(Name="time_on_page_min_filter", EmitDefaultValue=false)]
        public bool TimeOnPageMinFilter { get; set; }

        /// <summary>
        /// Gets or Sets Url
        /// </summary>
        [DataMember(Name="url", EmitDefaultValue=false)]
        public ScreenRecordingFilterStringSearch Url { get; set; }

        /// <summary>
        /// Gets or Sets UrlFilter
        /// </summary>
        [DataMember(Name="url_filter", EmitDefaultValue=false)]
        public bool UrlFilter { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ScreenRecordingFilterPageView {\n");
            sb.Append("  Domain: ").Append(Domain).Append("\n");
            sb.Append("  DomainFilter: ").Append(DomainFilter).Append("\n");
            sb.Append("  EventNameFilter: ").Append(EventNameFilter).Append("\n");
            sb.Append("  EventParamNameFilter: ").Append(EventParamNameFilter).Append("\n");
            sb.Append("  EventParamValueFilter: ").Append(EventParamValueFilter).Append("\n");
            sb.Append("  Events: ").Append(Events).Append("\n");
            sb.Append("  ParamNameFilter: ").Append(ParamNameFilter).Append("\n");
            sb.Append("  ParamValueFilter: ").Append(ParamValueFilter).Append("\n");
            sb.Append("  Params: ").Append(Params).Append("\n");
            sb.Append("  Referrer: ").Append(Referrer).Append("\n");
            sb.Append("  ReferrerParams: ").Append(ReferrerParams).Append("\n");
            sb.Append("  ReferrerRaw: ").Append(ReferrerRaw).Append("\n");
            sb.Append("  TimeOnPage: ").Append(TimeOnPage).Append("\n");
            sb.Append("  TimeOnPageMaxFilter: ").Append(TimeOnPageMaxFilter).Append("\n");
            sb.Append("  TimeOnPageMinFilter: ").Append(TimeOnPageMinFilter).Append("\n");
            sb.Append("  Url: ").Append(Url).Append("\n");
            sb.Append("  UrlFilter: ").Append(UrlFilter).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ScreenRecordingFilterPageView);
        }

        /// <summary>
        /// Returns true if ScreenRecordingFilterPageView instances are equal
        /// </summary>
        /// <param name="input">Instance of ScreenRecordingFilterPageView to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ScreenRecordingFilterPageView input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Domain == input.Domain ||
                    (this.Domain != null &&
                    this.Domain.Equals(input.Domain))
                ) && 
                (
                    this.DomainFilter == input.DomainFilter ||
                    (this.DomainFilter != null &&
                    this.DomainFilter.Equals(input.DomainFilter))
                ) && 
                (
                    this.EventNameFilter == input.EventNameFilter ||
                    (this.EventNameFilter != null &&
                    this.EventNameFilter.Equals(input.EventNameFilter))
                ) && 
                (
                    this.EventParamNameFilter == input.EventParamNameFilter ||
                    (this.EventParamNameFilter != null &&
                    this.EventParamNameFilter.Equals(input.EventParamNameFilter))
                ) && 
                (
                    this.EventParamValueFilter == input.EventParamValueFilter ||
                    (this.EventParamValueFilter != null &&
                    this.EventParamValueFilter.Equals(input.EventParamValueFilter))
                ) && 
                (
                    this.Events == input.Events ||
                    this.Events != null &&
                    input.Events != null &&
                    this.Events.SequenceEqual(input.Events)
                ) && 
                (
                    this.ParamNameFilter == input.ParamNameFilter ||
                    (this.ParamNameFilter != null &&
                    this.ParamNameFilter.Equals(input.ParamNameFilter))
                ) && 
                (
                    this.ParamValueFilter == input.ParamValueFilter ||
                    (this.ParamValueFilter != null &&
                    this.ParamValueFilter.Equals(input.ParamValueFilter))
                ) && 
                (
                    this.Params == input.Params ||
                    this.Params != null &&
                    input.Params != null &&
                    this.Params.SequenceEqual(input.Params)
                ) && 
                (
                    this.Referrer == input.Referrer ||
                    (this.Referrer != null &&
                    this.Referrer.Equals(input.Referrer))
                ) && 
                (
                    this.ReferrerParams == input.ReferrerParams ||
                    this.ReferrerParams != null &&
                    input.ReferrerParams != null &&
                    this.ReferrerParams.SequenceEqual(input.ReferrerParams)
                ) && 
                (
                    this.ReferrerRaw == input.ReferrerRaw ||
                    (this.ReferrerRaw != null &&
                    this.ReferrerRaw.Equals(input.ReferrerRaw))
                ) && 
                (
                    this.TimeOnPage == input.TimeOnPage ||
                    (this.TimeOnPage != null &&
                    this.TimeOnPage.Equals(input.TimeOnPage))
                ) && 
                (
                    this.TimeOnPageMaxFilter == input.TimeOnPageMaxFilter ||
                    (this.TimeOnPageMaxFilter != null &&
                    this.TimeOnPageMaxFilter.Equals(input.TimeOnPageMaxFilter))
                ) && 
                (
                    this.TimeOnPageMinFilter == input.TimeOnPageMinFilter ||
                    (this.TimeOnPageMinFilter != null &&
                    this.TimeOnPageMinFilter.Equals(input.TimeOnPageMinFilter))
                ) && 
                (
                    this.Url == input.Url ||
                    (this.Url != null &&
                    this.Url.Equals(input.Url))
                ) && 
                (
                    this.UrlFilter == input.UrlFilter ||
                    (this.UrlFilter != null &&
                    this.UrlFilter.Equals(input.UrlFilter))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Domain != null)
                    hashCode = hashCode * 59 + this.Domain.GetHashCode();
                if (this.DomainFilter != null)
                    hashCode = hashCode * 59 + this.DomainFilter.GetHashCode();
                if (this.EventNameFilter != null)
                    hashCode = hashCode * 59 + this.EventNameFilter.GetHashCode();
                if (this.EventParamNameFilter != null)
                    hashCode = hashCode * 59 + this.EventParamNameFilter.GetHashCode();
                if (this.EventParamValueFilter != null)
                    hashCode = hashCode * 59 + this.EventParamValueFilter.GetHashCode();
                if (this.Events != null)
                    hashCode = hashCode * 59 + this.Events.GetHashCode();
                if (this.ParamNameFilter != null)
                    hashCode = hashCode * 59 + this.ParamNameFilter.GetHashCode();
                if (this.ParamValueFilter != null)
                    hashCode = hashCode * 59 + this.ParamValueFilter.GetHashCode();
                if (this.Params != null)
                    hashCode = hashCode * 59 + this.Params.GetHashCode();
                if (this.Referrer != null)
                    hashCode = hashCode * 59 + this.Referrer.GetHashCode();
                if (this.ReferrerParams != null)
                    hashCode = hashCode * 59 + this.ReferrerParams.GetHashCode();
                if (this.ReferrerRaw != null)
                    hashCode = hashCode * 59 + this.ReferrerRaw.GetHashCode();
                if (this.TimeOnPage != null)
                    hashCode = hashCode * 59 + this.TimeOnPage.GetHashCode();
                if (this.TimeOnPageMaxFilter != null)
                    hashCode = hashCode * 59 + this.TimeOnPageMaxFilter.GetHashCode();
                if (this.TimeOnPageMinFilter != null)
                    hashCode = hashCode * 59 + this.TimeOnPageMinFilter.GetHashCode();
                if (this.Url != null)
                    hashCode = hashCode * 59 + this.Url.GetHashCode();
                if (this.UrlFilter != null)
                    hashCode = hashCode * 59 + this.UrlFilter.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
