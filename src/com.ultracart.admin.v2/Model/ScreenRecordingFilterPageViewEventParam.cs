/* 
 * UltraCart Rest API V2
 *
 * UltraCart REST API Version 2
 *
 * OpenAPI spec version: 2.0.0
 * Contact: support@ultracart.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = com.ultracart.admin.v2.Client.SwaggerDateConverter;

namespace com.ultracart.admin.v2.Model
{
    /// <summary>
    /// ScreenRecordingFilterPageViewEventParam
    /// </summary>
    [DataContract]
    public partial class ScreenRecordingFilterPageViewEventParam :  IEquatable<ScreenRecordingFilterPageViewEventParam>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ScreenRecordingFilterPageViewEventParam" /> class.
        /// </summary>
        /// <param name="name">name.</param>
        /// <param name="valueBd">valueBd.</param>
        /// <param name="valueBool">valueBool.</param>
        /// <param name="valueNum">valueNum.</param>
        /// <param name="valueText">valueText.</param>
        public ScreenRecordingFilterPageViewEventParam(string name = default(string), ScreenRecordingFilterRangeBigDecimal valueBd = default(ScreenRecordingFilterRangeBigDecimal), bool? valueBool = default(bool?), ScreenRecordingFilterRangeInteger valueNum = default(ScreenRecordingFilterRangeInteger), ScreenRecordingFilterStringSearch valueText = default(ScreenRecordingFilterStringSearch))
        {
            this.Name = name;
            this.ValueBd = valueBd;
            this.ValueBool = valueBool;
            this.ValueNum = valueNum;
            this.ValueText = valueText;
        }
        
        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets ValueBd
        /// </summary>
        [DataMember(Name="value_bd", EmitDefaultValue=false)]
        public ScreenRecordingFilterRangeBigDecimal ValueBd { get; set; }

        /// <summary>
        /// Gets or Sets ValueBool
        /// </summary>
        [DataMember(Name="value_bool", EmitDefaultValue=false)]
        public bool? ValueBool { get; set; }

        /// <summary>
        /// Gets or Sets ValueNum
        /// </summary>
        [DataMember(Name="value_num", EmitDefaultValue=false)]
        public ScreenRecordingFilterRangeInteger ValueNum { get; set; }

        /// <summary>
        /// Gets or Sets ValueText
        /// </summary>
        [DataMember(Name="value_text", EmitDefaultValue=false)]
        public ScreenRecordingFilterStringSearch ValueText { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ScreenRecordingFilterPageViewEventParam {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  ValueBd: ").Append(ValueBd).Append("\n");
            sb.Append("  ValueBool: ").Append(ValueBool).Append("\n");
            sb.Append("  ValueNum: ").Append(ValueNum).Append("\n");
            sb.Append("  ValueText: ").Append(ValueText).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ScreenRecordingFilterPageViewEventParam);
        }

        /// <summary>
        /// Returns true if ScreenRecordingFilterPageViewEventParam instances are equal
        /// </summary>
        /// <param name="input">Instance of ScreenRecordingFilterPageViewEventParam to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ScreenRecordingFilterPageViewEventParam input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.ValueBd == input.ValueBd ||
                    (this.ValueBd != null &&
                    this.ValueBd.Equals(input.ValueBd))
                ) && 
                (
                    this.ValueBool == input.ValueBool ||
                    (this.ValueBool != null &&
                    this.ValueBool.Equals(input.ValueBool))
                ) && 
                (
                    this.ValueNum == input.ValueNum ||
                    (this.ValueNum != null &&
                    this.ValueNum.Equals(input.ValueNum))
                ) && 
                (
                    this.ValueText == input.ValueText ||
                    (this.ValueText != null &&
                    this.ValueText.Equals(input.ValueText))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.ValueBd != null)
                    hashCode = hashCode * 59 + this.ValueBd.GetHashCode();
                if (this.ValueBool != null)
                    hashCode = hashCode * 59 + this.ValueBool.GetHashCode();
                if (this.ValueNum != null)
                    hashCode = hashCode * 59 + this.ValueNum.GetHashCode();
                if (this.ValueText != null)
                    hashCode = hashCode * 59 + this.ValueText.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
