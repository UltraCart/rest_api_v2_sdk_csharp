/* 
 * UltraCart Rest API V2
 *
 * UltraCart REST API Version 2
 *
 * OpenAPI spec version: 2.0.0
 * Contact: support@ultracart.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = com.ultracart.admin.v2.Client.SwaggerDateConverter;

namespace com.ultracart.admin.v2.Model
{
    /// <summary>
    /// ScreenRecordingFilterStringSearch
    /// </summary>
    [DataContract]
    public partial class ScreenRecordingFilterStringSearch :  IEquatable<ScreenRecordingFilterStringSearch>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ScreenRecordingFilterStringSearch" /> class.
        /// </summary>
        /// <param name="doesNotExist">doesNotExist.</param>
        /// <param name="exists">exists.</param>
        /// <param name="_is">_is.</param>
        /// <param name="isNot">isNot.</param>
        /// <param name="startsWith">startsWith.</param>
        public ScreenRecordingFilterStringSearch(bool? doesNotExist = default(bool?), bool? exists = default(bool?), string _is = default(string), string isNot = default(string), string startsWith = default(string))
        {
            this.DoesNotExist = doesNotExist;
            this.Exists = exists;
            this.Is = _is;
            this.IsNot = isNot;
            this.StartsWith = startsWith;
        }
        
        /// <summary>
        /// Gets or Sets DoesNotExist
        /// </summary>
        [DataMember(Name="does_not_exist", EmitDefaultValue=false)]
        public bool? DoesNotExist { get; set; }

        /// <summary>
        /// Gets or Sets Exists
        /// </summary>
        [DataMember(Name="exists", EmitDefaultValue=false)]
        public bool? Exists { get; set; }

        /// <summary>
        /// Gets or Sets Is
        /// </summary>
        [DataMember(Name="is", EmitDefaultValue=false)]
        public string Is { get; set; }

        /// <summary>
        /// Gets or Sets IsNot
        /// </summary>
        [DataMember(Name="is_not", EmitDefaultValue=false)]
        public string IsNot { get; set; }

        /// <summary>
        /// Gets or Sets StartsWith
        /// </summary>
        [DataMember(Name="starts_with", EmitDefaultValue=false)]
        public string StartsWith { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ScreenRecordingFilterStringSearch {\n");
            sb.Append("  DoesNotExist: ").Append(DoesNotExist).Append("\n");
            sb.Append("  Exists: ").Append(Exists).Append("\n");
            sb.Append("  Is: ").Append(Is).Append("\n");
            sb.Append("  IsNot: ").Append(IsNot).Append("\n");
            sb.Append("  StartsWith: ").Append(StartsWith).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ScreenRecordingFilterStringSearch);
        }

        /// <summary>
        /// Returns true if ScreenRecordingFilterStringSearch instances are equal
        /// </summary>
        /// <param name="input">Instance of ScreenRecordingFilterStringSearch to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ScreenRecordingFilterStringSearch input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.DoesNotExist == input.DoesNotExist ||
                    (this.DoesNotExist != null &&
                    this.DoesNotExist.Equals(input.DoesNotExist))
                ) && 
                (
                    this.Exists == input.Exists ||
                    (this.Exists != null &&
                    this.Exists.Equals(input.Exists))
                ) && 
                (
                    this.Is == input.Is ||
                    (this.Is != null &&
                    this.Is.Equals(input.Is))
                ) && 
                (
                    this.IsNot == input.IsNot ||
                    (this.IsNot != null &&
                    this.IsNot.Equals(input.IsNot))
                ) && 
                (
                    this.StartsWith == input.StartsWith ||
                    (this.StartsWith != null &&
                    this.StartsWith.Equals(input.StartsWith))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.DoesNotExist != null)
                    hashCode = hashCode * 59 + this.DoesNotExist.GetHashCode();
                if (this.Exists != null)
                    hashCode = hashCode * 59 + this.Exists.GetHashCode();
                if (this.Is != null)
                    hashCode = hashCode * 59 + this.Is.GetHashCode();
                if (this.IsNot != null)
                    hashCode = hashCode * 59 + this.IsNot.GetHashCode();
                if (this.StartsWith != null)
                    hashCode = hashCode * 59 + this.StartsWith.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
