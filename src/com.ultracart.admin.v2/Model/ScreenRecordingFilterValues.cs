/* 
 * UltraCart Rest API V2
 *
 * UltraCart REST API Version 2
 *
 * OpenAPI spec version: 2.0.0
 * Contact: support@ultracart.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = com.ultracart.admin.v2.Client.SwaggerDateConverter;

namespace com.ultracart.admin.v2.Model
{
    /// <summary>
    /// ScreenRecordingFilterValues
    /// </summary>
    [DataContract]
    public partial class ScreenRecordingFilterValues :  IEquatable<ScreenRecordingFilterValues>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ScreenRecordingFilterValues" /> class.
        /// </summary>
        /// <param name="geolocationCountries">geolocationCountries.</param>
        /// <param name="geolocationStates">geolocationStates.</param>
        /// <param name="maxValues">maxValues.</param>
        /// <param name="pageViews">pageViews.</param>
        /// <param name="urls">urls.</param>
        /// <param name="userAgentDeviceNames">userAgentDeviceNames.</param>
        /// <param name="userAgentDeviceOsNames">userAgentDeviceOsNames.</param>
        /// <param name="userAgentDeviceOsVersions">userAgentDeviceOsVersions.</param>
        /// <param name="userAgentNames">userAgentNames.</param>
        /// <param name="userAgentOriginals">userAgentOriginals.</param>
        public ScreenRecordingFilterValues(List<string> geolocationCountries = default(List<string>), List<string> geolocationStates = default(List<string>), int? maxValues = default(int?), List<ScreenRecordingFilterValuesPageView> pageViews = default(List<ScreenRecordingFilterValuesPageView>), List<string> urls = default(List<string>), List<string> userAgentDeviceNames = default(List<string>), List<string> userAgentDeviceOsNames = default(List<string>), List<string> userAgentDeviceOsVersions = default(List<string>), List<string> userAgentNames = default(List<string>), List<string> userAgentOriginals = default(List<string>))
        {
            this.GeolocationCountries = geolocationCountries;
            this.GeolocationStates = geolocationStates;
            this.MaxValues = maxValues;
            this.PageViews = pageViews;
            this.Urls = urls;
            this.UserAgentDeviceNames = userAgentDeviceNames;
            this.UserAgentDeviceOsNames = userAgentDeviceOsNames;
            this.UserAgentDeviceOsVersions = userAgentDeviceOsVersions;
            this.UserAgentNames = userAgentNames;
            this.UserAgentOriginals = userAgentOriginals;
        }
        
        /// <summary>
        /// Gets or Sets GeolocationCountries
        /// </summary>
        [DataMember(Name="geolocation_countries", EmitDefaultValue=false)]
        public List<string> GeolocationCountries { get; set; }

        /// <summary>
        /// Gets or Sets GeolocationStates
        /// </summary>
        [DataMember(Name="geolocation_states", EmitDefaultValue=false)]
        public List<string> GeolocationStates { get; set; }

        /// <summary>
        /// Gets or Sets MaxValues
        /// </summary>
        [DataMember(Name="max_values", EmitDefaultValue=false)]
        public int? MaxValues { get; set; }

        /// <summary>
        /// Gets or Sets PageViews
        /// </summary>
        [DataMember(Name="page_views", EmitDefaultValue=false)]
        public List<ScreenRecordingFilterValuesPageView> PageViews { get; set; }

        /// <summary>
        /// Gets or Sets Urls
        /// </summary>
        [DataMember(Name="urls", EmitDefaultValue=false)]
        public List<string> Urls { get; set; }

        /// <summary>
        /// Gets or Sets UserAgentDeviceNames
        /// </summary>
        [DataMember(Name="user_agent_device_names", EmitDefaultValue=false)]
        public List<string> UserAgentDeviceNames { get; set; }

        /// <summary>
        /// Gets or Sets UserAgentDeviceOsNames
        /// </summary>
        [DataMember(Name="user_agent_device_os_names", EmitDefaultValue=false)]
        public List<string> UserAgentDeviceOsNames { get; set; }

        /// <summary>
        /// Gets or Sets UserAgentDeviceOsVersions
        /// </summary>
        [DataMember(Name="user_agent_device_os_versions", EmitDefaultValue=false)]
        public List<string> UserAgentDeviceOsVersions { get; set; }

        /// <summary>
        /// Gets or Sets UserAgentNames
        /// </summary>
        [DataMember(Name="user_agent_names", EmitDefaultValue=false)]
        public List<string> UserAgentNames { get; set; }

        /// <summary>
        /// Gets or Sets UserAgentOriginals
        /// </summary>
        [DataMember(Name="user_agent_originals", EmitDefaultValue=false)]
        public List<string> UserAgentOriginals { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ScreenRecordingFilterValues {\n");
            sb.Append("  GeolocationCountries: ").Append(GeolocationCountries).Append("\n");
            sb.Append("  GeolocationStates: ").Append(GeolocationStates).Append("\n");
            sb.Append("  MaxValues: ").Append(MaxValues).Append("\n");
            sb.Append("  PageViews: ").Append(PageViews).Append("\n");
            sb.Append("  Urls: ").Append(Urls).Append("\n");
            sb.Append("  UserAgentDeviceNames: ").Append(UserAgentDeviceNames).Append("\n");
            sb.Append("  UserAgentDeviceOsNames: ").Append(UserAgentDeviceOsNames).Append("\n");
            sb.Append("  UserAgentDeviceOsVersions: ").Append(UserAgentDeviceOsVersions).Append("\n");
            sb.Append("  UserAgentNames: ").Append(UserAgentNames).Append("\n");
            sb.Append("  UserAgentOriginals: ").Append(UserAgentOriginals).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ScreenRecordingFilterValues);
        }

        /// <summary>
        /// Returns true if ScreenRecordingFilterValues instances are equal
        /// </summary>
        /// <param name="input">Instance of ScreenRecordingFilterValues to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ScreenRecordingFilterValues input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.GeolocationCountries == input.GeolocationCountries ||
                    this.GeolocationCountries != null &&
                    this.GeolocationCountries.SequenceEqual(input.GeolocationCountries)
                ) && 
                (
                    this.GeolocationStates == input.GeolocationStates ||
                    this.GeolocationStates != null &&
                    this.GeolocationStates.SequenceEqual(input.GeolocationStates)
                ) && 
                (
                    this.MaxValues == input.MaxValues ||
                    (this.MaxValues != null &&
                    this.MaxValues.Equals(input.MaxValues))
                ) && 
                (
                    this.PageViews == input.PageViews ||
                    this.PageViews != null &&
                    this.PageViews.SequenceEqual(input.PageViews)
                ) && 
                (
                    this.Urls == input.Urls ||
                    this.Urls != null &&
                    this.Urls.SequenceEqual(input.Urls)
                ) && 
                (
                    this.UserAgentDeviceNames == input.UserAgentDeviceNames ||
                    this.UserAgentDeviceNames != null &&
                    this.UserAgentDeviceNames.SequenceEqual(input.UserAgentDeviceNames)
                ) && 
                (
                    this.UserAgentDeviceOsNames == input.UserAgentDeviceOsNames ||
                    this.UserAgentDeviceOsNames != null &&
                    this.UserAgentDeviceOsNames.SequenceEqual(input.UserAgentDeviceOsNames)
                ) && 
                (
                    this.UserAgentDeviceOsVersions == input.UserAgentDeviceOsVersions ||
                    this.UserAgentDeviceOsVersions != null &&
                    this.UserAgentDeviceOsVersions.SequenceEqual(input.UserAgentDeviceOsVersions)
                ) && 
                (
                    this.UserAgentNames == input.UserAgentNames ||
                    this.UserAgentNames != null &&
                    this.UserAgentNames.SequenceEqual(input.UserAgentNames)
                ) && 
                (
                    this.UserAgentOriginals == input.UserAgentOriginals ||
                    this.UserAgentOriginals != null &&
                    this.UserAgentOriginals.SequenceEqual(input.UserAgentOriginals)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.GeolocationCountries != null)
                    hashCode = hashCode * 59 + this.GeolocationCountries.GetHashCode();
                if (this.GeolocationStates != null)
                    hashCode = hashCode * 59 + this.GeolocationStates.GetHashCode();
                if (this.MaxValues != null)
                    hashCode = hashCode * 59 + this.MaxValues.GetHashCode();
                if (this.PageViews != null)
                    hashCode = hashCode * 59 + this.PageViews.GetHashCode();
                if (this.Urls != null)
                    hashCode = hashCode * 59 + this.Urls.GetHashCode();
                if (this.UserAgentDeviceNames != null)
                    hashCode = hashCode * 59 + this.UserAgentDeviceNames.GetHashCode();
                if (this.UserAgentDeviceOsNames != null)
                    hashCode = hashCode * 59 + this.UserAgentDeviceOsNames.GetHashCode();
                if (this.UserAgentDeviceOsVersions != null)
                    hashCode = hashCode * 59 + this.UserAgentDeviceOsVersions.GetHashCode();
                if (this.UserAgentNames != null)
                    hashCode = hashCode * 59 + this.UserAgentNames.GetHashCode();
                if (this.UserAgentOriginals != null)
                    hashCode = hashCode * 59 + this.UserAgentOriginals.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
