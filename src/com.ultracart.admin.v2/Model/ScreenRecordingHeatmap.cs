/* 
 * UltraCart Rest API V2
 *
 * UltraCart REST API Version 2
 *
 * OpenAPI spec version: 2.0.0
 * Contact: support@ultracart.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = com.ultracart.admin.v2.Client.SwaggerDateConverter;

namespace com.ultracart.admin.v2.Model
{
    /// <summary>
    /// ScreenRecordingHeatmap
    /// </summary>
    [DataContract]
    public partial class ScreenRecordingHeatmap :  IEquatable<ScreenRecordingHeatmap>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ScreenRecordingHeatmap" /> class.
        /// </summary>
        /// <param name="largeClickUrl">largeClickUrl.</param>
        /// <param name="largeMovementUrl">largeMovementUrl.</param>
        /// <param name="largeRegularUrl">largeRegularUrl.</param>
        /// <param name="largeScrollUrl">largeScrollUrl.</param>
        /// <param name="mediumClickUrl">mediumClickUrl.</param>
        /// <param name="mediumMovementUrl">mediumMovementUrl.</param>
        /// <param name="mediumRegularUrl">mediumRegularUrl.</param>
        /// <param name="mediumScrollUrl">mediumScrollUrl.</param>
        /// <param name="smallClickUrl">smallClickUrl.</param>
        /// <param name="smallMovementUrl">smallMovementUrl.</param>
        /// <param name="smallRegularUrl">smallRegularUrl.</param>
        /// <param name="smallScrollUrl">smallScrollUrl.</param>
        public ScreenRecordingHeatmap(string largeClickUrl = default(string), string largeMovementUrl = default(string), string largeRegularUrl = default(string), string largeScrollUrl = default(string), string mediumClickUrl = default(string), string mediumMovementUrl = default(string), string mediumRegularUrl = default(string), string mediumScrollUrl = default(string), string smallClickUrl = default(string), string smallMovementUrl = default(string), string smallRegularUrl = default(string), string smallScrollUrl = default(string))
        {
            this.LargeClickUrl = largeClickUrl;
            this.LargeMovementUrl = largeMovementUrl;
            this.LargeRegularUrl = largeRegularUrl;
            this.LargeScrollUrl = largeScrollUrl;
            this.MediumClickUrl = mediumClickUrl;
            this.MediumMovementUrl = mediumMovementUrl;
            this.MediumRegularUrl = mediumRegularUrl;
            this.MediumScrollUrl = mediumScrollUrl;
            this.SmallClickUrl = smallClickUrl;
            this.SmallMovementUrl = smallMovementUrl;
            this.SmallRegularUrl = smallRegularUrl;
            this.SmallScrollUrl = smallScrollUrl;
        }
        
        /// <summary>
        /// Gets or Sets LargeClickUrl
        /// </summary>
        [DataMember(Name="large_click_url", EmitDefaultValue=false)]
        public string LargeClickUrl { get; set; }

        /// <summary>
        /// Gets or Sets LargeMovementUrl
        /// </summary>
        [DataMember(Name="large_movement_url", EmitDefaultValue=false)]
        public string LargeMovementUrl { get; set; }

        /// <summary>
        /// Gets or Sets LargeRegularUrl
        /// </summary>
        [DataMember(Name="large_regular_url", EmitDefaultValue=false)]
        public string LargeRegularUrl { get; set; }

        /// <summary>
        /// Gets or Sets LargeScrollUrl
        /// </summary>
        [DataMember(Name="large_scroll_url", EmitDefaultValue=false)]
        public string LargeScrollUrl { get; set; }

        /// <summary>
        /// Gets or Sets MediumClickUrl
        /// </summary>
        [DataMember(Name="medium_click_url", EmitDefaultValue=false)]
        public string MediumClickUrl { get; set; }

        /// <summary>
        /// Gets or Sets MediumMovementUrl
        /// </summary>
        [DataMember(Name="medium_movement_url", EmitDefaultValue=false)]
        public string MediumMovementUrl { get; set; }

        /// <summary>
        /// Gets or Sets MediumRegularUrl
        /// </summary>
        [DataMember(Name="medium_regular_url", EmitDefaultValue=false)]
        public string MediumRegularUrl { get; set; }

        /// <summary>
        /// Gets or Sets MediumScrollUrl
        /// </summary>
        [DataMember(Name="medium_scroll_url", EmitDefaultValue=false)]
        public string MediumScrollUrl { get; set; }

        /// <summary>
        /// Gets or Sets SmallClickUrl
        /// </summary>
        [DataMember(Name="small_click_url", EmitDefaultValue=false)]
        public string SmallClickUrl { get; set; }

        /// <summary>
        /// Gets or Sets SmallMovementUrl
        /// </summary>
        [DataMember(Name="small_movement_url", EmitDefaultValue=false)]
        public string SmallMovementUrl { get; set; }

        /// <summary>
        /// Gets or Sets SmallRegularUrl
        /// </summary>
        [DataMember(Name="small_regular_url", EmitDefaultValue=false)]
        public string SmallRegularUrl { get; set; }

        /// <summary>
        /// Gets or Sets SmallScrollUrl
        /// </summary>
        [DataMember(Name="small_scroll_url", EmitDefaultValue=false)]
        public string SmallScrollUrl { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ScreenRecordingHeatmap {\n");
            sb.Append("  LargeClickUrl: ").Append(LargeClickUrl).Append("\n");
            sb.Append("  LargeMovementUrl: ").Append(LargeMovementUrl).Append("\n");
            sb.Append("  LargeRegularUrl: ").Append(LargeRegularUrl).Append("\n");
            sb.Append("  LargeScrollUrl: ").Append(LargeScrollUrl).Append("\n");
            sb.Append("  MediumClickUrl: ").Append(MediumClickUrl).Append("\n");
            sb.Append("  MediumMovementUrl: ").Append(MediumMovementUrl).Append("\n");
            sb.Append("  MediumRegularUrl: ").Append(MediumRegularUrl).Append("\n");
            sb.Append("  MediumScrollUrl: ").Append(MediumScrollUrl).Append("\n");
            sb.Append("  SmallClickUrl: ").Append(SmallClickUrl).Append("\n");
            sb.Append("  SmallMovementUrl: ").Append(SmallMovementUrl).Append("\n");
            sb.Append("  SmallRegularUrl: ").Append(SmallRegularUrl).Append("\n");
            sb.Append("  SmallScrollUrl: ").Append(SmallScrollUrl).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ScreenRecordingHeatmap);
        }

        /// <summary>
        /// Returns true if ScreenRecordingHeatmap instances are equal
        /// </summary>
        /// <param name="input">Instance of ScreenRecordingHeatmap to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ScreenRecordingHeatmap input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.LargeClickUrl == input.LargeClickUrl ||
                    (this.LargeClickUrl != null &&
                    this.LargeClickUrl.Equals(input.LargeClickUrl))
                ) && 
                (
                    this.LargeMovementUrl == input.LargeMovementUrl ||
                    (this.LargeMovementUrl != null &&
                    this.LargeMovementUrl.Equals(input.LargeMovementUrl))
                ) && 
                (
                    this.LargeRegularUrl == input.LargeRegularUrl ||
                    (this.LargeRegularUrl != null &&
                    this.LargeRegularUrl.Equals(input.LargeRegularUrl))
                ) && 
                (
                    this.LargeScrollUrl == input.LargeScrollUrl ||
                    (this.LargeScrollUrl != null &&
                    this.LargeScrollUrl.Equals(input.LargeScrollUrl))
                ) && 
                (
                    this.MediumClickUrl == input.MediumClickUrl ||
                    (this.MediumClickUrl != null &&
                    this.MediumClickUrl.Equals(input.MediumClickUrl))
                ) && 
                (
                    this.MediumMovementUrl == input.MediumMovementUrl ||
                    (this.MediumMovementUrl != null &&
                    this.MediumMovementUrl.Equals(input.MediumMovementUrl))
                ) && 
                (
                    this.MediumRegularUrl == input.MediumRegularUrl ||
                    (this.MediumRegularUrl != null &&
                    this.MediumRegularUrl.Equals(input.MediumRegularUrl))
                ) && 
                (
                    this.MediumScrollUrl == input.MediumScrollUrl ||
                    (this.MediumScrollUrl != null &&
                    this.MediumScrollUrl.Equals(input.MediumScrollUrl))
                ) && 
                (
                    this.SmallClickUrl == input.SmallClickUrl ||
                    (this.SmallClickUrl != null &&
                    this.SmallClickUrl.Equals(input.SmallClickUrl))
                ) && 
                (
                    this.SmallMovementUrl == input.SmallMovementUrl ||
                    (this.SmallMovementUrl != null &&
                    this.SmallMovementUrl.Equals(input.SmallMovementUrl))
                ) && 
                (
                    this.SmallRegularUrl == input.SmallRegularUrl ||
                    (this.SmallRegularUrl != null &&
                    this.SmallRegularUrl.Equals(input.SmallRegularUrl))
                ) && 
                (
                    this.SmallScrollUrl == input.SmallScrollUrl ||
                    (this.SmallScrollUrl != null &&
                    this.SmallScrollUrl.Equals(input.SmallScrollUrl))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.LargeClickUrl != null)
                    hashCode = hashCode * 59 + this.LargeClickUrl.GetHashCode();
                if (this.LargeMovementUrl != null)
                    hashCode = hashCode * 59 + this.LargeMovementUrl.GetHashCode();
                if (this.LargeRegularUrl != null)
                    hashCode = hashCode * 59 + this.LargeRegularUrl.GetHashCode();
                if (this.LargeScrollUrl != null)
                    hashCode = hashCode * 59 + this.LargeScrollUrl.GetHashCode();
                if (this.MediumClickUrl != null)
                    hashCode = hashCode * 59 + this.MediumClickUrl.GetHashCode();
                if (this.MediumMovementUrl != null)
                    hashCode = hashCode * 59 + this.MediumMovementUrl.GetHashCode();
                if (this.MediumRegularUrl != null)
                    hashCode = hashCode * 59 + this.MediumRegularUrl.GetHashCode();
                if (this.MediumScrollUrl != null)
                    hashCode = hashCode * 59 + this.MediumScrollUrl.GetHashCode();
                if (this.SmallClickUrl != null)
                    hashCode = hashCode * 59 + this.SmallClickUrl.GetHashCode();
                if (this.SmallMovementUrl != null)
                    hashCode = hashCode * 59 + this.SmallMovementUrl.GetHashCode();
                if (this.SmallRegularUrl != null)
                    hashCode = hashCode * 59 + this.SmallRegularUrl.GetHashCode();
                if (this.SmallScrollUrl != null)
                    hashCode = hashCode * 59 + this.SmallScrollUrl.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
