/*
 * UltraCart Rest API V2
 *
 * UltraCart REST API Version 2
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@ultracart.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = com.ultracart.admin.v2.Client.OpenAPIDateConverter;

namespace com.ultracart.admin.v2.Model
{
    /// <summary>
    /// ScreenRecordingHeatmapRequest
    /// </summary>
    [DataContract]
    public partial class ScreenRecordingHeatmapRequest :  IEquatable<ScreenRecordingHeatmapRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ScreenRecordingHeatmapRequest" /> class.
        /// </summary>
        /// <param name="range">range.</param>
        /// <param name="screenSizes">screenSizes.</param>
        /// <param name="url">url.</param>
        public ScreenRecordingHeatmapRequest(ScreenRecordingFilterRangeDate range = default(ScreenRecordingFilterRangeDate), List<string> screenSizes = default(List<string>), string url = default(string))
        {
            this.Range = range;
            this.ScreenSizes = screenSizes;
            this.Url = url;
        }

        /// <summary>
        /// Gets or Sets Range
        /// </summary>
        [DataMember(Name="range", EmitDefaultValue=false)]
        public ScreenRecordingFilterRangeDate Range { get; set; }

        /// <summary>
        /// Gets or Sets ScreenSizes
        /// </summary>
        [DataMember(Name="screen_sizes", EmitDefaultValue=false)]
        public List<string> ScreenSizes { get; set; }

        /// <summary>
        /// Gets or Sets Url
        /// </summary>
        [DataMember(Name="url", EmitDefaultValue=false)]
        public string Url { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ScreenRecordingHeatmapRequest {\n");
            sb.Append("  Range: ").Append(Range).Append("\n");
            sb.Append("  ScreenSizes: ").Append(ScreenSizes).Append("\n");
            sb.Append("  Url: ").Append(Url).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ScreenRecordingHeatmapRequest);
        }

        /// <summary>
        /// Returns true if ScreenRecordingHeatmapRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of ScreenRecordingHeatmapRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ScreenRecordingHeatmapRequest input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Range == input.Range ||
                    (this.Range != null &&
                    this.Range.Equals(input.Range))
                ) && 
                (
                    this.ScreenSizes == input.ScreenSizes ||
                    this.ScreenSizes != null &&
                    input.ScreenSizes != null &&
                    this.ScreenSizes.SequenceEqual(input.ScreenSizes)
                ) && 
                (
                    this.Url == input.Url ||
                    (this.Url != null &&
                    this.Url.Equals(input.Url))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Range != null)
                    hashCode = hashCode * 59 + this.Range.GetHashCode();
                if (this.ScreenSizes != null)
                    hashCode = hashCode * 59 + this.ScreenSizes.GetHashCode();
                if (this.Url != null)
                    hashCode = hashCode * 59 + this.Url.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
