/* 
 * UltraCart Rest API V2
 *
 * UltraCart REST API Version 2
 *
 * OpenAPI spec version: 2.0.0
 * Contact: support@ultracart.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = com.ultracart.admin.v2.Client.SwaggerDateConverter;

namespace com.ultracart.admin.v2.Model
{
    /// <summary>
    /// ScreenRecordingHeatmapUrl
    /// </summary>
    [DataContract]
    public partial class ScreenRecordingHeatmapUrl :  IEquatable<ScreenRecordingHeatmapUrl>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ScreenRecordingHeatmapUrl" /> class.
        /// </summary>
        /// <param name="histogramData">histogramData.</param>
        /// <param name="histogramInterval">histogramInterval.</param>
        /// <param name="histogramStartDts">histogramStartDts.</param>
        /// <param name="sessionCount">sessionCount.</param>
        /// <param name="url">url.</param>
        public ScreenRecordingHeatmapUrl(List<int?> histogramData = default(List<int?>), string histogramInterval = default(string), string histogramStartDts = default(string), int? sessionCount = default(int?), string url = default(string))
        {
            this.HistogramData = histogramData;
            this.HistogramInterval = histogramInterval;
            this.HistogramStartDts = histogramStartDts;
            this.SessionCount = sessionCount;
            this.Url = url;
        }
        
        /// <summary>
        /// Gets or Sets HistogramData
        /// </summary>
        [DataMember(Name="histogram_data", EmitDefaultValue=false)]
        public List<int?> HistogramData { get; set; }

        /// <summary>
        /// Gets or Sets HistogramInterval
        /// </summary>
        [DataMember(Name="histogram_interval", EmitDefaultValue=false)]
        public string HistogramInterval { get; set; }

        /// <summary>
        /// Gets or Sets HistogramStartDts
        /// </summary>
        [DataMember(Name="histogram_start_dts", EmitDefaultValue=false)]
        public string HistogramStartDts { get; set; }

        /// <summary>
        /// Gets or Sets SessionCount
        /// </summary>
        [DataMember(Name="session_count", EmitDefaultValue=false)]
        public int? SessionCount { get; set; }

        /// <summary>
        /// Gets or Sets Url
        /// </summary>
        [DataMember(Name="url", EmitDefaultValue=false)]
        public string Url { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ScreenRecordingHeatmapUrl {\n");
            sb.Append("  HistogramData: ").Append(HistogramData).Append("\n");
            sb.Append("  HistogramInterval: ").Append(HistogramInterval).Append("\n");
            sb.Append("  HistogramStartDts: ").Append(HistogramStartDts).Append("\n");
            sb.Append("  SessionCount: ").Append(SessionCount).Append("\n");
            sb.Append("  Url: ").Append(Url).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ScreenRecordingHeatmapUrl);
        }

        /// <summary>
        /// Returns true if ScreenRecordingHeatmapUrl instances are equal
        /// </summary>
        /// <param name="input">Instance of ScreenRecordingHeatmapUrl to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ScreenRecordingHeatmapUrl input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.HistogramData == input.HistogramData ||
                    this.HistogramData != null &&
                    this.HistogramData.SequenceEqual(input.HistogramData)
                ) && 
                (
                    this.HistogramInterval == input.HistogramInterval ||
                    (this.HistogramInterval != null &&
                    this.HistogramInterval.Equals(input.HistogramInterval))
                ) && 
                (
                    this.HistogramStartDts == input.HistogramStartDts ||
                    (this.HistogramStartDts != null &&
                    this.HistogramStartDts.Equals(input.HistogramStartDts))
                ) && 
                (
                    this.SessionCount == input.SessionCount ||
                    (this.SessionCount != null &&
                    this.SessionCount.Equals(input.SessionCount))
                ) && 
                (
                    this.Url == input.Url ||
                    (this.Url != null &&
                    this.Url.Equals(input.Url))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.HistogramData != null)
                    hashCode = hashCode * 59 + this.HistogramData.GetHashCode();
                if (this.HistogramInterval != null)
                    hashCode = hashCode * 59 + this.HistogramInterval.GetHashCode();
                if (this.HistogramStartDts != null)
                    hashCode = hashCode * 59 + this.HistogramStartDts.GetHashCode();
                if (this.SessionCount != null)
                    hashCode = hashCode * 59 + this.SessionCount.GetHashCode();
                if (this.Url != null)
                    hashCode = hashCode * 59 + this.Url.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
