/*
 * UltraCart Rest API V2
 *
 * UltraCart REST API Version 2
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@ultracart.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = com.ultracart.admin.v2.Client.OpenAPIDateConverter;

namespace com.ultracart.admin.v2.Model
{
    /// <summary>
    /// ScreenRecordingMultifield
    /// </summary>
    [DataContract]
    public partial class ScreenRecordingMultifield :  IEquatable<ScreenRecordingMultifield>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ScreenRecordingMultifield" /> class.
        /// </summary>
        /// <param name="bd">bd.</param>
        /// <param name="_bool">_bool.</param>
        /// <param name="json">json.</param>
        /// <param name="num">num.</param>
        /// <param name="text">text.</param>
        public ScreenRecordingMultifield(decimal bd = default(decimal), bool _bool = default(bool), string json = default(string), long num = default(long), string text = default(string))
        {
            this.Bd = bd;
            this.Bool = _bool;
            this.Json = json;
            this.Num = num;
            this.Text = text;
        }

        /// <summary>
        /// Gets or Sets Bd
        /// </summary>
        [DataMember(Name="bd", EmitDefaultValue=false)]
        public decimal Bd { get; set; }

        /// <summary>
        /// Gets or Sets Bool
        /// </summary>
        [DataMember(Name="bool", EmitDefaultValue=false)]
        public bool Bool { get; set; }

        /// <summary>
        /// Gets or Sets Json
        /// </summary>
        [DataMember(Name="json", EmitDefaultValue=false)]
        public string Json { get; set; }

        /// <summary>
        /// Gets or Sets Num
        /// </summary>
        [DataMember(Name="num", EmitDefaultValue=false)]
        public long Num { get; set; }

        /// <summary>
        /// Gets or Sets Text
        /// </summary>
        [DataMember(Name="text", EmitDefaultValue=false)]
        public string Text { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ScreenRecordingMultifield {\n");
            sb.Append("  Bd: ").Append(Bd).Append("\n");
            sb.Append("  Bool: ").Append(Bool).Append("\n");
            sb.Append("  Json: ").Append(Json).Append("\n");
            sb.Append("  Num: ").Append(Num).Append("\n");
            sb.Append("  Text: ").Append(Text).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ScreenRecordingMultifield);
        }

        /// <summary>
        /// Returns true if ScreenRecordingMultifield instances are equal
        /// </summary>
        /// <param name="input">Instance of ScreenRecordingMultifield to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ScreenRecordingMultifield input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Bd == input.Bd ||
                    (this.Bd != null &&
                    this.Bd.Equals(input.Bd))
                ) && 
                (
                    this.Bool == input.Bool ||
                    (this.Bool != null &&
                    this.Bool.Equals(input.Bool))
                ) && 
                (
                    this.Json == input.Json ||
                    (this.Json != null &&
                    this.Json.Equals(input.Json))
                ) && 
                (
                    this.Num == input.Num ||
                    (this.Num != null &&
                    this.Num.Equals(input.Num))
                ) && 
                (
                    this.Text == input.Text ||
                    (this.Text != null &&
                    this.Text.Equals(input.Text))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Bd != null)
                    hashCode = hashCode * 59 + this.Bd.GetHashCode();
                if (this.Bool != null)
                    hashCode = hashCode * 59 + this.Bool.GetHashCode();
                if (this.Json != null)
                    hashCode = hashCode * 59 + this.Json.GetHashCode();
                if (this.Num != null)
                    hashCode = hashCode * 59 + this.Num.GetHashCode();
                if (this.Text != null)
                    hashCode = hashCode * 59 + this.Text.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
