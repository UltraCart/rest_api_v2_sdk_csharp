/*
 * UltraCart Rest API V2
 *
 * UltraCart REST API Version 2
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@ultracart.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = com.ultracart.admin.v2.Client.OpenAPIDateConverter;

namespace com.ultracart.admin.v2.Model
{
    /// <summary>
    /// ScreenRecordingPageViewEvent
    /// </summary>
    [DataContract]
    public partial class ScreenRecordingPageViewEvent :  IEquatable<ScreenRecordingPageViewEvent>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ScreenRecordingPageViewEvent" /> class.
        /// </summary>
        /// <param name="name">name.</param>
        /// <param name="_params">_params.</param>
        /// <param name="priorPageView">priorPageView.</param>
        /// <param name="subText">subText.</param>
        /// <param name="timestamp">Timestamp of the event.</param>
        /// <param name="ts">ts.</param>
        public ScreenRecordingPageViewEvent(string name = default(string), List<ScreenRecordingPageViewEventParameter> _params = default(List<ScreenRecordingPageViewEventParameter>), bool priorPageView = default(bool), string subText = default(string), string timestamp = default(string), long ts = default(long))
        {
            this.Name = name;
            this.Params = _params;
            this.PriorPageView = priorPageView;
            this.SubText = subText;
            this.Timestamp = timestamp;
            this.Ts = ts;
        }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Params
        /// </summary>
        [DataMember(Name="params", EmitDefaultValue=false)]
        public List<ScreenRecordingPageViewEventParameter> Params { get; set; }

        /// <summary>
        /// Gets or Sets PriorPageView
        /// </summary>
        [DataMember(Name="prior_page_view", EmitDefaultValue=false)]
        public bool PriorPageView { get; set; }

        /// <summary>
        /// Gets or Sets SubText
        /// </summary>
        [DataMember(Name="sub_text", EmitDefaultValue=false)]
        public string SubText { get; set; }

        /// <summary>
        /// Timestamp of the event
        /// </summary>
        /// <value>Timestamp of the event</value>
        [DataMember(Name="timestamp", EmitDefaultValue=false)]
        public string Timestamp { get; set; }

        /// <summary>
        /// Gets or Sets Ts
        /// </summary>
        [DataMember(Name="ts", EmitDefaultValue=false)]
        public long Ts { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ScreenRecordingPageViewEvent {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Params: ").Append(Params).Append("\n");
            sb.Append("  PriorPageView: ").Append(PriorPageView).Append("\n");
            sb.Append("  SubText: ").Append(SubText).Append("\n");
            sb.Append("  Timestamp: ").Append(Timestamp).Append("\n");
            sb.Append("  Ts: ").Append(Ts).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ScreenRecordingPageViewEvent);
        }

        /// <summary>
        /// Returns true if ScreenRecordingPageViewEvent instances are equal
        /// </summary>
        /// <param name="input">Instance of ScreenRecordingPageViewEvent to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ScreenRecordingPageViewEvent input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Params == input.Params ||
                    this.Params != null &&
                    input.Params != null &&
                    this.Params.SequenceEqual(input.Params)
                ) && 
                (
                    this.PriorPageView == input.PriorPageView ||
                    (this.PriorPageView != null &&
                    this.PriorPageView.Equals(input.PriorPageView))
                ) && 
                (
                    this.SubText == input.SubText ||
                    (this.SubText != null &&
                    this.SubText.Equals(input.SubText))
                ) && 
                (
                    this.Timestamp == input.Timestamp ||
                    (this.Timestamp != null &&
                    this.Timestamp.Equals(input.Timestamp))
                ) && 
                (
                    this.Ts == input.Ts ||
                    (this.Ts != null &&
                    this.Ts.Equals(input.Ts))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Params != null)
                    hashCode = hashCode * 59 + this.Params.GetHashCode();
                if (this.PriorPageView != null)
                    hashCode = hashCode * 59 + this.PriorPageView.GetHashCode();
                if (this.SubText != null)
                    hashCode = hashCode * 59 + this.SubText.GetHashCode();
                if (this.Timestamp != null)
                    hashCode = hashCode * 59 + this.Timestamp.GetHashCode();
                if (this.Ts != null)
                    hashCode = hashCode * 59 + this.Ts.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
