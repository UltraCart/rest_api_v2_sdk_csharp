/*
 * UltraCart Rest API V2
 *
 * UltraCart REST API Version 2
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@ultracart.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = com.ultracart.admin.v2.Client.OpenAPIDateConverter;

namespace com.ultracart.admin.v2.Model
{
    /// <summary>
    /// ScreenRecordingSegment
    /// </summary>
    [DataContract]
    public partial class ScreenRecordingSegment :  IEquatable<ScreenRecordingSegment>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ScreenRecordingSegment" /> class.
        /// </summary>
        /// <param name="createDts">createDts.</param>
        /// <param name="description">description.</param>
        /// <param name="filter">filter.</param>
        /// <param name="histogramData">histogramData.</param>
        /// <param name="histogramInterval">histogramInterval.</param>
        /// <param name="histogramStartDts">histogramStartDts.</param>
        /// <param name="name">name.</param>
        /// <param name="screenRecordingSegmentOid">screenRecordingSegmentOid.</param>
        /// <param name="sessionCount">sessionCount.</param>
        /// <param name="sessionCountLastUpdateDts">sessionCountLastUpdateDts.</param>
        public ScreenRecordingSegment(string createDts = default(string), string description = default(string), ScreenRecordingFilter filter = default(ScreenRecordingFilter), List<int> histogramData = default(List<int>), string histogramInterval = default(string), string histogramStartDts = default(string), string name = default(string), int screenRecordingSegmentOid = default(int), int sessionCount = default(int), string sessionCountLastUpdateDts = default(string))
        {
            this.CreateDts = createDts;
            this.Description = description;
            this.Filter = filter;
            this.HistogramData = histogramData;
            this.HistogramInterval = histogramInterval;
            this.HistogramStartDts = histogramStartDts;
            this.Name = name;
            this.ScreenRecordingSegmentOid = screenRecordingSegmentOid;
            this.SessionCount = sessionCount;
            this.SessionCountLastUpdateDts = sessionCountLastUpdateDts;
        }

        /// <summary>
        /// Gets or Sets CreateDts
        /// </summary>
        [DataMember(Name="create_dts", EmitDefaultValue=false)]
        public string CreateDts { get; set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }

        /// <summary>
        /// Gets or Sets Filter
        /// </summary>
        [DataMember(Name="filter", EmitDefaultValue=false)]
        public ScreenRecordingFilter Filter { get; set; }

        /// <summary>
        /// Gets or Sets HistogramData
        /// </summary>
        [DataMember(Name="histogram_data", EmitDefaultValue=false)]
        public List<int> HistogramData { get; set; }

        /// <summary>
        /// Gets or Sets HistogramInterval
        /// </summary>
        [DataMember(Name="histogram_interval", EmitDefaultValue=false)]
        public string HistogramInterval { get; set; }

        /// <summary>
        /// Gets or Sets HistogramStartDts
        /// </summary>
        [DataMember(Name="histogram_start_dts", EmitDefaultValue=false)]
        public string HistogramStartDts { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets ScreenRecordingSegmentOid
        /// </summary>
        [DataMember(Name="screen_recording_segment_oid", EmitDefaultValue=false)]
        public int ScreenRecordingSegmentOid { get; set; }

        /// <summary>
        /// Gets or Sets SessionCount
        /// </summary>
        [DataMember(Name="session_count", EmitDefaultValue=false)]
        public int SessionCount { get; set; }

        /// <summary>
        /// Gets or Sets SessionCountLastUpdateDts
        /// </summary>
        [DataMember(Name="session_count_last_update_dts", EmitDefaultValue=false)]
        public string SessionCountLastUpdateDts { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ScreenRecordingSegment {\n");
            sb.Append("  CreateDts: ").Append(CreateDts).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Filter: ").Append(Filter).Append("\n");
            sb.Append("  HistogramData: ").Append(HistogramData).Append("\n");
            sb.Append("  HistogramInterval: ").Append(HistogramInterval).Append("\n");
            sb.Append("  HistogramStartDts: ").Append(HistogramStartDts).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  ScreenRecordingSegmentOid: ").Append(ScreenRecordingSegmentOid).Append("\n");
            sb.Append("  SessionCount: ").Append(SessionCount).Append("\n");
            sb.Append("  SessionCountLastUpdateDts: ").Append(SessionCountLastUpdateDts).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ScreenRecordingSegment);
        }

        /// <summary>
        /// Returns true if ScreenRecordingSegment instances are equal
        /// </summary>
        /// <param name="input">Instance of ScreenRecordingSegment to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ScreenRecordingSegment input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.CreateDts == input.CreateDts ||
                    (this.CreateDts != null &&
                    this.CreateDts.Equals(input.CreateDts))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.Filter == input.Filter ||
                    (this.Filter != null &&
                    this.Filter.Equals(input.Filter))
                ) && 
                (
                    this.HistogramData == input.HistogramData ||
                    this.HistogramData != null &&
                    input.HistogramData != null &&
                    this.HistogramData.SequenceEqual(input.HistogramData)
                ) && 
                (
                    this.HistogramInterval == input.HistogramInterval ||
                    (this.HistogramInterval != null &&
                    this.HistogramInterval.Equals(input.HistogramInterval))
                ) && 
                (
                    this.HistogramStartDts == input.HistogramStartDts ||
                    (this.HistogramStartDts != null &&
                    this.HistogramStartDts.Equals(input.HistogramStartDts))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.ScreenRecordingSegmentOid == input.ScreenRecordingSegmentOid ||
                    (this.ScreenRecordingSegmentOid != null &&
                    this.ScreenRecordingSegmentOid.Equals(input.ScreenRecordingSegmentOid))
                ) && 
                (
                    this.SessionCount == input.SessionCount ||
                    (this.SessionCount != null &&
                    this.SessionCount.Equals(input.SessionCount))
                ) && 
                (
                    this.SessionCountLastUpdateDts == input.SessionCountLastUpdateDts ||
                    (this.SessionCountLastUpdateDts != null &&
                    this.SessionCountLastUpdateDts.Equals(input.SessionCountLastUpdateDts))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.CreateDts != null)
                    hashCode = hashCode * 59 + this.CreateDts.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                if (this.Filter != null)
                    hashCode = hashCode * 59 + this.Filter.GetHashCode();
                if (this.HistogramData != null)
                    hashCode = hashCode * 59 + this.HistogramData.GetHashCode();
                if (this.HistogramInterval != null)
                    hashCode = hashCode * 59 + this.HistogramInterval.GetHashCode();
                if (this.HistogramStartDts != null)
                    hashCode = hashCode * 59 + this.HistogramStartDts.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.ScreenRecordingSegmentOid != null)
                    hashCode = hashCode * 59 + this.ScreenRecordingSegmentOid.GetHashCode();
                if (this.SessionCount != null)
                    hashCode = hashCode * 59 + this.SessionCount.GetHashCode();
                if (this.SessionCountLastUpdateDts != null)
                    hashCode = hashCode * 59 + this.SessionCountLastUpdateDts.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
