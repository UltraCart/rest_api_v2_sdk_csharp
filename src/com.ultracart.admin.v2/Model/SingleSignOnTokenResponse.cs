/* 
 * UltraCart Rest API V2
 *
 * UltraCart REST API Version 2
 *
 * OpenAPI spec version: 2.0.0
 * Contact: support@ultracart.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = com.ultracart.admin.v2.Client.SwaggerDateConverter;

namespace com.ultracart.admin.v2.Model
{
    /// <summary>
    /// SingleSignOnTokenResponse
    /// </summary>
    [DataContract]
    public partial class SingleSignOnTokenResponse :  IEquatable<SingleSignOnTokenResponse>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SingleSignOnTokenResponse" /> class.
        /// </summary>
        /// <param name="expirationDts">Expiration date/time after which time the key is no longer valid.</param>
        /// <param name="ipAddress">IP address of the user which we recommend you lock the simple key&#39;s usage to..</param>
        /// <param name="simpleKey">The simple key that can then be used to make SDK calls on the users behalf..</param>
        public SingleSignOnTokenResponse(string expirationDts = default(string), string ipAddress = default(string), string simpleKey = default(string))
        {
            this.ExpirationDts = expirationDts;
            this.IpAddress = ipAddress;
            this.SimpleKey = simpleKey;
        }
        
        /// <summary>
        /// Expiration date/time after which time the key is no longer valid
        /// </summary>
        /// <value>Expiration date/time after which time the key is no longer valid</value>
        [DataMember(Name="expiration_dts", EmitDefaultValue=false)]
        public string ExpirationDts { get; set; }

        /// <summary>
        /// IP address of the user which we recommend you lock the simple key&#39;s usage to.
        /// </summary>
        /// <value>IP address of the user which we recommend you lock the simple key&#39;s usage to.</value>
        [DataMember(Name="ip_address", EmitDefaultValue=false)]
        public string IpAddress { get; set; }

        /// <summary>
        /// The simple key that can then be used to make SDK calls on the users behalf.
        /// </summary>
        /// <value>The simple key that can then be used to make SDK calls on the users behalf.</value>
        [DataMember(Name="simple_key", EmitDefaultValue=false)]
        public string SimpleKey { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SingleSignOnTokenResponse {\n");
            sb.Append("  ExpirationDts: ").Append(ExpirationDts).Append("\n");
            sb.Append("  IpAddress: ").Append(IpAddress).Append("\n");
            sb.Append("  SimpleKey: ").Append(SimpleKey).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SingleSignOnTokenResponse);
        }

        /// <summary>
        /// Returns true if SingleSignOnTokenResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of SingleSignOnTokenResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SingleSignOnTokenResponse input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ExpirationDts == input.ExpirationDts ||
                    (this.ExpirationDts != null &&
                    this.ExpirationDts.Equals(input.ExpirationDts))
                ) && 
                (
                    this.IpAddress == input.IpAddress ||
                    (this.IpAddress != null &&
                    this.IpAddress.Equals(input.IpAddress))
                ) && 
                (
                    this.SimpleKey == input.SimpleKey ||
                    (this.SimpleKey != null &&
                    this.SimpleKey.Equals(input.SimpleKey))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ExpirationDts != null)
                    hashCode = hashCode * 59 + this.ExpirationDts.GetHashCode();
                if (this.IpAddress != null)
                    hashCode = hashCode * 59 + this.IpAddress.GetHashCode();
                if (this.SimpleKey != null)
                    hashCode = hashCode * 59 + this.SimpleKey.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
