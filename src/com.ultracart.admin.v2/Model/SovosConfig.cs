/* 
 * UltraCart Rest API V2
 *
 * UltraCart REST API Version 2
 *
 * OpenAPI spec version: 2.0.0
 * Contact: support@ultracart.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = com.ultracart.admin.v2.Client.SwaggerDateConverter;

namespace com.ultracart.admin.v2.Model
{
    /// <summary>
    /// SovosConfig
    /// </summary>
    [DataContract]
    public partial class SovosConfig :  IEquatable<SovosConfig>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SovosConfig" /> class.
        /// </summary>
        /// <param name="accessKey">Sovos access key.</param>
        /// <param name="estimateOnly">True if this Sovos configuration is to estimate taxes only and not report placed orders to Sovos.</param>
        /// <param name="lastTestDts">Date/time of the connection test to Sovos.</param>
        /// <param name="secretKey">Sovos secret key.</param>
        /// <param name="sendTestOrders">Send test orders through to Sovos.  The default is to not transmit test orders to Sovos..</param>
        /// <param name="testResults">Test results of the last connection test to Sovos.</param>
        /// <param name="uat">True if this Sovos configuration is currently undergoing user acceptance testing.</param>
        public SovosConfig(string accessKey = default(string), bool? estimateOnly = default(bool?), string lastTestDts = default(string), string secretKey = default(string), bool? sendTestOrders = default(bool?), string testResults = default(string), bool? uat = default(bool?))
        {
            this.AccessKey = accessKey;
            this.EstimateOnly = estimateOnly;
            this.LastTestDts = lastTestDts;
            this.SecretKey = secretKey;
            this.SendTestOrders = sendTestOrders;
            this.TestResults = testResults;
            this.Uat = uat;
        }
        
        /// <summary>
        /// Sovos access key
        /// </summary>
        /// <value>Sovos access key</value>
        [DataMember(Name="access_key", EmitDefaultValue=false)]
        public string AccessKey { get; set; }

        /// <summary>
        /// True if this Sovos configuration is to estimate taxes only and not report placed orders to Sovos
        /// </summary>
        /// <value>True if this Sovos configuration is to estimate taxes only and not report placed orders to Sovos</value>
        [DataMember(Name="estimate_only", EmitDefaultValue=false)]
        public bool? EstimateOnly { get; set; }

        /// <summary>
        /// Date/time of the connection test to Sovos
        /// </summary>
        /// <value>Date/time of the connection test to Sovos</value>
        [DataMember(Name="last_test_dts", EmitDefaultValue=false)]
        public string LastTestDts { get; set; }

        /// <summary>
        /// Sovos secret key
        /// </summary>
        /// <value>Sovos secret key</value>
        [DataMember(Name="secret_key", EmitDefaultValue=false)]
        public string SecretKey { get; set; }

        /// <summary>
        /// Send test orders through to Sovos.  The default is to not transmit test orders to Sovos.
        /// </summary>
        /// <value>Send test orders through to Sovos.  The default is to not transmit test orders to Sovos.</value>
        [DataMember(Name="send_test_orders", EmitDefaultValue=false)]
        public bool? SendTestOrders { get; set; }

        /// <summary>
        /// Test results of the last connection test to Sovos
        /// </summary>
        /// <value>Test results of the last connection test to Sovos</value>
        [DataMember(Name="test_results", EmitDefaultValue=false)]
        public string TestResults { get; set; }

        /// <summary>
        /// True if this Sovos configuration is currently undergoing user acceptance testing
        /// </summary>
        /// <value>True if this Sovos configuration is currently undergoing user acceptance testing</value>
        [DataMember(Name="uat", EmitDefaultValue=false)]
        public bool? Uat { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SovosConfig {\n");
            sb.Append("  AccessKey: ").Append(AccessKey).Append("\n");
            sb.Append("  EstimateOnly: ").Append(EstimateOnly).Append("\n");
            sb.Append("  LastTestDts: ").Append(LastTestDts).Append("\n");
            sb.Append("  SecretKey: ").Append(SecretKey).Append("\n");
            sb.Append("  SendTestOrders: ").Append(SendTestOrders).Append("\n");
            sb.Append("  TestResults: ").Append(TestResults).Append("\n");
            sb.Append("  Uat: ").Append(Uat).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SovosConfig);
        }

        /// <summary>
        /// Returns true if SovosConfig instances are equal
        /// </summary>
        /// <param name="input">Instance of SovosConfig to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SovosConfig input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.AccessKey == input.AccessKey ||
                    (this.AccessKey != null &&
                    this.AccessKey.Equals(input.AccessKey))
                ) && 
                (
                    this.EstimateOnly == input.EstimateOnly ||
                    (this.EstimateOnly != null &&
                    this.EstimateOnly.Equals(input.EstimateOnly))
                ) && 
                (
                    this.LastTestDts == input.LastTestDts ||
                    (this.LastTestDts != null &&
                    this.LastTestDts.Equals(input.LastTestDts))
                ) && 
                (
                    this.SecretKey == input.SecretKey ||
                    (this.SecretKey != null &&
                    this.SecretKey.Equals(input.SecretKey))
                ) && 
                (
                    this.SendTestOrders == input.SendTestOrders ||
                    (this.SendTestOrders != null &&
                    this.SendTestOrders.Equals(input.SendTestOrders))
                ) && 
                (
                    this.TestResults == input.TestResults ||
                    (this.TestResults != null &&
                    this.TestResults.Equals(input.TestResults))
                ) && 
                (
                    this.Uat == input.Uat ||
                    (this.Uat != null &&
                    this.Uat.Equals(input.Uat))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AccessKey != null)
                    hashCode = hashCode * 59 + this.AccessKey.GetHashCode();
                if (this.EstimateOnly != null)
                    hashCode = hashCode * 59 + this.EstimateOnly.GetHashCode();
                if (this.LastTestDts != null)
                    hashCode = hashCode * 59 + this.LastTestDts.GetHashCode();
                if (this.SecretKey != null)
                    hashCode = hashCode * 59 + this.SecretKey.GetHashCode();
                if (this.SendTestOrders != null)
                    hashCode = hashCode * 59 + this.SendTestOrders.GetHashCode();
                if (this.TestResults != null)
                    hashCode = hashCode * 59 + this.TestResults.GetHashCode();
                if (this.Uat != null)
                    hashCode = hashCode * 59 + this.Uat.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
