/*
 * UltraCart Rest API V2
 *
 * UltraCart REST API Version 2
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@ultracart.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = com.ultracart.admin.v2.Client.OpenAPIDateConverter;

namespace com.ultracart.admin.v2.Model
{
    /// <summary>
    /// TaxCountry
    /// </summary>
    [DataContract]
    public partial class TaxCountry :  IEquatable<TaxCountry>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TaxCountry" /> class.
        /// </summary>
        /// <param name="accountingCode">Accounting code for programs such as QuickBooks.</param>
        /// <param name="countryCode">Country code (2 characters.</param>
        /// <param name="countryOid">Tax record object identifier used internally by database.</param>
        /// <param name="states">States (or regions or territories) within this country.</param>
        /// <param name="taxGiftCharge">True if taxation within this jurisdiction should charge tax on gift charge.</param>
        /// <param name="taxGiftWrap">True if taxation within this jurisdiction should charge tax on gift wrap.</param>
        /// <param name="taxRate">Tax Rate.</param>
        /// <param name="taxRateFormatted">Tax rate formatted.</param>
        /// <param name="taxShipping">True if taxation within this jurisdiction should charge tax on shipping.</param>
        public TaxCountry(string accountingCode = default(string), string countryCode = default(string), int countryOid = default(int), List<TaxState> states = default(List<TaxState>), bool taxGiftCharge = default(bool), bool taxGiftWrap = default(bool), decimal taxRate = default(decimal), string taxRateFormatted = default(string), bool taxShipping = default(bool))
        {
            this.AccountingCode = accountingCode;
            this.CountryCode = countryCode;
            this.CountryOid = countryOid;
            this.States = states;
            this.TaxGiftCharge = taxGiftCharge;
            this.TaxGiftWrap = taxGiftWrap;
            this.TaxRate = taxRate;
            this.TaxRateFormatted = taxRateFormatted;
            this.TaxShipping = taxShipping;
        }

        /// <summary>
        /// Accounting code for programs such as QuickBooks
        /// </summary>
        /// <value>Accounting code for programs such as QuickBooks</value>
        [DataMember(Name="accounting_code", EmitDefaultValue=false)]
        public string AccountingCode { get; set; }

        /// <summary>
        /// Country code (2 characters
        /// </summary>
        /// <value>Country code (2 characters</value>
        [DataMember(Name="country_code", EmitDefaultValue=false)]
        public string CountryCode { get; set; }

        /// <summary>
        /// Tax record object identifier used internally by database
        /// </summary>
        /// <value>Tax record object identifier used internally by database</value>
        [DataMember(Name="country_oid", EmitDefaultValue=false)]
        public int CountryOid { get; set; }

        /// <summary>
        /// States (or regions or territories) within this country
        /// </summary>
        /// <value>States (or regions or territories) within this country</value>
        [DataMember(Name="states", EmitDefaultValue=false)]
        public List<TaxState> States { get; set; }

        /// <summary>
        /// True if taxation within this jurisdiction should charge tax on gift charge
        /// </summary>
        /// <value>True if taxation within this jurisdiction should charge tax on gift charge</value>
        [DataMember(Name="tax_gift_charge", EmitDefaultValue=false)]
        public bool TaxGiftCharge { get; set; }

        /// <summary>
        /// True if taxation within this jurisdiction should charge tax on gift wrap
        /// </summary>
        /// <value>True if taxation within this jurisdiction should charge tax on gift wrap</value>
        [DataMember(Name="tax_gift_wrap", EmitDefaultValue=false)]
        public bool TaxGiftWrap { get; set; }

        /// <summary>
        /// Tax Rate
        /// </summary>
        /// <value>Tax Rate</value>
        [DataMember(Name="tax_rate", EmitDefaultValue=false)]
        public decimal TaxRate { get; set; }

        /// <summary>
        /// Tax rate formatted
        /// </summary>
        /// <value>Tax rate formatted</value>
        [DataMember(Name="tax_rate_formatted", EmitDefaultValue=false)]
        public string TaxRateFormatted { get; set; }

        /// <summary>
        /// True if taxation within this jurisdiction should charge tax on shipping
        /// </summary>
        /// <value>True if taxation within this jurisdiction should charge tax on shipping</value>
        [DataMember(Name="tax_shipping", EmitDefaultValue=false)]
        public bool TaxShipping { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TaxCountry {\n");
            sb.Append("  AccountingCode: ").Append(AccountingCode).Append("\n");
            sb.Append("  CountryCode: ").Append(CountryCode).Append("\n");
            sb.Append("  CountryOid: ").Append(CountryOid).Append("\n");
            sb.Append("  States: ").Append(States).Append("\n");
            sb.Append("  TaxGiftCharge: ").Append(TaxGiftCharge).Append("\n");
            sb.Append("  TaxGiftWrap: ").Append(TaxGiftWrap).Append("\n");
            sb.Append("  TaxRate: ").Append(TaxRate).Append("\n");
            sb.Append("  TaxRateFormatted: ").Append(TaxRateFormatted).Append("\n");
            sb.Append("  TaxShipping: ").Append(TaxShipping).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TaxCountry);
        }

        /// <summary>
        /// Returns true if TaxCountry instances are equal
        /// </summary>
        /// <param name="input">Instance of TaxCountry to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TaxCountry input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.AccountingCode == input.AccountingCode ||
                    (this.AccountingCode != null &&
                    this.AccountingCode.Equals(input.AccountingCode))
                ) && 
                (
                    this.CountryCode == input.CountryCode ||
                    (this.CountryCode != null &&
                    this.CountryCode.Equals(input.CountryCode))
                ) && 
                (
                    this.CountryOid == input.CountryOid ||
                    (this.CountryOid != null &&
                    this.CountryOid.Equals(input.CountryOid))
                ) && 
                (
                    this.States == input.States ||
                    this.States != null &&
                    input.States != null &&
                    this.States.SequenceEqual(input.States)
                ) && 
                (
                    this.TaxGiftCharge == input.TaxGiftCharge ||
                    (this.TaxGiftCharge != null &&
                    this.TaxGiftCharge.Equals(input.TaxGiftCharge))
                ) && 
                (
                    this.TaxGiftWrap == input.TaxGiftWrap ||
                    (this.TaxGiftWrap != null &&
                    this.TaxGiftWrap.Equals(input.TaxGiftWrap))
                ) && 
                (
                    this.TaxRate == input.TaxRate ||
                    (this.TaxRate != null &&
                    this.TaxRate.Equals(input.TaxRate))
                ) && 
                (
                    this.TaxRateFormatted == input.TaxRateFormatted ||
                    (this.TaxRateFormatted != null &&
                    this.TaxRateFormatted.Equals(input.TaxRateFormatted))
                ) && 
                (
                    this.TaxShipping == input.TaxShipping ||
                    (this.TaxShipping != null &&
                    this.TaxShipping.Equals(input.TaxShipping))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AccountingCode != null)
                    hashCode = hashCode * 59 + this.AccountingCode.GetHashCode();
                if (this.CountryCode != null)
                    hashCode = hashCode * 59 + this.CountryCode.GetHashCode();
                if (this.CountryOid != null)
                    hashCode = hashCode * 59 + this.CountryOid.GetHashCode();
                if (this.States != null)
                    hashCode = hashCode * 59 + this.States.GetHashCode();
                if (this.TaxGiftCharge != null)
                    hashCode = hashCode * 59 + this.TaxGiftCharge.GetHashCode();
                if (this.TaxGiftWrap != null)
                    hashCode = hashCode * 59 + this.TaxGiftWrap.GetHashCode();
                if (this.TaxRate != null)
                    hashCode = hashCode * 59 + this.TaxRate.GetHashCode();
                if (this.TaxRateFormatted != null)
                    hashCode = hashCode * 59 + this.TaxRateFormatted.GetHashCode();
                if (this.TaxShipping != null)
                    hashCode = hashCode * 59 + this.TaxShipping.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
