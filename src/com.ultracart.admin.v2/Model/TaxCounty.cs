/* 
 * UltraCart Rest API V2
 *
 * UltraCart REST API Version 2
 *
 * OpenAPI spec version: 2.0.0
 * Contact: support@ultracart.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = com.ultracart.admin.v2.Client.SwaggerDateConverter;

namespace com.ultracart.admin.v2.Model
{
    /// <summary>
    /// TaxCounty
    /// </summary>
    [DataContract]
    public partial class TaxCounty :  IEquatable<TaxCounty>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TaxCounty" /> class.
        /// </summary>
        /// <param name="AccountingCode">Accounting code for programs such as QuickBooks.</param>
        /// <param name="Cities">Cities within this city.</param>
        /// <param name="County">County.</param>
        /// <param name="CountyOid">Tax record object identifier used internally by database.</param>
        /// <param name="DontCollectCity">Flag instructing engine to not collect city tax for this county.</param>
        /// <param name="DontCollectCounty">Flag instructing engine to not collect county tax for this county.</param>
        /// <param name="DontCollectPostalCode">Flag instructing engine to not collect postal code tax for this county.</param>
        /// <param name="StateOid">Tax record object identifier used internally by database.</param>
        /// <param name="TaxRate">Tax Rate.</param>
        /// <param name="TaxRateFormatted">Tax rate formatted.</param>
        public TaxCounty(string AccountingCode = default(string), List<TaxCity> Cities = default(List<TaxCity>), string County = default(string), int? CountyOid = default(int?), bool? DontCollectCity = default(bool?), bool? DontCollectCounty = default(bool?), bool? DontCollectPostalCode = default(bool?), int? StateOid = default(int?), decimal? TaxRate = default(decimal?), string TaxRateFormatted = default(string))
        {
            this.AccountingCode = AccountingCode;
            this.Cities = Cities;
            this.County = County;
            this.CountyOid = CountyOid;
            this.DontCollectCity = DontCollectCity;
            this.DontCollectCounty = DontCollectCounty;
            this.DontCollectPostalCode = DontCollectPostalCode;
            this.StateOid = StateOid;
            this.TaxRate = TaxRate;
            this.TaxRateFormatted = TaxRateFormatted;
        }
        
        /// <summary>
        /// Accounting code for programs such as QuickBooks
        /// </summary>
        /// <value>Accounting code for programs such as QuickBooks</value>
        [DataMember(Name="accounting_code", EmitDefaultValue=false)]
        public string AccountingCode { get; set; }

        /// <summary>
        /// Cities within this city
        /// </summary>
        /// <value>Cities within this city</value>
        [DataMember(Name="cities", EmitDefaultValue=false)]
        public List<TaxCity> Cities { get; set; }

        /// <summary>
        /// County
        /// </summary>
        /// <value>County</value>
        [DataMember(Name="county", EmitDefaultValue=false)]
        public string County { get; set; }

        /// <summary>
        /// Tax record object identifier used internally by database
        /// </summary>
        /// <value>Tax record object identifier used internally by database</value>
        [DataMember(Name="county_oid", EmitDefaultValue=false)]
        public int? CountyOid { get; set; }

        /// <summary>
        /// Flag instructing engine to not collect city tax for this county
        /// </summary>
        /// <value>Flag instructing engine to not collect city tax for this county</value>
        [DataMember(Name="dont_collect_city", EmitDefaultValue=false)]
        public bool? DontCollectCity { get; set; }

        /// <summary>
        /// Flag instructing engine to not collect county tax for this county
        /// </summary>
        /// <value>Flag instructing engine to not collect county tax for this county</value>
        [DataMember(Name="dont_collect_county", EmitDefaultValue=false)]
        public bool? DontCollectCounty { get; set; }

        /// <summary>
        /// Flag instructing engine to not collect postal code tax for this county
        /// </summary>
        /// <value>Flag instructing engine to not collect postal code tax for this county</value>
        [DataMember(Name="dont_collect_postal_code", EmitDefaultValue=false)]
        public bool? DontCollectPostalCode { get; set; }

        /// <summary>
        /// Tax record object identifier used internally by database
        /// </summary>
        /// <value>Tax record object identifier used internally by database</value>
        [DataMember(Name="state_oid", EmitDefaultValue=false)]
        public int? StateOid { get; set; }

        /// <summary>
        /// Tax Rate
        /// </summary>
        /// <value>Tax Rate</value>
        [DataMember(Name="tax_rate", EmitDefaultValue=false)]
        public decimal? TaxRate { get; set; }

        /// <summary>
        /// Tax rate formatted
        /// </summary>
        /// <value>Tax rate formatted</value>
        [DataMember(Name="tax_rate_formatted", EmitDefaultValue=false)]
        public string TaxRateFormatted { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TaxCounty {\n");
            sb.Append("  AccountingCode: ").Append(AccountingCode).Append("\n");
            sb.Append("  Cities: ").Append(Cities).Append("\n");
            sb.Append("  County: ").Append(County).Append("\n");
            sb.Append("  CountyOid: ").Append(CountyOid).Append("\n");
            sb.Append("  DontCollectCity: ").Append(DontCollectCity).Append("\n");
            sb.Append("  DontCollectCounty: ").Append(DontCollectCounty).Append("\n");
            sb.Append("  DontCollectPostalCode: ").Append(DontCollectPostalCode).Append("\n");
            sb.Append("  StateOid: ").Append(StateOid).Append("\n");
            sb.Append("  TaxRate: ").Append(TaxRate).Append("\n");
            sb.Append("  TaxRateFormatted: ").Append(TaxRateFormatted).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TaxCounty);
        }

        /// <summary>
        /// Returns true if TaxCounty instances are equal
        /// </summary>
        /// <param name="input">Instance of TaxCounty to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TaxCounty input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.AccountingCode == input.AccountingCode ||
                    (this.AccountingCode != null &&
                    this.AccountingCode.Equals(input.AccountingCode))
                ) && 
                (
                    this.Cities == input.Cities ||
                    this.Cities != null &&
                    this.Cities.SequenceEqual(input.Cities)
                ) && 
                (
                    this.County == input.County ||
                    (this.County != null &&
                    this.County.Equals(input.County))
                ) && 
                (
                    this.CountyOid == input.CountyOid ||
                    (this.CountyOid != null &&
                    this.CountyOid.Equals(input.CountyOid))
                ) && 
                (
                    this.DontCollectCity == input.DontCollectCity ||
                    (this.DontCollectCity != null &&
                    this.DontCollectCity.Equals(input.DontCollectCity))
                ) && 
                (
                    this.DontCollectCounty == input.DontCollectCounty ||
                    (this.DontCollectCounty != null &&
                    this.DontCollectCounty.Equals(input.DontCollectCounty))
                ) && 
                (
                    this.DontCollectPostalCode == input.DontCollectPostalCode ||
                    (this.DontCollectPostalCode != null &&
                    this.DontCollectPostalCode.Equals(input.DontCollectPostalCode))
                ) && 
                (
                    this.StateOid == input.StateOid ||
                    (this.StateOid != null &&
                    this.StateOid.Equals(input.StateOid))
                ) && 
                (
                    this.TaxRate == input.TaxRate ||
                    (this.TaxRate != null &&
                    this.TaxRate.Equals(input.TaxRate))
                ) && 
                (
                    this.TaxRateFormatted == input.TaxRateFormatted ||
                    (this.TaxRateFormatted != null &&
                    this.TaxRateFormatted.Equals(input.TaxRateFormatted))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AccountingCode != null)
                    hashCode = hashCode * 59 + this.AccountingCode.GetHashCode();
                if (this.Cities != null)
                    hashCode = hashCode * 59 + this.Cities.GetHashCode();
                if (this.County != null)
                    hashCode = hashCode * 59 + this.County.GetHashCode();
                if (this.CountyOid != null)
                    hashCode = hashCode * 59 + this.CountyOid.GetHashCode();
                if (this.DontCollectCity != null)
                    hashCode = hashCode * 59 + this.DontCollectCity.GetHashCode();
                if (this.DontCollectCounty != null)
                    hashCode = hashCode * 59 + this.DontCollectCounty.GetHashCode();
                if (this.DontCollectPostalCode != null)
                    hashCode = hashCode * 59 + this.DontCollectPostalCode.GetHashCode();
                if (this.StateOid != null)
                    hashCode = hashCode * 59 + this.StateOid.GetHashCode();
                if (this.TaxRate != null)
                    hashCode = hashCode * 59 + this.TaxRate.GetHashCode();
                if (this.TaxRateFormatted != null)
                    hashCode = hashCode * 59 + this.TaxRateFormatted.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
