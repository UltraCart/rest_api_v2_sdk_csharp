/* 
 * UltraCart Rest API V2
 *
 * UltraCart REST API Version 2
 *
 * OpenAPI spec version: 2.0.0
 * Contact: support@ultracart.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = com.ultracart.admin.v2.Client.SwaggerDateConverter;

namespace com.ultracart.admin.v2.Model
{
    /// <summary>
    /// TaxJarConfig
    /// </summary>
    [DataContract]
    public partial class TaxJarConfig :  IEquatable<TaxJarConfig>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TaxJarConfig" /> class.
        /// </summary>
        /// <param name="active">True if TaxJar is active for this merchant.</param>
        /// <param name="apiKey">TaxJar API key.</param>
        /// <param name="estimateOnly">True if this TaxJar configuration is to estimate taxes only and not report placed orders to TaxJar.</param>
        /// <param name="sendTestOrders">Send test orders through to TaxJar.  The default is to not transmit test orders to TaxJar..</param>
        /// <param name="useDistributionCenterFrom">Use distribution center from address.</param>
        public TaxJarConfig(bool? active = default(bool?), string apiKey = default(string), bool? estimateOnly = default(bool?), bool? sendTestOrders = default(bool?), bool? useDistributionCenterFrom = default(bool?))
        {
            this.Active = active;
            this.ApiKey = apiKey;
            this.EstimateOnly = estimateOnly;
            this.SendTestOrders = sendTestOrders;
            this.UseDistributionCenterFrom = useDistributionCenterFrom;
        }
        
        /// <summary>
        /// True if TaxJar is active for this merchant
        /// </summary>
        /// <value>True if TaxJar is active for this merchant</value>
        [DataMember(Name="active", EmitDefaultValue=false)]
        public bool? Active { get; set; }

        /// <summary>
        /// TaxJar API key
        /// </summary>
        /// <value>TaxJar API key</value>
        [DataMember(Name="api_key", EmitDefaultValue=false)]
        public string ApiKey { get; set; }

        /// <summary>
        /// True if this TaxJar configuration is to estimate taxes only and not report placed orders to TaxJar
        /// </summary>
        /// <value>True if this TaxJar configuration is to estimate taxes only and not report placed orders to TaxJar</value>
        [DataMember(Name="estimate_only", EmitDefaultValue=false)]
        public bool? EstimateOnly { get; set; }

        /// <summary>
        /// Send test orders through to TaxJar.  The default is to not transmit test orders to TaxJar.
        /// </summary>
        /// <value>Send test orders through to TaxJar.  The default is to not transmit test orders to TaxJar.</value>
        [DataMember(Name="send_test_orders", EmitDefaultValue=false)]
        public bool? SendTestOrders { get; set; }

        /// <summary>
        /// Use distribution center from address
        /// </summary>
        /// <value>Use distribution center from address</value>
        [DataMember(Name="use_distribution_center_from", EmitDefaultValue=false)]
        public bool? UseDistributionCenterFrom { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TaxJarConfig {\n");
            sb.Append("  Active: ").Append(Active).Append("\n");
            sb.Append("  ApiKey: ").Append(ApiKey).Append("\n");
            sb.Append("  EstimateOnly: ").Append(EstimateOnly).Append("\n");
            sb.Append("  SendTestOrders: ").Append(SendTestOrders).Append("\n");
            sb.Append("  UseDistributionCenterFrom: ").Append(UseDistributionCenterFrom).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TaxJarConfig);
        }

        /// <summary>
        /// Returns true if TaxJarConfig instances are equal
        /// </summary>
        /// <param name="input">Instance of TaxJarConfig to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TaxJarConfig input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Active == input.Active ||
                    (this.Active != null &&
                    this.Active.Equals(input.Active))
                ) && 
                (
                    this.ApiKey == input.ApiKey ||
                    (this.ApiKey != null &&
                    this.ApiKey.Equals(input.ApiKey))
                ) && 
                (
                    this.EstimateOnly == input.EstimateOnly ||
                    (this.EstimateOnly != null &&
                    this.EstimateOnly.Equals(input.EstimateOnly))
                ) && 
                (
                    this.SendTestOrders == input.SendTestOrders ||
                    (this.SendTestOrders != null &&
                    this.SendTestOrders.Equals(input.SendTestOrders))
                ) && 
                (
                    this.UseDistributionCenterFrom == input.UseDistributionCenterFrom ||
                    (this.UseDistributionCenterFrom != null &&
                    this.UseDistributionCenterFrom.Equals(input.UseDistributionCenterFrom))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Active != null)
                    hashCode = hashCode * 59 + this.Active.GetHashCode();
                if (this.ApiKey != null)
                    hashCode = hashCode * 59 + this.ApiKey.GetHashCode();
                if (this.EstimateOnly != null)
                    hashCode = hashCode * 59 + this.EstimateOnly.GetHashCode();
                if (this.SendTestOrders != null)
                    hashCode = hashCode * 59 + this.SendTestOrders.GetHashCode();
                if (this.UseDistributionCenterFrom != null)
                    hashCode = hashCode * 59 + this.UseDistributionCenterFrom.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
