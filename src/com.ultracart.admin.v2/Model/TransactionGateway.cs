/* 
 * UltraCart Rest API V2
 *
 * UltraCart REST API Version 2
 *
 * OpenAPI spec version: 2.0.0
 * Contact: support@ultracart.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = com.ultracart.admin.v2.Client.SwaggerDateConverter;

namespace com.ultracart.admin.v2.Model
{
    /// <summary>
    /// TransactionGateway
    /// </summary>
    [DataContract]
    public partial class TransactionGateway :  IEquatable<TransactionGateway>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TransactionGateway" /> class.
        /// </summary>
        /// <param name="arbitraryHtml">Additional html to display for this transaction gateway.  This html will include instructions and connection links.</param>
        /// <param name="comment">Additional comments.</param>
        /// <param name="creditCardCapable">True if this gateway supports credit cards.</param>
        /// <param name="echeckCapable">True if this gateway supports eChecks.</param>
        /// <param name="echeckSupported">True if this gateway supports eChecks.</param>
        /// <param name="enabled">True if this transaction gateway is the currently active gateway..</param>
        /// <param name="gatewayCertPem">Cryptographic public certificate allowing UltraCart to communicate securely with this gateway..</param>
        /// <param name="gatewayCertPemLabel">The label for the gateway certificate pem.   The actual value stored may vary by gateway, so the label will vary too..</param>
        /// <param name="gatewayEmail">Gateway Email.</param>
        /// <param name="gatewayEmailLabel">The label for the gateway email.   The actual value stored may vary by gateway, so the label will vary too..</param>
        /// <param name="gatewayEnvironment">Gateway Environment to indicate sandbox versus production environments.</param>
        /// <param name="gatewayEnvironmentLabel">The label for the gateway environment.  The actual value stored may vary by gateway, so the label will vary too..</param>
        /// <param name="gatewayEnvironments">Used to populate drop down lists for the gateway environment.  Varies by gateway..</param>
        /// <param name="gatewayHeaderBackColor">Optional Look and feel setting for Verified-by-VISA.  Only needed if you are using 3DS.</param>
        /// <param name="gatewayHeaderBorderColor">Optional Look and feel setting for Verified-by-VISA.  Only needed if you are using 3DS.</param>
        /// <param name="gatewayHeaderImageUrl">Optional Look and feel setting for Verified-by-VISA.  Only needed if you are using 3DS.</param>
        /// <param name="gatewayKey">Gateway Key.</param>
        /// <param name="gatewayKeyLabel">The label for the gateway key.   The actual value stored may vary by gateway, so the label will vary too..</param>
        /// <param name="gatewayKeyPem">Cryptographic private key allowing UltraCart to communicate securely with this gateway..</param>
        /// <param name="gatewayKeyPemLabel">The label for the gateway key pem.   The actual value stored may vary by gateway, so the label will vary too..</param>
        /// <param name="gatewayLandingPage">Optional Look and feel setting for Verified-by-VISA.  Only needed if you are using 3DS.</param>
        /// <param name="gatewayMerchantId">Gateway Merchant ID.</param>
        /// <param name="gatewayMerchantIdLabel">The label for the gateway merchant id.  The actual value stored may vary by gateway, so the label will vary too..</param>
        /// <param name="gatewayMode">Gateway Mode.</param>
        /// <param name="gatewayModeLabel">The label for the gateway mode.   The actual value stored may vary by gateway, so the label will vary too..</param>
        /// <param name="gatewayModes">Used to populate drop down lists for gateway modes.</param>
        /// <param name="gatewayPageStyle">Gateway Page Style.</param>
        /// <param name="gatewayPageStyleLabel">Gateway page style label.</param>
        /// <param name="gatewayPageStyles">Used to populate drop down lists for gateway page style.</param>
        /// <param name="gatewayPartner">Gateway Partner.</param>
        /// <param name="gatewayPartnerLabel">The label for the gateway partner.   The actual value stored may vary by gateway, so the label will vary too..</param>
        /// <param name="gatewayPassword">Gateway Password.</param>
        /// <param name="gatewayPasswordLabel">The label for the gateway password.   The actual value stored may vary by gateway, so the label will vary too..</param>
        /// <param name="gatewayPayflowColor">Optional Look and feel setting for Verified-by-VISA.  Only needed if you are using 3DS.</param>
        /// <param name="gatewayPrivateKeyPassword">Gateway private key password.</param>
        /// <param name="gatewayPrivateKeyPasswordLabel">The label for the gateway private key password.  The actual value stored may vary by gateway, so the label will vary too..</param>
        /// <param name="gatewaySolutionType">Optional Look and feel setting for Verified-by-VISA.  Only needed if you are using 3DS.</param>
        /// <param name="gatewaySolutionTypeLabel">The label for the gateway solution type.  The actual value stored may vary by gateway, so the label will vary too..</param>
        /// <param name="gatewaySolutionTypes">Used to populate drop down lists for gateway solution types.</param>
        /// <param name="gatewayUrl">Gateway URL.</param>
        /// <param name="gatewayUrlLabel">The label for the gateway url.   The actual value stored may vary by gateway, so the label will vary too..</param>
        /// <param name="gatewayUsername">Gateway Username.</param>
        /// <param name="gatewayUsernameLabel">The label for the gateway username.  The actual value stored may vary by gateway, so the label will vary too..</param>
        /// <param name="merchantAccountProfileAmex">If a merchant has multiple card processing accounts, this is the one to use for American Express cards..</param>
        /// <param name="merchantAccountProfileDinersClub">If a merchant has multiple card processing accounts, this is the one to use for Diners Club cards..</param>
        /// <param name="merchantAccountProfileDiscover">If a merchant has multiple card processing accounts, this is the one to use for Discover cards..</param>
        /// <param name="merchantAccountProfileJcb">If a merchant has multiple card processing accounts, this is the one to use for JCB cards..</param>
        /// <param name="merchantAccountProfileMastercard">If a merchant has multiple card processing accounts, this is the one to use for MasterCard cards..</param>
        /// <param name="merchantAccountProfileVisa">If a merchant has multiple card processing accounts, this is the one to use for VISA cards..</param>
        /// <param name="merchantId">UltraCart Merchant ID.</param>
        /// <param name="multiCurrencyDetails">True if this gateway provides details for multiple currency transactions.</param>
        /// <param name="name">Name of this transaction gateway.</param>
        /// <param name="refundSupported">True if this gateway supports refunds.</param>
        /// <param name="requireEcheckTaxIdOrDriversLicense">If true, e-Check transaction will require either a Tax ID or a Driver License.</param>
        /// <param name="supportVbv3ds">True if this gateway supported Verified-by-VISA 3D Secure.</param>
        /// <param name="supportsAmex">If true, this gateway will attempt to process American Express transactions.  If false, the customer will not be allowed to use this type of Credit Card..</param>
        /// <param name="supportsDinersClub">If true, this gateway will attempt to process Diners Club transactions.  If false, the customer will not be allowed to use this type of Credit Card..</param>
        /// <param name="supportsDiscover">If true, this gateway will attempt to process Discover transactions.  If false, the customer will not be allowed to use this type of Credit Card..</param>
        /// <param name="supportsEcheck">If true, this gateway will attempt to process e-Check transactions.  If false, the customer will not be allowed to use e-Checks..</param>
        /// <param name="supportsElectronicGiftCard">if true, this gateway will attempt to process electronic gift cards..</param>
        /// <param name="supportsJcb">If true, this gateway will attempt to process JCB transactions.  If false, the customer will not be allowed to use this type of Credit Card..</param>
        /// <param name="supportsMastercard">If true, this gateway will attempt to process MasterCard transactions.  If false, the customer will not be allowed to use this type of Credit Card..</param>
        /// <param name="supportsVisa">If true, this gateway will attempt to process VISA transactions.  If false, the customer will not be allowed to use this type of Credit Card..</param>
        /// <param name="thirdParty">True if this gateway supports third parties.</param>
        public TransactionGateway(string arbitraryHtml = default(string), string comment = default(string), bool? creditCardCapable = default(bool?), bool? echeckCapable = default(bool?), string echeckSupported = default(string), bool? enabled = default(bool?), string gatewayCertPem = default(string), string gatewayCertPemLabel = default(string), string gatewayEmail = default(string), string gatewayEmailLabel = default(string), string gatewayEnvironment = default(string), string gatewayEnvironmentLabel = default(string), List<string> gatewayEnvironments = default(List<string>), string gatewayHeaderBackColor = default(string), string gatewayHeaderBorderColor = default(string), string gatewayHeaderImageUrl = default(string), string gatewayKey = default(string), string gatewayKeyLabel = default(string), string gatewayKeyPem = default(string), string gatewayKeyPemLabel = default(string), string gatewayLandingPage = default(string), string gatewayMerchantId = default(string), string gatewayMerchantIdLabel = default(string), string gatewayMode = default(string), string gatewayModeLabel = default(string), List<string> gatewayModes = default(List<string>), string gatewayPageStyle = default(string), string gatewayPageStyleLabel = default(string), List<string> gatewayPageStyles = default(List<string>), string gatewayPartner = default(string), string gatewayPartnerLabel = default(string), string gatewayPassword = default(string), string gatewayPasswordLabel = default(string), string gatewayPayflowColor = default(string), string gatewayPrivateKeyPassword = default(string), string gatewayPrivateKeyPasswordLabel = default(string), string gatewaySolutionType = default(string), string gatewaySolutionTypeLabel = default(string), List<string> gatewaySolutionTypes = default(List<string>), string gatewayUrl = default(string), string gatewayUrlLabel = default(string), string gatewayUsername = default(string), string gatewayUsernameLabel = default(string), string merchantAccountProfileAmex = default(string), string merchantAccountProfileDinersClub = default(string), string merchantAccountProfileDiscover = default(string), string merchantAccountProfileJcb = default(string), string merchantAccountProfileMastercard = default(string), string merchantAccountProfileVisa = default(string), string merchantId = default(string), bool? multiCurrencyDetails = default(bool?), string name = default(string), bool? refundSupported = default(bool?), bool? requireEcheckTaxIdOrDriversLicense = default(bool?), bool? supportVbv3ds = default(bool?), bool? supportsAmex = default(bool?), bool? supportsDinersClub = default(bool?), bool? supportsDiscover = default(bool?), bool? supportsEcheck = default(bool?), bool? supportsElectronicGiftCard = default(bool?), bool? supportsJcb = default(bool?), bool? supportsMastercard = default(bool?), bool? supportsVisa = default(bool?), bool? thirdParty = default(bool?))
        {
            this.ArbitraryHtml = arbitraryHtml;
            this.Comment = comment;
            this.CreditCardCapable = creditCardCapable;
            this.EcheckCapable = echeckCapable;
            this.EcheckSupported = echeckSupported;
            this.Enabled = enabled;
            this.GatewayCertPem = gatewayCertPem;
            this.GatewayCertPemLabel = gatewayCertPemLabel;
            this.GatewayEmail = gatewayEmail;
            this.GatewayEmailLabel = gatewayEmailLabel;
            this.GatewayEnvironment = gatewayEnvironment;
            this.GatewayEnvironmentLabel = gatewayEnvironmentLabel;
            this.GatewayEnvironments = gatewayEnvironments;
            this.GatewayHeaderBackColor = gatewayHeaderBackColor;
            this.GatewayHeaderBorderColor = gatewayHeaderBorderColor;
            this.GatewayHeaderImageUrl = gatewayHeaderImageUrl;
            this.GatewayKey = gatewayKey;
            this.GatewayKeyLabel = gatewayKeyLabel;
            this.GatewayKeyPem = gatewayKeyPem;
            this.GatewayKeyPemLabel = gatewayKeyPemLabel;
            this.GatewayLandingPage = gatewayLandingPage;
            this.GatewayMerchantId = gatewayMerchantId;
            this.GatewayMerchantIdLabel = gatewayMerchantIdLabel;
            this.GatewayMode = gatewayMode;
            this.GatewayModeLabel = gatewayModeLabel;
            this.GatewayModes = gatewayModes;
            this.GatewayPageStyle = gatewayPageStyle;
            this.GatewayPageStyleLabel = gatewayPageStyleLabel;
            this.GatewayPageStyles = gatewayPageStyles;
            this.GatewayPartner = gatewayPartner;
            this.GatewayPartnerLabel = gatewayPartnerLabel;
            this.GatewayPassword = gatewayPassword;
            this.GatewayPasswordLabel = gatewayPasswordLabel;
            this.GatewayPayflowColor = gatewayPayflowColor;
            this.GatewayPrivateKeyPassword = gatewayPrivateKeyPassword;
            this.GatewayPrivateKeyPasswordLabel = gatewayPrivateKeyPasswordLabel;
            this.GatewaySolutionType = gatewaySolutionType;
            this.GatewaySolutionTypeLabel = gatewaySolutionTypeLabel;
            this.GatewaySolutionTypes = gatewaySolutionTypes;
            this.GatewayUrl = gatewayUrl;
            this.GatewayUrlLabel = gatewayUrlLabel;
            this.GatewayUsername = gatewayUsername;
            this.GatewayUsernameLabel = gatewayUsernameLabel;
            this.MerchantAccountProfileAmex = merchantAccountProfileAmex;
            this.MerchantAccountProfileDinersClub = merchantAccountProfileDinersClub;
            this.MerchantAccountProfileDiscover = merchantAccountProfileDiscover;
            this.MerchantAccountProfileJcb = merchantAccountProfileJcb;
            this.MerchantAccountProfileMastercard = merchantAccountProfileMastercard;
            this.MerchantAccountProfileVisa = merchantAccountProfileVisa;
            this.MerchantId = merchantId;
            this.MultiCurrencyDetails = multiCurrencyDetails;
            this.Name = name;
            this.RefundSupported = refundSupported;
            this.RequireEcheckTaxIdOrDriversLicense = requireEcheckTaxIdOrDriversLicense;
            this.SupportVbv3ds = supportVbv3ds;
            this.SupportsAmex = supportsAmex;
            this.SupportsDinersClub = supportsDinersClub;
            this.SupportsDiscover = supportsDiscover;
            this.SupportsEcheck = supportsEcheck;
            this.SupportsElectronicGiftCard = supportsElectronicGiftCard;
            this.SupportsJcb = supportsJcb;
            this.SupportsMastercard = supportsMastercard;
            this.SupportsVisa = supportsVisa;
            this.ThirdParty = thirdParty;
        }
        
        /// <summary>
        /// Additional html to display for this transaction gateway.  This html will include instructions and connection links
        /// </summary>
        /// <value>Additional html to display for this transaction gateway.  This html will include instructions and connection links</value>
        [DataMember(Name="arbitrary_html", EmitDefaultValue=false)]
        public string ArbitraryHtml { get; set; }

        /// <summary>
        /// Additional comments
        /// </summary>
        /// <value>Additional comments</value>
        [DataMember(Name="comment", EmitDefaultValue=false)]
        public string Comment { get; set; }

        /// <summary>
        /// True if this gateway supports credit cards
        /// </summary>
        /// <value>True if this gateway supports credit cards</value>
        [DataMember(Name="credit_card_capable", EmitDefaultValue=false)]
        public bool? CreditCardCapable { get; set; }

        /// <summary>
        /// True if this gateway supports eChecks
        /// </summary>
        /// <value>True if this gateway supports eChecks</value>
        [DataMember(Name="echeck_capable", EmitDefaultValue=false)]
        public bool? EcheckCapable { get; set; }

        /// <summary>
        /// True if this gateway supports eChecks
        /// </summary>
        /// <value>True if this gateway supports eChecks</value>
        [DataMember(Name="echeck_supported", EmitDefaultValue=false)]
        public string EcheckSupported { get; set; }

        /// <summary>
        /// True if this transaction gateway is the currently active gateway.
        /// </summary>
        /// <value>True if this transaction gateway is the currently active gateway.</value>
        [DataMember(Name="enabled", EmitDefaultValue=false)]
        public bool? Enabled { get; set; }

        /// <summary>
        /// Cryptographic public certificate allowing UltraCart to communicate securely with this gateway.
        /// </summary>
        /// <value>Cryptographic public certificate allowing UltraCart to communicate securely with this gateway.</value>
        [DataMember(Name="gateway_cert_pem", EmitDefaultValue=false)]
        public string GatewayCertPem { get; set; }

        /// <summary>
        /// The label for the gateway certificate pem.   The actual value stored may vary by gateway, so the label will vary too.
        /// </summary>
        /// <value>The label for the gateway certificate pem.   The actual value stored may vary by gateway, so the label will vary too.</value>
        [DataMember(Name="gateway_cert_pem_label", EmitDefaultValue=false)]
        public string GatewayCertPemLabel { get; set; }

        /// <summary>
        /// Gateway Email
        /// </summary>
        /// <value>Gateway Email</value>
        [DataMember(Name="gateway_email", EmitDefaultValue=false)]
        public string GatewayEmail { get; set; }

        /// <summary>
        /// The label for the gateway email.   The actual value stored may vary by gateway, so the label will vary too.
        /// </summary>
        /// <value>The label for the gateway email.   The actual value stored may vary by gateway, so the label will vary too.</value>
        [DataMember(Name="gateway_email_label", EmitDefaultValue=false)]
        public string GatewayEmailLabel { get; set; }

        /// <summary>
        /// Gateway Environment to indicate sandbox versus production environments
        /// </summary>
        /// <value>Gateway Environment to indicate sandbox versus production environments</value>
        [DataMember(Name="gateway_environment", EmitDefaultValue=false)]
        public string GatewayEnvironment { get; set; }

        /// <summary>
        /// The label for the gateway environment.  The actual value stored may vary by gateway, so the label will vary too.
        /// </summary>
        /// <value>The label for the gateway environment.  The actual value stored may vary by gateway, so the label will vary too.</value>
        [DataMember(Name="gateway_environment_label", EmitDefaultValue=false)]
        public string GatewayEnvironmentLabel { get; set; }

        /// <summary>
        /// Used to populate drop down lists for the gateway environment.  Varies by gateway.
        /// </summary>
        /// <value>Used to populate drop down lists for the gateway environment.  Varies by gateway.</value>
        [DataMember(Name="gateway_environments", EmitDefaultValue=false)]
        public List<string> GatewayEnvironments { get; set; }

        /// <summary>
        /// Optional Look and feel setting for Verified-by-VISA.  Only needed if you are using 3DS
        /// </summary>
        /// <value>Optional Look and feel setting for Verified-by-VISA.  Only needed if you are using 3DS</value>
        [DataMember(Name="gateway_header_back_color", EmitDefaultValue=false)]
        public string GatewayHeaderBackColor { get; set; }

        /// <summary>
        /// Optional Look and feel setting for Verified-by-VISA.  Only needed if you are using 3DS
        /// </summary>
        /// <value>Optional Look and feel setting for Verified-by-VISA.  Only needed if you are using 3DS</value>
        [DataMember(Name="gateway_header_border_color", EmitDefaultValue=false)]
        public string GatewayHeaderBorderColor { get; set; }

        /// <summary>
        /// Optional Look and feel setting for Verified-by-VISA.  Only needed if you are using 3DS
        /// </summary>
        /// <value>Optional Look and feel setting for Verified-by-VISA.  Only needed if you are using 3DS</value>
        [DataMember(Name="gateway_header_image_url", EmitDefaultValue=false)]
        public string GatewayHeaderImageUrl { get; set; }

        /// <summary>
        /// Gateway Key
        /// </summary>
        /// <value>Gateway Key</value>
        [DataMember(Name="gateway_key", EmitDefaultValue=false)]
        public string GatewayKey { get; set; }

        /// <summary>
        /// The label for the gateway key.   The actual value stored may vary by gateway, so the label will vary too.
        /// </summary>
        /// <value>The label for the gateway key.   The actual value stored may vary by gateway, so the label will vary too.</value>
        [DataMember(Name="gateway_key_label", EmitDefaultValue=false)]
        public string GatewayKeyLabel { get; set; }

        /// <summary>
        /// Cryptographic private key allowing UltraCart to communicate securely with this gateway.
        /// </summary>
        /// <value>Cryptographic private key allowing UltraCart to communicate securely with this gateway.</value>
        [DataMember(Name="gateway_key_pem", EmitDefaultValue=false)]
        public string GatewayKeyPem { get; set; }

        /// <summary>
        /// The label for the gateway key pem.   The actual value stored may vary by gateway, so the label will vary too.
        /// </summary>
        /// <value>The label for the gateway key pem.   The actual value stored may vary by gateway, so the label will vary too.</value>
        [DataMember(Name="gateway_key_pem_label", EmitDefaultValue=false)]
        public string GatewayKeyPemLabel { get; set; }

        /// <summary>
        /// Optional Look and feel setting for Verified-by-VISA.  Only needed if you are using 3DS
        /// </summary>
        /// <value>Optional Look and feel setting for Verified-by-VISA.  Only needed if you are using 3DS</value>
        [DataMember(Name="gateway_landing_page", EmitDefaultValue=false)]
        public string GatewayLandingPage { get; set; }

        /// <summary>
        /// Gateway Merchant ID
        /// </summary>
        /// <value>Gateway Merchant ID</value>
        [DataMember(Name="gateway_merchant_id", EmitDefaultValue=false)]
        public string GatewayMerchantId { get; set; }

        /// <summary>
        /// The label for the gateway merchant id.  The actual value stored may vary by gateway, so the label will vary too.
        /// </summary>
        /// <value>The label for the gateway merchant id.  The actual value stored may vary by gateway, so the label will vary too.</value>
        [DataMember(Name="gateway_merchant_id_label", EmitDefaultValue=false)]
        public string GatewayMerchantIdLabel { get; set; }

        /// <summary>
        /// Gateway Mode
        /// </summary>
        /// <value>Gateway Mode</value>
        [DataMember(Name="gateway_mode", EmitDefaultValue=false)]
        public string GatewayMode { get; set; }

        /// <summary>
        /// The label for the gateway mode.   The actual value stored may vary by gateway, so the label will vary too.
        /// </summary>
        /// <value>The label for the gateway mode.   The actual value stored may vary by gateway, so the label will vary too.</value>
        [DataMember(Name="gateway_mode_label", EmitDefaultValue=false)]
        public string GatewayModeLabel { get; set; }

        /// <summary>
        /// Used to populate drop down lists for gateway modes
        /// </summary>
        /// <value>Used to populate drop down lists for gateway modes</value>
        [DataMember(Name="gateway_modes", EmitDefaultValue=false)]
        public List<string> GatewayModes { get; set; }

        /// <summary>
        /// Gateway Page Style
        /// </summary>
        /// <value>Gateway Page Style</value>
        [DataMember(Name="gateway_page_style", EmitDefaultValue=false)]
        public string GatewayPageStyle { get; set; }

        /// <summary>
        /// Gateway page style label
        /// </summary>
        /// <value>Gateway page style label</value>
        [DataMember(Name="gateway_page_style_label", EmitDefaultValue=false)]
        public string GatewayPageStyleLabel { get; set; }

        /// <summary>
        /// Used to populate drop down lists for gateway page style
        /// </summary>
        /// <value>Used to populate drop down lists for gateway page style</value>
        [DataMember(Name="gateway_page_styles", EmitDefaultValue=false)]
        public List<string> GatewayPageStyles { get; set; }

        /// <summary>
        /// Gateway Partner
        /// </summary>
        /// <value>Gateway Partner</value>
        [DataMember(Name="gateway_partner", EmitDefaultValue=false)]
        public string GatewayPartner { get; set; }

        /// <summary>
        /// The label for the gateway partner.   The actual value stored may vary by gateway, so the label will vary too.
        /// </summary>
        /// <value>The label for the gateway partner.   The actual value stored may vary by gateway, so the label will vary too.</value>
        [DataMember(Name="gateway_partner_label", EmitDefaultValue=false)]
        public string GatewayPartnerLabel { get; set; }

        /// <summary>
        /// Gateway Password
        /// </summary>
        /// <value>Gateway Password</value>
        [DataMember(Name="gateway_password", EmitDefaultValue=false)]
        public string GatewayPassword { get; set; }

        /// <summary>
        /// The label for the gateway password.   The actual value stored may vary by gateway, so the label will vary too.
        /// </summary>
        /// <value>The label for the gateway password.   The actual value stored may vary by gateway, so the label will vary too.</value>
        [DataMember(Name="gateway_password_label", EmitDefaultValue=false)]
        public string GatewayPasswordLabel { get; set; }

        /// <summary>
        /// Optional Look and feel setting for Verified-by-VISA.  Only needed if you are using 3DS
        /// </summary>
        /// <value>Optional Look and feel setting for Verified-by-VISA.  Only needed if you are using 3DS</value>
        [DataMember(Name="gateway_payflow_color", EmitDefaultValue=false)]
        public string GatewayPayflowColor { get; set; }

        /// <summary>
        /// Gateway private key password
        /// </summary>
        /// <value>Gateway private key password</value>
        [DataMember(Name="gateway_private_key_password", EmitDefaultValue=false)]
        public string GatewayPrivateKeyPassword { get; set; }

        /// <summary>
        /// The label for the gateway private key password.  The actual value stored may vary by gateway, so the label will vary too.
        /// </summary>
        /// <value>The label for the gateway private key password.  The actual value stored may vary by gateway, so the label will vary too.</value>
        [DataMember(Name="gateway_private_key_password_label", EmitDefaultValue=false)]
        public string GatewayPrivateKeyPasswordLabel { get; set; }

        /// <summary>
        /// Optional Look and feel setting for Verified-by-VISA.  Only needed if you are using 3DS
        /// </summary>
        /// <value>Optional Look and feel setting for Verified-by-VISA.  Only needed if you are using 3DS</value>
        [DataMember(Name="gateway_solution_type", EmitDefaultValue=false)]
        public string GatewaySolutionType { get; set; }

        /// <summary>
        /// The label for the gateway solution type.  The actual value stored may vary by gateway, so the label will vary too.
        /// </summary>
        /// <value>The label for the gateway solution type.  The actual value stored may vary by gateway, so the label will vary too.</value>
        [DataMember(Name="gateway_solution_type_label", EmitDefaultValue=false)]
        public string GatewaySolutionTypeLabel { get; set; }

        /// <summary>
        /// Used to populate drop down lists for gateway solution types
        /// </summary>
        /// <value>Used to populate drop down lists for gateway solution types</value>
        [DataMember(Name="gateway_solution_types", EmitDefaultValue=false)]
        public List<string> GatewaySolutionTypes { get; set; }

        /// <summary>
        /// Gateway URL
        /// </summary>
        /// <value>Gateway URL</value>
        [DataMember(Name="gateway_url", EmitDefaultValue=false)]
        public string GatewayUrl { get; set; }

        /// <summary>
        /// The label for the gateway url.   The actual value stored may vary by gateway, so the label will vary too.
        /// </summary>
        /// <value>The label for the gateway url.   The actual value stored may vary by gateway, so the label will vary too.</value>
        [DataMember(Name="gateway_url_label", EmitDefaultValue=false)]
        public string GatewayUrlLabel { get; set; }

        /// <summary>
        /// Gateway Username
        /// </summary>
        /// <value>Gateway Username</value>
        [DataMember(Name="gateway_username", EmitDefaultValue=false)]
        public string GatewayUsername { get; set; }

        /// <summary>
        /// The label for the gateway username.  The actual value stored may vary by gateway, so the label will vary too.
        /// </summary>
        /// <value>The label for the gateway username.  The actual value stored may vary by gateway, so the label will vary too.</value>
        [DataMember(Name="gateway_username_label", EmitDefaultValue=false)]
        public string GatewayUsernameLabel { get; set; }

        /// <summary>
        /// If a merchant has multiple card processing accounts, this is the one to use for American Express cards.
        /// </summary>
        /// <value>If a merchant has multiple card processing accounts, this is the one to use for American Express cards.</value>
        [DataMember(Name="merchant_account_profile_amex", EmitDefaultValue=false)]
        public string MerchantAccountProfileAmex { get; set; }

        /// <summary>
        /// If a merchant has multiple card processing accounts, this is the one to use for Diners Club cards.
        /// </summary>
        /// <value>If a merchant has multiple card processing accounts, this is the one to use for Diners Club cards.</value>
        [DataMember(Name="merchant_account_profile_diners_club", EmitDefaultValue=false)]
        public string MerchantAccountProfileDinersClub { get; set; }

        /// <summary>
        /// If a merchant has multiple card processing accounts, this is the one to use for Discover cards.
        /// </summary>
        /// <value>If a merchant has multiple card processing accounts, this is the one to use for Discover cards.</value>
        [DataMember(Name="merchant_account_profile_discover", EmitDefaultValue=false)]
        public string MerchantAccountProfileDiscover { get; set; }

        /// <summary>
        /// If a merchant has multiple card processing accounts, this is the one to use for JCB cards.
        /// </summary>
        /// <value>If a merchant has multiple card processing accounts, this is the one to use for JCB cards.</value>
        [DataMember(Name="merchant_account_profile_jcb", EmitDefaultValue=false)]
        public string MerchantAccountProfileJcb { get; set; }

        /// <summary>
        /// If a merchant has multiple card processing accounts, this is the one to use for MasterCard cards.
        /// </summary>
        /// <value>If a merchant has multiple card processing accounts, this is the one to use for MasterCard cards.</value>
        [DataMember(Name="merchant_account_profile_mastercard", EmitDefaultValue=false)]
        public string MerchantAccountProfileMastercard { get; set; }

        /// <summary>
        /// If a merchant has multiple card processing accounts, this is the one to use for VISA cards.
        /// </summary>
        /// <value>If a merchant has multiple card processing accounts, this is the one to use for VISA cards.</value>
        [DataMember(Name="merchant_account_profile_visa", EmitDefaultValue=false)]
        public string MerchantAccountProfileVisa { get; set; }

        /// <summary>
        /// UltraCart Merchant ID
        /// </summary>
        /// <value>UltraCart Merchant ID</value>
        [DataMember(Name="merchant_id", EmitDefaultValue=false)]
        public string MerchantId { get; set; }

        /// <summary>
        /// True if this gateway provides details for multiple currency transactions
        /// </summary>
        /// <value>True if this gateway provides details for multiple currency transactions</value>
        [DataMember(Name="multi_currency_details", EmitDefaultValue=false)]
        public bool? MultiCurrencyDetails { get; set; }

        /// <summary>
        /// Name of this transaction gateway
        /// </summary>
        /// <value>Name of this transaction gateway</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// True if this gateway supports refunds
        /// </summary>
        /// <value>True if this gateway supports refunds</value>
        [DataMember(Name="refund_supported", EmitDefaultValue=false)]
        public bool? RefundSupported { get; set; }

        /// <summary>
        /// If true, e-Check transaction will require either a Tax ID or a Driver License
        /// </summary>
        /// <value>If true, e-Check transaction will require either a Tax ID or a Driver License</value>
        [DataMember(Name="require_echeck_tax_id_or_drivers_license", EmitDefaultValue=false)]
        public bool? RequireEcheckTaxIdOrDriversLicense { get; set; }

        /// <summary>
        /// True if this gateway supported Verified-by-VISA 3D Secure
        /// </summary>
        /// <value>True if this gateway supported Verified-by-VISA 3D Secure</value>
        [DataMember(Name="support_vbv_3ds", EmitDefaultValue=false)]
        public bool? SupportVbv3ds { get; set; }

        /// <summary>
        /// If true, this gateway will attempt to process American Express transactions.  If false, the customer will not be allowed to use this type of Credit Card.
        /// </summary>
        /// <value>If true, this gateway will attempt to process American Express transactions.  If false, the customer will not be allowed to use this type of Credit Card.</value>
        [DataMember(Name="supports_amex", EmitDefaultValue=false)]
        public bool? SupportsAmex { get; set; }

        /// <summary>
        /// If true, this gateway will attempt to process Diners Club transactions.  If false, the customer will not be allowed to use this type of Credit Card.
        /// </summary>
        /// <value>If true, this gateway will attempt to process Diners Club transactions.  If false, the customer will not be allowed to use this type of Credit Card.</value>
        [DataMember(Name="supports_diners_club", EmitDefaultValue=false)]
        public bool? SupportsDinersClub { get; set; }

        /// <summary>
        /// If true, this gateway will attempt to process Discover transactions.  If false, the customer will not be allowed to use this type of Credit Card.
        /// </summary>
        /// <value>If true, this gateway will attempt to process Discover transactions.  If false, the customer will not be allowed to use this type of Credit Card.</value>
        [DataMember(Name="supports_discover", EmitDefaultValue=false)]
        public bool? SupportsDiscover { get; set; }

        /// <summary>
        /// If true, this gateway will attempt to process e-Check transactions.  If false, the customer will not be allowed to use e-Checks.
        /// </summary>
        /// <value>If true, this gateway will attempt to process e-Check transactions.  If false, the customer will not be allowed to use e-Checks.</value>
        [DataMember(Name="supports_echeck", EmitDefaultValue=false)]
        public bool? SupportsEcheck { get; set; }

        /// <summary>
        /// if true, this gateway will attempt to process electronic gift cards.
        /// </summary>
        /// <value>if true, this gateway will attempt to process electronic gift cards.</value>
        [DataMember(Name="supports_electronic_gift_card", EmitDefaultValue=false)]
        public bool? SupportsElectronicGiftCard { get; set; }

        /// <summary>
        /// If true, this gateway will attempt to process JCB transactions.  If false, the customer will not be allowed to use this type of Credit Card.
        /// </summary>
        /// <value>If true, this gateway will attempt to process JCB transactions.  If false, the customer will not be allowed to use this type of Credit Card.</value>
        [DataMember(Name="supports_jcb", EmitDefaultValue=false)]
        public bool? SupportsJcb { get; set; }

        /// <summary>
        /// If true, this gateway will attempt to process MasterCard transactions.  If false, the customer will not be allowed to use this type of Credit Card.
        /// </summary>
        /// <value>If true, this gateway will attempt to process MasterCard transactions.  If false, the customer will not be allowed to use this type of Credit Card.</value>
        [DataMember(Name="supports_mastercard", EmitDefaultValue=false)]
        public bool? SupportsMastercard { get; set; }

        /// <summary>
        /// If true, this gateway will attempt to process VISA transactions.  If false, the customer will not be allowed to use this type of Credit Card.
        /// </summary>
        /// <value>If true, this gateway will attempt to process VISA transactions.  If false, the customer will not be allowed to use this type of Credit Card.</value>
        [DataMember(Name="supports_visa", EmitDefaultValue=false)]
        public bool? SupportsVisa { get; set; }

        /// <summary>
        /// True if this gateway supports third parties
        /// </summary>
        /// <value>True if this gateway supports third parties</value>
        [DataMember(Name="third_party", EmitDefaultValue=false)]
        public bool? ThirdParty { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TransactionGateway {\n");
            sb.Append("  ArbitraryHtml: ").Append(ArbitraryHtml).Append("\n");
            sb.Append("  Comment: ").Append(Comment).Append("\n");
            sb.Append("  CreditCardCapable: ").Append(CreditCardCapable).Append("\n");
            sb.Append("  EcheckCapable: ").Append(EcheckCapable).Append("\n");
            sb.Append("  EcheckSupported: ").Append(EcheckSupported).Append("\n");
            sb.Append("  Enabled: ").Append(Enabled).Append("\n");
            sb.Append("  GatewayCertPem: ").Append(GatewayCertPem).Append("\n");
            sb.Append("  GatewayCertPemLabel: ").Append(GatewayCertPemLabel).Append("\n");
            sb.Append("  GatewayEmail: ").Append(GatewayEmail).Append("\n");
            sb.Append("  GatewayEmailLabel: ").Append(GatewayEmailLabel).Append("\n");
            sb.Append("  GatewayEnvironment: ").Append(GatewayEnvironment).Append("\n");
            sb.Append("  GatewayEnvironmentLabel: ").Append(GatewayEnvironmentLabel).Append("\n");
            sb.Append("  GatewayEnvironments: ").Append(GatewayEnvironments).Append("\n");
            sb.Append("  GatewayHeaderBackColor: ").Append(GatewayHeaderBackColor).Append("\n");
            sb.Append("  GatewayHeaderBorderColor: ").Append(GatewayHeaderBorderColor).Append("\n");
            sb.Append("  GatewayHeaderImageUrl: ").Append(GatewayHeaderImageUrl).Append("\n");
            sb.Append("  GatewayKey: ").Append(GatewayKey).Append("\n");
            sb.Append("  GatewayKeyLabel: ").Append(GatewayKeyLabel).Append("\n");
            sb.Append("  GatewayKeyPem: ").Append(GatewayKeyPem).Append("\n");
            sb.Append("  GatewayKeyPemLabel: ").Append(GatewayKeyPemLabel).Append("\n");
            sb.Append("  GatewayLandingPage: ").Append(GatewayLandingPage).Append("\n");
            sb.Append("  GatewayMerchantId: ").Append(GatewayMerchantId).Append("\n");
            sb.Append("  GatewayMerchantIdLabel: ").Append(GatewayMerchantIdLabel).Append("\n");
            sb.Append("  GatewayMode: ").Append(GatewayMode).Append("\n");
            sb.Append("  GatewayModeLabel: ").Append(GatewayModeLabel).Append("\n");
            sb.Append("  GatewayModes: ").Append(GatewayModes).Append("\n");
            sb.Append("  GatewayPageStyle: ").Append(GatewayPageStyle).Append("\n");
            sb.Append("  GatewayPageStyleLabel: ").Append(GatewayPageStyleLabel).Append("\n");
            sb.Append("  GatewayPageStyles: ").Append(GatewayPageStyles).Append("\n");
            sb.Append("  GatewayPartner: ").Append(GatewayPartner).Append("\n");
            sb.Append("  GatewayPartnerLabel: ").Append(GatewayPartnerLabel).Append("\n");
            sb.Append("  GatewayPassword: ").Append(GatewayPassword).Append("\n");
            sb.Append("  GatewayPasswordLabel: ").Append(GatewayPasswordLabel).Append("\n");
            sb.Append("  GatewayPayflowColor: ").Append(GatewayPayflowColor).Append("\n");
            sb.Append("  GatewayPrivateKeyPassword: ").Append(GatewayPrivateKeyPassword).Append("\n");
            sb.Append("  GatewayPrivateKeyPasswordLabel: ").Append(GatewayPrivateKeyPasswordLabel).Append("\n");
            sb.Append("  GatewaySolutionType: ").Append(GatewaySolutionType).Append("\n");
            sb.Append("  GatewaySolutionTypeLabel: ").Append(GatewaySolutionTypeLabel).Append("\n");
            sb.Append("  GatewaySolutionTypes: ").Append(GatewaySolutionTypes).Append("\n");
            sb.Append("  GatewayUrl: ").Append(GatewayUrl).Append("\n");
            sb.Append("  GatewayUrlLabel: ").Append(GatewayUrlLabel).Append("\n");
            sb.Append("  GatewayUsername: ").Append(GatewayUsername).Append("\n");
            sb.Append("  GatewayUsernameLabel: ").Append(GatewayUsernameLabel).Append("\n");
            sb.Append("  MerchantAccountProfileAmex: ").Append(MerchantAccountProfileAmex).Append("\n");
            sb.Append("  MerchantAccountProfileDinersClub: ").Append(MerchantAccountProfileDinersClub).Append("\n");
            sb.Append("  MerchantAccountProfileDiscover: ").Append(MerchantAccountProfileDiscover).Append("\n");
            sb.Append("  MerchantAccountProfileJcb: ").Append(MerchantAccountProfileJcb).Append("\n");
            sb.Append("  MerchantAccountProfileMastercard: ").Append(MerchantAccountProfileMastercard).Append("\n");
            sb.Append("  MerchantAccountProfileVisa: ").Append(MerchantAccountProfileVisa).Append("\n");
            sb.Append("  MerchantId: ").Append(MerchantId).Append("\n");
            sb.Append("  MultiCurrencyDetails: ").Append(MultiCurrencyDetails).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  RefundSupported: ").Append(RefundSupported).Append("\n");
            sb.Append("  RequireEcheckTaxIdOrDriversLicense: ").Append(RequireEcheckTaxIdOrDriversLicense).Append("\n");
            sb.Append("  SupportVbv3ds: ").Append(SupportVbv3ds).Append("\n");
            sb.Append("  SupportsAmex: ").Append(SupportsAmex).Append("\n");
            sb.Append("  SupportsDinersClub: ").Append(SupportsDinersClub).Append("\n");
            sb.Append("  SupportsDiscover: ").Append(SupportsDiscover).Append("\n");
            sb.Append("  SupportsEcheck: ").Append(SupportsEcheck).Append("\n");
            sb.Append("  SupportsElectronicGiftCard: ").Append(SupportsElectronicGiftCard).Append("\n");
            sb.Append("  SupportsJcb: ").Append(SupportsJcb).Append("\n");
            sb.Append("  SupportsMastercard: ").Append(SupportsMastercard).Append("\n");
            sb.Append("  SupportsVisa: ").Append(SupportsVisa).Append("\n");
            sb.Append("  ThirdParty: ").Append(ThirdParty).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TransactionGateway);
        }

        /// <summary>
        /// Returns true if TransactionGateway instances are equal
        /// </summary>
        /// <param name="input">Instance of TransactionGateway to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TransactionGateway input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ArbitraryHtml == input.ArbitraryHtml ||
                    (this.ArbitraryHtml != null &&
                    this.ArbitraryHtml.Equals(input.ArbitraryHtml))
                ) && 
                (
                    this.Comment == input.Comment ||
                    (this.Comment != null &&
                    this.Comment.Equals(input.Comment))
                ) && 
                (
                    this.CreditCardCapable == input.CreditCardCapable ||
                    (this.CreditCardCapable != null &&
                    this.CreditCardCapable.Equals(input.CreditCardCapable))
                ) && 
                (
                    this.EcheckCapable == input.EcheckCapable ||
                    (this.EcheckCapable != null &&
                    this.EcheckCapable.Equals(input.EcheckCapable))
                ) && 
                (
                    this.EcheckSupported == input.EcheckSupported ||
                    (this.EcheckSupported != null &&
                    this.EcheckSupported.Equals(input.EcheckSupported))
                ) && 
                (
                    this.Enabled == input.Enabled ||
                    (this.Enabled != null &&
                    this.Enabled.Equals(input.Enabled))
                ) && 
                (
                    this.GatewayCertPem == input.GatewayCertPem ||
                    (this.GatewayCertPem != null &&
                    this.GatewayCertPem.Equals(input.GatewayCertPem))
                ) && 
                (
                    this.GatewayCertPemLabel == input.GatewayCertPemLabel ||
                    (this.GatewayCertPemLabel != null &&
                    this.GatewayCertPemLabel.Equals(input.GatewayCertPemLabel))
                ) && 
                (
                    this.GatewayEmail == input.GatewayEmail ||
                    (this.GatewayEmail != null &&
                    this.GatewayEmail.Equals(input.GatewayEmail))
                ) && 
                (
                    this.GatewayEmailLabel == input.GatewayEmailLabel ||
                    (this.GatewayEmailLabel != null &&
                    this.GatewayEmailLabel.Equals(input.GatewayEmailLabel))
                ) && 
                (
                    this.GatewayEnvironment == input.GatewayEnvironment ||
                    (this.GatewayEnvironment != null &&
                    this.GatewayEnvironment.Equals(input.GatewayEnvironment))
                ) && 
                (
                    this.GatewayEnvironmentLabel == input.GatewayEnvironmentLabel ||
                    (this.GatewayEnvironmentLabel != null &&
                    this.GatewayEnvironmentLabel.Equals(input.GatewayEnvironmentLabel))
                ) && 
                (
                    this.GatewayEnvironments == input.GatewayEnvironments ||
                    this.GatewayEnvironments != null &&
                    this.GatewayEnvironments.SequenceEqual(input.GatewayEnvironments)
                ) && 
                (
                    this.GatewayHeaderBackColor == input.GatewayHeaderBackColor ||
                    (this.GatewayHeaderBackColor != null &&
                    this.GatewayHeaderBackColor.Equals(input.GatewayHeaderBackColor))
                ) && 
                (
                    this.GatewayHeaderBorderColor == input.GatewayHeaderBorderColor ||
                    (this.GatewayHeaderBorderColor != null &&
                    this.GatewayHeaderBorderColor.Equals(input.GatewayHeaderBorderColor))
                ) && 
                (
                    this.GatewayHeaderImageUrl == input.GatewayHeaderImageUrl ||
                    (this.GatewayHeaderImageUrl != null &&
                    this.GatewayHeaderImageUrl.Equals(input.GatewayHeaderImageUrl))
                ) && 
                (
                    this.GatewayKey == input.GatewayKey ||
                    (this.GatewayKey != null &&
                    this.GatewayKey.Equals(input.GatewayKey))
                ) && 
                (
                    this.GatewayKeyLabel == input.GatewayKeyLabel ||
                    (this.GatewayKeyLabel != null &&
                    this.GatewayKeyLabel.Equals(input.GatewayKeyLabel))
                ) && 
                (
                    this.GatewayKeyPem == input.GatewayKeyPem ||
                    (this.GatewayKeyPem != null &&
                    this.GatewayKeyPem.Equals(input.GatewayKeyPem))
                ) && 
                (
                    this.GatewayKeyPemLabel == input.GatewayKeyPemLabel ||
                    (this.GatewayKeyPemLabel != null &&
                    this.GatewayKeyPemLabel.Equals(input.GatewayKeyPemLabel))
                ) && 
                (
                    this.GatewayLandingPage == input.GatewayLandingPage ||
                    (this.GatewayLandingPage != null &&
                    this.GatewayLandingPage.Equals(input.GatewayLandingPage))
                ) && 
                (
                    this.GatewayMerchantId == input.GatewayMerchantId ||
                    (this.GatewayMerchantId != null &&
                    this.GatewayMerchantId.Equals(input.GatewayMerchantId))
                ) && 
                (
                    this.GatewayMerchantIdLabel == input.GatewayMerchantIdLabel ||
                    (this.GatewayMerchantIdLabel != null &&
                    this.GatewayMerchantIdLabel.Equals(input.GatewayMerchantIdLabel))
                ) && 
                (
                    this.GatewayMode == input.GatewayMode ||
                    (this.GatewayMode != null &&
                    this.GatewayMode.Equals(input.GatewayMode))
                ) && 
                (
                    this.GatewayModeLabel == input.GatewayModeLabel ||
                    (this.GatewayModeLabel != null &&
                    this.GatewayModeLabel.Equals(input.GatewayModeLabel))
                ) && 
                (
                    this.GatewayModes == input.GatewayModes ||
                    this.GatewayModes != null &&
                    this.GatewayModes.SequenceEqual(input.GatewayModes)
                ) && 
                (
                    this.GatewayPageStyle == input.GatewayPageStyle ||
                    (this.GatewayPageStyle != null &&
                    this.GatewayPageStyle.Equals(input.GatewayPageStyle))
                ) && 
                (
                    this.GatewayPageStyleLabel == input.GatewayPageStyleLabel ||
                    (this.GatewayPageStyleLabel != null &&
                    this.GatewayPageStyleLabel.Equals(input.GatewayPageStyleLabel))
                ) && 
                (
                    this.GatewayPageStyles == input.GatewayPageStyles ||
                    this.GatewayPageStyles != null &&
                    this.GatewayPageStyles.SequenceEqual(input.GatewayPageStyles)
                ) && 
                (
                    this.GatewayPartner == input.GatewayPartner ||
                    (this.GatewayPartner != null &&
                    this.GatewayPartner.Equals(input.GatewayPartner))
                ) && 
                (
                    this.GatewayPartnerLabel == input.GatewayPartnerLabel ||
                    (this.GatewayPartnerLabel != null &&
                    this.GatewayPartnerLabel.Equals(input.GatewayPartnerLabel))
                ) && 
                (
                    this.GatewayPassword == input.GatewayPassword ||
                    (this.GatewayPassword != null &&
                    this.GatewayPassword.Equals(input.GatewayPassword))
                ) && 
                (
                    this.GatewayPasswordLabel == input.GatewayPasswordLabel ||
                    (this.GatewayPasswordLabel != null &&
                    this.GatewayPasswordLabel.Equals(input.GatewayPasswordLabel))
                ) && 
                (
                    this.GatewayPayflowColor == input.GatewayPayflowColor ||
                    (this.GatewayPayflowColor != null &&
                    this.GatewayPayflowColor.Equals(input.GatewayPayflowColor))
                ) && 
                (
                    this.GatewayPrivateKeyPassword == input.GatewayPrivateKeyPassword ||
                    (this.GatewayPrivateKeyPassword != null &&
                    this.GatewayPrivateKeyPassword.Equals(input.GatewayPrivateKeyPassword))
                ) && 
                (
                    this.GatewayPrivateKeyPasswordLabel == input.GatewayPrivateKeyPasswordLabel ||
                    (this.GatewayPrivateKeyPasswordLabel != null &&
                    this.GatewayPrivateKeyPasswordLabel.Equals(input.GatewayPrivateKeyPasswordLabel))
                ) && 
                (
                    this.GatewaySolutionType == input.GatewaySolutionType ||
                    (this.GatewaySolutionType != null &&
                    this.GatewaySolutionType.Equals(input.GatewaySolutionType))
                ) && 
                (
                    this.GatewaySolutionTypeLabel == input.GatewaySolutionTypeLabel ||
                    (this.GatewaySolutionTypeLabel != null &&
                    this.GatewaySolutionTypeLabel.Equals(input.GatewaySolutionTypeLabel))
                ) && 
                (
                    this.GatewaySolutionTypes == input.GatewaySolutionTypes ||
                    this.GatewaySolutionTypes != null &&
                    this.GatewaySolutionTypes.SequenceEqual(input.GatewaySolutionTypes)
                ) && 
                (
                    this.GatewayUrl == input.GatewayUrl ||
                    (this.GatewayUrl != null &&
                    this.GatewayUrl.Equals(input.GatewayUrl))
                ) && 
                (
                    this.GatewayUrlLabel == input.GatewayUrlLabel ||
                    (this.GatewayUrlLabel != null &&
                    this.GatewayUrlLabel.Equals(input.GatewayUrlLabel))
                ) && 
                (
                    this.GatewayUsername == input.GatewayUsername ||
                    (this.GatewayUsername != null &&
                    this.GatewayUsername.Equals(input.GatewayUsername))
                ) && 
                (
                    this.GatewayUsernameLabel == input.GatewayUsernameLabel ||
                    (this.GatewayUsernameLabel != null &&
                    this.GatewayUsernameLabel.Equals(input.GatewayUsernameLabel))
                ) && 
                (
                    this.MerchantAccountProfileAmex == input.MerchantAccountProfileAmex ||
                    (this.MerchantAccountProfileAmex != null &&
                    this.MerchantAccountProfileAmex.Equals(input.MerchantAccountProfileAmex))
                ) && 
                (
                    this.MerchantAccountProfileDinersClub == input.MerchantAccountProfileDinersClub ||
                    (this.MerchantAccountProfileDinersClub != null &&
                    this.MerchantAccountProfileDinersClub.Equals(input.MerchantAccountProfileDinersClub))
                ) && 
                (
                    this.MerchantAccountProfileDiscover == input.MerchantAccountProfileDiscover ||
                    (this.MerchantAccountProfileDiscover != null &&
                    this.MerchantAccountProfileDiscover.Equals(input.MerchantAccountProfileDiscover))
                ) && 
                (
                    this.MerchantAccountProfileJcb == input.MerchantAccountProfileJcb ||
                    (this.MerchantAccountProfileJcb != null &&
                    this.MerchantAccountProfileJcb.Equals(input.MerchantAccountProfileJcb))
                ) && 
                (
                    this.MerchantAccountProfileMastercard == input.MerchantAccountProfileMastercard ||
                    (this.MerchantAccountProfileMastercard != null &&
                    this.MerchantAccountProfileMastercard.Equals(input.MerchantAccountProfileMastercard))
                ) && 
                (
                    this.MerchantAccountProfileVisa == input.MerchantAccountProfileVisa ||
                    (this.MerchantAccountProfileVisa != null &&
                    this.MerchantAccountProfileVisa.Equals(input.MerchantAccountProfileVisa))
                ) && 
                (
                    this.MerchantId == input.MerchantId ||
                    (this.MerchantId != null &&
                    this.MerchantId.Equals(input.MerchantId))
                ) && 
                (
                    this.MultiCurrencyDetails == input.MultiCurrencyDetails ||
                    (this.MultiCurrencyDetails != null &&
                    this.MultiCurrencyDetails.Equals(input.MultiCurrencyDetails))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.RefundSupported == input.RefundSupported ||
                    (this.RefundSupported != null &&
                    this.RefundSupported.Equals(input.RefundSupported))
                ) && 
                (
                    this.RequireEcheckTaxIdOrDriversLicense == input.RequireEcheckTaxIdOrDriversLicense ||
                    (this.RequireEcheckTaxIdOrDriversLicense != null &&
                    this.RequireEcheckTaxIdOrDriversLicense.Equals(input.RequireEcheckTaxIdOrDriversLicense))
                ) && 
                (
                    this.SupportVbv3ds == input.SupportVbv3ds ||
                    (this.SupportVbv3ds != null &&
                    this.SupportVbv3ds.Equals(input.SupportVbv3ds))
                ) && 
                (
                    this.SupportsAmex == input.SupportsAmex ||
                    (this.SupportsAmex != null &&
                    this.SupportsAmex.Equals(input.SupportsAmex))
                ) && 
                (
                    this.SupportsDinersClub == input.SupportsDinersClub ||
                    (this.SupportsDinersClub != null &&
                    this.SupportsDinersClub.Equals(input.SupportsDinersClub))
                ) && 
                (
                    this.SupportsDiscover == input.SupportsDiscover ||
                    (this.SupportsDiscover != null &&
                    this.SupportsDiscover.Equals(input.SupportsDiscover))
                ) && 
                (
                    this.SupportsEcheck == input.SupportsEcheck ||
                    (this.SupportsEcheck != null &&
                    this.SupportsEcheck.Equals(input.SupportsEcheck))
                ) && 
                (
                    this.SupportsElectronicGiftCard == input.SupportsElectronicGiftCard ||
                    (this.SupportsElectronicGiftCard != null &&
                    this.SupportsElectronicGiftCard.Equals(input.SupportsElectronicGiftCard))
                ) && 
                (
                    this.SupportsJcb == input.SupportsJcb ||
                    (this.SupportsJcb != null &&
                    this.SupportsJcb.Equals(input.SupportsJcb))
                ) && 
                (
                    this.SupportsMastercard == input.SupportsMastercard ||
                    (this.SupportsMastercard != null &&
                    this.SupportsMastercard.Equals(input.SupportsMastercard))
                ) && 
                (
                    this.SupportsVisa == input.SupportsVisa ||
                    (this.SupportsVisa != null &&
                    this.SupportsVisa.Equals(input.SupportsVisa))
                ) && 
                (
                    this.ThirdParty == input.ThirdParty ||
                    (this.ThirdParty != null &&
                    this.ThirdParty.Equals(input.ThirdParty))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ArbitraryHtml != null)
                    hashCode = hashCode * 59 + this.ArbitraryHtml.GetHashCode();
                if (this.Comment != null)
                    hashCode = hashCode * 59 + this.Comment.GetHashCode();
                if (this.CreditCardCapable != null)
                    hashCode = hashCode * 59 + this.CreditCardCapable.GetHashCode();
                if (this.EcheckCapable != null)
                    hashCode = hashCode * 59 + this.EcheckCapable.GetHashCode();
                if (this.EcheckSupported != null)
                    hashCode = hashCode * 59 + this.EcheckSupported.GetHashCode();
                if (this.Enabled != null)
                    hashCode = hashCode * 59 + this.Enabled.GetHashCode();
                if (this.GatewayCertPem != null)
                    hashCode = hashCode * 59 + this.GatewayCertPem.GetHashCode();
                if (this.GatewayCertPemLabel != null)
                    hashCode = hashCode * 59 + this.GatewayCertPemLabel.GetHashCode();
                if (this.GatewayEmail != null)
                    hashCode = hashCode * 59 + this.GatewayEmail.GetHashCode();
                if (this.GatewayEmailLabel != null)
                    hashCode = hashCode * 59 + this.GatewayEmailLabel.GetHashCode();
                if (this.GatewayEnvironment != null)
                    hashCode = hashCode * 59 + this.GatewayEnvironment.GetHashCode();
                if (this.GatewayEnvironmentLabel != null)
                    hashCode = hashCode * 59 + this.GatewayEnvironmentLabel.GetHashCode();
                if (this.GatewayEnvironments != null)
                    hashCode = hashCode * 59 + this.GatewayEnvironments.GetHashCode();
                if (this.GatewayHeaderBackColor != null)
                    hashCode = hashCode * 59 + this.GatewayHeaderBackColor.GetHashCode();
                if (this.GatewayHeaderBorderColor != null)
                    hashCode = hashCode * 59 + this.GatewayHeaderBorderColor.GetHashCode();
                if (this.GatewayHeaderImageUrl != null)
                    hashCode = hashCode * 59 + this.GatewayHeaderImageUrl.GetHashCode();
                if (this.GatewayKey != null)
                    hashCode = hashCode * 59 + this.GatewayKey.GetHashCode();
                if (this.GatewayKeyLabel != null)
                    hashCode = hashCode * 59 + this.GatewayKeyLabel.GetHashCode();
                if (this.GatewayKeyPem != null)
                    hashCode = hashCode * 59 + this.GatewayKeyPem.GetHashCode();
                if (this.GatewayKeyPemLabel != null)
                    hashCode = hashCode * 59 + this.GatewayKeyPemLabel.GetHashCode();
                if (this.GatewayLandingPage != null)
                    hashCode = hashCode * 59 + this.GatewayLandingPage.GetHashCode();
                if (this.GatewayMerchantId != null)
                    hashCode = hashCode * 59 + this.GatewayMerchantId.GetHashCode();
                if (this.GatewayMerchantIdLabel != null)
                    hashCode = hashCode * 59 + this.GatewayMerchantIdLabel.GetHashCode();
                if (this.GatewayMode != null)
                    hashCode = hashCode * 59 + this.GatewayMode.GetHashCode();
                if (this.GatewayModeLabel != null)
                    hashCode = hashCode * 59 + this.GatewayModeLabel.GetHashCode();
                if (this.GatewayModes != null)
                    hashCode = hashCode * 59 + this.GatewayModes.GetHashCode();
                if (this.GatewayPageStyle != null)
                    hashCode = hashCode * 59 + this.GatewayPageStyle.GetHashCode();
                if (this.GatewayPageStyleLabel != null)
                    hashCode = hashCode * 59 + this.GatewayPageStyleLabel.GetHashCode();
                if (this.GatewayPageStyles != null)
                    hashCode = hashCode * 59 + this.GatewayPageStyles.GetHashCode();
                if (this.GatewayPartner != null)
                    hashCode = hashCode * 59 + this.GatewayPartner.GetHashCode();
                if (this.GatewayPartnerLabel != null)
                    hashCode = hashCode * 59 + this.GatewayPartnerLabel.GetHashCode();
                if (this.GatewayPassword != null)
                    hashCode = hashCode * 59 + this.GatewayPassword.GetHashCode();
                if (this.GatewayPasswordLabel != null)
                    hashCode = hashCode * 59 + this.GatewayPasswordLabel.GetHashCode();
                if (this.GatewayPayflowColor != null)
                    hashCode = hashCode * 59 + this.GatewayPayflowColor.GetHashCode();
                if (this.GatewayPrivateKeyPassword != null)
                    hashCode = hashCode * 59 + this.GatewayPrivateKeyPassword.GetHashCode();
                if (this.GatewayPrivateKeyPasswordLabel != null)
                    hashCode = hashCode * 59 + this.GatewayPrivateKeyPasswordLabel.GetHashCode();
                if (this.GatewaySolutionType != null)
                    hashCode = hashCode * 59 + this.GatewaySolutionType.GetHashCode();
                if (this.GatewaySolutionTypeLabel != null)
                    hashCode = hashCode * 59 + this.GatewaySolutionTypeLabel.GetHashCode();
                if (this.GatewaySolutionTypes != null)
                    hashCode = hashCode * 59 + this.GatewaySolutionTypes.GetHashCode();
                if (this.GatewayUrl != null)
                    hashCode = hashCode * 59 + this.GatewayUrl.GetHashCode();
                if (this.GatewayUrlLabel != null)
                    hashCode = hashCode * 59 + this.GatewayUrlLabel.GetHashCode();
                if (this.GatewayUsername != null)
                    hashCode = hashCode * 59 + this.GatewayUsername.GetHashCode();
                if (this.GatewayUsernameLabel != null)
                    hashCode = hashCode * 59 + this.GatewayUsernameLabel.GetHashCode();
                if (this.MerchantAccountProfileAmex != null)
                    hashCode = hashCode * 59 + this.MerchantAccountProfileAmex.GetHashCode();
                if (this.MerchantAccountProfileDinersClub != null)
                    hashCode = hashCode * 59 + this.MerchantAccountProfileDinersClub.GetHashCode();
                if (this.MerchantAccountProfileDiscover != null)
                    hashCode = hashCode * 59 + this.MerchantAccountProfileDiscover.GetHashCode();
                if (this.MerchantAccountProfileJcb != null)
                    hashCode = hashCode * 59 + this.MerchantAccountProfileJcb.GetHashCode();
                if (this.MerchantAccountProfileMastercard != null)
                    hashCode = hashCode * 59 + this.MerchantAccountProfileMastercard.GetHashCode();
                if (this.MerchantAccountProfileVisa != null)
                    hashCode = hashCode * 59 + this.MerchantAccountProfileVisa.GetHashCode();
                if (this.MerchantId != null)
                    hashCode = hashCode * 59 + this.MerchantId.GetHashCode();
                if (this.MultiCurrencyDetails != null)
                    hashCode = hashCode * 59 + this.MultiCurrencyDetails.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.RefundSupported != null)
                    hashCode = hashCode * 59 + this.RefundSupported.GetHashCode();
                if (this.RequireEcheckTaxIdOrDriversLicense != null)
                    hashCode = hashCode * 59 + this.RequireEcheckTaxIdOrDriversLicense.GetHashCode();
                if (this.SupportVbv3ds != null)
                    hashCode = hashCode * 59 + this.SupportVbv3ds.GetHashCode();
                if (this.SupportsAmex != null)
                    hashCode = hashCode * 59 + this.SupportsAmex.GetHashCode();
                if (this.SupportsDinersClub != null)
                    hashCode = hashCode * 59 + this.SupportsDinersClub.GetHashCode();
                if (this.SupportsDiscover != null)
                    hashCode = hashCode * 59 + this.SupportsDiscover.GetHashCode();
                if (this.SupportsEcheck != null)
                    hashCode = hashCode * 59 + this.SupportsEcheck.GetHashCode();
                if (this.SupportsElectronicGiftCard != null)
                    hashCode = hashCode * 59 + this.SupportsElectronicGiftCard.GetHashCode();
                if (this.SupportsJcb != null)
                    hashCode = hashCode * 59 + this.SupportsJcb.GetHashCode();
                if (this.SupportsMastercard != null)
                    hashCode = hashCode * 59 + this.SupportsMastercard.GetHashCode();
                if (this.SupportsVisa != null)
                    hashCode = hashCode * 59 + this.SupportsVisa.GetHashCode();
                if (this.ThirdParty != null)
                    hashCode = hashCode * 59 + this.ThirdParty.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
