/* 
 * UltraCart Rest API V2
 *
 * UltraCart REST API Version 2
 *
 * OpenAPI spec version: 2.0.0
 * Contact: support@ultracart.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = com.ultracart.admin.v2.Client.SwaggerDateConverter;

namespace com.ultracart.admin.v2.Model
{
    /// <summary>
    /// TransactionGatewaysRequest
    /// </summary>
    [DataContract]
    public partial class TransactionGatewaysRequest :  IEquatable<TransactionGatewaysRequest>, IValidatableObject
    {
        /// <summary>
        /// The default transaction type for this merchant account
        /// </summary>
        /// <value>The default transaction type for this merchant account</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum DefaultCreditCardTransactionTypeEnum
        {
            
            /// <summary>
            /// Enum Andcapture for value: auth and capture
            /// </summary>
            [EnumMember(Value = "auth and capture")]
            Andcapture = 1,
            
            /// <summary>
            /// Enum Thencapture for value: auth then capture
            /// </summary>
            [EnumMember(Value = "auth then capture")]
            Thencapture = 2,
            
            /// <summary>
            /// Enum Only for value: auth only
            /// </summary>
            [EnumMember(Value = "auth only")]
            Only = 3
        }

        /// <summary>
        /// The default transaction type for this merchant account
        /// </summary>
        /// <value>The default transaction type for this merchant account</value>
        [DataMember(Name="default_credit_card_transaction_type", EmitDefaultValue=false)]
        public DefaultCreditCardTransactionTypeEnum? DefaultCreditCardTransactionType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="TransactionGatewaysRequest" /> class.
        /// </summary>
        /// <param name="defaultCreditCardTransactionType">The default transaction type for this merchant account.</param>
        /// <param name="gateways">gateways.</param>
        /// <param name="themeCreditCardTransactionTypes">A list of the storefronts and themes for this merchant account and what type of transaction should be attempted.</param>
        public TransactionGatewaysRequest(DefaultCreditCardTransactionTypeEnum? defaultCreditCardTransactionType = default(DefaultCreditCardTransactionTypeEnum?), List<TransactionGateway> gateways = default(List<TransactionGateway>), List<PaymentsThemeTransactionType> themeCreditCardTransactionTypes = default(List<PaymentsThemeTransactionType>))
        {
            this.DefaultCreditCardTransactionType = defaultCreditCardTransactionType;
            this.Gateways = gateways;
            this.ThemeCreditCardTransactionTypes = themeCreditCardTransactionTypes;
        }
        

        /// <summary>
        /// Gets or Sets Gateways
        /// </summary>
        [DataMember(Name="gateways", EmitDefaultValue=false)]
        public List<TransactionGateway> Gateways { get; set; }

        /// <summary>
        /// A list of the storefronts and themes for this merchant account and what type of transaction should be attempted
        /// </summary>
        /// <value>A list of the storefronts and themes for this merchant account and what type of transaction should be attempted</value>
        [DataMember(Name="theme_credit_card_transaction_types", EmitDefaultValue=false)]
        public List<PaymentsThemeTransactionType> ThemeCreditCardTransactionTypes { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TransactionGatewaysRequest {\n");
            sb.Append("  DefaultCreditCardTransactionType: ").Append(DefaultCreditCardTransactionType).Append("\n");
            sb.Append("  Gateways: ").Append(Gateways).Append("\n");
            sb.Append("  ThemeCreditCardTransactionTypes: ").Append(ThemeCreditCardTransactionTypes).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TransactionGatewaysRequest);
        }

        /// <summary>
        /// Returns true if TransactionGatewaysRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of TransactionGatewaysRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TransactionGatewaysRequest input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.DefaultCreditCardTransactionType == input.DefaultCreditCardTransactionType ||
                    (this.DefaultCreditCardTransactionType != null &&
                    this.DefaultCreditCardTransactionType.Equals(input.DefaultCreditCardTransactionType))
                ) && 
                (
                    this.Gateways == input.Gateways ||
                    this.Gateways != null &&
                    this.Gateways.SequenceEqual(input.Gateways)
                ) && 
                (
                    this.ThemeCreditCardTransactionTypes == input.ThemeCreditCardTransactionTypes ||
                    this.ThemeCreditCardTransactionTypes != null &&
                    this.ThemeCreditCardTransactionTypes.SequenceEqual(input.ThemeCreditCardTransactionTypes)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.DefaultCreditCardTransactionType != null)
                    hashCode = hashCode * 59 + this.DefaultCreditCardTransactionType.GetHashCode();
                if (this.Gateways != null)
                    hashCode = hashCode * 59 + this.Gateways.GetHashCode();
                if (this.ThemeCreditCardTransactionTypes != null)
                    hashCode = hashCode * 59 + this.ThemeCreditCardTransactionTypes.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
