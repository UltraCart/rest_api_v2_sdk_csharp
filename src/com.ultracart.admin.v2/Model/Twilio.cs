/*
 * UltraCart Rest API V2
 *
 * UltraCart REST API Version 2
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@ultracart.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = com.ultracart.admin.v2.Client.OpenAPIDateConverter;

namespace com.ultracart.admin.v2.Model
{
    /// <summary>
    /// Twilio
    /// </summary>
    [DataContract]
    public partial class Twilio :  IEquatable<Twilio>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Twilio" /> class.
        /// </summary>
        /// <param name="accountSid">accountSid.</param>
        /// <param name="authToken">authToken.</param>
        /// <param name="espTwilioUuid">espTwilioUuid.</param>
        /// <param name="phoneNumbers">phoneNumbers.</param>
        public Twilio(string accountSid = default(string), string authToken = default(string), string espTwilioUuid = default(string), List<string> phoneNumbers = default(List<string>))
        {
            this.AccountSid = accountSid;
            this.AuthToken = authToken;
            this.EspTwilioUuid = espTwilioUuid;
            this.PhoneNumbers = phoneNumbers;
        }

        /// <summary>
        /// Gets or Sets AccountSid
        /// </summary>
        [DataMember(Name="account_sid", EmitDefaultValue=false)]
        public string AccountSid { get; set; }

        /// <summary>
        /// Gets or Sets AuthToken
        /// </summary>
        [DataMember(Name="auth_token", EmitDefaultValue=false)]
        public string AuthToken { get; set; }

        /// <summary>
        /// Gets or Sets EspTwilioUuid
        /// </summary>
        [DataMember(Name="esp_twilio_uuid", EmitDefaultValue=false)]
        public string EspTwilioUuid { get; set; }

        /// <summary>
        /// Gets or Sets PhoneNumbers
        /// </summary>
        [DataMember(Name="phone_numbers", EmitDefaultValue=false)]
        public List<string> PhoneNumbers { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Twilio {\n");
            sb.Append("  AccountSid: ").Append(AccountSid).Append("\n");
            sb.Append("  AuthToken: ").Append(AuthToken).Append("\n");
            sb.Append("  EspTwilioUuid: ").Append(EspTwilioUuid).Append("\n");
            sb.Append("  PhoneNumbers: ").Append(PhoneNumbers).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Twilio);
        }

        /// <summary>
        /// Returns true if Twilio instances are equal
        /// </summary>
        /// <param name="input">Instance of Twilio to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Twilio input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.AccountSid == input.AccountSid ||
                    (this.AccountSid != null &&
                    this.AccountSid.Equals(input.AccountSid))
                ) && 
                (
                    this.AuthToken == input.AuthToken ||
                    (this.AuthToken != null &&
                    this.AuthToken.Equals(input.AuthToken))
                ) && 
                (
                    this.EspTwilioUuid == input.EspTwilioUuid ||
                    (this.EspTwilioUuid != null &&
                    this.EspTwilioUuid.Equals(input.EspTwilioUuid))
                ) && 
                (
                    this.PhoneNumbers == input.PhoneNumbers ||
                    this.PhoneNumbers != null &&
                    input.PhoneNumbers != null &&
                    this.PhoneNumbers.SequenceEqual(input.PhoneNumbers)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AccountSid != null)
                    hashCode = hashCode * 59 + this.AccountSid.GetHashCode();
                if (this.AuthToken != null)
                    hashCode = hashCode * 59 + this.AuthToken.GetHashCode();
                if (this.EspTwilioUuid != null)
                    hashCode = hashCode * 59 + this.EspTwilioUuid.GetHashCode();
                if (this.PhoneNumbers != null)
                    hashCode = hashCode * 59 + this.PhoneNumbers.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
