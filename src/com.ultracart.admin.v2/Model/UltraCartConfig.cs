/* 
 * UltraCart Rest API V2
 *
 * UltraCart REST API Version 2
 *
 * OpenAPI spec version: 2.0.0
 * Contact: support@ultracart.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = com.ultracart.admin.v2.Client.SwaggerDateConverter;

namespace com.ultracart.admin.v2.Model
{
    /// <summary>
    /// UltraCartConfig
    /// </summary>
    [DataContract]
    public partial class UltraCartConfig :  IEquatable<UltraCartConfig>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="UltraCartConfig" /> class.
        /// </summary>
        /// <param name="exemptFromColoradoRetailDeliveryFee">True if the Colorado Retail Delivery Fee should not be collected.</param>
        /// <param name="exemptFromMinnesotaRetailDeliveryFee">True if the Minnesota Retail Delivery Fee should not be collected.</param>
        /// <param name="taxBilling">True if sales tax should be collected based on billing address instead of shipping address.</param>
        public UltraCartConfig(bool? exemptFromColoradoRetailDeliveryFee = default(bool?), bool? exemptFromMinnesotaRetailDeliveryFee = default(bool?), bool? taxBilling = default(bool?))
        {
            this.ExemptFromColoradoRetailDeliveryFee = exemptFromColoradoRetailDeliveryFee;
            this.ExemptFromMinnesotaRetailDeliveryFee = exemptFromMinnesotaRetailDeliveryFee;
            this.TaxBilling = taxBilling;
        }
        
        /// <summary>
        /// True if the Colorado Retail Delivery Fee should not be collected
        /// </summary>
        /// <value>True if the Colorado Retail Delivery Fee should not be collected</value>
        [DataMember(Name="exempt_from_colorado_retail_delivery_fee", EmitDefaultValue=false)]
        public bool? ExemptFromColoradoRetailDeliveryFee { get; set; }

        /// <summary>
        /// True if the Minnesota Retail Delivery Fee should not be collected
        /// </summary>
        /// <value>True if the Minnesota Retail Delivery Fee should not be collected</value>
        [DataMember(Name="exempt_from_minnesota_retail_delivery_fee", EmitDefaultValue=false)]
        public bool? ExemptFromMinnesotaRetailDeliveryFee { get; set; }

        /// <summary>
        /// True if sales tax should be collected based on billing address instead of shipping address
        /// </summary>
        /// <value>True if sales tax should be collected based on billing address instead of shipping address</value>
        [DataMember(Name="tax_billing", EmitDefaultValue=false)]
        public bool? TaxBilling { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class UltraCartConfig {\n");
            sb.Append("  ExemptFromColoradoRetailDeliveryFee: ").Append(ExemptFromColoradoRetailDeliveryFee).Append("\n");
            sb.Append("  ExemptFromMinnesotaRetailDeliveryFee: ").Append(ExemptFromMinnesotaRetailDeliveryFee).Append("\n");
            sb.Append("  TaxBilling: ").Append(TaxBilling).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as UltraCartConfig);
        }

        /// <summary>
        /// Returns true if UltraCartConfig instances are equal
        /// </summary>
        /// <param name="input">Instance of UltraCartConfig to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(UltraCartConfig input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ExemptFromColoradoRetailDeliveryFee == input.ExemptFromColoradoRetailDeliveryFee ||
                    (this.ExemptFromColoradoRetailDeliveryFee != null &&
                    this.ExemptFromColoradoRetailDeliveryFee.Equals(input.ExemptFromColoradoRetailDeliveryFee))
                ) && 
                (
                    this.ExemptFromMinnesotaRetailDeliveryFee == input.ExemptFromMinnesotaRetailDeliveryFee ||
                    (this.ExemptFromMinnesotaRetailDeliveryFee != null &&
                    this.ExemptFromMinnesotaRetailDeliveryFee.Equals(input.ExemptFromMinnesotaRetailDeliveryFee))
                ) && 
                (
                    this.TaxBilling == input.TaxBilling ||
                    (this.TaxBilling != null &&
                    this.TaxBilling.Equals(input.TaxBilling))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ExemptFromColoradoRetailDeliveryFee != null)
                    hashCode = hashCode * 59 + this.ExemptFromColoradoRetailDeliveryFee.GetHashCode();
                if (this.ExemptFromMinnesotaRetailDeliveryFee != null)
                    hashCode = hashCode * 59 + this.ExemptFromMinnesotaRetailDeliveryFee.GetHashCode();
                if (this.TaxBilling != null)
                    hashCode = hashCode * 59 + this.TaxBilling.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
