/* 
 * UltraCart Rest API V2
 *
 * UltraCart REST API Version 2
 *
 * OpenAPI spec version: 2.0.0
 * Contact: support@ultracart.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = com.ultracart.admin.v2.Client.SwaggerDateConverter;

namespace com.ultracart.admin.v2.Model
{
    /// <summary>
    /// User
    /// </summary>
    [DataContract]
    public partial class User :  IEquatable<User>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="User" /> class.
        /// </summary>
        /// <param name="apiIpAddressMasks">A list of IP addresses whitelisted for any user with API Access permission.  Without this list, each ip address must be authenticated by a user, which can be a pain for some servers..</param>
        /// <param name="changeFtpPasswordTo">Supply a new FTP password using this field.  Password are stored using one-way encryption, so they are never available anywhere in the system.  The FTP password cannot be the same as the normal password..</param>
        /// <param name="changePasswordTo">Supply a new password using this field.  Password are stored using one-way encryption, so they are never available anywhere in the system..</param>
        /// <param name="email">Email address of user.</param>
        /// <param name="fullName">Full name of user.  This is used solely for human assistance and so the UltraCart staff knows who they are calling when there is a problem..</param>
        /// <param name="groups">A list of groups for this merchant and whether or not this user is a member of those groups..</param>
        /// <param name="linkedAccounts">A list of linked accounts and whether or not this user is mirrored to any of those accounts..</param>
        /// <param name="login">User name of user.  Must be unique across a merchant account..</param>
        /// <param name="loginHistories">A list of user logins over the past 90 days.</param>
        /// <param name="notifications">A list of notifications the user receives..</param>
        /// <param name="otpSerialNumber">OTP Serial Number such as Google Authenticator or Crypto Card..</param>
        /// <param name="permissions">A list of permissions the user enjoys for accessing the backend of UltraCart..</param>
        /// <param name="phone">Phone number of user.  Please supply a valid phone number.  When something breaks on your account, we need to be able to reach you..</param>
        /// <param name="userId">User id is a unique identifier for this user.</param>
        public User(List<string> apiIpAddressMasks = default(List<string>), string changeFtpPasswordTo = default(string), string changePasswordTo = default(string), string email = default(string), string fullName = default(string), List<UserGroupMembership> groups = default(List<UserGroupMembership>), List<LinkedAccount> linkedAccounts = default(List<LinkedAccount>), string login = default(string), List<UserLogin> loginHistories = default(List<UserLogin>), List<Notification> notifications = default(List<Notification>), string otpSerialNumber = default(string), List<Permission> permissions = default(List<Permission>), string phone = default(string), int? userId = default(int?))
        {
            this.ApiIpAddressMasks = apiIpAddressMasks;
            this.ChangeFtpPasswordTo = changeFtpPasswordTo;
            this.ChangePasswordTo = changePasswordTo;
            this.Email = email;
            this.FullName = fullName;
            this.Groups = groups;
            this.LinkedAccounts = linkedAccounts;
            this.Login = login;
            this.LoginHistories = loginHistories;
            this.Notifications = notifications;
            this.OtpSerialNumber = otpSerialNumber;
            this.Permissions = permissions;
            this.Phone = phone;
            this.UserId = userId;
        }
        
        /// <summary>
        /// A list of IP addresses whitelisted for any user with API Access permission.  Without this list, each ip address must be authenticated by a user, which can be a pain for some servers.
        /// </summary>
        /// <value>A list of IP addresses whitelisted for any user with API Access permission.  Without this list, each ip address must be authenticated by a user, which can be a pain for some servers.</value>
        [DataMember(Name="api_ip_address_masks", EmitDefaultValue=false)]
        public List<string> ApiIpAddressMasks { get; set; }

        /// <summary>
        /// Supply a new FTP password using this field.  Password are stored using one-way encryption, so they are never available anywhere in the system.  The FTP password cannot be the same as the normal password.
        /// </summary>
        /// <value>Supply a new FTP password using this field.  Password are stored using one-way encryption, so they are never available anywhere in the system.  The FTP password cannot be the same as the normal password.</value>
        [DataMember(Name="change_ftp_password_to", EmitDefaultValue=false)]
        public string ChangeFtpPasswordTo { get; set; }

        /// <summary>
        /// Supply a new password using this field.  Password are stored using one-way encryption, so they are never available anywhere in the system.
        /// </summary>
        /// <value>Supply a new password using this field.  Password are stored using one-way encryption, so they are never available anywhere in the system.</value>
        [DataMember(Name="change_password_to", EmitDefaultValue=false)]
        public string ChangePasswordTo { get; set; }

        /// <summary>
        /// Email address of user
        /// </summary>
        /// <value>Email address of user</value>
        [DataMember(Name="email", EmitDefaultValue=false)]
        public string Email { get; set; }

        /// <summary>
        /// Full name of user.  This is used solely for human assistance and so the UltraCart staff knows who they are calling when there is a problem.
        /// </summary>
        /// <value>Full name of user.  This is used solely for human assistance and so the UltraCart staff knows who they are calling when there is a problem.</value>
        [DataMember(Name="full_name", EmitDefaultValue=false)]
        public string FullName { get; set; }

        /// <summary>
        /// A list of groups for this merchant and whether or not this user is a member of those groups.
        /// </summary>
        /// <value>A list of groups for this merchant and whether or not this user is a member of those groups.</value>
        [DataMember(Name="groups", EmitDefaultValue=false)]
        public List<UserGroupMembership> Groups { get; set; }

        /// <summary>
        /// A list of linked accounts and whether or not this user is mirrored to any of those accounts.
        /// </summary>
        /// <value>A list of linked accounts and whether or not this user is mirrored to any of those accounts.</value>
        [DataMember(Name="linked_accounts", EmitDefaultValue=false)]
        public List<LinkedAccount> LinkedAccounts { get; set; }

        /// <summary>
        /// User name of user.  Must be unique across a merchant account.
        /// </summary>
        /// <value>User name of user.  Must be unique across a merchant account.</value>
        [DataMember(Name="login", EmitDefaultValue=false)]
        public string Login { get; set; }

        /// <summary>
        /// A list of user logins over the past 90 days
        /// </summary>
        /// <value>A list of user logins over the past 90 days</value>
        [DataMember(Name="login_histories", EmitDefaultValue=false)]
        public List<UserLogin> LoginHistories { get; set; }

        /// <summary>
        /// A list of notifications the user receives.
        /// </summary>
        /// <value>A list of notifications the user receives.</value>
        [DataMember(Name="notifications", EmitDefaultValue=false)]
        public List<Notification> Notifications { get; set; }

        /// <summary>
        /// OTP Serial Number such as Google Authenticator or Crypto Card.
        /// </summary>
        /// <value>OTP Serial Number such as Google Authenticator or Crypto Card.</value>
        [DataMember(Name="otp_serial_number", EmitDefaultValue=false)]
        public string OtpSerialNumber { get; set; }

        /// <summary>
        /// A list of permissions the user enjoys for accessing the backend of UltraCart.
        /// </summary>
        /// <value>A list of permissions the user enjoys for accessing the backend of UltraCart.</value>
        [DataMember(Name="permissions", EmitDefaultValue=false)]
        public List<Permission> Permissions { get; set; }

        /// <summary>
        /// Phone number of user.  Please supply a valid phone number.  When something breaks on your account, we need to be able to reach you.
        /// </summary>
        /// <value>Phone number of user.  Please supply a valid phone number.  When something breaks on your account, we need to be able to reach you.</value>
        [DataMember(Name="phone", EmitDefaultValue=false)]
        public string Phone { get; set; }

        /// <summary>
        /// User id is a unique identifier for this user
        /// </summary>
        /// <value>User id is a unique identifier for this user</value>
        [DataMember(Name="user_id", EmitDefaultValue=false)]
        public int? UserId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class User {\n");
            sb.Append("  ApiIpAddressMasks: ").Append(ApiIpAddressMasks).Append("\n");
            sb.Append("  ChangeFtpPasswordTo: ").Append(ChangeFtpPasswordTo).Append("\n");
            sb.Append("  ChangePasswordTo: ").Append(ChangePasswordTo).Append("\n");
            sb.Append("  Email: ").Append(Email).Append("\n");
            sb.Append("  FullName: ").Append(FullName).Append("\n");
            sb.Append("  Groups: ").Append(Groups).Append("\n");
            sb.Append("  LinkedAccounts: ").Append(LinkedAccounts).Append("\n");
            sb.Append("  Login: ").Append(Login).Append("\n");
            sb.Append("  LoginHistories: ").Append(LoginHistories).Append("\n");
            sb.Append("  Notifications: ").Append(Notifications).Append("\n");
            sb.Append("  OtpSerialNumber: ").Append(OtpSerialNumber).Append("\n");
            sb.Append("  Permissions: ").Append(Permissions).Append("\n");
            sb.Append("  Phone: ").Append(Phone).Append("\n");
            sb.Append("  UserId: ").Append(UserId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as User);
        }

        /// <summary>
        /// Returns true if User instances are equal
        /// </summary>
        /// <param name="input">Instance of User to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(User input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ApiIpAddressMasks == input.ApiIpAddressMasks ||
                    this.ApiIpAddressMasks != null &&
                    this.ApiIpAddressMasks.SequenceEqual(input.ApiIpAddressMasks)
                ) && 
                (
                    this.ChangeFtpPasswordTo == input.ChangeFtpPasswordTo ||
                    (this.ChangeFtpPasswordTo != null &&
                    this.ChangeFtpPasswordTo.Equals(input.ChangeFtpPasswordTo))
                ) && 
                (
                    this.ChangePasswordTo == input.ChangePasswordTo ||
                    (this.ChangePasswordTo != null &&
                    this.ChangePasswordTo.Equals(input.ChangePasswordTo))
                ) && 
                (
                    this.Email == input.Email ||
                    (this.Email != null &&
                    this.Email.Equals(input.Email))
                ) && 
                (
                    this.FullName == input.FullName ||
                    (this.FullName != null &&
                    this.FullName.Equals(input.FullName))
                ) && 
                (
                    this.Groups == input.Groups ||
                    this.Groups != null &&
                    this.Groups.SequenceEqual(input.Groups)
                ) && 
                (
                    this.LinkedAccounts == input.LinkedAccounts ||
                    this.LinkedAccounts != null &&
                    this.LinkedAccounts.SequenceEqual(input.LinkedAccounts)
                ) && 
                (
                    this.Login == input.Login ||
                    (this.Login != null &&
                    this.Login.Equals(input.Login))
                ) && 
                (
                    this.LoginHistories == input.LoginHistories ||
                    this.LoginHistories != null &&
                    this.LoginHistories.SequenceEqual(input.LoginHistories)
                ) && 
                (
                    this.Notifications == input.Notifications ||
                    this.Notifications != null &&
                    this.Notifications.SequenceEqual(input.Notifications)
                ) && 
                (
                    this.OtpSerialNumber == input.OtpSerialNumber ||
                    (this.OtpSerialNumber != null &&
                    this.OtpSerialNumber.Equals(input.OtpSerialNumber))
                ) && 
                (
                    this.Permissions == input.Permissions ||
                    this.Permissions != null &&
                    this.Permissions.SequenceEqual(input.Permissions)
                ) && 
                (
                    this.Phone == input.Phone ||
                    (this.Phone != null &&
                    this.Phone.Equals(input.Phone))
                ) && 
                (
                    this.UserId == input.UserId ||
                    (this.UserId != null &&
                    this.UserId.Equals(input.UserId))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ApiIpAddressMasks != null)
                    hashCode = hashCode * 59 + this.ApiIpAddressMasks.GetHashCode();
                if (this.ChangeFtpPasswordTo != null)
                    hashCode = hashCode * 59 + this.ChangeFtpPasswordTo.GetHashCode();
                if (this.ChangePasswordTo != null)
                    hashCode = hashCode * 59 + this.ChangePasswordTo.GetHashCode();
                if (this.Email != null)
                    hashCode = hashCode * 59 + this.Email.GetHashCode();
                if (this.FullName != null)
                    hashCode = hashCode * 59 + this.FullName.GetHashCode();
                if (this.Groups != null)
                    hashCode = hashCode * 59 + this.Groups.GetHashCode();
                if (this.LinkedAccounts != null)
                    hashCode = hashCode * 59 + this.LinkedAccounts.GetHashCode();
                if (this.Login != null)
                    hashCode = hashCode * 59 + this.Login.GetHashCode();
                if (this.LoginHistories != null)
                    hashCode = hashCode * 59 + this.LoginHistories.GetHashCode();
                if (this.Notifications != null)
                    hashCode = hashCode * 59 + this.Notifications.GetHashCode();
                if (this.OtpSerialNumber != null)
                    hashCode = hashCode * 59 + this.OtpSerialNumber.GetHashCode();
                if (this.Permissions != null)
                    hashCode = hashCode * 59 + this.Permissions.GetHashCode();
                if (this.Phone != null)
                    hashCode = hashCode * 59 + this.Phone.GetHashCode();
                if (this.UserId != null)
                    hashCode = hashCode * 59 + this.UserId.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Email (string) maxLength
            if(this.Email != null && this.Email.Length > 150)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Email, length must be less than 150.", new [] { "Email" });
            }

            yield break;
        }
    }

}
