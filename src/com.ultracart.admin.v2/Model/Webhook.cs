/* 
 * UltraCart Rest API V2
 *
 * UltraCart REST API Version 2
 *
 * OpenAPI spec version: 2.0.0
 * Contact: support@ultracart.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = com.ultracart.admin.v2.Client.SwaggerDateConverter;

namespace com.ultracart.admin.v2.Model
{
    /// <summary>
    /// Webhook
    /// </summary>
    [DataContract]
    public partial class Webhook :  IEquatable<Webhook>, IValidatableObject
    {
        /// <summary>
        /// Version of the API objects that are sent in notifications
        /// </summary>
        /// <value>Version of the API objects that are sent in notifications</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ApiVersionEnum
        {
            
            /// <summary>
            /// Enum _20170301 for value: 2017-03-01
            /// </summary>
            [EnumMember(Value = "2017-03-01")]
            _20170301 = 1
        }

        /// <summary>
        /// Version of the API objects that are sent in notifications
        /// </summary>
        /// <value>Version of the API objects that are sent in notifications</value>
        [DataMember(Name="api_version", EmitDefaultValue=false)]
        public ApiVersionEnum? ApiVersion { get; set; }
        /// <summary>
        /// The type of authentication this webhook will use when communicating with your server
        /// </summary>
        /// <value>The type of authentication this webhook will use when communicating with your server</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum AuthenticationTypeEnum
        {
            
            /// <summary>
            /// Enum None for value: none
            /// </summary>
            [EnumMember(Value = "none")]
            None = 1,
            
            /// <summary>
            /// Enum Basic for value: basic
            /// </summary>
            [EnumMember(Value = "basic")]
            Basic = 2,
            
            /// <summary>
            /// Enum Apiuser for value: api user
            /// </summary>
            [EnumMember(Value = "api user")]
            Apiuser = 3,
            
            /// <summary>
            /// Enum Awsiam for value: aws iam
            /// </summary>
            [EnumMember(Value = "aws iam")]
            Awsiam = 4
        }

        /// <summary>
        /// The type of authentication this webhook will use when communicating with your server
        /// </summary>
        /// <value>The type of authentication this webhook will use when communicating with your server</value>
        [DataMember(Name="authentication_type", EmitDefaultValue=false)]
        public AuthenticationTypeEnum? AuthenticationType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="Webhook" /> class.
        /// </summary>
        /// <param name="apiUserOid">Populated if webhook associated with an API user.</param>
        /// <param name="apiVersion">Version of the API objects that are sent in notifications.</param>
        /// <param name="applicationProfile">applicationProfile.</param>
        /// <param name="authenticationType">The type of authentication this webhook will use when communicating with your server.</param>
        /// <param name="basicPassword">Basic authentication password.</param>
        /// <param name="basicUsername">Basic authentication user name.</param>
        /// <param name="compressEvents">Compress events with GZIP then base 64 encode them as a string.</param>
        /// <param name="consecutiveFailures">The number of consecutive failures that have occurred trying to deliver notifications to the target server.</param>
        /// <param name="disabled">True if the webhook has been disabled.</param>
        /// <param name="eventCategories">The categories of events.  Individual events and subscriptions are handled in the child objects.  _placeholders parameter effects the population of this on a retrieval..</param>
        /// <param name="iamAccessKey">IAM Access Key for AWS SQS Delivery.</param>
        /// <param name="iamSecretKey">IAM Secret Key for AWS SQS Delivery.</param>
        /// <param name="maximumEvents">The maximum number of events in the payload that UltraCart will deliver.</param>
        /// <param name="maximumSize">The maximum size of the payload that UltraCart will deliver.</param>
        /// <param name="merchantId">The UltraCart merchant ID that owns this webhook.</param>
        /// <param name="nextRetryAfter">The next time UltraCart will attempt delivery if failures have been occurring.</param>
        /// <param name="pending">The number of pending events for this webhook.</param>
        /// <param name="webhookOid">The object identifier for this webhook.</param>
        /// <param name="webhookUrl">The URL to deliver events to.  Must be HTTPS for customer related information..</param>
        public Webhook(int? apiUserOid = default(int?), ApiVersionEnum? apiVersion = default(ApiVersionEnum?), ApiUserApplicationProfile applicationProfile = default(ApiUserApplicationProfile), AuthenticationTypeEnum? authenticationType = default(AuthenticationTypeEnum?), string basicPassword = default(string), string basicUsername = default(string), bool? compressEvents = default(bool?), int? consecutiveFailures = default(int?), bool? disabled = default(bool?), List<WebhookEventCategory> eventCategories = default(List<WebhookEventCategory>), string iamAccessKey = default(string), string iamSecretKey = default(string), int? maximumEvents = default(int?), int? maximumSize = default(int?), string merchantId = default(string), string nextRetryAfter = default(string), int? pending = default(int?), int? webhookOid = default(int?), string webhookUrl = default(string))
        {
            this.ApiUserOid = apiUserOid;
            this.ApiVersion = apiVersion;
            this.ApplicationProfile = applicationProfile;
            this.AuthenticationType = authenticationType;
            this.BasicPassword = basicPassword;
            this.BasicUsername = basicUsername;
            this.CompressEvents = compressEvents;
            this.ConsecutiveFailures = consecutiveFailures;
            this.Disabled = disabled;
            this.EventCategories = eventCategories;
            this.IamAccessKey = iamAccessKey;
            this.IamSecretKey = iamSecretKey;
            this.MaximumEvents = maximumEvents;
            this.MaximumSize = maximumSize;
            this.MerchantId = merchantId;
            this.NextRetryAfter = nextRetryAfter;
            this.Pending = pending;
            this.WebhookOid = webhookOid;
            this.WebhookUrl = webhookUrl;
        }
        
        /// <summary>
        /// Populated if webhook associated with an API user
        /// </summary>
        /// <value>Populated if webhook associated with an API user</value>
        [DataMember(Name="api_user_oid", EmitDefaultValue=false)]
        public int? ApiUserOid { get; set; }


        /// <summary>
        /// Gets or Sets ApplicationProfile
        /// </summary>
        [DataMember(Name="application_profile", EmitDefaultValue=false)]
        public ApiUserApplicationProfile ApplicationProfile { get; set; }


        /// <summary>
        /// Basic authentication password
        /// </summary>
        /// <value>Basic authentication password</value>
        [DataMember(Name="basic_password", EmitDefaultValue=false)]
        public string BasicPassword { get; set; }

        /// <summary>
        /// Basic authentication user name
        /// </summary>
        /// <value>Basic authentication user name</value>
        [DataMember(Name="basic_username", EmitDefaultValue=false)]
        public string BasicUsername { get; set; }

        /// <summary>
        /// Compress events with GZIP then base 64 encode them as a string
        /// </summary>
        /// <value>Compress events with GZIP then base 64 encode them as a string</value>
        [DataMember(Name="compress_events", EmitDefaultValue=false)]
        public bool? CompressEvents { get; set; }

        /// <summary>
        /// The number of consecutive failures that have occurred trying to deliver notifications to the target server
        /// </summary>
        /// <value>The number of consecutive failures that have occurred trying to deliver notifications to the target server</value>
        [DataMember(Name="consecutive_failures", EmitDefaultValue=false)]
        public int? ConsecutiveFailures { get; set; }

        /// <summary>
        /// True if the webhook has been disabled
        /// </summary>
        /// <value>True if the webhook has been disabled</value>
        [DataMember(Name="disabled", EmitDefaultValue=false)]
        public bool? Disabled { get; set; }

        /// <summary>
        /// The categories of events.  Individual events and subscriptions are handled in the child objects.  _placeholders parameter effects the population of this on a retrieval.
        /// </summary>
        /// <value>The categories of events.  Individual events and subscriptions are handled in the child objects.  _placeholders parameter effects the population of this on a retrieval.</value>
        [DataMember(Name="event_categories", EmitDefaultValue=false)]
        public List<WebhookEventCategory> EventCategories { get; set; }

        /// <summary>
        /// IAM Access Key for AWS SQS Delivery
        /// </summary>
        /// <value>IAM Access Key for AWS SQS Delivery</value>
        [DataMember(Name="iam_access_key", EmitDefaultValue=false)]
        public string IamAccessKey { get; set; }

        /// <summary>
        /// IAM Secret Key for AWS SQS Delivery
        /// </summary>
        /// <value>IAM Secret Key for AWS SQS Delivery</value>
        [DataMember(Name="iam_secret_key", EmitDefaultValue=false)]
        public string IamSecretKey { get; set; }

        /// <summary>
        /// The maximum number of events in the payload that UltraCart will deliver
        /// </summary>
        /// <value>The maximum number of events in the payload that UltraCart will deliver</value>
        [DataMember(Name="maximum_events", EmitDefaultValue=false)]
        public int? MaximumEvents { get; set; }

        /// <summary>
        /// The maximum size of the payload that UltraCart will deliver
        /// </summary>
        /// <value>The maximum size of the payload that UltraCart will deliver</value>
        [DataMember(Name="maximum_size", EmitDefaultValue=false)]
        public int? MaximumSize { get; set; }

        /// <summary>
        /// The UltraCart merchant ID that owns this webhook
        /// </summary>
        /// <value>The UltraCart merchant ID that owns this webhook</value>
        [DataMember(Name="merchant_id", EmitDefaultValue=false)]
        public string MerchantId { get; set; }

        /// <summary>
        /// The next time UltraCart will attempt delivery if failures have been occurring
        /// </summary>
        /// <value>The next time UltraCart will attempt delivery if failures have been occurring</value>
        [DataMember(Name="next_retry_after", EmitDefaultValue=false)]
        public string NextRetryAfter { get; set; }

        /// <summary>
        /// The number of pending events for this webhook
        /// </summary>
        /// <value>The number of pending events for this webhook</value>
        [DataMember(Name="pending", EmitDefaultValue=false)]
        public int? Pending { get; set; }

        /// <summary>
        /// The object identifier for this webhook
        /// </summary>
        /// <value>The object identifier for this webhook</value>
        [DataMember(Name="webhook_oid", EmitDefaultValue=false)]
        public int? WebhookOid { get; set; }

        /// <summary>
        /// The URL to deliver events to.  Must be HTTPS for customer related information.
        /// </summary>
        /// <value>The URL to deliver events to.  Must be HTTPS for customer related information.</value>
        [DataMember(Name="webhook_url", EmitDefaultValue=false)]
        public string WebhookUrl { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Webhook {\n");
            sb.Append("  ApiUserOid: ").Append(ApiUserOid).Append("\n");
            sb.Append("  ApiVersion: ").Append(ApiVersion).Append("\n");
            sb.Append("  ApplicationProfile: ").Append(ApplicationProfile).Append("\n");
            sb.Append("  AuthenticationType: ").Append(AuthenticationType).Append("\n");
            sb.Append("  BasicPassword: ").Append(BasicPassword).Append("\n");
            sb.Append("  BasicUsername: ").Append(BasicUsername).Append("\n");
            sb.Append("  CompressEvents: ").Append(CompressEvents).Append("\n");
            sb.Append("  ConsecutiveFailures: ").Append(ConsecutiveFailures).Append("\n");
            sb.Append("  Disabled: ").Append(Disabled).Append("\n");
            sb.Append("  EventCategories: ").Append(EventCategories).Append("\n");
            sb.Append("  IamAccessKey: ").Append(IamAccessKey).Append("\n");
            sb.Append("  IamSecretKey: ").Append(IamSecretKey).Append("\n");
            sb.Append("  MaximumEvents: ").Append(MaximumEvents).Append("\n");
            sb.Append("  MaximumSize: ").Append(MaximumSize).Append("\n");
            sb.Append("  MerchantId: ").Append(MerchantId).Append("\n");
            sb.Append("  NextRetryAfter: ").Append(NextRetryAfter).Append("\n");
            sb.Append("  Pending: ").Append(Pending).Append("\n");
            sb.Append("  WebhookOid: ").Append(WebhookOid).Append("\n");
            sb.Append("  WebhookUrl: ").Append(WebhookUrl).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Webhook);
        }

        /// <summary>
        /// Returns true if Webhook instances are equal
        /// </summary>
        /// <param name="input">Instance of Webhook to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Webhook input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ApiUserOid == input.ApiUserOid ||
                    (this.ApiUserOid != null &&
                    this.ApiUserOid.Equals(input.ApiUserOid))
                ) && 
                (
                    this.ApiVersion == input.ApiVersion ||
                    (this.ApiVersion != null &&
                    this.ApiVersion.Equals(input.ApiVersion))
                ) && 
                (
                    this.ApplicationProfile == input.ApplicationProfile ||
                    (this.ApplicationProfile != null &&
                    this.ApplicationProfile.Equals(input.ApplicationProfile))
                ) && 
                (
                    this.AuthenticationType == input.AuthenticationType ||
                    (this.AuthenticationType != null &&
                    this.AuthenticationType.Equals(input.AuthenticationType))
                ) && 
                (
                    this.BasicPassword == input.BasicPassword ||
                    (this.BasicPassword != null &&
                    this.BasicPassword.Equals(input.BasicPassword))
                ) && 
                (
                    this.BasicUsername == input.BasicUsername ||
                    (this.BasicUsername != null &&
                    this.BasicUsername.Equals(input.BasicUsername))
                ) && 
                (
                    this.CompressEvents == input.CompressEvents ||
                    (this.CompressEvents != null &&
                    this.CompressEvents.Equals(input.CompressEvents))
                ) && 
                (
                    this.ConsecutiveFailures == input.ConsecutiveFailures ||
                    (this.ConsecutiveFailures != null &&
                    this.ConsecutiveFailures.Equals(input.ConsecutiveFailures))
                ) && 
                (
                    this.Disabled == input.Disabled ||
                    (this.Disabled != null &&
                    this.Disabled.Equals(input.Disabled))
                ) && 
                (
                    this.EventCategories == input.EventCategories ||
                    this.EventCategories != null &&
                    this.EventCategories.SequenceEqual(input.EventCategories)
                ) && 
                (
                    this.IamAccessKey == input.IamAccessKey ||
                    (this.IamAccessKey != null &&
                    this.IamAccessKey.Equals(input.IamAccessKey))
                ) && 
                (
                    this.IamSecretKey == input.IamSecretKey ||
                    (this.IamSecretKey != null &&
                    this.IamSecretKey.Equals(input.IamSecretKey))
                ) && 
                (
                    this.MaximumEvents == input.MaximumEvents ||
                    (this.MaximumEvents != null &&
                    this.MaximumEvents.Equals(input.MaximumEvents))
                ) && 
                (
                    this.MaximumSize == input.MaximumSize ||
                    (this.MaximumSize != null &&
                    this.MaximumSize.Equals(input.MaximumSize))
                ) && 
                (
                    this.MerchantId == input.MerchantId ||
                    (this.MerchantId != null &&
                    this.MerchantId.Equals(input.MerchantId))
                ) && 
                (
                    this.NextRetryAfter == input.NextRetryAfter ||
                    (this.NextRetryAfter != null &&
                    this.NextRetryAfter.Equals(input.NextRetryAfter))
                ) && 
                (
                    this.Pending == input.Pending ||
                    (this.Pending != null &&
                    this.Pending.Equals(input.Pending))
                ) && 
                (
                    this.WebhookOid == input.WebhookOid ||
                    (this.WebhookOid != null &&
                    this.WebhookOid.Equals(input.WebhookOid))
                ) && 
                (
                    this.WebhookUrl == input.WebhookUrl ||
                    (this.WebhookUrl != null &&
                    this.WebhookUrl.Equals(input.WebhookUrl))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ApiUserOid != null)
                    hashCode = hashCode * 59 + this.ApiUserOid.GetHashCode();
                if (this.ApiVersion != null)
                    hashCode = hashCode * 59 + this.ApiVersion.GetHashCode();
                if (this.ApplicationProfile != null)
                    hashCode = hashCode * 59 + this.ApplicationProfile.GetHashCode();
                if (this.AuthenticationType != null)
                    hashCode = hashCode * 59 + this.AuthenticationType.GetHashCode();
                if (this.BasicPassword != null)
                    hashCode = hashCode * 59 + this.BasicPassword.GetHashCode();
                if (this.BasicUsername != null)
                    hashCode = hashCode * 59 + this.BasicUsername.GetHashCode();
                if (this.CompressEvents != null)
                    hashCode = hashCode * 59 + this.CompressEvents.GetHashCode();
                if (this.ConsecutiveFailures != null)
                    hashCode = hashCode * 59 + this.ConsecutiveFailures.GetHashCode();
                if (this.Disabled != null)
                    hashCode = hashCode * 59 + this.Disabled.GetHashCode();
                if (this.EventCategories != null)
                    hashCode = hashCode * 59 + this.EventCategories.GetHashCode();
                if (this.IamAccessKey != null)
                    hashCode = hashCode * 59 + this.IamAccessKey.GetHashCode();
                if (this.IamSecretKey != null)
                    hashCode = hashCode * 59 + this.IamSecretKey.GetHashCode();
                if (this.MaximumEvents != null)
                    hashCode = hashCode * 59 + this.MaximumEvents.GetHashCode();
                if (this.MaximumSize != null)
                    hashCode = hashCode * 59 + this.MaximumSize.GetHashCode();
                if (this.MerchantId != null)
                    hashCode = hashCode * 59 + this.MerchantId.GetHashCode();
                if (this.NextRetryAfter != null)
                    hashCode = hashCode * 59 + this.NextRetryAfter.GetHashCode();
                if (this.Pending != null)
                    hashCode = hashCode * 59 + this.Pending.GetHashCode();
                if (this.WebhookOid != null)
                    hashCode = hashCode * 59 + this.WebhookOid.GetHashCode();
                if (this.WebhookUrl != null)
                    hashCode = hashCode * 59 + this.WebhookUrl.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
