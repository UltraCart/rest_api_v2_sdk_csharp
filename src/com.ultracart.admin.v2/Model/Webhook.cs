/* 
 * UltraCart Rest API V2
 *
 * This is the next generation UltraCart REST API...
 *
 * OpenAPI spec version: 2.0.0
 * Contact: support@ultracart.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace com.ultracart.admin.v2.Model
{
    /// <summary>
    /// Webhook
    /// </summary>
    [DataContract]
    public partial class Webhook :  IEquatable<Webhook>
    {
        /// <summary>
        /// Version of the API objects that are sent in notifications
        /// </summary>
        /// <value>Version of the API objects that are sent in notifications</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ApiVersionEnum
        {
            
            /// <summary>
            /// Enum _01 for "2017-03-01"
            /// </summary>
            [EnumMember(Value = "2017-03-01")]
            _01
        }

        /// <summary>
        /// The type of authentication this webhook will use when communicating with your server
        /// </summary>
        /// <value>The type of authentication this webhook will use when communicating with your server</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum AuthenticationTypeEnum
        {
            
            /// <summary>
            /// Enum None for "none"
            /// </summary>
            [EnumMember(Value = "none")]
            None,
            
            /// <summary>
            /// Enum Basic for "basic"
            /// </summary>
            [EnumMember(Value = "basic")]
            Basic
        }

        /// <summary>
        /// Version of the API objects that are sent in notifications
        /// </summary>
        /// <value>Version of the API objects that are sent in notifications</value>
        [DataMember(Name="api_version", EmitDefaultValue=false)]
        public ApiVersionEnum? ApiVersion { get; set; }
        /// <summary>
        /// The type of authentication this webhook will use when communicating with your server
        /// </summary>
        /// <value>The type of authentication this webhook will use when communicating with your server</value>
        [DataMember(Name="authentication_type", EmitDefaultValue=false)]
        public AuthenticationTypeEnum? AuthenticationType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="Webhook" /> class.
        /// </summary>
        /// <param name="ApiUserOid">Populated if webhook associated with an API user.</param>
        /// <param name="ApiVersion">Version of the API objects that are sent in notifications.</param>
        /// <param name="ApplicationProfile">ApplicationProfile.</param>
        /// <param name="AuthenticationType">The type of authentication this webhook will use when communicating with your server.</param>
        /// <param name="BasicPassword">Basic authentication password.</param>
        /// <param name="BasicUsername">Basic authentication user name.</param>
        /// <param name="ConsecutiveFailures">The number of consecutive failures that have occurred trying to deliver notifications to the target server.</param>
        /// <param name="Disabled">True if the webhook has been disabled.</param>
        /// <param name="EventCategories">The categories of events.  Individual events and subscriptions are handled in the child objects.  _placeholders parameter effects the population of this on a retrieval..</param>
        /// <param name="MaximumEvents">The maximum number of events in the payload that UltraCart will deliver.</param>
        /// <param name="MaximumSize">The maximum size of the payload that UltraCart will deliver.</param>
        /// <param name="MerchantId">The UltraCart merchant ID that owns this webhook.</param>
        /// <param name="NextRetryAfter">The next time UltraCart will attempt delivery if failures have been occurring.</param>
        /// <param name="Pending">The number of pending events for this webhook.</param>
        /// <param name="WebhookOid">The object identifier for this webhook.</param>
        /// <param name="WebhookUrl">The URL to deliver events to.  Must be HTTPS for customer related information..</param>
        public Webhook(int? ApiUserOid = null, ApiVersionEnum? ApiVersion = null, ApiUserApplicationProfile ApplicationProfile = null, AuthenticationTypeEnum? AuthenticationType = null, string BasicPassword = null, string BasicUsername = null, int? ConsecutiveFailures = null, bool? Disabled = null, List<WebhookEventCategory> EventCategories = null, int? MaximumEvents = null, int? MaximumSize = null, string MerchantId = null, string NextRetryAfter = null, int? Pending = null, int? WebhookOid = null, string WebhookUrl = null)
        {
            this.ApiUserOid = ApiUserOid;
            this.ApiVersion = ApiVersion;
            this.ApplicationProfile = ApplicationProfile;
            this.AuthenticationType = AuthenticationType;
            this.BasicPassword = BasicPassword;
            this.BasicUsername = BasicUsername;
            this.ConsecutiveFailures = ConsecutiveFailures;
            this.Disabled = Disabled;
            this.EventCategories = EventCategories;
            this.MaximumEvents = MaximumEvents;
            this.MaximumSize = MaximumSize;
            this.MerchantId = MerchantId;
            this.NextRetryAfter = NextRetryAfter;
            this.Pending = Pending;
            this.WebhookOid = WebhookOid;
            this.WebhookUrl = WebhookUrl;
        }
        
        /// <summary>
        /// Populated if webhook associated with an API user
        /// </summary>
        /// <value>Populated if webhook associated with an API user</value>
        [DataMember(Name="api_user_oid", EmitDefaultValue=false)]
        public int? ApiUserOid { get; set; }
        /// <summary>
        /// Gets or Sets ApplicationProfile
        /// </summary>
        [DataMember(Name="application_profile", EmitDefaultValue=false)]
        public ApiUserApplicationProfile ApplicationProfile { get; set; }
        /// <summary>
        /// Basic authentication password
        /// </summary>
        /// <value>Basic authentication password</value>
        [DataMember(Name="basic_password", EmitDefaultValue=false)]
        public string BasicPassword { get; set; }
        /// <summary>
        /// Basic authentication user name
        /// </summary>
        /// <value>Basic authentication user name</value>
        [DataMember(Name="basic_username", EmitDefaultValue=false)]
        public string BasicUsername { get; set; }
        /// <summary>
        /// The number of consecutive failures that have occurred trying to deliver notifications to the target server
        /// </summary>
        /// <value>The number of consecutive failures that have occurred trying to deliver notifications to the target server</value>
        [DataMember(Name="consecutive_failures", EmitDefaultValue=false)]
        public int? ConsecutiveFailures { get; set; }
        /// <summary>
        /// True if the webhook has been disabled
        /// </summary>
        /// <value>True if the webhook has been disabled</value>
        [DataMember(Name="disabled", EmitDefaultValue=false)]
        public bool? Disabled { get; set; }
        /// <summary>
        /// The categories of events.  Individual events and subscriptions are handled in the child objects.  _placeholders parameter effects the population of this on a retrieval.
        /// </summary>
        /// <value>The categories of events.  Individual events and subscriptions are handled in the child objects.  _placeholders parameter effects the population of this on a retrieval.</value>
        [DataMember(Name="event_categories", EmitDefaultValue=false)]
        public List<WebhookEventCategory> EventCategories { get; set; }
        /// <summary>
        /// The maximum number of events in the payload that UltraCart will deliver
        /// </summary>
        /// <value>The maximum number of events in the payload that UltraCart will deliver</value>
        [DataMember(Name="maximum_events", EmitDefaultValue=false)]
        public int? MaximumEvents { get; set; }
        /// <summary>
        /// The maximum size of the payload that UltraCart will deliver
        /// </summary>
        /// <value>The maximum size of the payload that UltraCart will deliver</value>
        [DataMember(Name="maximum_size", EmitDefaultValue=false)]
        public int? MaximumSize { get; set; }
        /// <summary>
        /// The UltraCart merchant ID that owns this webhook
        /// </summary>
        /// <value>The UltraCart merchant ID that owns this webhook</value>
        [DataMember(Name="merchant_id", EmitDefaultValue=false)]
        public string MerchantId { get; set; }
        /// <summary>
        /// The next time UltraCart will attempt delivery if failures have been occurring
        /// </summary>
        /// <value>The next time UltraCart will attempt delivery if failures have been occurring</value>
        [DataMember(Name="next_retry_after", EmitDefaultValue=false)]
        public string NextRetryAfter { get; set; }
        /// <summary>
        /// The number of pending events for this webhook
        /// </summary>
        /// <value>The number of pending events for this webhook</value>
        [DataMember(Name="pending", EmitDefaultValue=false)]
        public int? Pending { get; set; }
        /// <summary>
        /// The object identifier for this webhook
        /// </summary>
        /// <value>The object identifier for this webhook</value>
        [DataMember(Name="webhook_oid", EmitDefaultValue=false)]
        public int? WebhookOid { get; set; }
        /// <summary>
        /// The URL to deliver events to.  Must be HTTPS for customer related information.
        /// </summary>
        /// <value>The URL to deliver events to.  Must be HTTPS for customer related information.</value>
        [DataMember(Name="webhook_url", EmitDefaultValue=false)]
        public string WebhookUrl { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Webhook {\n");
            sb.Append("  ApiUserOid: ").Append(ApiUserOid).Append("\n");
            sb.Append("  ApiVersion: ").Append(ApiVersion).Append("\n");
            sb.Append("  ApplicationProfile: ").Append(ApplicationProfile).Append("\n");
            sb.Append("  AuthenticationType: ").Append(AuthenticationType).Append("\n");
            sb.Append("  BasicPassword: ").Append(BasicPassword).Append("\n");
            sb.Append("  BasicUsername: ").Append(BasicUsername).Append("\n");
            sb.Append("  ConsecutiveFailures: ").Append(ConsecutiveFailures).Append("\n");
            sb.Append("  Disabled: ").Append(Disabled).Append("\n");
            sb.Append("  EventCategories: ").Append(EventCategories).Append("\n");
            sb.Append("  MaximumEvents: ").Append(MaximumEvents).Append("\n");
            sb.Append("  MaximumSize: ").Append(MaximumSize).Append("\n");
            sb.Append("  MerchantId: ").Append(MerchantId).Append("\n");
            sb.Append("  NextRetryAfter: ").Append(NextRetryAfter).Append("\n");
            sb.Append("  Pending: ").Append(Pending).Append("\n");
            sb.Append("  WebhookOid: ").Append(WebhookOid).Append("\n");
            sb.Append("  WebhookUrl: ").Append(WebhookUrl).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as Webhook);
        }

        /// <summary>
        /// Returns true if Webhook instances are equal
        /// </summary>
        /// <param name="other">Instance of Webhook to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Webhook other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.ApiUserOid == other.ApiUserOid ||
                    this.ApiUserOid != null &&
                    this.ApiUserOid.Equals(other.ApiUserOid)
                ) && 
                (
                    this.ApiVersion == other.ApiVersion ||
                    this.ApiVersion != null &&
                    this.ApiVersion.Equals(other.ApiVersion)
                ) && 
                (
                    this.ApplicationProfile == other.ApplicationProfile ||
                    this.ApplicationProfile != null &&
                    this.ApplicationProfile.Equals(other.ApplicationProfile)
                ) && 
                (
                    this.AuthenticationType == other.AuthenticationType ||
                    this.AuthenticationType != null &&
                    this.AuthenticationType.Equals(other.AuthenticationType)
                ) && 
                (
                    this.BasicPassword == other.BasicPassword ||
                    this.BasicPassword != null &&
                    this.BasicPassword.Equals(other.BasicPassword)
                ) && 
                (
                    this.BasicUsername == other.BasicUsername ||
                    this.BasicUsername != null &&
                    this.BasicUsername.Equals(other.BasicUsername)
                ) && 
                (
                    this.ConsecutiveFailures == other.ConsecutiveFailures ||
                    this.ConsecutiveFailures != null &&
                    this.ConsecutiveFailures.Equals(other.ConsecutiveFailures)
                ) && 
                (
                    this.Disabled == other.Disabled ||
                    this.Disabled != null &&
                    this.Disabled.Equals(other.Disabled)
                ) && 
                (
                    this.EventCategories == other.EventCategories ||
                    this.EventCategories != null &&
                    this.EventCategories.SequenceEqual(other.EventCategories)
                ) && 
                (
                    this.MaximumEvents == other.MaximumEvents ||
                    this.MaximumEvents != null &&
                    this.MaximumEvents.Equals(other.MaximumEvents)
                ) && 
                (
                    this.MaximumSize == other.MaximumSize ||
                    this.MaximumSize != null &&
                    this.MaximumSize.Equals(other.MaximumSize)
                ) && 
                (
                    this.MerchantId == other.MerchantId ||
                    this.MerchantId != null &&
                    this.MerchantId.Equals(other.MerchantId)
                ) && 
                (
                    this.NextRetryAfter == other.NextRetryAfter ||
                    this.NextRetryAfter != null &&
                    this.NextRetryAfter.Equals(other.NextRetryAfter)
                ) && 
                (
                    this.Pending == other.Pending ||
                    this.Pending != null &&
                    this.Pending.Equals(other.Pending)
                ) && 
                (
                    this.WebhookOid == other.WebhookOid ||
                    this.WebhookOid != null &&
                    this.WebhookOid.Equals(other.WebhookOid)
                ) && 
                (
                    this.WebhookUrl == other.WebhookUrl ||
                    this.WebhookUrl != null &&
                    this.WebhookUrl.Equals(other.WebhookUrl)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.ApiUserOid != null)
                    hash = hash * 59 + this.ApiUserOid.GetHashCode();
                if (this.ApiVersion != null)
                    hash = hash * 59 + this.ApiVersion.GetHashCode();
                if (this.ApplicationProfile != null)
                    hash = hash * 59 + this.ApplicationProfile.GetHashCode();
                if (this.AuthenticationType != null)
                    hash = hash * 59 + this.AuthenticationType.GetHashCode();
                if (this.BasicPassword != null)
                    hash = hash * 59 + this.BasicPassword.GetHashCode();
                if (this.BasicUsername != null)
                    hash = hash * 59 + this.BasicUsername.GetHashCode();
                if (this.ConsecutiveFailures != null)
                    hash = hash * 59 + this.ConsecutiveFailures.GetHashCode();
                if (this.Disabled != null)
                    hash = hash * 59 + this.Disabled.GetHashCode();
                if (this.EventCategories != null)
                    hash = hash * 59 + this.EventCategories.GetHashCode();
                if (this.MaximumEvents != null)
                    hash = hash * 59 + this.MaximumEvents.GetHashCode();
                if (this.MaximumSize != null)
                    hash = hash * 59 + this.MaximumSize.GetHashCode();
                if (this.MerchantId != null)
                    hash = hash * 59 + this.MerchantId.GetHashCode();
                if (this.NextRetryAfter != null)
                    hash = hash * 59 + this.NextRetryAfter.GetHashCode();
                if (this.Pending != null)
                    hash = hash * 59 + this.Pending.GetHashCode();
                if (this.WebhookOid != null)
                    hash = hash * 59 + this.WebhookOid.GetHashCode();
                if (this.WebhookUrl != null)
                    hash = hash * 59 + this.WebhookUrl.GetHashCode();
                return hash;
            }
        }
    }

}
