/* 
 * UltraCart Rest API V2
 *
 * UltraCart REST API Version 2
 *
 * OpenAPI spec version: 2.0.0
 * Contact: support@ultracart.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = com.ultracart.admin.v2.Client.SwaggerDateConverter;

namespace com.ultracart.admin.v2.Model
{
    /// <summary>
    /// WorkflowAgentAuth
    /// </summary>
    [DataContract]
    public partial class WorkflowAgentAuth :  IEquatable<WorkflowAgentAuth>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="WorkflowAgentAuth" /> class.
        /// </summary>
        /// <param name="jwt">jwt.</param>
        /// <param name="merchantId">merchantId.</param>
        /// <param name="websocketUrl">websocketUrl.</param>
        public WorkflowAgentAuth(string jwt = default(string), string merchantId = default(string), string websocketUrl = default(string))
        {
            this.Jwt = jwt;
            this.MerchantId = merchantId;
            this.WebsocketUrl = websocketUrl;
        }
        
        /// <summary>
        /// Gets or Sets Jwt
        /// </summary>
        [DataMember(Name="jwt", EmitDefaultValue=false)]
        public string Jwt { get; set; }

        /// <summary>
        /// Gets or Sets MerchantId
        /// </summary>
        [DataMember(Name="merchant_id", EmitDefaultValue=false)]
        public string MerchantId { get; set; }

        /// <summary>
        /// Gets or Sets WebsocketUrl
        /// </summary>
        [DataMember(Name="websocket_url", EmitDefaultValue=false)]
        public string WebsocketUrl { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class WorkflowAgentAuth {\n");
            sb.Append("  Jwt: ").Append(Jwt).Append("\n");
            sb.Append("  MerchantId: ").Append(MerchantId).Append("\n");
            sb.Append("  WebsocketUrl: ").Append(WebsocketUrl).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as WorkflowAgentAuth);
        }

        /// <summary>
        /// Returns true if WorkflowAgentAuth instances are equal
        /// </summary>
        /// <param name="input">Instance of WorkflowAgentAuth to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(WorkflowAgentAuth input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Jwt == input.Jwt ||
                    (this.Jwt != null &&
                    this.Jwt.Equals(input.Jwt))
                ) && 
                (
                    this.MerchantId == input.MerchantId ||
                    (this.MerchantId != null &&
                    this.MerchantId.Equals(input.MerchantId))
                ) && 
                (
                    this.WebsocketUrl == input.WebsocketUrl ||
                    (this.WebsocketUrl != null &&
                    this.WebsocketUrl.Equals(input.WebsocketUrl))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Jwt != null)
                    hashCode = hashCode * 59 + this.Jwt.GetHashCode();
                if (this.MerchantId != null)
                    hashCode = hashCode * 59 + this.MerchantId.GetHashCode();
                if (this.WebsocketUrl != null)
                    hashCode = hashCode * 59 + this.WebsocketUrl.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
