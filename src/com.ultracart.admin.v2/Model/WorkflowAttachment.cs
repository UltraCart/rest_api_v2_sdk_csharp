/*
 * UltraCart Rest API V2
 *
 * UltraCart REST API Version 2
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@ultracart.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = com.ultracart.admin.v2.Client.OpenAPIDateConverter;

namespace com.ultracart.admin.v2.Model
{
    /// <summary>
    /// WorkflowAttachment
    /// </summary>
    [DataContract]
    public partial class WorkflowAttachment :  IEquatable<WorkflowAttachment>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="WorkflowAttachment" /> class.
        /// </summary>
        /// <param name="downloadKey">Temporary download URL.</param>
        /// <param name="fileName">File name.</param>
        /// <param name="fileUuid">File UUID.</param>
        /// <param name="mimeType">Mime Type.</param>
        /// <param name="uploadKey">Temporary upload key.</param>
        public WorkflowAttachment(string downloadKey = default(string), string fileName = default(string), string fileUuid = default(string), string mimeType = default(string), string uploadKey = default(string))
        {
            this.DownloadKey = downloadKey;
            this.FileName = fileName;
            this.FileUuid = fileUuid;
            this.MimeType = mimeType;
            this.UploadKey = uploadKey;
        }

        /// <summary>
        /// Temporary download URL
        /// </summary>
        /// <value>Temporary download URL</value>
        [DataMember(Name="download_key", EmitDefaultValue=false)]
        public string DownloadKey { get; set; }

        /// <summary>
        /// File name
        /// </summary>
        /// <value>File name</value>
        [DataMember(Name="file_name", EmitDefaultValue=false)]
        public string FileName { get; set; }

        /// <summary>
        /// File UUID
        /// </summary>
        /// <value>File UUID</value>
        [DataMember(Name="file_uuid", EmitDefaultValue=false)]
        public string FileUuid { get; set; }

        /// <summary>
        /// Mime Type
        /// </summary>
        /// <value>Mime Type</value>
        [DataMember(Name="mime_type", EmitDefaultValue=false)]
        public string MimeType { get; set; }

        /// <summary>
        /// Temporary upload key
        /// </summary>
        /// <value>Temporary upload key</value>
        [DataMember(Name="upload_key", EmitDefaultValue=false)]
        public string UploadKey { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class WorkflowAttachment {\n");
            sb.Append("  DownloadKey: ").Append(DownloadKey).Append("\n");
            sb.Append("  FileName: ").Append(FileName).Append("\n");
            sb.Append("  FileUuid: ").Append(FileUuid).Append("\n");
            sb.Append("  MimeType: ").Append(MimeType).Append("\n");
            sb.Append("  UploadKey: ").Append(UploadKey).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as WorkflowAttachment);
        }

        /// <summary>
        /// Returns true if WorkflowAttachment instances are equal
        /// </summary>
        /// <param name="input">Instance of WorkflowAttachment to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(WorkflowAttachment input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.DownloadKey == input.DownloadKey ||
                    (this.DownloadKey != null &&
                    this.DownloadKey.Equals(input.DownloadKey))
                ) && 
                (
                    this.FileName == input.FileName ||
                    (this.FileName != null &&
                    this.FileName.Equals(input.FileName))
                ) && 
                (
                    this.FileUuid == input.FileUuid ||
                    (this.FileUuid != null &&
                    this.FileUuid.Equals(input.FileUuid))
                ) && 
                (
                    this.MimeType == input.MimeType ||
                    (this.MimeType != null &&
                    this.MimeType.Equals(input.MimeType))
                ) && 
                (
                    this.UploadKey == input.UploadKey ||
                    (this.UploadKey != null &&
                    this.UploadKey.Equals(input.UploadKey))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.DownloadKey != null)
                    hashCode = hashCode * 59 + this.DownloadKey.GetHashCode();
                if (this.FileName != null)
                    hashCode = hashCode * 59 + this.FileName.GetHashCode();
                if (this.FileUuid != null)
                    hashCode = hashCode * 59 + this.FileUuid.GetHashCode();
                if (this.MimeType != null)
                    hashCode = hashCode * 59 + this.MimeType.GetHashCode();
                if (this.UploadKey != null)
                    hashCode = hashCode * 59 + this.UploadKey.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
