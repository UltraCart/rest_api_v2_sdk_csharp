/*
 * UltraCart Rest API V2
 *
 * UltraCart REST API Version 2
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@ultracart.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = com.ultracart.admin.v2.Client.OpenAPIDateConverter;

namespace com.ultracart.admin.v2.Model
{
    /// <summary>
    /// WorkflowNote
    /// </summary>
    [DataContract]
    public partial class WorkflowNote :  IEquatable<WorkflowNote>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="WorkflowNote" /> class.
        /// </summary>
        /// <param name="attachments">Attachments to the Workflow Task.</param>
        /// <param name="editDts">Date/time that the note was edited.</param>
        /// <param name="note">Note.</param>
        /// <param name="noteDts">Date/time that the note was written.</param>
        /// <param name="originalNote">Note originally written before any edits.</param>
        /// <param name="user">user.</param>
        public WorkflowNote(List<WorkflowAttachment> attachments = default(List<WorkflowAttachment>), string editDts = default(string), string note = default(string), string noteDts = default(string), string originalNote = default(string), WorkflowUser user = default(WorkflowUser))
        {
            this.Attachments = attachments;
            this.EditDts = editDts;
            this.Note = note;
            this.NoteDts = noteDts;
            this.OriginalNote = originalNote;
            this.User = user;
        }

        /// <summary>
        /// Attachments to the Workflow Task
        /// </summary>
        /// <value>Attachments to the Workflow Task</value>
        [DataMember(Name="attachments", EmitDefaultValue=false)]
        public List<WorkflowAttachment> Attachments { get; set; }

        /// <summary>
        /// Date/time that the note was edited
        /// </summary>
        /// <value>Date/time that the note was edited</value>
        [DataMember(Name="edit_dts", EmitDefaultValue=false)]
        public string EditDts { get; set; }

        /// <summary>
        /// Note
        /// </summary>
        /// <value>Note</value>
        [DataMember(Name="note", EmitDefaultValue=false)]
        public string Note { get; set; }

        /// <summary>
        /// Date/time that the note was written
        /// </summary>
        /// <value>Date/time that the note was written</value>
        [DataMember(Name="note_dts", EmitDefaultValue=false)]
        public string NoteDts { get; set; }

        /// <summary>
        /// Note originally written before any edits
        /// </summary>
        /// <value>Note originally written before any edits</value>
        [DataMember(Name="original_note", EmitDefaultValue=false)]
        public string OriginalNote { get; set; }

        /// <summary>
        /// Gets or Sets User
        /// </summary>
        [DataMember(Name="user", EmitDefaultValue=false)]
        public WorkflowUser User { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class WorkflowNote {\n");
            sb.Append("  Attachments: ").Append(Attachments).Append("\n");
            sb.Append("  EditDts: ").Append(EditDts).Append("\n");
            sb.Append("  Note: ").Append(Note).Append("\n");
            sb.Append("  NoteDts: ").Append(NoteDts).Append("\n");
            sb.Append("  OriginalNote: ").Append(OriginalNote).Append("\n");
            sb.Append("  User: ").Append(User).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as WorkflowNote);
        }

        /// <summary>
        /// Returns true if WorkflowNote instances are equal
        /// </summary>
        /// <param name="input">Instance of WorkflowNote to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(WorkflowNote input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Attachments == input.Attachments ||
                    this.Attachments != null &&
                    input.Attachments != null &&
                    this.Attachments.SequenceEqual(input.Attachments)
                ) && 
                (
                    this.EditDts == input.EditDts ||
                    (this.EditDts != null &&
                    this.EditDts.Equals(input.EditDts))
                ) && 
                (
                    this.Note == input.Note ||
                    (this.Note != null &&
                    this.Note.Equals(input.Note))
                ) && 
                (
                    this.NoteDts == input.NoteDts ||
                    (this.NoteDts != null &&
                    this.NoteDts.Equals(input.NoteDts))
                ) && 
                (
                    this.OriginalNote == input.OriginalNote ||
                    (this.OriginalNote != null &&
                    this.OriginalNote.Equals(input.OriginalNote))
                ) && 
                (
                    this.User == input.User ||
                    (this.User != null &&
                    this.User.Equals(input.User))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Attachments != null)
                    hashCode = hashCode * 59 + this.Attachments.GetHashCode();
                if (this.EditDts != null)
                    hashCode = hashCode * 59 + this.EditDts.GetHashCode();
                if (this.Note != null)
                    hashCode = hashCode * 59 + this.Note.GetHashCode();
                if (this.NoteDts != null)
                    hashCode = hashCode * 59 + this.NoteDts.GetHashCode();
                if (this.OriginalNote != null)
                    hashCode = hashCode * 59 + this.OriginalNote.GetHashCode();
                if (this.User != null)
                    hashCode = hashCode * 59 + this.User.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
