/*
 * UltraCart Rest API V2
 *
 * UltraCart REST API Version 2
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@ultracart.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = com.ultracart.admin.v2.Client.OpenAPIDateConverter;

namespace com.ultracart.admin.v2.Model
{
    /// <summary>
    /// WorkflowTaskHistory
    /// </summary>
    [DataContract]
    public partial class WorkflowTaskHistory :  IEquatable<WorkflowTaskHistory>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="WorkflowTaskHistory" /> class.
        /// </summary>
        /// <param name="activityDts">Date/time that the workflow task history record was created.</param>
        /// <param name="description">Description of the activity.</param>
        /// <param name="ipAddress">IP Address that originated the activity.</param>
        /// <param name="user">user.</param>
        public WorkflowTaskHistory(string activityDts = default(string), string description = default(string), string ipAddress = default(string), WorkflowUser user = default(WorkflowUser))
        {
            this.ActivityDts = activityDts;
            this.Description = description;
            this.IpAddress = ipAddress;
            this.User = user;
        }

        /// <summary>
        /// Date/time that the workflow task history record was created
        /// </summary>
        /// <value>Date/time that the workflow task history record was created</value>
        [DataMember(Name="activity_dts", EmitDefaultValue=false)]
        public string ActivityDts { get; set; }

        /// <summary>
        /// Description of the activity
        /// </summary>
        /// <value>Description of the activity</value>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }

        /// <summary>
        /// IP Address that originated the activity
        /// </summary>
        /// <value>IP Address that originated the activity</value>
        [DataMember(Name="ip_address", EmitDefaultValue=false)]
        public string IpAddress { get; set; }

        /// <summary>
        /// Gets or Sets User
        /// </summary>
        [DataMember(Name="user", EmitDefaultValue=false)]
        public WorkflowUser User { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class WorkflowTaskHistory {\n");
            sb.Append("  ActivityDts: ").Append(ActivityDts).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  IpAddress: ").Append(IpAddress).Append("\n");
            sb.Append("  User: ").Append(User).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as WorkflowTaskHistory);
        }

        /// <summary>
        /// Returns true if WorkflowTaskHistory instances are equal
        /// </summary>
        /// <param name="input">Instance of WorkflowTaskHistory to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(WorkflowTaskHistory input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ActivityDts == input.ActivityDts ||
                    (this.ActivityDts != null &&
                    this.ActivityDts.Equals(input.ActivityDts))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.IpAddress == input.IpAddress ||
                    (this.IpAddress != null &&
                    this.IpAddress.Equals(input.IpAddress))
                ) && 
                (
                    this.User == input.User ||
                    (this.User != null &&
                    this.User.Equals(input.User))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ActivityDts != null)
                    hashCode = hashCode * 59 + this.ActivityDts.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                if (this.IpAddress != null)
                    hashCode = hashCode * 59 + this.IpAddress.GetHashCode();
                if (this.User != null)
                    hashCode = hashCode * 59 + this.User.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
