/* 
 * UltraCart Rest API V2
 *
 * UltraCart REST API Version 2
 *
 * OpenAPI spec version: 2.0.0
 * Contact: support@ultracart.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = com.ultracart.admin.v2.Client.SwaggerDateConverter;

namespace com.ultracart.admin.v2.Model
{
    /// <summary>
    /// WorkflowUser
    /// </summary>
    [DataContract]
    public partial class WorkflowUser :  IEquatable<WorkflowUser>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="WorkflowUser" /> class.
        /// </summary>
        /// <param name="user">The user.</param>
        /// <param name="userIconUrl">The user icon URL if available.</param>
        /// <param name="userId">User ID.</param>
        public WorkflowUser(string user = default(string), string userIconUrl = default(string), int? userId = default(int?))
        {
            this.User = user;
            this.UserIconUrl = userIconUrl;
            this.UserId = userId;
        }
        
        /// <summary>
        /// The user
        /// </summary>
        /// <value>The user</value>
        [DataMember(Name="user", EmitDefaultValue=false)]
        public string User { get; set; }

        /// <summary>
        /// The user icon URL if available
        /// </summary>
        /// <value>The user icon URL if available</value>
        [DataMember(Name="user_icon_url", EmitDefaultValue=false)]
        public string UserIconUrl { get; set; }

        /// <summary>
        /// User ID
        /// </summary>
        /// <value>User ID</value>
        [DataMember(Name="user_id", EmitDefaultValue=false)]
        public int? UserId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class WorkflowUser {\n");
            sb.Append("  User: ").Append(User).Append("\n");
            sb.Append("  UserIconUrl: ").Append(UserIconUrl).Append("\n");
            sb.Append("  UserId: ").Append(UserId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as WorkflowUser);
        }

        /// <summary>
        /// Returns true if WorkflowUser instances are equal
        /// </summary>
        /// <param name="input">Instance of WorkflowUser to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(WorkflowUser input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.User == input.User ||
                    (this.User != null &&
                    this.User.Equals(input.User))
                ) && 
                (
                    this.UserIconUrl == input.UserIconUrl ||
                    (this.UserIconUrl != null &&
                    this.UserIconUrl.Equals(input.UserIconUrl))
                ) && 
                (
                    this.UserId == input.UserId ||
                    (this.UserId != null &&
                    this.UserId.Equals(input.UserId))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.User != null)
                    hashCode = hashCode * 59 + this.User.GetHashCode();
                if (this.UserIconUrl != null)
                    hashCode = hashCode * 59 + this.UserIconUrl.GetHashCode();
                if (this.UserId != null)
                    hashCode = hashCode * 59 + this.UserId.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
